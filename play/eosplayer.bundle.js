!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=102)}([function(t,e,r){var n=r(2),i=n.Buffer;function u(t,e){for(var r in t)e[r]=t[r]}function o(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(u(n,e),e.Buffer=o),u(i,o),o.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},o.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},o.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},o.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(135),i=r(136),u=r(72);function o(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,r){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,r)}function f(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=l(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!a.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=s(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(a.isBuffer(e)){var r=0|p(e.length);return 0===(t=s(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?s(t,0):l(t,e);if("Buffer"===e.type&&u(e.data))return l(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=s(t,e<0?0:0|p(e)),!a.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=s(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return P(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return P(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function g(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var u,o=1,s=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,s/=2,a/=2,r/=2}function f(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var c=-1;for(u=r;u<s;u++)if(f(t,u)===f(e,-1===c?0:u-c)){if(-1===c&&(c=u),u-c+1===a)return c*o}else-1!==c&&(u-=u-c),c=-1}else for(r+a>s&&(r=s-a),u=r;u>=0;u--){for(var h=!0,l=0;l<a;l++)if(f(t,u+l)!==f(e,l)){h=!1;break}if(h)return u}return-1}function v(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var u=e.length;if(u%2!=0)throw new TypeError("Invalid hex string");n>u/2&&(n=u/2);for(var o=0;o<n;++o){var s=parseInt(e.substr(2*o,2),16);if(isNaN(s))return o;t[r+o]=s}return o}function b(t,e,r,n){return z(P(e,t.length-r),t,r,n)}function w(t,e,r,n){return z(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function E(t,e,r,n){return w(t,e,r,n)}function _(t,e,r,n){return z(q(e),t,r,n)}function A(t,e,r,n){return z(function(t,e){for(var r,n,i,u=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,i=r%256,u.push(i),u.push(n);return u}(e,t.length-r),t,r,n)}function B(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function C(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var u,o,s,a,f=t[i],c=null,h=f>239?4:f>223?3:f>191?2:1;if(i+h<=r)switch(h){case 1:f<128&&(c=f);break;case 2:128==(192&(u=t[i+1]))&&(a=(31&f)<<6|63&u)>127&&(c=a);break;case 3:u=t[i+1],o=t[i+2],128==(192&u)&&128==(192&o)&&(a=(15&f)<<12|(63&u)<<6|63&o)>2047&&(a<55296||a>57343)&&(c=a);break;case 4:u=t[i+1],o=t[i+2],s=t[i+3],128==(192&u)&&128==(192&o)&&128==(192&s)&&(a=(15&f)<<18|(63&u)<<12|(63&o)<<6|63&s)>65535&&a<1114112&&(c=a)}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=h}return function(t){var e=t.length;if(e<=F)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=F));return r}(n)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,r){return f(null,t,e,r)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,r){return function(t,e,r,n){return c(e),e<=0?s(t,e):void 0!==r?"string"==typeof n?s(t,e).fill(r,n):s(t,e).fill(r):s(t,e)}(null,t,e,r)},a.allocUnsafe=function(t){return h(null,t)},a.allocUnsafeSlow=function(t){return h(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,u=Math.min(r,n);i<u;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!u(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=a.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(!a.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},a.byteLength=d,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):function(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return S(this,e,r);case"utf8":case"utf-8":return C(this,e,r);case"ascii":return D(this,e,r);case"latin1":case"binary":return x(this,e,r);case"base64":return B(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,r,n,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(e>>>=0,r>>>=0,n>>>=0,i>>>=0,this===t)return 0;for(var u=i-n,o=r-e,s=Math.min(u,o),f=this.slice(n,i),c=t.slice(e,r),h=0;h<s;++h)if(f[h]!==c[h]){u=f[h],o=c[h];break}return u<o?-1:o<u?1:0},a.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},a.prototype.indexOf=function(t,e,r){return g(this,t,e,r,!0)},a.prototype.lastIndexOf=function(t,e,r){return g(this,t,e,r,!1)},a.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var u=!1;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return b(this,t,e,r);case"ascii":return w(this,t,e,r);case"latin1":case"binary":return E(this,t,e,r);case"base64":return _(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(u)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),u=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var F=4096;function D(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function S(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",u=e;u<r;++u)i+=U(t[u]);return i}function T(t,e,r){for(var n=t.slice(e,r),i="",u=0;u<n.length;u+=2)i+=String.fromCharCode(n[u]+256*n[u+1]);return i}function k(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function M(t,e,r,n,i,u){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<u)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function I(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,u=Math.min(t.length-r,2);i<u;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function O(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,u=Math.min(t.length-r,4);i<u;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function L(t,e,r,n,i,u){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function R(t,e,r,n,u){return u||L(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function j(t,e,r,n,u){return u||L(t,0,r,8),i.write(t,e,r,n,52,8),r+8}a.prototype.slice=function(t,e){var r,n=this.length;if(t=~~t,e=void 0===e?n:~~e,t<0?(t+=n)<0&&(t=0):t>n&&(t=n),e<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;r=new a(i,void 0);for(var u=0;u<i;++u)r[u]=this[u+t]}return r},a.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=this[t],i=1,u=0;++u<e&&(i*=256);)n+=this[t+u]*i;return n},a.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},a.prototype.readUInt8=function(t,e){return e||k(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||k(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||k(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=this[t],i=1,u=0;++u<e&&(i*=256);)n+=this[t+u]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=e,i=1,u=this[t+--n];n>0&&(i*=256);)u+=this[t+--n]*i;return u>=(i*=128)&&(u-=Math.pow(2,8*e)),u},a.prototype.readInt8=function(t,e){return e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||k(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt16BE=function(t,e){e||k(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt32LE=function(t,e){return e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||k(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||k(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||k(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||k(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||M(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,u=0;for(this[e]=255&t;++u<r&&(i*=256);)this[e+u]=t/i&255;return e+r},a.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||M(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,u=1;for(this[e+i]=255&t;--i>=0&&(u*=256);)this[e+i]=t/u&255;return e+r},a.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):O(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);M(this,t,e,r,i-1,-i)}var u=0,o=1,s=0;for(this[e]=255&t;++u<r&&(o*=256);)t<0&&0===s&&0!==this[e+u-1]&&(s=1),this[e+u]=(t/o>>0)-s&255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);M(this,t,e,r,i-1,-i)}var u=r-1,o=1,s=0;for(this[e+u]=255&t;--u>=0&&(o*=256);)t<0&&0===s&&0!==this[e+u+1]&&(s=1),this[e+u]=(t/o>>0)-s&255;return e+r},a.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):O(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,r){return R(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return R(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return j(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return j(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,u=n-r;if(this===t&&r<e&&e<n)for(i=u-1;i>=0;--i)t[i+e]=this[i+r];else if(u<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<u;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+u),e);return u},a.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!a.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var u;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(u=e;u<r;++u)this[u]=t;else{var o=a.isBuffer(t)?t:P(new a(t,n).toString()),s=o.length;for(u=0;u<r-e;++u)this[u+e]=o[u%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function P(t,e){var r;e=e||1/0;for(var n=t.length,i=null,u=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&u.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&u.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&u.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&u.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;u.push(r)}else if(r<2048){if((e-=2)<0)break;u.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;u.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;u.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return u}function q(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(5))},function(t,e,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function n(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,i=0,u=Math.min(r,n);i<u;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var u=r(159),o=Object.prototype.hasOwnProperty,s=Array.prototype.slice,a="foo"===function(){}.name;function f(t){return Object.prototype.toString.call(t)}function c(t){return!i(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var h=t.exports=m,l=/\s*function\s+([^\(\s]*)\s*/;function p(t){if(u.isFunction(t)){if(a)return t.name;var e=t.toString().match(l);return e&&e[1]}}function d(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function y(t){if(a||!u.isFunction(t))return u.inspect(t);var e=p(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,r,n,i){throw new h.AssertionError({message:r,actual:t,expected:e,operator:n,stackStartFunction:i})}function m(t,e){t||g(t,!0,e,"==",h.ok)}function v(t,e,r,o){if(t===e)return!0;if(i(t)&&i(e))return 0===n(t,e);if(u.isDate(t)&&u.isDate(e))return t.getTime()===e.getTime();if(u.isRegExp(t)&&u.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(c(t)&&c(e)&&f(t)===f(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===n(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var a=(o=o||{actual:[],expected:[]}).actual.indexOf(t);return-1!==a&&a===o.expected.indexOf(e)||(o.actual.push(t),o.expected.push(e),function(t,e,r,n){if(null===t||void 0===t||null===e||void 0===e)return!1;if(u.isPrimitive(t)||u.isPrimitive(e))return t===e;if(r&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=b(t),o=b(e);if(i&&!o||!i&&o)return!1;if(i)return t=s.call(t),e=s.call(e),v(t,e,r);var a,f,c=_(t),h=_(e);if(c.length!==h.length)return!1;for(c.sort(),h.sort(),f=c.length-1;f>=0;f--)if(c[f]!==h[f])return!1;for(f=c.length-1;f>=0;f--)if(a=c[f],!v(t[a],e[a],r,n))return!1;return!0}(t,e,r,o))}return r?t===e:t==e}function b(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function w(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function E(t,e,r,n){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),t&&!i&&g(i,r,"Missing expected exception"+n);var o="string"==typeof n,s=!t&&u.isError(i),a=!t&&i&&!r;if((s&&o&&w(i,r)||a)&&g(i,r,"Got unwanted exception"+n),t&&i&&r&&!w(i,r)||!t&&i)throw i}h.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return d(y(t.actual),128)+" "+t.operator+" "+d(y(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var r=new Error;if(r.stack){var n=r.stack,i=p(e),u=n.indexOf("\n"+i);if(u>=0){var o=n.indexOf("\n",u+1);n=n.substring(o+1)}this.stack=n}}},u.inherits(h.AssertionError,Error),h.fail=g,h.ok=m,h.equal=function(t,e,r){t!=e&&g(t,e,r,"==",h.equal)},h.notEqual=function(t,e,r){t==e&&g(t,e,r,"!=",h.notEqual)},h.deepEqual=function(t,e,r){v(t,e,!1)||g(t,e,r,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(t,e,r){v(t,e,!0)||g(t,e,r,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(t,e,r){v(t,e,!1)&&g(t,e,r,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function t(e,r,n){v(e,r,!0)&&g(e,r,n,"notDeepStrictEqual",t)},h.strictEqual=function(t,e,r){t!==e&&g(t,e,r,"===",h.strictEqual)},h.notStrictEqual=function(t,e,r){t===e&&g(t,e,r,"!==",h.notStrictEqual)},h.throws=function(t,e,r){E(!0,t,e,r)},h.doesNotThrow=function(t,e,r){E(!1,t,e,r)},h.ifError=function(t){if(t)throw t};var _=Object.keys||function(t){var e=[];for(var r in t)o.call(t,r)&&e.push(r);return e}}).call(this,r(5))},function(t,e,r){var n=r(42)("wks"),i=r(31),u=r(6).Symbol,o="function"==typeof u;(t.exports=function(t){return n[t]||(n[t]=o&&u[t]||(o?u:i)("Symbol."+t))}).store=n},function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e,r){var n=r(88);r(162),t.exports=n},function(t,e){var r=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(0).Buffer,i=r(79).Transform,u=r(53).StringDecoder;function o(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(1)(o,i),o.prototype.update=function(t,e,r){"string"==typeof t&&(t=n.from(t,e));var i=this._update(t);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},o.prototype.setAutoPadding=function(){},o.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},o.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},o.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},o.prototype._transform=function(t,e,r){var n;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){n=t}finally{r(n)}},o.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},o.prototype._finalOrDigest=function(t){var e=this.__final()||n.alloc(0);return t&&(e=this._toString(e,t,!0)),e},o.prototype._toString=function(t,e,r){if(this._decoder||(this._decoder=new u(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var n=this._decoder.write(t);return r&&(n+=this._decoder.end()),n},t.exports=o},function(t,e,r){"use strict";var n=r(33),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=h;var u=r(25);u.inherits=r(1);var o=r(80),s=r(52);u.inherits(h,o);for(var a=i(s.prototype),f=0;f<a.length;f++){var c=a[f];h.prototype[c]||(h.prototype[c]=s.prototype[c])}function h(t){if(!(this instanceof h))return new h(t);o.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||n.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),n.nextTick(e,t)}},function(t,e,r){"use strict";var n=r(56),i=r(169);t.exports={sha1:function(t,e){return n("sha1").update(t).digest(e)},sha256:function(t,e){return n("sha256").update(t).digest(e)},sha512:function(t,e){return n("sha512").update(t).digest(e)},HmacSHA256:function(t,e){return i("sha256",e).update(t).digest()},ripemd160:function(t){return n("rmd160").update(t).digest()}}},function(t,e,r){var n=r(14),i=r(30);t.exports=r(15)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(21),i=r(64),u=r(38),o=Object.defineProperty;e.f=r(15)?Object.defineProperty:function(t,e,r){if(n(t),e=u(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){t.exports=!r(29)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(113),i=r(37);t.exports=function(t){return n(i(t))}},function(t,e){var r,n,i=t.exports={};function u(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===u||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:u}catch(t){r=u}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var a,f=[],c=!1,h=-1;function l(){c&&a&&(c=!1,a.length?f=a.concat(f):h=-1,f.length&&p())}function p(){if(!c){var t=s(l);c=!0;for(var e=f.length;e;){for(a=f,f=[];++h<e;)a&&a[h].run();h=-1,e=f.length}a=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];f.push(new d(t,e)),1!==f.length||c||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){var n,i,u;
/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */i=[r(137)],void 0===(u="function"==typeof(n=function(t){"use strict";var e=function(t,r,i){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===r&&(r=e.DEFAULT_ENDIAN),void 0===i&&(i=e.DEFAULT_NOASSERT),!i){if((t|=0)<0)throw RangeError("Illegal capacity");r=!!r,i=!!i}this.buffer=0===t?n:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=r,this.noAssert=i};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var r=e.prototype;r.__isByteBuffer__,Object.defineProperty(r,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var n=new ArrayBuffer(0),i=String.fromCharCode;function u(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function o(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+i.apply(String,t);t.length+arguments.length>1024&&(e.push(i.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function s(t,e,r,n,i){var u,o,s=8*i-n-1,a=(1<<s)-1,f=a>>1,c=-7,h=r?i-1:0,l=r?-1:1,p=t[e+h];for(h+=l,u=p&(1<<-c)-1,p>>=-c,c+=s;c>0;u=256*u+t[e+h],h+=l,c-=8);for(o=u&(1<<-c)-1,u>>=-c,c+=n;c>0;o=256*o+t[e+h],h+=l,c-=8);if(0===u)u=1-f;else{if(u===a)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),u-=f}return(p?-1:1)*o*Math.pow(2,u-n)}function a(t,e,r,n,i,u){var o,s,a,f=8*u-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:u-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-o))<1&&(o--,a*=2),(e+=o+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(o++,a/=2),o+h>=c?(s=0,o=c):o+h>=1?(s=(e*a-1)*Math.pow(2,i),o+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;t[r+p]=255&s,p+=d,s/=256,i-=8);for(o=o<<i|s,f+=i;f>0;t[r+p]=255&o,p+=d,o/=256,f-=8);t[r+p-d]|=128*y}e.accessor=function(){return Uint8Array},e.allocate=function(t,r,n){return new e(t,r,n)},e.concat=function(t,r,n,i){"boolean"!=typeof r&&"string"==typeof r||(i=n,n=r,r=void 0);for(var u,o=0,s=0,a=t.length;s<a;++s)e.isByteBuffer(t[s])||(t[s]=e.wrap(t[s],r)),(u=t[s].limit-t[s].offset)>0&&(o+=u);if(0===o)return new e(0,n,i);var f,c=new e(o,n,i);for(s=0;s<a;)(u=(f=t[s++]).limit-f.offset)<=0||(c.view.set(f.view.subarray(f.offset,f.limit),c.offset),c.offset+=u);return c.limit=c.offset,c.offset=0,c},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,n,i,u){if("string"!=typeof n&&(u=i,i=n,n=void 0),"string"==typeof t)switch(void 0===n&&(n="utf8"),n){case"base64":return e.fromBase64(t,i);case"hex":return e.fromHex(t,i);case"binary":return e.fromBinary(t,i);case"utf8":return e.fromUTF8(t,i);case"debug":return e.fromDebug(t,i);default:throw Error("Unsupported encoding: "+n)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var o;if(e.isByteBuffer(t))return(o=r.clone.call(t)).markedOffset=-1,o;if(t instanceof Uint8Array)o=new e(0,i,u),t.length>0&&(o.buffer=t.buffer,o.offset=t.byteOffset,o.limit=t.byteOffset+t.byteLength,o.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)o=new e(0,i,u),t.byteLength>0&&(o.buffer=t,o.offset=0,o.limit=t.byteLength,o.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(o=new e(t.length,i,u)).limit=t.length;for(var s=0;s<t.length;++s)o.view[s]=t[s]}return o},r.writeBitSet=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n,i=e,u=t.length,o=u>>3,s=0;for(e+=this.writeVarint32(u,e);o--;)n=1&!!t[s++]|(1&!!t[s++])<<1|(1&!!t[s++])<<2|(1&!!t[s++])<<3|(1&!!t[s++])<<4|(1&!!t[s++])<<5|(1&!!t[s++])<<6|(1&!!t[s++])<<7,this.writeByte(n,e++);if(s<u){var a=0;for(n=0;s<u;)n|=(1&!!t[s++])<<a++;this.writeByte(n,e++)}return r?(this.offset=e,this):e-i},r.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var r,n=this.readVarint32(t),i=n.value,u=i>>3,o=0,s=[];for(t+=n.length;u--;)r=this.readByte(t++),s[o++]=!!(1&r),s[o++]=!!(2&r),s[o++]=!!(4&r),s[o++]=!!(8&r),s[o++]=!!(16&r),s[o++]=!!(32&r),s[o++]=!!(64&r),s[o++]=!!(128&r);if(o<i){var a=0;for(r=this.readByte(t++);o<i;)s[o++]=!!(r>>a++&1)}return e&&(this.offset=t),s},r.readBytes=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var n=this.slice(e,e+t);return r&&(this.offset+=t),n},r.writeBytes=r.append,r.writeInt8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeByte=r.writeInt8,r.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return 128==(128&r)&&(r=-(255-r+1)),e&&(this.offset+=1),r},r.readByte=r.readInt8,r.writeUint8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeUInt8=r.writeUint8,r.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return e&&(this.offset+=1),r},r.readUInt8=r.readUint8,r.writeInt16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeShort=r.writeInt16,r.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),32768==(32768&r)&&(r=-(65535-r+1)),e&&(this.offset+=2),r},r.readShort=r.readInt16,r.writeUint16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeUInt16=r.writeUint16,r.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),e&&(this.offset+=2),r},r.readUInt16=r.readUint16,r.writeInt32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeInt=r.writeInt32,r.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),r|=0,e&&(this.offset+=4),r},r.readInt=r.readInt32,r.writeUint32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeUInt32=r.writeUint32,r.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),e&&(this.offset+=4),r},r.readUInt32=r.readUint32,t&&(r.writeInt64=function(e,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var i=this.buffer.byteLength;r>i&&this.resize((i*=2)>r?i:r),r-=8;var u=e.low,o=e.high;return this.littleEndian?(this.view[r+3]=u>>>24&255,this.view[r+2]=u>>>16&255,this.view[r+1]=u>>>8&255,this.view[r]=255&u,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=u>>>24&255,this.view[r+1]=u>>>16&255,this.view[r+2]=u>>>8&255,this.view[r+3]=255&u),n&&(this.offset+=8),this},r.writeLong=r.writeInt64,r.readInt64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var n=0,i=0;this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0);var u=new t(n,i,!1);return r&&(this.offset+=8),u},r.readLong=r.readInt64,r.writeUint64=function(e,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var i=this.buffer.byteLength;r>i&&this.resize((i*=2)>r?i:r),r-=8;var u=e.low,o=e.high;return this.littleEndian?(this.view[r+3]=u>>>24&255,this.view[r+2]=u>>>16&255,this.view[r+1]=u>>>8&255,this.view[r]=255&u,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=u>>>24&255,this.view[r+1]=u>>>16&255,this.view[r+2]=u>>>8&255,this.view[r+3]=255&u),n&&(this.offset+=8),this},r.writeUInt64=r.writeUint64,r.readUint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var n=0,i=0;this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0);var u=new t(n,i,!0);return r&&(this.offset+=8),u},r.readUInt64=r.readUint64),r.writeFloat32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=4,a(this.view,t,e,this.littleEndian,23,4),r&&(this.offset+=4),this},r.writeFloat=r.writeFloat32,r.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=s(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),r},r.readFloat=r.readFloat32,r.writeFloat64=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=8,a(this.view,t,e,this.littleEndian,52,8),r&&(this.offset+=8),this},r.writeDouble=r.writeFloat64,r.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var r=s(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),r},r.readDouble=r.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},r.writeVarint32=function(t,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var i,u=e.calculateVarint32(t);r+=u;var o=this.buffer.byteLength;for(r>o&&this.resize((o*=2)>r?o:r),r-=u,t>>>=0;t>=128;)i=127&t|128,this.view[r++]=i,t>>>=7;return this.view[r++]=t,n?(this.offset=r,this):u},r.writeVarint32ZigZag=function(t,r){return this.writeVarint32(e.zigZagEncode32(t),r)},r.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,n=0,i=0;do{if(!this.noAssert&&t>this.limit){var u=Error("Truncated");throw u.truncated=!0,u}r=this.view[t++],n<5&&(i|=(127&r)<<7*n),++n}while(0!=(128&r));return i|=0,e?(this.offset=t,i):{value:i,length:n}},r.readVarint32ZigZag=function(t){var r=this.readVarint32(t);return"object"==typeof r?r.value=e.zigZagDecode32(r.value):r=e.zigZagDecode32(r),r},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var r=e.toInt()>>>0,n=e.shiftRightUnsigned(28).toInt()>>>0,i=e.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==n?r<16384?r<128?1:2:r<1<<21?3:4:n<16384?n<128?5:6:n<1<<21?7:8:i<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},r.writeVarint64=function(r,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"==typeof r)r=t.fromNumber(r);else if("string"==typeof r)r=t.fromString(r);else if(!(r&&r instanceof t))throw TypeError("Illegal value: "+r+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof r?r=t.fromNumber(r,!1):"string"==typeof r?r=t.fromString(r,!1):!1!==r.unsigned&&(r=r.toSigned());var u=e.calculateVarint64(r),o=r.toInt()>>>0,s=r.shiftRightUnsigned(28).toInt()>>>0,a=r.shiftRightUnsigned(56).toInt()>>>0;n+=u;var f=this.buffer.byteLength;switch(n>f&&this.resize((f*=2)>n?f:n),n-=u,u){case 10:this.view[n+9]=a>>>7&1;case 9:this.view[n+8]=9!==u?128|a:127&a;case 8:this.view[n+7]=8!==u?s>>>21|128:s>>>21&127;case 7:this.view[n+6]=7!==u?s>>>14|128:s>>>14&127;case 6:this.view[n+5]=6!==u?s>>>7|128:s>>>7&127;case 5:this.view[n+4]=5!==u?128|s:127&s;case 4:this.view[n+3]=4!==u?o>>>21|128:o>>>21&127;case 3:this.view[n+2]=3!==u?o>>>14|128:o>>>14&127;case 2:this.view[n+1]=2!==u?o>>>7|128:o>>>7&127;case 1:this.view[n]=1!==u?128|o:127&o}return i?(this.offset+=u,this):u},r.writeVarint64ZigZag=function(t,r){return this.writeVarint64(e.zigZagEncode64(t),r)},r.readVarint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=e,i=0,u=0,o=0,s=0;if(s=this.view[e++],i=127&s,128&s&&(s=this.view[e++],i|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<7,128&s||this.noAssert&&void 0===s))))))))))throw Error("Buffer overrun");var a=t.fromBits(i|u<<28,u>>>4|o<<24,!1);return r?(this.offset=e,a):{value:a,length:e-n}},r.readVarint64ZigZag=function(r){var n=this.readVarint64(r);return n&&n.value instanceof t?n.value=e.zigZagDecode64(n.value):n=e.zigZagDecode64(n),n}),r.writeCString=function(t,e){var r=void 0===e;r&&(e=this.offset);var n,i=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(n=0;n<i;++n)if(0===t.charCodeAt(n))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}i=c.calculateUTF16asUTF8(u(t))[1],e+=i+1;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=i+1,c.encodeUTF16toUTF8(u(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,r?(this.offset=e,this):i},r.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,n=t,i=-1;return c.decodeUTF8toUTF16(function(){if(0===i)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(i=this.view[t++])?null:i}.bind(this),r=o(),!0),e?(this.offset=t,r()):{string:r(),length:t-n}},r.writeIString=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n,i=e;n=c.calculateUTF16asUTF8(u(t),this.noAssert)[1],e+=4+n;var o=this.buffer.byteLength;if(e>o&&this.resize((o*=2)>e?o:e),e-=4+n,this.littleEndian?(this.view[e+3]=n>>>24&255,this.view[e+2]=n>>>16&255,this.view[e+1]=n>>>8&255,this.view[e]=255&n):(this.view[e]=n>>>24&255,this.view[e+1]=n>>>16&255,this.view[e+2]=n>>>8&255,this.view[e+3]=255&n),e+=4,c.encodeUTF16toUTF8(u(t),function(t){this.view[e++]=t}.bind(this)),e!==i+4+n)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+n));return r?(this.offset=e,this):e-i},r.readIString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=t,i=this.readUint32(t),u=this.readUTF8String(i,e.METRICS_BYTES,t+=4);return t+=u.length,r?(this.offset=t,u.string):{string:u.string,length:t-n}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",r.writeUTF8String=function(t,e){var r,n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i=e;r=c.calculateUTF16asUTF8(u(t))[1],e+=r;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=r,c.encodeUTF16toUTF8(u(t),function(t){this.view[e++]=t}.bind(this)),n?(this.offset=e,this):e-i},r.writeString=r.writeUTF8String,e.calculateUTF8Chars=function(t){return c.calculateUTF16asUTF8(u(t))[0]},e.calculateUTF8Bytes=function(t){return c.calculateUTF16asUTF8(u(t))[1]},e.calculateString=e.calculateUTF8Bytes,r.readUTF8String=function(t,r,n){"number"==typeof r&&(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),void 0===r&&(r=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var u,s=0,a=n;if(r===e.METRICS_CHARS){if(u=o(),c.decodeUTF8(function(){return s<t&&n<this.limit?this.view[n++]:null}.bind(this),function(t){++s,c.UTF8toUTF16(t,u)}),s!==t)throw RangeError("Illegal range: Truncated data, "+s+" == "+t);return i?(this.offset=n,u()):{string:u(),length:n-a}}if(r===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+"+t+") <= "+this.buffer.byteLength)}var f=n+t;if(c.decodeUTF8toUTF16(function(){return n<f?this.view[n++]:null}.bind(this),u=o(),this.noAssert),n!==f)throw RangeError("Illegal range: Truncated data, "+n+" == "+f);return i?(this.offset=n,u()):{string:u(),length:n-a}}throw TypeError("Unsupported metrics: "+r)},r.readString=r.readUTF8String,r.writeVString=function(t,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var i,o,s=r;i=c.calculateUTF16asUTF8(u(t),this.noAssert)[1],o=e.calculateVarint32(i),r+=o+i;var a=this.buffer.byteLength;if(r>a&&this.resize((a*=2)>r?a:r),r-=o+i,r+=this.writeVarint32(i,r),c.encodeUTF16toUTF8(u(t),function(t){this.view[r++]=t}.bind(this)),r!==s+i+o)throw RangeError("Illegal range: Truncated data, "+r+" == "+(r+i+o));return n?(this.offset=r,this):r-s},r.readVString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=t,i=this.readVarint32(t),u=this.readUTF8String(i.value,e.METRICS_BYTES,t+=i.length);return t+=u.length,r?(this.offset=t,u.string):{string:u.string,length:t-n}},r.append=function(t,r,n){"number"!=typeof r&&"string"==typeof r||(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var u=t.limit-t.offset;if(u<=0)return this;n+=u;var o=this.buffer.byteLength;return n>o&&this.resize((o*=2)>n?o:n),n-=u,this.view.set(t.view.subarray(t.offset,t.limit),n),t.offset+=u,i&&(this.offset+=u),this},r.appendTo=function(t,e){return t.append(this,e),this},r.assert=function(t){return this.noAssert=!t,this},r.capacity=function(){return this.buffer.byteLength},r.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},r.clone=function(t){var r=new e(0,this.littleEndian,this.noAssert);return t?(r.buffer=new ArrayBuffer(this.buffer.byteLength),r.view=new Uint8Array(r.buffer)):(r.buffer=this.buffer,r.view=this.view),r.offset=this.offset,r.markedOffset=this.markedOffset,r.limit=this.limit,r},r.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var r=e-t;if(0===r)return this.buffer=n,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(r),u=new Uint8Array(i);return u.set(this.view.subarray(t,e)),this.buffer=i,this.view=u,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=r,this},r.copy=function(t,r){if(void 0===t&&(t=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,t<0||t>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+r+" <= "+this.buffer.byteLength)}if(t===r)return new e(0,this.littleEndian,this.noAssert);var n=r-t,i=new e(n,this.littleEndian,this.noAssert);return i.offset=0,i.limit=n,i.markedOffset>=0&&(i.markedOffset-=t),this.copyTo(i,0,t,r),i},r.copyTo=function(t,r,n,i){var u,o;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(r=(o=void 0===r)?t.offset:0|r,n=(u=void 0===n)?this.offset:0|n,i=void 0===i?this.limit:0|i,r<0||r>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+r+" <= "+t.buffer.byteLength);if(n<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+n+" <= "+this.buffer.byteLength);var s=i-n;return 0===s?t:(t.ensureCapacity(r+s),t.view.set(this.view.subarray(n,i),r),u&&(this.offset+=s),o&&(t.offset+=s),this)},r.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},r.fill=function(t,e,r){var n=void 0===e;if(n&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(e>=r)return this;for(;e<r;)this.view[e++]=t;return n&&(this.offset=e),this},r.flip=function(){return this.limit=this.offset,this.offset=0,this},r.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},r.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},r.LE=function(t){return this.littleEndian=void 0===t||!!t,this},r.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},r.prepend=function(t,r,n){"number"!=typeof r&&"string"==typeof r||(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var u=t.limit-t.offset;if(u<=0)return this;var o=u-n;if(o>0){var s=new ArrayBuffer(this.buffer.byteLength+o),a=new Uint8Array(s);a.set(this.view.subarray(n,this.buffer.byteLength),u),this.buffer=s,this.view=a,this.offset+=o,this.markedOffset>=0&&(this.markedOffset+=o),this.limit+=o,n+=o}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),n-u),t.offset=t.limit,i&&(this.offset-=u),this},r.prependTo=function(t,e){return t.prepend(this,e),this},r.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},r.remaining=function(){return this.limit-this.offset},r.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},r.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),r=new Uint8Array(e);r.set(this.view),this.buffer=e,this.view=r}return this},r.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e?this:(Array.prototype.reverse.call(this.view.subarray(t,e)),this)},r.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},r.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r=this.clone();return r.offset=t,r.limit=e,r},r.toBuffer=function(t){var e=this.offset,r=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal limit: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(!t&&0===e&&r===this.buffer.byteLength)return this.buffer;if(e===r)return n;var i=new ArrayBuffer(r-e);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(e,r),0),i},r.toArrayBuffer=r.toBuffer,r.toString=function(t,e,r){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(r=e=t="utf8"),t){case"utf8":return this.toUTF8(e,r);case"base64":return this.toBase64(e,r);case"hex":return this.toHex(e,r);case"binary":return this.toBinary(e,r);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var f=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],r=[],n=0,i=e.length;n<i;++n)r[e[n]]=n;return t.encode=function(t,r){for(var n,i;null!==(n=t());)r(e[n>>2&63]),i=(3&n)<<4,null!==(n=t())?(r(e[63&((i|=n>>4&15)|n>>4&15)]),i=(15&n)<<2,null!==(n=t())?(r(e[63&(i|n>>6&3)]),r(e[63&n])):(r(e[63&i]),r(61))):(r(e[63&i]),r(61),r(61))},t.decode=function(t,e){var n,i,u;function o(t){throw Error("Illegal character code: "+t)}for(;null!==(n=t());)if(void 0===(i=r[n])&&o(n),null!==(n=t())&&(void 0===(u=r[n])&&o(n),e(i<<2>>>0|(48&u)>>4),null!==(n=t()))){if(void 0===(i=r[n])){if(61===n)break;o(n)}if(e((15&u)<<4>>>0|(60&i)>>2),null!==(n=t())){if(void 0===(u=r[n])){if(61===n)break;o(n)}e((3&i)<<6>>>0|u)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();r.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var r;return f.encode(function(){return t<e?this.view[t++]:null}.bind(this),r=o()),r()},e.fromBase64=function(t,r){if("string"!=typeof t)throw TypeError("str");var n=new e(t.length/4*3,r),i=0;return f.decode(u(t),function(t){n.view[i++]=t}),n.limit=i,n},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},r.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var r=[],n=[];t<e;)r.push(this.view[t++]),r.length>=1024&&(n.push(String.fromCharCode.apply(String,r)),r=[]);return n.join("")+String.fromCharCode.apply(String,r)},e.fromBinary=function(t,r){if("string"!=typeof t)throw TypeError("str");for(var n,i=0,u=t.length,o=new e(u,r);i<u;){if((n=t.charCodeAt(i))>255)throw RangeError("illegal char code: "+n);o.view[i++]=n}return o.limit=u,o},r.toDebug=function(t){for(var e,r=-1,n=this.buffer.byteLength,i="",u="",o="";r<n;){if(-1!==r&&(e=this.view[r],i+=e<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(u+=e>32&&e<127?String.fromCharCode(e):".")),++r,t&&r>0&&r%16==0&&r!==n){for(;i.length<51;)i+=" ";o+=i+u+"\n",i=u=""}r===this.offset&&r===this.limit?i+=r===this.markedOffset?"!":"|":r===this.offset?i+=r===this.markedOffset?"[":"<":r===this.limit?i+=r===this.markedOffset?"]":">":i+=r===this.markedOffset?"'":t||0!==r&&r!==n?" ":""}if(t&&" "!==i){for(;i.length<51;)i+=" ";o+=i+u+"\n"}return t?o:i},e.fromDebug=function(t,r,n){for(var i,u,o=t.length,s=new e((o+1)/3|0,r,n),a=0,f=0,c=!1,h=!1,l=!1,p=!1,d=!1;a<o;){switch(i=t.charAt(a++)){case"!":if(!n){if(h||l||p){d=!0;break}h=l=p=!0}s.offset=s.markedOffset=s.limit=f,c=!1;break;case"|":if(!n){if(h||p){d=!0;break}h=p=!0}s.offset=s.limit=f,c=!1;break;case"[":if(!n){if(h||l){d=!0;break}h=l=!0}s.offset=s.markedOffset=f,c=!1;break;case"<":if(!n){if(h){d=!0;break}h=!0}s.offset=f,c=!1;break;case"]":if(!n){if(p||l){d=!0;break}p=l=!0}s.limit=s.markedOffset=f,c=!1;break;case">":if(!n){if(p){d=!0;break}p=!0}s.limit=f,c=!1;break;case"'":if(!n){if(l){d=!0;break}l=!0}s.markedOffset=f,c=!1;break;case" ":c=!1;break;default:if(!n&&c){d=!0;break}if(u=parseInt(i+t.charAt(a++),16),!n&&(isNaN(u)||u<0||u>255))throw TypeError("Illegal str: Not a debug encoded string");s.view[f++]=u,c=!0}if(d)throw TypeError("Illegal str: Invalid symbol at "+a)}if(!n){if(!h||!p)throw TypeError("Illegal str: Missing offset or limit");if(f<s.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+f+" < "+o)}return s},r.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var r,n=new Array(e-t);t<e;)(r=this.view[t++])<16?n.push("0",r.toString(16)):n.push(r.toString(16));return n.join("")},e.fromHex=function(t,r,n){if(!n){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,u=t.length,o=new e(u/2|0,r),s=0,a=0;s<u;s+=2){if(i=parseInt(t.substring(s,s+2),16),!n&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");o.view[a++]=i}return o.limit=a,o};var c=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<128?e(127&r):r<2048?(e(r>>6&31|192),e(63&r|128)):r<65536?(e(r>>12&15|224),e(r>>6&63|128),e(63&r|128)):(e(r>>18&7|240),e(r>>12&63|128),e(r>>6&63|128),e(63&r|128)),r=null},decodeUTF8:function(t,e){for(var r,n,i,u,o=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(r=t());)if(0==(128&r))e(r);else if(192==(224&r))null===(n=t())&&o([r,n]),e((31&r)<<6|63&n);else if(224==(240&r))(null===(n=t())||null===(i=t()))&&o([r,n,i]),e((15&r)<<12|(63&n)<<6|63&i);else{if(240!=(248&r))throw RangeError("Illegal starting byte: "+r);(null===(n=t())||null===(i=t())||null===(u=t()))&&o([r,n,i,u]),e((7&r)<<18|(63&n)<<12|(63&i)<<6|63&u)}},UTF16toUTF8:function(t,e){for(var r,n=null;null!==(r=null!==n?n:t());)r>=55296&&r<=57343&&null!==(n=t())&&n>=56320&&n<=57343?(e(1024*(r-55296)+n-56320+65536),n=null):e(r);null!==n&&e(n)},UTF8toUTF16:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<=65535?e(r):(e(55296+((r-=65536)>>10)),e(r%1024+56320)),r=null},encodeUTF16toUTF8:function(e,r){t.UTF16toUTF8(e,function(e){t.encodeUTF8(e,r)})},decodeUTF8toUTF16:function(e,r){t.decodeUTF8(e,function(e){t.UTF8toUTF16(e,r)})},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,r=0;null!==(e=t());)r+=e<128?1:e<2048?2:e<65536?3:4;return r},calculateUTF16asUTF8:function(e){var r=0,n=0;return t.UTF16toUTF8(e,function(t){++r,n+=t<128?1:t<2048?2:t<65536?3:4}),[r,n]}};return t}();return r.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r;try{c.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),r=o())}catch(r){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return r()},e.fromUTF8=function(t,r,n){if(!n&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var i=new e(c.calculateUTF16asUTF8(u(t),!0)[1],r,n),o=0;return c.encodeUTF16toUTF8(u(t),function(t){i.view[o++]=t}),i.limit=o,i},e})?n.apply(e,i):n)||(t.exports=u)},function(t,e,r){var n=r(0).Buffer;function i(t,e){this._block=n.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=n.from(t,e));for(var r=this._block,i=this._blockSize,u=t.length,o=this._len,s=0;s<u;){for(var a=o%i,f=Math.min(u-s,i-a),c=0;c<f;c++)r[a+c]=t[s+c];s+=f,(o+=f)%i==0&&this._update(r)}return this._len+=u,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,i=(r-n)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var u=this._hash();return t?u.toString(t):u},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},function(t,e,r){"use strict";e.__esModule=!0;var n=o(r(106)),i=o(r(123)),u="function"==typeof i.default&&"symbol"==typeof n.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function o(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===u(n.default)?function(t){return void 0===t?"undefined":u(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":u(t)}},function(t,e,r){var n=r(22);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports={}},function(t,e,r){(function(e){t.exports=function(t,r){for(var n=Math.min(t.length,r.length),i=new e(n),u=0;u<n;++u)i[u]=t[u]^r[u];return i}}).call(this,r(2).Buffer)},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=r(3),o=r(55),s=r(7),a=o.getCurveByName("secp256k1"),f=r(12),c=r(27),h=a.G,l=a.n;function p(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";if("string"==typeof t){var n=p.fromString(t,r);return u(null!=n,"Invalid public key"),n}if(e.isBuffer(t))return p.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&t.Q)return p(t.Q);function d(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.compressed;return t.getEncoded(e)}u.equal(void 0===t?"undefined":i(t),"object","Invalid public key"),u.equal(i(t.compressed),"boolean","Invalid public key");return{Q:t,toString:function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"EOS")+c.checkEncode(d())},toUncompressed:function(){var e=t.getEncoded(!1),r=o.Point.decodeFrom(a,e);return p.fromPoint(r)},toBuffer:d,child:function(r){console.error("Deprecated warning: PublicKey.child"),u(e.isBuffer(r),"Buffer required: offset"),u.equal(r.length,32,"offset length"),r=e.concat([d(),r]),r=f.sha256(r);var n=s.fromBuffer(r);if(n.compareTo(l)>=0)throw new Error("Child offset went out of bounds, try again");var i=h.multiply(n),o=t.add(i);if(a.isInfinity(o))throw new Error("Child offset derived to an invalid key, try again");return p.fromPoint(o)},toHex:function(){return d().toString("hex")}}}t.exports=p,p.isValid=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p(t,e),!0}catch(t){return!1}},p.fromBinary=function(t){return p.fromBuffer(new e(t,"binary"))},p.fromBuffer=function(t){return p(o.Point.decodeFrom(a,t))},p.fromPoint=function(t){return p(t)},p.fromString=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p.fromStringOrThrow(t,e)}catch(t){return null}},p.fromStringOrThrow=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";u.equal(void 0===t?"undefined":i(t),"string","public_key");var r=t.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===r)return new RegExp("^"+e).test(t)&&(t=t.substring(e.length)),p.fromBuffer(c.checkDecode(t));u(3===r.length,"Expecting public key like: PUB_K1_base58pubkey..");var o=n(r,3),s=o[1],a=o[2];return u.equal(s,"K1","K1 private key expected"),p.fromBuffer(c.checkDecode(a,s))},p.fromHex=function(t){return p.fromBuffer(new e(t,"hex"))},p.fromStringHex=function(t){return p.fromString(new e(t,"hex"))}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(172),u=r(3),o=r(73),s=r(12);t.exports={random32ByteBuffer:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.cpuEntropyBits,i=void 0===r?0:r,a=t.safe,l=void 0===a||a;u.equal(void 0===i?"undefined":n(i),"number","cpuEntropyBits"),u.equal(void 0===l?"undefined":n(l),"boolean","boolean"),l&&u(f>=128,"Call initialize() to add entropy");var p=[];return p.push(o(32)),p.push(e.from(h(i))),p.push(c),p.push(function(){var t=Array(o(101)).join();try{t+=(new Date).toString()+" "+window.screen.height+" "+window.screen.width+" "+window.screen.colorDepth+"  "+window.screen.availHeight+" "+window.screen.availWidth+" "+window.screen.pixelDepth+navigator.language+" "+window.location+" "+window.history.length;for(var r,n=0;n<navigator.mimeTypes.length;n++)r=navigator.mimeTypes[n],t+=r.description+" "+r.type+" "+r.suffixes+" "}catch(e){t+=s.sha256((new Date).toString())}for(var i=new e(t),u=t+=i.toString("binary")+" "+(new Date).toString(),a=Date.now();Date.now()-a<25;)u=s.sha256(u);return u}()),s.sha256(e.concat(p))},addEntropy:function(){u.equal(c.length,101,"externalEntropyArray");for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];f+=e.length;var n=!0,i=!1,o=void 0;try{for(var s,h=e[Symbol.iterator]();!(n=(s=h.next()).done);n=!0){var l=s.value,p=a++%101,d=c[p]+=l;d>9007199254740991&&(c[p]=0)}}catch(t){i=!0,o=t}finally{try{!n&&h.return&&h.return()}finally{if(i)throw o}}},cpuEntropy:h,entropyCount:function(){return f},checkDecode:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;u(null!=t,"private key expected");var n=new e(i.decode(t)),o=n.slice(-4),a=n.slice(0,-4),f=void 0;if("sha256x2"===r)f=s.sha256(s.sha256(a)).slice(0,4);else{var c=[a];r&&c.push(e.from(r)),f=s.ripemd160(e.concat(c)).slice(0,4)}if(o.toString()!==f.toString())throw new Error("Invalid checksum, "+o.toString("hex")+" != "+f.toString("hex"));return a},checkEncode:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(u(e.isBuffer(t),"expecting keyBuffer<Buffer>"),"sha256x2"===r){var n=s.sha256(s.sha256(t)).slice(0,4);return i.encode(e.concat([t,n]))}var o=[t];r&&o.push(e.from(r));var a=s.ripemd160(e.concat(o)).slice(0,4);return i.encode(e.concat([t,a]))}};var a=0,f=0,c=o(101);function h(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:128,e=[],r=null,n=0;e.length<t;){var i=l();if(null!=r){var u=i-r;if(Math.abs(u)<1){n++;continue}var o=Math.floor(p(Math.abs(u))+1);if(o<4){o<2&&n++;continue}e.push(u)}r=i}if(n>10){var s=Number(n/t*100).toFixed(2);console.warn("WARN: "+s+"% low CPU entropy re-sampled")}return e}function l(){for(var t=Date.now(),e=0,r=0;Date.now()<t+7+1;)r=Math.sin(Math.sqrt(Math.log(++e+r)));return e}var p=function(t){return Math.log(t)/Math.LN2}}).call(this,r(2).Buffer)},function(t,e){t.exports=!0},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(0).Buffer;function i(t){n.isBuffer(t)||(t=n.from(t));for(var e=t.length/4|0,r=new Array(e),i=0;i<e;i++)r[i]=t.readUInt32BE(4*i);return r}function u(t){for(;0<t.length;t++)t[0]=0}function o(t,e,r,n,i){for(var u,o,s,a,f=r[0],c=r[1],h=r[2],l=r[3],p=t[0]^e[0],d=t[1]^e[1],y=t[2]^e[2],g=t[3]^e[3],m=4,v=1;v<i;v++)u=f[p>>>24]^c[d>>>16&255]^h[y>>>8&255]^l[255&g]^e[m++],o=f[d>>>24]^c[y>>>16&255]^h[g>>>8&255]^l[255&p]^e[m++],s=f[y>>>24]^c[g>>>16&255]^h[p>>>8&255]^l[255&d]^e[m++],a=f[g>>>24]^c[p>>>16&255]^h[d>>>8&255]^l[255&y]^e[m++],p=u,d=o,y=s,g=a;return u=(n[p>>>24]<<24|n[d>>>16&255]<<16|n[y>>>8&255]<<8|n[255&g])^e[m++],o=(n[d>>>24]<<24|n[y>>>16&255]<<16|n[g>>>8&255]<<8|n[255&p])^e[m++],s=(n[y>>>24]<<24|n[g>>>16&255]<<16|n[p>>>8&255]<<8|n[255&d])^e[m++],a=(n[g>>>24]<<24|n[p>>>16&255]<<16|n[d>>>8&255]<<8|n[255&y])^e[m++],[u>>>=0,o>>>=0,s>>>=0,a>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],a=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var r=[],n=[],i=[[],[],[],[]],u=[[],[],[],[]],o=0,s=0,a=0;a<256;++a){var f=s^s<<1^s<<2^s<<3^s<<4;f=f>>>8^255&f^99,r[o]=f,n[f]=o;var c=t[o],h=t[c],l=t[h],p=257*t[f]^16843008*f;i[0][o]=p<<24|p>>>8,i[1][o]=p<<16|p>>>16,i[2][o]=p<<8|p>>>24,i[3][o]=p,p=16843009*l^65537*h^257*c^16843008*o,u[0][f]=p<<24|p>>>8,u[1][f]=p<<16|p>>>16,u[2][f]=p<<8|p>>>24,u[3][f]=p,0===o?o=s=1:(o=c^t[t[t[l^c]]],s^=t[t[s]])}return{SBOX:r,INV_SBOX:n,SUB_MIX:i,INV_SUB_MIX:u}}();function f(t){this._key=i(t),this._reset()}f.blockSize=16,f.keySize=32,f.prototype.blockSize=f.blockSize,f.prototype.keySize=f.keySize,f.prototype._reset=function(){for(var t=this._key,e=t.length,r=e+6,n=4*(r+1),i=[],u=0;u<e;u++)i[u]=t[u];for(u=e;u<n;u++){var o=i[u-1];u%e==0?(o=o<<8|o>>>24,o=a.SBOX[o>>>24]<<24|a.SBOX[o>>>16&255]<<16|a.SBOX[o>>>8&255]<<8|a.SBOX[255&o],o^=s[u/e|0]<<24):e>6&&u%e==4&&(o=a.SBOX[o>>>24]<<24|a.SBOX[o>>>16&255]<<16|a.SBOX[o>>>8&255]<<8|a.SBOX[255&o]),i[u]=i[u-e]^o}for(var f=[],c=0;c<n;c++){var h=n-c,l=i[h-(c%4?0:4)];f[c]=c<4||h<=4?l:a.INV_SUB_MIX[0][a.SBOX[l>>>24]]^a.INV_SUB_MIX[1][a.SBOX[l>>>16&255]]^a.INV_SUB_MIX[2][a.SBOX[l>>>8&255]]^a.INV_SUB_MIX[3][a.SBOX[255&l]]}this._nRounds=r,this._keySchedule=i,this._invKeySchedule=f},f.prototype.encryptBlockRaw=function(t){return o(t=i(t),this._keySchedule,a.SUB_MIX,a.SBOX,this._nRounds)},f.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),r=n.allocUnsafe(16);return r.writeUInt32BE(e[0],0),r.writeUInt32BE(e[1],4),r.writeUInt32BE(e[2],8),r.writeUInt32BE(e[3],12),r},f.prototype.decryptBlock=function(t){var e=(t=i(t))[1];t[1]=t[3],t[3]=e;var r=o(t,this._invKeySchedule,a.INV_SUB_MIX,a.INV_SBOX,this._nRounds),u=n.allocUnsafe(16);return u.writeUInt32BE(r[0],0),u.writeUInt32BE(r[3],4),u.writeUInt32BE(r[2],8),u.writeUInt32BE(r[1],12),u},f.prototype.scrub=function(){u(this._keySchedule),u(this._invKeySchedule),u(this._key)},t.exports.AES=f},function(t,e,r){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var u,o,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,r)});case 3:return e.nextTick(function(){t.call(null,r,n)});case 4:return e.nextTick(function(){t.call(null,r,n,i)});default:for(u=new Array(s-1),o=0;o<u.length;)u[o++]=arguments[o];return e.nextTick(function(){t.apply(null,u)})}}}:t.exports=e}).call(this,r(17))},function(t,e,r){"use strict";(function(e){var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var u=r(55),o=u.Point,s=u.getCurveByName("secp256k1"),a=r(7),f=r(3),c=r(12),h=r(26),l=r(27),p=r(56),d=r(174);s.G,s.n;function y(t){if("string"==typeof t)return y.fromString(t);if(e.isBuffer(t))return y.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&a.isBigInteger(t.d))return y(t.d);if(!a.isBigInteger(t))throw new TypeError("Invalid private key");function r(){var t=u();return t=e.concat([new e([128]),t]),l.checkEncode(t,"sha256x2")}var n=void 0;function u(){return t.toBuffer(32)}return{d:t,toWif:r,toString:function(){return r()},toPublic:function(){if(n)return n;var e=s.G.multiply(t);return n=h.fromPoint(e)},toBuffer:u,getSharedSecret:function(t){var e=(t=h(t)).toUncompressed().toBuffer(),r=o.fromAffine(s,a.fromBuffer(e.slice(1,33)),a.fromBuffer(e.slice(33,65))),n=u(),i=r.multiply(a.fromBuffer(n)).affineX.toBuffer({size:32});return c.sha512(i)},getChildKey:function(t){return y(p("sha256").update(u()).update(t).digest())}}}function g(t){f.equal(void 0===t?"undefined":i(t),"string","privateStr");var e=t.match(/^PVT_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===e){var r=l.checkDecode(t,"sha256x2"),u=r.readUInt8(0);f.equal(128,u,"Expected version 128, instead got "+u);return{privateKey:y.fromBuffer(r.slice(1)),format:"WIF",keyType:"K1"}}f(3===e.length,"Expecting private key like: PVT_K1_base58privateKey..");var o=n(e,3),s=o[1],a=o[2];return f.equal(s,"K1","K1 private key expected"),{privateKey:y.fromBuffer(l.checkDecode(a,s)),format:"PVT",keyType:s}}t.exports=y,y.fromHex=function(t){return y.fromBuffer(new e(t,"hex"))},y.fromBuffer=function(t){if(!e.isBuffer(t))throw new Error("Expecting parameter to be a Buffer type");if(33===t.length&&1===t[32]&&(t=t.slice(0,-1)),32!==t.length)throw new Error("Expecting 32 bytes, instead got "+t.length);return y(a.fromBuffer(t))},y.fromSeed=function(t){if("string"!=typeof t)throw new Error("seed must be of type string");return y.fromBuffer(c.sha256(t))},y.isWif=function(t){try{return f("WIF"===g(t).format),!0}catch(t){return!1}},y.isValid=function(t){try{return y(t),!0}catch(t){return!1}},y.fromWif=function(t){return console.log("PrivateKey.fromWif is deprecated, please use PrivateKey.fromString"),y.fromString(t)},y.fromString=function(t){return g(t).privateKey},y.randomKey=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return y.initialize().then(function(){return y.fromBuffer(l.random32ByteBuffer({cpuEntropyBits:t}))})},y.unsafeRandomKey=function(){return Promise.resolve(y.fromBuffer(l.random32ByteBuffer({safe:!1})))};var m=!1;y.initialize=d(function(){m||(function(){var t=y(c.sha256("")),e="key comparison test failed on a known private key";f.equal(t.toWif(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e),f.equal(t.toString(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e);var r=t.toPublic();f.equal(r.toString(),"EOS859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM","pubkey string comparison test failed on a known public key"),v(function(){return y.fromString(t.toWif())},"converting known wif from string"),v(function(){return y.fromString(t.toString())},"converting known pvt from string"),v(function(){return h.fromString(r.toString())},"converting known public key from string"),!0}(),l.addEntropy.apply(l,function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}(l.cpuEntropy())),f(l.entropyCount()>=128,"insufficient entropy"),m=!0)});var v=function(t,e){try{t()}catch(t){throw t.message=e+" ==> "+t.message,t}}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(108)(!0);r(62)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(22);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n=r(68),i=r(43);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n=r(42)("keys"),i=r(31);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e,r){var n=r(8),i=r(6),u=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return u[t]||(u[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(28)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(14).f,i=r(9),u=r(4)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,u)&&n(t,u,{configurable:!0,value:e})}},function(t,e,r){r(120);for(var n=r(6),i=r(13),u=r(23),o=r(4)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),a=0;a<s.length;a++){var f=s[a],c=n[f],h=c&&c.prototype;h&&!h[o]&&i(h,o,f),u[f]=u.Array}},function(t,e,r){e.f=r(4)},function(t,e,r){var n=r(6),i=r(8),u=r(28),o=r(46),s=r(14).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=u?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(134),i=r(177),u=Object.assign({},n,i);t.exports=u},function(t,e){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function u(t){return void 0===t}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},r.prototype.emit=function(t){var e,r,o,s,a,f;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(u(r=this._events[t]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),o=(f=r.slice()).length,a=0;a<o;a++)f[a].apply(this,s);return!0},r.prototype.addListener=function(t,e){var o;if(!n(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,n(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(o=u(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(t,e){if(!n(e))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(t,i),r||(r=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},r.prototype.removeListener=function(t,e){var r,u,o,s;if(!n(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(o=(r=this._events[t]).length,u=-1,r===e||n(r.listener)&&r.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(r)){for(s=o;s-- >0;)if(r[s]===e||r[s].listener&&r[s].listener===e){u=s;break}if(u<0)return this;1===r.length?(r.length=0,delete this._events[t]):r.splice(u,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},r.prototype.removeAllListeners=function(t){var e,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[t]))this.removeListener(t,r);else if(r)for(;r.length;)this.removeListener(t,r[r.length-1]);return delete this._events[t],this},r.prototype.listeners=function(t){return this._events&&this._events[t]?n(this._events[t])?[this._events[t]]:this._events[t].slice():[]},r.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(n(e))return 1;if(e)return e.length}return 0},r.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,r){(e=t.exports=r(80)).Stream=e,e.Readable=e,e.Writable=r(52),e.Duplex=r(11),e.Transform=r(83),e.PassThrough=r(152)},function(t,e,r){"use strict";(function(e,n,i){var u=r(33);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;t.entry=null;for(;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var s,a=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:u.nextTick;v.WritableState=m;var f=r(25);f.inherits=r(1);var c={deprecate:r(151)},h=r(81),l=r(0).Buffer,p=i.Uint8Array||function(){};var d,y=r(82);function g(){}function m(t,e){s=s||r(11),t=t||{};var n=e instanceof s;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(f||0===f)?f:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(u.nextTick(i,n),u.nextTick(B,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),B(t,e))}(t,r,n,e,i);else{var o=_(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||E(t,r),n?a(w,t,r,o,i):w(t,r,o,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function v(t){if(s=s||r(11),!(d.call(v,this)||this instanceof s))return new v(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function b(t,e,r,n,i,u,o){e.writelen=n,e.writecb=o,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,u,e.onwrite),e.sync=!1}function w(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),B(t,e)}function E(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),u=e.corkedRequestsFree;u.entry=r;for(var s=0,a=!0;r;)i[s]=r,r.isBuf||(a=!1),r=r.next,s+=1;i.allBuffers=a,b(t,e,!0,e.length,i,"",u.finish),e.pendingcb++,e.lastBufferedRequest=null,u.next?(e.corkedRequestsFree=u.next,u.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;r;){var f=r.chunk,c=r.encoding,h=r.callback;if(b(t,e,!1,e.objectMode?1:f.length,f,c,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function _(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function A(t,e){t._final(function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),B(t,e)})}function B(t,e){var r=_(e);return r&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,u.nextTick(A,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}f.inherits(v,h),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===v&&(t&&t._writableState instanceof m)}})):d=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,r){var n=this._writableState,i=!1,o=!n.objectMode&&function(t){return l.isBuffer(t)||t instanceof p}(t);return o&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(r=e,e=null),o?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=g),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),u.nextTick(e,r)}(this,r):(o||function(t,e,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(t.emit("error",o),u.nextTick(n,o),i=!1),i}(this,n,t,r))&&(n.pendingcb++,i=function(t,e,r,n,i,u){if(!r){var o=function(t,e,r){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,r));return e}(e,n,i);n!==o&&(r=!0,i="buffer",n=o)}var s=e.objectMode?1:n.length;e.length+=s;var a=e.length<e.highWaterMark;a||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:u,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,s,n,i,u);return a}(this,n,o,t,e,r)),i},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||E(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!==t&&void 0!==t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,B(t,e),r&&(e.finished?u.nextTick(r):t.once("finish",r));e.ended=!0,t.writable=!1}(this,n,r)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,r(17),r(149).setImmediate,r(5))},function(t,e,r){"use strict";var n=r(0).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function u(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=a,this.end=f,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=l,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function o(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function a(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function c(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function l(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=u,u.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},u.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},u.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=o(e[n]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=o(e[n]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=o(e[n]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},u.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,r){"use strict";var n=r(1),i=r(86),u=r(0).Buffer,o=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function a(t,e){return t<<e|t>>>32-e}function f(t,e,r,n,i,u,o){return a(t+(e&r|~e&n)+i+u|0,o)+e|0}function c(t,e,r,n,i,u,o){return a(t+(e&n|r&~n)+i+u|0,o)+e|0}function h(t,e,r,n,i,u,o){return a(t+(e^r^n)+i+u|0,o)+e|0}function l(t,e,r,n,i,u,o){return a(t+(r^(e|~n))+i+u|0,o)+e|0}n(s,i),s.prototype._update=function(){for(var t=o,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var r=this._a,n=this._b,i=this._c,u=this._d;n=l(n=l(n=l(n=l(n=h(n=h(n=h(n=h(n=c(n=c(n=c(n=c(n=f(n=f(n=f(n=f(n,i=f(i,u=f(u,r=f(r,n,i,u,t[0],3614090360,7),n,i,t[1],3905402710,12),r,n,t[2],606105819,17),u,r,t[3],3250441966,22),i=f(i,u=f(u,r=f(r,n,i,u,t[4],4118548399,7),n,i,t[5],1200080426,12),r,n,t[6],2821735955,17),u,r,t[7],4249261313,22),i=f(i,u=f(u,r=f(r,n,i,u,t[8],1770035416,7),n,i,t[9],2336552879,12),r,n,t[10],4294925233,17),u,r,t[11],2304563134,22),i=f(i,u=f(u,r=f(r,n,i,u,t[12],1804603682,7),n,i,t[13],4254626195,12),r,n,t[14],2792965006,17),u,r,t[15],1236535329,22),i=c(i,u=c(u,r=c(r,n,i,u,t[1],4129170786,5),n,i,t[6],3225465664,9),r,n,t[11],643717713,14),u,r,t[0],3921069994,20),i=c(i,u=c(u,r=c(r,n,i,u,t[5],3593408605,5),n,i,t[10],38016083,9),r,n,t[15],3634488961,14),u,r,t[4],3889429448,20),i=c(i,u=c(u,r=c(r,n,i,u,t[9],568446438,5),n,i,t[14],3275163606,9),r,n,t[3],4107603335,14),u,r,t[8],1163531501,20),i=c(i,u=c(u,r=c(r,n,i,u,t[13],2850285829,5),n,i,t[2],4243563512,9),r,n,t[7],1735328473,14),u,r,t[12],2368359562,20),i=h(i,u=h(u,r=h(r,n,i,u,t[5],4294588738,4),n,i,t[8],2272392833,11),r,n,t[11],1839030562,16),u,r,t[14],4259657740,23),i=h(i,u=h(u,r=h(r,n,i,u,t[1],2763975236,4),n,i,t[4],1272893353,11),r,n,t[7],4139469664,16),u,r,t[10],3200236656,23),i=h(i,u=h(u,r=h(r,n,i,u,t[13],681279174,4),n,i,t[0],3936430074,11),r,n,t[3],3572445317,16),u,r,t[6],76029189,23),i=h(i,u=h(u,r=h(r,n,i,u,t[9],3654602809,4),n,i,t[12],3873151461,11),r,n,t[15],530742520,16),u,r,t[2],3299628645,23),i=l(i,u=l(u,r=l(r,n,i,u,t[0],4096336452,6),n,i,t[7],1126891415,10),r,n,t[14],2878612391,15),u,r,t[5],4237533241,21),i=l(i,u=l(u,r=l(r,n,i,u,t[12],1700485571,6),n,i,t[3],2399980690,10),r,n,t[10],4293915773,15),u,r,t[1],2240044497,21),i=l(i,u=l(u,r=l(r,n,i,u,t[8],1873313359,6),n,i,t[15],4264355552,10),r,n,t[6],2734768916,15),u,r,t[13],1309151649,21),i=l(i,u=l(u,r=l(r,n,i,u,t[4],4149444226,6),n,i,t[11],3174756917,10),r,n,t[2],718787259,15),u,r,t[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+n|0,this._c=this._c+i|0,this._d=this._d+u|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=u.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=s},function(t,e,r){var n=r(87),i=r(89),u=r(163);t.exports={Curve:i,Point:n,getCurveByName:u}},function(t,e,r){"use strict";var n=r(1),i=r(54),u=r(90),o=r(91),s=r(10);function a(t){s.call(this,"digest"),this._hash=t}n(a,s),a.prototype._update=function(t){this._hash.update(t)},a.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new u:new a(o(t))}},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(178),u=r(183),o=r(3),s=u.create;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!==(void 0===t?"undefined":n(t)))throw new TypeError("definitions is a required parameter");if(e.customTypes)for(var r in t=Object.assign({},t),e.customTypes)delete t[r];var u=i(e),o=s(t,u),c=o.errors,h=o.structs;return{errors:c,structs:h,types:u,extend:function(e){return function t(e,r){var n=Object.assign({},e,r),i=s(n,u),o=i.structs;return{errors:i.errors,structs:o,extend:function(e){return t(n,e)},fromBuffer:a(u,o),toBuffer:f(u,o)}}(t,e)},fromBuffer:a(u,h),toBuffer:f(u,h)}};var a=function(t,r){return function(i,s){o.equal(void 0===i?"undefined":n(i),"string","typeName (type or struct name)"),"string"==typeof s&&(s=e.from(s,"hex")),o(e.isBuffer(s),"expecting buf<hex|Buffer>");var a=t[i];return a=a?a():r[i],o(a,"missing type or struct: "+i),u.fromBuffer(a,s)}},f=function(t,e){return function(r,i){o.equal(void 0===r?"undefined":n(r),"string","typeName (type or struct name)"),o(null!=i,"value is required");var s=t[r];return s=s?s():e[r],o(s,"missing type or struct: "+r),u.toBuffer(s,i)}};t.exports.fromBuffer=u.fromBuffer,t.exports.toBuffer=u.toBuffer}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=u(r(59)),i=u(r(20));function u(t){return t&&t.__esModule?t:{default:t}}var o=r(49),s=o.Signature,a=o.PublicKey,f=r(57),c=r(18),h=r(3),l=r(99),p=r(100),d=(p.isName,p.encodeName),y=p.decodeName,g=p.DecimalPad,m=p.DecimalImply,v=p.DecimalUnimply,b=p.printAsset,w=p.parseAsset;t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],r=function(e,r){var n=t.abiCache.abi(r),i=!0,u=!1,o=void 0;try{for(var s,a=n.abi.actions[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if(f.name===e){var c=n.structs[f.type];if(null!=c)return c}}}catch(t){u=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(u)throw o}}var h=n.structs[e];if(null!=h)return h;throw new Error("Missing ABI action: "+e)},n=null==t.forceActionDataHex||t.forceActionDataHex,i=Object.assign({},T(t),k(r),M(t),I(r,n),t.override),u={name:function(){return[E]},public_key:function(){return[_(A)]},symbol:function(){return[B]},symbol_code:function(){return[C]},extended_symbol:function(){return[F]},asset:function(){return[D]},extended_asset:function(){return[x]},signature:function(){return[_(S)]}},o=Object.assign({},u,t.customTypes);(t=Object.assign({override:i},{customTypes:o},t)).sort=Object.assign({},t.sort),t.sort["action.authorization"]=!0,t.sort["signed_transaction.signature"]=!0,t.sort["authority.accounts"]=!0,t.sort["authority.keys"]=!0;var s=Object.assign({},l,e),a=f(s,t),c=a.structs,h=a.types,p=a.errors,d=a.fromBuffer,y=a.toBuffer;if(0!==p.length)throw new Error(JSON.stringify(p,null,4));return{structs:c,types:h,fromBuffer:d,toBuffer:y}};var E=function(t){return{fromByteBuffer:function(t){return y(t.readUint64(),!1)},appendByteBuffer:function(t,e){t.writeUint64(d(e,!1))},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"":e}}},_=function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t,r,n){var i=e.map(function(e){return e(t,r,n)}),u=r.static_variant(i);return{fromByteBuffer:function(t){return u.fromByteBuffer(t)},appendByteBuffer:function(t,e){Array.isArray(e)||(e=[0,e]),u.appendByteBuffer(t,e)},fromObject:function(t){return Array.isArray(t)||(t=[0,t]),u.fromObject(t)[1]},toObject:function(t){return Array.isArray(t)||(t=[0,t]),u.toObject(t)[1]}}}},A=function(t){return{fromByteBuffer:function(r){var n=r.copy(r.offset,r.offset+33);r.skip(33);var i=e.from(n.toBinary(),"binary");return a.fromBuffer(i).toString(t.keyPrefix)},appendByteBuffer:function(e,r){var n=a.fromStringOrThrow(r,t.keyPrefix).toBuffer();e.append(n.toString("binary"),"binary")},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?(t.keyPrefix?t.keyPrefix:"EOS")+"6MRy..":e}}},B=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var r=e.readUint8(),n=e.toBinary(),i="",u=!0,o=!1,s=void 0;try{for(var a,f=n[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;if("\0"==c)break;i+=c}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}return r+","+i},appendByteBuffer:function(t,e){var r=w(e),n=r.symbol,i=r.precision;h(null!=i,"Precision unknown for symbol: "+e);var u="\0".repeat(7-n.length);t.append(String.fromCharCode(i)+n+u)},fromObject:function(t){h(null!=t,"Symbol is required: "+t);var e=w(t),r=e.symbol,n=e.precision;return null==n?r:n+","+r},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},C=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var r=e.toBinary(),n="",i=!0,u=!1,o=void 0;try{for(var s,a=r[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if("\0"==f)break;n+=f}}catch(t){u=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(u)throw o}}return""+n},appendByteBuffer:function(t,e){var r=w(e).symbol,n="\0".repeat(8-r.length);t.append(r+n)},fromObject:function(t){return h(null!=t,"Symbol is required: "+t),w(t).symbol},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},F=function(t,e,r){var u=r.symbol(t),o=r.name(t);return{fromByteBuffer:function(t){return u.fromByteBuffer(t)+"@"+o.fromByteBuffer(t)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"string","Invalid extended symbol: "+e);var r=e.split("@"),s=(0,n.default)(r,2),a=s[0],f=s[1];h(null!=f,"Missing @contract suffix in extended symbol: "+e),u.appendByteBuffer(t,a),o.appendByteBuffer(t,f)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"SYS@contract":e}}},D=function(t,e,r){var n=e.int64(t),i=r.symbol(t);return{fromByteBuffer:function(t){var e=n.fromByteBuffer(t);h(null!=e,"amount");var r=i.fromByteBuffer(t),u=w(""+r),o=u.precision,s=u.symbol;return h(null!=o,"precision"),h(null!=s,"symbol"),v(e,o)+" "+s},appendByteBuffer:function(t,e){var r=w(e),u=r.amount,o=r.precision,s=r.symbol;h(null!=u,"amount"),h(null!=o,"precision"),h(null!=s,"symbol"),n.appendByteBuffer(t,m(u,o)),i.appendByteBuffer(t,o+","+s)},fromObject:function(t){var e=w(t),r=e.amount,n=e.precision,i=e.symbol;return h(null!=r,"amount"),h(null!=n,"precision"),h(null!=i,"symbol"),g(r,n)+" "+i},toObject:function(e){if(t.defaults&&null==e)return"0.0001 SYS";var r=w(e),n=r.amount,i=r.precision,u=r.symbol;return h(null!=n,"amount"),h(null!=i,"precision"),h(null!=u,"symbol"),g(n,i)+" "+u}}},x=function(t,e,r){var u=r.asset(t),o=r.name(t);return{fromByteBuffer:function(t){var e=u.fromByteBuffer(t),r=o.fromByteBuffer(t);return w(e+"@"+r)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object, got "+(void 0===e?"undefined":(0,i.default)(e)));var r=b(e),s=r.split("@"),a=(0,n.default)(s,2)[1];h.equal(void 0===a?"undefined":(0,i.default)(a),"string","Invalid extended asset: "+e),u.appendByteBuffer(t,r),o.appendByteBuffer(t,a)},fromObject:function(t){var e={};"string"==typeof t?Object.assign(e,w(t)):"object"===(void 0===t?"undefined":(0,i.default)(t))?Object.assign(e,t):h(!1,"expecting extended_asset<object|string>, got: "+(void 0===t?"undefined":(0,i.default)(t)));var r=e.amount,n=e.precision,u=e.symbol,o=e.contract;return h(null!=r,"missing amount"),h(null!=n,"missing precision"),h(null!=u,"missing symbol"),h(null!=o,"missing contract"),{amount:r,precision:n,symbol:u,contract:o}},toObject:function(e){if(t.defaults&&null==e)return{amount:"1.0000",precision:4,symbol:"SYS",contract:"eosio.token"};h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object");var r=e.amount,n=e.precision,u=e.symbol,o=e.contract;return{amount:g(r,n),precision:n,symbol:u,contract:o}}}},S=function(t,e){var r=e.fixed_bytes65(t);return{fromByteBuffer:function(t){var e=r.fromByteBuffer(t);return s.from(e).toString()},appendByteBuffer:function(t,e){var n=s.from(e);r.appendByteBuffer(t,n.toBuffer())},fromObject:function(t){return s.from(t).toString()},toObject:function(e){return t.defaults&&null==e?"SIG_K1_bas58signature..":s.from(e).toString()}}},T=function(t){return{"authority.fromObject":function(e){if(a.fromString(e,t.keyPrefix))return{threshold:1,keys:[{key:e,weight:1}]};if("string"==typeof e){var r=e.split("@"),i=(0,n.default)(r,2),u=i[0],o=i[1];return{threshold:1,accounts:[{permission:{actor:u,permission:void 0===o?"active":o},weight:1}]}}}}},k=function(t){return{"abi_def.fromObject":function(t){if("string"==typeof t){var r=e.from(t,"hex").toString();return 0===r.length&&(r=e.from(t).toString()),JSON.parse(r)}return e.isBuffer(t)?JSON.parse(t.toString()):null},"setabi.abi.appendByteBuffer":function(r){r.fields;var n=r.object,u=r.b,o=t("abi_def","eosio"),s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);e.isBuffer(n.abi)?s.append(n.abi):"object"==(0,i.default)(n.abi)&&o.appendByteBuffer(s,n.abi),u.writeVarint32(s.offset),u.append(s.copy(0,s.offset),"binary")}}},M=function(t){return{"setcode.code.fromObject":function(r){var n=r.object,i=r.result;try{var u=n.code.toString();if(/^\s*\(module/.test(u)){var o=t.binaryen;h(null!=o,'required: config.binaryen = require("binaryen")'),t.debug&&console.log("Assembling WASM..");var s=e.from(o.parseText(u).emitBinary());i.code=s}else i.code=n.code}catch(t){throw console.error(t,n.code),t}}}},I=function(t,r){return{"action.data.fromByteBuffer":function(r){var n=r.fields,i=r.object,u=r.b,o=r.config,s=""==(i.name||"")?n.data:t(i.name,i.account);if(s)u.readVarint32(),i.data=s.fromByteBuffer(u,o);else{var a=u.readVarint32(),f=u.copy(u.offset,u.offset+a);u.skip(a),i.data=e.from(f.toBinary(),"binary")}},"action.data.appendByteBuffer":function(r){var n=r.fields,i=r.object,u=r.b,o=""==(i.name||"")?n.data:t(i.name,i.account);if(o){var s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);o.appendByteBuffer(s,i.data),u.writeVarint32(s.offset),u.append(s.copy(0,s.offset),"binary")}else{var a="string"==typeof i.data?e.from(i.data,"hex"):i.data;if(!e.isBuffer(a))throw new TypeError("Unknown struct '"+i.name+"' for contract '"+i.account+"', locate this struct or provide serialized action.data");u.writeVarint32(a.length),u.append(a.toString("binary"),"binary")}},"action.data.fromObject":function(r){var n=r.fields,u=r.object,o=r.result,s=u.data,a=u.name,c=""==(a||"")?n.data:t(a,u.account);if(c)if("object"===(void 0===s?"undefined":(0,i.default)(s)))o.data=c.fromObject(s);else{if("string"!=typeof s)throw new TypeError("Expecting hex string or object in action.data");var h=e.from(s,"hex");o.data=f.fromBuffer(c,h)}else o.data=s},"action.data.toObject":function(n){var i=n.fields,u=n.object,o=n.result,s=n.config,a=u||{},f=a.data,h=a.name,l=""==(h||"")?i.data:t(h,u.account);if(l){if(r){var p=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);return f&&l.appendByteBuffer(p,f),void(o.data=p.copy(0,p.offset).toString("hex"))}o.data=l.toObject(f,s)}else o.data=e.isBuffer(f)?f.toString("hex"):f}}}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";e.__esModule=!0;var n=u(r(199)),i=u(r(202));function u(t){return t&&t.__esModule?t:{default:t}}e.default=function(){return function(t,e){if(Array.isArray(t))return t;if((0,n.default)(Object(t)))return function(t,e){var r=[],n=!0,u=!1,o=void 0;try{for(var s,a=(0,i.default)(t);!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){u=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(u)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(t,e,r){"use strict";var n=u(r(61)),i=u(r(20));function u(t){return t&&t.__esModule?t:{default:t}}var o=r(49),s=r(57),a=r(96),f=r(3),c=r(58),h=r(207),l=r(208),p=r(100),d=r(99),y=r(209),g=r(210),m=r(211),v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={httpEndpoint:"http://127.0.0.1:8888",debug:!1,verbose:!1,broadcast:!0,logger:{log:function(){var e;return t.verbose?(e=console).log.apply(e,arguments):null},error:function(){var e;return t.verbose?(e=console).error.apply(e,arguments):null}},sign:!0};function r(t,e){Object.keys(e).forEach(function(r){void 0===t[r]&&(t[r]=e[r])})}return r(t,e),r(t.logger,e.logger),function(t){var e=null!=t.httpEndpoint?a(t):null;t.network=e;var r=[],n=h(e,t);r.push(n.abi("eosio.null",m)),r.push(n.abi("eosio.token",y)),r.push(n.abi("eosio",g)),t.chainId||(t.chainId="cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f");e&&function(t,e,r){t.getInfo({}).then(function(t){t.chain_id!==e&&r.log&&r.log("chainId mismatch, signatures will not match transaction authority. expected "+e+" !== actual "+t.chain_id)}).catch(function(t){r.error&&r.error("Warning, unable to validate chainId: "+t.message)})}(e,t.chainId,t.logger);if(null!=t.mockTransactions){if("string"==typeof t.mockTransactions){var u=t.mockTransactions;t.mockTransactions=function(){return u}}f.equal((0,i.default)(t.mockTransactions),"function","config.mockTransactions")}var o=c(t),s=o.structs,d=o.types,v=o.fromBuffer,w=o.toBuffer,E=function(t,e,r,n){var i=t.network,u=Object.assign({},i),o=l(e,i,r,t,n);return function(t,e,r){for(var n in t)if(e[n])throw new TypeError(r+": "+n)}(u,o,"Conflicting methods in EosApi and Transaction Api"),Object.assign(u,o),u}(t,a,s,r);Object.assign(E,{config:function(t){var e=new Set(["httpEndpoint","abiCache","chainId","expireInSeconds"]),r=new Set(["verbose","debug","broadcast","logger","sign"]),n={};return Object.keys(t).forEach(function(i){Object.defineProperty(n,i,{set:function(e){if(!r.has(i))throw new Error("Access denied");t[i]=e},get:function(){if(e.has(i)||r.has(i))return t[i];throw new Error("Access denied")}})}),n}(t),fc:{structs:s,types:d,fromBuffer:v,toBuffer:w,abiCache:n},modules:{format:p}}),t.signProvider||(t.signProvider=b(E,t));return E}(t)};t.exports=v,Object.assign(v,{version:"16.0.0",modules:{format:p,api:a,ecc:o,json:{api:a.api,schema:d},Fcbuffer:s},Testnet:function(t){return console.error("deprecated, change Eos.Testnet(..) to just Eos(..)"),v(t)},Localnet:function(t){return console.error("deprecated, change Eos.Localnet(..) to just Eos(..)"),v(t)}});var b=function(t,e){return function(r){var i,u,s,a,c,h,l,p,d,y,g,m,v,b,w,E,_,A,B,C=r.sign,F=r.buf,D=r.transaction,x=r.optionsKeyProvider;return n.default.async(function(r){for(;;)switch(r.prev=r.next){case 0:if(i=x||e.keyProvider){r.next=3;break}throw new TypeError("This transaction requires a keyProvider for signing");case 3:return u=i,"function"==typeof i&&(u=i({transaction:D})),r.next=7,n.default.awrap(Promise.resolve(u));case 7:if(u=r.sent,Array.isArray(u)||(u=[u]),(u=u.map(function(t){try{return{private:o.PrivateKey(t).toString()}}catch(e){return{public:o.PublicKey(t).toString()}}f(!1,"expecting public or private keys from keyProvider")})).length){r.next=12;break}throw new Error("missing key, check your keyProvider");case 12:if(1!==u.length||!u[0].private){r.next=15;break}return s=u[0].private,r.abrupt("return",C(F,s));case 15:if(null!=e.httpEndpoint){r.next=37;break}for(a=[],c=!0,h=!1,l=void 0,r.prev=20,p=u[Symbol.iterator]();!(c=(d=p.next()).done);c=!0)y=d.value,a.push(C(F,y.private));r.next=28;break;case 24:r.prev=24,r.t0=r.catch(20),h=!0,l=r.t0;case 28:r.prev=28,r.prev=29,!c&&p.return&&p.return();case 31:if(r.prev=31,!h){r.next=34;break}throw l;case 34:return r.finish(31);case 35:return r.finish(28);case 36:return r.abrupt("return",a);case 37:for(g=new Map,m=!0,v=!1,b=void 0,r.prev=41,w=u[Symbol.iterator]();!(m=(E=w.next()).done);m=!0)_=E.value,A=null!=_.private,null!=_.public,A?g.set(o.privateToPublic(_.private),_.private):g.set(_.public,null);r.next=49;break;case 45:r.prev=45,r.t1=r.catch(41),v=!0,b=r.t1;case 49:r.prev=49,r.prev=50,!m&&w.return&&w.return();case 52:if(r.prev=52,!v){r.next=55;break}throw b;case 55:return r.finish(52);case 56:return r.finish(49);case 57:return B=Array.from(g.keys()),r.abrupt("return",t.getRequiredKeys(D,B).then(function(t){var e=t.required_keys;if(!e.length)throw new Error("missing required keys for "+JSON.stringify(D));var r=[],n=[],u=!0,s=!1,a=void 0;try{for(var c,h=e[Symbol.iterator]();!(u=(c=h.next()).done);u=!0){var l=c.value;l=o.PublicKey(l).toString();var p=g.get(l);p?r.push(p):n.push(l)}}catch(t){s=!0,a=t}finally{try{!u&&h.return&&h.return()}finally{if(s)throw a}}0!==n.length&&(f("function"==typeof i,"keyProvider function is needed for private key lookup"),i({pubkeys:n}).forEach(function(t){r.push(t)}));var d=[],y=!0,m=!1,v=void 0;try{for(var b,w=r[Symbol.iterator]();!(y=(b=w.next()).done);y=!0){var E=b.value;d.push(C(F,E))}}catch(t){m=!0,v=t}finally{try{!y&&w.return&&w.return()}finally{if(m)throw v}}return d}));case 59:case"end":return r.stop()}},null,this,[[20,24,28,36],[29,,31,35],[41,45,49,57],[50,,52,56]])}}},function(t,e,r){t.exports=r(104)},function(t,e,r){"use strict";var n=r(28),i=r(63),u=r(66),o=r(13),s=r(23),a=r(111),f=r(44),c=r(118),h=r(4)("iterator"),l=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,y,g,m){a(r,e,d);var v,b,w,E=function(t){if(!l&&t in C)return C[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},_=e+" Iterator",A="values"==y,B=!1,C=t.prototype,F=C[h]||C["@@iterator"]||y&&C[y],D=F||E(y),x=y?A?E("entries"):D:void 0,S="Array"==e&&C.entries||F;if(S&&(w=c(S.call(new t)))!==Object.prototype&&w.next&&(f(w,_,!0),n||"function"==typeof w[h]||o(w,h,p)),A&&F&&"values"!==F.name&&(B=!0,D=function(){return F.call(this)}),n&&!m||!l&&!B&&C[h]||o(C,h,D),s[e]=D,s[_]=p,y)if(v={values:A?D:E("values"),keys:g?D:E("keys"),entries:x},m)for(b in v)b in C||u(C,b,v[b]);else i(i.P+i.F*(l||B),e,v);return v}},function(t,e,r){var n=r(6),i=r(8),u=r(109),o=r(13),s=r(9),a=function(t,e,r){var f,c,h,l=t&a.F,p=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=t&a.W,v=p?i:i[e]||(i[e]={}),b=v.prototype,w=p?n:d?n[e]:(n[e]||{}).prototype;for(f in p&&(r=e),r)(c=!l&&w&&void 0!==w[f])&&s(v,f)||(h=c?w[f]:r[f],v[f]=p&&"function"!=typeof w[f]?r[f]:g&&c?u(h,n):m&&w[f]==h?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(h):y&&"function"==typeof h?u(Function.call,h):h,y&&((v.virtual||(v.virtual={}))[f]=h,t&a.R&&b&&!b[f]&&o(b,f,h)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,r){t.exports=!r(15)&&!r(29)(function(){return 7!=Object.defineProperty(r(65)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(22),i=r(6).document,u=n(i)&&n(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,e,r){t.exports=r(13)},function(t,e,r){var n=r(21),i=r(112),u=r(43),o=r(41)("IE_PROTO"),s=function(){},a=function(){var t,e=r(65)("iframe"),n=u.length;for(e.style.display="none",r(117).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;n--;)delete a.prototype[u[n]];return a()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=a(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(9),i=r(16),u=r(114)(!1),o=r(41)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),a=0,f=[];for(r in s)r!=o&&n(s,r)&&f.push(r);for(;e.length>a;)n(s,r=e[a++])&&(~u(f,r)||f.push(r));return f}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(68),i=r(43).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){"use strict";(function(e){var n=r(73),i=r(18),u=r(138),o=r(3),s=r(26),a=r(34),f=r(12),c=i.Long;function h(t,r,n,c,h){if(!(t=a(t)))throw new TypeError("private_key is required");if(!(r=s(r)))throw new TypeError("public_key is required");if(!(n=p(n)))throw new TypeError("nonce is required");if(!e.isBuffer(c)){if("string"!=typeof c)throw new TypeError("message should be buffer or string");c=new e(c,"binary")}if(h&&"number"!=typeof h)throw new TypeError("checksum should be a number");var l=t.getSharedSecret(r),y=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);y.writeUint64(n),y.append(l.toString("binary"),"binary"),y=new e(y.copy(0,y.offset).toBinary(),"binary");var g=f.sha512(y),m=g.slice(32,48),v=g.slice(0,32),b=f.sha256(g);if(b=b.slice(0,4),b=i.fromBinary(b.toString("binary"),i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN).readUint32(),h){if(b!==h)throw new Error("Invalid key");c=function(t,r,n){o(t,"Missing cipher text"),t=d(t);var i=u.createDecipheriv("aes-256-cbc",r,n);return t=e.concat([i.update(t),i.final()])}(c,v,m)}else c=function(t,r,n){o(t,"Missing plain text"),t=d(t);var i=u.createCipheriv("aes-256-cbc",r,n);return t=e.concat([i.update(t),i.final()])}(c,v,m);return{nonce:n,message:c,checksum:b}}t.exports={encrypt:function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){if(null===l){var t=new Uint8Array(n(2));l=parseInt(t[0]<<8|t[1],10)}var e=c.fromNumber(Date.now()),r=++l%65535;return(e=e.shiftLeft(16).or(c.fromNumber(r))).toString()}();return h(t,e,i,r)},decrypt:function(t,e,r,n,i){return h(t,e,r,n,i).message}};var l=null,p=function(t){return t?c.isLong(t)?t:c.fromString(t):t},d=function(t){return t?e.isBuffer(t)?t:new e(t,"binary"):t}}).call(this,r(2).Buffer)},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(e,n){var i=r(0).Buffer,u=e.crypto||e.msCrypto;u&&u.getRandomValues?t.exports=function(t,r){if(t>65536)throw new Error("requested too many random bytes");var o=new e.Uint8Array(t);t>0&&u.getRandomValues(o);var s=i.from(o.buffer);if("function"==typeof r)return n.nextTick(function(){r(null,s)});return s}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(5),r(17))},function(t,e,r){var n={ECB:r(140),CBC:r(141),CFB:r(142),CFB8:r(143),CFB1:r(144),OFB:r(145),CTR:r(75),GCM:r(75)},i=r(77);for(var u in i)i[u].module=n[i[u].mode];t.exports=i},function(t,e,r){var n=r(24),i=r(0).Buffer,u=r(76);function o(t){var e=t._cipher.encryptBlockRaw(t._prev);return u(t._prev),e}e.encrypt=function(t,e){var r=Math.ceil(e.length/16),u=t._cache.length;t._cache=i.concat([t._cache,i.allocUnsafe(16*r)]);for(var s=0;s<r;s++){var a=o(t),f=u+16*s;t._cache.writeUInt32BE(a[0],f+0),t._cache.writeUInt32BE(a[1],f+4),t._cache.writeUInt32BE(a[2],f+8),t._cache.writeUInt32BE(a[3],f+12)}var c=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),n(e,c)}},function(t,e){t.exports=function(t){for(var e,r=t.length;r--;){if(255!==(e=t.readUInt8(r))){e++,t.writeUInt8(e,r);break}t.writeUInt8(0,r)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,r){var n=r(32),i=r(0).Buffer,u=r(10),o=r(1),s=r(157),a=r(24),f=r(76);function c(t,e,r,o){u.call(this);var a=i.alloc(4,0);this._cipher=new n.AES(e);var c=this._cipher.encryptBlock(a);this._ghash=new s(c),r=function(t,e,r){if(12===e.length)return t._finID=i.concat([e,i.from([0,0,0,1])]),i.concat([e,i.from([0,0,0,2])]);var n=new s(r),u=e.length,o=u%16;n.update(e),o&&(o=16-o,n.update(i.alloc(o,0))),n.update(i.alloc(8,0));var a=8*u,c=i.alloc(8);c.writeUIntBE(a,0,8),n.update(c),t._finID=n.state;var h=i.from(t._finID);return f(h),h}(this,r,c),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}o(c,u),c.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=i.alloc(e,0),this._ghash.update(e))}this._called=!0;var r=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(r),this._len+=t.length,r},c.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=a(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var r=0;t.length!==e.length&&r++;for(var n=Math.min(t.length,e.length),i=0;i<n;++i)r+=t[i]^e[i];return r}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},c.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},c.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},c.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=c},function(t,e,r){t.exports=i;var n=r(50).EventEmitter;function i(){n.call(this)}r(1)(i,n),i.Readable=r(51),i.Writable=r(153),i.Duplex=r(154),i.Transform=r(155),i.PassThrough=r(156),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function u(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",u),t._isStdio||e&&!1===e.end||(r.on("end",s),r.on("close",a));var o=!1;function s(){o||(o=!0,t.end())}function a(){o||(o=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(c(),0===n.listenerCount(this,"error"))throw t}function c(){r.removeListener("data",i),t.removeListener("drain",u),r.removeListener("end",s),r.removeListener("close",a),r.removeListener("error",f),t.removeListener("error",f),r.removeListener("end",c),r.removeListener("close",c),t.removeListener("close",c)}return r.on("error",f),t.on("error",f),r.on("end",c),r.on("close",c),t.on("close",c),t.emit("pipe",r),t}},function(t,e,r){"use strict";(function(e,n){var i=r(33);t.exports=b;var u,o=r(72);b.ReadableState=v;r(50).EventEmitter;var s=function(t,e){return t.listeners(e).length},a=r(81),f=r(0).Buffer,c=e.Uint8Array||function(){};var h=r(25);h.inherits=r(1);var l=r(146),p=void 0;p=l&&l.debuglog?l.debuglog("stream"):function(){};var d,y=r(147),g=r(82);h.inherits(b,a);var m=["error","close","destroy","pause","resume"];function v(t,e){u=u||r(11),t=t||{};var n=e instanceof u;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=r(53).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function b(t){if(u=u||r(11),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function w(t,e,r,n,i){var u,o=t._readableState;null===e?(o.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,B(t)}(t,o)):(i||(u=function(t,e){var r;(function(t){return f.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));return r}(o,e)),u?t.emit("error",u):o.objectMode||e&&e.length>0?("string"==typeof e||o.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),n?o.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):E(t,o,e,!0):o.ended?t.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!r?(e=o.decoder.write(e),o.objectMode||0!==e.length?E(t,o,e,!1):F(t,o)):E(t,o,e,!1))):n||(o.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(o)}function E(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&B(t)),F(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=f.from(t,e),e=""),r=!0),w(this,t,e,!1,r)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return d||(d=r(53).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var _=8388608;function A(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=_?t=_:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function B(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(C,t):C(t))}function C(t){p("emit readable"),t.emit("readable"),T(t)}function F(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(D,t,e))}function D(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function x(t){p("readable nexttick read 0"),t.read(0)}function S(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),T(t),e.flowing&&!e.reading&&t.read(0)}function T(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function k(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;t-=i.length;for(;r=r.next;){var u=r.data,o=t>u.length?u.length:t;if(o===u.length?i+=u:i+=u.slice(0,t),0===(t-=o)){o===u.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=u.slice(o));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=f.allocUnsafe(t),n=e.head,i=1;n.data.copy(r),t-=n.data.length;for(;n=n.next;){var u=n.data,o=t>u.length?u.length:t;if(u.copy(r,r.length-t,0,o),0===(t-=o)){o===u.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=u.slice(o));break}++i}return e.length-=i,r}(t,e);return n}(t,e.buffer,e.decoder),r);var r}function M(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(I,e,t))}function I(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function O(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}b.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?M(this):B(this),null;if(0===(t=A(t,e))&&e.ended)return 0===e.length&&M(this),null;var n,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=A(r,e))),null===(n=t>0?k(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&M(this)),null!==n&&this.emit("data",n),n},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var r=this,u=this._readableState;switch(u.pipesCount){case 0:u.pipes=t;break;case 1:u.pipes=[u.pipes,t];break;default:u.pipes.push(t)}u.pipesCount+=1,p("pipe count=%d opts=%j",u.pipesCount,e);var a=(!e||!1!==e.end)&&t!==n.stdout&&t!==n.stderr?c:b;function f(e,n){p("onunpipe"),e===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,p("cleanup"),t.removeListener("close",m),t.removeListener("finish",v),t.removeListener("drain",h),t.removeListener("error",g),t.removeListener("unpipe",f),r.removeListener("end",c),r.removeListener("end",b),r.removeListener("data",y),l=!0,!u.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function c(){p("onend"),t.end()}u.endEmitted?i.nextTick(a):r.once("end",a),t.on("unpipe",f);var h=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,T(t))}}(r);t.on("drain",h);var l=!1;var d=!1;function y(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===u.pipesCount&&u.pipes===t||u.pipesCount>1&&-1!==O(u.pipes,t))&&!l&&(p("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,d=!0),r.pause())}function g(e){p("onerror",e),b(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",v),b()}function v(){p("onfinish"),t.removeListener("close",m),b()}function b(){p("unpipe"),r.unpipe(t)}return r.on("data",y),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?o(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",g),t.once("close",m),t.once("finish",v),t.emit("pipe",r),u.flowing||(p("pipe resume"),r.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r),this);if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var u=0;u<i;u++)n[u].emit("unpipe",this,r);return this}var o=O(e.pipes,t);return-1===o?this:(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r),this)},b.prototype.on=function(t,e){var r=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&B(this):i.nextTick(x,this))}return r},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(S,t,e))}(this,t)),this},b.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",function(){if(p("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(p("wrapped data"),r.decoder&&(i=r.decoder.write(i)),!r.objectMode||null!==i&&void 0!==i)&&((r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var u=0;u<m.length;u++)t.on(m[u],this.emit.bind(this,m[u]));return this._read=function(e){p("wrapped _read",e),n&&(n=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=k}).call(this,r(5),r(17))},function(t,e,r){t.exports=r(50).EventEmitter},function(t,e,r){"use strict";var n=r(33);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,u=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return u||o?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(n.nextTick(i,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,r){"use strict";t.exports=u;var n=r(11),i=r(25);function u(t){if(!(this instanceof u))return new u(t);n.call(this,t),this._transformState={afterTransform:function(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",o)}function o(){var t=this;"function"==typeof this._flush?this._flush(function(e,r){s(t,e,r)}):s(this,null,null)}function s(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(1),i.inherits(u,n),u.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},u.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},u.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},u.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},u.prototype._destroy=function(t,e){var r=this;n.prototype._destroy.call(this,t,function(t){e(t),r.emit("close")})}},function(t,e,r){var n=r(32),i=r(0).Buffer,u=r(10);function o(t,e,r,o){u.call(this),this._cipher=new n.AES(e),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._mode=t}r(1)(o,u),o.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},o.prototype._final=function(){this._cipher.scrub()},t.exports=o},function(t,e,r){var n=r(0).Buffer,i=r(54);t.exports=function(t,e,r,u){if(n.isBuffer(t)||(t=n.from(t,"binary")),e&&(n.isBuffer(e)||(e=n.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var o=r/8,s=n.alloc(o),a=n.alloc(u||0),f=n.alloc(0);o>0||u>0;){var c=new i;c.update(f),c.update(t),e&&c.update(e),f=c.digest();var h=0;if(o>0){var l=s.length-o;h=Math.min(o,f.length),f.copy(s,l,0,h),o-=h}if(h<f.length&&u>0){var p=a.length-u,d=Math.min(u,f.length-h);f.copy(a,p,h,h+d),u-=d}}return f.fill(0),{key:s,iv:a}}},function(t,e,r){"use strict";var n=r(0).Buffer,i=r(79).Transform;function u(t){i.call(this),this._block=n.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(1)(u,i),u.prototype._transform=function(t,e,r){var n=null;try{this.update(t,e)}catch(t){n=t}r(n)},u.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},u.prototype.update=function(t,e){if(function(t,e){if(!n.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(t)||(t=n.from(t,e));for(var r=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var u=this._blockOffset;u<this._blockSize;)r[u++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)r[this._blockOffset++]=t[i++];for(var o=0,s=8*t.length;s>0;++o)this._length[o]+=s,(s=this._length[o]/4294967296|0)>0&&(this._length[o]-=4294967296*s);return this},u.prototype._update=function(){throw new Error("_update is not implemented")},u.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return e},u.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=u},function(t,e,r){var n=r(3),i=r(0).Buffer,u=r(7),o=u.valueOf(3);function s(t,e,r,i){n.notStrictEqual(i,void 0,"Missing Z coordinate"),this.curve=t,this.x=e,this.y=r,this.z=i,this._zInv=null,this.compressed=!0}Object.defineProperty(s.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(s.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(s.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),s.fromAffine=function(t,e,r){return new s(t,e,r,u.ONE)},s.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},s.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new s(this.curve,this.x,t,this.z)},s.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var e=this.x,r=this.y,n=t.x,i=t.y.multiply(this.z).subtract(r.multiply(t.z)).mod(this.curve.p),u=n.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p);if(0===u.signum())return 0===i.signum()?this.twice():this.curve.infinity;var a=u.square(),f=a.multiply(u),c=e.multiply(a),h=i.square().multiply(this.z),l=h.subtract(c.shiftLeft(1)).multiply(t.z).subtract(f).multiply(u).mod(this.curve.p),p=c.multiply(o).multiply(i).subtract(r.multiply(f)).subtract(h.multiply(i)).multiply(t.z).add(i.multiply(f)).mod(this.curve.p),d=f.multiply(this.z).multiply(t.z).mod(this.curve.p);return new s(this.curve,l,p,d)},s.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,e=this.y,r=e.multiply(this.z).mod(this.curve.p),n=r.multiply(e).mod(this.curve.p),i=this.curve.a,u=t.square().multiply(o);0!==i.signum()&&(u=u.add(this.z.square().multiply(i)));var a=(u=u.mod(this.curve.p)).square().subtract(t.shiftLeft(3).multiply(n)).shiftLeft(1).multiply(r).mod(this.curve.p),f=u.multiply(o).multiply(t).subtract(n.shiftLeft(1)).shiftLeft(2).multiply(n).subtract(u.pow(3)).mod(this.curve.p),c=r.pow(3).shiftLeft(3).mod(this.curve.p);return new s(this.curve,a,f,c)},s.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var e=t,r=e.multiply(o),n=this.negate(),i=this,u=r.bitLength()-2;u>0;--u){var s=r.testBit(u),a=e.testBit(u);i=i.twice(),s!==a&&(i=i.add(s?this:n))}return i},s.prototype.multiplyTwo=function(t,e,r){for(var n=Math.max(t.bitLength(),r.bitLength())-1,i=this.curve.infinity,u=this.add(e);n>=0;){var o=t.testBit(n),s=r.testBit(n);i=i.twice(),o?i=s?i.add(u):i.add(this):s&&(i=i.add(e)),--n}return i},s.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return i.alloc(1,0);var e,r=this.affineX,n=this.affineY,u=this.curve.pLength;return t?(e=i.allocUnsafe(1+u)).writeUInt8(n.isEven()?2:3,0):((e=i.allocUnsafe(1+u+u)).writeUInt8(4,0),n.toBuffer(u).copy(e,1+u)),r.toBuffer(u).copy(e,1),e},s.decodeFrom=function(t,e){var r,i=e.readUInt8(0),o=4!==i,a=Math.floor((t.p.bitLength()+7)/8),f=u.fromBuffer(e.slice(1,1+a));if(o){n.equal(e.length,a+1,"Invalid sequence length"),n(2===i||3===i,"Invalid sequence tag");var c=3===i;r=t.pointFromX(c,f)}else{n.equal(e.length,1+a+a,"Invalid sequence length");var h=u.fromBuffer(e.slice(1+a));r=s.fromAffine(t,f,h)}return r.compressed=o,r},s.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},t.exports=s},function(t,e,r){function n(t,e,r){if(!(this instanceof n))return new n(t,e,r);null!=t&&("number"==typeof t?this.fromNumber(t,e,r):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}var i=n.prototype;i.__bigi=r(161).version,n.isBigInteger=function(t,e){return t&&t.__bigi&&(!e||t.__bigi===i.__bigi)},n.prototype.am=function(t,e,r,n,i,u){for(;--u>=0;){var o=e*this[t++]+r[n]+i;i=Math.floor(o/67108864),r[n++]=67108863&o}return i},n.prototype.DB=26,n.prototype.DM=67108863;var u=n.prototype.DV=1<<26;n.prototype.FV=Math.pow(2,52),n.prototype.F1=26,n.prototype.F2=0;var o,s,a="0123456789abcdefghijklmnopqrstuvwxyz",f=new Array;for(o="0".charCodeAt(0),s=0;s<=9;++s)f[o++]=s;for(o="a".charCodeAt(0),s=10;s<36;++s)f[o++]=s;for(o="A".charCodeAt(0),s=10;s<36;++s)f[o++]=s;function c(t){return a.charAt(t)}function h(t,e){var r=f[t.charCodeAt(e)];return null==r?-1:r}function l(t){var e=new n;return e.fromInt(t),e}function p(t){var e,r=1;return 0!=(e=t>>>16)&&(t=e,r+=16),0!=(e=t>>8)&&(t=e,r+=8),0!=(e=t>>4)&&(t=e,r+=4),0!=(e=t>>2)&&(t=e,r+=2),0!=(e=t>>1)&&(t=e,r+=1),r}function d(t){this.m=t}function y(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function m(t,e){return t|e}function v(t,e){return t^e}function b(t,e){return t&~e}function w(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function E(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function _(){}function A(t){return t}function B(t){this.r2=new n,this.q3=new n,n.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}d.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},d.prototype.revert=function(t){return t},d.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},d.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r)},d.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},y.prototype.convert=function(t){var e=new n;return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(n.ZERO)>0&&this.m.subTo(e,e),e},y.prototype.revert=function(t){var e=new n;return t.copyTo(e),this.reduce(e),e},y.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=32767&t[e],n=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[r=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},y.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r)},y.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},i.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},i.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+u:this.t=0},i.fromString=function(t,e){var r;if(16==e)r=4;else if(8==e)r=3;else if(256==e)r=8;else if(2==e)r=1;else if(32==e)r=5;else{if(4!=e)return void this.fromRadix(t,e);r=2}this.t=0,this.s=0;for(var i=t.length,u=!1,o=0;--i>=0;){var s=8==r?255&t[i]:h(t,i);s<0?"-"==t.charAt(i)&&(u=!0):(u=!1,0==o?this[this.t++]=s:o+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),u&&n.ZERO.subTo(this,this)},i.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},i.dlShiftTo=function(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s},i.drShiftTo=function(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s},i.lShiftTo=function(t,e){var r,n=t%this.DB,i=this.DB-n,u=(1<<i)-1,o=Math.floor(t/this.DB),s=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)e[r+o+1]=this[r]>>i|s,s=(this[r]&u)<<n;for(r=o-1;r>=0;--r)e[r]=0;e[o]=s,e.t=this.t+o+1,e.s=this.s,e.clamp()},i.rShiftTo=function(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t)e.t=0;else{var n=t%this.DB,i=this.DB-n,u=(1<<n)-1;e[0]=this[r]>>n;for(var o=r+1;o<this.t;++o)e[o-r-1]|=(this[o]&u)<<i,e[o-r]=this[o]>>n;n>0&&(e[this.t-r-1]|=(this.s&u)<<i),e.t=this.t-r,e.clamp()}},i.subTo=function(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]-t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n-=t[r],e[r++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[r++]=this.DV+n:n>0&&(e[r++]=n),e.t=r,e.clamp()},i.multiplyTo=function(t,e){var r=this.abs(),i=t.abs(),u=r.t;for(e.t=u+i.t;--u>=0;)e[u]=0;for(u=0;u<i.t;++u)e[u+r.t]=r.am(0,i[u],e,u,0,r.t);e.s=0,e.clamp(),this.s!=t.s&&n.ZERO.subTo(e,e)},i.squareTo=function(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var n=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,n,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp()},i.divRemTo=function(t,e,r){var i=t.abs();if(!(i.t<=0)){var u=this.abs();if(u.t<i.t)return null!=e&&e.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=new n);var o=new n,s=this.s,a=t.s,f=this.DB-p(i[i.t-1]);f>0?(i.lShiftTo(f,o),u.lShiftTo(f,r)):(i.copyTo(o),u.copyTo(r));var c=o.t,h=o[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),d=this.FV/l,y=(1<<this.F1)/l,g=1<<this.F2,m=r.t,v=m-c,b=null==e?new n:e;for(o.dlShiftTo(v,b),r.compareTo(b)>=0&&(r[r.t++]=1,r.subTo(b,r)),n.ONE.dlShiftTo(c,b),b.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var w=r[--m]==h?this.DM:Math.floor(r[m]*d+(r[m-1]+g)*y);if((r[m]+=o.am(0,w,r,v,0,c))<w)for(o.dlShiftTo(v,b),r.subTo(b,r);r[m]<--w;)r.subTo(b,r)}null!=e&&(r.drShiftTo(c,e),s!=a&&n.ZERO.subTo(e,e)),r.t=c,r.clamp(),f>0&&r.rShiftTo(f,r),s<0&&n.ZERO.subTo(r,r)}}},i.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},i.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},i.exp=function(t,e){if(t>4294967295||t<1)return n.ONE;var r=new n,i=new n,u=e.convert(this),o=p(t)-1;for(u.copyTo(r);--o>=0;)if(e.sqrTo(r,i),(t&1<<o)>0)e.mulTo(i,u,r);else{var s=r;r=i,i=s}return e.revert(r)},i.toString=function(t){var e;if(this.s<0)return"-"+this.negate().toString(t);if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var r,n=(1<<e)-1,i=!1,u="",o=this.t,s=this.DB-o*this.DB%e;if(o-- >0)for(s<this.DB&&(r=this[o]>>s)>0&&(i=!0,u=c(r));o>=0;)s<e?(r=(this[o]&(1<<s)-1)<<e-s,r|=this[--o]>>(s+=this.DB-e)):(r=this[o]>>(s-=e)&n,s<=0&&(s+=this.DB,--o)),r>0&&(i=!0),i&&(u+=c(r));return i?u:"0"},i.negate=function(){var t=new n;return n.ZERO.subTo(this,t),t},i.abs=function(){return this.s<0?this.negate():this},i.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var r=this.t;if(0!=(e=r-t.t))return this.s<0?-e:e;for(;--r>=0;)if(0!=(e=this[r]-t[r]))return e;return 0},i.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+p(this[this.t-1]^this.s&this.DM)},i.byteLength=function(){return this.bitLength()>>3},i.mod=function(t){var e=new n;return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(n.ZERO)>0&&t.subTo(e,e),e},i.modPowInt=function(t,e){var r;return r=t<256||e.isEven()?new d(e):new y(e),this.exp(t,r)},_.prototype.convert=A,_.prototype.revert=A,_.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r)},_.prototype.sqrTo=function(t,e){t.squareTo(e)},B.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=new n;return t.copyTo(e),this.reduce(e),e},B.prototype.revert=function(t){return t},B.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},B.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r)},B.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],F=(1<<26)/C[C.length-1];i.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},i.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),r=Math.pow(t,e),i=l(r),u=new n,o=new n,s="";for(this.divRemTo(i,u,o);u.signum()>0;)s=(r+o.intValue()).toString(t).substr(1)+s,u.divRemTo(i,u,o);return o.intValue().toString(t)+s},i.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var r=this.chunkSize(e),i=Math.pow(e,r),u=!1,o=0,s=0,a=0;a<t.length;++a){var f=h(t,a);f<0?"-"==t.charAt(a)&&0==this.signum()&&(u=!0):(s=e*s+f,++o>=r&&(this.dMultiply(i),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),u&&n.ZERO.subTo(this,this)},i.fromNumber=function(t,e,r){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(n.ONE.shiftLeft(t-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(n.ONE.shiftLeft(t-1),this);else{var i=new Array,u=7&t;i.length=1+(t>>3),e.nextBytes(i),u>0?i[0]&=(1<<u)-1:i[0]=0,this.fromString(i,256)}},i.bitwiseTo=function(t,e,r){var n,i,u=Math.min(t.t,this.t);for(n=0;n<u;++n)r[n]=e(this[n],t[n]);if(t.t<this.t){for(i=t.s&this.DM,n=u;n<this.t;++n)r[n]=e(this[n],i);r.t=this.t}else{for(i=this.s&this.DM,n=u;n<t.t;++n)r[n]=e(i,t[n]);r.t=t.t}r.s=e(this.s,t.s),r.clamp()},i.changeBit=function(t,e){var r=n.ONE.shiftLeft(t);return this.bitwiseTo(r,e,r),r},i.addTo=function(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]+t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n+=t[r],e[r++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[r++]=n:n<-1&&(e[r++]=this.DV+n),e.t=r,e.clamp()},i.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},i.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},i.multiplyLowerTo=function(t,e,r){var n,i=Math.min(this.t+t.t,e);for(r.s=0,r.t=i;i>0;)r[--i]=0;for(n=r.t-this.t;i<n;++i)r[i+this.t]=this.am(0,t[i],r,i,0,this.t);for(n=Math.min(t.t,e);i<n;++i)this.am(0,t[i],r,i,0,e-i);r.clamp()},i.multiplyUpperTo=function(t,e,r){--e;var n=r.t=this.t+t.t-e;for(r.s=0;--n>=0;)r[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)r[this.t+n-e]=this.am(e-n,t[n],r,0,0,this.t+n-e);r.clamp(),r.drShiftTo(1,r)},i.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(0==e)r=this[0]%t;else for(var n=this.t-1;n>=0;--n)r=(e*r+this[n])%t;return r},i.millerRabin=function(t){var e=this.subtract(n.ONE),r=e.getLowestSetBit();if(r<=0)return!1;var i=e.shiftRight(r);(t=t+1>>1)>C.length&&(t=C.length);for(var u=new n(null),o=[],s=0;s<t;++s){for(;f=C[Math.floor(Math.random()*C.length)],-1!=o.indexOf(f););o.push(f),u.fromInt(f);var a=u.modPow(i,this);if(0!=a.compareTo(n.ONE)&&0!=a.compareTo(e)){for(var f=1;f++<r&&0!=a.compareTo(e);)if(0==(a=a.modPowInt(2,this)).compareTo(n.ONE))return!1;if(0!=a.compareTo(e))return!1}}return!0},i.clone=function(){var t=new n;return this.copyTo(t),t},i.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},i.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},i.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},i.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},i.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var r,n=this.DB-t*this.DB%8,i=0;if(t-- >0)for(n<this.DB&&(r=this[t]>>n)!=(this.s&this.DM)>>n&&(e[i++]=r|this.s<<this.DB-n);t>=0;)n<8?(r=(this[t]&(1<<n)-1)<<8-n,r|=this[--t]>>(n+=this.DB-8)):(r=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&r)&&(r|=-256),0===i&&(128&this.s)!=(128&r)&&++i,(i>0||r!=this.s)&&(e[i++]=r);return e},i.equals=function(t){return 0==this.compareTo(t)},i.min=function(t){return this.compareTo(t)<0?this:t},i.max=function(t){return this.compareTo(t)>0?this:t},i.and=function(t){var e=new n;return this.bitwiseTo(t,g,e),e},i.or=function(t){var e=new n;return this.bitwiseTo(t,m,e),e},i.xor=function(t){var e=new n;return this.bitwiseTo(t,v,e),e},i.andNot=function(t){var e=new n;return this.bitwiseTo(t,b,e),e},i.not=function(){for(var t=new n,e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},i.shiftLeft=function(t){var e=new n;return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},i.shiftRight=function(t){var e=new n;return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},i.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+w(this[t]);return this.s<0?this.t*this.DB:-1},i.bitCount=function(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=E(this[r]^e);return t},i.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},i.setBit=function(t){return this.changeBit(t,m)},i.clearBit=function(t){return this.changeBit(t,b)},i.flipBit=function(t){return this.changeBit(t,v)},i.add=function(t){var e=new n;return this.addTo(t,e),e},i.subtract=function(t){var e=new n;return this.subTo(t,e),e},i.multiply=function(t){var e=new n;return this.multiplyTo(t,e),e},i.divide=function(t){var e=new n;return this.divRemTo(t,e,null),e},i.remainder=function(t){var e=new n;return this.divRemTo(t,null,e),e},i.divideAndRemainder=function(t){var e=new n,r=new n;return this.divRemTo(t,e,r),new Array(e,r)},i.modPow=function(t,e){var r,i,u=t.bitLength(),o=l(1);if(u<=0)return o;r=u<18?1:u<48?3:u<144?4:u<768?5:6,i=u<8?new d(e):e.isEven()?new B(e):new y(e);var s=new Array,a=3,f=r-1,c=(1<<r)-1;if(s[1]=i.convert(this),r>1){var h=new n;for(i.sqrTo(s[1],h);a<=c;)s[a]=new n,i.mulTo(h,s[a-2],s[a]),a+=2}var g,m,v=t.t-1,b=!0,w=new n;for(u=p(t[v])-1;v>=0;){for(u>=f?g=t[v]>>u-f&c:(g=(t[v]&(1<<u+1)-1)<<f-u,v>0&&(g|=t[v-1]>>this.DB+u-f)),a=r;0==(1&g);)g>>=1,--a;if((u-=a)<0&&(u+=this.DB,--v),b)s[g].copyTo(o),b=!1;else{for(;a>1;)i.sqrTo(o,w),i.sqrTo(w,o),a-=2;a>0?i.sqrTo(o,w):(m=o,o=w,w=m),i.mulTo(w,s[g],o)}for(;v>=0&&0==(t[v]&1<<u);)i.sqrTo(o,w),m=o,o=w,w=m,--u<0&&(u=this.DB-1,--v)}return i.revert(o)},i.modInverse=function(t){var e=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&e||0==t.signum())return n.ZERO;for(var r=t.clone(),i=this.clone(),u=l(1),o=l(0),s=l(0),a=l(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),e?(u.isEven()&&o.isEven()||(u.addTo(this,u),o.subTo(t,o)),u.rShiftTo(1,u)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;i.isEven();)i.rShiftTo(1,i),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);r.compareTo(i)>=0?(r.subTo(i,r),e&&u.subTo(s,u),o.subTo(a,o)):(i.subTo(r,i),e&&s.subTo(u,s),a.subTo(o,a))}if(0!=i.compareTo(n.ONE))return n.ZERO;for(;a.compareTo(t)>=0;)a.subTo(t,a);for(;a.signum()<0;)a.addTo(t,a);return a},i.pow=function(t){return this.exp(t,new _)},i.gcd=function(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var n=e;e=r,r=n}var i=e.getLowestSetBit(),u=r.getLowestSetBit();if(u<0)return e;for(i<u&&(u=i),u>0&&(e.rShiftTo(u,e),r.rShiftTo(u,r));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return u>0&&r.lShiftTo(u,r),r},i.isProbablePrime=function(t){var e,r=this.abs();if(1==r.t&&r[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(r[0]==C[e])return!0;return!1}if(r.isEven())return!1;for(e=1;e<C.length;){for(var n=C[e],i=e+1;i<C.length&&n<F;)n*=C[i++];for(n=r.modInt(n);e<i;)if(n%C[e++]==0)return!1}return r.millerRabin(t)},i.square=function(){var t=new n;return this.squareTo(t),t},n.ZERO=l(0),n.ONE=l(1),n.valueOf=l,t.exports=n},function(t,e,r){var n=r(3),i=r(7),u=r(87);function o(t,e,r,n,o,s,a){this.p=t,this.a=e,this.b=r,this.G=u.fromAffine(this,n,o),this.n=s,this.h=a,this.infinity=new u(this,null,null,i.ZERO),this.pOverFour=t.add(i.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}o.prototype.pointFromX=function(t,e){var r=e.pow(3).add(this.a.multiply(e)).add(this.b).mod(this.p).modPow(this.pOverFour,this.p),n=r;return r.isEven()^!t&&(n=this.p.subtract(n)),u.fromAffine(this,e,n)},o.prototype.isInfinity=function(t){return t===this.infinity||0===t.z.signum()&&0!==t.y.signum()},o.prototype.isOnCurve=function(t){if(this.isInfinity(t))return!0;var e=t.affineX,r=t.affineY,n=this.a,i=this.b,u=this.p;if(e.signum()<0||e.compareTo(u)>=0)return!1;if(r.signum()<0||r.compareTo(u)>=0)return!1;var o=r.square().mod(u),s=e.pow(3).add(n.multiply(e)).add(i).mod(u);return o.equals(s)},o.prototype.validate=function(t){n(!this.isInfinity(t),"Point is at infinity"),n(this.isOnCurve(t),"Point is not on the curve");var e=t.multiply(this.n);return n(this.isInfinity(e),"Point is not a scalar multiple of G"),!0},t.exports=o},function(t,e,r){"use strict";var n=r(2).Buffer,i=r(1),u=r(86),o=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],a=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],f=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],c=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function p(){u.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function d(t,e){return t<<e|t>>>32-e}function y(t,e,r,n,i,u,o,s){return d(t+(e^r^n)+u+o|0,s)+i|0}function g(t,e,r,n,i,u,o,s){return d(t+(e&r|~e&n)+u+o|0,s)+i|0}function m(t,e,r,n,i,u,o,s){return d(t+((e|~r)^n)+u+o|0,s)+i|0}function v(t,e,r,n,i,u,o,s){return d(t+(e&n|r&~n)+u+o|0,s)+i|0}function b(t,e,r,n,i,u,o,s){return d(t+(e^(r|~n))+u+o|0,s)+i|0}i(p,u),p.prototype._update=function(){for(var t=o,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,p=0|this._e,w=0|this._a,E=0|this._b,_=0|this._c,A=0|this._d,B=0|this._e,C=0;C<80;C+=1){var F,D;C<16?(F=y(r,n,i,u,p,t[s[C]],h[0],f[C]),D=b(w,E,_,A,B,t[a[C]],l[0],c[C])):C<32?(F=g(r,n,i,u,p,t[s[C]],h[1],f[C]),D=v(w,E,_,A,B,t[a[C]],l[1],c[C])):C<48?(F=m(r,n,i,u,p,t[s[C]],h[2],f[C]),D=m(w,E,_,A,B,t[a[C]],l[2],c[C])):C<64?(F=v(r,n,i,u,p,t[s[C]],h[3],f[C]),D=g(w,E,_,A,B,t[a[C]],l[3],c[C])):(F=b(r,n,i,u,p,t[s[C]],h[4],f[C]),D=y(w,E,_,A,B,t[a[C]],l[4],c[C])),r=p,p=u,u=d(i,10),i=n,n=F,w=B,B=A,A=d(_,10),_=E,E=D}var x=this._b+i+A|0;this._b=this._c+u+B|0,this._c=this._d+p+w|0,this._d=this._e+r+E|0,this._e=this._a+n+_|0,this._a=x},p.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=n.alloc?n.alloc(20):new n(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=p},function(t,e,r){(e=t.exports=function(t){t=t.toLowerCase();var r=e[t];if(!r)throw new Error(t+" is not supported (we accept pull requests)");return new r}).sha=r(165),e.sha1=r(166),e.sha224=r(167),e.sha256=r(92),e.sha384=r(168),e.sha512=r(93)},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t,e,r){return r^t&(e^r)}function c(t,e,r){return t&e|r&(t|e)}function h(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function l(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function p(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function d(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}n(a,i),a.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,s=0|this._e,a=0|this._f,y=0|this._g,g=0|this._h,m=0;m<16;++m)e[m]=t.readInt32BE(4*m);for(;m<64;++m)e[m]=d(e[m-2])+e[m-7]+p(e[m-15])+e[m-16]|0;for(var v=0;v<64;++v){var b=g+l(s)+f(s,a,y)+o[v]+e[v]|0,w=h(r)+c(r,n,i)|0;g=y,y=a,a=s,s=u+b|0,u=i,i=n,n=r,r=b+w|0}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=u+this._d|0,this._e=s+this._e|0,this._f=a+this._f|0,this._g=y+this._g|0,this._h=g+this._h|0},a.prototype._hash=function(){var t=u.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=a},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function a(){this.init(),this._w=s,i.call(this,128,112)}function f(t,e,r){return r^t&(e^r)}function c(t,e,r){return t&e|r&(t|e)}function h(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function l(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function m(t,e){return t>>>0<e>>>0?1:0}n(a,i),a.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._ah,n=0|this._bh,i=0|this._ch,u=0|this._dh,s=0|this._eh,a=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,E=0|this._bl,_=0|this._cl,A=0|this._dl,B=0|this._el,C=0|this._fl,F=0|this._gl,D=0|this._hl,x=0;x<32;x+=2)e[x]=t.readInt32BE(4*x),e[x+1]=t.readInt32BE(4*x+4);for(;x<160;x+=2){var S=e[x-30],T=e[x-30+1],k=p(S,T),M=d(T,S),I=y(S=e[x-4],T=e[x-4+1]),O=g(T,S),L=e[x-14],R=e[x-14+1],j=e[x-32],N=e[x-32+1],U=M+R|0,P=k+L+m(U,M)|0;P=(P=P+I+m(U=U+O|0,O)|0)+j+m(U=U+N|0,N)|0,e[x]=P,e[x+1]=U}for(var q=0;q<160;q+=2){P=e[q],U=e[q+1];var z=c(r,n,i),V=c(w,E,_),H=h(r,w),Z=h(w,r),G=l(s,B),Y=l(B,s),$=o[q],K=o[q+1],W=f(s,a,v),X=f(B,C,F),J=D+Y|0,Q=b+G+m(J,D)|0;Q=(Q=(Q=Q+W+m(J=J+X|0,X)|0)+$+m(J=J+K|0,K)|0)+P+m(J=J+U|0,U)|0;var tt=Z+V|0,et=H+z+m(tt,Z)|0;b=v,D=F,v=a,F=C,a=s,C=B,s=u+Q+m(B=A+J|0,A)|0,u=i,A=_,i=n,_=E,n=r,E=w,r=Q+et+m(w=J+tt|0,J)|0}this._al=this._al+w|0,this._bl=this._bl+E|0,this._cl=this._cl+_|0,this._dl=this._dl+A|0,this._el=this._el+B|0,this._fl=this._fl+C|0,this._gl=this._gl+F|0,this._hl=this._hl+D|0,this._ah=this._ah+r+m(this._al,w)|0,this._bh=this._bh+n+m(this._bl,E)|0,this._ch=this._ch+i+m(this._cl,_)|0,this._dh=this._dh+u+m(this._dl,A)|0,this._eh=this._eh+s+m(this._el,B)|0,this._fh=this._fh+a+m(this._fl,C)|0,this._gh=this._gh+v+m(this._gl,F)|0,this._hh=this._hh+b+m(this._hl,D)|0},a.prototype._hash=function(){var t=u.allocUnsafe(64);function e(e,r,n){t.writeInt32BE(e,n),t.writeInt32BE(r,n+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=a},function(t,e,r){"use strict";(function(e){var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=r(175),o=r(12),s=r(55).getCurveByName("secp256k1"),a=r(3),f=r(7),c=r(27),h=r(26),l=r(34);function p(t,r,n){function i(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),a(e.isBuffer(t),"data is a required String or Buffer"),l(t=o.sha256(t),r)}function l(n,i){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof n&&(n=e.from(n,o)),32!==n.length||!e.isBuffer(n))throw new Error("dataSha256: 32 bytes required");var f=h(i);return a(f,"pubkey required"),u.verify(s,n,{r:t,s:r},f.Q)}function p(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),a(e.isBuffer(t),"data is a required String or Buffer"),d(t=o.sha256(t))}function d(i){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";if("string"==typeof i&&(i=e.from(i,o)),32!==i.length||!e.isBuffer(i))throw new Error("dataSha256: 32 byte String or buffer requred");var a=f.fromBuffer(i),c=n;c-=27,c&=3;var l=u.recoverPubKey(s,a,{r:t,s:r,i:n},c);return h.fromPoint(l)}function y(){var i;return(i=new e(65)).writeUInt8(n,0),t.toBuffer(32).copy(i,1),r.toBuffer(32).copy(i,33),i}a.equal(null!=t,!0,"Missing parameter"),a.equal(null!=r,!0,"Missing parameter"),a.equal(null!=n,!0,"Missing parameter");var g=void 0;return{r:t,s:r,i:n,toBuffer:y,verify:i,verifyHash:l,verifyHex:function(t,r){return console.log('Deprecated: use verify(data, pubkey, "hex")'),i(e.from(t,"hex"),r)},recover:p,recoverHash:d,toHex:function(){return y().toString("hex")},toString:function(){return g||(g="SIG_K1_"+c.checkEncode(y(),"K1"))},verifyBuffer:function(){return console.log("Deprecated: use signature.verify instead (same arguments)"),i.apply(void 0,arguments)},recoverPublicKey:function(){return console.log("Deprecated: use signature.recover instead (same arguments)"),p.apply(void 0,arguments)},recoverPublicKeyFromBuffer:function(){return console.log("Deprecated: use signature.recoverHash instead (same arguments)"),d.apply(void 0,arguments)}}}t.exports=p,p.sign=function(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),a(e.isBuffer(t),"data is a required String or Buffer"),t=o.sha256(t),p.signHash(t,r)},p.signHash=function(t,r){var n,i,o,c,h,d,y,g=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof t&&(t=e.from(t,g)),32!==t.length||!e.isBuffer(t))throw new Error("dataSha256: 32 byte buffer requred");for(r=l(r),a(r,"privateKey required"),c=null,y=0,i=f.fromBuffer(t);;){if(d=(n=(o=u.sign(s,t,r.d,y++)).toDER())[5+(h=n[3])],32===h&&32===d){c=u.calcPubKeyRecoveryParam(s,i,o,r.toPublic().Q),c+=4,c+=27;break}y%10==0&&console.log("WARN: "+y+" attempts to find canonical signature")}return p(o.r,o.s,c)},p.fromBuffer=function(t){var r;return a(e.isBuffer(t),"Buffer is required"),a.equal(t.length,65,"Invalid signature length"),r=t.readUInt8(0),a.equal(r-27,r-27&7,"Invalid signature parameter"),p(f.fromBuffer(t.slice(1,33)),f.fromBuffer(t.slice(33)),r)},p.fromHex=function(t){return p.fromBuffer(e.from(t,"hex"))},p.fromString=function(t){try{return p.fromStringOrThrow(t)}catch(t){return null}},p.fromStringOrThrow=function(t){a.equal(void 0===t?"undefined":i(t),"string","signature");var e=t.match(/^SIG_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);a(null!=e&&3===e.length,"Expecting signature like: SIG_K1_base58signature..");var r=n(e,3),u=r[1],o=r[2];return a.equal(u,"K1","K1 signature expected"),p.fromBuffer(c.checkDecode(o,u))},p.from=function(t){var r=t?t.r&&t.s&&t.i?t:"string"==typeof t&&130===t.length?p.fromHex(t):"string"==typeof t&&130!==t.length?p.fromStringOrThrow(t):e.isBuffer(t)?p.fromBuffer(t):null:t;if(!r)throw new TypeError("signature should be a hex string or buffer");return r}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){function r(t){var e=t.toString().match(/function (.*?)\(/);return e?e[1]:null}t.exports=function(t,n){switch(t){case"Array":if(Array.isArray(n))return;break;case"Boolean":if("boolean"==typeof n)return;break;case"Buffer":if(e.isBuffer(n))return;break;case"Number":if("number"==typeof n)return;break;case"String":if("string"==typeof n)return;break;default:if(r(n.constructor)===r(t))return}throw new TypeError("Expected "+(r(t)||t)+", got "+n)}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(185),i=r(188),u=r(97),o=function(t){return i("v1",n,t)};Object.assign(o,{processArgs:u,api:n,Testnet:function(t){return console.error("deprecated, change EosApi.Testnet(..) to just EosApi(..)"),o(t)},Localnet:function(t){return console.error("deprecated, change EosApi.Localnet(..) to just EosApi(..)"),o(t)}}),t.exports=o},function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"method",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,u={},o={},s=e.length,a=void 0;"function"==typeof t[t.length-1]&&(a=t[t.length-1],t=t.slice(0,t.length-1));var f=void 0,c=void 0;a?f=function(t,e){t?a(t):a(null,e)}:c=new Promise(function(t,e){f=function(r,n){r?e(r):t(n)}});"function"==typeof i&&t.length>0&&("object"===n(t[0])&&2===t.length||t.length===s+1)&&null!=(o=i(t[t.length-1]))&&(t=t.slice(0,t.length-1));if(1===t.length&&"object"===n(t[0]))u=t[0];else{if(t.length>s)throw new TypeError(r+" is expecting "+s+" parameters but "+t.length+" where provided");var h=0,l=!0,p=!1,d=void 0;try{for(var y,g=e[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value;u[m]=t[h],h++}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}}return{params:u,options:o,callback:f,returnPromise:c}}},function(t,e,r){var n=r(40),i=r(4)("toStringTag"),u="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:u?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){"use strict";var n=Object.assign({},r(206));t.exports=n},function(t,e,r){"use strict";var n=u(r(59)),i=u(r(20));function u(t){return t&&t.__esModule?t:{default:t}}var o=r(3),s=r(18).Long;t.exports={ULong:a,isName:function(t,e){try{return h(t),!0}catch(t){return e&&e(t),!1}},encodeName:h,decodeName:l,encodeNameHex:function(t){return s.fromString(h(t),!0).toString(16)},decodeNameHex:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return l(s.fromString(t,!0,16).toString(),e)},DecimalString:p,DecimalPad:d,DecimalImply:function(t,e){return d(t,e).replace(".","")},DecimalUnimply:function(t,e){o(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var r=/^-/.test(t);r&&(t=t.substring(1));o(/^\d+$/.test(t),"invalid whole number "+t),o(null!=e,"precision required"),o(e>=0&&e<=18,"Precision should be 18 characters or less");var n=e-t.length;n>0&&(t=""+"0".repeat(n)+t);var i=t.length-e;return t=t.slice(0,i)+"."+t.slice(i),(r?"-":"")+d(t,e)},printAsset:y,parseAsset:function(t){var e=t.split(" "),r=(0,n.default)(e,1)[0].match(/^(-?[0-9]+(\.[0-9]+)?)( |$)/),i=r?r[1]:null,u=t.match(/(^| )([0-9]+),([A-Z]+)(@|$)/),s=u?Number(u[2]):null,a=i?(i.split(".")[1]||"").length:null,f=null!=s?s:a,c=t.match(/(^| |,)([A-Z]+)(@|$)/),h=c?c[2]:null,l=t.split("@"),p=(0,n.default)(l,2)[1],d=void 0===p?"":p,g=/^[a-z0-5]+(\.[a-z0-5]+)*$/.test(d)?d:null,m=y({amount:i,precision:f,symbol:h,contract:g});o.equal(t,m,"Invalid asset string: "+t+" !== "+m),null!=f&&o(f>=0&&f<=18,"Precision should be 18 characters or less");null!=h&&o(h.length<=7,"Asset symbol is 7 characters or less");null!=g&&o(g.length<=12,"Contract is 12 characters or less");return{amount:i,precision:f,symbol:h,contract:g}}};function a(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;if("number"==typeof t){if(t>Number.MAX_SAFE_INTEGER)throw new TypeError("value parameter overflow");t=s.fromString(String(t),e,r)}else if("string"==typeof t)t=s.fromString(t,e,r);else if(!s.isLong(t))throw new TypeError("value parameter is a requied Long, Number or String");return t}var f=".12345abcdefghijklmnopqrstuvwxyz",c=function(t){var e=f.indexOf(t);if(-1===e)throw new TypeError("Invalid character: '"+t+"'");return e};function h(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("string"!=typeof t)throw new TypeError("name parameter is a required string");if(t.length>12)throw new TypeError("A name can be up to 12 characters long");for(var r="",n=0;n<=12;n++){var i=n<t.length?c(t[n]):0,u=n<12?5:4,o=Number(i).toString(2);if(o.length>u)throw new TypeError("Invalid name "+t);r+=o="0".repeat(u-o.length)+o}var a=s.fromString(r,!0,2),f="",h=e?a.toBytesLE():a.toBytesBE(),l=!0,p=!1,d=void 0;try{for(var y,g=h[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value,v=Number(m).toString(16);f+=(1===v.length?"0":"")+v}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}return s.fromString(f,!0,16).toString().toString()}function l(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t=a(t);var r="",n=e?t.toBytesLE():t.toBytesBE(),i=!0,u=!1,o=void 0;try{for(var c,h=n[Symbol.iterator]();!(i=(c=h.next()).done);i=!0){var l=c.value,p=Number(l).toString(16);r+=(1===p.length?"0":"")+p}}catch(t){u=!0,o=t}finally{try{!i&&h.return&&h.return()}finally{if(u)throw o}}r+="0".repeat(16-r.length);for(var d=s.fromNumber(31,!0),y=s.fromNumber(15,!0),g="",m=s.fromString(r,!0,16),v=0;v<=12;v++){g=f[m.and(0===v?y:d)]+g,m=m.shiftRight(0===v?4:5)}return g=g.replace(/\.+$/,"")}function p(t){o(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var e=/^-/.test(t);e&&(t=t.substring(1)),"."===t[0]&&(t="0"+t);var r=t.split(".");return o(r.length<=2,"invalid decimal "+t),o(/^\d+(,?\d)*\d*$/.test(r[0]),"invalid decimal "+t),2===r.length&&(o(/^\d*$/.test(r[1]),"invalid decimal "+t),r[1]=r[1].replace(/0+$/,""),""===r[1]&&r.pop()),r[0]=r[0].replace(/^0*/,""),""===r[0]&&(r[0]="0"),(e?"-":"")+r.join(".")}function d(t,e){var r=p(t);if(null==e)return r;o(e>=0&&e<=18,"Precision should be 18 characters or less");var n=r.split(".");if(0===e&&1===n.length)return n[0];if(1===n.length)return n[0]+"."+"0".repeat(e);var i=e-n[1].length;return o(i>=0,"decimal '"+r+"' exceeds precision "+e),n[0]+"."+n[1]+"0".repeat(i)}function y(t){var e=t.amount,r=t.precision,n=t.symbol,u=t.contract;o.equal(void 0===n?"undefined":(0,i.default)(n),"string","symbol is a required string"),null!=e&&null!=r&&(e=d(e,r));var s=function(t,e){return null==t?"":null==e?"":t+e};return null!=e?s(e," ")+n+s("@",u):s(r,",")+n+s("@",u)}},function(t,e,r){var n;!function(i){"use strict";var u,o=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,s=Math.ceil,a=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",h=1e14,l=14,p=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,g=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function v(t){for(var e,r,n=1,i=t.length,u=t[0]+"";n<i;){for(e=t[n++]+"",r=l-e.length;r--;e="0"+e);u+=e}for(i=u.length;48===u.charCodeAt(--i););return u.slice(0,i+1||1)}function b(t,e){var r,n,i=t.c,u=e.c,o=t.s,s=e.s,a=t.e,f=e.e;if(!o||!s)return null;if(r=i&&!i[0],n=u&&!u[0],r||n)return r?n?0:-s:o;if(o!=s)return o;if(r=o<0,n=a==f,!i||!u)return n?0:!i^r?1:-1;if(!n)return a>f^r?1:-1;for(s=(a=i.length)<(f=u.length)?a:f,o=0;o<s;o++)if(i[o]!=u[o])return i[o]>u[o]^r?1:-1;return a==f?0:a>f^r?1:-1}function w(t,e,r,n){if(t<e||t>r||t!==(t<0?s(t):a(t)))throw Error(f+(n||"Argument")+("number"==typeof t?t<e||t>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function E(t){var e=t.c.length-1;return m(t.e/l)==e&&t.c[e]%2!=0}function _(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function A(t,e,r){var n,i;if(e<0){for(i=r+".";++e;i+=r);t=i+t}else if(++e>(n=t.length)){for(i=r,e-=n;--e;i+=r);t+=i}else e<n&&(t=t.slice(0,e)+"."+t.slice(e));return t}(u=function t(e){var r,n,i,u=R.prototype={constructor:R,toString:null,valueOf:null},B=new R(1),C=20,F=4,D=-7,x=21,S=-1e7,T=1e7,k=!1,M=1,I=0,O={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},L="0123456789abcdefghijklmnopqrstuvwxyz";function R(t,e){var r,u,s,f,h,d,y,g,m=this;if(!(m instanceof R))return new R(t,e);if(null==e){if(t instanceof R)return m.s=t.s,m.e=t.e,void(m.c=(t=t.c)?t.slice():t);if((d="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,h=t;h>=10;h/=10,f++);return m.e=f,void(m.c=[t])}g=String(t)}else{if(g=String(t),!o.test(g))return i(m,g,d);m.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(f=g.indexOf("."))>-1&&(g=g.replace(".","")),(h=g.search(/e/i))>0?(f<0&&(f=h),f+=+g.slice(h+1),g=g.substring(0,h)):f<0&&(f=g.length)}else{if(w(e,2,L.length,"Base"),g=String(t),10==e)return P(m=new R(t instanceof R?t:g),C+m.e+1,F);if(d="number"==typeof t){if(0*t!=0)return i(m,g,d,e);if(m.s=1/t<0?(g=g.slice(1),-1):1,R.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(c+t);d=!1}else m.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(r=L.slice(0,e),f=h=0,y=g.length;h<y;h++)if(r.indexOf(u=g.charAt(h))<0){if("."==u){if(h>f){f=y;continue}}else if(!s&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){s=!0,h=-1,f=0;continue}return i(m,String(t),d,e)}(f=(g=n(g,e,10,m.s)).indexOf("."))>-1?g=g.replace(".",""):f=g.length}for(h=0;48===g.charCodeAt(h);h++);for(y=g.length;48===g.charCodeAt(--y););if(g=g.slice(h,++y)){if(y-=h,d&&R.DEBUG&&y>15&&(t>p||t!==a(t)))throw Error(c+m.s*t);if((f=f-h-1)>T)m.c=m.e=null;else if(f<S)m.c=[m.e=0];else{if(m.e=f,m.c=[],h=(f+1)%l,f<0&&(h+=l),h<y){for(h&&m.c.push(+g.slice(0,h)),y-=l;h<y;)m.c.push(+g.slice(h,h+=l));g=g.slice(h),h=l-g.length}else h-=y;for(;h--;g+="0");m.c.push(+g)}}else m.c=[m.e=0]}function j(t,e,r,n){var i,u,o,s,a;if(null==r?r=F:w(r,0,8),!t.c)return t.toString();if(i=t.c[0],o=t.e,null==e)a=v(t.c),a=1==n||2==n&&o<=D?_(a,o):A(a,o,"0");else if(u=(t=P(new R(t),e,r)).e,s=(a=v(t.c)).length,1==n||2==n&&(e<=u||u<=D)){for(;s<e;a+="0",s++);a=_(a,u)}else if(e-=o,a=A(a,u,"0"),u+1>s){if(--e>0)for(a+=".";e--;a+="0");}else if((e+=u-s)>0)for(u+1==s&&(a+=".");e--;a+="0");return t.s<0&&i?"-"+a:a}function N(t,e){for(var r,n=1,i=new R(t[0]);n<t.length;n++){if(!(r=new R(t[n])).s){i=r;break}e.call(i,r)&&(i=r)}return i}function U(t,e,r){for(var n=1,i=e.length;!e[--i];e.pop());for(i=e[0];i>=10;i/=10,n++);return(r=n+r*l-1)>T?t.c=t.e=null:r<S?t.c=[t.e=0]:(t.e=r,t.c=e),t}function P(t,e,r,n){var i,u,o,f,c,p,y,g=t.c,m=d;if(g){t:{for(i=1,f=g[0];f>=10;f/=10,i++);if((u=e-i)<0)u+=l,o=e,y=(c=g[p=0])/m[i-o-1]%10|0;else if((p=s((u+1)/l))>=g.length){if(!n)break t;for(;g.length<=p;g.push(0));c=y=0,i=1,o=(u%=l)-l+1}else{for(c=f=g[p],i=1;f>=10;f/=10,i++);y=(o=(u%=l)-l+i)<0?0:c/m[i-o-1]%10|0}if(n=n||e<0||null!=g[p+1]||(o<0?c:c%m[i-o-1]),n=r<4?(y||n)&&(0==r||r==(t.s<0?3:2)):y>5||5==y&&(4==r||n||6==r&&(u>0?o>0?c/m[i-o]:0:g[p-1])%10&1||r==(t.s<0?8:7)),e<1||!g[0])return g.length=0,n?(e-=t.e+1,g[0]=m[(l-e%l)%l],t.e=-e||0):g[0]=t.e=0,t;if(0==u?(g.length=p,f=1,p--):(g.length=p+1,f=m[l-u],g[p]=o>0?a(c/m[i-o]%m[o])*f:0),n)for(;;){if(0==p){for(u=1,o=g[0];o>=10;o/=10,u++);for(o=g[0]+=f,f=1;o>=10;o/=10,f++);u!=f&&(t.e++,g[0]==h&&(g[0]=1));break}if(g[p]+=f,g[p]!=h)break;g[p--]=0,f=1}for(u=g.length;0===g[--u];g.pop());}t.e>T?t.c=t.e=null:t.e<S&&(t.c=[t.e=0])}return t}function q(t){var e,r=t.e;return null===r?t.toString():(e=v(t.c),e=r<=D||r>=x?_(e,r):A(e,r,"0"),t.s<0?"-"+e:e)}return R.clone=t,R.ROUND_UP=0,R.ROUND_DOWN=1,R.ROUND_CEIL=2,R.ROUND_FLOOR=3,R.ROUND_HALF_UP=4,R.ROUND_HALF_DOWN=5,R.ROUND_HALF_EVEN=6,R.ROUND_HALF_CEIL=7,R.ROUND_HALF_FLOOR=8,R.EUCLID=9,R.config=R.set=function(t){var e,r;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(w(r=t[e],0,g,e),C=r),t.hasOwnProperty(e="ROUNDING_MODE")&&(w(r=t[e],0,8,e),F=r),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((r=t[e])&&r.pop?(w(r[0],-g,0,e),w(r[1],0,g,e),D=r[0],x=r[1]):(w(r,-g,g,e),D=-(x=r<0?-r:r))),t.hasOwnProperty(e="RANGE"))if((r=t[e])&&r.pop)w(r[0],-g,-1,e),w(r[1],1,g,e),S=r[0],T=r[1];else{if(w(r,-g,g,e),!r)throw Error(f+e+" cannot be zero: "+r);S=-(T=r<0?-r:r)}if(t.hasOwnProperty(e="CRYPTO")){if((r=t[e])!==!!r)throw Error(f+e+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw k=!r,Error(f+"crypto unavailable");k=r}else k=r}if(t.hasOwnProperty(e="MODULO_MODE")&&(w(r=t[e],0,9,e),M=r),t.hasOwnProperty(e="POW_PRECISION")&&(w(r=t[e],0,g,e),I=r),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(r=t[e]))throw Error(f+e+" not an object: "+r);O=r}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(r=t[e])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(f+e+" invalid: "+r);L=r}}return{DECIMAL_PLACES:C,ROUNDING_MODE:F,EXPONENTIAL_AT:[D,x],RANGE:[S,T],CRYPTO:k,MODULO_MODE:M,POW_PRECISION:I,FORMAT:O,ALPHABET:L}},R.isBigNumber=function(t){return t instanceof R||t&&!0===t._isBigNumber||!1},R.maximum=R.max=function(){return N(arguments,u.lt)},R.minimum=R.min=function(){return N(arguments,u.gt)},R.random=function(){var t=9007199254740992*Math.random()&2097151?function(){return a(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var r,n,i,u,o,c=0,h=[],p=new R(B);if(null==e?e=C:w(e,0,g),u=s(e/l),k)if(crypto.getRandomValues){for(r=crypto.getRandomValues(new Uint32Array(u*=2));c<u;)(o=131072*r[c]+(r[c+1]>>>11))>=9e15?(n=crypto.getRandomValues(new Uint32Array(2)),r[c]=n[0],r[c+1]=n[1]):(h.push(o%1e14),c+=2);c=u/2}else{if(!crypto.randomBytes)throw k=!1,Error(f+"crypto unavailable");for(r=crypto.randomBytes(u*=7);c<u;)(o=281474976710656*(31&r[c])+1099511627776*r[c+1]+4294967296*r[c+2]+16777216*r[c+3]+(r[c+4]<<16)+(r[c+5]<<8)+r[c+6])>=9e15?crypto.randomBytes(7).copy(r,c):(h.push(o%1e14),c+=7);c=u/7}if(!k)for(;c<u;)(o=t())<9e15&&(h[c++]=o%1e14);for(u=h[--c],e%=l,u&&e&&(o=d[l-e],h[c]=a(u/o)*o);0===h[c];h.pop(),c--);if(c<0)h=[i=0];else{for(i=-1;0===h[0];h.splice(0,1),i-=l);for(c=1,o=h[0];o>=10;o/=10,c++);c<l&&(i-=l-c)}return p.e=i,p.c=h,p}}(),R.sum=function(){for(var t=1,e=arguments,r=new R(e[0]);t<e.length;)r=r.plus(e[t++]);return r},n=function(){function t(t,e,r,n){for(var i,u,o=[0],s=0,a=t.length;s<a;){for(u=o.length;u--;o[u]*=e);for(o[0]+=n.indexOf(t.charAt(s++)),i=0;i<o.length;i++)o[i]>r-1&&(null==o[i+1]&&(o[i+1]=0),o[i+1]+=o[i]/r|0,o[i]%=r)}return o.reverse()}return function(e,n,i,u,o){var s,a,f,c,h,l,p,d,y=e.indexOf("."),g=C,m=F;for(y>=0&&(c=I,I=0,e=e.replace(".",""),l=(d=new R(n)).pow(e.length-y),I=c,d.c=t(A(v(l.c),l.e,"0"),10,i,"0123456789"),d.e=d.c.length),f=c=(p=t(e,n,i,o?(s=L,"0123456789"):(s="0123456789",L))).length;0==p[--c];p.pop());if(!p[0])return s.charAt(0);if(y<0?--f:(l.c=p,l.e=f,l.s=u,p=(l=r(l,d,g,m,i)).c,h=l.r,f=l.e),y=p[a=f+g+1],c=i/2,h=h||a<0||null!=p[a+1],h=m<4?(null!=y||h)&&(0==m||m==(l.s<0?3:2)):y>c||y==c&&(4==m||h||6==m&&1&p[a-1]||m==(l.s<0?8:7)),a<1||!p[0])e=h?A(s.charAt(1),-g,s.charAt(0)):s.charAt(0);else{if(p.length=a,h)for(--i;++p[--a]>i;)p[a]=0,a||(++f,p=[1].concat(p));for(c=p.length;!p[--c];);for(y=0,e="";y<=c;e+=s.charAt(p[y++]));e=A(e,f,s.charAt(0))}return e}}(),r=function(){function t(t,e,r){var n,i,u,o,s=0,a=t.length,f=e%y,c=e/y|0;for(t=t.slice();a--;)s=((i=f*(u=t[a]%y)+(n=c*u+(o=t[a]/y|0)*f)%y*y+s)/r|0)+(n/y|0)+c*o,t[a]=i%r;return s&&(t=[s].concat(t)),t}function e(t,e,r,n){var i,u;if(r!=n)u=r>n?1:-1;else for(i=u=0;i<r;i++)if(t[i]!=e[i]){u=t[i]>e[i]?1:-1;break}return u}function r(t,e,r,n){for(var i=0;r--;)t[r]-=i,i=t[r]<e[r]?1:0,t[r]=i*n+t[r]-e[r];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(n,i,u,o,s){var f,c,p,d,y,g,v,b,w,E,_,A,B,C,F,D,x,S=n.s==i.s?1:-1,T=n.c,k=i.c;if(!(T&&T[0]&&k&&k[0]))return new R(n.s&&i.s&&(T?!k||T[0]!=k[0]:k)?T&&0==T[0]||!k?0*S:S/0:NaN);for(w=(b=new R(S)).c=[],S=u+(c=n.e-i.e)+1,s||(s=h,c=m(n.e/l)-m(i.e/l),S=S/l|0),p=0;k[p]==(T[p]||0);p++);if(k[p]>(T[p]||0)&&c--,S<0)w.push(1),d=!0;else{for(C=T.length,D=k.length,p=0,S+=2,(y=a(s/(k[0]+1)))>1&&(k=t(k,y,s),T=t(T,y,s),D=k.length,C=T.length),B=D,_=(E=T.slice(0,D)).length;_<D;E[_++]=0);x=k.slice(),x=[0].concat(x),F=k[0],k[1]>=s/2&&F++;do{if(y=0,(f=e(k,E,D,_))<0){if(A=E[0],D!=_&&(A=A*s+(E[1]||0)),(y=a(A/F))>1)for(y>=s&&(y=s-1),v=(g=t(k,y,s)).length,_=E.length;1==e(g,E,v,_);)y--,r(g,D<v?x:k,v,s),v=g.length,f=1;else 0==y&&(f=y=1),v=(g=k.slice()).length;if(v<_&&(g=[0].concat(g)),r(E,g,_,s),_=E.length,-1==f)for(;e(k,E,D,_)<1;)y++,r(E,D<_?x:k,_,s),_=E.length}else 0===f&&(y++,E=[0]);w[p++]=y,E[0]?E[_++]=T[B]||0:(E=[T[B]],_=1)}while((B++<C||null!=E[0])&&S--);d=null!=E[0],w[0]||w.splice(0,1)}if(s==h){for(p=1,S=w[0];S>=10;S/=10,p++);P(b,u+(b.e=p+c*l-1)+1,o,d)}else b.e=c,b.r=+d;return b}}(),i=function(){var t=/^(-?)0([xbo])(?=\w[\w.]*$)/i,e=/^([^.]+)\.$/,r=/^\.([^.]+)$/,n=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(u,o,s,a){var c,h=s?o:o.replace(i,"");if(n.test(h))u.s=isNaN(h)?null:h<0?-1:1,u.c=u.e=null;else{if(!s&&(h=h.replace(t,function(t,e,r){return c="x"==(r=r.toLowerCase())?16:"b"==r?2:8,a&&a!=c?t:e}),a&&(c=a,h=h.replace(e,"$1").replace(r,"0.$1")),o!=h))return new R(h,c);if(R.DEBUG)throw Error(f+"Not a"+(a?" base "+a:"")+" number: "+o);u.c=u.e=u.s=null}}}(),u.absoluteValue=u.abs=function(){var t=new R(this);return t.s<0&&(t.s=1),t},u.comparedTo=function(t,e){return b(this,new R(t,e))},u.decimalPlaces=u.dp=function(t,e){var r,n,i,u=this;if(null!=t)return w(t,0,g),null==e?e=F:w(e,0,8),P(new R(u),t+u.e+1,e);if(!(r=u.c))return null;if(n=((i=r.length-1)-m(this.e/l))*l,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},u.dividedBy=u.div=function(t,e){return r(this,new R(t,e),C,F)},u.dividedToIntegerBy=u.idiv=function(t,e){return r(this,new R(t,e),0,1)},u.exponentiatedBy=u.pow=function(t,e){var r,n,i,u,o,c,h,p,d=this;if((t=new R(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+q(t));if(null!=e&&(e=new R(e)),o=t.e>14,!d.c||!d.c[0]||1==d.c[0]&&!d.e&&1==d.c.length||!t.c||!t.c[0])return p=new R(Math.pow(+q(d),o?2-E(t):+q(t))),e?p.mod(e):p;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new R(NaN);(n=!c&&d.isInteger()&&e.isInteger())&&(d=d.mod(e))}else{if(t.e>9&&(d.e>0||d.e<-1||(0==d.e?d.c[0]>1||o&&d.c[1]>=24e7:d.c[0]<8e13||o&&d.c[0]<=9999975e7)))return u=d.s<0&&E(t)?-0:0,d.e>-1&&(u=1/u),new R(c?1/u:u);I&&(u=s(I/l+2))}for(o?(r=new R(.5),c&&(t.s=1),h=E(t)):h=(i=Math.abs(+q(t)))%2,p=new R(B);;){if(h){if(!(p=p.times(d)).c)break;u?p.c.length>u&&(p.c.length=u):n&&(p=p.mod(e))}if(i){if(0===(i=a(i/2)))break;h=i%2}else if(P(t=t.times(r),t.e+1,1),t.e>14)h=E(t);else{if(0==(i=+q(t)))break;h=i%2}d=d.times(d),u?d.c&&d.c.length>u&&(d.c.length=u):n&&(d=d.mod(e))}return n?p:(c&&(p=B.div(p)),e?p.mod(e):u?P(p,I,F,void 0):p)},u.integerValue=function(t){var e=new R(this);return null==t?t=F:w(t,0,8),P(e,e.e+1,t)},u.isEqualTo=u.eq=function(t,e){return 0===b(this,new R(t,e))},u.isFinite=function(){return!!this.c},u.isGreaterThan=u.gt=function(t,e){return b(this,new R(t,e))>0},u.isGreaterThanOrEqualTo=u.gte=function(t,e){return 1===(e=b(this,new R(t,e)))||0===e},u.isInteger=function(){return!!this.c&&m(this.e/l)>this.c.length-2},u.isLessThan=u.lt=function(t,e){return b(this,new R(t,e))<0},u.isLessThanOrEqualTo=u.lte=function(t,e){return-1===(e=b(this,new R(t,e)))||0===e},u.isNaN=function(){return!this.s},u.isNegative=function(){return this.s<0},u.isPositive=function(){return this.s>0},u.isZero=function(){return!!this.c&&0==this.c[0]},u.minus=function(t,e){var r,n,i,u,o=this,s=o.s;if(e=(t=new R(t,e)).s,!s||!e)return new R(NaN);if(s!=e)return t.s=-e,o.plus(t);var a=o.e/l,f=t.e/l,c=o.c,p=t.c;if(!a||!f){if(!c||!p)return c?(t.s=-e,t):new R(p?o:NaN);if(!c[0]||!p[0])return p[0]?(t.s=-e,t):new R(c[0]?o:3==F?-0:0)}if(a=m(a),f=m(f),c=c.slice(),s=a-f){for((u=s<0)?(s=-s,i=c):(f=a,i=p),i.reverse(),e=s;e--;i.push(0));i.reverse()}else for(n=(u=(s=c.length)<(e=p.length))?s:e,s=e=0;e<n;e++)if(c[e]!=p[e]){u=c[e]<p[e];break}if(u&&(i=c,c=p,p=i,t.s=-t.s),(e=(n=p.length)-(r=c.length))>0)for(;e--;c[r++]=0);for(e=h-1;n>s;){if(c[--n]<p[n]){for(r=n;r&&!c[--r];c[r]=e);--c[r],c[n]+=h}c[n]-=p[n]}for(;0==c[0];c.splice(0,1),--f);return c[0]?U(t,c,f):(t.s=3==F?-1:1,t.c=[t.e=0],t)},u.modulo=u.mod=function(t,e){var n,i,u=this;return t=new R(t,e),!u.c||!t.s||t.c&&!t.c[0]?new R(NaN):!t.c||u.c&&!u.c[0]?new R(u):(9==M?(i=t.s,t.s=1,n=r(u,t,0,3),t.s=i,n.s*=i):n=r(u,t,0,M),(t=u.minus(n.times(t))).c[0]||1!=M||(t.s=u.s),t)},u.multipliedBy=u.times=function(t,e){var r,n,i,u,o,s,a,f,c,p,d,g,v,b,w,E=this,_=E.c,A=(t=new R(t,e)).c;if(!(_&&A&&_[0]&&A[0]))return!E.s||!t.s||_&&!_[0]&&!A||A&&!A[0]&&!_?t.c=t.e=t.s=null:(t.s*=E.s,_&&A?(t.c=[0],t.e=0):t.c=t.e=null),t;for(n=m(E.e/l)+m(t.e/l),t.s*=E.s,(a=_.length)<(p=A.length)&&(v=_,_=A,A=v,i=a,a=p,p=i),i=a+p,v=[];i--;v.push(0));for(b=h,w=y,i=p;--i>=0;){for(r=0,d=A[i]%w,g=A[i]/w|0,u=i+(o=a);u>i;)r=((f=d*(f=_[--o]%w)+(s=g*f+(c=_[o]/w|0)*d)%w*w+v[u]+r)/b|0)+(s/w|0)+g*c,v[u--]=f%b;v[u]=r}return r?++n:v.splice(0,1),U(t,v,n)},u.negated=function(){var t=new R(this);return t.s=-t.s||null,t},u.plus=function(t,e){var r,n=this,i=n.s;if(e=(t=new R(t,e)).s,!i||!e)return new R(NaN);if(i!=e)return t.s=-e,n.minus(t);var u=n.e/l,o=t.e/l,s=n.c,a=t.c;if(!u||!o){if(!s||!a)return new R(i/0);if(!s[0]||!a[0])return a[0]?t:new R(s[0]?n:0*i)}if(u=m(u),o=m(o),s=s.slice(),i=u-o){for(i>0?(o=u,r=a):(i=-i,r=s),r.reverse();i--;r.push(0));r.reverse()}for((i=s.length)-(e=a.length)<0&&(r=a,a=s,s=r,e=i),i=0;e;)i=(s[--e]=s[e]+a[e]+i)/h|0,s[e]=h===s[e]?0:s[e]%h;return i&&(s=[i].concat(s),++o),U(t,s,o)},u.precision=u.sd=function(t,e){var r,n,i,u=this;if(null!=t&&t!==!!t)return w(t,1,g),null==e?e=F:w(e,0,8),P(new R(u),t,e);if(!(r=u.c))return null;if(n=(i=r.length-1)*l+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];i>=10;i/=10,n++);}return t&&u.e+1>n&&(n=u.e+1),n},u.shiftedBy=function(t){return w(t,-p,p),this.times("1e"+t)},u.squareRoot=u.sqrt=function(){var t,e,n,i,u,o=this,s=o.c,a=o.s,f=o.e,c=C+4,h=new R("0.5");if(1!==a||!s||!s[0])return new R(!a||a<0&&(!s||s[0])?NaN:s?o:1/0);if(0==(a=Math.sqrt(+q(o)))||a==1/0?(((e=v(s)).length+f)%2==0&&(e+="0"),a=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),n=new R(e=a==1/0?"1e"+f:(e=a.toExponential()).slice(0,e.indexOf("e")+1)+f)):n=new R(a+""),n.c[0])for((a=(f=n.e)+c)<3&&(a=0);;)if(u=n,n=h.times(u.plus(r(o,u,c,1))),v(u.c).slice(0,a)===(e=v(n.c)).slice(0,a)){if(n.e<f&&--a,"9999"!=(e=e.slice(a-3,a+1))&&(i||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(P(n,n.e+C+2,1),t=!n.times(n).eq(o));break}if(!i&&(P(u,u.e+C+2,0),u.times(u).eq(o))){n=u;break}c+=4,a+=4,i=1}return P(n,n.e+C+1,F,t)},u.toExponential=function(t,e){return null!=t&&(w(t,0,g),t++),j(this,t,e,1)},u.toFixed=function(t,e){return null!=t&&(w(t,0,g),t=t+this.e+1),j(this,t,e)},u.toFormat=function(t,e,r){var n,i=this;if(null==r)null!=t&&e&&"object"==typeof e?(r=e,e=null):t&&"object"==typeof t?(r=t,t=e=null):r=O;else if("object"!=typeof r)throw Error(f+"Argument not an object: "+r);if(n=i.toFixed(t,e),i.c){var u,o=n.split("."),s=+r.groupSize,a=+r.secondaryGroupSize,c=r.groupSeparator||"",h=o[0],l=o[1],p=i.s<0,d=p?h.slice(1):h,y=d.length;if(a&&(u=s,s=a,a=u,y-=u),s>0&&y>0){for(u=y%s||s,h=d.substr(0,u);u<y;u+=s)h+=c+d.substr(u,s);a>0&&(h+=c+d.slice(u)),p&&(h="-"+h)}n=l?h+(r.decimalSeparator||"")+((a=+r.fractionGroupSize)?l.replace(new RegExp("\\d{"+a+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):l):h}return(r.prefix||"")+n+(r.suffix||"")},u.toFraction=function(t){var e,n,i,u,o,s,a,c,h,p,y,g,m=this,b=m.c;if(null!=t&&(!(a=new R(t)).isInteger()&&(a.c||1!==a.s)||a.lt(B)))throw Error(f+"Argument "+(a.isInteger()?"out of range: ":"not an integer: ")+q(a));if(!b)return new R(m);for(e=new R(B),h=n=new R(B),i=c=new R(B),g=v(b),o=e.e=g.length-m.e-1,e.c[0]=d[(s=o%l)<0?l+s:s],t=!t||a.comparedTo(e)>0?o>0?e:h:a,s=T,T=1/0,a=new R(g),c.c[0]=0;p=r(a,e,0,1),1!=(u=n.plus(p.times(i))).comparedTo(t);)n=i,i=u,h=c.plus(p.times(u=h)),c=u,e=a.minus(p.times(u=e)),a=u;return u=r(t.minus(n),i,0,1),c=c.plus(u.times(h)),n=n.plus(u.times(i)),c.s=h.s=m.s,y=r(h,i,o*=2,F).minus(m).abs().comparedTo(r(c,n,o,F).minus(m).abs())<1?[h,i]:[c,n],T=s,y},u.toNumber=function(){return+q(this)},u.toPrecision=function(t,e){return null!=t&&w(t,1,g),j(this,t,e,2)},u.toString=function(t){var e,r=this,i=r.s,u=r.e;return null===u?i?(e="Infinity",i<0&&(e="-"+e)):e="NaN":(e=v(r.c),null==t?e=u<=D||u>=x?_(e,u):A(e,u,"0"):(w(t,2,L.length,"Base"),e=n(A(e,u,"0"),10,t,i,!0)),i<0&&r.c[0]&&(e="-"+e)),e},u.valueOf=u.toJSON=function(){return q(this)},u._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(u[Symbol.toStringTag]="BigNumber",u[Symbol.for("nodejs.util.inspect.custom")]=u.valueOf),null!=e&&R.set(e),R}()).default=u.BigNumber=u,void 0===(n=function(){return u}.call(e,r,e,t))||(t.exports=n)}()},function(t,e,r){const n=r(103),i=r(60),{BigNumber:u}=r(101),o=r(212),s=r(213);window.env=class{static get isPc(){return!/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)}},window.eosjs=i,window.BigNumber=u,window.idb=n,window.eosplayer=new s(o)},function(t,e,r){"use strict";!function(){function e(t){return new Promise(function(e,r){t.onsuccess=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function r(t,r,n){var i,u=new Promise(function(u,o){e(i=t[r].apply(t,n)).then(u,o)});return u.request=i,u}function n(t,e,r){r.forEach(function(r){Object.defineProperty(t.prototype,r,{get:function(){return this[e][r]},set:function(t){this[e][r]=t}})})}function i(t,e,n,i){i.forEach(function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})})}function u(t,e,r,n){n.forEach(function(n){n in r.prototype&&(t.prototype[n]=function(){return this[e][n].apply(this[e],arguments)})})}function o(t,e,n,i){i.forEach(function(i){i in n.prototype&&(t.prototype[i]=function(){return function(t,e,n){var i=r(t,e,n);return i.then(function(t){if(t)return new a(t,i.request)})}(this[e],i,arguments)})})}function s(t){this._index=t}function a(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,r){t.oncomplete=function(){e()},t.onerror=function(){r(t.error)},t.onabort=function(){r(t.error)}})}function h(t,e,r){this._db=t,this.oldVersion=e,this.transaction=new c(r)}function l(t){this._db=t}n(s,"_index",["name","keyPath","multiEntry","unique"]),i(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(a,"_cursor",["direction","key","primaryKey","value"]),i(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(a.prototype[t]=function(){var r=this,n=arguments;return Promise.resolve().then(function(){return r._cursor[t].apply(r._cursor,n),e(r._request).then(function(t){if(t)return new a(t,r._request)})})})}),f.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},n(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),u(f,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},n(c,"_tx",["objectStoreNames","mode"]),u(c,"_tx",IDBTransaction,["abort"]),h.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},n(h,"_db",["name","version","objectStoreNames"]),u(h,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},n(l,"_db",["name","version","objectStoreNames"]),u(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[f,s].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e=function(t){return Array.prototype.slice.call(t)}(arguments),r=e[e.length-1],n=this._store||this._index,i=n[t].apply(n,e.slice(0,-1));i.onsuccess=function(){r(i.result)}})})}),[s,f].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var r=this,n=[];return new Promise(function(i){r.iterateCursor(t,function(t){t?(n.push(t.value),void 0===e||n.length!=e?t.continue():i(n)):i(n)})})})});var p={open:function(t,e,n){var i=r(indexedDB,"open",[t,e]),u=i.request;return u&&(u.onupgradeneeded=function(t){n&&n(new h(u.result,t.oldVersion,u.transaction))}),i.then(function(t){return new l(t)})},delete:function(t){return r(indexedDB,"deleteDatabase",[t])}};t.exports=p,t.exports.default=t.exports}()},function(t,e,r){var n=function(){return this}()||Function("return this")(),i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,u=i&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=r(105),i)n.regeneratorRuntime=u;else try{delete n.regeneratorRuntime}catch(t){n.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,u="function"==typeof Symbol?Symbol:{},o=u.iterator||"@@iterator",s=u.asyncIterator||"@@asyncIterator",a=u.toStringTag||"@@toStringTag",f="object"==typeof t,c=e.regeneratorRuntime;if(c)f&&(t.exports=c);else{(c=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var h="suspendedStart",l="suspendedYield",p="executing",d="completed",y={},g={};g[o]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(k([])));v&&v!==n&&i.call(v,o)&&(g=v);var b=B.prototype=_.prototype=Object.create(g);A.prototype=b.constructor=B,B.constructor=A,B[a]=A.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,B):(t.__proto__=B,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},C(F.prototype),F.prototype[s]=function(){return this},c.AsyncIterator=F,c.async=function(t,e,r,n){var i=new F(w(t,e,r,n));return c.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[a]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},c.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return s.type="throw",s.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var u=this.tryEntries.length-1;u>=0;--u){var o=this.tryEntries[u],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=i.call(o,"catchLoc"),f=i.call(o,"finallyLoc");if(a&&f){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var u=n;break}}u&&("break"===t||"continue"===t)&&u.tryLoc<=e&&e<=u.finallyLoc&&(u=null);var o=u?u.completion:{};return o.type=t,o.arg=e,u?(this.method="next",this.next=u.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),S(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;S(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:k(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),y}}}function w(t,e,r,n){var i=e&&e.prototype instanceof _?e:_,u=Object.create(i.prototype),o=new T(n||[]);return u._invoke=function(t,e,r){var n=h;return function(i,u){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw u;return M()}for(r.method=i,r.arg=u;;){var o=r.delegate;if(o){var s=D(o,r);if(s){if(s===y)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var a=E(t,e,r);if("normal"===a.type){if(n=r.done?d:l,a.arg===y)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(n=d,r.method="throw",r.arg=a.arg)}}}(t,r,o),u}function E(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function _(){}function A(){}function B(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function F(t){var e;this._invoke=function(r,n){function u(){return new Promise(function(e,u){!function e(r,n,u,o){var s=E(t[r],t,n);if("throw"!==s.type){var a=s.arg,f=a.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,u,o)},function(t){e("throw",t,u,o)}):Promise.resolve(f).then(function(t){a.value=t,u(a)},o)}o(s.arg)}(r,n,e,u)})}return e=e?e.then(u,u):u()}}function D(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,D(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=E(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var u=i.arg;return u?u.done?(e[t.resultName]=u.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,y):u:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function k(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,u=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return u.next=u}}return{next:M}}function M(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){t.exports={default:r(107),__esModule:!0}},function(t,e,r){r(35),r(45),t.exports=r(46).f("iterator")},function(t,e,r){var n=r(36),i=r(37);t.exports=function(t){return function(e,r){var u,o,s=String(i(e)),a=n(r),f=s.length;return a<0||a>=f?t?"":void 0:(u=s.charCodeAt(a))<55296||u>56319||a+1===f||(o=s.charCodeAt(a+1))<56320||o>57343?t?s.charAt(a):u:t?s.slice(a,a+2):o-56320+(u-55296<<10)+65536}}},function(t,e,r){var n=r(110);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){"use strict";var n=r(67),i=r(30),u=r(44),o={};r(13)(o,r(4)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),u(t,e+" Iterator")}},function(t,e,r){var n=r(14),i=r(21),u=r(39);t.exports=r(15)?Object.defineProperties:function(t,e){i(t);for(var r,o=u(e),s=o.length,a=0;s>a;)n.f(t,r=o[a++],e[r]);return t}},function(t,e,r){var n=r(40);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e,r){var n=r(16),i=r(115),u=r(116);t.exports=function(t){return function(e,r,o){var s,a=n(e),f=i(a.length),c=u(o,f);if(t&&r!=r){for(;f>c;)if((s=a[c++])!=s)return!0}else for(;f>c;c++)if((t||c in a)&&a[c]===r)return t||c||0;return!t&&-1}}},function(t,e,r){var n=r(36),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){var n=r(36),i=Math.max,u=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):u(t,e)}},function(t,e,r){var n=r(6).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(9),i=r(119),u=r(41)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e,r){var n=r(37);t.exports=function(t){return Object(n(t))}},function(t,e,r){"use strict";var n=r(121),i=r(122),u=r(23),o=r(16);t.exports=r(62)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),u.Arguments=u.Array,n("keys"),n("values"),n("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){t.exports={default:r(124),__esModule:!0}},function(t,e,r){r(125),r(131),r(132),r(133),t.exports=r(8).Symbol},function(t,e,r){"use strict";var n=r(6),i=r(9),u=r(15),o=r(63),s=r(66),a=r(126).KEY,f=r(29),c=r(42),h=r(44),l=r(31),p=r(4),d=r(46),y=r(47),g=r(127),m=r(128),v=r(21),b=r(22),w=r(16),E=r(38),_=r(30),A=r(67),B=r(129),C=r(130),F=r(14),D=r(39),x=C.f,S=F.f,T=B.f,k=n.Symbol,M=n.JSON,I=M&&M.stringify,O=p("_hidden"),L=p("toPrimitive"),R={}.propertyIsEnumerable,j=c("symbol-registry"),N=c("symbols"),U=c("op-symbols"),P=Object.prototype,q="function"==typeof k,z=n.QObject,V=!z||!z.prototype||!z.prototype.findChild,H=u&&f(function(){return 7!=A(S({},"a",{get:function(){return S(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=x(P,e);n&&delete P[e],S(t,e,r),n&&t!==P&&S(P,e,n)}:S,Z=function(t){var e=N[t]=A(k.prototype);return e._k=t,e},G=q&&"symbol"==typeof k.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof k},Y=function(t,e,r){return t===P&&Y(U,e,r),v(t),e=E(e,!0),v(r),i(N,e)?(r.enumerable?(i(t,O)&&t[O][e]&&(t[O][e]=!1),r=A(r,{enumerable:_(0,!1)})):(i(t,O)||S(t,O,_(1,{})),t[O][e]=!0),H(t,e,r)):S(t,e,r)},$=function(t,e){v(t);for(var r,n=g(e=w(e)),i=0,u=n.length;u>i;)Y(t,r=n[i++],e[r]);return t},K=function(t){var e=R.call(this,t=E(t,!0));return!(this===P&&i(N,t)&&!i(U,t))&&(!(e||!i(this,t)||!i(N,t)||i(this,O)&&this[O][t])||e)},W=function(t,e){if(t=w(t),e=E(e,!0),t!==P||!i(N,e)||i(U,e)){var r=x(t,e);return!r||!i(N,e)||i(t,O)&&t[O][e]||(r.enumerable=!0),r}},X=function(t){for(var e,r=T(w(t)),n=[],u=0;r.length>u;)i(N,e=r[u++])||e==O||e==a||n.push(e);return n},J=function(t){for(var e,r=t===P,n=T(r?U:w(t)),u=[],o=0;n.length>o;)!i(N,e=n[o++])||r&&!i(P,e)||u.push(N[e]);return u};q||(s((k=function(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var t=l(arguments.length>0?arguments[0]:void 0),e=function(r){this===P&&e.call(U,r),i(this,O)&&i(this[O],t)&&(this[O][t]=!1),H(this,t,_(1,r))};return u&&V&&H(P,t,{configurable:!0,set:e}),Z(t)}).prototype,"toString",function(){return this._k}),C.f=W,F.f=Y,r(70).f=B.f=X,r(48).f=K,r(69).f=J,u&&!r(28)&&s(P,"propertyIsEnumerable",K,!0),d.f=function(t){return Z(p(t))}),o(o.G+o.W+o.F*!q,{Symbol:k});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var et=D(p.store),rt=0;et.length>rt;)y(et[rt++]);o(o.S+o.F*!q,"Symbol",{for:function(t){return i(j,t+="")?j[t]:j[t]=k(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in j)if(j[e]===t)return e},useSetter:function(){V=!0},useSimple:function(){V=!1}}),o(o.S+o.F*!q,"Object",{create:function(t,e){return void 0===e?A(t):$(A(t),e)},defineProperty:Y,defineProperties:$,getOwnPropertyDescriptor:W,getOwnPropertyNames:X,getOwnPropertySymbols:J}),M&&o(o.S+o.F*(!q||f(function(){var t=k();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!G(t))return m(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!G(e))return e}),n[1]=e,I.apply(M,n)}}),k.prototype[L]||r(13)(k.prototype,L,k.prototype.valueOf),h(k,"Symbol"),h(Math,"Math",!0),h(n.JSON,"JSON",!0)},function(t,e,r){var n=r(31)("meta"),i=r(22),u=r(9),o=r(14).f,s=0,a=Object.isExtensible||function(){return!0},f=!r(29)(function(){return a(Object.preventExtensions({}))}),c=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,n)){if(!a(t))return"F";if(!e)return"E";c(t)}return t[n].i},getWeak:function(t,e){if(!u(t,n)){if(!a(t))return!0;if(!e)return!1;c(t)}return t[n].w},onFreeze:function(t){return f&&h.NEED&&a(t)&&!u(t,n)&&c(t),t}}},function(t,e,r){var n=r(39),i=r(69),u=r(48);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),a=u.f,f=0;s.length>f;)a.call(t,o=s[f++])&&e.push(o);return e}},function(t,e,r){var n=r(40);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(16),i=r(70).f,u={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==u.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){var n=r(48),i=r(30),u=r(16),o=r(38),s=r(9),a=r(64),f=Object.getOwnPropertyDescriptor;e.f=r(15)?f:function(t,e){if(t=u(t),e=o(e,!0),a)try{return f(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e){},function(t,e,r){r(47)("asyncIterator")},function(t,e,r){r(47)("observable")},function(t,e,r){"use strict";r(71);var n=r(34),i=r(26),u=r(94),o=(r(27),r(12)),s={initialize:n.initialize,unsafeRandomKey:function(){return n.unsafeRandomKey().then(function(t){return t.toString()})},randomKey:function(t){return n.randomKey(t).then(function(t){return t.toString()})},seedPrivate:function(t){return n.fromSeed(t).toString()},privateToPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return n(t).toPublic().toString(e)},isValidPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return i.isValid(t,e)},isValidPrivate:function(t){return n.isValid(t)},sign:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===r)throw new TypeError("API changed, use signHash(..) instead");return!1===r&&console.log("Warning: ecc.sign hashData parameter was removed"),u.sign(t,e,r).toString()},signHash:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return u.signHash(t,e,r).toString()},verify:function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"utf8";if(!0===n)throw new TypeError("API changed, use verifyHash(..) instead");return!1===n&&console.log("Warning: ecc.verify hashData parameter was removed"),(t=u.from(t)).verify(e,r,n)},verifyHash:function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"hex";return(t=u.from(t)).verifyHash(e,r,n)},recover:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===r)throw new TypeError("API changed, use recoverHash(signature, data) instead");return!1===r&&console.log("Warning: ecc.recover hashData parameter was removed"),(t=u.from(t)).recover(e,r).toString()},recoverHash:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return(t=u.from(t)).recoverHash(e,r).toString()},sha256:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";return o.sha256(t,e)}};t.exports=s},function(t,e,r){"use strict";e.byteLength=function(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){for(var e,r=f(t),n=r[0],o=r[1],s=new u(function(t,e,r){return 3*(e+r)/4-r}(0,n,o)),a=0,c=o>0?n-4:n,h=0;h<c;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],s[a++]=e>>16&255,s[a++]=e>>8&255,s[a++]=255&e;2===o&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,s[a++]=255&e);1===o&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,s[a++]=e>>8&255,s[a++]=255&e);return s},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,u=[],o=0,s=r-i;o<s;o+=16383)u.push(h(t,o,o+16383>s?s:o+16383));1===i?(e=t[r-1],u.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],u.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return u.join("")};for(var n=[],i=[],u="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)n[s]=o[s],i[o.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t){return n[t>>18&63]+n[t>>12&63]+n[t>>6&63]+n[63&t]}function h(t,e,r){for(var n,i=[],u=e;u<r;u+=3)n=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),i.push(c(n));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var u,o,s=8*i-n-1,a=(1<<s)-1,f=a>>1,c=-7,h=r?i-1:0,l=r?-1:1,p=t[e+h];for(h+=l,u=p&(1<<-c)-1,p>>=-c,c+=s;c>0;u=256*u+t[e+h],h+=l,c-=8);for(o=u&(1<<-c)-1,u>>=-c,c+=n;c>0;o=256*o+t[e+h],h+=l,c-=8);if(0===u)u=1-f;else{if(u===a)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),u-=f}return(p?-1:1)*o*Math.pow(2,u-n)},e.write=function(t,e,r,n,i,u){var o,s,a,f=8*u-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:u-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-o))<1&&(o--,a*=2),(e+=o+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(o++,a/=2),o+h>=c?(s=0,o=c):o+h>=1?(s=(e*a-1)*Math.pow(2,i),o+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;t[r+p]=255&s,p+=d,s/=256,i-=8);for(o=o<<i|s,f+=i;f>0;t[r+p]=255&o,p+=d,o/=256,f-=8);t[r+p-d]|=128*y}},function(t,e,r){var n,i,u;
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */i=[],void 0===(u="function"==typeof(n=function(){"use strict";function t(t,e,r){this.low=0|t,this.high=0|e,this.unsigned=!!r}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var r={},n={};function i(t,e){var i,u,s;return e?(s=0<=(t>>>=0)&&t<256)&&(u=n[t])?u:(i=o(t,(0|t)<0?-1:0,!0),s&&(n[t]=i),i):(s=-128<=(t|=0)&&t<128)&&(u=r[t])?u:(i=o(t,t<0?-1:0,!1),s&&(r[t]=i),i)}function u(t,e){if(isNaN(t)||!isFinite(t))return e?y:d;if(e){if(t<0)return y;if(t>=h)return w}else{if(t<=-l)return E;if(t+1>=l)return b}return t<0?u(-t,e).neg():o(t%c|0,t/c|0,e)}function o(e,r,n){return new t(e,r,n)}t.fromInt=i,t.fromNumber=u,t.fromBits=o;var s=Math.pow;function a(t,e,r){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return d;if("number"==typeof e?(r=e,e=!1):e=!!e,(r=r||10)<2||36<r)throw RangeError("radix");var n;if((n=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return a(t.substring(1),e,r).neg();for(var i=u(s(r,8)),o=d,f=0;f<t.length;f+=8){var c=Math.min(8,t.length-f),h=parseInt(t.substring(f,f+c),r);if(c<8){var l=u(s(r,c));o=o.mul(l).add(u(h))}else o=(o=o.mul(i)).add(u(h))}return o.unsigned=e,o}function f(e){return e instanceof t?e:"number"==typeof e?u(e):"string"==typeof e?a(e):o(e.low,e.high,e.unsigned)}t.fromString=a,t.fromValue=f;var c=4294967296,h=c*c,l=h/2,p=i(1<<24),d=i(0);t.ZERO=d;var y=i(0,!0);t.UZERO=y;var g=i(1);t.ONE=g;var m=i(1,!0);t.UONE=m;var v=i(-1);t.NEG_ONE=v;var b=o(-1,2147483647,!1);t.MAX_VALUE=b;var w=o(-1,-1,!0);t.MAX_UNSIGNED_VALUE=w;var E=o(0,-2147483648,!1);t.MIN_VALUE=E;var _=t.prototype;return _.toInt=function(){return this.unsigned?this.low>>>0:this.low},_.toNumber=function(){return this.unsigned?(this.high>>>0)*c+(this.low>>>0):this.high*c+(this.low>>>0)},_.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var e=u(t),r=this.div(e),n=r.mul(e).sub(this);return r.toString(t)+n.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=u(s(t,6),this.unsigned),o=this,a="";;){var f=o.div(i),c=(o.sub(f.mul(i)).toInt()>>>0).toString(t);if((o=f).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},_.getHighBits=function(){return this.high},_.getHighBitsUnsigned=function(){return this.high>>>0},_.getLowBits=function(){return this.low},_.getLowBitsUnsigned=function(){return this.low>>>0},_.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},_.isZero=function(){return 0===this.high&&0===this.low},_.isNegative=function(){return!this.unsigned&&this.high<0},_.isPositive=function(){return this.unsigned||this.high>=0},_.isOdd=function(){return 1==(1&this.low)},_.isEven=function(){return 0==(1&this.low)},_.equals=function(t){return e(t)||(t=f(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},_.eq=_.equals,_.notEquals=function(t){return!this.eq(t)},_.neq=_.notEquals,_.lessThan=function(t){return this.comp(t)<0},_.lt=_.lessThan,_.lessThanOrEqual=function(t){return this.comp(t)<=0},_.lte=_.lessThanOrEqual,_.greaterThan=function(t){return this.comp(t)>0},_.gt=_.greaterThan,_.greaterThanOrEqual=function(t){return this.comp(t)>=0},_.gte=_.greaterThanOrEqual,_.compare=function(t){if(e(t)||(t=f(t)),this.eq(t))return 0;var r=this.isNegative(),n=t.isNegative();return r&&!n?-1:!r&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},_.comp=_.compare,_.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(g)},_.neg=_.negate,_.add=function(t){e(t)||(t=f(t));var r=this.high>>>16,n=65535&this.high,i=this.low>>>16,u=65535&this.low,s=t.high>>>16,a=65535&t.high,c=t.low>>>16,h=0,l=0,p=0,d=0;return p+=(d+=u+(65535&t.low))>>>16,l+=(p+=i+c)>>>16,h+=(l+=n+a)>>>16,h+=r+s,o((p&=65535)<<16|(d&=65535),(h&=65535)<<16|(l&=65535),this.unsigned)},_.subtract=function(t){return e(t)||(t=f(t)),this.add(t.neg())},_.sub=_.subtract,_.multiply=function(t){if(this.isZero())return d;if(e(t)||(t=f(t)),t.isZero())return d;if(this.eq(E))return t.isOdd()?E:d;if(t.eq(E))return this.isOdd()?E:d;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(p)&&t.lt(p))return u(this.toNumber()*t.toNumber(),this.unsigned);var r=this.high>>>16,n=65535&this.high,i=this.low>>>16,s=65535&this.low,a=t.high>>>16,c=65535&t.high,h=t.low>>>16,l=65535&t.low,y=0,g=0,m=0,v=0;return m+=(v+=s*l)>>>16,g+=(m+=i*l)>>>16,m&=65535,g+=(m+=s*h)>>>16,y+=(g+=n*l)>>>16,g&=65535,y+=(g+=i*h)>>>16,g&=65535,y+=(g+=s*c)>>>16,y+=r*l+n*h+i*c+s*a,o((m&=65535)<<16|(v&=65535),(y&=65535)<<16|(g&=65535),this.unsigned)},_.mul=_.multiply,_.divide=function(t){if(e(t)||(t=f(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?y:d;var r,n,i;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return m;i=y}else{if(this.eq(E))return t.eq(g)||t.eq(v)?E:t.eq(E)?g:(r=this.shr(1).div(t).shl(1)).eq(d)?t.isNegative()?g:v:(n=this.sub(t.mul(r)),i=r.add(n.div(t)));if(t.eq(E))return this.unsigned?y:d;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();i=d}for(n=this;n.gte(t);){r=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var o=Math.ceil(Math.log(r)/Math.LN2),a=o<=48?1:s(2,o-48),c=u(r),h=c.mul(t);h.isNegative()||h.gt(n);)h=(c=u(r-=a,this.unsigned)).mul(t);c.isZero()&&(c=g),i=i.add(c),n=n.sub(h)}return i},_.div=_.divide,_.modulo=function(t){return e(t)||(t=f(t)),this.sub(this.div(t).mul(t))},_.mod=_.modulo,_.not=function(){return o(~this.low,~this.high,this.unsigned)},_.and=function(t){return e(t)||(t=f(t)),o(this.low&t.low,this.high&t.high,this.unsigned)},_.or=function(t){return e(t)||(t=f(t)),o(this.low|t.low,this.high|t.high,this.unsigned)},_.xor=function(t){return e(t)||(t=f(t)),o(this.low^t.low,this.high^t.high,this.unsigned)},_.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):o(0,this.low<<t-32,this.unsigned)},_.shl=_.shiftLeft,_.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):o(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},_.shr=_.shiftRight,_.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var r=this.high;return t<32?o(this.low>>>t|r<<32-t,r>>>t,this.unsigned):o(32===t?r:r>>>t-32,0,this.unsigned)},_.shru=_.shiftRightUnsigned,_.toSigned=function(){return this.unsigned?o(this.low,this.high,!1):this},_.toUnsigned=function(){return this.unsigned?this:o(this.low,this.high,!0)},_.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},_.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},_.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?n.apply(e,i):n)||(t.exports=u)},function(t,e,r){var n=r(139),i=r(158),u=r(77);e.createCipher=e.Cipher=n.createCipher,e.createCipheriv=e.Cipheriv=n.createCipheriv,e.createDecipher=e.Decipher=i.createDecipher,e.createDecipheriv=e.Decipheriv=i.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(u)}},function(t,e,r){var n=r(74),i=r(78),u=r(0).Buffer,o=r(84),s=r(10),a=r(32),f=r(85);function c(t,e,r){s.call(this),this._cache=new l,this._cipher=new a.AES(e),this._prev=u.from(r),this._mode=t,this._autopadding=!0}r(1)(c,s),c.prototype._update=function(t){var e,r;this._cache.add(t);for(var n=[];e=this._cache.get();)r=this._mode.encrypt(this,e),n.push(r);return u.concat(n)};var h=u.alloc(16,16);function l(){this.cache=u.allocUnsafe(0)}function p(t,e,r){var s=n[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=u.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof r&&(r=u.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===s.type?new o(s.module,e,r):"auth"===s.type?new i(s.module,e,r):new c(s.module,e,r)}c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},l.prototype.add=function(t){this.cache=u.concat([this.cache,t])},l.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},l.prototype.flush=function(){for(var t=16-this.cache.length,e=u.allocUnsafe(t),r=-1;++r<t;)e.writeUInt8(t,r);return u.concat([this.cache,e])},e.createCipheriv=p,e.createCipher=function(t,e){var r=n[t.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=f(e,!1,r.key,r.iv);return p(t,i.key,i.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,r){var n=r(24);e.encrypt=function(t,e){var r=n(e,t._prev);return t._prev=t._cipher.encryptBlock(r),t._prev},e.decrypt=function(t,e){var r=t._prev;t._prev=e;var i=t._cipher.decryptBlock(e);return n(i,r)}},function(t,e,r){var n=r(0).Buffer,i=r(24);function u(t,e,r){var u=e.length,o=i(e,t._cache);return t._cache=t._cache.slice(u),t._prev=n.concat([t._prev,r?e:o]),o}e.encrypt=function(t,e,r){for(var i,o=n.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=n.allocUnsafe(0)),!(t._cache.length<=e.length)){o=n.concat([o,u(t,e,r)]);break}i=t._cache.length,o=n.concat([o,u(t,e.slice(0,i),r)]),e=e.slice(i)}return o}},function(t,e,r){var n=r(0).Buffer;function i(t,e,r){var i=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=n.concat([t._prev.slice(1),n.from([r?e:i])]),i}e.encrypt=function(t,e,r){for(var u=e.length,o=n.allocUnsafe(u),s=-1;++s<u;)o[s]=i(t,e[s],r);return o}},function(t,e,r){var n=r(0).Buffer;function i(t,e,r){for(var n,i,o,s=-1,a=0;++s<8;)n=t._cipher.encryptBlock(t._prev),i=e&1<<7-s?128:0,a+=(128&(o=n[0]^i))>>s%8,t._prev=u(t._prev,r?i:o);return a}function u(t,e){var r=t.length,i=-1,u=n.allocUnsafe(t.length);for(t=n.concat([t,n.from([e])]);++i<r;)u[i]=t[i]<<1|t[i+1]>>7;return u}e.encrypt=function(t,e,r){for(var u=e.length,o=n.allocUnsafe(u),s=-1;++s<u;)o[s]=i(t,e[s],r);return o}},function(t,e,r){(function(t){var n=r(24);function i(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,r){for(;e._cache.length<r.length;)e._cache=t.concat([e._cache,i(e)]);var u=e._cache.slice(0,r.length);return e._cache=e._cache.slice(r.length),n(r,u)}}).call(this,r(2).Buffer)},function(t,e){},function(t,e,r){"use strict";var n=r(0).Buffer,i=r(148);function u(t,e,r){t.copy(e,r)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var e=n.allocUnsafe(t>>>0),r=this.head,i=0;r;)u(r.data,e,i),i+=r.data.length,r=r.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,r){(function(t){var n=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function u(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new u(i.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new u(i.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},r(150),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(5))},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,i=1,u={},o=!1,s=t.document,a=Object.getPrototypeOf&&Object.getPrototypeOf(t);a=a&&a.setTimeout?a:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?function(){var e="setImmediate$"+Math.random()+"$",r=function(r){r.source===t&&"string"==typeof r.data&&0===r.data.indexOf(e)&&c(+r.data.slice(e.length))};t.addEventListener?t.addEventListener("message",r,!1):t.attachEvent("onmessage",r),n=function(r){t.postMessage(e+r,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},n=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;n=function(e){var r=s.createElement("script");r.onreadystatechange=function(){c(e),r.onreadystatechange=null,t.removeChild(r),r=null},t.appendChild(r)}}():n=function(t){setTimeout(c,0,t)},a.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var o={callback:t,args:e};return u[i]=o,n(i),i++},a.clearImmediate=f}function f(t){delete u[t]}function c(t){if(o)setTimeout(c,0,t);else{var e=u[t];if(e){o=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(r,n)}}(e)}finally{f(t),o=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(5),r(17))},function(t,e,r){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this,r(5))},function(t,e,r){"use strict";t.exports=u;var n=r(83),i=r(25);function u(t){if(!(this instanceof u))return new u(t);n.call(this,t)}i.inherits=r(1),i.inherits(u,n),u.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){t.exports=r(52)},function(t,e,r){t.exports=r(11)},function(t,e,r){t.exports=r(51).Transform},function(t,e,r){t.exports=r(51).PassThrough},function(t,e,r){var n=r(0).Buffer,i=n.alloc(16,0);function u(t){var e=n.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function o(t){this.h=t,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}o.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},o.prototype._multiply=function(){for(var t,e,r=function(t){return[t.readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)]}(this.h),n=[0,0,0,0],i=-1;++i<128;){for(0!=(this.state[~~(i/8)]&1<<7-i%8)&&(n[0]^=r[0],n[1]^=r[1],n[2]^=r[2],n[3]^=r[3]),e=0!=(1&r[3]),t=3;t>0;t--)r[t]=r[t]>>>1|(1&r[t-1])<<31;r[0]=r[0]>>>1,e&&(r[0]=r[0]^225<<24)}this.state=u(n)},o.prototype.update=function(t){var e;for(this.cache=n.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},o.prototype.final=function(t,e){return this.cache.length&&this.ghash(n.concat([this.cache,i],16)),this.ghash(u([0,t,0,e])),this.state},t.exports=o},function(t,e,r){var n=r(78),i=r(0).Buffer,u=r(74),o=r(84),s=r(10),a=r(32),f=r(85);function c(t,e,r){s.call(this),this._cache=new h,this._last=void 0,this._cipher=new a.AES(e),this._prev=i.from(r),this._mode=t,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function l(t,e,r){var s=u[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=i.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof e&&(e=i.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===s.type?new o(s.module,e,r,!0):"auth"===s.type?new n(s.module,e,r,!0):new c(s.module,e,r)}r(1)(c,s),c.prototype._update=function(t){var e,r;this._cache.add(t);for(var n=[];e=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,e),n.push(r);return i.concat(n)},c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<e;)if(t[r+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},h.prototype.add=function(t){this.cache=i.concat([this.cache,t])},h.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var r=u[t.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=f(e,!1,r.key,r.iv);return l(t,n.key,n.iv)},e.createDecipheriv=l},function(t,e,r){(function(t,n){var i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(s(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,u=n.length,o=String(t).replace(i,function(t){if("%%"===t)return"%";if(r>=u)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}}),a=n[r];r<u;a=n[++r])y(a)||!w(a)?o+=" "+a:o+=" "+s(a);return o},e.deprecate=function(r,i){if(v(t.process))return function(){return e.deprecate(r,i).apply(this,arguments)};if(!0===n.noDeprecation)return r;var u=!1;return function(){if(!u){if(n.throwDeprecation)throw new Error(i);n.traceDeprecation?console.trace(i):console.error(i),u=!0}return r.apply(this,arguments)}};var u,o={};function s(t,r){var n={seen:[],stylize:f};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),d(r)?n.showHidden=r:r&&e._extend(n,r),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=a),c(n,t,n.depth)}function a(t,e){var r=s.styles[e];return r?"["+s.colors[r][0]+"m"+t+"["+s.colors[r][1]+"m":t}function f(t,e){return t}function c(t,r,n){if(t.customInspect&&r&&A(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,t);return m(i)||(i=c(t,i,n)),i}var u=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(m(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}if(g(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,r);if(u)return u;var o=Object.keys(r),s=function(t){var e={};return t.forEach(function(t,r){e[t]=!0}),e}(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(r)),_(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return h(r);if(0===o.length){if(A(r)){var a=r.name?": "+r.name:"";return t.stylize("[Function"+a+"]","special")}if(b(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(E(r))return t.stylize(Date.prototype.toString.call(r),"date");if(_(r))return h(r)}var f,w="",B=!1,C=["{","}"];(p(r)&&(B=!0,C=["[","]"]),A(r))&&(w=" [Function"+(r.name?": "+r.name:"")+"]");return b(r)&&(w=" "+RegExp.prototype.toString.call(r)),E(r)&&(w=" "+Date.prototype.toUTCString.call(r)),_(r)&&(w=" "+h(r)),0!==o.length||B&&0!=r.length?n<0?b(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),f=B?function(t,e,r,n,i){for(var u=[],o=0,s=e.length;o<s;++o)D(e,String(o))?u.push(l(t,e,r,n,String(o),!0)):u.push("");return i.forEach(function(i){i.match(/^\d+$/)||u.push(l(t,e,r,n,i,!0))}),u}(t,r,n,s,o):o.map(function(e){return l(t,r,n,s,e,B)}),t.seen.pop(),function(t,e,r){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1];return r[0]+e+" "+t.join(", ")+" "+r[1]}(f,w,C)):C[0]+w+C[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function l(t,e,r,n,i,u){var o,s,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special")),D(n,i)||(o="["+i+"]"),s||(t.seen.indexOf(a.value)<0?(s=y(r)?c(t,a.value,null):c(t,a.value,r-1)).indexOf("\n")>-1&&(s=u?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n")):s=t.stylize("[Circular]","special")),v(o)){if(u&&i.match(/^\d+$/))return s;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=t.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=t.stylize(o,"string"))}return o+": "+s}function p(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function v(t){return void 0===t}function b(t){return w(t)&&"[object RegExp]"===B(t)}function w(t){return"object"==typeof t&&null!==t}function E(t){return w(t)&&"[object Date]"===B(t)}function _(t){return w(t)&&("[object Error]"===B(t)||t instanceof Error)}function A(t){return"function"==typeof t}function B(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(v(u)&&(u=n.env.NODE_DEBUG||""),t=t.toUpperCase(),!o[t])if(new RegExp("\\b"+t+"\\b","i").test(u)){var r=n.pid;o[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else o[t]=function(){};return o[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=p,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=b,e.isObject=w,e.isDate=E,e.isError=_,e.isFunction=A,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(160);var F=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function D(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),F[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=r(1),e._extend=function(t,e){if(!e||!w(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t}}).call(this,r(5),r(17))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t){t.exports={name:"bigi",version:"1.4.2",description:"Big integers.",keywords:["cryptography","math","bitcoin","arbitrary","precision","arithmetic","big","integer","int","number","biginteger","bigint","bignumber","decimal","float"],devDependencies:{coveralls:"^2.11.2",istanbul:"^0.3.5",jshint:"^2.5.1",mocha:"^2.1.0",mochify:"^2.1.0"},repository:{url:"https://github.com/cryptocoinjs/bigi",type:"git"},main:"./lib/index.js",scripts:{"browser-test":"./node_modules/.bin/mochify --wd -R spec",test:"./node_modules/.bin/_mocha -- test/*.js",jshint:"./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",unit:"./node_modules/.bin/mocha",coverage:"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",coveralls:"npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"},dependencies:{},testling:{files:"test/*.js",harness:"mocha",browsers:["ie/9..latest","firefox/latest","chrome/latest","safari/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]}}},function(t,e,r){(function(t){var e=r(3),n=r(88);n.fromByteArrayUnsigned=function(t){return 128&t[0]?new n([0].concat(t)):new n(t)},n.prototype.toByteArrayUnsigned=function(){var t=this.toByteArray();return 0===t[0]?t.slice(1):t},n.fromDERInteger=function(t){return new n(t)},n.prototype.toDERInteger=n.prototype.toByteArray,n.fromBuffer=function(t){if(128&t[0]){var e=Array.prototype.slice.call(t);return new n([0].concat(e))}return new n(t)},n.fromHex=function(t){return""===t?n.ZERO:(e.equal(t,t.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),e.equal(t.length%2,0,"Incomplete hex"),new n(t,16))},n.prototype.toBuffer=function(e){for(var r=this.toByteArrayUnsigned(),n=[],i=e-r.length;n.length<i;)n.push(0);return new t(n.concat(r))},n.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")}}).call(this,r(2).Buffer)},function(t,e,r){var n=r(7),i=r(164),u=r(89);t.exports=function(t){var e=i[t];if(!e)return null;var r=new n(e.p,16),o=new n(e.a,16),s=new n(e.b,16),a=new n(e.n,16),f=new n(e.h,16),c=new n(e.Gx,16),h=new n(e.Gy,16);return new u(r,o,s,c,h,a,f)}},function(t){t.exports={secp128r1:{p:"fffffffdffffffffffffffffffffffff",a:"fffffffdfffffffffffffffffffffffc",b:"e87579c11079f43dd824993c2cee5ed3",n:"fffffffe0000000075a30d1b9038a115",h:"01",Gx:"161ff7528b899b2d0c28607ca52c5b86",Gy:"cf5ac8395bafeb13c02da292dded7a83"},secp160k1:{p:"fffffffffffffffffffffffffffffffeffffac73",a:"00",b:"07",n:"0100000000000000000001b8fa16dfab9aca16b6b3",h:"01",Gx:"3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",Gy:"938cf935318fdced6bc28286531733c3f03c4fee"},secp160r1:{p:"ffffffffffffffffffffffffffffffff7fffffff",a:"ffffffffffffffffffffffffffffffff7ffffffc",b:"1c97befc54bd7a8b65acf89f81d4d4adc565fa45",n:"0100000000000000000001f4c8f927aed3ca752257",h:"01",Gx:"4a96b5688ef573284664698968c38bb913cbfc82",Gy:"23a628553168947d59dcc912042351377ac5fb32"},secp192k1:{p:"fffffffffffffffffffffffffffffffffffffffeffffee37",a:"00",b:"03",n:"fffffffffffffffffffffffe26f2fc170f69466a74defd8d",h:"01",Gx:"db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",Gy:"9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"},secp192r1:{p:"fffffffffffffffffffffffffffffffeffffffffffffffff",a:"fffffffffffffffffffffffffffffffefffffffffffffffc",b:"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",n:"ffffffffffffffffffffffff99def836146bc9b1b4d22831",h:"01",Gx:"188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",Gy:"07192b95ffc8da78631011ed6b24cdd573f977a11e794811"},secp256k1:{p:"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",a:"00",b:"07",n:"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",h:"01",Gx:"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",Gy:"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"},secp256r1:{p:"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",a:"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",b:"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",n:"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",h:"01",Gx:"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",Gy:"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"}}},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<5|t>>>27}function c(t){return t<<30|t>>>2}function h(t,e,r,n){return 0===t?e&r|~e&n:2===t?e&r|e&n|r&n:e^r^n}n(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=e[a-3]^e[a-8]^e[a-14]^e[a-16];for(var l=0;l<80;++l){var p=~~(l/20),d=f(r)+h(p,n,i,u)+s+e[l]+o[p]|0;s=u,u=i,i=c(n),n=r,r=d}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=u+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=u.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<1|t>>>31}function c(t){return t<<5|t>>>27}function h(t){return t<<30|t>>>2}function l(t,e,r,n){return 0===t?e&r|~e&n:2===t?e&r|e&n|r&n:e^r^n}n(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=f(e[a-3]^e[a-8]^e[a-14]^e[a-16]);for(var p=0;p<80;++p){var d=~~(p/20),y=c(r)+l(d,n,i,u)+s+e[p]+o[d]|0;s=u,u=i,i=h(n),n=r,r=y}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=u+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=u.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,r){var n=r(1),i=r(92),u=r(19),o=r(0).Buffer,s=new Array(64);function a(){this.init(),this._w=s,u.call(this,64,56)}n(a,i),a.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},a.prototype._hash=function(){var t=o.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=a},function(t,e,r){var n=r(1),i=r(93),u=r(19),o=r(0).Buffer,s=new Array(160);function a(){this.init(),this._w=s,u.call(this,128,112)}n(a,i),a.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},a.prototype._hash=function(){var t=o.allocUnsafe(48);function e(e,r,n){t.writeInt32BE(e,n),t.writeInt32BE(r,n+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=a},function(t,e,r){"use strict";var n=r(1),i=r(170),u=r(10),o=r(0).Buffer,s=r(171),a=r(90),f=r(91),c=o.alloc(128);function h(t,e){u.call(this,"digest"),"string"==typeof e&&(e=o.from(e));var r="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>r)?e=("rmd160"===t?new a:f(t)).update(e).digest():e.length<r&&(e=o.concat([e,c],r));for(var n=this._ipad=o.allocUnsafe(r),i=this._opad=o.allocUnsafe(r),s=0;s<r;s++)n[s]=54^e[s],i[s]=92^e[s];this._hash="rmd160"===t?new a:f(t),this._hash.update(n)}n(h,u),h.prototype._update=function(t){this._hash.update(t)},h.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new a:f(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new h("rmd160",e):"md5"===t?new i(s,e):new h(t,e)}},function(t,e,r){"use strict";var n=r(1),i=r(0).Buffer,u=r(10),o=i.alloc(128),s=64;function a(t,e){u.call(this,"digest"),"string"==typeof e&&(e=i.from(e)),this._alg=t,this._key=e,e.length>s?e=t(e):e.length<s&&(e=i.concat([e,o],s));for(var r=this._ipad=i.allocUnsafe(s),n=this._opad=i.allocUnsafe(s),a=0;a<s;a++)r[a]=54^e[a],n[a]=92^e[a];this._hash=[r]}n(a,u),a.prototype._update=function(t){this._hash.push(t)},a.prototype._final=function(){var t=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,t]))},t.exports=a},function(t,e,r){var n=r(54);t.exports=function(t){return(new n).update(t).digest()}},function(t,e,r){var n=r(173);t.exports=n("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},function(t,e,r){var n=r(0).Buffer;t.exports=function(t){for(var e={},r=t.length,i=t.charAt(0),u=0;u<t.length;u++){var o=t.charAt(u);if(void 0!==e[o])throw new TypeError(o+" is ambiguous");e[o]=u}function s(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return n.allocUnsafe(0);for(var u=[0],o=0;o<t.length;o++){var s=e[t[o]];if(void 0===s)return;for(var a=0,f=s;a<u.length;++a)f+=u[a]*r,u[a]=255&f,f>>=8;for(;f>0;)u.push(255&f),f>>=8}for(var c=0;t[c]===i&&c<t.length-1;++c)u.push(0);return n.from(u.reverse())}return{encode:function(e){if(0===e.length)return"";for(var n=[0],u=0;u<e.length;++u){for(var o=0,s=e[u];o<n.length;++o)s+=n[o]<<8,n[o]=s%r,s=s/r|0;for(;s>0;)n.push(s%r),s=s/r|0}for(var a="",f=0;0===e[f]&&f<e.length-1;++f)a+=i;for(var c=n.length-1;c>=0;--c)a+=t[n[c]];return a},decodeUnsafe:s,decode:function(t){var e=s(t);if(e)return e;throw new Error("Non-base"+r+" character")}}}},function(t,e,r){"use strict";t.exports=function(t){return function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];return new Promise(function(e,n){setTimeout(function(){try{e(t.apply(void 0,r))}catch(t){n(t)}})})}}},function(t,e,r){"use strict";(function(e){var n=r(3),i=r(12),u=r(95),o=r(7),s=r(176);function a(t,r,s,a,f){u("Buffer",r),u(o,s),f&&(r=i.sha256(e.concat([r,new e(f)]))),n.equal(r.length,32,"Hash must be 256 bit");var c=s.toBuffer(32),h=new e(32),l=new e(32);l.fill(1),h.fill(0),h=i.HmacSHA256(e.concat([l,new e([0]),c,r]),h),l=i.HmacSHA256(l,h),h=i.HmacSHA256(e.concat([l,new e([1]),c,r]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h);for(var p=o.fromBuffer(l);p.signum()<=0||p.compareTo(t.n)>=0||!a(p);)h=i.HmacSHA256(e.concat([l,new e([0])]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h),p=o.fromBuffer(l);return p}function f(t,e,r,n){var i=t.n,u=t.G,o=r.r,s=r.s;if(o.signum()<=0||o.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var a=s.modInverse(i),f=e.multiply(a).mod(i),c=o.multiply(a).mod(i),h=u.multiplyTwo(f,n,c);return!t.isInfinity(h)&&h.affineX.mod(i).equals(o)}function c(t,e,r,i){n.strictEqual(3&i,i,"Recovery param is more than two bits");var u=t.n,o=t.G,s=r.r,a=r.s;n(s.signum()>0&&s.compareTo(u)<0,"Invalid r value"),n(a.signum()>0&&a.compareTo(u)<0,"Invalid s value");var f=1&i,c=i>>1?s.add(u):s,h=t.pointFromX(f,c),l=h.multiply(u);n(t.isInfinity(l),"nR is not a valid curve point");var p=e.negate().mod(u),d=s.modInverse(u),y=h.multiplyTwo(a,o,p).multiply(d);return t.validate(y),y}t.exports={calcPubKeyRecoveryParam:function(t,e,r,n){for(var i=0;i<4;i++)if(c(t,e,r,i).equals(n))return i;throw new Error("Unable to find valid recovery factor")},deterministicGenerateK:a,recoverPubKey:c,sign:function(t,e,r,n){var i,u,f=o.fromBuffer(e),c=t.n,h=t.G,l=(a(t,e,r,function(e){var n=h.multiply(e);return!t.isInfinity(n)&&0!==(i=n.affineX.mod(c)).signum()&&0!==(u=e.modInverse(c).multiply(f.add(r.multiply(i))).mod(c)).signum()},n),c.shiftRight(1));return u.compareTo(l)>0&&(u=c.subtract(u)),s(i,u)},verify:function(t,e,r,n){return f(t,o.fromBuffer(e),r,n)},verifyRaw:f}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=r(3),i=r(95),u=r(7);function o(t,r){function n(){var n=t.toDERInteger(),i=r.toDERInteger(),u=[];return u.push(2,n.length),(u=u.concat(n)).push(2,i.length),(u=u.concat(i)).unshift(48,u.length),new e(u)}return i(u,t),i(u,r),{r:t,s:r,toCompact:function(n,i){i&&(n+=4),n+=27;var u=new e(65);return u.writeUInt8(n,0),t.toBuffer(32).copy(u,1),r.toBuffer(32).copy(u,33),u},toDER:n,toScriptSignature:function(t){var r=new e(1);return r.writeUInt8(t,0),e.concat([n(),r])}}}o.parseCompact=function(t){n.equal(t.length,65,"Invalid signature length");var e=t.readUInt8(0)-27;return n.equal(e,7&e,"Invalid signature parameter"),{compressed:!!(4&e),i:e&=3,signature:o(u.fromBuffer(t.slice(1,33)),u.fromBuffer(t.slice(33)))}},o.fromDER=function(t){n.equal(t.readUInt8(0),48,"Not a DER sequence"),n.equal(t.readUInt8(1),t.length-2,"Invalid sequence length"),n.equal(t.readUInt8(2),2,"Expected a DER integer");var e=t.readUInt8(3);n(e>0,"R length is zero");var r=4+e;n.equal(t.readUInt8(r),2,"Expected a DER integer (2)");var i=t.readUInt8(r+1);n(i>0,"S length is zero");var s=t.slice(4,r),a=t.slice(r+2);r+=2+i,e>1&&0===s.readUInt8(0)&&n(128&s.readUInt8(1),"R value excessively padded"),i>1&&0===a.readUInt8(0)&&n(128&a.readUInt8(1),"S value excessively padded"),n.equal(r,t.length,"Invalid DER encoding");var f=u.fromDERInteger(s),c=u.fromDERInteger(a);return n(f.signum()>=0,"R value is negative"),n(c.signum()>=0,"S value is negative"),o(f,c)},o.parseScriptSignature=function(t){var e=t.readUInt8(t.length-1),r=-129&e;return n(r>0&&r<4,"Invalid hashType"),{signature:o.fromDER(t.slice(0,-1)),hashType:e}},t.exports=o}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(71),i=r(34),u=r(26),o=r(94),s=r(27);t.exports={Aes:n,PrivateKey:i,PublicKey:u,Signature:o,key_utils:s}},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var u=r(179),o=r(18).Long,s=r(3),a={bytes:function(){return[v]},string:function(){return[b]},vector:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return[h,{type:t,sorted:e}]},optional:function(t){return[l,{type:t}]},time:function(){return[w]},map:function(t){return[f,{annotation:t}]},static_variant:function(t){return[c,{types:t}]},fixed_string16:function(){return[b,{maxLen:16}]},fixed_string32:function(){return[b,{maxLen:32}]},fixed_bytes16:function(){return[v,{len:16}]},fixed_bytes20:function(){return[v,{len:20}]},fixed_bytes28:function(){return[v,{len:28}]},fixed_bytes32:function(){return[v,{len:32}]},fixed_bytes33:function(){return[v,{len:33}]},fixed_bytes64:function(){return[v,{len:64}]},fixed_bytes65:function(){return[v,{len:65}]},uint8:function(){return[d,{bits:8}]},uint16:function(){return[d,{bits:16}]},uint32:function(){return[d,{bits:32}]},uint64:function(){return[d,{bits:64}]},uint128:function(){return[y,{bits:128}]},uint224:function(){return[y,{bits:224}]},uint256:function(){return[y,{bits:256}]},uint512:function(){return[y,{bits:512}]},varuint32:function(){return[d,{bits:32,variable:!0}]},int8:function(){return[d,{signed:!0,bits:8}]},int16:function(){return[d,{signed:!0,bits:16}]},int32:function(){return[d,{signed:!0,bits:32}]},int64:function(){return[d,{signed:!0,bits:64}]},int128:function(){return[y,{signed:!0,bits:128}]},int224:function(){return[y,{signed:!0,bits:224}]},int256:function(){return[y,{signed:!0,bits:256}]},int512:function(){return[y,{signed:!0,bits:512}]},varint32:function(){return[d,{signed:!0,bits:32,variable:!0}]},float32:function(){return[m,{bits:32}]},float64:function(){return[m,{bits:64}]}};t.exports=function(t){t=Object.assign({defaults:!1,debug:!1,customTypes:{}},t);var e=Object.assign({},a,t.customTypes),r=function(r){return function(n,u){return n[u]=function(){for(var o=arguments.length,s=Array(o),f=0;f<o;f++)s[f]=arguments[f];return function(t,e,r,n,u,o){var s=(n?u[t]:a[t]).apply(void 0,function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}(r)),f=i(s,2),c=f[0],h=f[1],l=void 0===h?{}:h,p=Object.assign(l,e);p.typeName=t;var d=c(p,n,o);return d.typeName=t,d}(u,t,s,r,e,n)},n}},n=Object.keys(a).reduce(r(),{}),u=Object.keys(t.customTypes||{}).reduce(r(n),{});return Object.assign({},n,u,{config:t})};var f=function(t){var e=i(t.annotation,2),r=e[0],n=e[1];if(!C(r))throw new TypeError("map<type1, > unknown");if(!C(n))throw new TypeError("map<, type2> unknown");return{fromByteBuffer:function(e){for(var i=e.readVarint32(),u={},o=0;o<i;o++)u[r.fromByteBuffer(e)]=n.fromByteBuffer(e);return t.debug&&console.log("0x"+i.toString(16),"(map.fromByteBuffer length)",u),u},appendByteBuffer:function(e,i){E(i,t);var u=Object.keys(i);e.writeVarint32(u.length),t.debug&&console.log("0x"+u.length.toString(16),"(map.appendByteBuffer length)",u);var o=!0,s=!1,a=void 0;try{for(var f,c=u[Symbol.iterator]();!(o=(f=c.next()).done);o=!0){var h=f.value,l=i[h];r.appendByteBuffer(e,h),n.appendByteBuffer(e,l)}}catch(t){s=!0,a=t}finally{try{!o&&c.return&&c.return()}finally{if(s)throw a}}},fromObject:function(e){E(e,t);var i={};for(var u in e)i[r.fromObject(u)]=n.fromObject(e[u]);return i},toObject:function(e){if(t.defaults&&null==e)return function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}({},r.toObject(null),n.toObject(null));E(e,t);var i={};for(var u in e)i[r.toObject(u)]=n.toObject(e[u]);return i}}},c=function(t){var e=t.types;return{fromByteBuffer:function(r){var n=r.readVarint32(),i=e[n];return t.debug&&console.error("static_variant id "+n+" (0x"+n.toString(16)+")"),s(i,"static_variant invalid type position "+n),[n,i.fromByteBuffer(r)]},appendByteBuffer:function(t,r){s(Array.isArray(r)&&2===r.length,"Required tuple");var n=r[0],i=e[n];s(i,"type "+n),t.writeVarint32(n),i.appendByteBuffer(t,r[1])},fromObject:function(t){s(Array.isArray(t)&&2===t.length,"Required tuple");var r=t[0],n=e[r];return s(n,"type "+r),[r,n.fromObject(t[1])]},toObject:function(r){if(t.defaults&&null==r)return[0,e[0].toObject(null,debug)];s(Array.isArray(r)&&2===r.length,"Required tuple");var n=r[0],i=e[n];return s(i,"type "+n),[n,i.toObject(r[1])]}}},h=function(t){var e=t.type,r=t.sorted;if(!C(e))throw new TypeError("vector type should be a serializer");return{fromByteBuffer:function(r){var n=r.readVarint32();t.debug&&console.log("fromByteBuffer vector length",n,"(0x"+n.toString(16)+")");for(var i=[],u=0;u<n;u++)i.push(e.fromByteBuffer(r));return i},appendByteBuffer:function(n,i){null==i&&(i=[]),E(i,t),n.writeVarint32(i.length),!0===r&&(i=F(e,Object.assign([],i))),t.debug&&console.log("0x"+i.length.toString(16),"(vector.appendByteBuffer length)",i);var u=!0,o=!1,s=void 0;try{for(var a,f=i[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;e.appendByteBuffer(n,c)}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}},fromObject:function(n){null==n&&(n=[]),E(n,t);var i=[],u=!0,o=!1,s=void 0;try{for(var a,f=n[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;i.push(e.fromObject(c))}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}return!0===r&&(i=F(e,Object.assign([],i))),i},toObject:function(n){if(t.defaults&&null==n)return[e.toObject(n)];null==n&&(n=[]),E(n,t),!0===r&&(n=F(e,Object.assign([],n)));var i=[],u=!0,o=!1,s=void 0;try{for(var a,f=n[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;i.push(e.toObject(c))}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}return i}}},l=function(t){var e=t.type;if(!C(e))throw new TypeError("optional parameter should be a serializer");return{fromByteBuffer:function(t){return 1!==t.readUint8()?null:e.fromByteBuffer(t)},appendByteBuffer:function(t,r){null!=r?(t.writeUint8(1),e.appendByteBuffer(t,r)):t.writeUint8(0)},fromObject:function(t){return null==t?null:e.fromObject(t)},toObject:function(r){return null!=r||t.defaults?e.toObject(r):null}}},p=function(t){var e=t.signed,r=void 0!==e&&e,n=t.bits;return t.variable?"Varint"+n+(r?"ZigZag":""):(r?"Int":"Uint")+n},d=function(t){return{fromByteBuffer:function(e){var r=e["read"+p(t)]();return o.isLong(r)?r.toString():r},appendByteBuffer:function(e,r){e["write"+p(t)](r)},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),o.isLong(e)?e.toString():e)}}},y=function(t){var r=t.signed,n=void 0!==r&&r,i=t.bits,o=i/8;return{fromByteBuffer:function(r){var s=r.copy(r.offset,r.offset+o);r.skip(o);var a=new u(s.toHex(),"hex"),f=a.toArrayLike(e,"le",o);a=new u(f.toString("hex"),"hex"),n&&(a=a.fromTwos(i));var c=a.toString();return B(c,t),i>53?c:a.toNumber()},appendByteBuffer:function(r,s){B(s,t);var a=new u(s);n&&(a=a.toTwos(i));var f=a.toArrayLike(e,"le",o);r.append(f.toString("binary"),"binary")},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),e)}}},g=r(182),m=function(t){var r=t.bits,n=32===r?"Float":64===r?"Double":null;s(n,"unsupported float bit size: "+r);var i=r/8;return{fromByteBuffer:function(t){var r=t.copy(t.offset,t.offset+i);t.skip(i);var u=e.from(r.toBinary(),"binary");return g["read"+n+"LE"](u)},appendByteBuffer:function(t,e){var r=[];g["write"+n+"LE"](r,e),t.append(r)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?0:e}}},v=function(t){return{fromByteBuffer:function(r){var n=t.len,i=void 0;if(null==n){var u=r.readVarint32();i=r.copy(r.offset,r.offset+u),r.skip(u)}else i=r.copy(r.offset,r.offset+n),r.skip(n);return e.from(i.toBinary(),"binary")},appendByteBuffer:function(e,r){null==t.len&&e.writeVarint32(r.length),e.append(r.toString("binary"),"binary")},fromObject:function(r){return"string"==typeof r?r=e.from(r,"hex"):r instanceof Array?r=e.from(r):r instanceof Uint8Array&&(r=e.from(r)),E(r,t),r},toObject:function(e){var r=t.defaults,n=t.len;return r&&null==e?Array(n?n+1:1).join("00"):(E(e,t),e.toString("hex"))},compare:function(t,r){return e.compare(t,r)}}},b=function(t){return{fromByteBuffer:function(t){return t.readVString()},appendByteBuffer:function(e,r){E(r,t),e.writeVString(r.toString())},fromObject:function(e){return E(e,t),e},toObject:function(e){return t.defaults&&null==e?"":(E(e,t),e)}}},w=function(t){return{fromByteBuffer:function(t){return t.readUint32()},appendByteBuffer:function(e,r){E(r,t),e.writeUint32(r)},fromObject:function(e){if(E(e,t),"number"==typeof e)return e;if(e.getTime)return Math.floor(e.getTime()/1e3);if("string"!=typeof e)throw new Error("Unknown date type: "+e);return"string"!=typeof e||/Z$/.test(e)||(e+="Z"),Math.floor(new Date(e).getTime()/1e3)},toObject:function(e){if(t.defaults&&null==e)return new Date(0).toISOString().split(".")[0];E(e,t),B(e,D(t,{bits:32}));var r=parseInt(e);return new Date(1e3*r).toISOString().split(".")[0]}}},E=function(t,e){if(x(t))throw new Error("Required "+e.typeName);if(null!=e.len){if(null==t.length)throw new Error('len validation requries a "length" property');var r=e.len;if(t.length!==r)throw new Error(e.typeName+" length "+t.length+" does not equal "+r)}if(null!=e.maxLen){var n=e.maxLen;if(null==t.length)throw new Error('maxLen validation requries a "length" property');if(t.length>n)throw new Error(e.typeName+" length "+t.length+" exceeds maxLen "+n)}},_=new u,A=new u("1");function B(t,e){if(x(t))throw new Error("Required "+e.typeName);var r=e.signed,n=void 0!==r&&r,i=e.bits,o=void 0===i?54:i;if(t=String(t).trim(),n&&!/^-?[0-9]+$/.test(t)||!n&&!/^[0-9]+$/.test(t))throw new Error("Number format "+e.typeName+" "+t);var s=n?T(o):S(o),a=n?k(o):_,f=new u(t);if(f.cmp(a)<0||f.cmp(s)>0)throw new Error("Overflow "+e.typeName+" "+t+", max "+s.toString()+", min "+a.toString()+", signed "+n+", bits "+o)}var C=function(t){return"object"===(void 0===t?"undefined":n(t))&&"function"==typeof t.fromByteBuffer&&"function"==typeof t.appendByteBuffer&&"function"==typeof t.fromObject&&"function"==typeof t.toObject},F=function(t,e){return t.compare?e.sort(t.compare):e.sort()},D=function(){return Object.assign.apply(Object,arguments)},x=function(t){return null==t},S=function(t){return new u(1).ishln(t).isub(A)},T=function(t){return new u(1).ishln(t-1).isub(A)},k=function(t){return new u(1).ishln(t-1).ineg()}}).call(this,r(2).Buffer)},function(t,e,r){(function(t){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function u(t,e,r){if(u.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"==typeof t?t.exports=u:e.BN=u,u.BN=u,u.wordSize=26;try{o=r(181).Buffer}catch(t){}function s(t,e,r){for(var n=0,i=Math.min(t.length,r),u=e;u<i;u++){var o=t.charCodeAt(u)-48;n<<=4,n|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return n}function a(t,e,r,n){for(var i=0,u=Math.min(t.length,r),o=e;o<u;o++){var s=t.charCodeAt(o)-48;i*=n,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}u.isBN=function(t){return t instanceof u||null!==t&&"object"==typeof t&&t.constructor.wordSize===u.wordSize&&Array.isArray(t.words)},u.max=function(t,e){return t.cmp(e)>0?t:e},u.min=function(t,e){return t.cmp(e)<0?t:e},u.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),e,r)},u.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},u.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var u,o,s=0;if("be"===r)for(i=t.length-1,u=0;i>=0;i-=3)o=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[u]|=o<<s&67108863,this.words[u+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,u++);else if("le"===r)for(i=0,u=0;i<t.length;i+=3)o=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[u]|=o<<s&67108863,this.words[u+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,u++);return this.strip()},u.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,u=0;for(r=t.length-6,n=0;r>=e;r-=6)i=s(t,r,r+6),this.words[n]|=i<<u&67108863,this.words[n+1]|=i>>>26-u&4194303,(u+=24)>=26&&(u-=26,n++);r+6!==e&&(i=s(t,e,r+6),this.words[n]|=i<<u&67108863,this.words[n+1]|=i>>>26-u&4194303),this.strip()},u.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var u=t.length-r,o=u%n,s=Math.min(u,u-o)+r,f=0,c=r;c<s;c+=n)f=a(t,c,c+n,e),this.imuln(i),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==o){var h=1;for(f=a(t,c,t.length,e),c=0;c<o;c++)h*=e;this.imuln(h),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}},u.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},u.prototype.clone=function(){var t=new u(null);return this.copy(t),t},u.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},u.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},u.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},u.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function l(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],u=0|e.words[0],o=i*u,s=67108863&o,a=o/67108864|0;r.words[0]=s;for(var f=1;f<n;f++){for(var c=a>>>26,h=67108863&a,l=Math.min(f,e.length-1),p=Math.max(0,f-t.length+1);p<=l;p++){var d=f-p|0;c+=(o=(i=0|t.words[d])*(u=0|e.words[p])+h)/67108864|0,h=67108863&o}r.words[f]=0|h,a=0|c}return 0!==a?r.words[f]=0|a:r.length--,r.strip()}u.prototype.toString=function(t,e){var r;if(t=t||10,e=0|e||1,16===t||"hex"===t){r="";for(var i=0,u=0,o=0;o<this.length;o++){var s=this.words[o],a=(16777215&(s<<i|u)).toString(16);r=0!==(u=s>>>24-i&16777215)||o!==this.length-1?f[6-a.length]+a+r:a+r,(i+=2)>=26&&(i-=26,o--)}for(0!==u&&(r=u.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var l=c[t],p=h[t];r="";var d=this.clone();for(d.negative=0;!d.isZero();){var y=d.modn(p).toString(t);r=(d=d.idivn(p)).isZero()?y+r:f[l-y.length]+y+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},u.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},u.prototype.toJSON=function(){return this.toString(16)},u.prototype.toBuffer=function(t,e){return n(void 0!==o),this.toArrayLike(o,t,e)},u.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},u.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),u=r||Math.max(1,i);n(i<=u,"byte array longer than desired length"),n(u>0,"Requested array length <= 0"),this.strip();var o,s,a="le"===e,f=new t(u),c=this.clone();if(a){for(s=0;!c.isZero();s++)o=c.andln(255),c.iushrn(8),f[s]=o;for(;s<u;s++)f[s]=0}else{for(s=0;s<u-i;s++)f[s]=0;for(s=0;!c.isZero();s++)o=c.andln(255),c.iushrn(8),f[u-s-1]=o}return f},Math.clz32?u.prototype._countBits=function(t){return 32-Math.clz32(t)}:u.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},u.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},u.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},u.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},u.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},u.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},u.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},u.prototype.isNeg=function(){return 0!==this.negative},u.prototype.neg=function(){return this.clone().ineg()},u.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},u.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},u.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},u.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},u.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},u.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},u.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},u.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},u.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},u.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},u.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},u.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},u.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},u.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},u.prototype.notn=function(t){return this.clone().inotn(t)},u.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},u.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,u=0;u<n.length;u++)e=(0|r.words[u])+(0|n.words[u])+i,this.words[u]=67108863&e,i=e>>>26;for(;0!==i&&u<r.length;u++)e=(0|r.words[u])+i,this.words[u]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;u<r.length;u++)this.words[u]=r.words[u];return this},u.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},u.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var u=0,o=0;o<n.length;o++)u=(e=(0|r.words[o])-(0|n.words[o])+u)>>26,this.words[o]=67108863&e;for(;0!==u&&o<r.length;o++)u=(e=(0|r.words[o])+u)>>26,this.words[o]=67108863&e;if(0===u&&o<r.length&&r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this.length=Math.max(this.length,o),r!==this&&(this.negative=1),this.strip()},u.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,u,o=t.words,s=e.words,a=r.words,f=0,c=0|o[0],h=8191&c,l=c>>>13,p=0|o[1],d=8191&p,y=p>>>13,g=0|o[2],m=8191&g,v=g>>>13,b=0|o[3],w=8191&b,E=b>>>13,_=0|o[4],A=8191&_,B=_>>>13,C=0|o[5],F=8191&C,D=C>>>13,x=0|o[6],S=8191&x,T=x>>>13,k=0|o[7],M=8191&k,I=k>>>13,O=0|o[8],L=8191&O,R=O>>>13,j=0|o[9],N=8191&j,U=j>>>13,P=0|s[0],q=8191&P,z=P>>>13,V=0|s[1],H=8191&V,Z=V>>>13,G=0|s[2],Y=8191&G,$=G>>>13,K=0|s[3],W=8191&K,X=K>>>13,J=0|s[4],Q=8191&J,tt=J>>>13,et=0|s[5],rt=8191&et,nt=et>>>13,it=0|s[6],ut=8191&it,ot=it>>>13,st=0|s[7],at=8191&st,ft=st>>>13,ct=0|s[8],ht=8191&ct,lt=ct>>>13,pt=0|s[9],dt=8191&pt,yt=pt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(f+(n=Math.imul(h,q))|0)+((8191&(i=(i=Math.imul(h,z))+Math.imul(l,q)|0))<<13)|0;f=((u=Math.imul(l,z))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(d,q),i=(i=Math.imul(d,z))+Math.imul(y,q)|0,u=Math.imul(y,z);var mt=(f+(n=n+Math.imul(h,H)|0)|0)+((8191&(i=(i=i+Math.imul(h,Z)|0)+Math.imul(l,H)|0))<<13)|0;f=((u=u+Math.imul(l,Z)|0)+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,n=Math.imul(m,q),i=(i=Math.imul(m,z))+Math.imul(v,q)|0,u=Math.imul(v,z),n=n+Math.imul(d,H)|0,i=(i=i+Math.imul(d,Z)|0)+Math.imul(y,H)|0,u=u+Math.imul(y,Z)|0;var vt=(f+(n=n+Math.imul(h,Y)|0)|0)+((8191&(i=(i=i+Math.imul(h,$)|0)+Math.imul(l,Y)|0))<<13)|0;f=((u=u+Math.imul(l,$)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(w,q),i=(i=Math.imul(w,z))+Math.imul(E,q)|0,u=Math.imul(E,z),n=n+Math.imul(m,H)|0,i=(i=i+Math.imul(m,Z)|0)+Math.imul(v,H)|0,u=u+Math.imul(v,Z)|0,n=n+Math.imul(d,Y)|0,i=(i=i+Math.imul(d,$)|0)+Math.imul(y,Y)|0,u=u+Math.imul(y,$)|0;var bt=(f+(n=n+Math.imul(h,W)|0)|0)+((8191&(i=(i=i+Math.imul(h,X)|0)+Math.imul(l,W)|0))<<13)|0;f=((u=u+Math.imul(l,X)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(A,q),i=(i=Math.imul(A,z))+Math.imul(B,q)|0,u=Math.imul(B,z),n=n+Math.imul(w,H)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(E,H)|0,u=u+Math.imul(E,Z)|0,n=n+Math.imul(m,Y)|0,i=(i=i+Math.imul(m,$)|0)+Math.imul(v,Y)|0,u=u+Math.imul(v,$)|0,n=n+Math.imul(d,W)|0,i=(i=i+Math.imul(d,X)|0)+Math.imul(y,W)|0,u=u+Math.imul(y,X)|0;var wt=(f+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,tt)|0)+Math.imul(l,Q)|0))<<13)|0;f=((u=u+Math.imul(l,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(F,q),i=(i=Math.imul(F,z))+Math.imul(D,q)|0,u=Math.imul(D,z),n=n+Math.imul(A,H)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(B,H)|0,u=u+Math.imul(B,Z)|0,n=n+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,$)|0)+Math.imul(E,Y)|0,u=u+Math.imul(E,$)|0,n=n+Math.imul(m,W)|0,i=(i=i+Math.imul(m,X)|0)+Math.imul(v,W)|0,u=u+Math.imul(v,X)|0,n=n+Math.imul(d,Q)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(y,Q)|0,u=u+Math.imul(y,tt)|0;var Et=(f+(n=n+Math.imul(h,rt)|0)|0)+((8191&(i=(i=i+Math.imul(h,nt)|0)+Math.imul(l,rt)|0))<<13)|0;f=((u=u+Math.imul(l,nt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(S,q),i=(i=Math.imul(S,z))+Math.imul(T,q)|0,u=Math.imul(T,z),n=n+Math.imul(F,H)|0,i=(i=i+Math.imul(F,Z)|0)+Math.imul(D,H)|0,u=u+Math.imul(D,Z)|0,n=n+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,$)|0)+Math.imul(B,Y)|0,u=u+Math.imul(B,$)|0,n=n+Math.imul(w,W)|0,i=(i=i+Math.imul(w,X)|0)+Math.imul(E,W)|0,u=u+Math.imul(E,X)|0,n=n+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,tt)|0)+Math.imul(v,Q)|0,u=u+Math.imul(v,tt)|0,n=n+Math.imul(d,rt)|0,i=(i=i+Math.imul(d,nt)|0)+Math.imul(y,rt)|0,u=u+Math.imul(y,nt)|0;var _t=(f+(n=n+Math.imul(h,ut)|0)|0)+((8191&(i=(i=i+Math.imul(h,ot)|0)+Math.imul(l,ut)|0))<<13)|0;f=((u=u+Math.imul(l,ot)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(M,q),i=(i=Math.imul(M,z))+Math.imul(I,q)|0,u=Math.imul(I,z),n=n+Math.imul(S,H)|0,i=(i=i+Math.imul(S,Z)|0)+Math.imul(T,H)|0,u=u+Math.imul(T,Z)|0,n=n+Math.imul(F,Y)|0,i=(i=i+Math.imul(F,$)|0)+Math.imul(D,Y)|0,u=u+Math.imul(D,$)|0,n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,X)|0)+Math.imul(B,W)|0,u=u+Math.imul(B,X)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(E,Q)|0,u=u+Math.imul(E,tt)|0,n=n+Math.imul(m,rt)|0,i=(i=i+Math.imul(m,nt)|0)+Math.imul(v,rt)|0,u=u+Math.imul(v,nt)|0,n=n+Math.imul(d,ut)|0,i=(i=i+Math.imul(d,ot)|0)+Math.imul(y,ut)|0,u=u+Math.imul(y,ot)|0;var At=(f+(n=n+Math.imul(h,at)|0)|0)+((8191&(i=(i=i+Math.imul(h,ft)|0)+Math.imul(l,at)|0))<<13)|0;f=((u=u+Math.imul(l,ft)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(L,q),i=(i=Math.imul(L,z))+Math.imul(R,q)|0,u=Math.imul(R,z),n=n+Math.imul(M,H)|0,i=(i=i+Math.imul(M,Z)|0)+Math.imul(I,H)|0,u=u+Math.imul(I,Z)|0,n=n+Math.imul(S,Y)|0,i=(i=i+Math.imul(S,$)|0)+Math.imul(T,Y)|0,u=u+Math.imul(T,$)|0,n=n+Math.imul(F,W)|0,i=(i=i+Math.imul(F,X)|0)+Math.imul(D,W)|0,u=u+Math.imul(D,X)|0,n=n+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(B,Q)|0,u=u+Math.imul(B,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(E,rt)|0,u=u+Math.imul(E,nt)|0,n=n+Math.imul(m,ut)|0,i=(i=i+Math.imul(m,ot)|0)+Math.imul(v,ut)|0,u=u+Math.imul(v,ot)|0,n=n+Math.imul(d,at)|0,i=(i=i+Math.imul(d,ft)|0)+Math.imul(y,at)|0,u=u+Math.imul(y,ft)|0;var Bt=(f+(n=n+Math.imul(h,ht)|0)|0)+((8191&(i=(i=i+Math.imul(h,lt)|0)+Math.imul(l,ht)|0))<<13)|0;f=((u=u+Math.imul(l,lt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(N,q),i=(i=Math.imul(N,z))+Math.imul(U,q)|0,u=Math.imul(U,z),n=n+Math.imul(L,H)|0,i=(i=i+Math.imul(L,Z)|0)+Math.imul(R,H)|0,u=u+Math.imul(R,Z)|0,n=n+Math.imul(M,Y)|0,i=(i=i+Math.imul(M,$)|0)+Math.imul(I,Y)|0,u=u+Math.imul(I,$)|0,n=n+Math.imul(S,W)|0,i=(i=i+Math.imul(S,X)|0)+Math.imul(T,W)|0,u=u+Math.imul(T,X)|0,n=n+Math.imul(F,Q)|0,i=(i=i+Math.imul(F,tt)|0)+Math.imul(D,Q)|0,u=u+Math.imul(D,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(B,rt)|0,u=u+Math.imul(B,nt)|0,n=n+Math.imul(w,ut)|0,i=(i=i+Math.imul(w,ot)|0)+Math.imul(E,ut)|0,u=u+Math.imul(E,ot)|0,n=n+Math.imul(m,at)|0,i=(i=i+Math.imul(m,ft)|0)+Math.imul(v,at)|0,u=u+Math.imul(v,ft)|0,n=n+Math.imul(d,ht)|0,i=(i=i+Math.imul(d,lt)|0)+Math.imul(y,ht)|0,u=u+Math.imul(y,lt)|0;var Ct=(f+(n=n+Math.imul(h,dt)|0)|0)+((8191&(i=(i=i+Math.imul(h,yt)|0)+Math.imul(l,dt)|0))<<13)|0;f=((u=u+Math.imul(l,yt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(N,H),i=(i=Math.imul(N,Z))+Math.imul(U,H)|0,u=Math.imul(U,Z),n=n+Math.imul(L,Y)|0,i=(i=i+Math.imul(L,$)|0)+Math.imul(R,Y)|0,u=u+Math.imul(R,$)|0,n=n+Math.imul(M,W)|0,i=(i=i+Math.imul(M,X)|0)+Math.imul(I,W)|0,u=u+Math.imul(I,X)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(T,Q)|0,u=u+Math.imul(T,tt)|0,n=n+Math.imul(F,rt)|0,i=(i=i+Math.imul(F,nt)|0)+Math.imul(D,rt)|0,u=u+Math.imul(D,nt)|0,n=n+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,ot)|0)+Math.imul(B,ut)|0,u=u+Math.imul(B,ot)|0,n=n+Math.imul(w,at)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(E,at)|0,u=u+Math.imul(E,ft)|0,n=n+Math.imul(m,ht)|0,i=(i=i+Math.imul(m,lt)|0)+Math.imul(v,ht)|0,u=u+Math.imul(v,lt)|0;var Ft=(f+(n=n+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,yt)|0)+Math.imul(y,dt)|0))<<13)|0;f=((u=u+Math.imul(y,yt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,n=Math.imul(N,Y),i=(i=Math.imul(N,$))+Math.imul(U,Y)|0,u=Math.imul(U,$),n=n+Math.imul(L,W)|0,i=(i=i+Math.imul(L,X)|0)+Math.imul(R,W)|0,u=u+Math.imul(R,X)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(I,Q)|0,u=u+Math.imul(I,tt)|0,n=n+Math.imul(S,rt)|0,i=(i=i+Math.imul(S,nt)|0)+Math.imul(T,rt)|0,u=u+Math.imul(T,nt)|0,n=n+Math.imul(F,ut)|0,i=(i=i+Math.imul(F,ot)|0)+Math.imul(D,ut)|0,u=u+Math.imul(D,ot)|0,n=n+Math.imul(A,at)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(B,at)|0,u=u+Math.imul(B,ft)|0,n=n+Math.imul(w,ht)|0,i=(i=i+Math.imul(w,lt)|0)+Math.imul(E,ht)|0,u=u+Math.imul(E,lt)|0;var Dt=(f+(n=n+Math.imul(m,dt)|0)|0)+((8191&(i=(i=i+Math.imul(m,yt)|0)+Math.imul(v,dt)|0))<<13)|0;f=((u=u+Math.imul(v,yt)|0)+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,n=Math.imul(N,W),i=(i=Math.imul(N,X))+Math.imul(U,W)|0,u=Math.imul(U,X),n=n+Math.imul(L,Q)|0,i=(i=i+Math.imul(L,tt)|0)+Math.imul(R,Q)|0,u=u+Math.imul(R,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(I,rt)|0,u=u+Math.imul(I,nt)|0,n=n+Math.imul(S,ut)|0,i=(i=i+Math.imul(S,ot)|0)+Math.imul(T,ut)|0,u=u+Math.imul(T,ot)|0,n=n+Math.imul(F,at)|0,i=(i=i+Math.imul(F,ft)|0)+Math.imul(D,at)|0,u=u+Math.imul(D,ft)|0,n=n+Math.imul(A,ht)|0,i=(i=i+Math.imul(A,lt)|0)+Math.imul(B,ht)|0,u=u+Math.imul(B,lt)|0;var xt=(f+(n=n+Math.imul(w,dt)|0)|0)+((8191&(i=(i=i+Math.imul(w,yt)|0)+Math.imul(E,dt)|0))<<13)|0;f=((u=u+Math.imul(E,yt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(N,Q),i=(i=Math.imul(N,tt))+Math.imul(U,Q)|0,u=Math.imul(U,tt),n=n+Math.imul(L,rt)|0,i=(i=i+Math.imul(L,nt)|0)+Math.imul(R,rt)|0,u=u+Math.imul(R,nt)|0,n=n+Math.imul(M,ut)|0,i=(i=i+Math.imul(M,ot)|0)+Math.imul(I,ut)|0,u=u+Math.imul(I,ot)|0,n=n+Math.imul(S,at)|0,i=(i=i+Math.imul(S,ft)|0)+Math.imul(T,at)|0,u=u+Math.imul(T,ft)|0,n=n+Math.imul(F,ht)|0,i=(i=i+Math.imul(F,lt)|0)+Math.imul(D,ht)|0,u=u+Math.imul(D,lt)|0;var St=(f+(n=n+Math.imul(A,dt)|0)|0)+((8191&(i=(i=i+Math.imul(A,yt)|0)+Math.imul(B,dt)|0))<<13)|0;f=((u=u+Math.imul(B,yt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(N,rt),i=(i=Math.imul(N,nt))+Math.imul(U,rt)|0,u=Math.imul(U,nt),n=n+Math.imul(L,ut)|0,i=(i=i+Math.imul(L,ot)|0)+Math.imul(R,ut)|0,u=u+Math.imul(R,ot)|0,n=n+Math.imul(M,at)|0,i=(i=i+Math.imul(M,ft)|0)+Math.imul(I,at)|0,u=u+Math.imul(I,ft)|0,n=n+Math.imul(S,ht)|0,i=(i=i+Math.imul(S,lt)|0)+Math.imul(T,ht)|0,u=u+Math.imul(T,lt)|0;var Tt=(f+(n=n+Math.imul(F,dt)|0)|0)+((8191&(i=(i=i+Math.imul(F,yt)|0)+Math.imul(D,dt)|0))<<13)|0;f=((u=u+Math.imul(D,yt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(N,ut),i=(i=Math.imul(N,ot))+Math.imul(U,ut)|0,u=Math.imul(U,ot),n=n+Math.imul(L,at)|0,i=(i=i+Math.imul(L,ft)|0)+Math.imul(R,at)|0,u=u+Math.imul(R,ft)|0,n=n+Math.imul(M,ht)|0,i=(i=i+Math.imul(M,lt)|0)+Math.imul(I,ht)|0,u=u+Math.imul(I,lt)|0;var kt=(f+(n=n+Math.imul(S,dt)|0)|0)+((8191&(i=(i=i+Math.imul(S,yt)|0)+Math.imul(T,dt)|0))<<13)|0;f=((u=u+Math.imul(T,yt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(N,at),i=(i=Math.imul(N,ft))+Math.imul(U,at)|0,u=Math.imul(U,ft),n=n+Math.imul(L,ht)|0,i=(i=i+Math.imul(L,lt)|0)+Math.imul(R,ht)|0,u=u+Math.imul(R,lt)|0;var Mt=(f+(n=n+Math.imul(M,dt)|0)|0)+((8191&(i=(i=i+Math.imul(M,yt)|0)+Math.imul(I,dt)|0))<<13)|0;f=((u=u+Math.imul(I,yt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(N,ht),i=(i=Math.imul(N,lt))+Math.imul(U,ht)|0,u=Math.imul(U,lt);var It=(f+(n=n+Math.imul(L,dt)|0)|0)+((8191&(i=(i=i+Math.imul(L,yt)|0)+Math.imul(R,dt)|0))<<13)|0;f=((u=u+Math.imul(R,yt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var Ot=(f+(n=Math.imul(N,dt))|0)+((8191&(i=(i=Math.imul(N,yt))+Math.imul(U,dt)|0))<<13)|0;return f=((u=Math.imul(U,yt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,a[0]=gt,a[1]=mt,a[2]=vt,a[3]=bt,a[4]=wt,a[5]=Et,a[6]=_t,a[7]=At,a[8]=Bt,a[9]=Ct,a[10]=Ft,a[11]=Dt,a[12]=xt,a[13]=St,a[14]=Tt,a[15]=kt,a[16]=Mt,a[17]=It,a[18]=Ot,0!==f&&(a[19]=f,r.length++),r};function d(t,e,r){return(new y).mulp(t,e,r)}function y(t,e){this.x=t,this.y=e}Math.imul||(p=l),u.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):r<63?l(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,u=0;u<r.length-1;u++){var o=i;i=0;for(var s=67108863&n,a=Math.min(u,e.length-1),f=Math.max(0,u-t.length+1);f<=a;f++){var c=u-f,h=(0|t.words[c])*(0|e.words[f]),l=67108863&h;s=67108863&(l=l+s|0),i+=(o=(o=o+(h/67108864|0)|0)+(l>>>26)|0)>>>26,o&=67108863}r.words[u]=s,n=o,o=i}return 0!==n?r.words[u]=n:r.length--,r.strip()}(this,t,e):d(this,t,e)},y.prototype.makeRBT=function(t){for(var e=new Array(t),r=u.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},y.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},y.prototype.permute=function(t,e,r,n,i,u){for(var o=0;o<u;o++)n[o]=e[t[o]],i[o]=r[t[o]]},y.prototype.transform=function(t,e,r,n,i,u){this.permute(u,t,e,r,n,i);for(var o=1;o<i;o<<=1)for(var s=o<<1,a=Math.cos(2*Math.PI/s),f=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var h=a,l=f,p=0;p<o;p++){var d=r[c+p],y=n[c+p],g=r[c+p+o],m=n[c+p+o],v=h*g-l*m;m=h*m+l*g,g=v,r[c+p]=d+g,n[c+p]=y+m,r[c+p+o]=d-g,n[c+p+o]=y-m,p!==s&&(v=a*h-f*l,l=a*l+f*h,h=v)}},y.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},y.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},y.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},y.prototype.convert13b=function(t,e,r,i){for(var u=0,o=0;o<e;o++)u+=0|t[o],r[2*o]=8191&u,u>>>=13,r[2*o+1]=8191&u,u>>>=13;for(o=2*e;o<i;++o)r[o]=0;n(0===u),n(0==(-8192&u))},y.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},y.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),u=this.stub(n),o=new Array(n),s=new Array(n),a=new Array(n),f=new Array(n),c=new Array(n),h=new Array(n),l=r.words;l.length=n,this.convert13b(t.words,t.length,o,n),this.convert13b(e.words,e.length,f,n),this.transform(o,u,s,a,n,i),this.transform(f,u,c,h,n,i);for(var p=0;p<n;p++){var d=s[p]*c[p]-a[p]*h[p];a[p]=s[p]*h[p]+a[p]*c[p],s[p]=d}return this.conjugate(s,a,n),this.transform(s,a,l,u,n,i),this.conjugate(l,u,n),this.normalize13b(l,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},u.prototype.mul=function(t){var e=new u(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},u.prototype.mulf=function(t){var e=new u(null);return e.words=new Array(this.length+t.length),d(this,t,e)},u.prototype.imul=function(t){return this.clone().mulTo(t,this)},u.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,u=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=u>>>26,this.words[r]=67108863&u}return 0!==e&&(this.words[r]=e,this.length++),this},u.prototype.muln=function(t){return this.clone().imuln(t)},u.prototype.sqr=function(){return this.mul(this)},u.prototype.isqr=function(){return this.imul(this.clone())},u.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new u(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},u.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,u=67108863>>>26-r<<26-r;if(0!==r){var o=0;for(e=0;e<this.length;e++){var s=this.words[e]&u,a=(0|this.words[e])-s<<r;this.words[e]=a|o,o=s>>>26-r}o&&(this.words[e]=o,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},u.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},u.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var u=t%26,o=Math.min((t-u)/26,this.length),s=67108863^67108863>>>u<<u,a=r;if(i-=o,i=Math.max(0,i),a){for(var f=0;f<o;f++)a.words[f]=this.words[f];a.length=o}if(0===o);else if(this.length>o)for(this.length-=o,f=0;f<this.length;f++)this.words[f]=this.words[f+o];else this.words[0]=0,this.length=1;var c=0;for(f=this.length-1;f>=0&&(0!==c||f>=i);f--){var h=0|this.words[f];this.words[f]=c<<26-u|h>>>u,c=h&s}return a&&0!==c&&(a.words[a.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},u.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},u.prototype.shln=function(t){return this.clone().ishln(t)},u.prototype.ushln=function(t){return this.clone().iushln(t)},u.prototype.shrn=function(t){return this.clone().ishrn(t)},u.prototype.ushrn=function(t){return this.clone().iushrn(t)},u.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r)&&!!(this.words[r]&i)},u.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},u.prototype.maskn=function(t){return this.clone().imaskn(t)},u.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},u.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},u.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},u.prototype.addn=function(t){return this.clone().iaddn(t)},u.prototype.subn=function(t){return this.clone().isubn(t)},u.prototype.iabs=function(){return this.negative=0,this},u.prototype.abs=function(){return this.clone().iabs()},u.prototype._ishlnsubmul=function(t,e,r){var i,u,o=t.length+r;this._expand(o);var s=0;for(i=0;i<t.length;i++){u=(0|this.words[i+r])+s;var a=(0|t.words[i])*e;s=((u-=67108863&a)>>26)-(a/67108864|0),this.words[i+r]=67108863&u}for(;i<this.length-r;i++)s=(u=(0|this.words[i+r])+s)>>26,this.words[i+r]=67108863&u;if(0===s)return this.strip();for(n(-1===s),s=0,i=0;i<this.length;i++)s=(u=-(0|this.words[i])+s)>>26,this.words[i]=67108863&u;return this.negative=1,this.strip()},u.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,o=0|i.words[i.length-1];0!==(r=26-this._countBits(o))&&(i=i.ushln(r),n.iushln(r),o=0|i.words[i.length-1]);var s,a=n.length-i.length;if("mod"!==e){(s=new u(null)).length=a+1,s.words=new Array(s.length);for(var f=0;f<s.length;f++)s.words[f]=0}var c=n.clone()._ishlnsubmul(i,1,a);0===c.negative&&(n=c,s&&(s.words[a]=1));for(var h=a-1;h>=0;h--){var l=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(l=Math.min(l/o|0,67108863),n._ishlnsubmul(i,l,h);0!==n.negative;)l--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1);s&&(s.words[h]=l)}return s&&s.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:s||null,mod:n}},u.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new u(0),mod:new u(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(o=s.mod.neg(),r&&0!==o.negative&&o.iadd(t)),{div:i,mod:o}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(o=s.mod.neg(),r&&0!==o.negative&&o.isub(t)),{div:s.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new u(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new u(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new u(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,o,s},u.prototype.div=function(t){return this.divmod(t,"div",!1).div},u.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},u.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},u.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),u=r.cmp(n);return u<0||1===i&&0===u?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},u.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},u.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},u.prototype.divn=function(t){return this.clone().idivn(t)},u.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new u(1),o=new u(0),s=new u(0),a=new u(1),f=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++f;for(var c=r.clone(),h=e.clone();!e.isZero();){for(var l=0,p=1;0==(e.words[0]&p)&&l<26;++l,p<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(c),o.isub(h)),i.iushrn(1),o.iushrn(1);for(var d=0,y=1;0==(r.words[0]&y)&&d<26;++d,y<<=1);if(d>0)for(r.iushrn(d);d-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(h)),s.iushrn(1),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(s),o.isub(a)):(r.isub(e),s.isub(i),a.isub(o))}return{a:s,b:a,gcd:r.iushln(f)}},u.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,o=new u(1),s=new u(0),a=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var f=0,c=1;0==(e.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(e.iushrn(f);f-- >0;)o.isOdd()&&o.iadd(a),o.iushrn(1);for(var h=0,l=1;0==(r.words[0]&l)&&h<26;++h,l<<=1);if(h>0)for(r.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(r)>=0?(e.isub(r),o.isub(s)):(r.isub(e),s.isub(o))}return(i=0===e.cmpn(1)?o:s).cmpn(0)<0&&i.iadd(t),i},u.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var u=e;e=r,r=u}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},u.prototype.invm=function(t){return this.egcd(t).a.umod(t)},u.prototype.isEven=function(){return 0==(1&this.words[0])},u.prototype.isOdd=function(){return 1==(1&this.words[0])},u.prototype.andln=function(t){return this.words[0]&t},u.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var u=i,o=r;0!==u&&o<this.length;o++){var s=0|this.words[o];u=(s+=u)>>>26,s&=67108863,this.words[o]=s}return 0!==u&&(this.words[o]=u,this.length++),this},u.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},u.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},u.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},u.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},u.prototype.gtn=function(t){return 1===this.cmpn(t)},u.prototype.gt=function(t){return 1===this.cmp(t)},u.prototype.gten=function(t){return this.cmpn(t)>=0},u.prototype.gte=function(t){return this.cmp(t)>=0},u.prototype.ltn=function(t){return-1===this.cmpn(t)},u.prototype.lt=function(t){return-1===this.cmp(t)},u.prototype.lten=function(t){return this.cmpn(t)<=0},u.prototype.lte=function(t){return this.cmp(t)<=0},u.prototype.eqn=function(t){return 0===this.cmpn(t)},u.prototype.eq=function(t){return 0===this.cmp(t)},u.red=function(t){return new _(t)},u.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},u.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},u.prototype._forceRed=function(t){return this.red=t,this},u.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},u.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},u.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},u.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},u.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},u.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},u.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},u.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},u.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},u.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},u.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},u.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},u.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},u.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function m(t,e){this.name=t,this.p=new u(e,16),this.n=this.p.bitLength(),this.k=new u(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function E(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=u._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function A(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new u(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var t=new u(null);return t.words=new Array(Math.ceil(this.n/13)),t},m.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},m.prototype.split=function(t,e){t.iushrn(this.n,0,e)},m.prototype.imulK=function(t){return t.imul(this.k)},i(v,m),v.prototype.split=function(t,e){for(var r=Math.min(t.length,9),n=0;n<r;n++)e.words[n]=t.words[n];if(e.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(e.words[e.length++]=4194303&i,n=10;n<t.length;n++){var u=0|t.words[n];t.words[n-10]=(4194303&u)<<4|i>>>22,i=u}i>>>=22,t.words[n-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,m),i(w,m),i(E,m),E.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},u._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new E}return g[t]=e,e},_.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},_.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new u(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);n(!i.isZero());var s=new u(1).toRed(this),a=s.redNeg(),f=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new u(2*c*c).toRed(this);0!==this.pow(c,f).cmp(a);)c.redIAdd(a);for(var h=this.pow(c,i),l=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),d=o;0!==p.cmp(s);){for(var y=p,g=0;0!==y.cmp(s);g++)y=y.redSqr();n(g<d);var m=this.pow(h,new u(1).iushln(d-g-1));l=l.redMul(m),h=m.redSqr(),p=p.redMul(h),d=g}return l},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new u(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new u(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],o=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),n=e.length-1;n>=0;n--){for(var f=e.words[n],c=a-1;c>=0;c--){var h=f>>c&1;i!==r[0]&&(i=this.sqr(i)),0!==h||0!==o?(o<<=1,o|=h,(4===++s||0===n&&0===c)&&(i=this.mul(i,r[o]),s=0,o=0)):s=0}a=26}return i},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},u.mont=function(t){return new A(t)},i(A,_),A.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},A.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},A.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),u=i;return i.cmp(this.m)>=0?u=i.isub(this.m):i.cmpn(0)<0&&(u=i.iadd(this.m)),u._forceRed(this)},A.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new u(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},A.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,r(180)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){},function(t,e,r){"use strict";(function(e){var r,n,i,u,o,s,a,f,c=!1;function h(t,e,r){var n=t[e++],i=t[e++],u=t[e++],o=t[e];return"bige"===r?256*(256*(256*n+i)+u)+o:256*(256*(256*o+u)+i)+n}function l(t,e,r,n){var i=e>>>24&255,u=e>>16&255,o=e>>8&255,s=255&e;"bige"===n?(t[r++]=i,t[r++]=u,t[r++]=o,t[r]=s):(t[r++]=s,t[r++]=o,t[r++]=u,t[r]=i)}function p(t,e,r,n,i){"bige"===i?(l(t,e,n,i),l(t,r,n+4,i)):(l(t,r,n,i),l(t,e,n+4,i))}"function"==typeof Float32Array&&function(){var t=new Float32Array(1),e=new Uint8Array(t.buffer);t[0]=-1,c=0===e[3],r=function(r,n){return(n=n||0)<0||n+4>r.length?0:(e[0]=r[n++],e[1]=r[n++],e[2]=r[n++],e[3]=r[n],t[0])},i=function(r,n){return(n=n||0)<0||n+4>r.length?0:(e[3]=r[n++],e[2]=r[n++],e[1]=r[n++],e[0]=r[n],t[0])},n=function(r,n,i){i=i||0,t[0]=n,r[i++]=e[0],r[i++]=e[1],r[i++]=e[2],r[i]=e[3]},u=function(r,n,i){i=i||0,t[0]=n,r[i++]=e[3],r[i++]=e[2],r[i++]=e[1],r[i]=e[0]}}(),"function"==typeof Float64Array&&function(){var t=new Float64Array(1),e=new Uint8Array(t.buffer);o=function(r,n){return(n=n||0)<0||n+8>r.length?0:(e[0]=r[n+0],e[1]=r[n+1],e[2]=r[n+2],e[3]=r[n+3],e[4]=r[n+4],e[5]=r[n+5],e[6]=r[n+6],e[7]=r[n+7],t[0])},a=function(r,n){return(n=n||0)<0||n+8>r.length?0:(e[7]=r[n+0],e[6]=r[n+1],e[5]=r[n+2],e[4]=r[n+3],e[3]=r[n+4],e[2]=r[n+5],e[1]=r[n+6],e[0]=r[n+7],t[0])},s=function(r,n,i){i=i||0,t[0]=n,r[i+0]=e[0],r[i+1]=e[1],r[i+2]=e[2],r[i+3]=e[3],r[i+4]=e[4],r[i+5]=e[5],r[i+6]=e[6],r[i+7]=e[7]},f=function(r,n,i){i=i||0,t[0]=n,r[i+0]=e[7],r[i+1]=e[6],r[i+2]=e[5],r[i+3]=e[4],r[i+4]=e[3],r[i+5]=e[2],r[i+6]=e[1],r[i+7]=e[0]}}();for(var d=new Array,y=0;y<1200;y++)d[y]=Math.pow(2,y);var g=new Array;for(y=0;y<1200;y++)g[y]=Math.pow(2,-y);function m(t){return t>=0?d[t]:g[-t]}var v=4294967296,b=2.220446049250313e-16;m(-1023);function w(t,e,r){var n,i,u=h(t,e,r),o=h(t,e+4,r);"bige"===r?(n=u,i=o):(n=o,i=u);var s=(1048575&n)*v+i,a=(2146435072&n)>>>20;return(n>>31||1)*(0===a?s?s*m(-1074):0:a<2047?s>=0?(1+s*b)*m(a-1023):0:s?NaN:1/0)}var E=Math.pow(2,-23),_=Math.pow(2,-127);function A(t,e,r){var n=h(t,e,r),i=8388607&n,u=(2139095040&n)>>>23;return(n>>31||1)*(0===u?i?i*E*2*_:0:u<255?(1+i*E)*m(u-127):i?NaN:1/0)}var B={exp:0,mant:0};function C(t){var e=0;return t>=2?(t*=m(-(e=D(1,t))))>=2&&(t/=2,e+=1):t<1&&((e=D(t,2))<=1023?t*=m(e):(t*=m(e-100),t*=m(100)),e=-e),B.exp=e,B.mant=t,B}var F=Math.pow(2,192);function D(t,e){for(var r=0;t*F<e;)t*=F,r+=192;for(;0x10000000000000000*t<e;)t*=0x10000000000000000,r+=64;for(;65536*t<e;)t*=65536,r+=16;for(;64*t<e;)t*=64,r+=6;for(;2*t<e;)t*=2,r+=1;return r}function x(t,e){return(t*=e)-Math.floor(t)!=.5||1&t?t+.5:t}function S(t,e,r,n){var i,u=0;e<0&&(u=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=127,i.exp<=0?i.exp<=-25?(i.mant=0,i.exp=0):(i.mant=x(i.mant,m(22+i.exp)),i.exp=0,i.mant>=8388608&&(i.mant-=8388608,i.exp+=1)):(i.mant=x(i.mant-1,8388608),i.mant>=8388608&&(i.mant-=8388608,i.exp+=1),i.exp>254&&(i.mant=0,i.exp=255)),l(t,u|i.exp<<23|i.mant,r,n)):l(t,0===e?1/e<0?2147483648:0:e===1/0?2139095040|u:2143289344,r,n)}new e(8);var T=Math.pow(2,52);function k(t,e,r,n){var i,u,o,s=0;e<0&&(s=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=1023,i.exp<=0?(i.mant*=m(51+i.exp),i.exp=0):i.mant=(i.mant-1)*T,p(t,u=s|i.exp<<20|i.mant/4294967296,o=i.mant>>>0,r,n)):(0===e?(u=1/e<0?2147483648:0,o=0):e===1/0?(u=s+2146435072,o=0):(u=2146959360,o=0),p(t,u,o,r,n))}(function e(){var d=t.exports||this;d.readWord=h,d.writeWord=l,d.writeDoubleWord=p,d.readFloat=A,d.writeFloat=S,d.readDouble=w,d.writeDouble=k,d._useFloatArray=function(t){d._usingFloatArray=t,t?("full"==t&&(d.readFloatLE=c?i:r),d.writeFloatLE=c?u:n,"full"==t&&(d.readFloatBE=c?r:i),d.writeFloatBE=c?n:u,d.readDoubleLE=c?a:o,d.writeDoubleLE=c?f:s,d.readDoubleBE=c?o:a,d.writeDoubleBE=c?s:f):(d._usingFloatArray="",d.readFloatLE=function(t,e){return d.readFloat(t,e||0,"le")},d.writeFloatLE=function(t,e,r){d.writeFloat(t,e,r||0,"le")},d.readFloatBE=function(t,e){return d.readFloat(t,e||0,"bige")},d.writeFloatBE=function(t,e,r){d.writeFloat(t,e,r||0,"bige")},d.readDoubleLE=function(t,e){return d.readDouble(t,e||0,"le")},d.writeDoubleLE=function(t,e,r){d.writeDouble(t,e,r||0,"le")},d.readDoubleBE=function(t,e){return d.readDouble(t,e||0,"bige")},d.writeDoubleBE=function(t,e,r){d.writeDouble(t,e,r||0,"bige")})},d._getBigeCpu=function(){return c},d._setBigeCpu=function(t){c=t},d._useFloatArray(!1),d._useFloatArray(r&&o&&"fastest"),e.prototype=d}).call(this)}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(18),u=r(184);t.exports={create:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.config,i=[];r.sort||(r.sort={});for(var a in t){var f=t[a],c=f.base,h=f.fields,l=void 0===f?"undefined":n(f);if("object"===l){if(!c&&!h){i.push("Expecting "+a+".fields or "+a+".base");continue}if(c&&"string"!=typeof c&&i.push("Expecting string "+a+".base"),h)if("object"!==(void 0===h?"undefined":n(h)))i.push("Expecting object "+a+".fields");else for(var p in h)"string"!=typeof h[p]&&i.push("Expecting string in "+a+".fields."+p)}else if("string"!==l){i.push("Expecting object or string under "+a+", instead got "+(void 0===f?"undefined":n(f)));continue}}var d={};for(var y in t){var g=t[y];"object"===(void 0===g?"undefined":n(g))&&(d[y]=u(y,r))}for(var m in t){var v=t[m];if("string"==typeof v){var b=e[v];if(b)e[m]=b;else{var w=C(m,v);w?d[m]=w:i.push("Unrecognized type or struct "+m+"."+v)}}}for(var E in t){var _=d[E];if(_){var A=t[E];if("object"===(void 0===A?"undefined":n(A))&&A.base){var c=A.base,B=d[c];if(!B){i.push("Missing "+c+" in "+E+".base");continue}_.add("",s(B))}}}function C(t,n,u,s){var a=o(n);if(!a)return null;var f=a.name,c=a.annotation,h=a.arrayType,l=void 0;if(c){var p=e[f];if(null==p)return i.push("Missing "+f+" in "+n),null;var y=[],g=!0,m=!1,v=void 0;try{for(var b,w=c[Symbol.iterator]();!(g=(b=w.next()).done);g=!0){var E=b.value,_=C(t,E,null,s);if(!_)return i.push("Missing "+E+" in "+n),null;y.push(_)}}catch(t){m=!0,v=t}finally{try{!g&&w.return&&w.return()}finally{if(m)throw v}}l=p(y)}else if(null==h){var A=d[f];if(A)return A;var B=e[f];if(!B)return null;l=B(u)}else if(""===h){var F=C(t,a.name,null,s);if(!F)return null;var D=r.sort[t+"."+s]||!1;l=e.vector(F,D)}else if(h.length>0){var x=C(t,a.arrayType,null,s);if(!x)return i.push("Missing "+a.arrayType+" in "+n),null;var S=C(t,a.name,x,s);if(!S)return i.push("Missing "+a.name+" in "+n),null;l=S}return a.optional?e.optional(l):l}for(var F in t){var D=d[F];if(D){var x=t[F];if(x.fields){var h=x.fields;for(var S in h){var T=h[S],k=C(F,T,null,S);k?D.add(S,k):i.push("Missing "+T+" in "+F+".fields."+S)}}}}if(i.length)return{errors:i};return{errors:i,structs:d}},toBuffer:function(t,r){var n=t.fromObject(r);return e.from(function(t,e){var r=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);return t.appendByteBuffer(r,e),r.copy(0,r.offset)}(t,n).toBinary(),"binary")},fromBuffer:function(t,e){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=i.fromBinary(e.toString("binary"),i.LITTLE_ENDIAN),u=t.fromByteBuffer(n);return r?t.toObject(u):u}};var o=function(t){if(!t||"string"!=typeof t)return null;var e=(t=t.trim()).match(/<(.*)>/);if(e){var r=e?e[1].replace(/ /g,"").split(","):null;return{name:t=t.replace(e[0],"").trim(),annotation:r}}var n=t.match(/\[(.*)\]/),i=n?n[1].trim():null;n&&(t=t.replace(n[0],"").trim());var u=!1;return/\?$/.test(t)&&(t=t.substring(0,t.length-1),u=!0),{name:t,arrayType:i,optional:u}},s=function(t){return{fromByteBuffer:function(e){return t.fromByteBuffer(e)},appendByteBuffer:function(e,r){t.appendByteBuffer(e,r)},fromObject:function(e){return t.fromObject(e)},toObject:function(e){return t.toObject(e)}}}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(18);t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{debug:!1};e=Object.assign({override:{}},e);var r={},i=void 0,u=void 0;return{compare:function(t,e){var r=t[u],n=e[u];return i&&i.compare?i.compare(r,n):r>n?1:r<n?-1:0},add:function(t,e){r[t]=e,null==i&&(i=e,u=t)},fields:r,fromByteBuffer:function(n){var i={},u=null;try{for(u in r){var o=r[u];try{var s=n.offset;if(""===u)i=o.fromByteBuffer(n,e);else{var a=e.override[t+"."+u+".fromByteBuffer"];a?a({fields:r,object:i,b:n,config:e}):i[u]=o.fromByteBuffer(n,e)}if(e.debug)if(o.struct)console.error(o.struct);else{var f=void 0;try{f=o.toObject(""===u?i:i[u],e)}catch(t){f=""}var c=n.copy(s,n.offset);console.error("fromByteBuffer",t+"."+u,"'"+f+"'",c.toHex())}}catch(e){throw console.error(e+" in "+t+"."+u),n.printDebug(),e}}}catch(e){throw e.message+=" in "+t+"."+u,e}return i},appendByteBuffer:function(n,i){var u=null;try{for(u in r){var o=r[u];if(""===u)o.appendByteBuffer(n,i);else{var s=e.override[t+"."+u+".appendByteBuffer"];s?s({fields:r,object:i,b:n}):o.appendByteBuffer(n,i[u])}}}catch(e){try{e.message+=" "+t+"."+u+" = "+JSON.stringify(i[u])}catch(r){e.message+=" "+t+"."+u+" = "+i[u]}throw e}},fromObject:function(n){var i=e.override[t+".fromObject"];if(i){var u=i(n);if(null!=u)return u}var o={},s=null;try{for(s in r){var a=r[s];if(""===s){var f=a.fromObject(n);Object.assign(o,f)}else{var c=e.override[t+"."+s+".fromObject"];if(c)c({fields:r,object:n,result:o});else{var h=n[s],l=a.fromObject(h);o[s]=l}}}}catch(e){throw e.message+=" "+t+"."+s,e}return o},toObject:function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=e.override[t+".toObject"];if(u){var o=u(i);if(null!=o)return o}var s={},a=null;try{for(a in r){var f=r[a],c=e.override[t+"."+a+".toObject"];if(c)c({fields:r,object:i,result:s,config:e});else if(""===a){var h=f.toObject(i,e);Object.assign(s,h)}else{var l=f.toObject(i?i[a]:null,e);s[a]=l}if(e.debug)try{var p=new n(n.DEFAULT_CAPACITY,n.LITTLE_ENDIAN);if(null!=i){var d=i[a];if(d){var y=e.override[t+"."+a+".appendByteBuffer"];c&&y?y({fields:r,object:i,b:p}):f.appendByteBuffer(p,d)}}p=p.copy(0,p.offset),console.error("toObject",t+"."+a,"'"+s[a]+"'",p.toHex())}catch(e){e.message=t+"."+a+" "+e.message,console.error(e)}}}catch(e){throw e.message+=" "+t+"."+a,e}return s}}}},function(t,e,r){"use strict";t.exports={chain:r(186),history:r(187)}},function(t){t.exports={get_info:{brief:"Return general network information.",params:null,results:"string"},get_account:{brief:"Fetch a blockchain account",params:{account_name:"name"},results:"string"},get_code:{brief:"Fetch smart contract code",params:{account_name:"name",code_as_wasm:{type:"bool",default:!1}},results:{account_name:"name",wast:"string",wasm:"string",code_hash:"sha256",abi:"optional<abi_def>"}},get_code_hash:{brief:"",params:{account_name:"name"},results:{account_name:"name",code_hash:"sha256"}},get_abi:{params:{account_name:"name"},results:{account_name:"name",abi:"abi_def?"}},get_raw_code_and_abi:{params:{account_name:"name"},results:{account_name:"name",wasm:"bytes",abi:"abi_def?"}},abi_json_to_bin:{brief:"Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",params:{code:"name",action:"name",args:"bytes"},results:{binargs:"bytes"}},abi_bin_to_json:{brief:"Convert bin hex back into Abi json definition.",params:{code:"name",action:"name",binargs:"bytes"},results:{args:"bytes"}},get_required_keys:{params:{transaction:"transaction",available_keys:"set[public_key]"},results:"Set[public_key]"},get_block:{brief:"Fetch a block from the blockchain.",params:{block_num_or_id:"string"},results:"variant",errors:{"unknown block":null}},get_block_header_state:{brief:"Fetch the minimum state necessary to validate transaction headers.",params:{block_num_or_id:"string"},results:"string",errors:{block_id_type_exception:"Invalid block ID",unknown_block_exception:"Could not find reversible block"}},get_table_rows:{brief:"Fetch smart contract data from an account.",params:{json:{type:"bool",default:!1},code:"name",scope:"string",table:"name",table_key:"string",lower_bound:{type:"string",default:"0"},upper_bound:{type:"string",default:"-1"},limit:{type:"uint32",default:"10"},key_type:{type:"string",doc:"The key type of --index, primary only supports (i64), all others support (i64, i128, i256, float64, float128). Special type 'name' indicates an account name."},index_position:{type:"string",doc:"1 - primary (first), 2 - secondary index (in order defined by multi_index), 3 - third index, etc"}},results:{rows:{type:"vector",doc:"One row per item, either encoded as hex String or JSON object"},more:{type:"bool",doc:"True if last element in data is not the end and sizeof data() < limit"}}},get_currency_balance:{params:{code:"name",account:"name",symbol:"optional<string>"},results:"asset[]"},get_currency_stats:{params:{code:"name",symbol:"string"},results:{supply:"asset",max_supply:"asset",issuer:"account_name"}},get_producers:{brief:"Fetch smart contract data from producer.",params:{json:{type:"bool",default:!1},lower_bound:"string",limit:{type:"uint32",default:"50"}},results:{rows:{type:"vector",doc:"one row per item, either encoded as hex String or JSON object"},total_producer_vote_weight:{type:"double",doc:"total vote"},more:{type:"string",doc:"fill lower_bound with this value to fetch more rows"}}},get_producer_schedule:{brief:"",params:{},results:{vector:"proposed"}},get_scheduled_transactions:{brief:"",params:{json:{type:"bool",default:!1},lower_bound:{type:"string",doc:"timestamp OR transaction ID"},limit:{type:"uint32",default:"50"}},results:{vector:"transactions",more:{type:"string",doc:"fill lower_bound with this to fetch next set of transactions"}}},push_block:{brief:"Append a block to the chain database.",params:{block:"signed_block"},results:null},push_transaction:{brief:"Attempts to push the transaction into the pending queue.",params:{signed_transaction:"signed_transaction"},results:{transaction_id:"fixed_bytes32",processed:"bytes"}},push_transactions:{brief:"Attempts to push transactions into the pending queue.",params:{"signed_transaction[]":"signed_transaction"},results:"vector[push_transaction.results]"}}},function(t){t.exports={get_actions:{params:{account_name:"account_name",pos:{type:"int32?",doc:"An absolute sequence positon -1 is the end/last action"},offset:{type:"int32?",doc:"The number of actions relative to pos, negative numbers return [pos-offset,pos), positive numbers return [pos,pos+offset)"}},results:{actions:"ordered_action_result[]",last_irreversible_block:"uint32",time_limit_exceeded_error:"bool?"},structs:[{name:"ordered_action_result",fields:{global_action_seq:"uint64",account_action_seq:"int32",block_num:"uint32",block_time:"block_timestamp_type",action_trace:"variant"}}]},get_transaction:{brief:"Retrieve a transaction from the blockchain.",params:{id:"transaction_id_type",block_num_hint:{type:"uint32?",default:0,doc:"A non-zero block number allows shorter transaction IDs (8 hex, 4 bytes)"}},results:{id:"transaction_id_type",trx:"variant",block_time:"block_timestamp_type",block_num:"uint32",last_irreversible_block:"uint32",traces:"variant[]"}},get_key_accounts:{params:{public_key:"public_key_type"},results:{account_names:"account_name[]"}},get_controlled_accounts:{params:{controlling_account:"account_name"},results:{controlled_accounts:"account_name[]"}}}},function(t,e,r){"use strict";r(189);var n=r(191),i=r(198),u=r(97);function o(t,e,r,n){var i=n.logger;return function(){for(var o=arguments.length,s=Array(o),a=0;a<o;a++)s[a]=arguments[a];if(0!==s.length){var f=u(s,Object.keys(r.params||[]),t,function(t){if("boolean"==typeof t)return{broadcast:t}}),c=f.params,h=(f.options,f.returnPromise),l=f.callback,p=JSON.stringify(c);i.log&&i.log("api >","post","\t",e,p);var d={body:p,method:"POST"};return Object.assign(d,n.fetchConfiguration),fetch(e,d).then(function(t){return t.status>=200&&t.status<300?t.json():t.text().then(function(e){var r=new Error(e);throw r.status=t.status,r.statusText=t.statusText,r})}).then(function(t){i.log&&i.log("api <","response","\t",e,JSON.stringify(t));try{l(null,t)}catch(t){i.error&&i.error("api <","result callback",":",t)}}).catch(function(t){var r="";try{r=JSON.parse(t.message).error.details[0]}catch(t){}i.error&&(i.error("api <","error","\t",r,e,p),i.error(t));try{l(t)}catch(t){i.error&&i.error("api <","error callback",":",t)}}),h}console.log(function(t,e){var r="",n=function(t){r+=t+"\n"};n("USAGE"),n(t+" - "+e.brief),n("\nPARAMETERS"),e.params?n(JSON.stringify(e.params,null,2)):n("none");n("\nRETURNS"),e.results?n(""+JSON.stringify(e.results,null,2)):n("no data");if(n("\nERRORS"),e.errors)for(var i in e.errors){var u=e.errors[i];n(i+(u?" - "+u:""))}else n("nothing special");return r}(t,r))}}t.exports=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u={httpEndpoint:"http://127.0.0.1:8888",verbose:!1,logger:{log:function(){var t;return r.verbose?(t=console).log.apply(t,arguments):null},error:function(){var t;return r.verbose?(t=console).error.apply(t,arguments):null}}};function s(t,e){Object.keys(e).forEach(function(r){void 0===t[r]&&(t[r]=e[r])})}s(r,u),s(r.logger,u.logger);var a={},f=r.httpEndpoint;for(var c in e)for(var h in e[c]){var l=n(h),p=f+"/"+t+"/"+c+"/"+h;a[l]=o(l,p,e[c][h],r)}var d=function(t){a[t]=function(){for(var e,r=arguments.length,n=Array(r),u=0;u<r;u++)n[u]=arguments[u];return(e=i.api)[t].apply(e,[a].concat(n))}};for(var y in i.api)d(y);return a}},function(t,e,r){r(190),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",function(){return f}),r.d(e,"Request",function(){return g}),r.d(e,"Response",function(){return v}),r.d(e,"DOMException",function(){return w}),r.d(e,"fetch",function(){return E});var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],u=ArrayBuffer.isView||function(t){return t&&i.indexOf(Object.prototype.toString.call(t))>-1};function o(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function a(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n.iterable&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function c(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function l(t){var e=new FileReader,r=h(e);return e.readAsArrayBuffer(t),r}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||u(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?c(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(l)}),this.text=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,r=h(e);return e.readAsText(t),r}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=o(t),e=s(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},f.prototype.delete=function(t){delete this.map[o(t)]},f.prototype.get=function(t){return t=o(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(o(t))},f.prototype.set=function(t,e){this.map[o(t)]=s(e)},f.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},f.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),a(t)},f.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),a(t)},f.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),a(t)},n.iterable&&(f.prototype[Symbol.iterator]=f.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(t,e){var r=(e=e||{}).body;if(t instanceof g){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=function(t){var e=t.toUpperCase();return y.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function m(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),i=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(i))}}),e}function v(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},d.call(g.prototype),d.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];v.redirect=function(t,e){if(-1===b.indexOf(e))throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function E(t,e){return new Promise(function(r,i){var u=new g(t,e);if(u.signal&&u.signal.aborted)return i(new w("Aborted","AbortError"));var o=new XMLHttpRequest;function s(){o.abort()}o.onload=function(){var t={status:o.status,statusText:o.statusText,headers:function(t){var e=new f;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var i=r.join(":").trim();e.append(n,i)}}),e}(o.getAllResponseHeaders()||"")};t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL");var e="response"in o?o.response:o.responseText;r(new v(e,t))},o.onerror=function(){i(new TypeError("Network request failed"))},o.ontimeout=function(){i(new TypeError("Network request failed"))},o.onabort=function(){i(new w("Aborted","AbortError"))},o.open(u.method,u.url,!0),"include"===u.credentials?o.withCredentials=!0:"omit"===u.credentials&&(o.withCredentials=!1),"responseType"in o&&n.blob&&(o.responseType="blob"),u.headers.forEach(function(t,e){o.setRequestHeader(e,t)}),u.signal&&(u.signal.addEventListener("abort",s),o.onreadystatechange=function(){4===o.readyState&&u.signal.removeEventListener("abort",s)}),o.send(void 0===u._bodyInit?null:u._bodyInit)})}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=f,self.Request=g,self.Response=v)},function(t,e,r){var n=r(192),i=r(193);t.exports=function(t,e,r){var u=i(t,e);return r||(u=u.replace(/ (?=\d)/g,"_")),u.replace(/ (.)/g,function(t,r){return n(r,e)})}},function(t,e){var r={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{"i̇":"I","j̇":"J","į̇":"Į","i̇̀":"Ì","i̇́":"Í","i̇̃":"Ĩ"}}};t.exports=function(t,e){var n=r[e];return t=null==t?"":String(t),n&&(t=t.replace(n.regexp,function(t){return n.map[t]})),t.toUpperCase()}},function(t,e,r){var n=r(194),i=r(195),u=r(196),o=r(197);t.exports=function(t,e,r){if(null==t)return"";return r="string"!=typeof r?" ":r,t=String(t).replace(u,"$1 $2").replace(o,"$1 $2").replace(i,function(t,e,n){return 0===e||e===n.length-t.length?"":r}),n(t,e)}},function(t,e){var r={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"İ":"i",I:"ı","İ":"i"}},az:{regexp:/[\u0130]/g,map:{"İ":"i",I:"ı","İ":"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇","Į":"į̇","Ì":"i̇̀","Í":"i̇́","Ĩ":"i̇̃"}}};t.exports=function(t,e){var n=r[e];return t=null==t?"":String(t),n&&(t=t.replace(n.regexp,function(t){return n.map[t]})),t.toLowerCase()}},function(t,e){t.exports=/[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g},function(t,e){t.exports=/([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g},function(t,e){t.exports=/([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g},function(t,e,r){"use strict";t.exports={api:{createTransaction:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:60,r=arguments[2];if(!r)throw new TypeError("callback parameter is required");t.getInfo(n(r,function(i){var u=new Date(i.head_block_time+"Z");t.getBlock(i.last_irreversible_block_num,n(r,function(t){var n=new Date(u.getTime()+1e3*e),o=65535&i.last_irreversible_block_num,s={expiration:n.toISOString().split(".")[0],ref_block_num:o,ref_block_prefix:t.ref_block_prefix,max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]};r(null,s)}))}))}}};var n=function(t,e){return function(r,n){r?t(r):e(n)}}},function(t,e,r){t.exports={default:r(200),__esModule:!0}},function(t,e,r){r(45),r(35),t.exports=r(201)},function(t,e,r){var n=r(98),i=r(4)("iterator"),u=r(23);t.exports=r(8).isIterable=function(t){var e=Object(t);return void 0!==e[i]||"@@iterator"in e||u.hasOwnProperty(n(e))}},function(t,e,r){t.exports={default:r(203),__esModule:!0}},function(t,e,r){r(45),r(35),t.exports=r(204)},function(t,e,r){var n=r(21),i=r(205);t.exports=r(8).getIterator=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return n(e.call(t))}},function(t,e,r){var n=r(98),i=r(4)("iterator"),u=r(23);t.exports=r(8).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||u[n(t)]}},function(t){t.exports={name:"uint64",checksum160:"fixed_bytes20",checksum256:"fixed_bytes32",checksum512:"fixed_bytes64",signature:"fixed_bytes65",public_key:"fixed_bytes33",message_type:"fixed_string16",symbol:"uint64",symbol_code:"uint64",field_name:"string",account_name:"name",permission_name:"name",type_name:"string",token_name:"name",table_name:"name",scope_name:"name",action_name:"name",time_point:"int64",time_point_sec:"time",timestamp:"uint32",block_timestamp_type:"timestamp",block_id:"fixed_bytes32",checksum_type:"fixed_bytes32",checksum256_type:"fixed_bytes32",checksum512_type:"fixed_bytes64",checksum160_type:"fixed_bytes20",sha256:"fixed_bytes32",sha512:"fixed_bytes64",sha160:"fixed_bytes20",weight_type:"uint16",block_num_type:"uint32",share_type:"int64",digest_type:"checksum_type",context_free_type:"bytes",unsigned_int:"varuint32",bool:"uint8",extensions_type:{base:"",fields:{type:"uint16",data:"bytes"}},transaction_header:{base:"",fields:{expiration:"time",ref_block_num:"uint16",ref_block_prefix:"uint32",max_net_usage_words:"unsigned_int",max_cpu_usage_ms:"uint8",delay_sec:"unsigned_int"}},transaction:{base:"transaction_header",fields:{context_free_actions:"action[]",actions:"action[]",transaction_extensions:"extensions_type[]"}},signed_transaction:{base:"transaction",fields:{signatures:"signature[]",context_free_data:"bytes[]"}},fields:"field_def[]",field_def:{fields:{name:"field_name",type:"type_name"}},asset:{fields:{amount:"share_type",sym:"symbol"}},producer_key:{fields:{producer_name:"account_name",block_signing_key:"public_key"}},producer_schedule:{fields:{version:"uint32",producers:"producer_key[]"}},chain_config:{fields:{target_block_size:"uint32",max_block_size:"uint32",target_block_acts_per_scope:"uint32",max_block_acts_per_scope:"uint32",target_block_acts:"uint32",max_block_acts:"uint32",real_threads:"uint64",max_storage_size:"uint64",max_transaction_lifetime:"uint32",max_authority_depth:"uint16",max_transaction_exec_time:"uint32",max_inline_depth:"uint16",max_inline_action_size:"uint32",max_generated_transaction_size:"uint32"}},type_def:{base:"",fields:{new_type_name:"type_name",type:"type_name"}},struct_def:{base:"",fields:{name:"type_name",base:"type_name",fields:"field_def[]"}},clause_pair:{base:"",fields:{id:"string",body:"string"}},error_message:{base:"",fields:{error_code:"uint64",error_msg:"string"}},abi_def:{base:"",fields:{version:"string",types:"type_def[]",structs:"struct_def[]",actions:"action_def[]",tables:"table_def[]",ricardian_clauses:"clause_pair[]",error_messages:"error_message[]",abi_extensions:"extensions_type[]"}},table_def:{base:"",fields:{name:"table_name",index_type:"type_name",key_names:"field_name[]",key_types:"type_name[]",type:"type_name"}},permission_level:{base:"",fields:{actor:"account_name",permission:"permission_name"}},action:{base:"",fields:{account:"account_name",name:"action_name",authorization:"permission_level[]",data:"bytes"}},action_def:{base:"",fields:{name:"action_name",type:"type_name",ricardian_contract:"string"}},block_header:{base:"",fields:{previous:"checksum256",timestamp:"timestamp",transaction_mroot:"checksum256",action_mroot:"checksum256",block_mroot:"checksum256",producer:"account_name",schedule_version:"uint32",new_producers:"producer_schedule?"}},packed_transaction:{fields:{signatures:"signature[]",compression:"uint8",packed_context_free_data:"bytes",packed_trx:"bytes"}}}},function(t,e,r){"use strict";(function(e){var n=function(t){return t&&t.__esModule?t:{default:t}}(r(20));var i=r(3),u=r(58);t.exports=function(t,r){r.abiCache={abiAsync:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(i.equal(void 0===e?"undefined":(0,n.default)(e),"string","account string required"),0==r&&null!=s[e])return Promise.resolve(s[e]);if(null==t){var u=s[e];return i(u,"Missing ABI for account: "+e+", provide httpEndpoint or add to abiCache"),Promise.resolve(u)}return t.getAbi(e).then(function(t){return i(t.abi,"Missing ABI for account: "+e),a(e,t.abi)})},abi:a};var o=Object.assign({},{defaults:!0},r),s={};function a(t,r){if(i.equal(void 0===t?"undefined":(0,n.default)(t),"string","account string required"),r){i.equal(void 0===r?"undefined":(0,n.default)(r),"object","abi"),e.isBuffer(r)&&(r=JSON.parse(r));var a=function(t,e){var r={};t.types&&t.types.forEach(function(t){r[t.new_type_name]=t.type});t.structs&&t.structs.forEach(function(t){var e={},n=!0,i=!1,u=void 0;try{for(var o,s=t.fields[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value;e[a.name]=a.type}}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}r[t.name]={base:t.base,fields:e},""===t.base&&delete r[t.name].base});t.actions&&t.actions.forEach(function(t){var n=r[t.type];n?n.action={name:t.name,account:e}:console.error("Missing abiSchema type",t.type,e)});return r}(r,t),f=u(o,a);return s[t]=Object.assign({abi:r,schema:a},f)}var c=s[t];if(null==c)throw new Error("Abi '"+t+"' is not cached");return c}return r.abiCache}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=o(r(59)),i=o(r(61)),u=o(r(20));function o(t){return t&&t.__esModule?t:{default:t}}var s=r(3),a=r(49),f=r(57),c=r(56),h=r(96).processArgs;r(58);t.exports=function(t,r,o,m,v){if("string"!=typeof m.chainId)throw new TypeError("config.chainId is required");var b=function(t,r,o,m){var v=function(t,e){return function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];var a,f,c,h,l,d,y,g,m,v,w,A,B,C,F,D,x,S,T,k,M;return i.default.async(function(t){for(;;)switch(t.prev=t.next){case 0:if(a=void 0,f=void 0,c=void 0,null==r[r.length-1]&&(r=r.slice(0,r.length-1)),!(h=p(r[0]))){t.next=8;break}a=r[0],r=r.slice(1),t.next=39;break;case 8:if("string"!=typeof r[0]){t.next=13;break}a=[r[0]],r=r.slice(1),t.next=39;break;case 13:if("object"!==(0,u.default)(r[0])||!Array.isArray(r[0].actions)){t.next=39;break}for(l=new Set,d=!0,y=!1,g=void 0,t.prev=18,m=r[0].actions[Symbol.iterator]();!(d=(v=m.next()).done);d=!0)w=v.value,l.add(w.account);t.next=26;break;case 22:t.prev=22,t.t0=t.catch(18),y=!0,g=t.t0;case 26:t.prev=26,t.prev=27,!d&&m.return&&m.return();case 29:if(t.prev=29,!y){t.next=32;break}throw g;case 32:return t.finish(29);case 33:return t.finish(26);case 34:return A=[],B=new Set(["eosio","eosio.token","eosio.null"]),l.forEach(function(t){B.has(t)||A.push(o.abiCache.abiAsync(t))}),t.next=39,i.default.awrap(Promise.all(A));case 39:if(r.length>1&&"function"==typeof r[r.length-1]&&(c=r.pop()),r.length>1&&"object"===(0,u.default)(r[r.length-1])&&(f=r.pop()),s.equal(r.length,1,"transaction args: contracts<string|array>, transaction<callback|object>, [options], [callback]"),C=r[0],!a){t.next=67;break}for(s(!c,"callback with contracts are not supported"),s.equal("function",void 0===C?"undefined":(0,u.default)(C),"provide function callback following contracts array parameter"),F=[],D=!0,x=!1,S=void 0,t.prev=50,T=a[Symbol.iterator]();!(D=(k=T.next()).done);D=!0)M=k.value,F.push(b(M,e.transaction));t.next=58;break;case 54:t.prev=54,t.t1=t.catch(50),x=!0,S=t.t1;case 58:t.prev=58,t.prev=59,!D&&T.return&&T.return();case 61:if(t.prev=61,!x){t.next=64;break}throw S;case 64:return t.finish(61);case 65:return t.finish(58);case 66:return t.abrupt("return",Promise.all(F).then(function(t){var e={};t.forEach(function(t,r){e[a[r]]=t});var r=h?e:e[a[0]];return E(C,f,r)}));case 67:if("function"!=typeof C){t.next=69;break}return t.abrupt("return",E(C,f,e));case 69:if("object"!==(void 0===C?"undefined":(0,u.default)(C))){t.next=71;break}return t.abrupt("return",_(C,f,c));case 71:throw new Error("first transaction argument unrecognized",C);case 72:case"end":return t.stop()}},null,this,[[18,22,26,34],[27,,29,33],[50,54,58,66],[59,,61,65]])}};function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return o.abiCache.abiAsync(t).then(function(r){s(Array.isArray(r.abi.actions)&&r.abi.actions.length,"No actions");var n={};return n.transaction=e||v(r.structs,n),r.abi.actions.forEach(function(e){var i=e.name,u=e.type,o=g(r.schema,u);n[i]=w(u,o,n.transaction,t,i)}),n.fc=r,n})}function w(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"eosio.token",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:t;return function(){for(var f=arguments.length,c=Array(f),l=0;l<f;l++)c[l]=arguments[l];if(0!==c.length){var p={},y=c[c.length-1];"object"===(void 0===y?"undefined":(0,u.default)(y))&&"object"===(0,u.default)(y.__optionOverrides)&&Object.assign(p,c.pop().__optionOverrides);var m=h(c,Object.keys(e),t,d),v=m.options,b=m.params,w=m.returnPromise,E=m.callback,_={broadcast:o.broadcast,sign:o.sign};if(v=Object.assign({},_,v,p),p.noCallback&&!w)throw new Error("Callback during a transaction are not supported");var A=[],B=v.authorization?v.authorization:o.authorization,C=null==B;if(B){var F=void 0;"string"==typeof B?F=[B]:Array.isArray(B)&&(F=B),F&&F.forEach(function(t){if("string"==typeof t){var e=t.split("@"),r=(0,n.default)(e,2),i=r[0],o=r[1],s=void 0===o?"active":o;""===i&&(i=S()),i&&A.push({actor:i,permission:s})}else"object"===(void 0===t?"undefined":(0,u.default)(t))&&A.push(t)}),s.equal(A.length,F.length,"invalid authorization in: "+JSON.stringify(B))}var D={actions:[{account:i,name:a,authorization:A,data:b}]};if(C){var x=S();x&&D.actions[0].authorization.push({actor:x,permission:"active"})}return D.actions[0].authorization.sort(function(t,e){return t.actor>e.actor?1:t.actor<e.actor?-1:0}),p.messageOnly?E(null,D):r(D,v,E),w}function S(){var t=Object.keys(e),r=t[0];if("account_name"===e[r])return b[r]}console.log(function(t,e,r,n,i){var u="",o=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";u+=t+"\n"};o("CONTRACT"),o(n),o(),o("ACTION"),o(t.name),o();var s=i.abiCache.abi(n);o("PARAMETERS"),o(JSON.stringify(g(s.schema,t.type),null,4)),o();var a=s.structs[t.type];return o("EXAMPLE"),o(n+"."+t.name+"("+JSON.stringify(a.toObject(),null,4)+")"),u}({name:a,type:t},0,0,i,o))}}function E(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments[2];s.equal("function",void 0===t?"undefined":(0,u.default)(t),"trCallback"),s.equal("object",void 0===e?"undefined":(0,u.default)(e),"options"),s.equal("object",void 0===r?"undefined":(0,u.default)(r),"merges"),s(!Array.isArray(r),"merges should not be an array"),s.equal("function",(0,u.default)(_),"transaction");var i=[],o={},a=function(t){return function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var u=t.apply(void 0,r.concat([{__optionOverrides:{broadcast:!1,messageOnly:!0,noCallback:!0}}]));if(null==u)throw new Error("Callbacks can not be used when creating a multi-action transaction");i.push(u)}};for(var f in r){var c=r[f],h=f.replace(/\./,"_");if("function"==typeof c)o[h]=a(c);else if("object"===(void 0===c?"undefined":(0,u.default)(c)))for(var l in null==o[h]&&(o[h]={}),c)"transaction"!==l&&(o[h][l]=a(c[l]))}var p=void 0;try{p=t(o)}catch(t){p=Promise.reject(t)}return Promise.resolve(p).then(function(){return Promise.all(i).then(function(t){var r=[],i=!0,u=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value,c=(0,n.default)(f.actions,1),h=c[0];r.push(h)}}catch(t){u=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(u)throw o}}var l={};return l.actions=r,_(l,e)})})}function _(t,n,h){var p,d,g,v,b,w,E,_,A,B,C,F,D,x,S,T;return i.default.async(function(k){for(;;)switch(k.prev=k.next){case 0:if(p=o.expireInSeconds?o.expireInSeconds:60,d={expireInSeconds:p,broadcast:!0,sign:!0},n=Object.assign({},d,n),g=void 0,"function"!=typeof h&&(g=new Promise(function(t,e){h=function(r,n){r?e(r):t(n)}})),"object"===(void 0===t?"undefined":(0,u.default)(t))){k.next=7;break}throw new TypeError("First transaction argument should be an object or function");case 7:if(Array.isArray(t.actions)){k.next=9;break}throw new TypeError("Expecting actions array");case 9:if((o.logger.log||o.logger.error)&&(v=h,h=function(t,e){t&&o.logger.error&&o.logger.error(t),o.logger.log&&o.logger.log(JSON.stringify(e)),v(t,e)}),t.actions.forEach(function(t){if(!Array.isArray(t.authorization))throw new TypeError("Expecting action.authorization array",t)}),!n.sign||"function"==typeof o.signProvider){k.next=13;break}throw new TypeError("Expecting config.signProvider function (disable using {sign: false})");case 13:if(b={max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]},!o.transactionHeaders){k.next=25;break}if("object"!==(0,u.default)(o.transactionHeaders)){k.next=19;break}Object.assign(b,o.transactionHeaders),k.next=25;break;case 19:if("function"!=typeof o.transactionHeaders){k.next=24;break}return k.next=22,i.default.awrap(o.transactionHeaders(n.expireInSeconds,y(h,o.logger,function(t){return i.default.async(function(e){for(;;)switch(e.prev=e.next){case 0:s.equal(void 0===t?"undefined":(0,u.default)(t),"object","expecting transaction header object"),Object.assign(b,t);case 2:case"end":return e.stop()}},null,this)})));case 22:k.next=25;break;case 24:s(!1,"config.transactionHeaders should be an object or function");case 25:for(w=["expiration","ref_block_num","ref_block_prefix","delay_sec","max_net_usage_words","max_cpu_usage_ms"],E=0;E<w.length;E++)_=w[E],void 0!==t[_]?b[_]=t[_]:void 0!==n[_]&&(b[_]=n[_]);if(void 0!==b.expiration&&void 0!==b.ref_block_num&&void 0!==b.ref_block_prefix){k.next=31;break}return s(r,"Network is required, provide httpEndpoint or own transaction headers"),k.next=31,i.default.awrap(new Promise(function(t){r.createTransaction(n.expireInSeconds,y(h,o.logger,function(e){var r,n,u;return i.default.async(function(i){for(;;)switch(i.prev=i.next){case 0:for(r=["expiration","ref_block_num","ref_block_prefix"],n=0;n<r.length;n++)u=r[n],void 0===b[u]&&(b[u]=e[u]);t();case 3:case"end":return i.stop()}},null,this)}))}));case 31:return s.equal((0,u.default)(b.expiration),"string","expecting expiration: iso date time string"),s.equal((0,u.default)(b.ref_block_num),"number","expecting ref_block_num number"),s.equal((0,u.default)(b.ref_block_prefix),"number","expecting ref_block_prefix number"),b.context_free_actions=t.context_free_actions,b.actions=t.actions,b.transaction_extensions=t.transaction_extensions,A=m.fromObject(b),B=f.toBuffer(m,A),C=m.toObject(A),F=c("sha256").update(B).digest().toString("hex"),D=[],n.sign&&(x=e.from(o.chainId,"hex"),S=e.from(new Uint8Array(32)),T=e.concat([x,B,S]),D=o.signProvider({transaction:C,buf:T,sign:l,optionsKeyProvider:n.keyProvider}),Array.isArray(D)||(D=[D])),Promise.all(D).then(function(t){t=[].concat.apply([],t);for(var e=0;e<t.length;e++){var i=t[e];"string"==typeof i&&130===i.length&&(t[e]=a.Signature.from(i).toString())}var u={compression:"none",transaction:C,signatures:t},f=o.mockTransactions?o.mockTransactions():null;if(null==f)n.broadcast&&r?r.pushTransaction(u,function(t,e){t?(o.logger.error&&o.logger.error("[push_transaction error] '"+t.message+"', transaction '"+B.toString("hex")+"'"),h(t.message)):h(null,Object.assign({broadcast:!0,transaction:u,transaction_id:F},e))}):h(null,{transaction_id:F,broadcast:!1,transaction:u});else if(s(/pass|fail/.test(f),"mockTransactions should return a string: pass or fail"),"pass"===f&&h(null,{transaction_id:F,mockTransaction:!0,broadcast:!1,transaction:u}),"fail"===f){var c="[push_transaction mock error] 'fake error', digest '"+B.toString("hex")+"'";o.logger.error&&o.logger.error(c),h(c)}}).catch(function(t){o.logger.error&&o.logger.error(t),h(t)}),k.abrupt("return",g);case 45:case"end":return k.stop()}},null,this)}return{genTransaction:v,genContractActions:b,genMethod:w}}(0,r,m,o.transaction),w=new Set(["transaction","contract"]),E={};E.transaction=b.genTransaction(o,E);var _=!0,A=!1,B=void 0;try{for(var C,F=v[Symbol.iterator]();!(_=(C=F.next()).done);_=!0){var D=C.value;for(var x in D.schema){var S=D.schema[x];if("string"!=typeof S){s.equal(void 0===S?"undefined":(0,u.default)(S),"object","abi.schema[type = "+x+"]");var T=S.action;if(void 0!==T){if(w.has(T.name))throw new TypeError("Conflicting Api function: "+x);var k=g(D.schema,x);E[T.name]=b.genMethod(x,k,E.transaction,T.account,T.name)}}}}}catch(t){A=!0,B=t}finally{try{!_&&F.return&&F.return()}finally{if(A)throw B}}return E.contract=function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];var n=h(e,["account"],"contract",d),i=n.params,u=(n.options,n.returnPromise),o=n.callback,s=i.account;return b.genContractActions(s).then(function(t){o(null,t)}).catch(function(t){o(t)}),u},E};var l=a.sign;var p=function(t){return Array.isArray(t)&&t.length>0&&-1===t.findIndex(function(t){return"string"!=typeof t})},d=function(t){return"object"===(void 0===t?"undefined":(0,u.default)(t))?t:"boolean"==typeof t?{broadcast:t}:void 0};var y=function(t,e,r){return function(n,i){n?(e.error&&e.error("error",n),t(n)):Promise.resolve(r(i)).catch(function(e){t(e)})}};function g(t,e){var r=t[e],n=r.base,i=r.fields,u={};return n&&""!==n&&Object.assign(u,g(t,n)),Object.assign(u,i),u}}).call(this,r(2).Buffer)},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"}],structs:[{name:"transfer",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"create",base:"",fields:[{name:"issuer",type:"account_name"},{name:"maximum_supply",type:"asset"}]},{name:"issue",base:"",fields:[{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"account",base:"",fields:[{name:"balance",type:"asset"}]},{name:"currency_stats",base:"",fields:[{name:"supply",type:"asset"},{name:"max_supply",type:"asset"},{name:"issuer",type:"account_name"}]}],actions:[{name:"transfer",type:"transfer",ricardian_contract:""},{name:"issue",type:"issue",ricardian_contract:""},{name:"create",type:"create",ricardian_contract:""}],tables:[{name:"accounts",type:"account",index_type:"i64",key_names:["currency"],key_types:["uint64"]},{name:"stat",type:"currency_stats",index_type:"i64",key_names:["currency"],key_types:["uint64"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"},{new_type_name:"permission_name",type:"name"},{new_type_name:"action_name",type:"name"},{new_type_name:"transaction_id_type",type:"checksum256"},{new_type_name:"weight_type",type:"uint16"}],____comment:"eosio.bios structs: set_account_limits, setpriv, set_global_limits, producer_key, set_producers, require_auth are provided so abi available for deserialization in future.",structs:[{name:"permission_level",base:"",fields:[{name:"actor",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"key_weight",base:"",fields:[{name:"key",type:"public_key"},{name:"weight",type:"weight_type"}]},{name:"bidname",base:"",fields:[{name:"bidder",type:"account_name"},{name:"newname",type:"account_name"},{name:"bid",type:"asset"}]},{name:"permission_level_weight",base:"",fields:[{name:"permission",type:"permission_level"},{name:"weight",type:"weight_type"}]},{name:"wait_weight",base:"",fields:[{name:"wait_sec",type:"uint32"},{name:"weight",type:"weight_type"}]},{name:"authority",base:"",fields:[{name:"threshold",type:"uint32"},{name:"keys",type:"key_weight[]"},{name:"accounts",type:"permission_level_weight[]"},{name:"waits",type:"wait_weight[]"}]},{name:"newaccount",base:"",fields:[{name:"creator",type:"account_name"},{name:"name",type:"account_name"},{name:"owner",type:"authority"},{name:"active",type:"authority"}]},{name:"setcode",base:"",fields:[{name:"account",type:"account_name"},{name:"vmtype",type:"uint8"},{name:"vmversion",type:"uint8"},{name:"code",type:"bytes"}]},{name:"setabi",base:"",fields:[{name:"account",type:"account_name"},{name:"abi",type:"bytes"}]},{name:"updateauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"},{name:"parent",type:"permission_name"},{name:"auth",type:"authority"}]},{name:"deleteauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"linkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"},{name:"requirement",type:"permission_name"}]},{name:"unlinkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"}]},{name:"canceldelay",base:"",fields:[{name:"canceling_auth",type:"permission_level"},{name:"trx_id",type:"transaction_id_type"}]},{name:"onerror",base:"",fields:[{name:"sender_id",type:"uint128"},{name:"sent_trx",type:"bytes"}]},{name:"buyrambytes",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"bytes",type:"uint32"}]},{name:"sellram",base:"",fields:[{name:"account",type:"account_name"},{name:"bytes",type:"uint64"}]},{name:"buyram",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"quant",type:"asset"}]},{name:"delegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"stake_net_quantity",type:"asset"},{name:"stake_cpu_quantity",type:"asset"},{name:"transfer",type:"bool"}]},{name:"undelegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"unstake_net_quantity",type:"asset"},{name:"unstake_cpu_quantity",type:"asset"}]},{name:"refund",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"delegated_bandwidth",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"}]},{name:"user_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"total_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"refund_request",base:"",fields:[{name:"owner",type:"account_name"},{name:"request_time",type:"time_point_sec"},{name:"net_amount",type:"asset"},{name:"cpu_amount",type:"asset"}]},{name:"blockchain_parameters",base:"",fields:[{name:"max_block_net_usage",type:"uint64"},{name:"target_block_net_usage_pct",type:"uint32"},{name:"max_transaction_net_usage",type:"uint32"},{name:"base_per_transaction_net_usage",type:"uint32"},{name:"net_usage_leeway",type:"uint32"},{name:"context_free_discount_net_usage_num",type:"uint32"},{name:"context_free_discount_net_usage_den",type:"uint32"},{name:"max_block_cpu_usage",type:"uint32"},{name:"target_block_cpu_usage_pct",type:"uint32"},{name:"max_transaction_cpu_usage",type:"uint32"},{name:"min_transaction_cpu_usage",type:"uint32"},{name:"max_transaction_lifetime",type:"uint32"},{name:"deferred_trx_expiration_window",type:"uint32"},{name:"max_transaction_delay",type:"uint32"},{name:"max_inline_action_size",type:"uint32"},{name:"max_inline_action_depth",type:"uint16"},{name:"max_authority_depth",type:"uint16"}]},{name:"eosio_global_state",base:"blockchain_parameters",fields:[{name:"max_ram_size",type:"uint64"},{name:"total_ram_bytes_reserved",type:"uint64"},{name:"total_ram_stake",type:"int64"},{name:"last_producer_schedule_update",type:"block_timestamp_type"},{name:"last_pervote_bucket_fill",type:"uint64"},{name:"pervote_bucket",type:"int64"},{name:"perblock_bucket",type:"int64"},{name:"total_unpaid_blocks",type:"uint32"},{name:"total_activated_stake",type:"int64"},{name:"thresh_activated_stake_time",type:"uint64"},{name:"last_producer_schedule_size",type:"uint16"},{name:"total_producer_vote_weight",type:"float64"},{name:"last_name_close",type:"block_timestamp_type"}]},{name:"producer_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"total_votes",type:"float64"},{name:"producer_key",type:"public_key"},{name:"is_active",type:"bool"},{name:"url",type:"string"},{name:"unpaid_blocks",type:"uint32"},{name:"last_claim_time",type:"uint64"},{name:"location",type:"uint16"}]},{name:"regproducer",base:"",fields:[{name:"producer",type:"account_name"},{name:"producer_key",type:"public_key"},{name:"url",type:"string"},{name:"location",type:"uint16"}]},{name:"unregprod",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"setram",base:"",fields:[{name:"max_ram_size",type:"uint64"}]},{name:"regproxy",base:"",fields:[{name:"proxy",type:"account_name"},{name:"isproxy",type:"bool"}]},{name:"voteproducer",base:"",fields:[{name:"voter",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"}]},{name:"voter_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"},{name:"staked",type:"int64"},{name:"last_vote_weight",type:"float64"},{name:"proxied_vote_weight",type:"float64"},{name:"is_proxy",type:"bool"}]},{name:"claimrewards",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"setpriv",base:"",fields:[{name:"account",type:"account_name"},{name:"is_priv",type:"int8"}]},{name:"rmvproducer",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"set_account_limits",base:"",fields:[{name:"account",type:"account_name"},{name:"ram_bytes",type:"int64"},{name:"net_weight",type:"int64"},{name:"cpu_weight",type:"int64"}]},{name:"set_global_limits",base:"",fields:[{name:"cpu_usec_per_period",type:"int64"}]},{name:"producer_key",base:"",fields:[{name:"producer_name",type:"account_name"},{name:"block_signing_key",type:"public_key"}]},{name:"set_producers",base:"",fields:[{name:"schedule",type:"producer_key[]"}]},{name:"require_auth",base:"",fields:[{name:"from",type:"account_name"}]},{name:"setparams",base:"",fields:[{name:"params",type:"blockchain_parameters"}]},{name:"connector",base:"",fields:[{name:"balance",type:"asset"},{name:"weight",type:"float64"}]},{name:"exchange_state",base:"",fields:[{name:"supply",type:"asset"},{name:"base",type:"connector"},{name:"quote",type:"connector"}]},{name:"namebid_info",base:"",fields:[{name:"newname",type:"account_name"},{name:"high_bidder",type:"account_name"},{name:"high_bid",type:"int64"},{name:"last_bid_time",type:"uint64"}]}],actions:[{name:"newaccount",type:"newaccount",ricardian_contract:""},{name:"setcode",type:"setcode",ricardian_contract:""},{name:"setabi",type:"setabi",ricardian_contract:""},{name:"updateauth",type:"updateauth",ricardian_contract:""},{name:"deleteauth",type:"deleteauth",ricardian_contract:""},{name:"linkauth",type:"linkauth",ricardian_contract:""},{name:"unlinkauth",type:"unlinkauth",ricardian_contract:""},{name:"canceldelay",type:"canceldelay",ricardian_contract:""},{name:"onerror",type:"onerror",ricardian_contract:""},{name:"buyrambytes",type:"buyrambytes",ricardian_contract:""},{name:"buyram",type:"buyram",ricardian_contract:""},{name:"sellram",type:"sellram",ricardian_contract:""},{name:"delegatebw",type:"delegatebw",ricardian_contract:""},{name:"undelegatebw",type:"undelegatebw",ricardian_contract:""},{name:"refund",type:"refund",ricardian_contract:""},{name:"regproducer",type:"regproducer",ricardian_contract:""},{name:"setram",type:"setram",ricardian_contract:""},{name:"bidname",type:"bidname",ricardian_contract:""},{name:"unregprod",type:"unregprod",ricardian_contract:""},{name:"regproxy",type:"regproxy",ricardian_contract:""},{name:"voteproducer",type:"voteproducer",ricardian_contract:""},{name:"claimrewards",type:"claimrewards",ricardian_contract:""},{name:"setpriv",type:"setpriv",ricardian_contract:""},{name:"rmvproducer",type:"rmvproducer",ricardian_contract:""},{name:"setalimits",type:"set_account_limits",ricardian_contract:""},{name:"setglimits",type:"set_global_limits",ricardian_contract:""},{name:"setprods",type:"set_producers",ricardian_contract:""},{name:"reqauth",type:"require_auth",ricardian_contract:""},{name:"setparams",type:"setparams",ricardian_contract:""}],tables:[{name:"producers",type:"producer_info",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"global",type:"eosio_global_state",index_type:"i64",key_names:[],key_types:[]},{name:"voters",type:"voter_info",index_type:"i64",key_names:["owner"],key_types:["account_name"]},{name:"userres",type:"user_resources",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"delband",type:"delegated_bandwidth",index_type:"i64",key_names:["to"],key_types:["uint64"]},{name:"rammarket",type:"exchange_state",index_type:"i64",key_names:["supply"],key_types:["uint64"]},{name:"refunds",type:"refund_request",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"namebids",type:"namebid_info",index_type:"i64",key_names:["newname"],key_types:["account_name"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[],structs:[{name:"nonce",base:"",fields:[{name:"value",type:"string"}]}],actions:[{name:"nonce",type:"nonce",ricardian_contract:""}],tables:[],ricardian_clauses:[],abi_extensions:[]}},function(t,e,r){"use strict";t.exports={scatter:{blockchain:"eos",host:"nodes.get-scatter.com",port:443,chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",protocol:"https",httpEndpoint:"https://nodes.get-scatter.com:443"},eosasia:{blockchain:"eos",host:"api1.eosasia.one",port:443,chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",protocol:"https",httpEndpoint:"https://api1.eosasia.one:443"},dev:{blockchain:"eos",host:"dev.toneos.pro",port:7777,chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",protocol:"http",httpEndpoint:"http://dev.toneos.pro:7777"}}},function(t,e,r){const n=r(60),i=r(214),u=r(215),o={ERR_GET_SCATTER_FAILED:"ERR_GET_SCATTER_FAILED",ERR_GET_IDENTITY_FAILED:"ERR_GET_IDENTITY_FAILED"};t.exports=class extends u{constructor(t){super(),this.events.enableEvents(o),this._networks=t,this._db=new i({network_name:"dev",lang:"ch"}),console.log(`eosplayer created: \n${this.netName} \n${JSON.stringify(this.netConf)}`)}get storage(){return this._db}switchNetwork(t){t in this._networks?(this.storage.set("network_name",t),this._eosClient=null,console.log(`network changed to ${this.netName}.`)):console.log(`network ${t} cannot find.`)}setNetConf(t,e){this._networks[t]=e}get netName(){return this.storage.get("network_name")}get netConf(){return this._networks[this.netName]}get scatter(){let t=window.scatter;if(!t){let t=new Error("scatter cannot found");throw this.events.emitEvent(o.ERR_GET_SCATTER_FAILED,t),t}return t}async login(){return await this.getIdentity()}async logout(){return await this.scatter.forgetIdentity(this.netName)}get eosClient(){return this._eosClient||(this._eosClient=this.scatter.eos(this.netConf,n,{},this.netConf.protocol)),this._eosClient}async getIdentity(){let t=this.storage.get("latest_chain_id");return t&&this.netConf.chainId!==t&&(console.log(`a changing of chain_id detected: ${t} -> ${this.netConf.chainId} `),await this.logout(),console.log(`log out from ${t}`)),await this.scatter.getIdentity({accounts:[this.netConf]}).catch(t=>{throw this.events.emitEvent(o.ERR_GET_IDENTITY_FAILED,t),t}),this.storage.set("latest_chain_id",this.netConf.chainId),this.scatter.identity.accounts.find(t=>"eos"===t.blockchain)}get help(){return super.help+"\n  \n## Usage of eosplayer (for broswer)\n  \n### Events\n\nERR_GET_SCATTER_FAILED  \nERR_GET_IDENTITY_FAILED  \n\n### APIs\n\n```js\n{void} eosplayer.switchNetwork(val) // switch network\n{void} eosplayer.setNetConf(network_name, conf) // add a network config at runtime    \n\nget {Scatter} eosplayer.scatter // get scatter instance\n\nget {string} eosplayer.netName // get current network name\nget {string} eosplayer.netConf // get current network config\n        \nasync {Identity} eosplayer.login() // let user allow you using identity\nasync {void} eosplayer.logout() // return back the identity\n```\n\n## Imported libs\n\n```js\nwindow.eosjs = Eos; /** the eosjs lib @see {@url https://www.npmjs.com/package/eosjs} */  \nwindow.env = env; /** {isPc} */  \nwindow.idb = idb; /** idb lib for browser storage @see {@url https://www.npmjs.com/package/idb } */  \nwindow.eosplayer = new ScatterPlayer(networks);  \nwindow.BigNumber = BigNumber; /** big number @see {@url https://www.npmjs.com/package/bignumber.js} */\n```        \n"}}},function(t,e){"using strict";t.exports=class{constructor(t){this._defualts=t}get(t){let e=`eosplayer::${t}`,r=localStorage.getItem(e);if(r)return r;if(t in this._defualts){let e=this._defualts[t];return this.set(t,e),e}}set(t,e){let r=`eosplayer::${t}`;localStorage.setItem(r,e)}}},function(t,e,r){const n=r(216),i={ERR_TRANSCAL_FAILED:"ERR_TRANSCAL_FAILED"},u=r(217),o=r(218),s=r(220);t.exports=class extends s{constructor(){super(),this.events.enableEvents(i)}get events(){return this._events||(this._events=new u)}get chain(){return new o(this.eosClient)}async getAccountInfo(t){return await this.chain.getAccountInfo(t||(await this.getIdentity()).name)}async getBalance(t,e="eosio.token"){return this.chain.getBalance(t||(await this.getIdentity()).name,e)}async getBalanceAsset(t,e="eosio.token"){let r=await this.getBalance(t,e);return n.parse(r)}async transfer(t,e,r=""){const n=await this.getIdentity(),u={authorization:[`${n.name}@${n.authority}`]};let o=await this.eosClient.transfer(n.name,t,e,r,u).catch(t=>{throw this.events.emitEvent(i.ERR_TRANSCAL_FAILED,t),t});return o&&console.log(`Transaction ID: ${o.transaction_id}`),o}async transcal(t,e,r,...n){return await this.transfer(t,e,`@[${r}:${n.join(",")}]`)}async transget(t,e,r,...n){return await this.transcal(t,`0.0001 ${e}`,r,...n)}async call(t,e,r){const n=await this.getIdentity();let i=await this.chain.call(t,e,r,{actor:n.name,permission:n.authority});return i&&console.log(`Transaction ID: ${i.transaction_id}`),i}async waitTx(t,e=12,r=1009){return await this.chain.waitTx(t,e,r)}async checkTable(t,e,r,n=10,i=0,u=-1,o=1){return await this.chain.checkTable(t,e,r,n,i,u,o)}async checkTableRange(t,e,r,n,i=1,u=1){return await this.chain.checkTableRange(t,e,r,n,i,u)}async checkTableItem(t,e,r,n=0,i=1){return await this.chain.checkTableItem(t,e,r,n,i)}async newAccount(t,e){return await this.eosClient.newaccount({creator:(await this.getIdentity()).name,name:t,owner:{threshold:1,keys:[{key:e,weight:1}],accounts:[],waits:[]},active:{threshold:1,keys:[{key:e,weight:1}],accounts:[],waits:[]}})}get version(){return"0.1.2"}get help(){return`\n\`\`\`js\n      =============================================================\n        \n               -----      ------        ------      -------\n              -----     -----          ------      -------\n             -----   -----            ------      -------\n            -----  -----             ------      -------\n           ----------                ----- ---- ------ \n          -----  -----              ----- ---- ------\n         -----    -----           ------      -------\n        -----      ------        ------      -------\n       ------       -------     ------      -------\n      --------      ---------  ------      -------\n        \n===========================================================\n\`\`\`\n---\n\n# eosplayer ${this.version}\n        \n## Usage of eosplayer\n\n### Events\n\nERR_TRANSCAL_FAILED\n\n### APIs\n\n\`\`\`js\nget {string} help // get help info of usage\nget {string} version // get the version info\nget {Chain} chain // get the chain\n\n{void} eosplayer.event.setEvent(event, fnCallback, context) //listen to a event\n\nget {Eos} eosplayer.eosClient // get eos instance\nasync {Identity} eosplayer.getIdentity() // get identity\n\nasync {AccountInfo} eosplayer.getAccountInfo(account_name = identity.name) \n    // get account info for any user\n\nasync {string} eosplayer.getBalance(account_name = undefined, code = "eosio.token")  \n    // get balance string of a account. ex. "1.0000 EOS", null means that the account dosen't have any token,\n\nasync {string} eosplayer.getBalanceAsset(account_name = undefined, code = "eosio.token") \n    // get balance structure of a account. ex. {val:1, sym:"EOS", decimal:4}\n\nasync {tx} eosplayer.transfer(target, quantity, memo = "")\n    // transfer tokens to target\n\nasync {tx} eosplayer.transcal(code, quantity, func, ...args) \n    // send a action of transcal to contract\n    \nasync {tx} eosplayer.transget(code, symbol, func, ...args) \n    // send a action of trancal (quantity value = 0.0001) to contract\n\nasync {Contract} eosplayer.contract(code)\n    // get contract object\n\nasync {tx} eosplayer.call(code, func, jsonData)\n    // send a action to contract\n\nasync {table} eosplayer.checkTable(code, tableName, scope, limit = 10, lower_bound = 0, upper_bound = -1, index_position = 1) \n    // check all items in a table\n\nasync {item[]} eosplayer.checkTableRange(code, tableName, scope, from, length = 1, index_position = 1)\n    // check a range of items in a table\n    \nasync {item} eosplayer.checkTableItem(code, tableName, scope, key = 0, index_position = 1)\n    // check a specific item in a table \n\`\`\`\n\n${this.chain.help}`}}},function(t,e,r){"use strict";class n{constructor(t,e,r=4){this._val=t,this._sym=e,this._decimal=r}get val(){return this._val}get sym(){return this._sym}get decimal(){return this._decimal}get valStr(){return this._val.toFixed(this.decimal)}toString(){return`${this.valStr} ${this.sym}`}static parse(t){if(!t||"string"!=typeof t)return null;let e=(t=t.trim()).indexOf(" ");if(e<0)return null;let r=t.slice(0,e),i=t.slice(1+e);if(!r||!i)return null;let u=t.indexOf("."),o=u<0?0:e-u-1,s=parseFloat(r);return new n(s,i,o)}}t.exports=n},function(t,e,r){"use strict";t.exports=class{constructor(t){this._eventMap={},this._defaultCb=function(t){let e=`${JSON.stringify(this)} : ${JSON.stringify(t)}`;if(!alert)throw new Error(e);alert(e)},t&&(this.enableEvents(t),this._eventMap=Array.isArray(t)?{}:t)}enableEvents(t){let e=Array.isArray(t)?t:Object.keys(t);this._supportedEvents=(this._supportedEvents||[]).concat(e)}setEvent(t,e,r){if(!this._supportedEvents.find(e=>e===t))throw new Error(`event handler : event ${t} are not supported.`);this._eventMap[t]={cb:e,ctx:context}}emitEvent(t,...e){if(!this._supportedEvents.find(e=>e===t))throw new Error(`event handler : event ${t} are not found.`);let r=this._eventMap[t];return r?r.cb.call(r.ctx,...e):this._defaultCb.call(t,...e)}}},function(t,e,r){"use strict";const{forMs:n}=r(219),i=r(101).BigNumber;t.exports=class{constructor(t){this._eos=t}async getInfo(){return await this._eos.getInfo({})}async getBlock(t){let e={block_num_or_id:t};return await this._eos.getBlock(e)}async getContract(t){return await this._eos.contract(t)}async getAbi(t){return await this._eos.getAbi(t)}async getTableAbi(t,e){return(await this.getAbi(t)).abi.tables.find(t=>t.name===e)}async abiJsonToBin(t,e,r){let n={code:t,action:e,args:r};return(await this._eos.abiJsonToBin(n)).binargs}async getAccountInfo(t){return await this._eos.getAccount({account_name:t})}async getActionCount(t){let e=await this.getRecentActions(t);if(!e||!e.actions)throw new Error(`getActionCount failed: cannot find recent actions of ${t})`);let r=e.actions;return 0===r.length?0:[r.length-1].account_action_seq}async getRecentActions(t){return await this._eos.getActions({account_name:t})}async getActions(t,e=0,r=0){let n=e,i=e+r,u=[];for(;;){let e=await this._eos.getActions({account_name:t,pos:n,offset:i-n});if(!e||!e.actions)throw new Error(`getActions failed: cannot find actions of ${t} (pos:${n}, offset:${r})`);let o=e.actions;console.log("getActions find",o[o.length-1]);let s=0===o.length?n:o[o.length-1].account_action_seq;if(s<=n)break;if(u.push(...o),s>=i)break;n=s+1}return u}async getBalance(t,e="eosio.token"){let r=await this._eos.getCurrencyBalance(e,t);return r[0]?r[0].trim():null}async waitTx(t,e=12,r=1009){const n=async(t,i=0)=>{try{const e=await this._eos.getTransaction(t);if(e)return e}catch(e){console.log(`wait tx ${t}, retry round: ${i}. ${e.message}`)}return i>=e?(console.error("wait tx failed, round out."),null):(await(t=>new Promise(e=>setTimeout(e,t)))(r),n(t,i+1))};return await n(t)}async call(t,e,r,...n){return await this._eos.transaction({actions:[{account:t,name:e,authorization:n,data:r}]})}async getTable(t,e,r,u,o,...s){u=i(u||0),o=i(o&&-1!==o?o:"18446744073709551615");let a=[],f=[];const c=(n,i)=>{if(console.log("search ",Date.now(),n.toFixed(0),i.toFixed(0)),n.gte(i))return;let u=this._eos.getTableRows({json:!0,code:t,scope:r,table:e,limit:-1,lower_bound:n.toFixed(0),upper_bound:i.toFixed(0)}).then(t=>{let e=f.findIndex(t=>t===u);if(f.splice(e,1),t)if(t.more){let t=i.minus(n).dividedBy(2).decimalPlaces(0).plus(n);c(n,t.minus(1)),c(t,i)}else t.rows&&a.push(...t.rows)}).catch(t=>{let e=f.find(t=>t===u);throw f.splice(e,1),t});f.push(u)};for(!s||s.length<=0?c(u,o):[...s.map(t=>i(t)),o].reduce((t,e)=>(c(t,e),e),u);f.length>0;)await n(50);return console.log("done search ",Date.now(),u.toFixed(0),o.toFixed(0)),a}async checkTable(t,e,r,n=10,u=0,o=-1,s=1){console.log("search ",Date.now(),u,o,n);let a=await this._eos.getTableRows({json:!0,code:t,scope:r,table:e,limit:n,lower_bound:u,upper_bound:o,index_position:s}),f=a&&a.rows?a.rows:[];if(a.more&&(n<=0||a.rows&&a.rows.length<n)){let u=(await this.getTableAbi(t,e)).key_names[0],a=f[f.length-1][u];return f.concat(await this.checkTable(t,e,r,n-f.length,i(a).plus(1).toFixed(0),o,s))}return f}async checkTableRange(t,e,r,n,i=1,u=1){if(i<0)throw new Error(`range error: length(${i}) must larger than 0 `);return await this.checkTable(t,e,r,i,n,"number"==typeof n?n+i:-1,u)}async checkTableItem(t,e,r,n=0){return(await this.checkTableRange(t,e,r,n,1))[0]}get help(){return'\n### Chain API\n\n```js\n{Object} async getInfo() // get info of the chain connected\n{Object} async getBlock(blockNumOrId) // get specific block of the chain\n\n{Contract} async getContract(code) // get contract\n{Object} async getAbi(code) // get abi of contract\n{Object} async getTableAbi(code, tableName) // get table abi of contract\n{Object} async abiJsonToBin(code, action, args) \n\n{Object} async getAccountInfo(account_name) // get account info of any user\n\n{Number} async getActionCount(account_name) // get a account\'s action count\n{Array} async getRecentActions(account_name) // get recent actions\n{Array} async getActions(account_name, startPos = 0, offset = 0) // get all actions of an account\n\n{String} async getBalance(account_name, code = "eosio.token") // get balance of specific account\n\n{Tx} async waitTx(txID, maxRound = 12, timeSpanMS = 1009) // check a transaction info, retry once per sec until success\n\n{Tx} async call(code, func, jsonData, ...authorization) // send action to a contract\n\n{Array} async getTable(code, tableName, scope, lower, upper, ...hint) // get all items in a table\n{Array} async checkTable(code, tableName, scope, limit = 10, lower_bound = 0, upper_bound = -1, index_position = 1) // check a table\n{Array} async checkTableRange(code, tableName, scope, from, length = 1, index_position = 1) // check range in table\n{Object} async checkTableItem(code, tableName, scope, key = 0) // check a item in a table\n```   \n'}}},function(t,e){t.exports={forMs:t=>new Promise(e=>{setTimeout(e,t)})}},function(t,e,r){"use strict";t.exports=class{get eosClient(){throw new Error("method not yet implemented: this interface should be implement by the specific class.")}async getIdentity(){throw new Error("method not yet implemented: this interface should be implement by the specific class.")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmlnaS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ieXRlYnVmZmVyL2Rpc3QvYnl0ZWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9rZXlfcHVibGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2tleV91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIva2V5X3ByaXZhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZDUuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjdXJ2ZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZjYnVmZmVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMvbGliL3N0cnVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9hZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbWJ5dGVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2luY3IzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYXV0aENpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvc3RyZWFtQ2lwaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdpL2xpYi9iaWdpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL2N1cnZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yaXBlbWQxNjAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvZW5mb3JjZV90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9wcm9jZXNzLWFyZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvZm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdudW1iZXIuanMvYmlnbnVtYmVyLmpzIiwid2VicGFjazovLy8uL3NjYXR0ZXJCaW5kZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lkYi9saWIvaWRiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9hcGlfY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvbmcvZGlzdC9sb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9lbmNyeXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2VjYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2JjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9kdXBsZXgtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9naGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZGVjcnlwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JpZ2kvbGliL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VjdXJ2ZS9saWIvbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjI0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMzg0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9sZWdhY3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL21kNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnM1OC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZS14L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL3Byb21pc2UtYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvZWNkc2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvZWNzaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvYXBpX29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmNidWZmZXIvbGliL3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZS1mbG9hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmNidWZmZXIvbGliL2ZjYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mY2J1ZmZlci9saWIvc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1hcGkvbGliL2FwaS92MS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9hcGlnZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FtZWwtY2FzZS9jYW1lbC1jYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cHBlci1jYXNlL3VwcGVyLWNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vLWNhc2Uvbm8tY2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG93ZXItY2FzZS9sb3dlci1jYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uby1jYXNlL3ZlbmRvci9ub24td29yZC1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vLWNhc2UvdmVuZG9yL2NhbWVsLWNhc2UtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uby1jYXNlL3ZlbmRvci9jYW1lbC1jYXNlLXVwcGVyLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9leHBvcnRlZC1oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMvbGliL2FiaS1jYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMvbGliL3dyaXRlLWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9zY2F0dGVyQmluZGVyL2NvbmYuanMiLCJ3ZWJwYWNrOi8vLy4vc2NhdHRlckJpbmRlci9zY2F0dGVyUGxheWVyLmpzIiwid2VicGFjazovLy8uL3NjYXR0ZXJCaW5kZXIvZGIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXNzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2V2ZW50SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9jaGFpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvd2FpdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZW9zUHJvdmlkZXIuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJidWZmZXIiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsImZyb20iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiYWxsb2NVbnNhZmVTbG93IiwiVHlwZUVycm9yIiwic2l6ZSIsImZpbGwiLCJlbmNvZGluZyIsImJ1ZiIsInVuZGVmaW5lZCIsIlNsb3dCdWZmZXIiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIiwiZ2xvYmFsIiwiYmFzZTY0IiwiaWVlZTc1NCIsImlzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIl9fcHJvdG9fXyIsInRoaXMiLCJFcnJvciIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJvYmoiLCJpc0J1ZmZlciIsImxlbiIsImNoZWNrZWQiLCJjb3B5IiwidmFsIiwiaXNuYW4iLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwidG9TdHJpbmciLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic3dhcCIsImIiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJzdHIiLCJieXRlQXJyYXkiLCJwdXNoIiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwic3RhcnQiLCJlbmQiLCJmcm9tQnl0ZUFycmF5IiwidXRmOFNsaWNlIiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJlIiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiYXJndW1lbnRzIiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJqb2luIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJBcnJheSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4IiwiZmxvb3IiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInRyaW0iLCJyZXBsYWNlIiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwidXRpbCIsImhhc093biIsInBTbGljZSIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsInBUb1N0cmluZyIsImFycmJ1ZiIsIkRhdGFWaWV3IiwiYXNzZXJ0Iiwib2siLCJyZWdleCIsImdldE5hbWUiLCJmdW5jIiwiaXNGdW5jdGlvbiIsInRydW5jYXRlIiwic29tZXRoaW5nIiwicmF3bmFtZSIsImZhaWwiLCJleHBlY3RlZCIsIm1lc3NhZ2UiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGdW5jdGlvbiIsIkFzc2VydGlvbkVycm9yIiwiX2RlZXBFcXVhbCIsInN0cmljdCIsIm1lbW9zIiwiaXNEYXRlIiwiZ2V0VGltZSIsImlzUmVnRXhwIiwic291cmNlIiwibXVsdGlsaW5lIiwibGFzdEluZGV4IiwiaWdub3JlQ2FzZSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImFjdHVhbEluZGV4IiwiYWN0dWFsVmlzaXRlZE9iamVjdHMiLCJpc1ByaW1pdGl2ZSIsImdldFByb3RvdHlwZU9mIiwiYUlzQXJncyIsImlzQXJndW1lbnRzIiwiYklzQXJncyIsImthIiwib2JqZWN0S2V5cyIsImtiIiwic29ydCIsIm9iakVxdWl2IiwiZXhwZWN0ZWRFeGNlcHRpb24iLCJ0ZXN0IiwiaXNQcm90b3R5cGVPZiIsIl90aHJvd3MiLCJzaG91bGRUaHJvdyIsImJsb2NrIiwiZXJyb3IiLCJfdHJ5QmxvY2siLCJ1c2VyUHJvdmlkZWRNZXNzYWdlIiwiaXNVbndhbnRlZEV4Y2VwdGlvbiIsImlzRXJyb3IiLCJpc1VuZXhwZWN0ZWRFeGNlcHRpb24iLCJvcHRpb25zIiwiZ2VuZXJhdGVkTWVzc2FnZSIsInNlbGYiLCJnZXRNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJlcnIiLCJzdGFjayIsImZuX25hbWUiLCJpZHgiLCJuZXh0X2xpbmUiLCJzdWJzdHJpbmciLCJpbmhlcml0cyIsImVxdWFsIiwibm90RXF1YWwiLCJkZWVwRXF1YWwiLCJkZWVwU3RyaWN0RXF1YWwiLCJub3REZWVwRXF1YWwiLCJub3REZWVwU3RyaWN0RXF1YWwiLCJzdHJpY3RFcXVhbCIsIm5vdFN0cmljdEVxdWFsIiwidGhyb3dzIiwiZG9lc05vdFRocm93IiwiaWZFcnJvciIsImtleXMiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJnIiwiRnVuY3Rpb24iLCJldmFsIiwid2luZG93IiwiX19nIiwiQmlnSW50ZWdlciIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiaXQiLCJUcmFuc2Zvcm0iLCJTdHJpbmdEZWNvZGVyIiwiQ2lwaGVyQmFzZSIsImhhc2hNb2RlIiwiX2ZpbmFsT3JEaWdlc3QiLCJmaW5hbCIsIl9maW5hbCIsIl9fZmluYWwiLCJfZGVjb2RlciIsIl9lbmNvZGluZyIsInVwZGF0ZSIsImlucHV0RW5jIiwib3V0cHV0RW5jIiwib3V0RGF0YSIsIl91cGRhdGUiLCJfdG9TdHJpbmciLCJzZXRBdXRvUGFkZGluZyIsImdldEF1dGhUYWciLCJzZXRBdXRoVGFnIiwic2V0QUFEIiwiX3RyYW5zZm9ybSIsIl8iLCJuZXh0IiwiX2ZsdXNoIiwiZG9uZSIsImVuYyIsImZpbiIsInBuYSIsIkR1cGxleCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm5leHRUaWNrIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY2IiLCJjcmVhdGVIYXNoIiwiY3JlYXRlSG1hYyIsInNoYTEiLCJyZXN1bHRFbmNvZGluZyIsImRpZ2VzdCIsInNoYTI1NiIsInNoYTUxMiIsIkhtYWNTSEEyNTYiLCJzZWNyZXQiLCJyaXBlbWQxNjAiLCJkUCIsImNyZWF0ZURlc2MiLCJmIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiSU9iamVjdCIsImRlZmluZWQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJhcmdzIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIkxvbmciLCJCeXRlQnVmZmVyIiwiY2FwYWNpdHkiLCJERUZBVUxUX0NBUEFDSVRZIiwiREVGQVVMVF9FTkRJQU4iLCJERUZBVUxUX05PQVNTRVJUIiwiRU1QVFlfQlVGRkVSIiwidmlldyIsIm1hcmtlZE9mZnNldCIsIlZFUlNJT04iLCJMSVRUTEVfRU5ESUFOIiwiQklHX0VORElBTiIsIkJ5dGVCdWZmZXJQcm90b3R5cGUiLCJfX2lzQnl0ZUJ1ZmZlcl9fIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwic3RyaW5nU291cmNlIiwic3RyaW5nRGVzdGluYXRpb24iLCJjcyIsInBzIiwiaWVlZTc1NF9yZWFkIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJpZWVlNzU0X3dyaXRlIiwicnQiLCJhYnMiLCJsb2ciLCJMTjIiLCJhY2Nlc3NvciIsImFsbG9jYXRlIiwiYnVmZmVycyIsImsiLCJpc0J5dGVCdWZmZXIiLCJ3cmFwIiwiYmkiLCJiYiIsImZyb21CYXNlNjQiLCJmcm9tSGV4IiwiZnJvbUJpbmFyeSIsImZyb21VVEY4IiwiZnJvbURlYnVnIiwiY2xvbmUiLCJ3cml0ZUJpdFNldCIsInJlbGF0aXZlIiwiYml0cyIsImJpdCIsIndyaXRlVmFyaW50MzIiLCJ3cml0ZUJ5dGUiLCJyZWFkQml0U2V0IiwicmVhZFZhcmludDMyIiwicmVhZEJ5dGUiLCJyZWFkQnl0ZXMiLCJ3cml0ZUJ5dGVzIiwiYXBwZW5kIiwiY2FwYWNpdHkwIiwicmVzaXplIiwid3JpdGVVaW50OCIsImNhcGFjaXR5MSIsInJlYWRVaW50OCIsIndyaXRlSW50MTYiLCJjYXBhY2l0eTIiLCJ3cml0ZVNob3J0IiwicmVhZEludDE2IiwicmVhZFNob3J0Iiwid3JpdGVVaW50MTYiLCJjYXBhY2l0eTMiLCJ3cml0ZVVJbnQxNiIsInJlYWRVaW50MTYiLCJyZWFkVUludDE2Iiwid3JpdGVJbnQzMiIsImNhcGFjaXR5NCIsIndyaXRlSW50IiwicmVhZEludDMyIiwicmVhZEludCIsIndyaXRlVWludDMyIiwiY2FwYWNpdHk1Iiwid3JpdGVVSW50MzIiLCJyZWFkVWludDMyIiwicmVhZFVJbnQzMiIsIndyaXRlSW50NjQiLCJmcm9tTnVtYmVyIiwiY2FwYWNpdHk2IiwibG93IiwiaGlnaCIsIndyaXRlTG9uZyIsInJlYWRJbnQ2NCIsInJlYWRMb25nIiwid3JpdGVVaW50NjQiLCJjYXBhY2l0eTciLCJ3cml0ZVVJbnQ2NCIsInJlYWRVaW50NjQiLCJyZWFkVUludDY0Iiwid3JpdGVGbG9hdDMyIiwiY2FwYWNpdHk4IiwicmVhZEZsb2F0MzIiLCJyZWFkRmxvYXQiLCJ3cml0ZUZsb2F0NjQiLCJjYXBhY2l0eTkiLCJyZWFkRmxvYXQ2NCIsInJlYWREb3VibGUiLCJNQVhfVkFSSU5UMzJfQllURVMiLCJjYWxjdWxhdGVWYXJpbnQzMiIsInppZ1phZ0VuY29kZTMyIiwiemlnWmFnRGVjb2RlMzIiLCJjYXBhY2l0eTEwIiwid3JpdGVWYXJpbnQzMlppZ1phZyIsInJlYWRWYXJpbnQzMlppZ1phZyIsIk1BWF9WQVJJTlQ2NF9CWVRFUyIsImNhbGN1bGF0ZVZhcmludDY0IiwicGFydDAiLCJ0b0ludCIsInBhcnQxIiwic2hpZnRSaWdodFVuc2lnbmVkIiwicGFydDIiLCJ6aWdaYWdFbmNvZGU2NCIsInVuc2lnbmVkIiwidG9TaWduZWQiLCJzaGlmdExlZnQiLCJ4b3IiLCJzaGlmdFJpZ2h0IiwidG9VbnNpZ25lZCIsInppZ1phZ0RlY29kZTY0IiwiYW5kIiwiT05FIiwibmVnYXRlIiwid3JpdGVWYXJpbnQ2NCIsImNhcGFjaXR5MTEiLCJ3cml0ZVZhcmludDY0WmlnWmFnIiwicmVhZFZhcmludDY0IiwiZnJvbUJpdHMiLCJyZWFkVmFyaW50NjRaaWdaYWciLCJ3cml0ZUNTdHJpbmciLCJ1dGZ4IiwiY2FsY3VsYXRlVVRGMTZhc1VURjgiLCJjYXBhY2l0eTEyIiwiZW5jb2RlVVRGMTZ0b1VURjgiLCJyZWFkQ1N0cmluZyIsInNkIiwiZGVjb2RlVVRGOHRvVVRGMTYiLCJ3cml0ZUlTdHJpbmciLCJjYXBhY2l0eTEzIiwicmVhZElTdHJpbmciLCJyZWFkVVRGOFN0cmluZyIsIk1FVFJJQ1NfQllURVMiLCJNRVRSSUNTX0NIQVJTIiwid3JpdGVVVEY4U3RyaW5nIiwiY2FwYWNpdHkxNCIsIndyaXRlU3RyaW5nIiwiY2FsY3VsYXRlVVRGOENoYXJzIiwiY2FsY3VsYXRlVVRGOEJ5dGVzIiwiY2FsY3VsYXRlU3RyaW5nIiwibWV0cmljcyIsImRlY29kZVVURjgiLCJjcCIsIlVURjh0b1VURjE2IiwicmVhZFN0cmluZyIsIndyaXRlVlN0cmluZyIsImNhcGFjaXR5MTUiLCJyZWFkVlN0cmluZyIsImNhcGFjaXR5MTYiLCJhcHBlbmRUbyIsImNsZWFyIiwiY29tcGFjdCIsImJlZ2luIiwiY29weVRvIiwidGFyZ2V0T2Zmc2V0Iiwic291cmNlT2Zmc2V0Iiwic291cmNlTGltaXQiLCJ0YXJnZXRSZWxhdGl2ZSIsImVuc3VyZUNhcGFjaXR5IiwiY3VycmVudCIsImZsaXAiLCJtYXJrIiwib3JkZXIiLCJMRSIsIkJFIiwiYmlnRW5kaWFuIiwicHJlcGVuZCIsImRpZmYiLCJwcmVwZW5kVG8iLCJwcmludERlYnVnIiwiY29uc29sZSIsInRvRGVidWciLCJyZXNldCIsInJldmVyc2UiLCJza2lwIiwidG9CdWZmZXIiLCJmb3JjZUNvcHkiLCJ0b0FycmF5QnVmZmVyIiwidG9VVEY4IiwidG9CYXNlNjQiLCJ0b0JpbmFyeSIsInRvQ29sdW1ucyIsImx4aXYiLCJhb3V0IiwiYWluIiwiZW5jb2RlIiwiZGVjb2RlIiwidDEiLCJ0MiIsImJ0b2EiLCJhdG9iIiwiYjY0IiwiY2hhcnMiLCJwYXJ0cyIsImNoYXJDb2RlIiwiY29sdW1ucyIsImhleCIsImFzYyIsInRvVXBwZXJDYXNlIiwiY2giLCJycyIsImhvIiwiaG0iLCJobCIsImNoYXJBdCIsIk1BWF9DT0RFUE9JTlQiLCJlbmNvZGVVVEY4IiwiVVRGMTZ0b1VURjgiLCJjMSIsImMyIiwiY2FsY3VsYXRlQ29kZVBvaW50IiwiY2FsY3VsYXRlVVRGOCIsIkhhc2giLCJibG9ja1NpemUiLCJmaW5hbFNpemUiLCJfYmxvY2siLCJfZmluYWxTaXplIiwiX2Jsb2NrU2l6ZSIsIl9sZW4iLCJhY2N1bSIsImFzc2lnbmVkIiwicmVtYWluZGVyIiwicmVtIiwibG93Qml0cyIsImhpZ2hCaXRzIiwiaGFzaCIsIl9oYXNoIiwiX2l0ZXJhdG9yMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc3ltYm9sMiIsIl90eXBlb2YiLCJkZWZhdWx0IiwiaXNPYmplY3QiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJyZSIsIl9zbGljZWRUb0FycmF5IiwiaXRlcmF0b3IiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwic2xpY2VJdGVyYXRvciIsImVjdXJ2ZSIsInNlY3AyNTZrMSIsImdldEN1cnZlQnlOYW1lIiwia2V5VXRpbHMiLCJHIiwiUHVibGljS2V5IiwiUSIsInB1YmtleV9wcmVmaXgiLCJwdWJsaWNLZXkiLCJmcm9tQnVmZmVyIiwiY29tcHJlc3NlZCIsImdldEVuY29kZWQiLCJjaGVja0VuY29kZSIsInRvVW5jb21wcmVzc2VkIiwicG9pbnQiLCJQb2ludCIsImRlY29kZUZyb20iLCJmcm9tUG9pbnQiLCJjaGlsZCIsImNvbXBhcmVUbyIsImNHIiwibXVsdGlwbHkiLCJRcHJpbWUiLCJhZGQiLCJpc0luZmluaXR5IiwiaXNWYWxpZCIsInB1YmtleSIsImJpbiIsInB1YmxpY19rZXkiLCJmcm9tU3RyaW5nT3JUaHJvdyIsIlJlZ0V4cCIsImNoZWNrRGVjb2RlIiwiX21hdGNoIiwia2V5VHlwZSIsImtleVN0cmluZyIsImZyb21TdHJpbmdIZXgiLCJiYXNlNTgiLCJyYW5kb21CeXRlcyIsInJhbmRvbTMyQnl0ZUJ1ZmZlciIsIl9yZWYiLCJfcmVmJGNwdUVudHJvcHlCaXRzIiwiY3B1RW50cm9weUJpdHMiLCJfcmVmJHNhZmUiLCJzYWZlIiwiX2VudHJvcHlDb3VudCIsImhhc2hfYXJyYXkiLCJjcHVFbnRyb3B5IiwiZXh0ZXJuYWxFbnRyb3B5QXJyYXkiLCJlbnRyb3B5U3RyIiwiRGF0ZSIsInNjcmVlbiIsImhlaWdodCIsIndpZHRoIiwiY29sb3JEZXB0aCIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsInBpeGVsRGVwdGgiLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsImxvY2F0aW9uIiwiaGlzdG9yeSIsIm1pbWVUeXBlIiwibWltZVR5cGVzIiwiZGVzY3JpcHRpb24iLCJzdWZmaXhlcyIsImVudHJvcHkiLCJzdGFydF90Iiwibm93IiwiYnJvd3NlckVudHJvcHkiLCJhZGRFbnRyb3B5IiwiaW50cyIsIl9rZXkiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiZW50cm9weVBvcyIsImkyIiwicmV0dXJuIiwiZW50cm9weUNvdW50IiwiY2hlY2tzdW0iLCJuZXdDaGVjayIsImNoZWNrIiwia2V5QnVmZmVyIiwiX2NoZWNrc3VtIiwiY29sbGVjdGVkIiwibGFzdENvdW50IiwibG93RW50cm9weVNhbXBsZXMiLCJjb3VudCIsImZsb2F0aW5nUG9pbnRDb3VudCIsImRlbHRhIiwibG9nMiIsInBjdCIsInRvRml4ZWQiLCJ3YXJuIiwic2luIiwic3FydCIsImV4ZWMiLCJiaXRtYXAiLCJpZCIsInB4IiwicmFuZG9tIiwiYXNVSW50MzJBcnJheSIsInNjcnViVmVjIiwiY3J5cHRCbG9jayIsIk0iLCJrZXlTY2hlZHVsZSIsIlNVQl9NSVgiLCJTQk9YIiwiblJvdW5kcyIsInQwIiwidDMiLCJTVUJfTUlYMCIsIlNVQl9NSVgxIiwiU1VCX01JWDIiLCJTVUJfTUlYMyIsInMwIiwiczEiLCJzMiIsInMzIiwia3NSb3ciLCJyb3VuZCIsIlJDT04iLCJJTlZfU0JPWCIsIklOVl9TVUJfTUlYIiwieGkiLCJzeCIsIngyIiwieDQiLCJ4OCIsIkFFUyIsIl9yZXNldCIsImtleVNpemUiLCJrZXlXb3JkcyIsImtzUm93cyIsImludktleVNjaGVkdWxlIiwiaWsiLCJrc1IiLCJ0dCIsIl9uUm91bmRzIiwiX2tleVNjaGVkdWxlIiwiX2ludktleVNjaGVkdWxlIiwiZW5jcnlwdEJsb2NrUmF3IiwiZW5jcnlwdEJsb2NrIiwiZGVjcnlwdEJsb2NrIiwibTEiLCJzY3J1YiIsImZuIiwiYXJnMSIsImFyZzIiLCJhcmczIiwicHJvbWlzZUFzeW5jIiwiUHJpdmF0ZUtleSIsImlzQmlnSW50ZWdlciIsInRvV2lmIiwicHJpdmF0ZV9rZXkiLCJ0b1B1YmxpYyIsImdldFNoYXJlZFNlY3JldCIsIktCIiwiS0JQIiwiZnJvbUFmZmluZSIsIlMiLCJhZmZpbmVYIiwiZ2V0Q2hpbGRLZXkiLCJwYXJzZUtleSIsInByaXZhdGVTdHIiLCJ2ZXJzaW9uS2V5IiwicHJpdmF0ZUtleSIsImZvcm1hdCIsImZyb21TZWVkIiwic2VlZCIsImlzV2lmIiwidGV4dCIsImZyb21XaWYiLCJyYW5kb21LZXkiLCJpbml0aWFsaXplIiwidGhlbiIsInVuc2FmZVJhbmRvbUtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaW5pdGlhbGl6ZWQiLCJwdnQiLCJwdnRFcnJvciIsInB1YiIsInVuaXRUZXN0IiwiYXJyMiIsIl90b0NvbnN1bWFibGVBcnJheSIsIm1zZyIsIiRhdCIsIml0ZXJhdGVkIiwiX3QiLCJpbmRleCIsImNlaWwiLCJ2YWx1ZU9mIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsInNoYXJlZCIsImNvcHlyaWdodCIsInNwbGl0IiwiZGVmIiwiaGFzIiwiVEFHIiwidGFnIiwic3RhdCIsImhpZGUiLCJJdGVyYXRvcnMiLCJUT19TVFJJTkdfVEFHIiwiRE9NSXRlcmFibGVzIiwiTkFNRSIsIkNvbGxlY3Rpb24iLCJwcm90byIsIkxJQlJBUlkiLCJ3a3NFeHQiLCIkU3ltYm9sIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjb21tb25BcGkiLCJvYmplY3RBcGkiLCJlY2MiLCJhc3NpZ24iLCJFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJzZXRNYXhMaXN0ZW5lcnMiLCJlciIsImhhbmRsZXIiLCJjb250ZXh0IiwibGlzdGVuZXIiLCJuZXdMaXN0ZW5lciIsIndhcm5lZCIsInRyYWNlIiwiZmlyZWQiLCJwb3NpdGlvbiIsInNwbGljZSIsImxpc3RlbmVyQ291bnQiLCJldmxpc3RlbmVyIiwiZW1pdHRlciIsIlN0cmVhbSIsIlBhc3NUaHJvdWdoIiwic2V0SW1tZWRpYXRlIiwiQ29ya2VkUmVxdWVzdCIsInN0YXRlIiwiX3RoaXMiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJjYWxsYmFjayIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsIldyaXRhYmxlU3RhdGUiLCJpbnRlcm5hbFV0aWwiLCJkZXByZWNhdGUiLCJPdXJVaW50OEFycmF5IiwicmVhbEhhc0luc3RhbmNlIiwiZGVzdHJveUltcGwiLCJub3AiLCJzdHJlYW0iLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRlc3Ryb3kiLCJkb1dyaXRlIiwiY2h1bmsiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiZ2V0QnVmZmVyIiwiaGFzSW5zdGFuY2UiLCJwaXBlIiwiX2lzVWludDhBcnJheSIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWQiLCJ2YWxpZENodW5rIiwibmV3Q2h1bmsiLCJkZWNvZGVDaHVuayIsImxhc3QiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsIm5iIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiSGFzaEJhc2UiLCJBUlJBWTE2IiwiTUQ1IiwiX2EiLCJfYiIsIl9jIiwicm90bCIsImZuRiIsImZuRyIsImZuSCIsImZuSSIsIl9kaWdlc3QiLCJfYmxvY2tPZmZzZXQiLCJfbGVuZ3RoIiwiQ3VydmUiLCJSSVBFTUQxNjAiLCJzaGEiLCJCYXNlIiwiYWxnIiwiVHlwZXMiLCJGY2J1ZmZlciIsImRlZmluaXRpb25zIiwiY29uZmlnIiwiY3VzdG9tVHlwZXMiLCJ0eXBlcyIsIl9jcmVhdGUiLCJlcnJvcnMiLCJzdHJ1Y3RzIiwiZXh0ZW5kIiwiX2V4dGVuZCIsInBhcmVudCIsImNvbWJpbmVkIiwiX2NyZWF0ZTIiLCJ0eXBlTmFtZSIsIl9zbGljZWRUb0FycmF5MyIsIl90eXBlb2YzIiwiX3JlcXVpcmUiLCJTaWduYXR1cmUiLCJzY2hlbWEiLCJfcmVxdWlyZTIiLCJlbmNvZGVOYW1lIiwiaXNOYW1lIiwiZGVjb2RlTmFtZSIsIkRlY2ltYWxQYWQiLCJEZWNpbWFsSW1wbHkiLCJEZWNpbWFsVW5pbXBseSIsInByaW50QXNzZXQiLCJwYXJzZUFzc2V0IiwiZXh0ZW5kZWRTY2hlbWEiLCJzdHJ1Y3RMb29rdXAiLCJsb29rdXBOYW1lIiwiYWNjb3VudCIsImNhY2hlIiwiYWJpQ2FjaGUiLCJhYmkiLCJhY3Rpb25zIiwiYWN0aW9uIiwiX3N0cnVjdCIsInN0cnVjdCIsImZvcmNlQWN0aW9uRGF0YUhleCIsIm92ZXJyaWRlIiwiYXV0aG9yaXR5T3ZlcnJpZGUiLCJhYmlPdmVycmlkZSIsIndhc21Db2RlT3ZlcnJpZGUiLCJhY3Rpb25EYXRhT3ZlcnJpZGUiLCJlb3NUeXBlcyIsIk5hbWUiLCJ2YXJpYW50IiwiUHVibGljS2V5RWNjIiwic3ltYm9sIiwiX1N5bWJvbCIsInN5bWJvbF9jb2RlIiwiU3ltYm9sQ29kZSIsImV4dGVuZGVkX3N5bWJvbCIsIkV4dGVuZGVkU3ltYm9sIiwiYXNzZXQiLCJBc3NldCIsImV4dGVuZGVkX2Fzc2V0IiwiRXh0ZW5kZWRBc3NldCIsInNpZ25hdHVyZSIsIlNpZ25hdHVyZVR5cGUiLCJmdWxsU2NoZW1hIiwiX0ZjYnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInZhbGlkYXRpb24iLCJmcm9tQnl0ZUJ1ZmZlciIsImFwcGVuZEJ5dGVCdWZmZXIiLCJ0b09iamVjdCIsImRlZmF1bHRzIiwidmFyaWFudEFycmF5IiwiYmFzZVR5cGVzIiwidmFyaWFudHMiLCJtYXAiLCJUeXBlIiwic3RhdGljVmFyaWFudCIsInN0YXRpY192YXJpYW50IiwiYmNvcHkiLCJwdWJidWYiLCJrZXlQcmVmaXgiLCJwcmVjaXNpb24iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9wYXJzZUFzc2V0IiwicGFkIiwicmVwZWF0IiwiX3BhcnNlQXNzZXQyIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMiLCJfZGlkSXRlcmF0b3JFcnJvcjMiLCJfaXRlcmF0b3JFcnJvcjMiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwic3ltYm9sVHlwZSIsImNvbnRyYWN0TmFtZSIsIl92YWx1ZSRzcGxpdCIsIl92YWx1ZSRzcGxpdDIiLCJjb250cmFjdCIsImFtb3VudFR5cGUiLCJpbnQ2NCIsImFtb3VudCIsInN5bSIsIl9wYXJzZUFzc2V0NSIsIl9wYXJzZUFzc2V0NiIsIl9wYXJzZUFzc2V0NyIsIl9wYXJzZUFzc2V0OCIsImFzc2V0VHlwZSIsIl9hc3NldCRzcGxpdCIsInNpZ25hdHVyZVR5cGUiLCJmaXhlZF9ieXRlczY1Iiwic2lnbmF0dXJlQnVmZmVyIiwiYXV0aG9yaXR5LmZyb21PYmplY3QiLCJ0aHJlc2hvbGQiLCJ3ZWlnaHQiLCJfdmFsdWUkc3BsaXQzIiwiX3ZhbHVlJHNwbGl0NCIsIl92YWx1ZSRzcGxpdDQkIiwiYWNjb3VudHMiLCJwZXJtaXNzaW9uIiwiYWN0b3IiLCJhYmlfZGVmLmZyb21PYmplY3QiLCJqc29uIiwicGFyc2UiLCJzZXRhYmkuYWJpLmFwcGVuZEJ5dGVCdWZmZXIiLCJmaWVsZHMiLCJzZXIiLCJiMiIsInNldGNvZGUuY29kZS5mcm9tT2JqZWN0IiwiX3JlZjIiLCJyZXN1bHQiLCJiaW5hcnllbiIsImRlYnVnIiwid2FzbSIsInBhcnNlVGV4dCIsImVtaXRCaW5hcnkiLCJhY3Rpb24uZGF0YS5mcm9tQnl0ZUJ1ZmZlciIsIl9yZWYzIiwibGVuUHJlZml4IiwiYkNvcHkiLCJhY3Rpb24uZGF0YS5hcHBlbmRCeXRlQnVmZmVyIiwiX3JlZjQiLCJhY3Rpb24uZGF0YS5mcm9tT2JqZWN0IiwiX3JlZjUiLCJhY3Rpb24uZGF0YS50b09iamVjdCIsIl9yZWY2IiwiX3JlZjciLCJfaXNJdGVyYWJsZTMiLCJfZ2V0SXRlcmF0b3IzIiwiX3JlZ2VuZXJhdG9yMiIsIkVvc0FwaSIsIlN0cnVjdHMiLCJBYmlDYWNoZSIsIndyaXRlQXBpR2VuIiwidG9rZW4iLCJzeXN0ZW0iLCJlb3Npb19udWxsIiwiRW9zIiwiY29uZmlnRGVmYXVsdHMiLCJodHRwRW5kcG9pbnQiLCJ2ZXJib3NlIiwiYnJvYWRjYXN0IiwibG9nZ2VyIiwiX2NvbnNvbGUiLCJfY29uc29sZTIiLCJzaWduIiwiYXBwbHlEZWZhdWx0cyIsImZvckVhY2giLCJuZXR3b3JrIiwiYWJpcyIsImNoYWluSWQiLCJnZXRJbmZvIiwiaW5mbyIsImNoYWluX2lkIiwiY2F0Y2giLCJjaGVja0NoYWluSWQiLCJtb2NrVHJhbnNhY3Rpb25zIiwibW9jayIsIl9TdHJ1Y3RzIiwiZW9zIiwibWVyZ2UiLCJ3cml0ZUFwaSIsIm8xIiwibzIiLCJ0aHJvd09uRHVwbGljYXRlIiwibWVyZ2VXcml0ZUZ1bmN0aW9ucyIsInJlYWRPbmx5IiwiU2V0IiwicmVhZFdyaXRlIiwicHJvdGVjdGVkQ29uZmlnIiwic2FmZUNvbmZpZyIsImZjIiwic2lnblByb3ZpZGVyIiwiZGVmYXVsdFNpZ25Qcm92aWRlciIsImNyZWF0ZUVvcyIsImFwaSIsIlRlc3RuZXQiLCJMb2NhbG5ldCIsImtleVByb3ZpZGVyIiwic2lncyIsImtleU1hcCIsImlzUHJpdmF0ZSIsInB1YmtleXMiLCJ0cmFuc2FjdGlvbiIsIm9wdGlvbnNLZXlQcm92aWRlciIsImFzeW5jIiwiX2NvbnRleHQiLCJwcmV2IiwiYXdyYXAiLCJzZW50IiwicHJpdmF0ZSIsInB1YmxpYyIsImFicnVwdCIsIk1hcCIsInByaXZhdGVUb1B1YmxpYyIsImdldFJlcXVpcmVkS2V5cyIsInJlcXVpcmVkX2tleXMiLCJwdnRzIiwibWlzc2luZ0tleXMiLCJyZXF1aXJlZEtleSIsIndpZiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240IiwiX2RpZEl0ZXJhdG9yRXJyb3I0IiwiX2l0ZXJhdG9yRXJyb3I0IiwiX3N0ZXA0IiwiX2l0ZXJhdG9yNCIsIl9wdnQiLCJzdG9wIiwiJGV4cG9ydCIsInJlZGVmaW5lIiwiJGl0ZXJDcmVhdGUiLCJzZXRUb1N0cmluZ1RhZyIsIklURVJBVE9SIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsIkYiLCJjdHgiLCJvd24iLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsIkMiLCJ2aXJ0dWFsIiwiUiIsIlUiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJ0b0lPYmplY3QiLCJuYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY3J5cHRvIiwiY3J5cHQiLCJub25jZSIsInRvTG9uZ09iaiIsImVidWYiLCJlbmNyeXB0aW9uX2tleSIsIml2IiwidG9CaW5hcnlCdWZmZXIiLCJkZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJjcnlwdG9Kc0RlY3J5cHQiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsImNyeXB0b0pzRW5jcnlwdCIsImVuY3J5cHQiLCJ1bmlxdWVfbm9uY2VfZW50cm9weSIsImxvbmciLCJvciIsInVuaXF1ZU5vbmNlIiwiZGVjcnlwdCIsImlzTG9uZyIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwicmF3Qnl0ZXMiLCJtb2RlTW9kdWxlcyIsIkVDQiIsIkNCQyIsIkNGQiIsIkNGQjgiLCJDRkIxIiwiT0ZCIiwiQ1RSIiwiR0NNIiwibW9kZXMiLCJpbmNyMzIiLCJnZXRCbG9jayIsIl9jaXBoZXIiLCJfcHJldiIsImNodW5rTnVtIiwiX2NhY2hlIiwiaXRlbSIsImFlcyIsIkdIQVNIIiwiU3RyZWFtQ2lwaGVyIiwiaCIsImNrIiwiX2doYXNoIiwiX2ZpbklEIiwiZ2hhc2giLCJ0b1BhZCIsIml2Qml0cyIsInRhaWwiLCJjYWxjSXYiLCJfc2VjQ2FjaGUiLCJfZGVjcnlwdCIsIl9hbGVuIiwiX21vZGUiLCJfYXV0aFRhZyIsIl9jYWxsZWQiLCJydW1wIiwieG9yVGVzdCIsIkVFIiwiZGVzdCIsIm9uZGF0YSIsInBhdXNlIiwib25kcmFpbiIsInJlc3VtZSIsIl9pc1N0ZGlvIiwib25jbG9zZSIsImRpZE9uRW5kIiwib25lcnJvciIsImNsZWFudXAiLCJSZWFkYWJsZVN0YXRlIiwiRUVsaXN0ZW5lckNvdW50IiwiZGVidWdVdGlsIiwiZGVidWdsb2ciLCJCdWZmZXJMaXN0Iiwia1Byb3h5RXZlbnRzIiwicmVhZGFibGVPYmplY3RNb2RlIiwicmVhZGFibGVId20iLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJvbkVvZkNodW5rIiwiY2h1bmtJbnZhbGlkIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwidW5zaGlmdCIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImhlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibWF5YmVSZWFkTW9yZV8iLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0Iiwic2hpZnQiLCJoYXNTdHJpbmdzIiwiY29weUZyb21CdWZmZXJTdHJpbmciLCJjb3B5RnJvbUJ1ZmZlciIsImZyb21MaXN0UGFydGlhbCIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibk9yaWciLCJkb1JlYWQiLCJwaXBlT3B0cyIsImVuZEZuIiwic3Rkb3V0Iiwic3RkZXJyIiwidW5waXBlIiwib251bnBpcGUiLCJ1bnBpcGVJbmZvIiwiaGFzVW5waXBlZCIsIm9uZmluaXNoIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJpbmNyZWFzZWRBd2FpdERyYWluIiwiZXZlbnQiLCJkZXN0cyIsImV2IiwicGF1c2VkIiwiX2Zyb21MaXN0IiwiZW1pdEVycm9yTlQiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiX3RyYW5zZm9ybVN0YXRlIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJ0cyIsInRyYW5zZm9ybWluZyIsIndyaXRlY2h1bmsiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsInRyYW5zZm9ybSIsImZsdXNoIiwiX3RoaXMyIiwiZXJyMiIsInBhc3N3b3JkIiwic2FsdCIsImtleUJpdHMiLCJpdkxlbiIsImtleUxlbiIsInRtcCIsInVzZWQiLCJrZXlTdGFydCIsIml2U3RhcnQiLCJfZmluYWxpemVkIiwicHJlZml4IiwidGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyIiwiY2FycnkiLCJUSFJFRSIsImN1cnZlIiwieiIsIl96SW52IiwibW9kSW52ZXJzZSIsInpJbnYiLCJtb2QiLCJvdGhlciIsInN1YnRyYWN0Iiwic2lnbnVtIiwieDEiLCJ5MSIsInUiLCJ0d2ljZSIsImluZmluaXR5IiwidjIiLCJzcXVhcmUiLCJ2MyIsIngxdjIiLCJ6dTIiLCJ4MyIsInkzIiwiejMiLCJ5MXoxIiwieTFzcXoxIiwidyIsIm5lZyIsImJpdExlbmd0aCIsImhCaXQiLCJ0ZXN0Qml0IiwiZUJpdCIsIm11bHRpcGx5VHdvIiwiYm90aCIsImpCaXQiLCJrQml0IiwiYWZmaW5lWSIsInBMZW5ndGgiLCJpc0V2ZW4iLCJpc09kZCIsInBvaW50RnJvbVgiLCJfX2JpZ2kiLCJjaGVja192ZXIiLCJhbSIsIkRCIiwiRE0iLCJEViIsIkZWIiwiRjEiLCJCSV9GUCIsIkYyIiwicnIiLCJ2diIsIkJJX1JNIiwiQklfUkMiLCJpbnQyY2hhciIsImludEF0IiwibmJ2IiwiZnJvbUludCIsIm5iaXRzIiwiQ2xhc3NpYyIsIk1vbnRnb21lcnkiLCJtcCIsImludkRpZ2l0IiwibXBsIiwibXBoIiwidW0iLCJtdDIiLCJvcF9hbmQiLCJvcF9vciIsIm9wX3hvciIsIm9wX2FuZG5vdCIsImxiaXQiLCJjYml0IiwiTnVsbEV4cCIsIm5Ob3AiLCJCYXJyZXR0IiwicjIiLCJxMyIsImRsU2hpZnRUbyIsIm11IiwiZGl2aWRlIiwiY29udmVydCIsInJldmVydCIsInJlZHVjZSIsImRpdlJlbVRvIiwibXVsVG8iLCJtdWx0aXBseVRvIiwic3FyVG8iLCJzcXVhcmVUbyIsIlpFUk8iLCJzdWJUbyIsInUwIiwiY2xhbXAiLCJkclNoaWZ0VG8iLCJmcm9tUmFkaXgiLCJtaSIsInNoIiwibFNoaWZ0VG8iLCJicyIsImNicyIsImJtIiwiZHMiLCJyU2hpZnRUbyIsInEiLCJwbSIsInB0IiwibXMiLCJuc2giLCJ5cyIsInkwIiwieXQiLCJkMSIsImQyIiwicWQiLCJleHAiLCJ0b1JhZGl4Iiwia20iLCJtb2RQb3dJbnQiLCJtdWx0aXBseVVwcGVyVG8iLCJtdWx0aXBseUxvd2VyVG8iLCJkQWRkT2Zmc2V0IiwibG93cHJpbWVzIiwibHBsaW0iLCJjaHVua1NpemUiLCJpbnRWYWx1ZSIsImRNdWx0aXBseSIsImJpdHdpc2VUbyIsImlzUHJvYmFibGVQcmltZSIsIm5leHRCeXRlcyIsIm9wIiwiY2hhbmdlQml0IiwiYWRkVG8iLCJtb2RJbnQiLCJtaWxsZXJSYWJpbiIsIm4xIiwiZ2V0TG93ZXN0U2V0Qml0IiwiYmFzZXMiLCJtb2RQb3ciLCJieXRlVmFsdWUiLCJzaG9ydFZhbHVlIiwiYW5kTm90Iiwibm90IiwiYml0Q291bnQiLCJzZXRCaXQiLCJjbGVhckJpdCIsImZsaXBCaXQiLCJkaXZpZGVBbmRSZW1haW5kZXIiLCJrMSIsImcyIiwiaXMxIiwiYWMiLCJnY2QiLCJHeCIsIkd5IiwicE92ZXJGb3VyIiwiYmV0YSIsImlzT25DdXJ2ZSIsImxocyIsInJocyIsInZhbGlkYXRlIiwiblEiLCJ6bCIsInpyIiwic2wiLCJzciIsImhyIiwiZm4xIiwiZm4yIiwiZm4zIiwiZm40IiwiZm41Iiwid29yZHMiLCJhbCIsImJsIiwiY2wiLCJkbCIsImVsIiwiYXIiLCJiciIsImNyIiwiZHIiLCJ0bCIsInRyIiwiYWxnb3JpdGhtIiwiQWxnb3JpdGhtIiwic2hhMjI0Iiwic2hhMzg0IiwiSyIsIlNoYTI1NiIsImluaXQiLCJfdyIsIm1haiIsInNpZ21hMCIsInNpZ21hMSIsImdhbW1hMCIsImdhbW1hMSIsIl9mIiwiX2ciLCJfaCIsIlQxIiwiVDIiLCJIIiwiU2hhNTEyIiwiQ2giLCJ4bCIsIkdhbW1hMCIsIkdhbW1hMGwiLCJHYW1tYTEiLCJHYW1tYTFsIiwiZ2V0Q2FycnkiLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJhaCIsImJoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImZsIiwiZ2wiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwiZWNkc2EiLCJ2ZXJpZnkiLCJ2ZXJpZnlIYXNoIiwiZGF0YVNoYTI1NiIsInJlY292ZXIiLCJyZWNvdmVySGFzaCIsInJlY292ZXJQdWJLZXkiLCJzaWduYXR1cmVDYWNoZSIsInZlcmlmeUhleCIsInZlcmlmeUJ1ZmZlciIsInJlY292ZXJQdWJsaWNLZXkiLCJyZWNvdmVyUHVibGljS2V5RnJvbUJ1ZmZlciIsInNpZ25IYXNoIiwiZGVyIiwiZWNzaWduYXR1cmUiLCJsZW5SIiwibGVuUyIsInRvREVSIiwiY2FsY1B1YktleVJlY292ZXJ5UGFyYW0iLCJhcGlHZW4iLCJwcm9jZXNzQXJncyIsImRlZlBhcmFtcyIsIm1ldGhvZE5hbWUiLCJvcHRpb25zRm9ybWF0dGVyIiwicGFyYW1zIiwiZXhwZWN0ZWRBcmdDb3VudCIsImNhbGxiYWNrQXJnIiwicmV0dXJuUHJvbWlzZSIsInJlamVjdCIsImRlZlBhcmFtIiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIlVMb25nIiwiZW5jb2RlTmFtZUhleCIsImRlY29kZU5hbWVIZXgiLCJEZWNpbWFsU3RyaW5nIiwiZG90SWR4IiwiX3N0ciRzcGxpdCIsImFtb3VudE1hdGNoIiwicHJlY2lzaW9uTWF0Y2giLCJwcmVjaXNpb25TeW1ib2wiLCJwcmVjaXNpb25BbW91bnQiLCJzeW1ib2xNYXRjaCIsIl9zdHIkc3BsaXQzIiwiX3N0ciRzcGxpdDQkIiwiY29udHJhY3RSYXciLCJyYWRpeCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJjaGFybWFwIiwiY2hhcmlkeCIsImJpdHN0ciIsImJpdGxlbiIsImxlSGV4IiwidG9CeXRlc0xFIiwidG9CeXRlc0JFIiwiYmVIZXgiLCJmaXZlQml0cyIsImZvdXJCaXRzIiwicGFydCIsInBvcCIsIm51bSIsImUxIiwiZTIiLCJnbG9iYWxPYmplY3QiLCJCaWdOdW1iZXIiLCJpc051bWVyaWMiLCJtYXRoY2VpbCIsIm1hdGhmbG9vciIsImJpZ251bWJlckVycm9yIiwidG9vTWFueURpZ2l0cyIsIkJBU0UiLCJMT0dfQkFTRSIsIlBPV1NfVEVOIiwiU1FSVF9CQVNFIiwiTUFYIiwiYml0Rmxvb3IiLCJjb2VmZlRvU3RyaW5nIiwieGMiLCJ5YyIsImludENoZWNrIiwidG9FeHBvbmVudGlhbCIsInRvRml4ZWRQb2ludCIsInpzIiwiY29uZmlnT2JqZWN0IiwiZGl2IiwiY29udmVydEJhc2UiLCJwYXJzZU51bWVyaWMiLCJERUNJTUFMX1BMQUNFUyIsIlJPVU5ESU5HX01PREUiLCJUT19FWFBfTkVHIiwiVE9fRVhQX1BPUyIsIk1JTl9FWFAiLCJNQVhfRVhQIiwiQ1JZUFRPIiwiTU9EVUxPX01PREUiLCJQT1dfUFJFQ0lTSU9OIiwiRk9STUFUIiwiZ3JvdXBTaXplIiwic2Vjb25kYXJ5R3JvdXBTaXplIiwiZ3JvdXBTZXBhcmF0b3IiLCJkZWNpbWFsU2VwYXJhdG9yIiwiZnJhY3Rpb25Hcm91cFNpemUiLCJmcmFjdGlvbkdyb3VwU2VwYXJhdG9yIiwic3VmZml4IiwiQUxQSEFCRVQiLCJhbHBoYWJldCIsImNhc2VDaGFuZ2VkIiwiaXNOdW0iLCJzZWFyY2giLCJERUJVRyIsInJtIiwiYzAiLCJuZSIsIm1heE9yTWluIiwibm9ybWFsaXNlIiwibmkiLCJyZCIsInBvd3MxMCIsIlJPVU5EX1VQIiwiUk9VTkRfRE9XTiIsIlJPVU5EX0NFSUwiLCJST1VORF9GTE9PUiIsIlJPVU5EX0hBTEZfVVAiLCJST1VORF9IQUxGX0RPV04iLCJST1VORF9IQUxGX0VWRU4iLCJST1VORF9IQUxGX0NFSUwiLCJST1VORF9IQUxGX0ZMT09SIiwiRVVDTElEIiwiRVhQT05FTlRJQUxfQVQiLCJSQU5HRSIsImlzQmlnTnVtYmVyIiwiX2lzQmlnTnVtYmVyIiwibWF4aW11bSIsIm1pbmltdW0iLCJndCIsInJhbmRvbTUzYml0SW50IiwiZHAiLCJyYW5kIiwiVWludDMyQXJyYXkiLCJzdW0iLCJwbHVzIiwidG9CYXNlT3V0IiwiYmFzZUluIiwiYmFzZU91dCIsImFyckwiLCJjYWxsZXJJc1RvU3RyaW5nIiwiYmFzZSIsInRlbXAiLCJ4bG8iLCJ4aGkiLCJrbG8iLCJraGkiLCJhTCIsImJMIiwiY21wIiwibW9yZSIsInByb2QiLCJwcm9kTCIsInFjIiwicmVtTCIsInJlbTAiLCJ4TCIsInljMCIsInlMIiwieXoiLCJiYXNlUHJlZml4IiwiZG90QWZ0ZXIiLCJkb3RCZWZvcmUiLCJpc0luZmluaXR5T3JOYU4iLCJ3aGl0ZXNwYWNlT3JQbHVzIiwicDEiLCJwMiIsImFic29sdXRlVmFsdWUiLCJjb21wYXJlZFRvIiwiZGVjaW1hbFBsYWNlcyIsImRpdmlkZWRCeSIsImRpdmlkZWRUb0ludGVnZXJCeSIsImlkaXYiLCJleHBvbmVudGlhdGVkQnkiLCJoYWxmIiwiaXNNb2RFeHAiLCJuSXNCaWciLCJuSXNOZWciLCJuSXNPZGQiLCJpc0ludGVnZXIiLCJ0aW1lcyIsImludGVnZXJWYWx1ZSIsImlzRXF1YWxUbyIsImVxIiwiaXNHcmVhdGVyVGhhbiIsImlzR3JlYXRlclRoYW5PckVxdWFsVG8iLCJndGUiLCJpc0xlc3NUaGFuIiwiaXNMZXNzVGhhbk9yRXF1YWxUbyIsImx0ZSIsImlzTmVnYXRpdmUiLCJpc1Bvc2l0aXZlIiwiaXNaZXJvIiwibWludXMiLCJ4TFR5IiwieGUiLCJ5ZSIsIm1vZHVsbyIsIm11bHRpcGxpZWRCeSIsInhjTCIsInljTCIsInlsbyIsInloaSIsInpjIiwic3FydEJhc2UiLCJuZWdhdGVkIiwic2hpZnRlZEJ5Iiwic3F1YXJlUm9vdCIsInJlcCIsInRvRm9ybWF0IiwiZzEiLCJpbnRQYXJ0IiwiZnJhY3Rpb25QYXJ0IiwiaXNOZWciLCJpbnREaWdpdHMiLCJ0b0ZyYWN0aW9uIiwibWQiLCJkMCIsIm4wIiwidG9OdW1iZXIiLCJ0b1ByZWNpc2lvbiIsImZvciIsImlkYiIsIm5ldENvbmYiLCJTY2F0dGVyUGxheWVyIiwiaXNQYyIsInVzZXJBZ2VudCIsImVvc2pzIiwiZW9zcGxheWVyIiwicHJvbWlzaWZ5UmVxdWVzdCIsInJlcXVlc3QiLCJvbnN1Y2Nlc3MiLCJwcm9taXNpZnlSZXF1ZXN0Q2FsbCIsInByb3h5UHJvcGVydGllcyIsIlByb3h5Q2xhc3MiLCJ0YXJnZXRQcm9wIiwicHJvcGVydGllcyIsInByb3AiLCJwcm94eVJlcXVlc3RNZXRob2RzIiwicHJveHlNZXRob2RzIiwicHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyIsIkN1cnNvciIsInByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsIiwiSW5kZXgiLCJfaW5kZXgiLCJjdXJzb3IiLCJfY3Vyc29yIiwiX3JlcXVlc3QiLCJPYmplY3RTdG9yZSIsIl9zdG9yZSIsIlRyYW5zYWN0aW9uIiwiaWRiVHJhbnNhY3Rpb24iLCJfdHgiLCJjb21wbGV0ZSIsIm9uY29tcGxldGUiLCJvbmFib3J0IiwiVXBncmFkZURCIiwiZGIiLCJvbGRWZXJzaW9uIiwiX2RiIiwiSURCSW5kZXgiLCJJREJDdXJzb3IiLCJjcmVhdGVJbmRleCIsIklEQk9iamVjdFN0b3JlIiwib2JqZWN0U3RvcmUiLCJJREJUcmFuc2FjdGlvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwiSURCRGF0YWJhc2UiLCJmdW5jTmFtZSIsInRvQXJyYXkiLCJuYXRpdmVPYmplY3QiLCJnZXRBbGwiLCJxdWVyeSIsImluc3RhbmNlIiwiaXRlbXMiLCJpdGVyYXRlQ3Vyc29yIiwiY29udGludWUiLCJ1cGdyYWRlQ2FsbGJhY2siLCJpbmRleGVkREIiLCJvbnVwZ3JhZGVuZWVkZWQiLCJkZWxldGUiLCJoYWRSdW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwib2xkUnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJzZXRQcm90b3R5cGVPZiIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIml0ZXIiLCJDb250ZXh0Iiwic2tpcFRlbXBSZXNldCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiZmluYWxseUVudHJ5IiwiYWZ0ZXJMb2MiLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiaXRlcmFibGUiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsInVud3JhcHBlZCIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsInRvSW50ZWdlciIsIlRPX1NUUklORyIsImFGdW5jdGlvbiIsImRlc2NyaXB0b3IiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImZyb21JbmRleCIsImRvY3VtZW50RWxlbWVudCIsIk9iamVjdFByb3RvIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJfayIsIkFyZ3VtZW50cyIsIkRFU0NSSVBUT1JTIiwiTUVUQSIsIktFWSIsIiRmYWlscyIsIndrcyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QRCIsImdPUE4iLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJEIiwicHJvdG9EZXNjIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJzeW1ib2xzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsInNlZWRQcml2YXRlIiwiaXNWYWxpZFB1YmxpYyIsImlzVmFsaWRQcml2YXRlIiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsInRyaXBsZXRUb0Jhc2U2NCIsIm91dHB1dCIsIl9faXNMb25nX18iLCJJTlRfQ0FDSEUiLCJVSU5UX0NBQ0hFIiwiY2FjaGVkT2JqIiwiVVpFUk8iLCJUV09fUFdSXzY0X0RCTCIsIk1BWF9VTlNJR05FRF9WQUxVRSIsIlRXT19QV1JfNjNfREJMIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiVFdPX1BXUl8zMl9EQkwiLCJwb3dfZGJsIiwicmFkaXhUb1Bvd2VyIiwicG93ZXIiLCJmcm9tVmFsdWUiLCJUV09fUFdSXzE2X0RCTCIsIlRXT19QV1JfMjQiLCJVT05FIiwiTkVHX09ORSIsIkxvbmdQcm90b3R5cGUiLCJyYWRpeExvbmciLCJyZW0xIiwicmVtRGl2IiwiZGlnaXRzIiwiZ2V0SGlnaEJpdHMiLCJnZXRIaWdoQml0c1Vuc2lnbmVkIiwiZ2V0TG93Qml0cyIsImdldExvd0JpdHNVbnNpZ25lZCIsImdldE51bUJpdHNBYnMiLCJub3RFcXVhbHMiLCJuZXEiLCJsZXNzVGhhbiIsImNvbXAiLCJsZXNzVGhhbk9yRXF1YWwiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuT3JFcXVhbCIsInRoaXNOZWciLCJvdGhlck5lZyIsImFkZGVuZCIsImE0OCIsImEzMiIsImExNiIsImEwMCIsImI0OCIsImIzMiIsImIxNiIsImM0OCIsImMzMiIsImMxNiIsImMwMCIsInN1YnRyYWhlbmQiLCJtdWx0aXBsaWVyIiwiYjAwIiwiZGl2aXNvciIsImFwcHJveCIsInNocnUiLCJzaHIiLCJzaGwiLCJhcHByb3hSZXMiLCJhcHByb3hSZW0iLCJudW1CaXRzIiwidG9CeXRlcyIsImxlIiwiY2lwaGVycyIsImRlY2lwaGVycyIsImNyZWF0ZUNpcGhlciIsIkNpcGhlciIsIkNpcGhlcml2IiwiY3JlYXRlRGVjaXBoZXIiLCJEZWNpcGhlciIsIkRlY2lwaGVyaXYiLCJsaXN0Q2lwaGVycyIsImdldENpcGhlcnMiLCJNT0RFUyIsIkF1dGhDaXBoZXIiLCJlYnRrIiwiU3BsaXR0ZXIiLCJfYXV0b3BhZGRpbmciLCJ0aGluZyIsIlBBRERJTkciLCJzdWl0ZSIsInNldFRvIiwicGFkQnVmZiIsImVuY3J5cHRTdGFydCIsImVuY3J5cHRCeXRlIiwiYnl0ZVBhcmFtIiwic2hpZnRJbiIsImNvcHlCdWZmZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJjdXN0b20iLCJzY29wZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsIk1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImh0bWwiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJ0YXNrIiwibG9jYWxTdG9yYWdlIiwiWkVST0VTIiwiZnJvbUFycmF5IiwiX211bHRpcGx5IiwibHNiVmkiLCJWaSIsIlppIiwiYWJsIiwiX2xhc3QiLCJwYWRkZWQiLCJ1bnBhZCIsImF1dG9QYWRkaW5nIiwiZm9ybWF0UmVnRXhwIiwib2JqZWN0cyIsIm5vRGVwcmVjYXRpb24iLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsIm9wdHMiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJzaG93SGlkZGVuIiwiY3VzdG9tSW5zcGVjdCIsInN0eWxpemVXaXRoQ29sb3IiLCJmb3JtYXRWYWx1ZSIsInN0eWxlVHlwZSIsInN0eWxlcyIsInJlY3Vyc2VUaW1lcyIsInByaW1pdGl2ZSIsInNpbXBsZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiYXJyYXlUb0hhc2giLCJmb3JtYXRFcnJvciIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsImN1ciIsIm51bUxpbmVzRXN0IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJkZXNjIiwibGluZSIsIk5PREVfREVCVUciLCJwaWQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsIndoaXRlIiwiZ3JleSIsImJsYWNrIiwiYmx1ZSIsImN5YW4iLCJncmVlbiIsIm1hZ2VudGEiLCJyZWQiLCJ5ZWxsb3ciLCJzcGVjaWFsIiwibnVtYmVyIiwiYm9vbGVhbiIsIm51bGwiLCJkYXRlIiwicmVnZXhwIiwibW9udGhzIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJ0aW1lc3RhbXAiLCJvcmlnaW4iLCJmcm9tQnl0ZUFycmF5VW5zaWduZWQiLCJ0b0J5dGVBcnJheVVuc2lnbmVkIiwiZnJvbURFUkludGVnZXIiLCJ0b0RFUkludGVnZXIiLCJ6ZXJvcyIsInBhZGRpbmciLCJjdXJ2ZXMiLCJTaGEiLCJyb3RsNSIsInJvdGwzMCIsImZ0IiwiU2hhMSIsInJvdGwxIiwiU2hhMjI0IiwiU0hBNTEyIiwiU2hhMzg0IiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsImJhc2V4IiwiQUxQSEFCRVRfTUFQIiwiTEVBREVSIiwiZGVjb2RlVW5zYWZlIiwiZW5mb3JjZVR5cGUiLCJFQ1NpZ25hdHVyZSIsImRldGVybWluaXN0aWNHZW5lcmF0ZUsiLCJjaGVja1NpZyIsInZlcmlmeVJhdyIsInUxIiwidTIiLCJpc1lPZGQiLCJuUiIsImVOZWciLCJySW52IiwiTl9PVkVSX1RXTyIsInJCYSIsInNCYSIsInNlcXVlbmNlIiwidG9Db21wYWN0IiwidG9TY3JpcHRTaWduYXR1cmUiLCJoYXNoVHlwZSIsImhhc2hUeXBlQnVmZmVyIiwicGFyc2VDb21wYWN0IiwiZnJvbURFUiIsInJMZW4iLCJzTGVuIiwickIiLCJzQiIsInBhcnNlU2NyaXB0U2lnbmF0dXJlIiwiaGFzaFR5cGVNb2QiLCJBZXMiLCJrZXlfdXRpbHMiLCJCTiIsImJ5dGVidWYiLCJfc3RyaW5nIiwidmVjdG9yIiwic29ydGVkIiwiX3ZlY3RvciIsIm9wdGlvbmFsIiwiX29wdGlvbmFsIiwiX3RpbWUyIiwiYW5ub3RhdGlvbiIsIl9tYXAiLCJfc3RhdGljX3ZhcmlhbnQiLCJmaXhlZF9zdHJpbmcxNiIsIm1heExlbiIsImZpeGVkX3N0cmluZzMyIiwiZml4ZWRfYnl0ZXMxNiIsImZpeGVkX2J5dGVzMjAiLCJmaXhlZF9ieXRlczI4IiwiZml4ZWRfYnl0ZXMzMiIsImZpeGVkX2J5dGVzMzMiLCJmaXhlZF9ieXRlczY0IiwiaW50YnVmIiwidWludDE2IiwidWludDMyIiwidWludDY0IiwidWludDEyOCIsImJuYnVmIiwidWludDIyNCIsInVpbnQyNTYiLCJ1aW50NTEyIiwidmFydWludDMyIiwidmFyaWFibGUiLCJpbnQ4Iiwic2lnbmVkIiwiaW50MTYiLCJpbnQzMiIsImludDEyOCIsImludDIyNCIsImludDI1NiIsImludDUxMiIsInZhcmludDMyIiwiZmxvYXQzMiIsImZsb2F0IiwiZmxvYXQ2NCIsImFsbFR5cGVzIiwiY3JlYXRlVHlwZVJlZHVjZXIiLCJfVHlwZSIsIl9UeXBlMiIsIl9UeXBlMiQiLCJjcmVhdGVUeXBlIiwiX3ZhbGlkYXRpb24kYW5ub3RhdGlvIiwidHlwZTEiLCJ0eXBlMiIsImlzU2VyaWFsaXplciIsInZhbHVlMiIsIl9kZWZpbmVQcm9wZXJ0eSIsInR5cGVQb3NpdGlvbiIsImludGJ1ZlR5cGUiLCJfcmVmMiRzaWduZWQiLCJ2YWxpZGF0ZUludCIsIl92YWxpZGF0aW9uJHNpZ25lZCIsImJuIiwidG9BcnJheUxpa2UiLCJmcm9tVHdvcyIsInRvVHdvcyIsImZsb2F0UG9pbnQiLCJzaXplTmFtZSIsImZiIiwidG9JU09TdHJpbmciLCJzcHJlYWQiLCJpbnQiLCJpc0VtcHR5IiwiX3ZhbGlkYXRpb24kc2lnbmVkMiIsIl92YWxpZGF0aW9uJGJpdHMiLCJtYXhTaWduZWQiLCJtYXhVbnNpZ25lZCIsIm1pblNpZ25lZCIsImlzaGxuIiwiaXN1YiIsImluZWciLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJfaW5pdCIsIndvcmRTaXplIiwicGFyc2VIZXgiLCJwYXJzZUJhc2UiLCJsZWZ0IiwicmlnaHQiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwic3RyaXAiLCJsaW1iTGVuIiwibGltYlBvdyIsIndvcmQiLCJpbXVsbiIsIl9pYWRkbiIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInNtYWxsTXVsVG8iLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJncm91cEJhc2UiLCJtb2RuIiwiaWRpdm4iLCJBcnJheVR5cGUiLCJyZXFMZW5ndGgiLCJhbmRsbiIsIml1c2hybiIsImNsejMyIiwiX2NvdW50Qml0cyIsIl96ZXJvQml0cyIsInplcm9CaXRzIiwiaW5vdG4iLCJpYWRkbiIsInRlc3RuIiwibm90biIsIml1b3IiLCJpb3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwid2JpdCIsImlhZGQiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwiaG5jYXJyeSIsImJpZ011bFRvIiwibWFrZVJCVCIsIk4iLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInJ0d2RmIiwiY29zIiwiUEkiLCJpdHdkZiIsInJ0d2RmXyIsIml0d2RmXyIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImhpbnQiLCJleHRlbmRlZCIsIm1hc2siLCJtYXNrZWRXb3JkcyIsImlzaHJuIiwic2hsbiIsInVzaGxuIiwic2hybiIsInVzaHJuIiwiaW1hc2tuIiwibWFza24iLCJpc3VibiIsImFkZG4iLCJzdWJuIiwiaWFicyIsIl9pc2hsbnN1Ym11bCIsIl93b3JkRGl2IiwiYmhpIiwicWoiLCJkaXZtb2QiLCJwb3NpdGl2ZSIsImRpdm4iLCJ1bW9kIiwiZGl2Um91bmQiLCJkbSIsImFjYyIsImVnY2QiLCJBIiwieXAiLCJ4cCIsImltIiwiam0iLCJfaW52bXAiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0ZW4iLCJsdG4iLCJsdGVuIiwiZXFuIiwiUmVkIiwidG9SZWQiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInJlZEludm0iLCJyZWROZWciLCJyZWRQb3ciLCJwcmltZXMiLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJNUHJpbWUiLCJfdG1wIiwiSzI1NiIsIlAyMjQiLCJQMTkyIiwiUDI1NTE5IiwicHJpbWUiLCJfcHJpbWUiLCJNb250IiwiaW1vZCIsInJpbnYiLCJtaW52IiwiaXJlZHVjZSIsInJsZW4iLCJpbXVsSyIsImlucHV0Iiwib3V0TGVuIiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwiaW52Iiwid25kIiwiY3VycmVudExlbiIsIm1vbnQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJwYXRocyIsImNoaWxkcmVuIiwicmVhZEZsb2F0MzJBcnJheSIsIndyaXRlRmxvYXQzMkFycmF5IiwicmVhZEZsb2F0MzJBcnJheVJldiIsIndyaXRlRmxvYXQzMkFycmF5UmV2IiwicmVhZEZsb2F0NjRBcnJheSIsIndyaXRlRmxvYXQ2NEFycmF5IiwicmVhZEZsb2F0NjRBcnJheVJldiIsIndyaXRlRmxvYXQ2NEFycmF5UmV2IiwiaXNCaWdlQ3B1IiwicmVhZFdvcmQiLCJvZmZzIiwiZGlybiIsIndyaXRlV29yZCIsIndyaXRlRG91YmxlV29yZCIsIl9mcDMyIiwiX2IzMiIsIl9mcDY0IiwiX2I2NCIsIl8yZVhwIiwiXzJlWG4iLCJwb3cyIiwiX2xzaGlmdDMyIiwiX3JzaGlmdDUyIiwiaGlnaFdvcmQiLCJsb3dXb3JkIiwibWFudGlzc2EiLCJleHBvbmVudCIsIl9yc2hpZnQyMyIsIl9yc2hpZnQxMjciLCJfcGFydHMiLCJtYW50Iiwibm9ybWFsaXplIiwiY291bnREb3VibGluZ3MiLCJfMmUxOTIiLCJyb3VuZE1hbnRpc3NhIiwic2NhbGUiLCJub3JtIiwiXzJlNTIiLCJpbnN0YWxsIiwiX3VzZUZsb2F0QXJyYXkiLCJ5ZXNubyIsIl91c2luZ0Zsb2F0QXJyYXkiLCJfZ2V0QmlnZUNwdSIsIl9zZXRCaWdlQ3B1IiwiU3RydWN0IiwidHlwZU9mVmFsdWUiLCJmaWVsZCIsIl92YWx1ZSIsIl9rZXkyIiwiX3ZhbHVlMiIsImdldFR5cGVPclN0cnVjdCIsIl9rZXkzIiwidGhpc1N0cnVjdCIsIl92YWx1ZTMiLCJiYXNlU3RydWN0Iiwic3RydWN0UHRyIiwidHlwZUFyZ3MiLCJmaWVsZE5hbWUiLCJ0eXBlYXR0eSIsInBhcnNlVHlwZSIsImFycmF5VHlwZSIsIl90eXBlIiwiYW5uVHlwZXMiLCJhbm5UeXBlTmFtZSIsImFublR5cGUiLCJmaWVsZFN0cnVjdCIsIl90eXBlMiIsIm5hbWVUeXBlIiwiYXJyYXlUcyIsImJhc2VUcyIsIl9rZXk0IiwiX3RoaXNTdHJ1Y3QiLCJfdmFsdWU0IiwiRmllbGQiLCJ0b0J5dGVCdWZmZXIiLCJhbm5vdGF0aW9uTWF0Y2giLCJhcnJheU1hdGNoIiwiZmllbGRPbmUiLCJmaWVsZE9uZU5hbWUiLCJ2MSIsInNlcmlhbGl6ZWRPYmplY3QiLCJmcm9tT2JqZWN0X3N0cnVjdCIsIl9vYmplY3QiLCJ0b09iamVjdF9zdHJ1Y3QiLCJfb2JqZWN0MiIsImNoYWluIiwiY2FtZWxDYXNlIiwiaGVscGVycyIsImZldGNoTWV0aG9kIiwidXJsIiwiZGVmaW5pdGlvbiIsIl9sZW4yIiwicHJvY2Vzc2VkQXJncyIsIm9wdGlvbiIsImJvZHkiLCJmZXRjaENvbmZpZ3VyYXRpb24iLCJmZXRjaCIsInJlc3BvbnNlIiwic3RhdHVzIiwiYm9keVJlc3AiLCJzdGF0dXNUZXh0Iiwib2JqZWN0UmVzcCIsImNhbGxiYWNrRXJyb3IiLCJkZXRhaWxzIiwidXNhZ2UiLCJicmllZiIsInJlc3VsdHMiLCJlcnJvckRlc2MiLCJhcGlHcm91cCIsImFwaU1ldGhvZCIsIl9sb29wIiwiaGVscGVyIiwiX2hlbHBlcnMkYXBpIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJET01FeGNlcHRpb24iLCJzdXBwb3J0Iiwic2VhcmNoUGFyYW1zIiwiYmxvYiIsIkJsb2IiLCJmb3JtRGF0YSIsImFycmF5QnVmZmVyIiwidmlld0NsYXNzZXMiLCJpc0FycmF5QnVmZmVyVmlldyIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaGVhZGVycyIsImhlYWRlciIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJvbmxvYWQiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJyZWplY3RlZCIsInJlYWRBc1RleHQiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsIm9sZFZhbHVlIiwidGhpc0FyZyIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwidXBjYXNlZCIsIm5vcm1hbGl6ZU1ldGhvZCIsInJlZmVycmVyIiwiZm9ybSIsImRlY29kZVVSSUNvbXBvbmVudCIsImJvZHlJbml0IiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsInJhd0hlYWRlcnMiLCJwYXJzZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsInVwcGVyQ2FzZSIsIm5vQ2FzZSIsImxvY2FsZSIsIm1lcmdlTnVtYmVycyIsIiQxIiwiTEFOR1VBR0VTIiwiYXoiLCJpzIciLCJqzIciLCLEr8yHIiwiacyHzIAiLCJpzIfMgSIsImnMh8yDIiwibGFuZyIsImxvd2VyQ2FzZSIsIk5PTl9XT1JEX1JFR0VYUCIsIkNBTUVMX0NBU0VfUkVHRVhQIiwiQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAiLCJyZXBsYWNlbWVudCIsIsSwIiwiSSIsIknMhyIsIkoiLCLEriIsIsOMIiwiw40iLCLEqCIsImNyZWF0ZVRyYW5zYWN0aW9uIiwiZXhwaXJlSW5TZWNvbmRzIiwiY2hlY2tFcnJvciIsImNoYWluRGF0ZSIsImhlYWRfYmxvY2tfdGltZSIsImxhc3RfaXJyZXZlcnNpYmxlX2Jsb2NrX251bSIsImV4cGlyYXRpb24iLCJyZWZfYmxvY2tfbnVtIiwicmVmX2Jsb2NrX3ByZWZpeCIsIm1heF9uZXRfdXNhZ2Vfd29yZHMiLCJtYXhfY3B1X3VzYWdlX21zIiwiZGVsYXlfc2VjIiwiY29udGV4dF9mcmVlX2FjdGlvbnMiLCJzaWduYXR1cmVzIiwidHJhbnNhY3Rpb25fZXh0ZW5zaW9ucyIsInBhcmVudEVyciIsInBhcnJlbnRSZXMiLCJjbGFzc29mIiwiaXNJdGVyYWJsZSIsImdldEl0ZXJhdG9yIiwiaXRlckZuIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhYmlBc3luYyIsImZvcmNlIiwiX2FiaSIsImdldEFiaSIsImFiaUNhY2hlQ29uZmlnIiwiZmNTY2hlbWEiLCJhYmlTY2hlbWEiLCJuZXdfdHlwZV9uYW1lIiwiYWJpVG9GY1NjaGVtYSIsIk5ldHdvcmsiLCJnZW5UcmFuc2FjdGlvbiIsImNvbnRyYWN0cyIsImlzQ29udHJhY3RBcnJheSIsImFiaVByb21pc2VzIiwiY2FjaGVkQ29kZSIsImNvbnRyYWN0UHJvbWlzZXMiLCJpc1N0cmluZ0FycmF5IiwiYWxsIiwiZ2VuQ29udHJhY3RBY3Rpb25zIiwibWVyZ2VzIiwicGFyYW0iLCJ0ck1lc3NhZ2VDb2xsZWN0b3IiLCJjb250cmFjdE1lcmdlIiwic2NoZW1hRmllbGRzIiwiZ2VuTWV0aG9kIiwidHJhbnNhY3Rpb25BcmciLCJfbGVuMyIsIm9wdGlvbk92ZXJyaWRlcyIsImxhc3RBcmciLCJfX29wdGlvbk92ZXJyaWRlcyIsIm9wdGlvbkRlZmF1bHRzIiwibm9DYWxsYmFjayIsImF1dGhvcml6YXRpb24iLCJwcm92aWRlZEF1dGgiLCJhZGREZWZhdWx0QXV0aHMiLCJhdXRoQXJyYXkiLCJhdXRoIiwiX2F1dGgkc3BsaXQiLCJfYXV0aCRzcGxpdDIiLCJfYXV0aCRzcGxpdDIkIiwiZmlyc3RBY2NvdW50IiwibWVzc2FnZU9ubHkiLCJmaWVsZEtleXMiLCJmMSIsInRyQ2FsbGJhY2siLCJtZXNzYWdlTGlzdCIsIm1lc3NhZ2VDb2xsZWN0b3IiLCJvcEZ1bmN0aW9uIiwiX2xlbjQiLCJ2YXJpYWJsZU5hbWUiLCJrZXkyIiwicHJvbWlzZUNvbGxlY3RvciIsInJlc29sdmVkTWVzc2FnZUxpc3QiLCJfbSRhY3Rpb25zIiwidHJPYmplY3QiLCJkZWZhdWx0RXhwaXJhdGlvbiIsIm9wdGlvbkRlZmF1bHQiLCJzdXBlckNhbGxiYWNrIiwicmF3VHgiLCJ0eEZpZWxkIiwidHhPYmplY3QiLCJ0cmFuc2FjdGlvbklkIiwiY2hhaW5JZEJ1ZiIsInBhY2tlZENvbnRleHRGcmVlRGF0YSIsInNpZ25CdWYiLCJfY29udGV4dDQiLCJ0cmFuc2FjdGlvbkhlYWRlcnMiLCJfY29udGV4dDIiLCJfYXJyMiIsIl9pMiIsIl9jb250ZXh0MyIsInNpZyIsInBhY2tlZFRyIiwiY29tcHJlc3Npb24iLCJwdXNoVHJhbnNhY3Rpb24iLCJwcm9jZXNzZWRUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uX2lkIiwibW9ja1RyYW5zYWN0aW9uIiwiV3JpdGVBcGkiLCJyZXNlcnZlRnVuY3Rpb25zIiwidHlwZVN0cnVjdCIsIl9wcm9jZXNzQXJncyIsImZpbmRJbmRleCIsIl9zY2hlbWEkdHlwZSIsInNjYXR0ZXIiLCJibG9ja2NoYWluIiwiaG9zdCIsInBvcnQiLCJwcm90b2NvbCIsImVvc2FzaWEiLCJkZXYiLCJQbGF5ZXIiLCJFVkVOVF9OQU1FUyIsIkVSUl9HRVRfU0NBVFRFUl9GQUlMRUQiLCJFUlJfR0VUX0lERU5USVRZX0ZBSUxFRCIsIltvYmplY3QgT2JqZWN0XSIsInN1cGVyIiwiZXZlbnRzIiwiZW5hYmxlRXZlbnRzIiwiX25ldHdvcmtzIiwibmV0d29ya19uYW1lIiwibmV0TmFtZSIsInN0b3JhZ2UiLCJfZW9zQ2xpZW50IiwiY29uZiIsImVtaXRFdmVudCIsImdldElkZW50aXR5IiwiZm9yZ2V0SWRlbnRpdHkiLCJlb3NDbGllbnQiLCJvcmlnaW5DaGFpbklEIiwibG9nb3V0IiwiaWRlbnRpdHkiLCJmaW5kIiwiaGVscCIsImRlZmF1bHRWYWx1ZXMiLCJfZGVmdWFsdHMiLCJwa2V5IiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJFUlJfVFJBTlNDQUxfRkFJTEVEIiwiRXZlbnRIYW5kbGVyIiwiQ2hhaW5IZWxwZXIiLCJFb3NQcm92aWRlciIsImFjY291bnRfbmFtZSIsImdldEFjY291bnRJbmZvIiwiZ2V0QmFsYW5jZSIsInN0ckFzc2V0IiwicXVhbnRpdHkiLCJtZW1vIiwidHJhbnNPcHRpb25zIiwiYXV0aG9yaXR5IiwidHJ4IiwidHJhbnNmZXIiLCJ0cmFuc2NhbCIsImpzb25EYXRhIiwidHhJRCIsIm1heFJvdW5kIiwidGltZVNwYW5NUyIsIndhaXRUeCIsInRhYmxlTmFtZSIsImxvd2VyX2JvdW5kIiwidXBwZXJfYm91bmQiLCJpbmRleF9wb3NpdGlvbiIsImNoZWNrVGFibGUiLCJjaGVja1RhYmxlUmFuZ2UiLCJjaGVja1RhYmxlSXRlbSIsInB1YktleSIsIm5ld2FjY291bnQiLCJjcmVhdG9yIiwib3duZXIiLCJ3YWl0cyIsImRlY2ltYWwiLCJfdmFsIiwiX3N5bSIsIl9kZWNpbWFsIiwidmFsU3RyIiwiYmxhbmtQb3MiLCJzdHJWYWwiLCJzdHJTeW0iLCJkZWNpbWFsUG9zIiwicGFyc2VGbG9hdCIsInN1cHBvcnRlZEV2ZW50cyIsIl9ldmVudE1hcCIsIl9kZWZhdWx0Q2IiLCJzdHJUcmlnZ2VyIiwiYWxlcnQiLCJuZXdFdmVudEtleXMiLCJfc3VwcG9ydGVkRXZlbnRzIiwiZm5DYWxsYmFjayIsImZvck1zIiwiX2VvcyIsImJsb2NrTnVtT3JJZCIsImJsb2NrX251bV9vcl9pZCIsInRhYmxlcyIsImFiaUpzb25Ub0JpbiIsImJpbmFyZ3MiLCJnZXRBY2NvdW50IiwicmVjZW50QWN0aW9ucyIsImdldFJlY2VudEFjdGlvbnMiLCJhY3RzIiwiYWNjb3VudF9hY3Rpb25fc2VxIiwiZ2V0QWN0aW9ucyIsInN0YXJ0UG9zIiwiZW5kUG9zIiwibWF4QWN0aW9uSW5kIiwiZ2V0Q3VycmVuY3lCYWxhbmNlIiwiY2hlY2tUeCIsIl90eElEIiwidHgiLCJnZXRUcmFuc2FjdGlvbiIsIndhaXRGb3JNcyIsImxvd2VyIiwidXBwZXIiLCJwb29sIiwiUmVxdWlyZSIsIl9sIiwiX3UiLCJfcHJvbWlzZSIsImdldFRhYmxlUm93cyIsInRhYmxlIiwiX215SW5kIiwiX21pZCIsInJvd3MiLCJfbSIsImdldFRhYmxlQWJpIiwia2V5X25hbWVzIiwibGFyZ2VzdEluZFZhbCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFB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VUFBQW5tRyxNQUFBIiwiZmlsZSI6ImVvc3BsYXllci5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTAyKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gY29tcGFyZSBhbmQgaXNCdWZmZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcbi8vIG9yaWdpbmFsIG5vdGljZTpcblxuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKHkgPCB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBpc0J1ZmZlcihiKSB7XG4gIGlmIChnbG9iYWwuQnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIoYik7XG4gIH1cbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcik7XG59XG5cbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XG5cbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbygpIHt9Lm5hbWUgPT09ICdmb28nO1xufSgpKTtcbmZ1bmN0aW9uIHBUb1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbn1cbmZ1bmN0aW9uIGlzVmlldyhhcnJidWYpIHtcbiAgaWYgKGlzQnVmZmVyKGFycmJ1ZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGFycmJ1Zik7XG4gIH1cbiAgaWYgKCFhcnJidWYpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGFycmJ1ZiBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGFycmJ1Zi5idWZmZXIgJiYgYXJyYnVmLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLy8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5mdW5jdGlvbiBnZXROYW1lKGZ1bmMpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuICAgIHJldHVybiBmdW5jLm5hbWU7XG4gIH1cbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdO1xufVxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IGdldE5hbWUoc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufTtcblxuLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3JcbnV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcbiAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuZnVuY3Rpb24gaW5zcGVjdChzb21ldGhpbmcpIHtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcbiAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHNvbWV0aGluZyk7XG4gIH1cbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XG4gIHZhciBuYW1lID0gcmF3bmFtZSA/ICc6ICcgKyByYXduYW1lIDogJyc7XG4gIHJldHVybiAnW0Z1bmN0aW9uJyArICBuYW1lICsgJ10nO1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG4gIHJldHVybiB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuYWN0dWFsKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5leHBlY3RlZCksIDEyOCk7XG59XG5cbi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG4vLyB1bmRlcnN0b29kIGJ5IHRoZSBzcGVjLiBJbXBsZW1lbnRhdGlvbnMgb3Igc3ViIG1vZHVsZXMgY2FuIHBhc3Ncbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcbi8vIGlnbm9yZWQuXG5cbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuICBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xuICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cbiAgfSk7XG59XG5cbi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuYXNzZXJ0LmZhaWwgPSBmYWlsO1xuXG4vLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIWd1YXJkLlxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XG4vLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuLy8gbWVzc2FnZV9vcHQpOy4gVG8gdGVzdCBzdHJpY3RseSBmb3IgdGhlIHZhbHVlIHRydWUsIHVzZVxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxuXG5mdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xufVxuYXNzZXJ0Lm9rID0gb2s7XG5cbi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuLy8gPT0uXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcbn07XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT0nLCBhc3NlcnQubm90RXF1YWwpO1xuICB9XG59O1xuXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cbi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcFN0cmljdEVxdWFsJywgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICYmIGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBjb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQpID09PSAwO1xuXG4gIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcbiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxuICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBzdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcbiAgLy8gQXJyYXlCdWZmZXJzIGluIGEgQnVmZmVyIGVhY2ggdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2VcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcbiAgLy8gY29tcGFyaXNvbnMgZm9yIEZsb2F0KkFycmF5cywgdGhvdWdoLCBzaW5jZSBlLmcuICswID09PSAtMCBidXQgdGhlaXJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxuICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICBwVG9TdHJpbmcoYWN0dWFsKSA9PT0gcFRvU3RyaW5nKGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYWN0dWFsLmJ1ZmZlciksXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICE9PSBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbWVtb3MgPSBtZW1vcyB8fCB7YWN0dWFsOiBbXSwgZXhwZWN0ZWQ6IFtdfTtcblxuICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG4gICAgaWYgKGFjdHVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5hY3R1YWwucHVzaChhY3R1YWwpO1xuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuXG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmICh1dGlsLmlzUHJpbWl0aXZlKGEpIHx8IHV0aWwuaXNQcmltaXRpdmUoYikpXG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIGlmIChzdHJpY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xuICB2YXIgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChhSXNBcmdzKSB7XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiLCBzdHJpY3QpO1xuICB9XG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XG4gIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIHZhciBrZXksIGk7XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT09JywgYXNzZXJ0LnN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXG4vLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBhc3NlcnQubm90U3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWQpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUuICBUaGUgaW5zdGFuY2VvZiBjaGVjayBkb2Vzbid0IHdvcmsgZm9yIGFycm93IGZ1bmN0aW9ucy5cbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcbiAgdmFyIGVycm9yO1xuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFjdHVhbDtcblxuICBpZiAodHlwZW9mIGJsb2NrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJibG9ja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XG4gICAgZXhwZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgYWN0dWFsID0gX3RyeUJsb2NrKGJsb2NrKTtcblxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcbiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIHZhciB1c2VyUHJvdmlkZWRNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnO1xuICB2YXIgaXNVbndhbnRlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiB1dGlsLmlzRXJyb3IoYWN0dWFsKTtcbiAgdmFyIGlzVW5leHBlY3RlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgIWV4cGVjdGVkO1xuXG4gIGlmICgoaXNVbndhbnRlZEV4Y2VwdGlvbiAmJlxuICAgICAgdXNlclByb3ZpZGVkTWVzc2FnZSAmJlxuICAgICAgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8XG4gICAgICBpc1VuZXhwZWN0ZWRFeGNlcHRpb24pIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcbiAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcbi8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3ModHJ1ZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcbn07XG5cbi8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJy4vYmlnaScpXG5cbi8vYWRkb25zXG5yZXF1aXJlKCcuL2NvbnZlcnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpZ0ludGVnZXIiLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIGlmICh0aGlzLl9maW5hbCkge1xuICAgIHRoaXMuX19maW5hbCA9IHRoaXMuX2ZpbmFsXG4gICAgdGhpcy5fZmluYWwgPSBudWxsXG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgaW5wdXRFbmMpXG4gIH1cblxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkgcmV0dXJuIHRoaXNcblxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuXG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfVxuXG4gIGRvbmUoZXJyKVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fX2ZpbmFsKCkgfHwgQnVmZmVyLmFsbG9jKDApXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG5cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcblxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbikge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJyk7XG5cbi8qKiBAbmFtZXNwYWNlIGhhc2ggKi9cblxuLyoqIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGFcbiAgICBAYXJnIHtzdHJpbmd9IFtyZXN1bHRFbmNvZGluZyA9IG51bGxdIC0gJ2hleCcsICdiaW5hcnknIG9yICdiYXNlNjQnXG4gICAgQHJldHVybiB7c3RyaW5nfEJ1ZmZlcn0gLSBCdWZmZXIgd2hlbiByZXN1bHRFbmNvZGluZyBpcyBudWxsLCBvciBzdHJpbmdcbiovXG5mdW5jdGlvbiBzaGExKGRhdGEsIHJlc3VsdEVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoZGF0YSkuZGlnZXN0KHJlc3VsdEVuY29kaW5nKTtcbn1cblxuLyoqIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGFcbiAgICBAYXJnIHtzdHJpbmd9IFtyZXN1bHRFbmNvZGluZyA9IG51bGxdIC0gJ2hleCcsICdiaW5hcnknIG9yICdiYXNlNjQnXG4gICAgQHJldHVybiB7c3RyaW5nfEJ1ZmZlcn0gLSBCdWZmZXIgd2hlbiByZXN1bHRFbmNvZGluZyBpcyBudWxsLCBvciBzdHJpbmdcbiovXG5mdW5jdGlvbiBzaGEyNTYoZGF0YSwgcmVzdWx0RW5jb2RpbmcpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGRhdGEpLmRpZ2VzdChyZXN1bHRFbmNvZGluZyk7XG59XG5cbi8qKiBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhXG4gICAgQGFyZyB7c3RyaW5nfSBbcmVzdWx0RW5jb2RpbmcgPSBudWxsXSAtICdoZXgnLCAnYmluYXJ5JyBvciAnYmFzZTY0J1xuICAgIEByZXR1cm4ge3N0cmluZ3xCdWZmZXJ9IC0gQnVmZmVyIHdoZW4gcmVzdWx0RW5jb2RpbmcgaXMgbnVsbCwgb3Igc3RyaW5nXG4qL1xuZnVuY3Rpb24gc2hhNTEyKGRhdGEsIHJlc3VsdEVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTUxMicpLnVwZGF0ZShkYXRhKS5kaWdlc3QocmVzdWx0RW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBIbWFjU0hBMjU2KGJ1ZmZlciwgc2VjcmV0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KCk7XG59XG5cbmZ1bmN0aW9uIHJpcGVtZDE2MChkYXRhKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3JtZDE2MCcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTtcbn1cblxuLy8gZnVuY3Rpb24gaGFzaDE2MChidWZmZXIpIHtcbi8vICAgcmV0dXJuIHJpcGVtZDE2MChzaGEyNTYoYnVmZmVyKSlcbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBoYXNoMjU2KGJ1ZmZlcikge1xuLy8gICByZXR1cm4gc2hhMjU2KHNoYTI1NihidWZmZXIpKVxuLy8gfVxuXG4vL1xuLy8gZnVuY3Rpb24gSG1hY1NIQTUxMihidWZmZXIsIHNlY3JldCkge1xuLy8gICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTUxMicsIHNlY3JldCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbi8vIH1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2hhMTogc2hhMSxcbiAgICBzaGEyNTY6IHNoYTI1NixcbiAgICBzaGE1MTI6IHNoYTUxMixcbiAgICBIbWFjU0hBMjU2OiBIbWFjU0hBMjU2LFxuICAgIHJpcGVtZDE2MDogcmlwZW1kMTYwXG4gICAgLy8gaGFzaDE2MDogaGFzaDE2MCxcbiAgICAvLyBoYXNoMjU2OiBoYXNoMjU2LFxuICAgIC8vIEhtYWNTSEE1MTI6IEhtYWNTSEE1MTJcbn07IiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKlxyXG4gQ29weXJpZ2h0IDIwMTMtMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG5cclxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbGljZW5zZSBieXRlYnVmZmVyLmpzIChjKSAyMDE1IERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiAqIEJhY2tpbmcgYnVmZmVyOiBBcnJheUJ1ZmZlciwgQWNjZXNzb3I6IFVpbnQ4QXJyYXlcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxyXG4gKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2J5dGVidWZmZXIuanMgZm9yIGRldGFpbHNcclxuICovXHJcbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcclxuXHJcbiAgICAvKiBBTUQgKi8gaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lW1wiYW1kXCJdKVxyXG4gICAgICAgIGRlZmluZShbXCJsb25nXCJdLCBmYWN0b3J5KTtcclxuICAgIC8qIENvbW1vbkpTICovIGVsc2UgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlICYmIG1vZHVsZVtcImV4cG9ydHNcIl0pXHJcbiAgICAgICAgbW9kdWxlWydleHBvcnRzJ10gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBMb25nOyB0cnkgeyBMb25nID0gcmVxdWlyZShcImxvbmdcIik7IH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KExvbmcpO1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICAvKiBHbG9iYWwgKi8gZWxzZVxyXG4gICAgICAgIChnbG9iYWxbXCJkY29kZUlPXCJdID0gZ2xvYmFsW1wiZGNvZGVJT1wiXSB8fCB7fSlbXCJCeXRlQnVmZmVyXCJdID0gZmFjdG9yeShnbG9iYWxbXCJkY29kZUlPXCJdW1wiTG9uZ1wiXSk7XHJcblxyXG59KSh0aGlzLCBmdW5jdGlvbihMb25nKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBjbGFzcyBUaGUgc3dpc3MgYXJteSBrbmlmZSBmb3IgYmluYXJ5IGRhdGEgaW4gSmF2YVNjcmlwdC5cclxuICAgICAqIEBleHBvcnRzIEJ5dGVCdWZmZXJcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBjYXBhY2l0eSBJbml0aWFsIGNhcGFjaXR5LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgdmFyIEJ5dGVCdWZmZXIgPSBmdW5jdGlvbihjYXBhY2l0eSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2FwYWNpdHkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBjYXBhY2l0eSA9IEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWTtcclxuICAgICAgICBpZiAodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9IEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU47XHJcbiAgICAgICAgaWYgKHR5cGVvZiBub0Fzc2VydCA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUO1xyXG4gICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgY2FwYWNpdHkgPSBjYXBhY2l0eSB8IDA7XHJcbiAgICAgICAgICAgIGlmIChjYXBhY2l0eSA8IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBjYXBhY2l0eVwiKTtcclxuICAgICAgICAgICAgbGl0dGxlRW5kaWFuID0gISFsaXR0bGVFbmRpYW47XHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gISFub0Fzc2VydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJhY2tpbmcgQXJyYXlCdWZmZXIuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheUJ1ZmZlcn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBjYXBhY2l0eSA9PT0gMCA/IEVNUFRZX0JVRkZFUiA6IG5ldyBBcnJheUJ1ZmZlcihjYXBhY2l0eSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVpbnQ4QXJyYXkgdXRpbGl6ZWQgdG8gbWFuaXB1bGF0ZSB0aGUgYmFja2luZyBidWZmZXIuIEJlY29tZXMgYG51bGxgIGlmIHRoZSBiYWNraW5nIGJ1ZmZlciBoYXMgYSBjYXBhY2l0eSBvZiBgMGAuXHJcbiAgICAgICAgICogQHR5cGUgez9VaW50OEFycmF5fVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnZpZXcgPSBjYXBhY2l0eSA9PT0gMCA/IG51bGwgOiBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFic29sdXRlIHJlYWQvd3JpdGUgb2Zmc2V0LlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNmbGlwXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI2NsZWFyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXJrZWQgb2Zmc2V0LlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNtYXJrXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI3Jlc2V0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tYXJrZWRPZmZzZXQgPSAtMTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWJzb2x1dGUgbGltaXQgb2YgdGhlIGNvbnRhaW5lZCBkYXRhLiBTZXQgdG8gdGhlIGJhY2tpbmcgYnVmZmVyJ3MgY2FwYWNpdHkgdXBvbiBhbGxvY2F0aW9uLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNmbGlwXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI2NsZWFyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5saW1pdCA9IGNhcGFjaXR5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIGJpZyBlbmRpYW4uXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gbGl0dGxlRW5kaWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMsIGRlZmF1bHRzIHRvIGBmYWxzZWAuXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubm9Bc3NlcnQgPSBub0Fzc2VydDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCeXRlQnVmZmVyIHZlcnNpb24uXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuVkVSU0lPTiA9IFwiNS4wLjFcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpdHRsZSBlbmRpYW4gY29uc3RhbnQgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGl0cyBib29sZWFuIHZhbHVlLiBFdmFsdWF0ZXMgdG8gYHRydWVgLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJpZyBlbmRpYW4gY29uc3RhbnQgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGl0cyBib29sZWFuIHZhbHVlLiBFdmFsdWF0ZXMgdG8gYGZhbHNlYC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuQklHX0VORElBTiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBpbml0aWFsIGNhcGFjaXR5IG9mIGAxNmAuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFkgPSAxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgZW5kaWFuZXNzIG9mIGBmYWxzZWAgZm9yIGJpZyBlbmRpYW4uXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTiA9IEJ5dGVCdWZmZXIuQklHX0VORElBTjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgbm8gYXNzZXJ0aW9ucyBmbGFnIG9mIGBmYWxzZWAuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGBMb25nYCBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgNjQtYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciB2YWx1ZS4gTWF5IGJlIGBudWxsYCBpZiBMb25nLmpzIGhhcyBub3QgYmVlbiBsb2FkZWRcclxuICAgICAqICBhbmQgaW50NjQgc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLlxyXG4gICAgICogQHR5cGUgez9Mb25nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2xvbmcuanNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5Mb25nID0gTG9uZyB8fCBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGFsaWFzIEJ5dGVCdWZmZXIucHJvdG90eXBlXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIEJ5dGVCdWZmZXJQcm90b3R5cGUgPSBCeXRlQnVmZmVyLnByb3RvdHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGluZGljYXRvciB1c2VkIHRvIHJlbGlhYmx5IGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCeXRlQnVmZmVyIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLl9faXNCeXRlQnVmZmVyX187XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ5dGVCdWZmZXJQcm90b3R5cGUsIFwiX19pc0J5dGVCdWZmZXJfX1wiLCB7XHJcbiAgICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gaGVscGVyc1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFBcnJheUJ1ZmZlcn1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgRU1QVFlfQlVGRkVSID0gbmV3IEFycmF5QnVmZmVyKDApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RyaW5nLmZyb21DaGFyQ29kZSByZWZlcmVuY2UgZm9yIGNvbXBpbGUtdGltZSByZW5hbWluZy5cclxuICAgICAqIEB0eXBlIHtmdW5jdGlvbiguLi5udW1iZXIpOnN0cmluZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBzb3VyY2UgZnVuY3Rpb24gZm9yIGEgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHMgU3RyaW5nIHRvIHJlYWQgZnJvbVxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKCk6bnVtYmVyfG51bGx9IFNvdXJjZSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY2hhciBjb2RlIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmUgYXJlXHJcbiAgICAgKiAgbm8gbW9yZSBjaGFyYWN0ZXJzIGxlZnQuXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHRoZSBhcmd1bWVudCBpcyBpbnZhbGlkXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc3RyaW5nU291cmNlKHMpIHtcclxuICAgICAgICB2YXIgaT0wOyByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpIDwgcy5sZW5ndGggPyBzLmNoYXJDb2RlQXQoaSsrKSA6IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBkZXN0aW5hdGlvbiBmdW5jdGlvbiBmb3IgYSBzdHJpbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24obnVtYmVyPSk6dW5kZWZpbmVkfHN0cmluZ30gRGVzdGluYXRpb24gZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIHRoZSBuZXh0IGNoYXIgY29kZS5cclxuICAgICAqICBSZXR1cm5zIHRoZSBmaW5hbCBzdHJpbmcgd2hlbiBjYWxsZWQgd2l0aG91dCBhcmd1bWVudHMuXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc3RyaW5nRGVzdGluYXRpb24oKSB7XHJcbiAgICAgICAgdmFyIGNzID0gW10sIHBzID0gW107IHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHMuam9pbignJykrc3RyaW5nRnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY3MpO1xyXG4gICAgICAgICAgICBpZiAoY3MubGVuZ3RoICsgYXJndW1lbnRzLmxlbmd0aCA+IDEwMjQpXHJcbiAgICAgICAgICAgICAgICBwcy5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNzKSksXHJcbiAgICAgICAgICAgICAgICAgICAgY3MubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY3MsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGFjY2Vzc29yIHR5cGUuXHJcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGBCdWZmZXJgIHVuZGVyIG5vZGUuanMsIGBVaW50OEFycmF5YCByZXNwZWN0aXZlbHkgYERhdGFWaWV3YCBpbiB0aGUgYnJvd3NlciAoY2xhc3NlcylcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5hY2Nlc3NvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWxsb2NhdGVzIGEgbmV3IEJ5dGVCdWZmZXIgYmFja2VkIGJ5IGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgY2FwYWNpdHkuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGNhcGFjaXR5IEluaXRpYWwgY2FwYWNpdHkuIERlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFl9LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmFsbG9jYXRlID0gZnVuY3Rpb24oY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJ5dGVCdWZmZXIoY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbmNhdGVuYXRlcyBtdWx0aXBsZSBCeXRlQnVmZmVycyBpbnRvIG9uZS5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjwhQnl0ZUJ1ZmZlcnwhQXJyYXlCdWZmZXJ8IVVpbnQ4QXJyYXl8c3RyaW5nPn0gYnVmZmVycyBCdWZmZXJzIHRvIGNvbmNhdGVuYXRlXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8Ym9vbGVhbik9fSBlbmNvZGluZyBTdHJpbmcgZW5jb2RpbmcgaWYgYGJ1ZmZlcnNgIGNvbnRhaW5zIGEgc3RyaW5nIChcImJhc2U2NFwiLCBcImhleFwiLCBcImJpbmFyeVwiLFxyXG4gICAgICogIGRlZmF1bHRzIHRvIFwidXRmOFwiKVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIgZm9yIHRoZSByZXN1bHRpbmcgQnl0ZUJ1ZmZlci4gRGVmYXVsdHNcclxuICAgICAqICB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMgZm9yIHRoZSByZXN1bHRpbmcgQnl0ZUJ1ZmZlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQ29uY2F0ZW5hdGVkIEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbihidWZmZXJzLCBlbmNvZGluZywgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgICAgICBsaXR0bGVFbmRpYW4gPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjYXBhY2l0eSA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaT0wLCBrPWJ1ZmZlcnMubGVuZ3RoLCBsZW5ndGg7IGk8azsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmICghQnl0ZUJ1ZmZlci5pc0J5dGVCdWZmZXIoYnVmZmVyc1tpXSkpXHJcbiAgICAgICAgICAgICAgICBidWZmZXJzW2ldID0gQnl0ZUJ1ZmZlci53cmFwKGJ1ZmZlcnNbaV0sIGVuY29kaW5nKTtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYnVmZmVyc1tpXS5saW1pdCAtIGJ1ZmZlcnNbaV0ub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gMCkgY2FwYWNpdHkgKz0gbGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FwYWNpdHkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnl0ZUJ1ZmZlcigwLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihjYXBhY2l0eSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCksXHJcbiAgICAgICAgICAgIGJpO1xyXG4gICAgICAgIGk9MDsgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICBiaSA9IGJ1ZmZlcnNbaSsrXTtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYmkubGltaXQgLSBiaS5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmIChsZW5ndGggPD0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGJiLnZpZXcuc2V0KGJpLnZpZXcuc3ViYXJyYXkoYmkub2Zmc2V0LCBiaS5saW1pdCksIGJiLm9mZnNldCk7XHJcbiAgICAgICAgICAgIGJiLm9mZnNldCArPSBsZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJiLmxpbWl0ID0gYmIub2Zmc2V0O1xyXG4gICAgICAgIGJiLm9mZnNldCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdHlwZSBpcyBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAcGFyYW0geyp9IGJiIEJ5dGVCdWZmZXIgdG8gdGVzdFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBpdCBpcyBhIEJ5dGVCdWZmZXIsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyID0gZnVuY3Rpb24oYmIpIHtcclxuICAgICAgICByZXR1cm4gKGJiICYmIGJiW1wiX19pc0J5dGVCdWZmZXJfX1wiXSkgPT09IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBiYWNraW5nIGJ1ZmZlciB0eXBlLlxyXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBgQnVmZmVyYCB1bmRlciBub2RlLmpzLCBgQXJyYXlCdWZmZXJgIGluIHRoZSBicm93c2VyIChjbGFzc2VzKVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLnR5cGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXlCdWZmZXI7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXcmFwcyBhIGJ1ZmZlciBvciBhIHN0cmluZy4gU2V0cyB0aGUgYWxsb2NhdGVkIEJ5dGVCdWZmZXIncyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IHRvIGAwYCBhbmQgaXRzXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9IHRvIHRoZSBsZW5ndGggb2YgdGhlIHdyYXBwZWQgZGF0YS5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZ3whQXJyYXkuPG51bWJlcj59IGJ1ZmZlciBBbnl0aGluZyB0aGF0IGNhbiBiZSB3cmFwcGVkXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8Ym9vbGVhbik9fSBlbmNvZGluZyBTdHJpbmcgZW5jb2RpbmcgaWYgYGJ1ZmZlcmAgaXMgYSBzdHJpbmcgKFwiYmFzZTY0XCIsIFwiaGV4XCIsIFwiYmluYXJ5XCIsIGRlZmF1bHRzIHRvXHJcbiAgICAgKiAgXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEEgQnl0ZUJ1ZmZlciB3cmFwcGluZyBgYnVmZmVyYFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLndyYXAgPSBmdW5jdGlvbihidWZmZXIsIGVuY29kaW5nLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbm9Bc3NlcnQgPSBsaXR0bGVFbmRpYW47XHJcbiAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9IGVuY29kaW5nO1xyXG4gICAgICAgICAgICBlbmNvZGluZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSBcInV0ZjhcIjtcclxuICAgICAgICAgICAgc3dpdGNoIChlbmNvZGluZykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21CYXNlNjQoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImhleFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21IZXgoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21CaW5hcnkoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInV0ZjhcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tVVRGOChidWZmZXIsIGxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGVidWdcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tRGVidWcoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIlVuc3VwcG9ydGVkIGVuY29kaW5nOiBcIitlbmNvZGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1ZmZlciA9PT0gbnVsbCB8fCB0eXBlb2YgYnVmZmVyICE9PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBidWZmZXJcIik7XHJcbiAgICAgICAgdmFyIGJiO1xyXG4gICAgICAgIGlmIChCeXRlQnVmZmVyLmlzQnl0ZUJ1ZmZlcihidWZmZXIpKSB7XHJcbiAgICAgICAgICAgIGJiID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbG9uZS5jYWxsKGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGJiLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICByZXR1cm4gYmI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7IC8vIEV4dHJhY3QgQXJyYXlCdWZmZXIgZnJvbSBVaW50OEFycmF5XHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoMCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkgeyAvLyBBdm9pZCByZWZlcmVuY2VzIHRvIG1vcmUgdGhhbiBvbmUgRU1QVFlfQlVGRkVSXHJcbiAgICAgICAgICAgICAgICBiYi5idWZmZXIgPSBidWZmZXIuYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gYnVmZmVyLmJ5dGVPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBiYi52aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7IC8vIFJldXNlIEFycmF5QnVmZmVyXHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoMCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGJiLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYmIudmlldyA9IGJ1ZmZlci5ieXRlTGVuZ3RoID4gMCA/IG5ldyBVaW50OEFycmF5KGJ1ZmZlcikgOiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYnVmZmVyKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7IC8vIENyZWF0ZSBmcm9tIG9jdGV0c1xyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKGJ1ZmZlci5sZW5ndGgsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxidWZmZXIubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICBiYi52aWV3W2ldID0gYnVmZmVyW2ldO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJ1ZmZlclwiKTsgLy8gT3RoZXJ3aXNlIGZhaWxcclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIHRoZSBhcnJheSBhcyBhIGJpdHNldC5cclxuICAgICAqIEBwYXJhbSB7QXJyYXk8Ym9vbGVhbj59IHZhbHVlIEFycmF5IG9mIGJvb2xlYW5zIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgbGVuZ3RoYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlQml0U2V0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSlcclxuICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgQml0U2V0OiBOb3QgYW4gYXJyYXlcIik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgYml0cyA9IHZhbHVlLmxlbmd0aCxcclxuICAgICAgICAgIGJ5dGVzID0gKGJpdHMgPj4gMyksXHJcbiAgICAgICAgICBiaXQgPSAwLFxyXG4gICAgICAgICAgaztcclxuXHJcbiAgICAgIG9mZnNldCArPSB0aGlzLndyaXRlVmFyaW50MzIoYml0cyxvZmZzZXQpO1xyXG5cclxuICAgICAgd2hpbGUoYnl0ZXMtLSkge1xyXG4gICAgICAgIGsgPSAoISF2YWx1ZVtiaXQrK10gJiAxKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCAxKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCAyKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCAzKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA0KSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA1KSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA2KSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA3KTtcclxuICAgICAgICB0aGlzLndyaXRlQnl0ZShrLG9mZnNldCsrKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYoYml0IDwgYml0cykge1xyXG4gICAgICAgIHZhciBtID0gMDsgayA9IDA7XHJcbiAgICAgICAgd2hpbGUoYml0IDwgYml0cykgayA9IGsgfCAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgKG0rKykpO1xyXG4gICAgICAgIHRoaXMud3JpdGVCeXRlKGssb2Zmc2V0KyspO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIEJpdFNldCBhcyBhbiBhcnJheSBvZiBib29sZWFucy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGBsZW5ndGhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkQml0U2V0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcblxyXG4gICAgICB2YXIgcmV0ID0gdGhpcy5yZWFkVmFyaW50MzIob2Zmc2V0KSxcclxuICAgICAgICAgIGJpdHMgPSByZXQudmFsdWUsXHJcbiAgICAgICAgICBieXRlcyA9IChiaXRzID4+IDMpLFxyXG4gICAgICAgICAgYml0ID0gMCxcclxuICAgICAgICAgIHZhbHVlID0gW10sXHJcbiAgICAgICAgICBrO1xyXG5cclxuICAgICAgb2Zmc2V0ICs9IHJldC5sZW5ndGg7XHJcblxyXG4gICAgICB3aGlsZShieXRlcy0tKSB7XHJcbiAgICAgICAgayA9IHRoaXMucmVhZEJ5dGUob2Zmc2V0KyspO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDAxKTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHgwMik7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4MDQpO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDA4KTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHgxMCk7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4MjApO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDQwKTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHg4MCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKGJpdCA8IGJpdHMpIHtcclxuICAgICAgICB2YXIgbSA9IDA7XHJcbiAgICAgICAgayA9IHRoaXMucmVhZEJ5dGUob2Zmc2V0KyspO1xyXG4gICAgICAgIHdoaWxlKGJpdCA8IGJpdHMpIHZhbHVlW2JpdCsrXSA9ICEhKChrID4+IChtKyspKSAmIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJ5dGVzLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBOdW1iZXIgb2YgYnl0ZXMgdG8gcmVhZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYGxlbmd0aGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIGxlbmd0aCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiK2xlbmd0aCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2xpY2UgPSB0aGlzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHNsaWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIHBheWxvYWQgb2YgYnl0ZXMuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjYXBwZW5kfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcnwhQXJyYXlCdWZmZXJ8IVVpbnQ4QXJyYXl8c3RyaW5nfSBzb3VyY2UgRGF0YSB0byB3cml0ZS4gSWYgYHNvdXJjZWAgaXMgYSBCeXRlQnVmZmVyLCBpdHMgb2Zmc2V0c1xyXG4gICAgICogIHdpbGwgYmUgbW9kaWZpZWQgYWNjb3JkaW5nIHRvIHRoZSBwZXJmb3JtZWQgcmVhZCBvcGVyYXRpb24uXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGVuY29kaW5nIEVuY29kaW5nIGlmIGBkYXRhYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG8gXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUJ5dGVzID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5hcHBlbmQ7XHJcblxyXG4gICAgLy8gdHlwZXMvaW50cy9pbnQ4XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gOGJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSB8PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICB2YXIgY2FwYWNpdHkwID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MClcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTAgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTAgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gMTtcbiAgICAgICAgdGhpcy52aWV3W29mZnNldF0gPSB2YWx1ZTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlSW50OH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVCeXRlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDEgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlld1tvZmZzZXRdO1xyXG4gICAgICAgIGlmICgodmFsdWUgJiAweDgwKSA9PT0gMHg4MCkgdmFsdWUgPSAtKDB4RkYgLSB2YWx1ZSArIDEpOyAvLyBDYXN0IHRvIHNpZ25lZFxyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIDhiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRCeXRlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50ODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiA4Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDggPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgdmFyIGNhcGFjaXR5MSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDE7XG4gICAgICAgIHRoaXMudmlld1tvZmZzZXRdID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gOGJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlVWludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDggPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiA4Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50OCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDEgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlld1tvZmZzZXRdO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIDhiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVWludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVSW50OCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVpbnQ4O1xyXG5cclxuICAgIC8vIHR5cGVzL2ludHMvaW50MTZcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIG9yIGB2YWx1ZWAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQxNiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgdmFyIGNhcGFjaXR5MiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTIpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkyICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkyIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDI7XG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlICYgMHhGRjAwKSA+Pj4gODtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICB2YWx1ZSAmIDB4MDBGRjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0XSAgID0gKHZhbHVlICYgMHhGRjAwKSA+Pj4gODtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICB2YWx1ZSAmIDB4MDBGRjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAxNmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUludDE2fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIG9yIGB2YWx1ZWAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVTaG9ydCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMTZiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50MTYgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAyID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMitcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB2YWx1ZSAgPSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCAgXSA8PCA4O1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZhbHVlICYgMHg4MDAwKSA9PT0gMHg4MDAwKSB2YWx1ZSA9IC0oMHhGRkZGIC0gdmFsdWUgKyAxKTsgLy8gQ2FzdCB0byBzaWduZWRcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRTaG9ydCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDE2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBvciBgdmFsdWVgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDE2ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgIHZhciBjYXBhY2l0eTMgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkzKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MyAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MyA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSAyO1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSAmIDB4RkYwMCkgPj4+IDg7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgdmFsdWUgJiAweDAwRkY7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldF0gICA9ICh2YWx1ZSAmIDB4RkYwMCkgPj4+IDg7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAgdmFsdWUgJiAweDAwRkY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVpbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBvciBgdmFsdWVgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDE2ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MTYgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAyID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMitcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB2YWx1ZSAgPSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCAgXSA8PCA4O1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDE2Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZFVpbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVSW50MTYgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MTY7XHJcblxyXG4gICAgLy8gdHlwZXMvaW50cy9pbnQzMlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMzJiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQzMiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgdmFyIGNhcGFjaXR5NCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTQpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHk0ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHk0IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDQ7XG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICh2YWx1ZSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICB2YWx1ZSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAodmFsdWUgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9ICh2YWx1ZSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgdmFsdWUgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUludDMyfS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrNCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgIHZhbHVlIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgIHZhbHVlICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgfD0gMDsgLy8gQ2FzdCB0byBzaWduZWRcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQzMn0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDMyYml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVaW50MzIgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgdmFyIGNhcGFjaXR5NSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTUpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHk1ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHk1IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDQ7XG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICh2YWx1ZSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICB2YWx1ZSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAodmFsdWUgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9ICh2YWx1ZSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgdmFsdWUgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlVWludDMyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDMyID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrNCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgIHZhbHVlIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgIHZhbHVlICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSAzMmJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRVaW50MzJ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVUludDMyID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDMyO1xyXG5cclxuICAgIC8vIHR5cGVzL2ludHMvaW50NjRcclxuXHJcbiAgICBpZiAoTG9uZykge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSA2NGJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50NjQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoISh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIExvbmcpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIgb3IgTG9uZylcIik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICB2YXIgY2FwYWNpdHk2ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTYpXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NiAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NiA6IG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgLT0gODtcbiAgICAgICAgICAgIHZhciBsbyA9IHZhbHVlLmxvdyxcclxuICAgICAgICAgICAgICAgIGhpID0gdmFsdWUuaGlnaDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gKGxvID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAobG8gPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChsbyA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gIGxvICAgICAgICAgJiAweEZGO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9IChoaSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGhpID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoaGkgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICBoaSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gKGhpID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoaGkgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChoaSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gIGhpICAgICAgICAgJiAweEZGO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9IChsbyA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGxvID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAobG8gPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICBsbyAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVJbnQ2NH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUxvbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50NjQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA4ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbG8gPSAwLFxyXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgICAgIGxvICA9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgMTY7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAgODtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgICAgIGxvICs9IHRoaXMudmlld1tvZmZzZXQrM10gPDwgMjQgPj4+IDA7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICBoaSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgICAgICBoaSArPSB0aGlzLnZpZXdbb2Zmc2V0KzNdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhpICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAgODtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzNdO1xuICAgICAgICAgICAgICAgIGhpICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICBsbyAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgIDg7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgICAgICBsbyArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBuZXcgTG9uZyhsbywgaGksIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEludDY0fS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZExvbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ2NDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICAgICAgdmFyIGNhcGFjaXR5NyA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk3KVxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTcgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTcgOiBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0IC09IDg7XG4gICAgICAgICAgICB2YXIgbG8gPSB2YWx1ZS5sb3csXHJcbiAgICAgICAgICAgICAgICBoaSA9IHZhbHVlLmhpZ2g7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9IChsbyA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGxvID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAobG8gPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICBsbyAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAoaGkgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChoaSA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGhpID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgaGkgICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9IChoaSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGhpID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoaGkgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICBoaSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAobG8gPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChsbyA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGxvID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgbG8gICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVVaW50NjR9LlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVSW50NjQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDY0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50NjQgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgOCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis4K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxvID0gMCxcclxuICAgICAgICAgICAgICAgIGhpID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgICAgICBsbyAgPSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgICAgICBsbyArPSB0aGlzLnZpZXdbb2Zmc2V0KzNdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgaGkgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQgIF07XG4gICAgICAgICAgICAgICAgaGkgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoaSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgIDg7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgICAgICBoaSArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgbG8gID0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrM107XG4gICAgICAgICAgICAgICAgbG8gKz0gdGhpcy52aWV3W29mZnNldCAgXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbmV3IExvbmcobG8sIGhpLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVWludDY0fS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVJbnQ2NCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVpbnQ2NDtcclxuXHJcbiAgICB9IC8vIExvbmdcclxuXHJcblxyXG4gICAgLy8gdHlwZXMvZmxvYXRzL2Zsb2F0MzJcclxuXHJcbiAgICAvKlxyXG4gICAgIGllZWU3NTQgLSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcclxuXHJcbiAgICAgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcblxyXG4gICAgIENvcHlyaWdodCAoYykgRmVyb3NzIEFib3VraGFkaWplaFxyXG5cclxuICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiAgICAgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gICAgIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuICAgICB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbiAgICAgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiAgICAgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiAgICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuICAgICBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gICAgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuICAgICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuICAgICBUSEUgU09GVFdBUkUuXHJcbiAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYW4gSUVFRTc1NCBmbG9hdCBmcm9tIGEgYnl0ZSBhcnJheS5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5fSBidWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMRVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1MZW5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXNcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaWVlZTc1NF9yZWFkKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcclxuICAgICAgICB2YXIgZSwgbSxcclxuICAgICAgICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcclxuICAgICAgICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcclxuICAgICAgICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXHJcbiAgICAgICAgICAgIG5CaXRzID0gLTcsXHJcbiAgICAgICAgICAgIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMCxcclxuICAgICAgICAgICAgZCA9IGlzTEUgPyAtMSA6IDEsXHJcbiAgICAgICAgICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XHJcblxyXG4gICAgICAgIGkgKz0gZDtcclxuXHJcbiAgICAgICAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XHJcbiAgICAgICAgcyA+Pj0gKC1uQml0cyk7XHJcbiAgICAgICAgbkJpdHMgKz0gZUxlbjtcclxuICAgICAgICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxyXG5cclxuICAgICAgICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKTtcclxuICAgICAgICBlID4+PSAoLW5CaXRzKTtcclxuICAgICAgICBuQml0cyArPSBtTGVuO1xyXG4gICAgICAgIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XHJcblxyXG4gICAgICAgIGlmIChlID09PSAwKSB7XHJcbiAgICAgICAgICAgIGUgPSAxIC0gZUJpYXM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pO1xyXG4gICAgICAgICAgICBlID0gZSAtIGVCaWFzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiBJRUVFNzU0IGZsb2F0IHRvIGEgYnl0ZSBhcnJheS5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5fSBidWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0xFXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbUxlblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlc1xyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGllZWU3NTRfd3JpdGUoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcclxuICAgICAgICB2YXIgZSwgbSwgYyxcclxuICAgICAgICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcclxuICAgICAgICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcclxuICAgICAgICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXHJcbiAgICAgICAgICAgIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKSxcclxuICAgICAgICAgICAgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpLFxyXG4gICAgICAgICAgICBkID0gaXNMRSA/IDEgOiAtMSxcclxuICAgICAgICAgICAgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMDtcclxuXHJcbiAgICAgICAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMDtcclxuICAgICAgICAgICAgZSA9IGVNYXg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBlLS07XHJcbiAgICAgICAgICAgICAgICBjICo9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBydCAvIGM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBlKys7XHJcbiAgICAgICAgICAgICAgICBjIC89IDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xyXG4gICAgICAgICAgICAgICAgbSA9IDA7XHJcbiAgICAgICAgICAgICAgICBlID0gZU1heDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xyXG4gICAgICAgICAgICAgICAgZSA9IGUgKyBlQmlhcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcclxuICAgICAgICAgICAgICAgIGUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxyXG5cclxuICAgICAgICBlID0gKGUgPDwgbUxlbikgfCBtO1xyXG4gICAgICAgIGVMZW4gKz0gbUxlbjtcclxuICAgICAgICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XHJcblxyXG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDMyYml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGEgbnVtYmVyKVwiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB2YXIgY2FwYWNpdHk4ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5OClcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTggKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTggOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gNDtcbiAgICAgICAgaWVlZTc1NF93cml0ZSh0aGlzLnZpZXcsIHZhbHVlLCBvZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuLCAyMywgNCk7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBmbG9hdC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUZsb2F0MzJ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0MzI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdDMyID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gaWVlZTc1NF9yZWFkKHRoaXMudmlldywgb2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiwgMjMsIDQpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgZmxvYXQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEZsb2F0MzJ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEZsb2F0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkRmxvYXQzMjtcclxuXHJcbiAgICAvLyB0eXBlcy9mbG9hdHMvZmxvYXQ2NFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgNjRiaXQgZmxvYXQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0NjQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYSBudW1iZXIpXCIpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgIHZhciBjYXBhY2l0eTkgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk5KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5OSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5OSA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSA4O1xuICAgICAgICBpZWVlNzU0X3dyaXRlKHRoaXMudmlldywgdmFsdWUsIG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4sIDUyLCA4KTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDg7XG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDY0Yml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlRmxvYXQ2NH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlRG91YmxlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0NjQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDY0Yml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdDY0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgOCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gaWVlZTc1NF9yZWFkKHRoaXMudmlldywgb2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiwgNTIsIDgpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgNjRiaXQgZmxvYXQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEZsb2F0NjR9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZERvdWJsZSA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEZsb2F0NjQ7XHJcblxyXG5cclxuICAgIC8vIHR5cGVzL3ZhcmludHMvdmFyaW50MzJcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuTUFYX1ZBUklOVDMyX0JZVEVTID0gNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQgdG8gc3RvcmUgYSAzMmJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBlbmNvZGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBieXRlcyByZXF1aXJlZC4gQ2FwcGVkIHRvIHtAbGluayBCeXRlQnVmZmVyLk1BWF9WQVJJTlQzMl9CWVRFU31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVWYXJpbnQzMiA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL2lvL2NvZGVkX3N0cmVhbS5jY1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUgPj4+IDA7XHJcbiAgICAgICAgICAgICBpZiAodmFsdWUgPCAxIDw8IDcgKSByZXR1cm4gMTtcclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IDEgPDwgMTQpIHJldHVybiAyO1xyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMSA8PCAyMSkgcmV0dXJuIDM7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPCAxIDw8IDI4KSByZXR1cm4gNDtcclxuICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFppZ3phZyBlbmNvZGVzIGEgc2lnbmVkIDMyYml0IGludGVnZXIgc28gdGhhdCBpdCBjYW4gYmUgZWZmZWN0aXZlbHkgdXNlZCB3aXRoIHZhcmludCBlbmNvZGluZy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFNpZ25lZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCB6aWd6YWcgZW5jb2RlZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuemlnWmFnRW5jb2RlMzIgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuICgoKG4gfD0gMCkgPDwgMSkgXiAobiA+PiAzMSkpID4+PiAwOyAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvd2lyZV9mb3JtYXRfbGl0ZS5oXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIHppZ3phZyBlbmNvZGVkIHNpZ25lZCAzMmJpdCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVW5zaWduZWQgemlnemFnIGVuY29kZWQgMzJiaXQgaW50ZWdlclxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIDMyYml0IGludGVnZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGUzMiA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gKChuID4+PiAxKSBeIC0obiAmIDEpKSB8IDA7IC8vIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZhcmludDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSB8PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzaXplID0gQnl0ZUJ1ZmZlci5jYWxjdWxhdGVWYXJpbnQzMih2YWx1ZSksXHJcbiAgICAgICAgICAgIGI7XHJcbiAgICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgICAgIHZhciBjYXBhY2l0eTEwID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTApXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTAgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gc2l6ZTtcbiAgICAgICAgdmFsdWUgPj4+PSAwO1xyXG4gICAgICAgIHdoaWxlICh2YWx1ZSA+PSAweDgwKSB7XHJcbiAgICAgICAgICAgIGIgPSAodmFsdWUgJiAweDdmKSB8IDB4ODA7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSBiO1xyXG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSB2YWx1ZTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSB6aWctemFnIGVuY29kZWQgKHNpZ25lZCkgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgYG9mZnNldGAgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWYXJpbnQzMlppZ1phZyA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVZhcmludDMyKEJ5dGVCdWZmZXIuemlnWmFnRW5jb2RlMzIodmFsdWUpLCBvZmZzZXQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcnwhe3ZhbHVlOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHZhbHVlIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHZhbHVlIHJlYWRcclxuICAgICAqICBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludC4gSGFzIGEgcHJvcGVydHkgYHRydW5jYXRlZCA9IHRydWVgIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggZGF0YSBhdmFpbGFibGVcclxuICAgICAqICB0byBmdWxseSBkZWNvZGUgdGhlIHZhcmludC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYyA9IDAsXHJcbiAgICAgICAgICAgIHZhbHVlID0gMCA+Pj4gMCxcclxuICAgICAgICAgICAgYjtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCAmJiBvZmZzZXQgPiB0aGlzLmxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXCJUcnVuY2F0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICBlcnJbJ3RydW5jYXRlZCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiID0gdGhpcy52aWV3W29mZnNldCsrXTtcclxuICAgICAgICAgICAgaWYgKGMgPCA1KVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgfD0gKGIgJiAweDdmKSA8PCAoNypjKTtcclxuICAgICAgICAgICAgKytjO1xyXG4gICAgICAgIH0gd2hpbGUgKChiICYgMHg4MCkgIT09IDApO1xyXG4gICAgICAgIHZhbHVlIHw9IDA7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwidmFsdWVcIjogdmFsdWUsXHJcbiAgICAgICAgICAgIFwibGVuZ3RoXCI6IGNcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIChzaWduZWQpIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8IXt2YWx1ZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkXHJcbiAgICAgKiAgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50MzJaaWdaYWcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgdmFsID0gdGhpcy5yZWFkVmFyaW50MzIob2Zmc2V0KTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgIHZhbFtcInZhbHVlXCJdID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGUzMih2YWxbXCJ2YWx1ZVwiXSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB2YWwgPSBCeXRlQnVmZmVyLnppZ1phZ0RlY29kZTMyKHZhbCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gdHlwZXMvdmFyaW50cy92YXJpbnQ2NFxyXG5cclxuICAgIGlmIChMb25nKSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1heGltdW0gbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIGEgNjRiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKiBAY29uc3RcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UNjRfQllURVMgPSAxMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byBlbmNvZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQuIENhcHBlZCB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UNjRfQllURVN9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50NjQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi9pby9jb2RlZF9zdHJlYW0uY2NcclxuICAgICAgICAgICAgdmFyIHBhcnQwID0gdmFsdWUudG9JbnQoKSA+Pj4gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQxID0gdmFsdWUuc2hpZnRSaWdodFVuc2lnbmVkKDI4KS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgcGFydDIgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoNTYpLnRvSW50KCkgPj4+IDA7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0MiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydDEgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0MCA8IDEgPDwgMTQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0MCA8IDEgPDwgNyA/IDEgOiAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQwIDwgMSA8PCAyMSA/IDMgOiA0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydDEgPCAxIDw8IDE0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydDEgPCAxIDw8IDcgPyA1IDogNjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0MSA8IDEgPDwgMjEgPyA3IDogODtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFydDIgPCAxIDw8IDcgPyA5IDogMTA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWmlnemFnIGVuY29kZXMgYSBzaWduZWQgNjRiaXQgaW50ZWdlciBzbyB0aGF0IGl0IGNhbiBiZSBlZmZlY3RpdmVseSB1c2VkIHdpdGggdmFyaW50IGVuY29kaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBTaWduZWQgbG9uZ1xyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ30gVW5zaWduZWQgemlnemFnIGVuY29kZWQgbG9uZ1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTY0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLnVuc2lnbmVkICE9PSBmYWxzZSkgdmFsdWUgPSB2YWx1ZS50b1NpZ25lZCgpO1xuICAgICAgICAgICAgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL3dpcmVfZm9ybWF0X2xpdGUuaFxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc2hpZnRMZWZ0KDEpLnhvcih2YWx1ZS5zaGlmdFJpZ2h0KDYzKSkudG9VbnNpZ25lZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYSB6aWd6YWcgZW5jb2RlZCBzaWduZWQgNjRiaXQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcn0gdmFsdWUgVW5zaWduZWQgemlnemFnIGVuY29kZWQgbG9uZyBvciBKYXZhU2NyaXB0IG51bWJlclxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2lnbmVkIGxvbmdcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS51bnNpZ25lZCAhPT0gZmFsc2UpIHZhbHVlID0gdmFsdWUudG9TaWduZWQoKTtcbiAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNoaWZ0UmlnaHRVbnNpZ25lZCgxKS54b3IodmFsdWUuYW5kKExvbmcuT05FKS50b1NpZ25lZCgpLm5lZ2F0ZSgpKS50b1NpZ25lZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfExvbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSBgdGhpc2AgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZhcmludDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUudW5zaWduZWQgIT09IGZhbHNlKSB2YWx1ZSA9IHZhbHVlLnRvU2lnbmVkKCk7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50NjQodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgcGFydDAgPSB2YWx1ZS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgcGFydDEgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoMjgpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MiA9IHZhbHVlLnNoaWZ0UmlnaHRVbnNpZ25lZCg1NikudG9JbnQoKSA+Pj4gMDtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgICAgICAgICB2YXIgY2FwYWNpdHkxMSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxMSlcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTEgOiBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0IC09IHNpemU7XG4gICAgICAgICAgICBzd2l0Y2ggKHNpemUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHRoaXMudmlld1tvZmZzZXQrOV0gPSAocGFydDIgPj4+ICA3KSAmIDB4MDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDkgOiB0aGlzLnZpZXdbb2Zmc2V0KzhdID0gc2l6ZSAhPT0gOSA/IChwYXJ0MiAgICAgICApIHwgMHg4MCA6IChwYXJ0MiAgICAgICApICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgOCA6IHRoaXMudmlld1tvZmZzZXQrN10gPSBzaXplICE9PSA4ID8gKHBhcnQxID4+PiAyMSkgfCAweDgwIDogKHBhcnQxID4+PiAyMSkgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3IDogdGhpcy52aWV3W29mZnNldCs2XSA9IHNpemUgIT09IDcgPyAocGFydDEgPj4+IDE0KSB8IDB4ODAgOiAocGFydDEgPj4+IDE0KSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDYgOiB0aGlzLnZpZXdbb2Zmc2V0KzVdID0gc2l6ZSAhPT0gNiA/IChwYXJ0MSA+Pj4gIDcpIHwgMHg4MCA6IChwYXJ0MSA+Pj4gIDcpICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgNSA6IHRoaXMudmlld1tvZmZzZXQrNF0gPSBzaXplICE9PSA1ID8gKHBhcnQxICAgICAgICkgfCAweDgwIDogKHBhcnQxICAgICAgICkgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0IDogdGhpcy52aWV3W29mZnNldCszXSA9IHNpemUgIT09IDQgPyAocGFydDAgPj4+IDIxKSB8IDB4ODAgOiAocGFydDAgPj4+IDIxKSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMgOiB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gc2l6ZSAhPT0gMyA/IChwYXJ0MCA+Pj4gMTQpIHwgMHg4MCA6IChwYXJ0MCA+Pj4gMTQpICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMiA6IHRoaXMudmlld1tvZmZzZXQrMV0gPSBzaXplICE9PSAyID8gKHBhcnQwID4+PiAgNykgfCAweDgwIDogKHBhcnQwID4+PiAgNykgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxIDogdGhpcy52aWV3W29mZnNldCAgXSA9IHNpemUgIT09IDEgPyAocGFydDAgICAgICAgKSB8IDB4ODAgOiAocGFydDAgICAgICAgKSAmIDB4N0Y7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzaXplO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIHppZy16YWcgZW5jb2RlZCA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnxMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gYHRoaXNgIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4uXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWYXJpbnQ2NFppZ1phZyA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVWYXJpbnQ2NChCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTY0KHZhbHVlKSwgb2Zmc2V0KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLiBSZXF1aXJlcyBMb25nLmpzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ3whe3ZhbHVlOiBMb25nLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkIGFuZFxyXG4gICAgICAgICAqICB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWYXJpbnQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvaW8vY29kZWRfc3RyZWFtLmNjXHJcbiAgICAgICAgICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgICAgIHBhcnQwID0gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQxID0gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQyID0gMCxcclxuICAgICAgICAgICAgICAgIGIgID0gMDtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwICA9IChiICYgMHg3RikgICAgICA7IGlmICggYiAmIDB4ODAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwIHw9IChiICYgMHg3RikgPDwgIDc7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwIHw9IChiICYgMHg3RikgPDwgMTQ7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwIHw9IChiICYgMHg3RikgPDwgMjE7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxICA9IChiICYgMHg3RikgICAgICA7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxIHw9IChiICYgMHg3RikgPDwgIDc7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxIHw9IChiICYgMHg3RikgPDwgMTQ7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxIHw9IChiICYgMHg3RikgPDwgMjE7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQyICA9IChiICYgMHg3RikgICAgICA7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQyIHw9IChiICYgMHg3RikgPDwgIDc7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJCdWZmZXIgb3ZlcnJ1blwiKTsgfX19fX19fX19fVxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBMb25nLmZyb21CaXRzKHBhcnQwIHwgKHBhcnQxIDw8IDI4KSwgKHBhcnQxID4+PiA0KSB8IChwYXJ0MikgPDwgMjQsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xlbmd0aCc6IG9mZnNldC1zdGFydFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLiBSZXF1aXJlcyBMb25nLmpzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ3whe3ZhbHVlOiBMb25nLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkIGFuZFxyXG4gICAgICAgICAqICB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWYXJpbnQ2NFppZ1phZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpcy5yZWFkVmFyaW50NjQob2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKHZhbCAmJiB2YWxbJ3ZhbHVlJ10gaW5zdGFuY2VvZiBMb25nKVxyXG4gICAgICAgICAgICAgICAgdmFsW1widmFsdWVcIl0gPSBCeXRlQnVmZmVyLnppZ1phZ0RlY29kZTY0KHZhbFtcInZhbHVlXCJdKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdmFsID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCh2YWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfSAvLyBMb25nXHJcblxyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvY3N0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgTlVMTC10ZXJtaW5hdGVkIFVURjggZW5jb2RlZCBzdHJpbmcuIEZvciB0aGlzIHRvIHdvcmsgdGhlIHNwZWNpZmllZCBzdHJpbmcgbXVzdCBub3QgY29udGFpbiBhbnkgTlVMTFxyXG4gICAgICogIGNoYXJhY3RlcnMgaXRzZWxmLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIGNvbnRhaW5lZCBpbiBgc3RyYCArIDEgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlQ1N0cmluZyA9IGZ1bmN0aW9uKHN0ciwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICBrID0gc3RyLmxlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgZm9yIChpPTA7IGk8azsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgc3RyOiBDb250YWlucyBOVUxMLWNoYXJhY3RlcnNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVURjggc3RyaW5ncyBkbyBub3QgY29udGFpbiB6ZXJvIGJ5dGVzIGluIGJldHdlZW4gZXhjZXB0IGZvciB0aGUgemVybyBjaGFyYWN0ZXIsIHNvOlxyXG4gICAgICAgIGsgPSB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpKVsxXTtcclxuICAgICAgICBvZmZzZXQgKz0gaysxO1xuICAgICAgICB2YXIgY2FwYWNpdHkxMiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEyKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTIgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTEyIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IGsrMTtcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSAwO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgTlVMTC10ZXJtaW5hdGVkIFVURjggZW5jb2RlZCBzdHJpbmcuIEZvciB0aGlzIHRvIHdvcmsgdGhlIHN0cmluZyByZWFkIG11c3Qgbm90IGNvbnRhaW4gYW55IE5VTEwgY2hhcmFjdGVyc1xyXG4gICAgICogIGl0c2VsZi5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCF7c3RyaW5nOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHN0cmluZyByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBzdHJpbmdcclxuICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRDU3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMSA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICB0ZW1wO1xyXG4gICAgICAgIC8vIFVURjggc3RyaW5ncyBkbyBub3QgY29udGFpbiB6ZXJvIGJ5dGVzIGluIGJldHdlZW4gZXhjZXB0IGZvciB0aGUgemVybyBjaGFyYWN0ZXIgaXRzZWxmLCBzbzpcclxuICAgICAgICB2YXIgc2QsIGIgPSAtMTtcclxuICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoYiA9PT0gMCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIrb2Zmc2V0K1wiIDwgXCIrdGhpcy5saW1pdCk7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdO1xyXG4gICAgICAgICAgICByZXR1cm4gYiA9PT0gMCA/IG51bGwgOiBiO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgc2QgPSBzdHJpbmdEZXN0aW5hdGlvbigpLCB0cnVlKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcInN0cmluZ1wiOiBzZCgpLFxyXG4gICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvaXN0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgbGVuZ3RoIGFzIHVpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN3cml0ZVZhcmludDMyXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJU3RyaW5nID0gZnVuY3Rpb24oc3RyLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgIGs7XHJcbiAgICAgICAgayA9IHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0ciksIHRoaXMubm9Bc3NlcnQpWzFdO1xyXG4gICAgICAgIG9mZnNldCArPSA0K2s7XG4gICAgICAgIHZhciBjYXBhY2l0eTEzID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTMpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMyAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTMgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gNCtrO1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAoayA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoayA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoayA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgayAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAoayA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoayA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoayA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgayAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4KHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSBiO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gc3RhcnQgKyA0ICsgaylcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IFRydW5jYXRlZCBkYXRhLCBcIitvZmZzZXQrXCIgPT0gXCIrKG9mZnNldCs0K2spKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSBsZW5ndGggYXMgdWludDMyIHByZWZpeGVkIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgKiAgcmVhZCBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNyZWFkVmFyaW50MzJcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSVN0cmluZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis0K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgICAgICB2YXIgbGVuID0gdGhpcy5yZWFkVWludDMyKG9mZnNldCk7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMucmVhZFVURjhTdHJpbmcobGVuLCBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMsIG9mZnNldCArPSA0KTtcclxuICAgICAgICBvZmZzZXQgKz0gc3RyWydsZW5ndGgnXTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJbJ3N0cmluZyddO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnc3RyaW5nJzogc3RyWydzdHJpbmcnXSxcclxuICAgICAgICAgICAgICAgICdsZW5ndGgnOiBvZmZzZXQgLSBzdGFydFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gdHlwZXMvc3RyaW5ncy91dGY4c3RyaW5nXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRyaWNzIHJlcHJlc2VudGluZyBudW1iZXIgb2YgVVRGOCBjaGFyYWN0ZXJzLiBFdmFsdWF0ZXMgdG8gYGNgLlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlMgPSAnYyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRyaWNzIHJlcHJlc2VudGluZyBudW1iZXIgb2YgYnl0ZXMuIEV2YWx1YXRlcyB0byBgYmAuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuTUVUUklDU19CWVRFUyA9ICdiJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVURjhTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBrO1xyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSlbMV07XHJcbiAgICAgICAgb2Zmc2V0ICs9IGs7XG4gICAgICAgIHZhciBjYXBhY2l0eTE0ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTQpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxNCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTQgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gaztcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVURjhTdHJpbmd9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlU3RyaW5nID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVURjhTdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgVVRGOCBjaGFyYWN0ZXJzIG9mIGEgc3RyaW5nLiBKYXZhU2NyaXB0IGl0c2VsZiB1c2VzIFVURi0xNiwgc28gdGhhdCBhIHN0cmluZydzXHJcbiAgICAgKiAgYGxlbmd0aGAgcHJvcGVydHkgZG9lcyBub3QgcmVmbGVjdCBpdHMgYWN0dWFsIFVURjggc2l6ZSBpZiBpdCBjb250YWlucyBjb2RlIHBvaW50cyBsYXJnZXIgdGhhbiAweEZGRkYuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjYWxjdWxhdGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGNoYXJhY3RlcnNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVVVEY4Q2hhcnMgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSlbMF07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgb2YgYSBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjYWxjdWxhdGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGJ5dGVzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVVRGOEJ5dGVzID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0cikpWzFdO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIG9mIGEgc3RyaW5nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyLmNhbGN1bGF0ZVVURjhCeXRlc30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNhbGN1bGF0ZVxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gTnVtYmVyIG9mIFVURjggYnl0ZXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVTdHJpbmcgPSBCeXRlQnVmZmVyLmNhbGN1bGF0ZVVURjhCeXRlcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIE51bWJlciBvZiBjaGFyYWN0ZXJzIG9yIGJ5dGVzIHRvIHJlYWQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1ldHJpY3MgTWV0cmljcyBzcGVjaWZ5aW5nIHdoYXQgYGxlbmd0aGAgaXMgbWVhbnQgdG8gY291bnQuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSU30uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgKiAgcmVhZCBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVVRGOFN0cmluZyA9IGZ1bmN0aW9uKGxlbmd0aCwgbWV0cmljcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRyaWNzID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBtZXRyaWNzO1xyXG4gICAgICAgICAgICBtZXRyaWNzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRyaWNzID09PSAndW5kZWZpbmVkJykgbWV0cmljcyA9IEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSUztcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBsZW5ndGg6IFwiK2xlbmd0aCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgbGVuZ3RoIHw9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGkgPSAwLFxyXG4gICAgICAgICAgICBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgc2Q7XHJcbiAgICAgICAgaWYgKG1ldHJpY3MgPT09IEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSUykgeyAvLyBUaGUgc2FtZSBmb3Igbm9kZSBhbmQgdGhlIGJyb3dzZXJcclxuICAgICAgICAgICAgc2QgPSBzdHJpbmdEZXN0aW5hdGlvbigpO1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjgoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA8IGxlbmd0aCAmJiBvZmZzZXQgPCB0aGlzLmxpbWl0ID8gdGhpcy52aWV3W29mZnNldCsrXSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgZnVuY3Rpb24oY3ApIHtcclxuICAgICAgICAgICAgICAgICsraTsgdXRmeC5VVEY4dG9VVEYxNihjcCwgc2QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGkgIT09IGxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIraStcIiA9PSBcIitsZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCI6IHNkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG1ldHJpY3MgPT09IEJ5dGVCdWZmZXIuTUVUUklDU19CWVRFUykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyBsZW5ndGggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrbGVuZ3RoK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGsgPSBvZmZzZXQgKyBsZW5ndGg7XHJcbiAgICAgICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0IDwgayA/IHRoaXMudmlld1tvZmZzZXQrK10gOiBudWxsO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKSwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGspXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA9PSBcIitrKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJzogc2QoKSxcclxuICAgICAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgbWV0cmljczogXCIrbWV0cmljcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVVRGOFN0cmluZ30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGNoYXJhY3RlcnMgb3IgYnl0ZXMgdG8gcmVhZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtZXRyaWNzIE1ldHJpY3Mgc3BlY2lmeWluZyB3aGF0IGBuYCBpcyBtZWFudCB0byBjb3VudC4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5NRVRSSUNTX0NIQVJTfS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCF7c3RyaW5nOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHN0cmluZyByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBzdHJpbmdcclxuICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRTdHJpbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVVEY4U3RyaW5nO1xyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvdnN0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgbGVuZ3RoIGFzIHZhcmludDMyIHByZWZpeGVkIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gYHRoaXNgIGlmIGBvZmZzZXRgIGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3dyaXRlVmFyaW50MzJcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgaywgbDtcclxuICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgdGhpcy5ub0Fzc2VydClbMV07XHJcbiAgICAgICAgbCA9IEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50MzIoayk7XHJcbiAgICAgICAgb2Zmc2V0ICs9IGwraztcbiAgICAgICAgdmFyIGNhcGFjaXR5MTUgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxNSlcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTE1ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxNSA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSBsK2s7XG4gICAgICAgIG9mZnNldCArPSB0aGlzLndyaXRlVmFyaW50MzIoaywgb2Zmc2V0KTtcclxuICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4KHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSBiO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gc3RhcnQraytsKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA9PSBcIisob2Zmc2V0K2srbCkpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIGxlbmd0aCBhcyB2YXJpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICogIHJlYWQgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjcmVhZFZhcmludDMyXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFZTdHJpbmcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMucmVhZFZhcmludDMyKG9mZnNldCk7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMucmVhZFVURjhTdHJpbmcobGVuWyd2YWx1ZSddLCBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMsIG9mZnNldCArPSBsZW5bJ2xlbmd0aCddKTtcclxuICAgICAgICBvZmZzZXQgKz0gc3RyWydsZW5ndGgnXTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJbJ3N0cmluZyddO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnc3RyaW5nJzogc3RyWydzdHJpbmcnXSxcclxuICAgICAgICAgICAgICAgICdsZW5ndGgnOiBvZmZzZXQgLSBzdGFydFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyBzb21lIGRhdGEgdG8gdGhpcyBCeXRlQnVmZmVyLiBUaGlzIHdpbGwgb3ZlcndyaXRlIGFueSBjb250ZW50cyBiZWhpbmQgdGhlIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlIGFwcGVuZGVkXHJcbiAgICAgKiAgZGF0YSdzIGxlbmd0aC5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZ30gc291cmNlIERhdGEgdG8gYXBwZW5kLiBJZiBgc291cmNlYCBpcyBhIEJ5dGVCdWZmZXIsIGl0cyBvZmZzZXRzXHJcbiAgICAgKiAgd2lsbCBiZSBtb2RpZmllZCBhY2NvcmRpbmcgdG8gdGhlIHBlcmZvcm1lZCByZWFkIG9wZXJhdGlvbi5cclxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gZW5jb2RpbmcgRW5jb2RpbmcgaWYgYGRhdGFgIGlzIGEgc3RyaW5nIChcImJhc2U2NFwiLCBcImhleFwiLCBcImJpbmFyeVwiLCBkZWZhdWx0cyB0byBcInV0ZjhcIilcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBhcHBlbmQgYXQuIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBleGFtcGxlIEEgcmVsYXRpdmUgYDwwMSAwMj4wMy5hcHBlbmQoPDA0IDA1PilgIHdpbGwgcmVzdWx0IGluIGA8MDEgMDIgMDQgMDU+LCAwNCAwNXxgXHJcbiAgICAgKiBAZXhhbXBsZSBBbiBhYnNvbHV0ZSBgPDAxIDAyPjAzLmFwcGVuZCgwNCAwNT4sIDEpYCB3aWxsIHJlc3VsdCBpbiBgPDAxIDA0PjA1LCAwNCAwNXxgXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc291cmNlLCBlbmNvZGluZywgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIEJ5dGVCdWZmZXIpKVxyXG4gICAgICAgICAgICBzb3VyY2UgPSBCeXRlQnVmZmVyLndyYXAoc291cmNlLCBlbmNvZGluZyk7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZS5saW1pdCAtIHNvdXJjZS5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKGxlbmd0aCA8PSAwKSByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byBhcHBlbmRcclxuICAgICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICB2YXIgY2FwYWNpdHkxNiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTE2KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTYgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTE2IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IGxlbmd0aDtcbiAgICAgICAgdGhpcy52aWV3LnNldChzb3VyY2Uudmlldy5zdWJhcnJheShzb3VyY2Uub2Zmc2V0LCBzb3VyY2UubGltaXQpLCBvZmZzZXQpO1xyXG4gICAgICAgIHNvdXJjZS5vZmZzZXQgKz0gbGVuZ3RoO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmRzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHRvIGFub3RoZXIgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYXQgYW5kIGFmdGVyIHRoZVxyXG4gICAgICAgIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlIGxlbmd0aCBvZiB0aGlzIEJ5dGVCdWZmZXIncyBkYXRhLlxyXG4gICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcn0gdGFyZ2V0IFRhcmdldCBCeXRlQnVmZmVyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gYXBwZW5kIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjYXBwZW5kXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuYXBwZW5kVG8gPSBmdW5jdGlvbih0YXJnZXQsIG9mZnNldCkge1xyXG4gICAgICAgIHRhcmdldC5hcHBlbmQodGhpcywgb2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGFzc2VydGlvbnMgb2YgYXJndW1lbnQgdHlwZXMgYW5kIG9mZnNldHMuIEFzc2VydGlvbnMgYXJlIGVuYWJsZWQgYnkgZGVmYXVsdCBidXQgeW91IGNhbiBvcHQgdG9cclxuICAgICAqICBkaXNhYmxlIHRoZW0gaWYgeW91ciBjb2RlIGFscmVhZHkgbWFrZXMgc3VyZSB0aGF0IGV2ZXJ5dGhpbmcgaXMgdmFsaWQuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFzc2VydCBgdHJ1ZWAgdG8gZW5hYmxlIGFzc2VydGlvbnMsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5hc3NlcnQgPSBmdW5jdGlvbihhc3NlcnQpIHtcclxuICAgICAgICB0aGlzLm5vQXNzZXJ0ID0gIWFzc2VydDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjYXBhY2l0eSBvZiB0aGlzIEJ5dGVCdWZmZXIncyBiYWNraW5nIGJ1ZmZlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IENhcGFjaXR5IG9mIHRoZSBiYWNraW5nIGJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhpcyBCeXRlQnVmZmVyJ3Mgb2Zmc2V0cyBieSBzZXR0aW5nIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gdG8gYDBgIGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0gdG8gdGhlXHJcbiAgICAgKiAgYmFja2luZyBidWZmZXIncyBjYXBhY2l0eS4gRGlzY2FyZHMge0BsaW5rIEJ5dGVCdWZmZXIjbWFya2VkT2Zmc2V0fS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHRoaXMubGltaXQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubWFya2VkT2Zmc2V0ID0gLTE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGNsb25lZCBpbnN0YW5jZSBvZiB0aGlzIEJ5dGVCdWZmZXIsIHByZXNldCB3aXRoIHRoaXMgQnl0ZUJ1ZmZlcidzIHZhbHVlcyBmb3Ige0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSxcclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBjb3B5IFdoZXRoZXIgdG8gY29weSB0aGUgYmFja2luZyBidWZmZXIgb3IgdG8gcmV0dXJuIGFub3RoZXIgdmlldyBvbiB0aGUgc2FtZSwgZGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBDbG9uZWQgaW5zdGFuY2VcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGNvcHkpIHtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigwLCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgaWYgKGNvcHkpIHtcclxuICAgICAgICAgICAgYmIuYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICBiYi52aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYmIuYnVmZmVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBiYi5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICAgICAgYmIudmlldyA9IHRoaXMudmlldztcclxuICAgICAgICB9XHJcbiAgICAgICAgYmIub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgYmIubWFya2VkT2Zmc2V0ID0gdGhpcy5tYXJrZWRPZmZzZXQ7XHJcbiAgICAgICAgYmIubGltaXQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYWN0cyB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgYmFja2VkIGJ5IGEge0BsaW5rIEJ5dGVCdWZmZXIjYnVmZmVyfSBvZiBpdHMgY29udGVudHMnIGxlbmd0aC4gQ29udGVudHMgYXJlIHRoZSBieXRlc1xyXG4gICAgICogIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LiBXaWxsIHNldCBgb2Zmc2V0ID0gMGAgYW5kIGBsaW1pdCA9IGNhcGFjaXR5YCBhbmRcclxuICAgICAqICBhZGFwdCB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9IHRvIHRoZSBzYW1lIHJlbGF0aXZlIHBvc2l0aW9uIGlmIHNldC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIHN0YXJ0IGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gMCAmJiBlbmQgPT09IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBBbHJlYWR5IGNvbXBhY3RlZFxyXG4gICAgICAgIHZhciBsZW4gPSBlbmQgLSBiZWdpbjtcclxuICAgICAgICBpZiAobGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gRU1QVFlfQlVGRkVSO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkgdGhpcy5tYXJrZWRPZmZzZXQgLT0gYmVnaW47XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5saW1pdCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGxlbik7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgIHZpZXcuc2V0KHRoaXMudmlldy5zdWJhcnJheShiZWdpbiwgZW5kKSk7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkgdGhpcy5tYXJrZWRPZmZzZXQgLT0gYmVnaW47XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHRoaXMubGltaXQgPSBsZW47XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlbiB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZFxyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gQmVnaW4gb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgRW5kIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBDb3B5XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJlZ2luID09PSBlbmQpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnl0ZUJ1ZmZlcigwLCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgdmFyIGNhcGFjaXR5ID0gZW5kIC0gYmVnaW4sXHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoY2FwYWNpdHksIHRoaXMubGl0dGxlRW5kaWFuLCB0aGlzLm5vQXNzZXJ0KTtcclxuICAgICAgICBiYi5vZmZzZXQgPSAwO1xyXG4gICAgICAgIGJiLmxpbWl0ID0gY2FwYWNpdHk7XHJcbiAgICAgICAgaWYgKGJiLm1hcmtlZE9mZnNldCA+PSAwKSBiYi5tYXJrZWRPZmZzZXQgLT0gYmVnaW47XHJcbiAgICAgICAgdGhpcy5jb3B5VG8oYmIsIDAsIGJlZ2luLCBlbmQpO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3BpZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgdG8gYW5vdGhlciBCeXRlQnVmZmVyLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmRcclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfSB0YXJnZXQgVGFyZ2V0IEJ5dGVCdWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gdGFyZ2V0T2Zmc2V0IE9mZnNldCB0byBjb3B5IHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2UgdGhlIHRhcmdldCdzIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH1cclxuICAgICAqICBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGNvcGllZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzb3VyY2VPZmZzZXQgT2Zmc2V0IHRvIHN0YXJ0IGNvcHlpbmcgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlXHJcbiAgICAgKiAgbnVtYmVyIG9mIGJ5dGVzIGNvcGllZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzb3VyY2VMaW1pdCBPZmZzZXQgdG8gZW5kIGNvcHlpbmcgZnJvbSwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9XHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jb3B5VG8gPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldE9mZnNldCwgc291cmNlT2Zmc2V0LCBzb3VyY2VMaW1pdCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSxcclxuICAgICAgICAgICAgdGFyZ2V0UmVsYXRpdmU7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICghQnl0ZUJ1ZmZlci5pc0J5dGVCdWZmZXIodGFyZ2V0KSlcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdGFyZ2V0OiBOb3QgYSBCeXRlQnVmZmVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXRPZmZzZXQgPSAodGFyZ2V0UmVsYXRpdmUgPSB0eXBlb2YgdGFyZ2V0T2Zmc2V0ID09PSAndW5kZWZpbmVkJykgPyB0YXJnZXQub2Zmc2V0IDogdGFyZ2V0T2Zmc2V0IHwgMDtcclxuICAgICAgICBzb3VyY2VPZmZzZXQgPSAocmVsYXRpdmUgPSB0eXBlb2Ygc291cmNlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgPyB0aGlzLm9mZnNldCA6IHNvdXJjZU9mZnNldCB8IDA7XHJcbiAgICAgICAgc291cmNlTGltaXQgPSB0eXBlb2Ygc291cmNlTGltaXQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5saW1pdCA6IHNvdXJjZUxpbWl0IHwgMDtcclxuXHJcbiAgICAgICAgaWYgKHRhcmdldE9mZnNldCA8IDAgfHwgdGFyZ2V0T2Zmc2V0ID4gdGFyZ2V0LmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCB0YXJnZXQgcmFuZ2U6IDAgPD0gXCIrdGFyZ2V0T2Zmc2V0K1wiIDw9IFwiK3RhcmdldC5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHNvdXJjZU9mZnNldCA8IDAgfHwgc291cmNlTGltaXQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBzb3VyY2UgcmFuZ2U6IDAgPD0gXCIrc291cmNlT2Zmc2V0K1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG5cclxuICAgICAgICB2YXIgbGVuID0gc291cmNlTGltaXQgLSBzb3VyY2VPZmZzZXQ7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDsgLy8gTm90aGluZyB0byBjb3B5XHJcblxyXG4gICAgICAgIHRhcmdldC5lbnN1cmVDYXBhY2l0eSh0YXJnZXRPZmZzZXQgKyBsZW4pO1xyXG5cclxuICAgICAgICB0YXJnZXQudmlldy5zZXQodGhpcy52aWV3LnN1YmFycmF5KHNvdXJjZU9mZnNldCwgc291cmNlTGltaXQpLCB0YXJnZXRPZmZzZXQpO1xyXG5cclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IGxlbjtcclxuICAgICAgICBpZiAodGFyZ2V0UmVsYXRpdmUpIHRhcmdldC5vZmZzZXQgKz0gbGVuO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlcyBzdXJlIHRoYXQgdGhpcyBCeXRlQnVmZmVyIGlzIGJhY2tlZCBieSBhIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn0gb2YgYXQgbGVhc3QgdGhlIHNwZWNpZmllZCBjYXBhY2l0eS4gSWYgdGhlXHJcbiAgICAgKiAgY3VycmVudCBjYXBhY2l0eSBpcyBleGNlZWRlZCwgaXQgd2lsbCBiZSBkb3VibGVkLiBJZiBkb3VibGUgdGhlIGN1cnJlbnQgY2FwYWNpdHkgaXMgbGVzcyB0aGFuIHRoZSByZXF1aXJlZCBjYXBhY2l0eSxcclxuICAgICAqICB0aGUgcmVxdWlyZWQgY2FwYWNpdHkgd2lsbCBiZSB1c2VkIGluc3RlYWQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2FwYWNpdHkgUmVxdWlyZWQgY2FwYWNpdHlcclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmVuc3VyZUNhcGFjaXR5ID0gZnVuY3Rpb24oY2FwYWNpdHkpIHtcclxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgaWYgKGN1cnJlbnQgPCBjYXBhY2l0eSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplKChjdXJyZW50ICo9IDIpID4gY2FwYWNpdHkgPyBjdXJyZW50IDogY2FwYWNpdHkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJ3cml0ZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW5cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlIEJ5dGUgdmFsdWUgdG8gZmlsbCB3aXRoLiBJZiBnaXZlbiBhcyBhIHN0cmluZywgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyB1c2VkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBCZWdpbiBvZmZzZXQuIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBFbmQgb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBleGFtcGxlIGBzb21lQnl0ZUJ1ZmZlci5jbGVhcigpLmZpbGwoMClgIGZpbGxzIHRoZSBlbnRpcmUgYmFja2luZyBidWZmZXIgd2l0aCB6ZXJvZXNcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24odmFsdWUsIGJlZ2luLCBlbmQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJlZ2luID49IGVuZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gZmlsbFxyXG4gICAgICAgIHdoaWxlIChiZWdpbiA8IGVuZCkgdGhpcy52aWV3W2JlZ2luKytdID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCA9IGJlZ2luO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIHRoaXMgQnl0ZUJ1ZmZlciByZWFkeSBmb3IgYSBuZXcgc2VxdWVuY2Ugb2Ygd3JpdGUgb3IgcmVsYXRpdmUgcmVhZCBvcGVyYXRpb25zLiBTZXRzIGBsaW1pdCA9IG9mZnNldGAgYW5kXHJcbiAgICAgKiAgYG9mZnNldCA9IDBgLiBNYWtlIHN1cmUgYWx3YXlzIHRvIGZsaXAgYSBCeXRlQnVmZmVyIHdoZW4gYWxsIHJlbGF0aXZlIHJlYWQgb3Igd3JpdGUgb3BlcmF0aW9ucyBhcmUgY29tcGxldGUuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5mbGlwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5saW1pdCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1hcmtzIGFuIG9mZnNldCBvbiB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgdXNlZCBsYXRlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBtYXJrLiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3Jlc2V0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUubWFyayA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIG9mZnNldCA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5vZmZzZXQgOiBvZmZzZXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGJ5dGUgb3JkZXIuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxpdHRsZUVuZGlhbiBgdHJ1ZWAgZm9yIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlciwgYGZhbHNlYCBmb3IgYmlnIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUub3JkZXIgPSBmdW5jdGlvbihsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXR0bGVFbmRpYW4gIT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGl0dGxlRW5kaWFuOiBOb3QgYSBib29sZWFuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9ICEhbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3aXRjaGVzICh0bykgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIERlZmF1bHRzIHRvIGB0cnVlYCwgb3RoZXJ3aXNlIHVzZXMgYmlnIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuTEUgPSBmdW5jdGlvbihsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHR5cGVvZiBsaXR0bGVFbmRpYW4gIT09ICd1bmRlZmluZWQnID8gISFsaXR0bGVFbmRpYW4gOiB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3aXRjaGVzICh0bykgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYmlnRW5kaWFuIERlZmF1bHRzIHRvIGB0cnVlYCwgb3RoZXJ3aXNlIHVzZXMgbGl0dGxlIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuQkUgPSBmdW5jdGlvbihiaWdFbmRpYW4pIHtcclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHR5cGVvZiBiaWdFbmRpYW4gIT09ICd1bmRlZmluZWQnID8gIWJpZ0VuZGlhbiA6IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJlcGVuZHMgc29tZSBkYXRhIHRvIHRoaXMgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYmVmb3JlIHRoZSBzcGVjaWZpZWQgb2Zmc2V0IHVwIHRvIHRoZVxyXG4gICAgICogIHByZXBlbmRlZCBkYXRhJ3MgbGVuZ3RoLiBJZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSBiZWZvcmUgdGhlIHNwZWNpZmllZCBgb2Zmc2V0YCwgdGhlIGJhY2tpbmcgYnVmZmVyXHJcbiAgICAgKiAgd2lsbCBiZSByZXNpemVkIGFuZCBpdHMgY29udGVudHMgbW92ZWQgYWNjb3JkaW5nbHkuXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfHN0cmluZ3whQXJyYXlCdWZmZXJ9IHNvdXJjZSBEYXRhIHRvIHByZXBlbmQuIElmIGBzb3VyY2VgIGlzIGEgQnl0ZUJ1ZmZlciwgaXRzIG9mZnNldCB3aWxsIGJlXHJcbiAgICAgKiAgbW9kaWZpZWQgYWNjb3JkaW5nIHRvIHRoZSBwZXJmb3JtZWQgcmVhZCBvcGVyYXRpb24uXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGVuY29kaW5nIEVuY29kaW5nIGlmIGBkYXRhYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG8gXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcHJlcGVuZCBhdC4gV2lsbCB1c2UgYW5kIGRlY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHByZXBlbmRlZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAZXhhbXBsZSBBIHJlbGF0aXZlIGAwMDwwMSAwMiAwMz4ucHJlcGVuZCg8MDQgMDU+KWAgcmVzdWx0cyBpbiBgPDA0IDA1IDAxIDAyIDAzPiwgMDQgMDV8YFxyXG4gICAgICogQGV4YW1wbGUgQW4gYWJzb2x1dGUgYDAwPDAxIDAyIDAzPi5wcmVwZW5kKDwwNCAwNT4sIDIpYCByZXN1bHRzIGluIGAwNDwwNSAwMiAwMz4sIDA0IDA1fGBcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24oc291cmNlLCBlbmNvZGluZywgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIEJ5dGVCdWZmZXIpKVxyXG4gICAgICAgICAgICBzb3VyY2UgPSBCeXRlQnVmZmVyLndyYXAoc291cmNlLCBlbmNvZGluZyk7XHJcbiAgICAgICAgdmFyIGxlbiA9IHNvdXJjZS5saW1pdCAtIHNvdXJjZS5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKGxlbiA8PSAwKSByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byBwcmVwZW5kXHJcbiAgICAgICAgdmFyIGRpZmYgPSBsZW4gLSBvZmZzZXQ7XHJcbiAgICAgICAgaWYgKGRpZmYgPiAwKSB7IC8vIE5vdCBlbm91Z2ggc3BhY2UgYmVmb3JlIG9mZnNldCwgc28gcmVzaXplICsgbW92ZVxyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggKyBkaWZmKTtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgICAgICB2aWV3LnNldCh0aGlzLnZpZXcuc3ViYXJyYXkob2Zmc2V0LCB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSwgbGVuKTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IGRpZmY7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcmtlZE9mZnNldCA+PSAwKSB0aGlzLm1hcmtlZE9mZnNldCArPSBkaWZmO1xyXG4gICAgICAgICAgICB0aGlzLmxpbWl0ICs9IGRpZmY7XHJcbiAgICAgICAgICAgIG9mZnNldCArPSBkaWZmO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBhcnJheVZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlldy5zZXQoc291cmNlLnZpZXcuc3ViYXJyYXkoc291cmNlLm9mZnNldCwgc291cmNlLmxpbWl0KSwgb2Zmc2V0IC0gbGVuKTtcclxuXHJcbiAgICAgICAgc291cmNlLm9mZnNldCA9IHNvdXJjZS5saW1pdDtcclxuICAgICAgICBpZiAocmVsYXRpdmUpXHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwZW5kcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYW5vdGhlciBCeXRlQnVmZmVyLiBUaGlzIHdpbGwgb3ZlcndyaXRlIGFueSBjb250ZW50cyBiZWZvcmUgdGhlIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlXHJcbiAgICAgKiAgcHJlcGVuZGVkIGRhdGEncyBsZW5ndGguIElmIHRoZXJlIGlzIG5vdCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlIGJlZm9yZSB0aGUgc3BlY2lmaWVkIGBvZmZzZXRgLCB0aGUgYmFja2luZyBidWZmZXJcclxuICAgICAqICB3aWxsIGJlIHJlc2l6ZWQgYW5kIGl0cyBjb250ZW50cyBtb3ZlZCBhY2NvcmRpbmdseS5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ9IHRhcmdldCBUYXJnZXQgQnl0ZUJ1ZmZlclxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHByZXBlbmQgYXQuIFdpbGwgdXNlIGFuZCBkZWNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICBwcmVwZW5kZWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3ByZXBlbmRcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5wcmVwZW5kVG8gPSBmdW5jdGlvbih0YXJnZXQsIG9mZnNldCkge1xyXG4gICAgICAgIHRhcmdldC5wcmVwZW5kKHRoaXMsIG9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludHMgZGVidWcgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyk9fSBvdXQgT3V0cHV0IGZ1bmN0aW9uIHRvIGNhbGwsIGRlZmF1bHRzIHRvIGNvbnNvbGUubG9nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucHJpbnREZWJ1ZyA9IGZ1bmN0aW9uKG91dCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3V0ICE9PSAnZnVuY3Rpb24nKSBvdXQgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xyXG4gICAgICAgIG91dChcclxuICAgICAgICAgICAgdGhpcy50b1N0cmluZygpK1wiXFxuXCIrXHJcbiAgICAgICAgICAgIFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblwiK1xyXG4gICAgICAgICAgICB0aGlzLnRvRGVidWcoLyogY29sdW1ucyAqLyB0cnVlKVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHJlbWFpbmluZyByZWFkYWJsZSBieXRlcy4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LCBzbyB0aGlzIHJldHVybnMgYGxpbWl0IC0gb2Zmc2V0YC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJlbWFpbmluZyByZWFkYWJsZSBieXRlcy4gTWF5IGJlIG5lZ2F0aXZlIGlmIGBvZmZzZXQgPiBsaW1pdGAuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVtYWluaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGltaXQgLSB0aGlzLm9mZnNldDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyB0aGlzIEJ5dGVCdWZmZXIncyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LiBJZiBhbiBvZmZzZXQgaGFzIGJlZW4gbWFya2VkIHRocm91Z2gge0BsaW5rIEJ5dGVCdWZmZXIjbWFya31cclxuICAgICAqICBiZWZvcmUsIGBvZmZzZXRgIHdpbGwgYmUgc2V0IHRvIHtAbGluayBCeXRlQnVmZmVyI21hcmtlZE9mZnNldH0sIHdoaWNoIHdpbGwgdGhlbiBiZSBkaXNjYXJkZWQuIElmIG5vIG9mZnNldCBoYXMgYmVlblxyXG4gICAgICogIG1hcmtlZCwgc2V0cyBgb2Zmc2V0ID0gMGAuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNtYXJrXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMubWFya2VkT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemVzIHRoaXMgQnl0ZUJ1ZmZlciB0byBiZSBiYWNrZWQgYnkgYSBidWZmZXIgb2YgYXQgbGVhc3QgdGhlIGdpdmVuIGNhcGFjaXR5LiBXaWxsIGRvIG5vdGhpbmcgaWYgYWxyZWFkeSB0aGF0XHJcbiAgICAgKiAgbGFyZ2Ugb3IgbGFyZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5IENhcGFjaXR5IHJlcXVpcmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYGNhcGFjaXR5YCBpcyBub3QgYSBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBjYXBhY2l0eSA8IDBgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oY2FwYWNpdHkpIHtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYXBhY2l0eSAhPT0gJ251bWJlcicgfHwgY2FwYWNpdHkgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgY2FwYWNpdHk6IFwiK2NhcGFjaXR5K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBjYXBhY2l0eSB8PSAwO1xuICAgICAgICAgICAgaWYgKGNhcGFjaXR5IDwgMClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIGNhcGFjaXR5OiAwIDw9IFwiK2NhcGFjaXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggPCBjYXBhY2l0eSkge1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGNhcGFjaXR5KTtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgICAgICB2aWV3LnNldCh0aGlzLnZpZXcpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXZlcnNlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIHN0YXJ0IGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gZW5kKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byByZXZlcnNlXHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnJldmVyc2UuY2FsbCh0aGlzLnZpZXcuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2tpcHMgdGhlIG5leHQgYGxlbmd0aGAgYnl0ZXMuIFRoaXMgd2lsbCBqdXN0IGFkdmFuY2VcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGJ5dGVzIHRvIHNraXAuIE1heSBhbHNvIGJlIG5lZ2F0aXZlIHRvIG1vdmUgdGhlIG9mZnNldCBiYWNrLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uKGxlbmd0aCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicgfHwgbGVuZ3RoICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGxlbmd0aDogXCIrbGVuZ3RoK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBsZW5ndGggfD0gMDtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCArIGxlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIGxlbmd0aDogMCA8PSBcIit0aGlzLm9mZnNldCtcIiArIFwiK2xlbmd0aCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2xpY2VzIHRoaXMgQnl0ZUJ1ZmZlciBieSBjcmVhdGluZyBhIGNsb25lZCBpbnN0YW5jZSB3aXRoIGBvZmZzZXQgPSBiZWdpbmAgYW5kIGBsaW1pdCA9IGVuZGAuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIEJlZ2luIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIEVuZCBvZmZzZXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQ2xvbmUgb2YgdGhpcyBCeXRlQnVmZmVyIHdpdGggc2xpY2luZyBhcHBsaWVkLCBiYWNrZWQgYnkgdGhlIHNhbWUge0BsaW5rIEJ5dGVCdWZmZXIjYnVmZmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgZW5kID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYmIgPSB0aGlzLmNsb25lKCk7XHJcbiAgICAgICAgYmIub2Zmc2V0ID0gYmVnaW47XHJcbiAgICAgICAgYmIubGltaXQgPSBlbmQ7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGJhY2tpbmcgYnVmZmVyIHRoYXQgY29udGFpbnMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlblxyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZvcmNlQ29weSBJZiBgdHJ1ZWAgcmV0dXJucyBhIGNvcHksIG90aGVyd2lzZSByZXR1cm5zIGEgdmlldyByZWZlcmVuY2luZyB0aGUgc2FtZSBtZW1vcnkgaWZcclxuICAgICAqICBwb3NzaWJsZS4gRGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMgeyFBcnJheUJ1ZmZlcn0gQ29udGVudHMgYXMgYW4gQXJyYXlCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uKGZvcmNlQ29weSkge1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCxcclxuICAgICAgICAgICAgbGltaXQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaW1pdCAhPT0gJ251bWJlcicgfHwgbGltaXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGltaXQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgbGltaXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gbGltaXQgfHwgbGltaXQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK29mZnNldCtcIiA8PSBcIitsaW1pdCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5PVEU6IEl0J3Mgbm90IHBvc3NpYmxlIHRvIGhhdmUgYW5vdGhlciBBcnJheUJ1ZmZlciByZWZlcmVuY2UgdGhlIHNhbWUgbWVtb3J5IGFzIHRoZSBiYWNraW5nIGJ1ZmZlci4gVGhpcyBpc1xyXG4gICAgICAgIC8vIHBvc3NpYmxlIHdpdGggVWludDhBcnJheSNzdWJhcnJheSBvbmx5LCBidXQgd2UgaGF2ZSB0byByZXR1cm4gYW4gQXJyYXlCdWZmZXIgYnkgY29udHJhY3QuIFNvOlxyXG4gICAgICAgIGlmICghZm9yY2VDb3B5ICYmIG9mZnNldCA9PT0gMCAmJiBsaW1pdCA9PT0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xyXG4gICAgICAgIGlmIChvZmZzZXQgPT09IGxpbWl0KVxyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xyXG4gICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGltaXQgLSBvZmZzZXQpO1xyXG4gICAgICAgIG5ldyBVaW50OEFycmF5KGJ1ZmZlcikuc2V0KG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKS5zdWJhcnJheShvZmZzZXQsIGxpbWl0KSwgMCk7XHJcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgcmF3IGJ1ZmZlciBjb21wYWN0ZWQgdG8gY29udGFpbiB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cy4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3RvQnVmZmVyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VDb3B5IElmIGB0cnVlYCByZXR1cm5zIGEgY29weSwgb3RoZXJ3aXNlIHJldHVybnMgYSB2aWV3IHJlZmVyZW5jaW5nIHRoZSBzYW1lIG1lbW9yeS5cclxuICAgICAqICBEZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICAgKiBAcmV0dXJucyB7IUFycmF5QnVmZmVyfSBDb250ZW50cyBhcyBhbiBBcnJheUJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQXJyYXlCdWZmZXIgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQnVmZmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZW5jb2RpbmcgT3V0cHV0IGVuY29kaW5nLiBSZXR1cm5zIGFuIGluZm9ybWF0aXZlIHN0cmluZyByZXByZXNlbnRhdGlvbiBpZiBvbWl0dGVkIGJ1dCBhbHNvIGFsbG93c1xyXG4gICAgICogIGRpcmVjdCBjb252ZXJzaW9uIHRvIFwidXRmOFwiLCBcImhleFwiLCBcImJhc2U2NFwiIGFuZCBcImJpbmFyeVwiIGVuY29kaW5nLiBcImRlYnVnXCIgcmV0dXJucyBhIGhleCByZXByZXNlbnRhdGlvbiB3aXRoXHJcbiAgICAgKiAgaGlnaGxpZ2h0ZWQgb2Zmc2V0cy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvblxyXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIGBlbmNvZGluZ2AgaXMgaW52YWxpZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oZW5jb2RpbmcsIGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgcmV0dXJuIFwiQnl0ZUJ1ZmZlckFCKG9mZnNldD1cIit0aGlzLm9mZnNldCtcIixtYXJrZWRPZmZzZXQ9XCIrdGhpcy5tYXJrZWRPZmZzZXQrXCIsbGltaXQ9XCIrdGhpcy5saW1pdCtcIixjYXBhY2l0eT1cIit0aGlzLmNhcGFjaXR5KCkrXCIpXCI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIGVuY29kaW5nID0gXCJ1dGY4XCIsXHJcbiAgICAgICAgICAgIGJlZ2luID0gZW5jb2RpbmcsXHJcbiAgICAgICAgICAgIGVuZCA9IGJlZ2luO1xyXG4gICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcclxuICAgICAgICAgICAgY2FzZSBcInV0ZjhcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvVVRGOChiZWdpbiwgZW5kKTtcclxuICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9CYXNlNjQoYmVnaW4sIGVuZCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJoZXhcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvSGV4KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0JpbmFyeShiZWdpbiwgZW5kKTtcclxuICAgICAgICAgICAgY2FzZSBcImRlYnVnXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RlYnVnKCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjb2x1bW5zXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0NvbHVtbnMoKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgZW5jb2Rpbmc6IFwiK2VuY29kaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGx4aXYtZW1iZWRkYWJsZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbHhpdi1lbWJlZGRhYmxlIChjKSAyMDE0IERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXHJcbiAgICAgKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2x4aXYgZm9yIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgdmFyIGx4aXYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogbHhpdiBuYW1lc3BhY2UuXHJcbiAgICAgICAgICogQHR5cGUgeyFPYmplY3QuPHN0cmluZywqPn1cclxuICAgICAgICAgKiBAZXhwb3J0cyBseGl2XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGx4aXYgPSB7fTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhcmFjdGVyIGNvZGVzIGZvciBvdXRwdXQuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheS48bnVtYmVyPn1cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgYW91dCA9IFtcclxuICAgICAgICAgICAgNjUsIDY2LCA2NywgNjgsIDY5LCA3MCwgNzEsIDcyLCA3MywgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsXHJcbiAgICAgICAgICAgIDgxLCA4MiwgODMsIDg0LCA4NSwgODYsIDg3LCA4OCwgODksIDkwLCA5NywgOTgsIDk5LCAxMDAsIDEwMSwgMTAyLFxyXG4gICAgICAgICAgICAxMDMsIDEwNCwgMTA1LCAxMDYsIDEwNywgMTA4LCAxMDksIDExMCwgMTExLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsXHJcbiAgICAgICAgICAgIDExOSwgMTIwLCAxMjEsIDEyMiwgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDQzLCA0N1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoYXJhY3RlciBjb2RlcyBmb3IgaW5wdXQuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheS48bnVtYmVyPn1cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgYWluID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaT0wLCBrPWFvdXQubGVuZ3RoOyBpPGs7ICsraSlcclxuICAgICAgICAgICAgYWluW2FvdXRbaV1dID0gaTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5jb2RlcyBieXRlcyB0byBiYXNlNjQgY2hhciBjb2Rlcy5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZlxyXG4gICAgICAgICAqICB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggZW5jb2RlZCBjaGFyXHJcbiAgICAgICAgICogIGNvZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbHhpdi5lbmNvZGUgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgYiwgdDtcclxuICAgICAgICAgICAgd2hpbGUgKChiID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBkc3QoYW91dFsoYj4+MikmMHgzZl0pO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiJjB4Myk8PDQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGIgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0IHw9IChiPj40KSYweGY7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbKHR8KChiPj40KSYweGYpKSYweDNmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IChiJjB4Zik8PDI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChiID0gc3JjKCkpICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFsodHwoKGI+PjYpJjB4MykpJjB4M2ZdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbYiYweDNmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFt0JjB4M2ZdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KDYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdChhb3V0W3QmMHgzZl0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCg2MSksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KDYxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYmFzZTY0IGNoYXIgY29kZXMgdG8gYnl0ZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHlcclxuICAgICAgICAgKiAgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZS5cclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYSBjaGFyYWN0ZXIgY29kZSBpcyBpbnZhbGlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbHhpdi5kZWNvZGUgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgYywgdDEsIHQyO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmYWlsKGMpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSWxsZWdhbCBjaGFyYWN0ZXIgY29kZTogXCIrYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2hpbGUgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0MSA9IGFpbltjXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdDEgPT09ICd1bmRlZmluZWQnKSBmYWlsKGMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdDIgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0MiA9PT0gJ3VuZGVmaW5lZCcpIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCh0MTw8Mik+Pj4wfCh0MiYweDMwKT4+NCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQxID0gYWluW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQxID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSA2MSkgYnJlYWs7IGVsc2UgZmFpbChjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KCgodDImMHhmKTw8NCk+Pj4wfCh0MSYweDNjKT4+Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdDIgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQyID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gNjEpIGJyZWFrOyBlbHNlIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc3QoKCh0MSYweDMpPDw2KT4+PjB8dDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGVzdHMgaWYgYSBzdHJpbmcgaXMgdmFsaWQgYmFzZTY0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHRlc3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHZhbGlkLCBvdGhlcndpc2UgYGZhbHNlYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGx4aXYudGVzdCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgICByZXR1cm4gL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvLnRlc3Qoc3RyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbHhpdjtcclxuICAgIH0oKTtcclxuXHJcbiAgICAvLyBlbmNvZGluZ3MvYmFzZTY0XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHRvIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBPZmZzZXQgdG8gYmVnaW4gYXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBiZWdpbmAgb3IgYGVuZGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQmFzZTY0ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBiZWdpbiA9IGJlZ2luIHwgMDsgZW5kID0gZW5kIHwgMDtcclxuICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGVuZCA+IHRoaXMuY2FwYWNpdHkgfHwgYmVnaW4gPiBlbmQpXHJcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJiZWdpbiwgZW5kXCIpO1xyXG4gICAgICAgIHZhciBzZDsgbHhpdi5lbmNvZGUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWdpbiA8IGVuZCA/IHRoaXMudmlld1tiZWdpbisrXSA6IG51bGw7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCkpO1xyXG4gICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gYSBCeXRlQnVmZmVyLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gZGVjb2RlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0ID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcInN0clwiKTtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihzdHIubGVuZ3RoLzQqMywgbGl0dGxlRW5kaWFuKSxcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgbHhpdi5kZWNvZGUoc3RyaW5nU291cmNlKHN0ciksIGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgYmIudmlld1tpKytdID0gYjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYi5saW1pdCA9IGk7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgYSBiaW5hcnkgc3RyaW5nIHRvIGJhc2U2NCBsaWtlIGB3aW5kb3cuYnRvYWAgZG9lcy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQmluYXJ5IHN0cmluZ1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cuYnRvYVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmJ0b2EgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmluYXJ5KHN0cikudG9CYXNlNjQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGJpbmFyeSBsaWtlIGB3aW5kb3cuYXRvYmAgZG9lcy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiNjQgQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBCaW5hcnkgc3RyaW5nXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cuYXRvYlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmF0b2IgPSBmdW5jdGlvbihiNjQpIHtcclxuICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0KGI2NCkudG9CaW5hcnkoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL2JpbmFyeVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYSBiaW5hcnkgZW5jb2RlZCBzdHJpbmcsIHRoYXQgaXMgdXNpbmcgb25seSBjaGFyYWN0ZXJzIDB4MDAtMHhGRiBhcyBieXRlcy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmluYXJ5IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0ID4gbGltaXRgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9CaW5hcnkgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGJlZ2luIHw9IDA7IGVuZCB8PSAwO1xyXG4gICAgICAgIGlmIChiZWdpbiA8IDAgfHwgZW5kID4gdGhpcy5jYXBhY2l0eSgpIHx8IGJlZ2luID4gZW5kKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiYmVnaW4sIGVuZFwiKTtcclxuICAgICAgICBpZiAoYmVnaW4gPT09IGVuZClcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgdmFyIGNoYXJzID0gW10sXHJcbiAgICAgICAgICAgIHBhcnRzID0gW107XHJcbiAgICAgICAgd2hpbGUgKGJlZ2luIDwgZW5kKSB7XHJcbiAgICAgICAgICAgIGNoYXJzLnB1c2godGhpcy52aWV3W2JlZ2luKytdKTtcclxuICAgICAgICAgICAgaWYgKGNoYXJzLmxlbmd0aCA+PSAxMDI0KVxyXG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2hhcnMpKSxcclxuICAgICAgICAgICAgICAgIGNoYXJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKSArIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaGFycyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIGJpbmFyeSBlbmNvZGVkIHN0cmluZywgdGhhdCBpcyB1c2luZyBvbmx5IGNoYXJhY3RlcnMgMHgwMC0weEZGIGFzIGJ5dGVzLCB0byBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQnl0ZUJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmZyb21CaW5hcnkgPSBmdW5jdGlvbihzdHIsIGxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwic3RyXCIpO1xyXG4gICAgICAgIHZhciBpID0gMCxcclxuICAgICAgICAgICAgayA9IHN0ci5sZW5ndGgsXHJcbiAgICAgICAgICAgIGNoYXJDb2RlLFxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKGssIGxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICBpZiAoY2hhckNvZGUgPiAweGZmKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcImlsbGVnYWwgY2hhciBjb2RlOiBcIitjaGFyQ29kZSk7XHJcbiAgICAgICAgICAgIGJiLnZpZXdbaSsrXSA9IGNoYXJDb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYi5saW1pdCA9IGs7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBlbmNvZGluZ3MvZGVidWdcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyIHRvIGEgaGV4IGVuY29kZWQgc3RyaW5nIHdpdGggbWFya2VkIG9mZnNldHMuIE9mZnNldCBzeW1ib2xzIGFyZTpcclxuICAgICAqICogYDxgIDogb2Zmc2V0LFxyXG4gICAgICogKiBgJ2AgOiBtYXJrZWRPZmZzZXQsXHJcbiAgICAgKiAqIGA+YCA6IGxpbWl0LFxyXG4gICAgICogKiBgfGAgOiBvZmZzZXQgYW5kIGxpbWl0LFxyXG4gICAgICogKiBgW2AgOiBvZmZzZXQgYW5kIG1hcmtlZE9mZnNldCxcclxuICAgICAqICogYF1gIDogbWFya2VkT2Zmc2V0IGFuZCBsaW1pdCxcclxuICAgICAqICogYCFgIDogb2Zmc2V0LCBtYXJrZWRPZmZzZXQgYW5kIGxpbWl0XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBjb2x1bW5zIElmIGB0cnVlYCByZXR1cm5zIHR3byBjb2x1bW5zIGhleCArIGFzY2lpLCBkZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCFBcnJheS48c3RyaW5nPn0gRGVidWcgc3RyaW5nIG9yIGFycmF5IG9mIGxpbmVzIGlmIGBhc0FycmF5ID0gdHJ1ZWBcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBleGFtcGxlIGA+MDAnMDEgMDI8MDNgIGNvbnRhaW5zIGZvdXIgYnl0ZXMgd2l0aCBgbGltaXQ9MCwgbWFya2VkT2Zmc2V0PTEsIG9mZnNldD0zYFxyXG4gICAgICogQGV4YW1wbGUgYDAwWzAxIDAyIDAzPmAgY29udGFpbnMgZm91ciBieXRlcyB3aXRoIGBvZmZzZXQ9bWFya2VkT2Zmc2V0PTEsIGxpbWl0PTRgXHJcbiAgICAgKiBAZXhhbXBsZSBgMDB8MDEgMDIgMDNgIGNvbnRhaW5zIGZvdXIgYnl0ZXMgd2l0aCBgb2Zmc2V0PWxpbWl0PTEsIG1hcmtlZE9mZnNldD0tMWBcclxuICAgICAqIEBleGFtcGxlIGB8YCBjb250YWlucyB6ZXJvIGJ5dGVzIHdpdGggYG9mZnNldD1saW1pdD0wLCBtYXJrZWRPZmZzZXQ9LTFgXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9EZWJ1ZyA9IGZ1bmN0aW9uKGNvbHVtbnMpIHtcclxuICAgICAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgICAgICBrID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAgICAgYixcclxuICAgICAgICAgICAgaGV4ID0gXCJcIixcclxuICAgICAgICAgICAgYXNjID0gXCJcIixcclxuICAgICAgICAgICAgb3V0ID0gXCJcIjtcclxuICAgICAgICB3aGlsZSAoaTxrKSB7XHJcbiAgICAgICAgICAgIGlmIChpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgYiA9IHRoaXMudmlld1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChiIDwgMHgxMCkgaGV4ICs9IFwiMFwiK2IudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGhleCArPSBiLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgYXNjICs9IGIgPiAzMiAmJiBiIDwgMTI3ID8gU3RyaW5nLmZyb21DaGFyQ29kZShiKSA6ICcuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgaSAlIDE2ID09PSAwICYmIGkgIT09IGspIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaGV4Lmxlbmd0aCA8IDMqMTYrMykgaGV4ICs9IFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG91dCArPSBoZXgrYXNjK1wiXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaGV4ID0gYXNjID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gdGhpcy5vZmZzZXQgJiYgaSA9PT0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiIVwiIDogXCJ8XCI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IHRoaXMub2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgaGV4ICs9IGkgPT09IHRoaXMubWFya2VkT2Zmc2V0ID8gXCJbXCIgOiBcIjxcIjtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiXVwiIDogXCI+XCI7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiJ1wiIDogKGNvbHVtbnMgfHwgKGkgIT09IDAgJiYgaSAhPT0gaykgPyBcIiBcIiA6IFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29sdW1ucyAmJiBoZXggIT09IFwiIFwiKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChoZXgubGVuZ3RoIDwgMyoxNiszKVxyXG4gICAgICAgICAgICAgICAgaGV4ICs9IFwiIFwiO1xyXG4gICAgICAgICAgICBvdXQgKz0gaGV4ICsgYXNjICsgXCJcXG5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbHVtbnMgPyBvdXQgOiBoZXg7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIGhleCBlbmNvZGVkIHN0cmluZyB3aXRoIG1hcmtlZCBvZmZzZXRzIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgRGVidWcgc3RyaW5nIHRvIGRlY29kZSAobm90IGJlIGdlbmVyYXRlZCB3aXRoIGBjb2x1bW5zID0gdHJ1ZWApXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN0b0RlYnVnXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuZnJvbURlYnVnID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgdmFyIGsgPSBzdHIubGVuZ3RoLFxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKCgoaysxKS8zKXwwLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICB2YXIgaSA9IDAsIGogPSAwLCBjaCwgYixcclxuICAgICAgICAgICAgcnMgPSBmYWxzZSwgLy8gUmVxdWlyZSBzeW1ib2wgbmV4dFxyXG4gICAgICAgICAgICBobyA9IGZhbHNlLCBobSA9IGZhbHNlLCBobCA9IGZhbHNlLCAvLyBBbHJlYWR5IGhhcyBvZmZzZXQgKGhvKSwgbWFya2VkT2Zmc2V0IChobSksIGxpbWl0IChobCk/XHJcbiAgICAgICAgICAgIGZhaWwgPSBmYWxzZTtcclxuICAgICAgICB3aGlsZSAoaTxrKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY2ggPSBzdHIuY2hhckF0KGkrKykpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJyEnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvIHx8IGhtIHx8IGhsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gaG0gPSBobCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJiLm1hcmtlZE9mZnNldCA9IGJiLmxpbWl0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnfCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG8gfHwgaGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG8gPSBobCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJiLmxpbWl0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG8gfHwgaG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG8gPSBobSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJiLm1hcmtlZE9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzwnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGwgfHwgaG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGwgPSBobSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLmxpbWl0ID0gYmIubWFya2VkT2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnPic6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCInXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5tYXJrZWRPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIHJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiID0gcGFyc2VJbnQoY2grc3RyLmNoYXJBdChpKyspLCAxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYikgfHwgYiA8IDAgfHwgYiA+IDI1NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBkZWJ1ZyBlbmNvZGVkIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmIudmlld1tqKytdID0gYjtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZhaWwpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogSW52YWxpZCBzeW1ib2wgYXQgXCIraSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKCFobyB8fCAhaGwpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTWlzc2luZyBvZmZzZXQgb3IgbGltaXRcIik7XHJcbiAgICAgICAgICAgIGlmIChqPGJiLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIGRlYnVnIGVuY29kZWQgc3RyaW5nIChpcyBpdCBoZXg/KSBcIitqK1wiIDwgXCIrayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL2hleFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIGhleCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gSGV4IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgYmVnaW4gPSB0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnID8gdGhpcy5vZmZzZXQgOiBiZWdpbjtcclxuICAgICAgICBlbmQgPSB0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJyA/IHRoaXMubGltaXQgOiBlbmQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBcnJheShlbmQgLSBiZWdpbiksXHJcbiAgICAgICAgICAgIGI7XHJcbiAgICAgICAgd2hpbGUgKGJlZ2luIDwgZW5kKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbYmVnaW4rK107XHJcbiAgICAgICAgICAgIGlmIChiIDwgMHgxMClcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKFwiMFwiLCBiLnRvU3RyaW5nKDE2KSk7XHJcbiAgICAgICAgICAgIGVsc2Ugb3V0LnB1c2goYi50b1N0cmluZygxNikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSBoZXggZW5jb2RlZCBzdHJpbmcgdG8gYSBCeXRlQnVmZmVyLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gZGVjb2RlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5mcm9tSGV4ID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCAlIDIgIT09IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTGVuZ3RoIG5vdCBhIG11bHRpcGxlIG9mIDJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBrID0gc3RyLmxlbmd0aCxcclxuICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigoayAvIDIpIHwgMCwgbGl0dGxlRW5kaWFuKSxcclxuICAgICAgICAgICAgYjtcclxuICAgICAgICBmb3IgKHZhciBpPTAsIGo9MDsgaTxrOyBpKz0yKSB7XHJcbiAgICAgICAgICAgIGIgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKGksIGkrMiksIDE2KTtcclxuICAgICAgICAgICAgaWYgKCFub0Fzc2VydClcclxuICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYikgfHwgYiA8IDAgfHwgYiA+IDI1NSlcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogQ29udGFpbnMgbm9uLWhleCBjaGFyYWN0ZXJzXCIpO1xyXG4gICAgICAgICAgICBiYi52aWV3W2orK10gPSBiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYi5saW1pdCA9IGo7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyB1dGZ4LWVtYmVkZGFibGVcclxuXHJcbiAgICAvKipcclxuICAgICAqIHV0ZngtZW1iZWRkYWJsZSAoYykgMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxyXG4gICAgICogc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy91dGZ4IGZvciBkZXRhaWxzXHJcbiAgICAgKi9cclxuICAgIHZhciB1dGZ4ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHV0ZnggbmFtZXNwYWNlLlxyXG4gICAgICAgICAqIEBpbm5lclxyXG4gICAgICAgICAqIEB0eXBlIHshT2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIHV0ZnggPSB7fTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWF4aW11bSB2YWxpZCBjb2RlIHBvaW50LlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5NQVhfQ09ERVBPSU5UID0gMHgxMEZGRkY7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVuY29kZXMgVVRGOCBjb2RlIHBvaW50cyB0byBVVEY4IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKSB8IG51bWJlcn0gc3JjIENvZGUgcG9pbnRzIHNvdXJjZSwgZWl0aGVyIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnRcclxuICAgICAgICAgKiAgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjb2RlIHBvaW50cyBsZWZ0IG9yIGEgc2luZ2xlIG51bWVyaWMgY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguZW5jb2RlVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIGNwID0gc3JjLFxyXG4gICAgICAgICAgICAgICAgc3JjID0gZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgICAgICAgICB3aGlsZSAoY3AgIT09IG51bGwgfHwgKGNwID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3AgPCAweDgwKVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdChjcCYweDdGKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNwIDwgMHg4MDApXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjYpJjB4MUYpfDB4QzApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AmMHgzRil8MHg4MCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjcCA8IDB4MTAwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjEyKSYweDBGKXwweEUwKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChjcD4+NikmMHgzRil8MHg4MCksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KChjcCYweDNGKXwweDgwKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChjcD4+MTgpJjB4MDcpfDB4RjApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj4xMikmMHgzRil8MHg4MCksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjYpJjB4M0YpfDB4ODApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AmMHgzRil8MHg4MCk7XHJcbiAgICAgICAgICAgICAgICBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIFVURjggYnl0ZXMgdG8gVVRGOCBjb2RlIHBvaW50cy5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZVxyXG4gICAgICAgICAqICBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDb2RlIHBvaW50cyBkZXN0aW5hdGlvbiBhcyBhIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCBlYWNoIGRlY29kZWQgY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIHN0YXJ0aW5nIGJ5dGUgaXMgaW52YWxpZCBpbiBVVEY4XHJcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBsYXN0IHNlcXVlbmNlIGlzIHRydW5jYXRlZC4gSGFzIGFuIGFycmF5IHByb3BlcnR5IGBieXRlc2AgaG9sZGluZyB0aGVcclxuICAgICAgICAgKiAgcmVtYWluaW5nIGJ5dGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguZGVjb2RlVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBhLCBiLCBjLCBkLCBmYWlsID0gZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICAgICAgYiA9IGIuc2xpY2UoMCwgYi5pbmRleE9mKG51bGwpKTtcclxuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcihiLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgZXJyLm5hbWUgPSBcIlRydW5jYXRlZEVycm9yXCI7XHJcbiAgICAgICAgICAgICAgICBlcnJbJ2J5dGVzJ10gPSBiO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aGlsZSAoKGEgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoYSYweDgwKSA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICBkc3QoYSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYSYweEUwKSA9PT0gMHhDMClcclxuICAgICAgICAgICAgICAgICAgICAoKGIgPSBzcmMoKSkgPT09IG51bGwpICYmIGZhaWwoW2EsIGJdKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChhJjB4MUYpPDw2KSB8IChiJjB4M0YpKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChhJjB4RjApID09PSAweEUwKVxyXG4gICAgICAgICAgICAgICAgICAgICgoYj1zcmMoKSkgPT09IG51bGwgfHwgKGM9c3JjKCkpID09PSBudWxsKSAmJiBmYWlsKFthLCBiLCBjXSksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoYSYweDBGKTw8MTIpIHwgKChiJjB4M0YpPDw2KSB8IChjJjB4M0YpKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChhJjB4RjgpID09PSAweEYwKVxyXG4gICAgICAgICAgICAgICAgICAgICgoYj1zcmMoKSkgPT09IG51bGwgfHwgKGM9c3JjKCkpID09PSBudWxsIHx8IChkPXNyYygpKSA9PT0gbnVsbCkgJiYgZmFpbChbYSwgYiwgYyAsZF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGEmMHgwNyk8PDE4KSB8ICgoYiYweDNGKTw8MTIpIHwgKChjJjB4M0YpPDw2KSB8IChkJjB4M0YpKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgc3RhcnRpbmcgYnl0ZTogXCIrYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBVVEYxNiBjaGFyYWN0ZXJzIHRvIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHlcclxuICAgICAgICAgKiAgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ29kZSBwb2ludHMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggZWFjaCBjb252ZXJ0ZWQgY29kZVxyXG4gICAgICAgICAqICBwb2ludC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LlVURjE2dG9VVEY4ID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdmFyIGMxLCBjMiA9IG51bGw7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGMxID0gYzIgIT09IG51bGwgPyBjMiA6IHNyYygpKSA9PT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGlmIChjMSA+PSAweEQ4MDAgJiYgYzEgPD0gMHhERkZGKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjMiA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYzIgPj0gMHhEQzAwICYmIGMyIDw9IDB4REZGRikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KChjMS0weEQ4MDApKjB4NDAwK2MyLTB4REMwMCsweDEwMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyID0gbnVsbDsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkc3QoYzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjMiAhPT0gbnVsbCkgZHN0KGMyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBVVEY4IGNvZGUgcG9pbnRzIHRvIFVURjE2IGNoYXJhY3RlcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpIHwgbnVtYmVyfSBzcmMgQ29kZSBwb2ludHMgc291cmNlLCBlaXRoZXIgYXMgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY29kZSBwb2ludFxyXG4gICAgICAgICAqICByZXNwZWN0aXZlbHkgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNvZGUgcG9pbnRzIGxlZnQgb3IgYSBzaW5nbGUgbnVtZXJpYyBjb2RlIHBvaW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggY29udmVydGVkIGNoYXIgY29kZS5cclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIGNvZGUgcG9pbnQgaXMgb3V0IG9mIHJhbmdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5VVEY4dG9VVEYxNiA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIGNwID0gc3JjLCBzcmMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICAgICAgICAgIHdoaWxlIChjcCAhPT0gbnVsbCB8fCAoY3AgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjcCA8PSAweEZGRkYpXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KGNwKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBjcCAtPSAweDEwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3A+PjEwKSsweEQ4MDApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AlMHg0MDApKzB4REMwMCk7XHJcbiAgICAgICAgICAgICAgICBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBhbmQgZW5jb2RlcyBVVEYxNiBjaGFyYWN0ZXJzIHRvIFVURjggYnl0ZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHkgYG51bGxgXHJcbiAgICAgICAgICogIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4ID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdXRmeC5VVEYxNnRvVVRGOChzcmMsIGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICB1dGZ4LmVuY29kZVVURjgoY3AsIGRzdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYW5kIGNvbnZlcnRzIFVURjggYnl0ZXMgdG8gVVRGMTYgY2hhcmFjdGVycy5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZVxyXG4gICAgICAgICAqICBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggY29udmVydGVkIGNoYXIgY29kZS5cclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIHN0YXJ0aW5nIGJ5dGUgaXMgaW52YWxpZCBpbiBVVEY4XHJcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBsYXN0IHNlcXVlbmNlIGlzIHRydW5jYXRlZC4gSGFzIGFuIGFycmF5IHByb3BlcnR5IGBieXRlc2AgaG9sZGluZyB0aGUgcmVtYWluaW5nIGJ5dGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjgoc3JjLCBmdW5jdGlvbihjcCkge1xyXG4gICAgICAgICAgICAgICAgdXRmeC5VVEY4dG9VVEYxNihjcCwgZHN0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYW4gVVRGOCBjb2RlIHBvaW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjcCBVVEY4IGNvZGUgcG9pbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguY2FsY3VsYXRlQ29kZVBvaW50ID0gZnVuY3Rpb24oY3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIChjcCA8IDB4ODApID8gMSA6IChjcCA8IDB4ODAwKSA/IDIgOiAoY3AgPCAweDEwMDAwKSA/IDMgOiA0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpfSBzcmMgQ29kZSBwb2ludHMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnQgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICogIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjb2RlIHBvaW50cyBsZWZ0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgVVRGOCBieXRlcyByZXF1aXJlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguY2FsY3VsYXRlVVRGOCA9IGZ1bmN0aW9uKHNyYykge1xyXG4gICAgICAgICAgICB2YXIgY3AsIGw9MDtcclxuICAgICAgICAgICAgd2hpbGUgKChjcCA9IHNyYygpKSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIGwgKz0gKGNwIDwgMHg4MCkgPyAxIDogKGNwIDwgMHg4MDApID8gMiA6IChjcCA8IDB4MTAwMDApID8gMyA6IDQ7XHJcbiAgICAgICAgICAgIHJldHVybiBsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGNvZGUgcG9pbnRzIHJlc3BlY3RpdmVseSBVVEY4IGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIFVURjE2IGNoYXIgY29kZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpfSBzcmMgQ2hhcmFjdGVycyBzb3VyY2UgYXMgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY2hhciBjb2RlIHJlc3BlY3RpdmVseVxyXG4gICAgICAgICAqICBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY2hhcmFjdGVycyBsZWZ0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IFRoZSBudW1iZXIgb2YgVVRGOCBjb2RlIHBvaW50cyBhdCBpbmRleCAwIGFuZCB0aGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgcmVxdWlyZWQgYXQgaW5kZXggMS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4ID0gZnVuY3Rpb24oc3JjKSB7XHJcbiAgICAgICAgICAgIHZhciBuPTAsIGw9MDtcclxuICAgICAgICAgICAgdXRmeC5VVEYxNnRvVVRGOChzcmMsIGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICArK247IGwgKz0gKGNwIDwgMHg4MCkgPyAxIDogKGNwIDwgMHg4MDApID8gMiA6IChjcCA8IDB4MTAwMDApID8gMyA6IDQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gW24sbF07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHV0Zng7XHJcbiAgICB9KCk7XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL3V0ZjhcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgYmV0d2VlbiB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0gdG8gYW4gVVRGOCBlbmNvZGVkXHJcbiAgICAgKiAgc3RyaW5nLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gSGV4IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0ID4gbGltaXRgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9VVEY4ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgZW5kID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2Q7IHRyeSB7XHJcbiAgICAgICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmVnaW4gPCBlbmQgPyB0aGlzLnZpZXdbYmVnaW4rK10gOiBudWxsO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAoYmVnaW4gIT09IGVuZClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIrYmVnaW4rXCIgIT0gXCIrZW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGRlY29kZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuZnJvbVVURjggPSBmdW5jdGlvbihzdHIsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICBpZiAoIW5vQXNzZXJ0KVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgIHZhciBiYiA9IG5ldyBCeXRlQnVmZmVyKHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0ciksIHRydWUpWzFdLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSxcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICBiYi52aWV3W2krK10gPSBiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJiLmxpbWl0ID0gaTtcclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBCeXRlQnVmZmVyO1xyXG59KTtcclxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZVxuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGhcbiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuXG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOykge1xuICAgIHZhciBhc3NpZ25lZCA9IGFjY3VtICUgYmxvY2tTaXplXG4gICAgdmFyIHJlbWFpbmRlciA9IE1hdGgubWluKGxlbmd0aCAtIG9mZnNldCwgYmxvY2tTaXplIC0gYXNzaWduZWQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7XG4gICAgICBibG9ja1thc3NpZ25lZCArIGldID0gZGF0YVtvZmZzZXQgKyBpXVxuICAgIH1cblxuICAgIGFjY3VtICs9IHJlbWFpbmRlclxuICAgIG9mZnNldCArPSByZW1haW5kZXJcblxuICAgIGlmICgoYWNjdW0gJSBibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYmxvY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fbGVuICs9IGxlbmd0aFxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVcblxuICB0aGlzLl9ibG9ja1tyZW1dID0gMHg4MFxuXG4gIC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3RcbiAgLy8gbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobGVuZ3RoICsgMSArIChyZW0gKyAxKSkgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgcmVtICsgMSlcblxuICBpZiAocmVtID49IHRoaXMuX2ZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICB2YXIgYml0cyA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyB1aW50MzJcbiAgaWYgKGJpdHMgPD0gMHhmZmZmZmZmZikge1xuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICAvLyB1aW50NjRcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG93Qml0cyA9IChiaXRzICYgMHhmZmZmZmZmZikgPj4+IDBcbiAgICB2YXIgaGlnaEJpdHMgPSAoYml0cyAtIGxvd0JpdHMpIC8gMHgxMDAwMDAwMDBcblxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoaGlnaEJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDgpXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShsb3dCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2goKVxuXG4gIHJldHVybiBlbmMgPyBoYXNoLnRvU3RyaW5nKGVuYykgOiBoYXNoXG59XG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgZWN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJyk7XG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKTtcbnZhciBzZWNwMjU2azEgPSBlY3VydmUuZ2V0Q3VydmVCeU5hbWUoJ3NlY3AyNTZrMScpO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIGtleVV0aWxzID0gcmVxdWlyZSgnLi9rZXlfdXRpbHMnKTtcblxudmFyIEcgPSBzZWNwMjU2azEuRztcbnZhciBuID0gc2VjcDI1NmsxLm47XG5cbm1vZHVsZS5leHBvcnRzID0gUHVibGljS2V5O1xuXG4vKipcbiAgQHBhcmFtIHtzdHJpbmd8QnVmZmVyfFB1YmxpY0tleXxlY3VydmUuUG9pbnR9IHB1YmxpYyBrZXlcbiAgQHBhcmFtIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddXG4qL1xuZnVuY3Rpb24gUHVibGljS2V5KFEpIHtcbiAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG5cbiAgICBpZiAodHlwZW9mIFEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBwdWJsaWNLZXkgPSBQdWJsaWNLZXkuZnJvbVN0cmluZyhRLCBwdWJrZXlfcHJlZml4KTtcbiAgICAgICAgYXNzZXJ0KHB1YmxpY0tleSAhPSBudWxsLCAnSW52YWxpZCBwdWJsaWMga2V5Jyk7XG4gICAgICAgIHJldHVybiBwdWJsaWNLZXk7XG4gICAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoUSkpIHtcbiAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tQnVmZmVyKFEpO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBRID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihRKSkgPT09ICdvYmplY3QnICYmIFEuUSkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5KFEuUSk7XG4gICAgfVxuXG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBRID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihRKSwgJ29iamVjdCcsICdJbnZhbGlkIHB1YmxpYyBrZXknKTtcbiAgICBhc3NlcnQuZXF1YWwoX3R5cGVvZihRLmNvbXByZXNzZWQpLCAnYm9vbGVhbicsICdJbnZhbGlkIHB1YmxpYyBrZXknKTtcblxuICAgIGZ1bmN0aW9uIHRvQnVmZmVyKCkge1xuICAgICAgICB2YXIgY29tcHJlc3NlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogUS5jb21wcmVzc2VkO1xuXG4gICAgICAgIHJldHVybiBRLmdldEVuY29kZWQoY29tcHJlc3NlZCk7XG4gICAgfVxuXG4gICAgdmFyIHB1YmRhdGEgPSB2b2lkIDA7IC8vIGNhY2hlXG5cbiAgICAvLyAvKipcbiAgICAvLyAgICAgQHRvZG8gc2VjcDIyNHIxXG4gICAgLy8gICAgIEByZXR1cm4ge3N0cmluZ30gUFVCX0sxX2Jhc2U1OHB1YmtleS4uXG4gICAgLy8gKi9cbiAgICAvLyBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAvLyAgICAgaWYocHViZGF0YSkge1xuICAgIC8vICAgICAgICAgcmV0dXJuIHB1YmRhdGFcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBwdWJkYXRhID0gYFBVQl9LMV9gICsga2V5VXRpbHMuY2hlY2tFbmNvZGUodG9CdWZmZXIoKSwgJ0sxJylcbiAgICAvLyAgICAgcmV0dXJuIHB1YmRhdGE7XG4gICAgLy8gfVxuXG4gICAgLyoqIEB0b2RvIHJlbmFtZSB0byB0b1N0cmluZ0xlZ2FjeVxuICAgICAqIEBhcmcge3N0cmluZ30gW3B1YmtleV9wcmVmaXggPSAnRU9TJ10gLSBwdWJsaWMga2V5IHByZWZpeFxuICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHZhciBwdWJrZXlfcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnRU9TJztcblxuICAgICAgICByZXR1cm4gcHVia2V5X3ByZWZpeCArIGtleVV0aWxzLmNoZWNrRW5jb2RlKHRvQnVmZmVyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvVW5jb21wcmVzc2VkKCkge1xuICAgICAgICB2YXIgYnVmID0gUS5nZXRFbmNvZGVkKGZhbHNlKTtcbiAgICAgICAgdmFyIHBvaW50ID0gZWN1cnZlLlBvaW50LmRlY29kZUZyb20oc2VjcDI1NmsxLCBidWYpO1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21Qb2ludChwb2ludCk7XG4gICAgfVxuXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgZnVuY3Rpb24gY2hpbGQob2Zmc2V0KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RlcHJlY2F0ZWQgd2FybmluZzogUHVibGljS2V5LmNoaWxkJyk7XG5cbiAgICAgICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihvZmZzZXQpLCBcIkJ1ZmZlciByZXF1aXJlZDogb2Zmc2V0XCIpO1xuICAgICAgICBhc3NlcnQuZXF1YWwob2Zmc2V0Lmxlbmd0aCwgMzIsIFwib2Zmc2V0IGxlbmd0aFwiKTtcblxuICAgICAgICBvZmZzZXQgPSBCdWZmZXIuY29uY2F0KFt0b0J1ZmZlcigpLCBvZmZzZXRdKTtcbiAgICAgICAgb2Zmc2V0ID0gaGFzaC5zaGEyNTYob2Zmc2V0KTtcblxuICAgICAgICB2YXIgYyA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihvZmZzZXQpO1xuXG4gICAgICAgIGlmIChjLmNvbXBhcmVUbyhuKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJDaGlsZCBvZmZzZXQgd2VudCBvdXQgb2YgYm91bmRzLCB0cnkgYWdhaW5cIik7XG5cbiAgICAgICAgdmFyIGNHID0gRy5tdWx0aXBseShjKTtcbiAgICAgICAgdmFyIFFwcmltZSA9IFEuYWRkKGNHKTtcblxuICAgICAgICBpZiAoc2VjcDI1NmsxLmlzSW5maW5pdHkoUXByaW1lKSkgdGhyb3cgbmV3IEVycm9yKFwiQ2hpbGQgb2Zmc2V0IGRlcml2ZWQgdG8gYW4gaW52YWxpZCBrZXksIHRyeSBhZ2FpblwiKTtcblxuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21Qb2ludChRcHJpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSGV4KCkge1xuICAgICAgICByZXR1cm4gdG9CdWZmZXIoKS50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUTogUSxcbiAgICAgICAgdG9TdHJpbmc6IHRvU3RyaW5nLFxuICAgICAgICAvLyB0b1N0cmluZ0xlZ2FjeSxcbiAgICAgICAgdG9VbmNvbXByZXNzZWQ6IHRvVW5jb21wcmVzc2VkLFxuICAgICAgICB0b0J1ZmZlcjogdG9CdWZmZXIsXG4gICAgICAgIGNoaWxkOiBjaGlsZCxcbiAgICAgICAgdG9IZXg6IHRvSGV4XG4gICAgfTtcbn1cblxuLyoqXG4gIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcnxQdWJsaWNLZXl8ZWN1cnZlLlBvaW50fSBwdWJrZXkgLSBwdWJsaWMga2V5XG4gIEBwYXJhbSB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXVxuKi9cblB1YmxpY0tleS5pc1ZhbGlkID0gZnVuY3Rpb24gKHB1YmtleSkge1xuICAgIHZhciBwdWJrZXlfcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnRU9TJztcblxuICAgIHRyeSB7XG4gICAgICAgIFB1YmxpY0tleShwdWJrZXksIHB1YmtleV9wcmVmaXgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5QdWJsaWNLZXkuZnJvbUJpbmFyeSA9IGZ1bmN0aW9uIChiaW4pIHtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIobmV3IEJ1ZmZlcihiaW4sICdiaW5hcnknKSk7XG59O1xuXG5QdWJsaWNLZXkuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICByZXR1cm4gUHVibGljS2V5KGVjdXJ2ZS5Qb2ludC5kZWNvZGVGcm9tKHNlY3AyNTZrMSwgYnVmZmVyKSk7XG59O1xuXG5QdWJsaWNLZXkuZnJvbVBvaW50ID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIFB1YmxpY0tleShwb2ludCk7XG59O1xuXG4vKipcbiAgICBAYXJnIHtzdHJpbmd9IHB1YmxpY19rZXkgLSBsaWtlIFBVQl9LMV9iYXNlNThwdWJrZXkuLlxuICAgIEBhcmcge3N0cmluZ30gW3B1YmtleV9wcmVmaXggPSAnRU9TJ10gLSBwdWJsaWMga2V5IHByZWZpeFxuICAgIEByZXR1cm4gUHVibGljS2V5IG9yIGBudWxsYCAoaW52YWxpZClcbiovXG5QdWJsaWNLZXkuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChwdWJsaWNfa2V5KSB7XG4gICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdFT1MnO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tU3RyaW5nT3JUaHJvdyhwdWJsaWNfa2V5LCBwdWJrZXlfcHJlZml4KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gcHVibGljX2tleSAtIGxpa2UgUFVCX0sxX2Jhc2U1OHB1YmtleS4uXG4gICAgQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXSAtIHB1YmxpYyBrZXkgcHJlZml4XG5cbiAgICBAdGhyb3dzIHtFcnJvcn0gaWYgcHVibGljIGtleSBpcyBpbnZhbGlkXG5cbiAgICBAcmV0dXJuIFB1YmxpY0tleVxuKi9cblB1YmxpY0tleS5mcm9tU3RyaW5nT3JUaHJvdyA9IGZ1bmN0aW9uIChwdWJsaWNfa2V5KSB7XG4gICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdFT1MnO1xuXG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBwdWJsaWNfa2V5ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwdWJsaWNfa2V5KSwgJ3N0cmluZycsICdwdWJsaWNfa2V5Jyk7XG4gICAgdmFyIG1hdGNoID0gcHVibGljX2tleS5tYXRjaCgvXlBVQl8oW0EtWmEtejAtOV0rKV8oW0EtWmEtejAtOV0rKSQvKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgLy8gbGVnYWN5XG4gICAgICAgIHZhciBwcmVmaXhfbWF0Y2ggPSBuZXcgUmVnRXhwKFwiXlwiICsgcHVia2V5X3ByZWZpeCk7XG4gICAgICAgIGlmIChwcmVmaXhfbWF0Y2gudGVzdChwdWJsaWNfa2V5KSkge1xuICAgICAgICAgICAgcHVibGljX2tleSA9IHB1YmxpY19rZXkuc3Vic3RyaW5nKHB1YmtleV9wcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUocHVibGljX2tleSkpO1xuICAgIH1cbiAgICBhc3NlcnQobWF0Y2gubGVuZ3RoID09PSAzLCAnRXhwZWN0aW5nIHB1YmxpYyBrZXkgbGlrZTogUFVCX0sxX2Jhc2U1OHB1YmtleS4uJyk7XG5cbiAgICB2YXIgX21hdGNoID0gX3NsaWNlZFRvQXJyYXkobWF0Y2gsIDMpLFxuICAgICAgICBrZXlUeXBlID0gX21hdGNoWzFdLFxuICAgICAgICBrZXlTdHJpbmcgPSBfbWF0Y2hbMl07XG5cbiAgICBhc3NlcnQuZXF1YWwoa2V5VHlwZSwgJ0sxJywgJ0sxIHByaXZhdGUga2V5IGV4cGVjdGVkJyk7XG4gICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tQnVmZmVyKGtleVV0aWxzLmNoZWNrRGVjb2RlKGtleVN0cmluZywga2V5VHlwZSkpO1xufTtcblxuUHVibGljS2V5LmZyb21IZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tQnVmZmVyKG5ldyBCdWZmZXIoaGV4LCAnaGV4JykpO1xufTtcblxuUHVibGljS2V5LmZyb21TdHJpbmdIZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tU3RyaW5nKG5ldyBCdWZmZXIoaGV4LCAnaGV4JykpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIGJhc2U1OCA9IHJlcXVpcmUoJ2JzNTgnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHJhbmRvbTMyQnl0ZUJ1ZmZlcjogcmFuZG9tMzJCeXRlQnVmZmVyLFxuICAgIGFkZEVudHJvcHk6IGFkZEVudHJvcHksXG4gICAgY3B1RW50cm9weTogY3B1RW50cm9weSxcbiAgICBlbnRyb3B5Q291bnQ6IGZ1bmN0aW9uIGVudHJvcHlDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIF9lbnRyb3B5Q291bnQ7XG4gICAgfSxcbiAgICBjaGVja0RlY29kZTogY2hlY2tEZWNvZGUsXG4gICAgY2hlY2tFbmNvZGU6IGNoZWNrRW5jb2RlXG59O1xuXG52YXIgZW50cm9weVBvcyA9IDAsXG4gICAgX2VudHJvcHlDb3VudCA9IDA7XG5cbnZhciBleHRlcm5hbEVudHJvcHlBcnJheSA9IHJhbmRvbUJ5dGVzKDEwMSk7XG5cbi8qKlxuICAgIEFkZGl0aW9uYWwgZm9ybXMgb2YgZW50cm9weSBhcmUgdXNlZC4gIEEgd2VlayByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBjYW4gcnVuIG91dCBvZiBlbnRyb3B5LiAgVGhpcyBzaG91bGQgZW5zdXJlIGV2ZW4gdGhlIHdvcnN0IHJhbmRvbSBudW1iZXIgaW1wbGVtZW50YXRpb24gd2lsbCBiZSByZWFzb25hYmx5IHNhZmUuXG5cbiAgICBAYXJnIHtudW1iZXJ9IFtjcHVFbnRyb3B5Qml0cyA9IDBdIGdlbmVyYXRlIGVudHJvcHkgb24gdGhlIGZseS4gIFRoaXMgaXNcbiAgICBub3QgcmVxdWlyZWQsIGVudHJvcHkgY2FuIGJlIGFkZGVkIGluIGFkdmFuY2VkIHZpYSBhZGRFbnRyb3B5IG9yIGluaXRpYWxpemUoKS5cblxuICAgIEBhcmcge2Jvb2xlYW59IFtzYWZlID0gdHJ1ZV0gZmFsc2UgZm9yIHRlc3RpbmcsIG90aGVyd2lzZSB0aGlzIHdpbGwgYmVcbiAgICB0cnVlIHRvIGVuc3VyZSBpbml0aWFsaXplKCkgd2FzIGNhbGxlZC5cblxuICAgIEByZXR1cm4gYSByYW5kb20gYnVmZmVyIG9idGFpbmVkIGZyb20gdGhlIHNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRvci4gIEFkZGl0aW9uYWwgZW50cm9weSBpcyB1c2VkLlxuKi9cbmZ1bmN0aW9uIHJhbmRvbTMyQnl0ZUJ1ZmZlcigpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWYkY3B1RW50cm9weUJpdHMgPSBfcmVmLmNwdUVudHJvcHlCaXRzLFxuICAgICAgICBjcHVFbnRyb3B5Qml0cyA9IF9yZWYkY3B1RW50cm9weUJpdHMgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJGNwdUVudHJvcHlCaXRzLFxuICAgICAgICBfcmVmJHNhZmUgPSBfcmVmLnNhZmUsXG4gICAgICAgIHNhZmUgPSBfcmVmJHNhZmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNhZmU7XG5cbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGNwdUVudHJvcHlCaXRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjcHVFbnRyb3B5Qml0cyksICdudW1iZXInLCAnY3B1RW50cm9weUJpdHMnKTtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHNhZmUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHNhZmUpLCAnYm9vbGVhbicsICdib29sZWFuJyk7XG5cbiAgICBpZiAoc2FmZSkge1xuICAgICAgICBhc3NlcnQoX2VudHJvcHlDb3VudCA+PSAxMjgsICdDYWxsIGluaXRpYWxpemUoKSB0byBhZGQgZW50cm9weScpO1xuICAgIH1cblxuICAgIC8vIGlmKGVudHJvcHlDb3VudCA+IDApIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coYEFkZGl0aW9uYWwgcHJpdmF0ZSBrZXkgZW50cm9weTogJHtlbnRyb3B5Q291bnR9IGV2ZW50c2ApXG4gICAgLy8gfVxuXG4gICAgdmFyIGhhc2hfYXJyYXkgPSBbXTtcbiAgICBoYXNoX2FycmF5LnB1c2gocmFuZG9tQnl0ZXMoMzIpKTtcbiAgICBoYXNoX2FycmF5LnB1c2goQnVmZmVyLmZyb20oY3B1RW50cm9weShjcHVFbnRyb3B5Qml0cykpKTtcbiAgICBoYXNoX2FycmF5LnB1c2goZXh0ZXJuYWxFbnRyb3B5QXJyYXkpO1xuICAgIGhhc2hfYXJyYXkucHVzaChicm93c2VyRW50cm9weSgpKTtcbiAgICByZXR1cm4gaGFzaC5zaGEyNTYoQnVmZmVyLmNvbmNhdChoYXNoX2FycmF5KSk7XG59XG5cbi8qKlxuICAgIEFkZHMgZW50cm9weS4gIFRoaXMgbWF5IGJlIGNhbGxlZCBtYW55IHRpbWVzIHdoaWxlIHRoZSBhbW91bnQgb2YgZGF0YSBzYXZlZFxuICAgIGlzIGFjY3VtdWxhdGl2ZWx5IHJlZHVjZWQgdG8gMTAxIGludGVnZXJzLiAgRGF0YSBpcyByZXRhaW5lZCBpbiBSQU0gZm9yIHRoZVxuICAgIGxpZmUgb2YgdGhpcyBtb2R1bGUuXG5cbiAgICBAZXhhbXBsZSBSZWFjdCA8Y29kZT5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZWZzLk15Q29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbkVudHJvcHlFdmVudCwge2NhcHR1cmU6IGZhbHNlLCBwYXNzaXZlOiB0cnVlfSlcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVmcy5NeUNvbXBvbmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25FbnRyb3B5RXZlbnQpO1xuICAgIH1cbiAgICBvbkVudHJvcHlFdmVudCA9IChlKSA9PiB7XG4gICAgICAgIGlmKGUudHlwZSA9PT0gJ21vdXNlbW92ZScpXG4gICAgICAgICAgICBrZXlfdXRpbHMuYWRkRW50cm9weShlLnBhZ2VYLCBlLnBhZ2VZLCBlLnNjcmVlblgsIGUuc2NyZWVuWSlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ29uRW50cm9weUV2ZW50IFVua25vd24nLCBlLnR5cGUsIGUpXG4gICAgfVxuICAgIDwvY29kZT5cbiovXG5mdW5jdGlvbiBhZGRFbnRyb3B5KCkge1xuICAgIGFzc2VydC5lcXVhbChleHRlcm5hbEVudHJvcHlBcnJheS5sZW5ndGgsIDEwMSwgJ2V4dGVybmFsRW50cm9weUFycmF5Jyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBpbnRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF9lbnRyb3B5Q291bnQgKz0gaW50cy5sZW5ndGg7XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGludHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgcG9zID0gZW50cm9weVBvcysrICUgMTAxO1xuICAgICAgICAgICAgdmFyIGkyID0gZXh0ZXJuYWxFbnRyb3B5QXJyYXlbcG9zXSArPSBpO1xuICAgICAgICAgICAgaWYgKGkyID4gOTAwNzE5OTI1NDc0MDk5MSkgZXh0ZXJuYWxFbnRyb3B5QXJyYXlbcG9zXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gICAgVGhpcyBydW5zIGluIGp1c3QgdW5kZXIgMSBzZWNvbmQgYW5kIGVuc3VyZXMgYSBtaW5pbXVtIG9mIGNwdUVudHJvcHlCaXRzXG4gICAgYml0cyBvZiBlbnRyb3B5IGFyZSBnYXRoZXJlZC5cblxuICAgIEJhc2VkIG9uIG1vcmUtZW50cm9weS4gQHNlZSBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS9tb3JlLWVudHJvcHkvYmxvYi9tYXN0ZXIvc3JjL2dlbmVyYXRvci5pY2VkXG5cbiAgICBAYXJnIHtudW1iZXJ9IFtjcHVFbnRyb3B5Qml0cyA9IDEyOF1cbiAgICBAcmV0dXJuIHthcnJheX0gY291bnRzIGdhdGhlcmVkIGJ5IG1lYXN1cmluZyB2YXJpYXRpb25zIGluIHRoZSBDUFUgc3BlZWQgZHVyaW5nIGZsb2F0aW5nIHBvaW50IG9wZXJhdGlvbnMuXG4qL1xuZnVuY3Rpb24gY3B1RW50cm9weSgpIHtcbiAgICB2YXIgY3B1RW50cm9weUJpdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDEyODtcblxuICAgIHZhciBjb2xsZWN0ZWQgPSBbXTtcbiAgICB2YXIgbGFzdENvdW50ID0gbnVsbDtcbiAgICB2YXIgbG93RW50cm9weVNhbXBsZXMgPSAwO1xuICAgIHdoaWxlIChjb2xsZWN0ZWQubGVuZ3RoIDwgY3B1RW50cm9weUJpdHMpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gZmxvYXRpbmdQb2ludENvdW50KCk7XG4gICAgICAgIGlmIChsYXN0Q291bnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gY291bnQgLSBsYXN0Q291bnQ7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGVsdGEpIDwgMSkge1xuICAgICAgICAgICAgICAgIGxvd0VudHJvcHlTYW1wbGVzKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBob3cgbWFueSBiaXRzIG9mIGVudHJvcHkgd2VyZSBpbiB0aGlzIHNhbXBsZVxuICAgICAgICAgICAgdmFyIGJpdHMgPSBNYXRoLmZsb29yKGxvZzIoTWF0aC5hYnMoZGVsdGEpKSArIDEpO1xuICAgICAgICAgICAgaWYgKGJpdHMgPCA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGJpdHMgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvd0VudHJvcHlTYW1wbGVzKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sbGVjdGVkLnB1c2goZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RDb3VudCA9IGNvdW50O1xuICAgIH1cbiAgICBpZiAobG93RW50cm9weVNhbXBsZXMgPiAxMCkge1xuICAgICAgICB2YXIgcGN0ID0gTnVtYmVyKGxvd0VudHJvcHlTYW1wbGVzIC8gY3B1RW50cm9weUJpdHMgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgIC8vIElzIHRoaXMgYWxnb3JpdGhtIGdldHRpbmcgaW5lZmZpY2llbnQ/XG4gICAgICAgIGNvbnNvbGUud2FybignV0FSTjogJyArIHBjdCArICclIGxvdyBDUFUgZW50cm9weSByZS1zYW1wbGVkJyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0ZWQ7XG59XG5cbi8qKlxuICAgIEBwcml2YXRlXG4gICAgQ291bnQgd2hpbGUgcGVyZm9ybWluZyBmbG9hdGluZyBwb2ludCBvcGVyYXRpb25zIGR1cmluZyBhIGZpeGVkIHRpbWVcbiAgICAoNyBtcyBmb3IgZXhhbXBsZSkuICBVc2luZyBhIGZpeGVkIHRpbWUgbWFrZXMgdGhpcyBhbGdvcml0aG1cbiAgICBwcmVkaWN0YWJsZSBpbiBydW50aW1lLlxuKi9cbmZ1bmN0aW9uIGZsb2F0aW5nUG9pbnRDb3VudCgpIHtcbiAgICB2YXIgd29ya01pbk1zID0gNztcbiAgICB2YXIgZCA9IERhdGUubm93KCk7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICB4ID0gMDtcbiAgICB3aGlsZSAoRGF0ZS5ub3coKSA8IGQgKyB3b3JrTWluTXMgKyAxKSB7XG4gICAgICAgIHggPSBNYXRoLnNpbihNYXRoLnNxcnQoTWF0aC5sb2coKytpICsgeCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG5cbnZhciBsb2cyID0gZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG59O1xuXG4vKipcbiAgICBAcHJpdmF0ZVxuICAgIEF0dGVtcHQgdG8gZ2F0aGVyIGFuZCBoYXNoIGluZm9ybWF0aW9uIGZyb20gdGhlIGJyb3dzZXIncyB3aW5kb3csIGhpc3RvcnksIGFuZCBzdXBwb3J0ZWQgbWltZSB0eXBlcy4gIEZvciBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgdGhpcyBzaW1wbHkgaW5jbHVkZXMgc2VjdXJlIHJhbmRvbSBkYXRhLiAgSW4gYW55IGV2ZW50LCB0aGUgaW5mb3JtYXRpb24gaXMgcmUtaGFzaGVkIGluIGEgbG9vcCBmb3IgMjUgbWlsbGlzZWNvbmRzIHNlY29uZHMuXG5cbiAgICBAcmV0dXJuIHtCdWZmZXJ9IDMyIGJ5dGVzXG4qL1xuZnVuY3Rpb24gYnJvd3NlckVudHJvcHkoKSB7XG4gICAgdmFyIGVudHJvcHlTdHIgPSBBcnJheShyYW5kb21CeXRlcygxMDEpKS5qb2luKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgZW50cm9weVN0ciArPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCkgKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4uaGVpZ2h0ICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLndpZHRoICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLmNvbG9yRGVwdGggKyBcIiBcIiArIFwiIFwiICsgd2luZG93LnNjcmVlbi5hdmFpbEhlaWdodCArIFwiIFwiICsgd2luZG93LnNjcmVlbi5hdmFpbFdpZHRoICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLnBpeGVsRGVwdGggKyBuYXZpZ2F0b3IubGFuZ3VhZ2UgKyBcIiBcIiArIHdpbmRvdy5sb2NhdGlvbiArIFwiIFwiICsgd2luZG93Lmhpc3RvcnkubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBtaW1lVHlwZTsgaSA8IG5hdmlnYXRvci5taW1lVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG1pbWVUeXBlID0gbmF2aWdhdG9yLm1pbWVUeXBlc1tpXTtcbiAgICAgICAgICAgIGVudHJvcHlTdHIgKz0gbWltZVR5cGUuZGVzY3JpcHRpb24gKyBcIiBcIiArIG1pbWVUeXBlLnR5cGUgKyBcIiBcIiArIG1pbWVUeXBlLnN1ZmZpeGVzICsgXCIgXCI7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvL25vZGVqczpSZWZlcmVuY2VFcnJvcjogd2luZG93IGlzIG5vdCBkZWZpbmVkXG4gICAgICAgIGVudHJvcHlTdHIgKz0gaGFzaC5zaGEyNTYobmV3IERhdGUoKS50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICB2YXIgYiA9IG5ldyBCdWZmZXIoZW50cm9weVN0cik7XG4gICAgZW50cm9weVN0ciArPSBiLnRvU3RyaW5nKCdiaW5hcnknKSArIFwiIFwiICsgbmV3IERhdGUoKS50b1N0cmluZygpO1xuXG4gICAgdmFyIGVudHJvcHkgPSBlbnRyb3B5U3RyO1xuICAgIHZhciBzdGFydF90ID0gRGF0ZS5ub3coKTtcbiAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0X3QgPCAyNSkge1xuICAgICAgICBlbnRyb3B5ID0gaGFzaC5zaGEyNTYoZW50cm9weSk7XG4gICAgfXJldHVybiBlbnRyb3B5O1xufVxuXG4vKipcbiAgQGFyZyB7QnVmZmVyfSBrZXlCdWZmZXIgZGF0YVxuICBAYXJnIHtzdHJpbmd9IGtleVR5cGUgPSBzaGEyNTZ4MiwgSzEsIGV0Y1xuICBAcmV0dXJuIHtzdHJpbmd9IGNoZWNrc3VtIGVuY29kZWQgYmFzZTU4IHN0cmluZ1xuKi9cbmZ1bmN0aW9uIGNoZWNrRW5jb2RlKGtleUJ1ZmZlcikge1xuICAgIHZhciBrZXlUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihrZXlCdWZmZXIpLCAnZXhwZWN0aW5nIGtleUJ1ZmZlcjxCdWZmZXI+Jyk7XG4gICAgaWYgKGtleVR5cGUgPT09ICdzaGEyNTZ4MicpIHtcbiAgICAgICAgLy8gbGVnYWN5XG4gICAgICAgIHZhciBjaGVja3N1bSA9IGhhc2guc2hhMjU2KGhhc2guc2hhMjU2KGtleUJ1ZmZlcikpLnNsaWNlKDAsIDQpO1xuICAgICAgICByZXR1cm4gYmFzZTU4LmVuY29kZShCdWZmZXIuY29uY2F0KFtrZXlCdWZmZXIsIGNoZWNrc3VtXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGVjayA9IFtrZXlCdWZmZXJdO1xuICAgICAgICBpZiAoa2V5VHlwZSkge1xuICAgICAgICAgICAgY2hlY2sucHVzaChCdWZmZXIuZnJvbShrZXlUeXBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9jaGVja3N1bSA9IGhhc2gucmlwZW1kMTYwKEJ1ZmZlci5jb25jYXQoY2hlY2spKS5zbGljZSgwLCA0KTtcbiAgICAgICAgcmV0dXJuIGJhc2U1OC5lbmNvZGUoQnVmZmVyLmNvbmNhdChba2V5QnVmZmVyLCBfY2hlY2tzdW1dKSk7XG4gICAgfVxufVxuXG4vKipcbiAgQGFyZyB7QnVmZmVyfSBrZXlTdHJpbmcgZGF0YVxuICBAYXJnIHtzdHJpbmd9IGtleVR5cGUgPSBzaGEyNTZ4MiwgSzEsIGV0Y1xuICBAcmV0dXJuIHtzdHJpbmd9IGNoZWNrc3VtIGVuY29kZWQgYmFzZTU4IHN0cmluZ1xuKi9cbmZ1bmN0aW9uIGNoZWNrRGVjb2RlKGtleVN0cmluZykge1xuICAgIHZhciBrZXlUeXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgYXNzZXJ0KGtleVN0cmluZyAhPSBudWxsLCAncHJpdmF0ZSBrZXkgZXhwZWN0ZWQnKTtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihiYXNlNTguZGVjb2RlKGtleVN0cmluZykpO1xuICAgIHZhciBjaGVja3N1bSA9IGJ1ZmZlci5zbGljZSgtNCk7XG4gICAgdmFyIGtleSA9IGJ1ZmZlci5zbGljZSgwLCAtNCk7XG5cbiAgICB2YXIgbmV3Q2hlY2sgPSB2b2lkIDA7XG4gICAgaWYgKGtleVR5cGUgPT09ICdzaGEyNTZ4MicpIHtcbiAgICAgICAgLy8gbGVnYWN5XG4gICAgICAgIG5ld0NoZWNrID0gaGFzaC5zaGEyNTYoaGFzaC5zaGEyNTYoa2V5KSkuc2xpY2UoMCwgNCk7IC8vIFdJRiAobGVnYWN5KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGVjayA9IFtrZXldO1xuICAgICAgICBpZiAoa2V5VHlwZSkge1xuICAgICAgICAgICAgY2hlY2sucHVzaChCdWZmZXIuZnJvbShrZXlUeXBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3Q2hlY2sgPSBoYXNoLnJpcGVtZDE2MChCdWZmZXIuY29uY2F0KGNoZWNrKSkuc2xpY2UoMCwgNCk7IC8vUFZUXG4gICAgfVxuXG4gICAgaWYgKGNoZWNrc3VtLnRvU3RyaW5nKCkgIT09IG5ld0NoZWNrLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNoZWNrc3VtLCAnICsgKGNoZWNrc3VtLnRvU3RyaW5nKCdoZXgnKSArICcgIT0gJyArIG5ld0NoZWNrLnRvU3RyaW5nKCdoZXgnKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgZWN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJyk7XG52YXIgUG9pbnQgPSBlY3VydmUuUG9pbnQ7XG52YXIgc2VjcDI1NmsxID0gZWN1cnZlLmdldEN1cnZlQnlOYW1lKCdzZWNwMjU2azEnKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoJy4va2V5X3B1YmxpYycpO1xudmFyIGtleVV0aWxzID0gcmVxdWlyZSgnLi9rZXlfdXRpbHMnKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciBwcm9taXNlQXN5bmMgPSByZXF1aXJlKCcuL3Byb21pc2UtYXN5bmMnKTtcblxudmFyIEcgPSBzZWNwMjU2azEuRztcbnZhciBuID0gc2VjcDI1NmsxLm47XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpdmF0ZUtleTtcblxuLyoqXG4gIEB0eXBlZGVmIHtzdHJpbmd9IHdpZiAtIGh0dHBzOi8vZW4uYml0Y29pbi5pdC93aWtpL1dhbGxldF9pbXBvcnRfZm9ybWF0XG4gIEB0eXBlZGVmIHtzdHJpbmd9IHB1YmtleSAtIEVPU0tleS4uXG4gIEB0eXBlZGVmIHtlY3VydmUuUG9pbnR9IFBvaW50XG4qL1xuXG4vKipcbiAgQHBhcmFtIHtCaWdJbnRlZ2VyfSBkXG4qL1xuZnVuY3Rpb24gUHJpdmF0ZUtleShkKSB7XG4gICAgaWYgKHR5cGVvZiBkID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKGQpO1xuICAgIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGQpKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21CdWZmZXIoZCk7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIGQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGQpKSA9PT0gJ29iamVjdCcgJiYgQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIoZC5kKSkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleShkLmQpO1xuICAgIH1cblxuICAgIGlmICghQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIoZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBwcml2YXRlIGtleScpO1xuICAgIH1cblxuICAgIC8qKiBAcmV0dXJuIHtzdHJpbmd9IHByaXZhdGUga2V5IGxpa2UgUFZUX0sxX2Jhc2U1OHByaXZhdGVrZXkuLiAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAvLyB0b2RvLCB1c2UgUFZUX0sxX1xuICAgICAgICAvLyByZXR1cm4gJ1BWVF9LMV8nICsga2V5VXRpbHMuY2hlY2tFbmNvZGUodG9CdWZmZXIoKSwgJ0sxJylcbiAgICAgICAgcmV0dXJuIHRvV2lmKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgIEByZXR1cm4gIHt3aWZ9XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1dpZigpIHtcbiAgICAgICAgdmFyIHByaXZhdGVfa2V5ID0gdG9CdWZmZXIoKTtcbiAgICAgICAgLy8gY2hlY2tzdW0gaW5jbHVkZXMgdGhlIHZlcnNpb25cbiAgICAgICAgcHJpdmF0ZV9rZXkgPSBCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFsweDgwXSksIHByaXZhdGVfa2V5XSk7XG4gICAgICAgIHJldHVybiBrZXlVdGlscy5jaGVja0VuY29kZShwcml2YXRlX2tleSwgJ3NoYTI1NngyJyk7XG4gICAgfVxuXG4gICAgdmFyIHB1YmxpY19rZXkgPSB2b2lkIDA7XG5cbiAgICAvKipcbiAgICAgICAgQHJldHVybiB7UG9pbnR9XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1B1YmxpYygpIHtcbiAgICAgICAgaWYgKHB1YmxpY19rZXkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlXG4gICAgICAgICAgICAvLyBTIEwgTyBXIGluIHRoZSBicm93c2VyXG4gICAgICAgICAgICByZXR1cm4gcHVibGljX2tleTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUSA9IHNlY3AyNTZrMS5HLm11bHRpcGx5KGQpO1xuICAgICAgICByZXR1cm4gcHVibGljX2tleSA9IFB1YmxpY0tleS5mcm9tUG9pbnQoUSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiBkLnRvQnVmZmVyKDMyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgIEVDSUVTXG4gICAgICBAYXJnIHtzdHJpbmd8T2JqZWN0fSBwdWJrZXkgd2lmLCBQdWJsaWNLZXkgb2JqZWN0XG4gICAgICBAcmV0dXJuIHtCdWZmZXJ9IDY0IGJ5dGUgc2hhcmVkIHNlY3JldFxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHB1YmxpY19rZXkpIHtcbiAgICAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleShwdWJsaWNfa2V5KTtcbiAgICAgICAgdmFyIEtCID0gcHVibGljX2tleS50b1VuY29tcHJlc3NlZCgpLnRvQnVmZmVyKCk7XG4gICAgICAgIHZhciBLQlAgPSBQb2ludC5mcm9tQWZmaW5lKHNlY3AyNTZrMSwgQmlnSW50ZWdlci5mcm9tQnVmZmVyKEtCLnNsaWNlKDEsIDMzKSksIC8vIHhcbiAgICAgICAgQmlnSW50ZWdlci5mcm9tQnVmZmVyKEtCLnNsaWNlKDMzLCA2NSkpIC8vIHlcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIHIgPSB0b0J1ZmZlcigpO1xuICAgICAgICB2YXIgUCA9IEtCUC5tdWx0aXBseShCaWdJbnRlZ2VyLmZyb21CdWZmZXIocikpO1xuICAgICAgICB2YXIgUyA9IFAuYWZmaW5lWC50b0J1ZmZlcih7IHNpemU6IDMyIH0pO1xuICAgICAgICAvLyBTSEE1MTIgdXNlZCBpbiBFQ0lFU1xuICAgICAgICByZXR1cm4gaGFzaC5zaGE1MTIoUyk7XG4gICAgfVxuXG4gICAgLy8gLyoqIEVDSUVTIFRPRE8gdW5pdCB0ZXN0XG4gICAgLy8gICBAYXJnIHtzdHJpbmd8T2JqZWN0fSBwdWJrZXkgd2lmLCBQdWJsaWNLZXkgb2JqZWN0XG4gICAgLy8gICBAcmV0dXJuIHtCdWZmZXJ9IDY0IGJ5dGUgc2hhcmVkIHNlY3JldFxuICAgIC8vICovXG4gICAgLy8gZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHB1YmxpY19rZXkpIHtcbiAgICAvLyAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleShwdWJsaWNfa2V5KS50b1VuY29tcHJlc3NlZCgpXG4gICAgLy8gICAgIHZhciBQID0gcHVibGljX2tleS5RLm11bHRpcGx5KCBkICk7XG4gICAgLy8gICAgIHZhciBTID0gUC5hZmZpbmVYLnRvQnVmZmVyKHtzaXplOiAzMn0pO1xuICAgIC8vICAgICAvLyBFQ0lFUywgYWRkcyBhbiBleHRyYSBzaGE1MTJcbiAgICAvLyAgICAgcmV0dXJuIGhhc2guc2hhNTEyKFMpO1xuICAgIC8vIH1cblxuICAgIC8qKlxuICAgICAgQGFyZyB7c3RyaW5nfSBuYW1lIC0gY2hpbGQga2V5IG5hbWUuXG4gICAgICBAcmV0dXJuIHtQcml2YXRlS2V5fVxuICAgICAgIEBleGFtcGxlIGFjdGl2ZVByaXZhdGUgPSBtYXN0ZXJQcml2YXRlLmdldENoaWxkS2V5KCdvd25lcicpLmdldENoaWxkS2V5KCdhY3RpdmUnKVxuICAgICAgQGV4YW1wbGUgYWN0aXZlUHJpdmF0ZS5nZXRDaGlsZEtleSgnbXljb250cmFjdCcpLmdldENoaWxkS2V5KCdteXBlcm0nKVxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q2hpbGRLZXkobmFtZSkge1xuICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdXQVJOSU5HOiBnZXRDaGlsZEtleSB1bnRlc3RlZCBhZ2FpbnN0IGVvc2QnKTsgLy8gbm8gZW9zZCBpbXBsIHlldFxuICAgICAgICB2YXIgaW5kZXggPSBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUodG9CdWZmZXIoKSkudXBkYXRlKG5hbWUpLmRpZ2VzdCgpO1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleShpbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkOiBkLFxuICAgICAgICB0b1dpZjogdG9XaWYsXG4gICAgICAgIHRvU3RyaW5nOiB0b1N0cmluZyxcbiAgICAgICAgdG9QdWJsaWM6IHRvUHVibGljLFxuICAgICAgICB0b0J1ZmZlcjogdG9CdWZmZXIsXG4gICAgICAgIGdldFNoYXJlZFNlY3JldDogZ2V0U2hhcmVkU2VjcmV0LFxuICAgICAgICBnZXRDaGlsZEtleTogZ2V0Q2hpbGRLZXlcbiAgICB9O1xufVxuXG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIHBhcnNlS2V5KHByaXZhdGVTdHIpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHByaXZhdGVTdHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByaXZhdGVTdHIpLCAnc3RyaW5nJywgJ3ByaXZhdGVTdHInKTtcbiAgICB2YXIgbWF0Y2ggPSBwcml2YXRlU3RyLm1hdGNoKC9eUFZUXyhbQS1aYS16MC05XSspXyhbQS1aYS16MC05XSspJC8pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIC8vIGxlZ2FjeSBXSUYgLSBjaGVja3N1bSBpbmNsdWRlcyB0aGUgdmVyc2lvblxuICAgICAgICB2YXIgdmVyc2lvbktleSA9IGtleVV0aWxzLmNoZWNrRGVjb2RlKHByaXZhdGVTdHIsICdzaGEyNTZ4MicpO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IHZlcnNpb25LZXkucmVhZFVJbnQ4KDApO1xuICAgICAgICBhc3NlcnQuZXF1YWwoMHg4MCwgdmVyc2lvbiwgJ0V4cGVjdGVkIHZlcnNpb24gJyArIDB4ODAgKyAnLCBpbnN0ZWFkIGdvdCAnICsgdmVyc2lvbik7XG4gICAgICAgIHZhciBfcHJpdmF0ZUtleSA9IFByaXZhdGVLZXkuZnJvbUJ1ZmZlcih2ZXJzaW9uS2V5LnNsaWNlKDEpKTtcbiAgICAgICAgdmFyIF9rZXlUeXBlID0gJ0sxJztcbiAgICAgICAgdmFyIGZvcm1hdCA9ICdXSUYnO1xuICAgICAgICByZXR1cm4geyBwcml2YXRlS2V5OiBfcHJpdmF0ZUtleSwgZm9ybWF0OiBmb3JtYXQsIGtleVR5cGU6IF9rZXlUeXBlIH07XG4gICAgfVxuXG4gICAgYXNzZXJ0KG1hdGNoLmxlbmd0aCA9PT0gMywgJ0V4cGVjdGluZyBwcml2YXRlIGtleSBsaWtlOiBQVlRfSzFfYmFzZTU4cHJpdmF0ZUtleS4uJyk7XG5cbiAgICB2YXIgX21hdGNoID0gX3NsaWNlZFRvQXJyYXkobWF0Y2gsIDMpLFxuICAgICAgICBrZXlUeXBlID0gX21hdGNoWzFdLFxuICAgICAgICBrZXlTdHJpbmcgPSBfbWF0Y2hbMl07XG5cbiAgICBhc3NlcnQuZXF1YWwoa2V5VHlwZSwgJ0sxJywgJ0sxIHByaXZhdGUga2V5IGV4cGVjdGVkJyk7XG4gICAgdmFyIHByaXZhdGVLZXkgPSBQcml2YXRlS2V5LmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG4gICAgcmV0dXJuIHsgcHJpdmF0ZUtleTogcHJpdmF0ZUtleSwgZm9ybWF0OiAnUFZUJywga2V5VHlwZToga2V5VHlwZSB9O1xufVxuXG5Qcml2YXRlS2V5LmZyb21IZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGhleCwgJ2hleCcpKTtcbn07XG5cblByaXZhdGVLZXkuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGluZyBwYXJhbWV0ZXIgdG8gYmUgYSBCdWZmZXIgdHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDMzICYmIGJ1ZlszMl0gPT09IDEpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGNvbXByZXNzaW9uIGZsYWdcbiAgICAgICAgYnVmID0gYnVmLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgaWYgKDMyICE9PSBidWYubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIDMyIGJ5dGVzLCBpbnN0ZWFkIGdvdCAnICsgYnVmLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlS2V5KEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWYpKTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gc2VlZCAtIGFueSBsZW5ndGggc3RyaW5nLiAgVGhpcyBpcyBwcml2YXRlLCB0aGUgc2FtZSBzZWVkXG4gICAgcHJvZHVjZXMgdGhlIHNhbWUgcHJpdmF0ZSBrZXkgZXZlcnkgdGltZS5cblxuICAgIEByZXR1cm4ge1ByaXZhdGVLZXl9XG4qL1xuUHJpdmF0ZUtleS5mcm9tU2VlZCA9IGZ1bmN0aW9uIChzZWVkKSB7XG4gICAgLy8gZ2VuZXJhdGVfcHJpdmF0ZV9rZXlcbiAgICBpZiAoISh0eXBlb2Ygc2VlZCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2VlZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21CdWZmZXIoaGFzaC5zaGEyNTYoc2VlZCkpO1xufTtcblxuLyoqXG4gIEBhcmcge3dpZn0ga2V5XG4gIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYga2V5IGlzIGluIHRoZSBXYWxsZXQgSW1wb3J0IEZvcm1hdFxuKi9cblByaXZhdGVLZXkuaXNXaWYgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHRyeSB7XG4gICAgICAgIGFzc2VydChwYXJzZUtleSh0ZXh0KS5mb3JtYXQgPT09ICdXSUYnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gIEBhcmcge3dpZnxCdWZmZXJ8UHJpdmF0ZUtleX0ga2V5XG4gIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYga2V5IGlzIGNvbnZlcnRhYmxlIHRvIGEgcHJpdmF0ZSBrZXkgb2JqZWN0LlxuKi9cblByaXZhdGVLZXkuaXNWYWxpZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBQcml2YXRlS2V5KGtleSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuUHJpdmF0ZUtleS5mcm9tV2lmID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGNvbnNvbGUubG9nKCdQcml2YXRlS2V5LmZyb21XaWYgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBQcml2YXRlS2V5LmZyb21TdHJpbmcnKTtcbiAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHN0cik7XG59O1xuXG4vKipcbiAgICBAdGhyb3dzIHtBc3NlcnRFcnJvcnxFcnJvcn0gcGFyc2luZyBrZXlcbiAgICBAYXJnIHtzdHJpbmd9IHByaXZhdGVTdHIgRW9zaW8gb3IgV2FsbGV0IEltcG9ydCBGb3JtYXQgKHdpZikgLS0gYSBzZWNyZXRcbiovXG5Qcml2YXRlS2V5LmZyb21TdHJpbmcgPSBmdW5jdGlvbiAocHJpdmF0ZVN0cikge1xuICAgIHJldHVybiBwYXJzZUtleShwcml2YXRlU3RyKS5wcml2YXRlS2V5O1xufTtcblxuLyoqXG4gIENyZWF0ZSBhIG5ldyByYW5kb20gcHJpdmF0ZSBrZXkuXG5cbiAgQ2FsbCBpbml0aWFsaXplKCkgZmlyc3QgdG8gcnVuIHNvbWUgc2VsZi1jaGVja2luZyBjb2RlIGFuZCBnYXRoZXIgc29tZSBDUFVcbiAgZW50cm9weS5cblxuICBAYXJnIHtudW1iZXJ9IFtjcHVFbnRyb3B5Qml0cyA9IDBdIC0gYWRkaXRpb25hbCBDUFUgZW50cm9weSwgdGhpcyBhbHJlYWR5XG4gIGhhcHBlbnMgb25jZSBzbyBpdCBzaG91bGQgbm90IGJlIG5lZWRlZCBhZ2Fpbi5cblxuICBAcmV0dXJuIHtQcm9taXNlPFByaXZhdGVLZXk+fSAtIHJhbmRvbSBwcml2YXRlIGtleVxuKi9cblByaXZhdGVLZXkucmFuZG9tS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjcHVFbnRyb3B5Qml0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgIHJldHVybiBQcml2YXRlS2V5LmluaXRpYWxpemUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5yYW5kb20zMkJ5dGVCdWZmZXIoeyBjcHVFbnRyb3B5Qml0czogY3B1RW50cm9weUJpdHMgfSkpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gIEByZXR1cm4ge1Byb21pc2U8UHJpdmF0ZUtleT59IGZvciB0ZXN0aW5nLCBkb2VzIG5vdCByZXF1aXJlIGluaXRpYWxpemUoKS5cbiovXG5Qcml2YXRlS2V5LnVuc2FmZVJhbmRvbUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5yYW5kb20zMkJ5dGVCdWZmZXIoeyBzYWZlOiBmYWxzZSB9KSkpO1xufTtcblxudmFyIGluaXRpYWxpemVkID0gZmFsc2UsXG4gICAgdW5pdFRlc3RlZCA9IGZhbHNlO1xuXG4vKipcbiAgUnVuIHNlbGYtY2hlY2tpbmcgY29kZSBhbmQgZ2F0aGVyIENQVSBlbnRyb3B5LlxuXG4gIEluaXRpYWxpemF0aW9uIGhhcHBlbnMgb25jZSBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cblxuICBAcmV0dXJuIHtQcm9taXNlfVxuKi9cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1bml0VGVzdCgpO1xuICAgIGtleVV0aWxzLmFkZEVudHJvcHkuYXBwbHkoa2V5VXRpbHMsIF90b0NvbnN1bWFibGVBcnJheShrZXlVdGlscy5jcHVFbnRyb3B5KCkpKTtcbiAgICBhc3NlcnQoa2V5VXRpbHMuZW50cm9weUNvdW50KCkgPj0gMTI4LCAnaW5zdWZmaWNpZW50IGVudHJvcHknKTtcblxuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbn1cblxuUHJpdmF0ZUtleS5pbml0aWFsaXplID0gcHJvbWlzZUFzeW5jKGluaXRpYWxpemUpO1xuXG4vKipcbiAgVW5pdCB0ZXN0IGJhc2ljIHByaXZhdGUgYW5kIHB1YmxpYyBrZXkgZnVuY3Rpb25hbGl0eS5cblxuICBAdGhyb3dzIHtBc3NlcnRFcnJvcn1cbiovXG5mdW5jdGlvbiB1bml0VGVzdCgpIHtcbiAgICB2YXIgcHZ0ID0gUHJpdmF0ZUtleShoYXNoLnNoYTI1NignJykpO1xuXG4gICAgdmFyIHB2dEVycm9yID0gJ2tleSBjb21wYXJpc29uIHRlc3QgZmFpbGVkIG9uIGEga25vd24gcHJpdmF0ZSBrZXknO1xuICAgIGFzc2VydC5lcXVhbChwdnQudG9XaWYoKSwgJzVLWVpkVUVvMzl6M0ZQcnR1WDJRYmJ3R25OUDV6VGQ3eXlyMlNDMWoyOTlzQkNuV2pzcycsIHB2dEVycm9yKTtcbiAgICBhc3NlcnQuZXF1YWwocHZ0LnRvU3RyaW5nKCksICc1S1laZFVFbzM5ejNGUHJ0dVgyUWJid0duTlA1elRkN3l5cjJTQzFqMjk5c0JDbldqc3MnLCBwdnRFcnJvcik7XG4gICAgLy8gYXNzZXJ0LmVxdWFsKHB2dC50b1N0cmluZygpLCAnUFZUX0sxXzJqSDNubmh4aFIzelBVY3NLYVdXWkM5Wm1aQW5LbTNHQW5GRDF4eW5HSkUxWm51dmpkJywgcHZ0RXJyb3IpXG5cbiAgICB2YXIgcHViID0gcHZ0LnRvUHVibGljKCk7XG4gICAgdmFyIHB1YkVycm9yID0gJ3B1YmtleSBzdHJpbmcgY29tcGFyaXNvbiB0ZXN0IGZhaWxlZCBvbiBhIGtub3duIHB1YmxpYyBrZXknO1xuICAgIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmcoKSwgJ0VPUzg1OWd4Zm5YeVVyaU1nVWVUaGgxZld2M29xY3BMRnlIYTNUZkZZQzRQSzJIcWhUb1ZNJywgcHViRXJyb3IpO1xuICAgIC8vIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmcoKSwgJ1BVQl9LMV84NTlneGZuWHlVcmlNZ1VlVGhoMWZXdjNvcWNwTEZ5SGEzVGZGWUM0UEsySHQ3YmVlWCcsIHB1YkVycm9yKVxuICAgIC8vIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmdMZWdhY3koKSwgJ0VPUzg1OWd4Zm5YeVVyaU1nVWVUaGgxZld2M29xY3BMRnlIYTNUZkZZQzRQSzJIcWhUb1ZNJywgcHViRXJyb3IpXG5cbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHB2dC50b1dpZigpKTtcbiAgICB9LCAnY29udmVydGluZyBrbm93biB3aWYgZnJvbSBzdHJpbmcnKTtcbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHB2dC50b1N0cmluZygpKTtcbiAgICB9LCAnY29udmVydGluZyBrbm93biBwdnQgZnJvbSBzdHJpbmcnKTtcbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvU3RyaW5nKCkpO1xuICAgIH0sICdjb252ZXJ0aW5nIGtub3duIHB1YmxpYyBrZXkgZnJvbSBzdHJpbmcnKTtcbiAgICAvLyBkb2VzTm90VGhyb3coKCkgPT4gUHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvU3RyaW5nTGVnYWN5KCkpLCAnY29udmVydGluZyBrbm93biBwdWJsaWMga2V5IGZyb20gc3RyaW5nJylcblxuICAgIHVuaXRUZXN0ZWQgPSB0cnVlO1xufVxuXG4vKiogQHByaXZhdGUgKi9cbnZhciBkb2VzTm90VGhyb3cgPSBmdW5jdGlvbiBkb2VzTm90VGhyb3coY2IsIG1zZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9IG1zZyArICcgPT0+ICcgKyBlcnJvci5tZXNzYWdlO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25BcGkgPSByZXF1aXJlKCcuL2FwaV9jb21tb24nKTtcbnZhciBvYmplY3RBcGkgPSByZXF1aXJlKCcuL2FwaV9vYmplY3QnKTtcblxudmFyIGVjYyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1vbkFwaSwgb2JqZWN0QXBpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlY2M7IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxuZnVuY3Rpb24gTUQ1ICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxufVxuXG5pbmhlcml0cyhNRDUsIEhhc2hCYXNlKVxuXG5NRDUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBNID0gQVJSQVkxNlxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIE1baV0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShpICogNClcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcblxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVszXSwgMHhjMWJkY2VlZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpXG5cbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzFdLCAweGY2MWUyNTYyLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bNl0sIDB4YzA0MGIzNDAsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxMV0sIDB4MjY1ZTVhNTEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMF0sIDB4ZTliNmM3YWEsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZDYyZjEwNWQsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxMF0sIDB4MDI0NDE0NTMsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxNV0sIDB4ZDhhMWU2ODEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bNF0sIDB4ZTdkM2ZiYzgsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bOV0sIDB4MjFlMWNkZTYsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxNF0sIDB4YzMzNzA3ZDYsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVszXSwgMHhmNGQ1MGQ4NywgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs4XSwgMHg0NTVhMTRlZCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxM10sIDB4YTllM2U5MDUsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsyXSwgMHhmY2VmYTNmOCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzddLCAweDY3NmYwMmQ5LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzEyXSwgMHg4ZDJhNGM4YSwgMjApXG5cbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzVdLCAweGZmZmEzOTQyLCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bOF0sIDB4ODc3MWY2ODEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTFdLCAweDZkOWQ2MTIyLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzE0XSwgMHhmZGU1MzgwYywgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxXSwgMHhhNGJlZWE0NCwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzRdLCAweDRiZGVjZmE5LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzddLCAweGY2YmI0YjYwLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzEwXSwgMHhiZWJmYmM3MCwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxM10sIDB4Mjg5YjdlYzYsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVswXSwgMHhlYWExMjdmYSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVszXSwgMHhkNGVmMzA4NSwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVs2XSwgMHgwNDg4MWQwNSwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs5XSwgMHhkOWQ0ZDAzOSwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzEyXSwgMHhlNmRiOTllNSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxNV0sIDB4MWZhMjdjZjgsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMl0sIDB4YzRhYzU2NjUsIDIzKVxuXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdlNGYsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzldLCAweGViODZkMzkxLCAyMSlcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkKSB8IDBcbn1cblxuTUQ1LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsInZhciBQb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKVxudmFyIEN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpXG5cbnZhciBnZXRDdXJ2ZUJ5TmFtZSA9IHJlcXVpcmUoJy4vbmFtZXMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ3VydmU6IEN1cnZlLFxuICBQb2ludDogUG9pbnQsXG4gIGdldEN1cnZlQnlOYW1lOiBnZXRDdXJ2ZUJ5TmFtZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxuZnVuY3Rpb24gSGFzaCAoaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBuZXcgTUQ1KClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKVxuXG4gIHJldHVybiBuZXcgSGFzaChzaGEoYWxnKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgVHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG52YXIgRmNidWZmZXIgPSByZXF1aXJlKCcuL2ZjYnVmZmVyJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBjcmVhdGUgPSBGY2J1ZmZlci5jcmVhdGU7XG5cbi8qKlxuICBAdHlwZWRlZiB7b2JqZWN0fSBTZXJpYWxpemVyQ29uZmlnXG4gIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW1NlcmlhbGl6ZXJDb25maWcuZGVmYXVsdHMgPSBmYWxzZV0gLSBJbnNlcnQgaW4gZGVmYXVsdHMgKGxpa2UgMCwgZmFsc2UsICcwMDAuLi4nLCBvciAnJykgZm9yIGFueSBtaXNzaW5nIHZhbHVlcy4gIFRoaXMgaGVscHMgdGVzdCBhbmQgaW5zcGVjdCB3aGF0IGEgZGVmaW5pdGlvbiBzaG91bGQgbG9vayBsaWtlLiAgRG8gbm90IGVuYWJsZSBpbiBwcm9kdWN0aW9uLlxuICBAcHJvcGVydHkge2Jvb2xlYW59IFtTZXJpYWxpemVyQ29uZmlnLmRlYnVnID0gZmFsc2VdIC0gUHJpbnRzIGxvdHMgb2YgSEVYIGFuZCBmaWVsZC1sZXZlbCBpbmZvcm1hdGlvbiB0byBoZWxwIGRlYnVnIGJpbmFyeSBzZXJpYWxpemF0aW9uLlxuICBAcHJvcGVydHkge29iamVjdH0gW2N1c3RvbVR5cGVzXSAtIEFkZCBvciBvdmVyd3JpdGUgbG93IGxldmVsIHR5cGVzIChzZWUgLi9zcmMvdHlwZXMuanMgYGNvbnN0IHR5cGVzID0gey4uLn1gKS5cbiovXG5cbi8qKlxuICBAdHlwZWRlZiB7b2JqZWN0fSBDcmVhdGVTdHJ1Y3RcbiAgQHByb3BlcnR5IHtBcnJheTxTdHJpbmc+fSBDcmVhdGVTdHJ1Y3QuZXJyb3JzIC0gSWYgYW55IGVycm9ycyBleGlzdHMsIG5vIHN0cnV0cyB3aWxsIGJlIGNyZWF0ZWQuXG4gIEBwcm9wZXJ0eSB7T2JqZWN0fSBDcmVhdGVTdHJ1Y3Quc3RydWN0IC0gU3RydWN0IG9iamVjdHMga2V5ZWQgYnkgZGVmaW5pdGlvbiBuYW1lLlxuICBAcHJvcGVydHkge1N0cmluZ30gQ3JlYXRlU3RydWN0LnN0cnVjdC5zdHJ1Y3ROYW1lIC0gU3RydWN0IG9iamVjdCB0aGF0IHdpbGwgc2VyaWFsaXplIHRoaXMgdHlwZS5cbiAgQHByb3BlcnR5IHtTdHJ1Y3R9IENyZWF0ZVN0cnVjdC5zdHJ1Y3Quc3RydWN0IC0gU3RydWN0IG9iamVjdCB0aGF0IHdpbGwgc2VyaWFsaXplIHRoaXMgdHlwZSAoc2VlIC4vc3JjL3N0cnVjdC5qcykuXG4qL1xuXG4vKipcbiAgQGFyZyB7b2JqZWN0fSBkZWZpbml0aW9ucyAtIGV4YW1wbGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9FT1NJTy9lb3Nqcy1qc29uL2Jsb2IvbWFzdGVyL3NjaGVtYVxuICBAYXJnIHtTZXJpYWxpemVyQ29uZmlnfSBjb25maWdcbiAgQHJldHVybiB7Q3JlYXRlU3RydWN0fVxuKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbnMpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKCh0eXBlb2YgZGVmaW5pdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGRlZmluaXRpb25zKSkgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGVmaW5pdGlvbnMgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIGlmIChjb25maWcuY3VzdG9tVHlwZXMpIHtcbiAgICBkZWZpbml0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmluaXRpb25zKTsgLy9jbG9uZVxuICAgIGZvciAodmFyIGtleSBpbiBjb25maWcuY3VzdG9tVHlwZXMpIHtcbiAgICAgIC8vIGN1c3RvbSB0eXBlcyBvdmVyd3JpdGUgZGVmaW5pdGlvbnNcbiAgICAgIGRlbGV0ZSBkZWZpbml0aW9uc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0eXBlcyA9IFR5cGVzKGNvbmZpZyk7XG5cbiAgdmFyIF9jcmVhdGUgPSBjcmVhdGUoZGVmaW5pdGlvbnMsIHR5cGVzKSxcbiAgICAgIGVycm9ycyA9IF9jcmVhdGUuZXJyb3JzLFxuICAgICAgc3RydWN0cyA9IF9jcmVhdGUuc3RydWN0cztcblxuICAvKiogRXh0ZW5kIHdpdGggbW9yZSBKU09OIHNjaGVtYSBhbmQgdHlwZSBkZWZpbml0aW9ucyAqL1xuXG5cbiAgdmFyIF9leHRlbmQgPSBmdW5jdGlvbiBfZXh0ZW5kKHBhcmVudCwgY2hpbGQpIHtcbiAgICB2YXIgY29tYmluZWQgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnQsIGNoaWxkKTtcblxuICAgIHZhciBfY3JlYXRlMiA9IGNyZWF0ZShjb21iaW5lZCwgdHlwZXMpLFxuICAgICAgICBzdHJ1Y3RzID0gX2NyZWF0ZTIuc3RydWN0cyxcbiAgICAgICAgZXJyb3JzID0gX2NyZWF0ZTIuZXJyb3JzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgc3RydWN0czogc3RydWN0cyxcbiAgICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kKGNvbWJpbmVkLCBjaGlsZCk7XG4gICAgICB9LFxuICAgICAgZnJvbUJ1ZmZlcjogZnJvbUJ1ZmZlcih0eXBlcywgc3RydWN0cyksXG4gICAgICB0b0J1ZmZlcjogdG9CdWZmZXIodHlwZXMsIHN0cnVjdHMpXG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGVycm9yczogZXJyb3JzLFxuICAgIHN0cnVjdHM6IHN0cnVjdHMsXG4gICAgdHlwZXM6IHR5cGVzLFxuICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKGNoaWxkKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZChkZWZpbml0aW9ucywgY2hpbGQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgIEBhcmcge3N0cmluZ30gdHlwZU5hbWUgbG9va3VwIHN0cnVjdCBvciB0eXBlIGJ5IG5hbWVcbiAgICAgIEBhcmcge0J1ZmZlcn0gYnVmIHNlcmlhbGl6ZWQgZGF0YSB0byBiZSBwYXJzZWRcbiAgICAgIEByZXR1cm4ge29iamVjdH0gZGVzZXJpYWxpemVkIG9iamVjdFxuICAgICovXG4gICAgZnJvbUJ1ZmZlcjogZnJvbUJ1ZmZlcih0eXBlcywgc3RydWN0cyksXG5cbiAgICAvKipcbiAgICAgIEBhcmcge3N0cmluZ30gdHlwZU5hbWUgbG9va3VwIHN0cnVjdCBvciB0eXBlIGJ5IG5hbWVcbiAgICAgIEBhcmcge09iamVjdH0gb2JqZWN0IGZvciBzZXJpYWxpemF0aW9uXG4gICAgICBAcmV0dXJuIHtCdWZmZXJ9IHNlcmlhbGl6ZWQgb2JqZWN0XG4gICAgKi9cbiAgICB0b0J1ZmZlcjogdG9CdWZmZXIodHlwZXMsIHN0cnVjdHMpXG4gIH07XG59O1xuXG52YXIgZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIGZyb21CdWZmZXIodHlwZXMsIHN0cnVjdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlTmFtZSwgYnVmKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB0eXBlTmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodHlwZU5hbWUpLCAnc3RyaW5nJywgJ3R5cGVOYW1lICh0eXBlIG9yIHN0cnVjdCBuYW1lKScpO1xuICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmID0gQnVmZmVyLmZyb20oYnVmLCAnaGV4Jyk7XG4gICAgfVxuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIoYnVmKSwgJ2V4cGVjdGluZyBidWY8aGV4fEJ1ZmZlcj4nKTtcblxuICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZU5hbWVdO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0eXBlID0gdHlwZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gc3RydWN0c1t0eXBlTmFtZV07XG4gICAgfVxuICAgIGFzc2VydCh0eXBlLCAnbWlzc2luZyB0eXBlIG9yIHN0cnVjdDogJyArIHR5cGVOYW1lKTtcbiAgICByZXR1cm4gRmNidWZmZXIuZnJvbUJ1ZmZlcih0eXBlLCBidWYpO1xuICB9O1xufTtcblxudmFyIHRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIodHlwZXMsIHN0cnVjdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlTmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHR5cGVOYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0eXBlTmFtZSksICdzdHJpbmcnLCAndHlwZU5hbWUgKHR5cGUgb3Igc3RydWN0IG5hbWUpJyk7XG4gICAgYXNzZXJ0KHZhbHVlICE9IG51bGwsICd2YWx1ZSBpcyByZXF1aXJlZCcpO1xuXG4gICAgdmFyIHR5cGUgPSB0eXBlc1t0eXBlTmFtZV07XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHR5cGUgPSB0eXBlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSBzdHJ1Y3RzW3R5cGVOYW1lXTtcbiAgICB9XG4gICAgYXNzZXJ0KHR5cGUsICdtaXNzaW5nIHR5cGUgb3Igc3RydWN0OiAnICsgdHlwZU5hbWUpO1xuICAgIHJldHVybiBGY2J1ZmZlci50b0J1ZmZlcih0eXBlLCB2YWx1ZSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mcm9tQnVmZmVyID0gRmNidWZmZXIuZnJvbUJ1ZmZlcjtcbm1vZHVsZS5leHBvcnRzLnRvQnVmZmVyID0gRmNidWZmZXIudG9CdWZmZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXknKTtcblxudmFyIF9zbGljZWRUb0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlZFRvQXJyYXkyKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZW9zanMtZWNjJyksXG4gICAgU2lnbmF0dXJlID0gX3JlcXVpcmUuU2lnbmF0dXJlLFxuICAgIFB1YmxpY0tleSA9IF9yZXF1aXJlLlB1YmxpY0tleTtcblxudmFyIEZjYnVmZmVyID0gcmVxdWlyZSgnZmNidWZmZXInKTtcbnZhciBCeXRlQnVmZmVyID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgc2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEnKTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vZm9ybWF0JyksXG4gICAgaXNOYW1lID0gX3JlcXVpcmUyLmlzTmFtZSxcbiAgICBlbmNvZGVOYW1lID0gX3JlcXVpcmUyLmVuY29kZU5hbWUsXG4gICAgZGVjb2RlTmFtZSA9IF9yZXF1aXJlMi5kZWNvZGVOYW1lLFxuICAgIERlY2ltYWxQYWQgPSBfcmVxdWlyZTIuRGVjaW1hbFBhZCxcbiAgICBEZWNpbWFsSW1wbHkgPSBfcmVxdWlyZTIuRGVjaW1hbEltcGx5LFxuICAgIERlY2ltYWxVbmltcGx5ID0gX3JlcXVpcmUyLkRlY2ltYWxVbmltcGx5LFxuICAgIHByaW50QXNzZXQgPSBfcmVxdWlyZTIucHJpbnRBc3NldCxcbiAgICBwYXJzZUFzc2V0ID0gX3JlcXVpcmUyLnBhcnNlQXNzZXQ7XG5cbi8qKiBDb25maWd1cmVzIEZjYnVmZmVyIGZvciBFT1Mgc3BlY2lmaWMgc3RydWN0cyBhbmQgdHlwZXMuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZXh0ZW5kZWRTY2hlbWEgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHN0cnVjdExvb2t1cCA9IGZ1bmN0aW9uIHN0cnVjdExvb2t1cChsb29rdXBOYW1lLCBhY2NvdW50KSB7XG4gICAgdmFyIGNhY2hlID0gY29uZmlnLmFiaUNhY2hlLmFiaShhY2NvdW50KTtcblxuICAgIC8vIExvb2t1cCBieSBBQkkgYWN0aW9uIFwibmFtZVwiXG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBjYWNoZS5hYmkuYWN0aW9uc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmIChhY3Rpb24ubmFtZSA9PT0gbG9va3VwTmFtZSkge1xuICAgICAgICAgIHZhciBfc3RydWN0ID0gY2FjaGUuc3RydWN0c1thY3Rpb24udHlwZV07XG4gICAgICAgICAgaWYgKF9zdHJ1Y3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdHJ1Y3Q7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIExvb2t1cCBzdHJ1Y3QgYnkgXCJ0eXBlXCJcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3RydWN0ID0gY2FjaGUuc3RydWN0c1tsb29rdXBOYW1lXTtcbiAgICBpZiAoc3RydWN0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBzdHJ1Y3Q7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIEFCSSBhY3Rpb246ICcgKyBsb29rdXBOYW1lKTtcbiAgfTtcblxuICAvLyBJZiBub2Rlb3MgZG9lcyBub3QgaGF2ZSBhbiBBQkkgc2V0dXAgZm9yIGEgY2VydGFpbiBhY3Rpb24udHlwZSwgaXQgd2lsbCB0aHJvd1xuICAvLyBhbiBlcnJvcjogYEludmFsaWQgY2FzdCBmcm9tIG9iamVjdF90eXBlIHRvIHN0cmluZ2AgLi4gZm9yY2VBY3Rpb25EYXRhSGV4XG4gIC8vIG1heSBiZSB1c2VkIHRvIHVudGlsIG5hdGl2ZSBBQkkgaXMgYWRkZWQgb3IgZml4ZWQuXG4gIHZhciBmb3JjZUFjdGlvbkRhdGFIZXggPSBjb25maWcuZm9yY2VBY3Rpb25EYXRhSGV4ICE9IG51bGwgPyBjb25maWcuZm9yY2VBY3Rpb25EYXRhSGV4IDogdHJ1ZTtcblxuICB2YXIgb3ZlcnJpZGUgPSBPYmplY3QuYXNzaWduKHt9LCBhdXRob3JpdHlPdmVycmlkZShjb25maWcpLCBhYmlPdmVycmlkZShzdHJ1Y3RMb29rdXApLCB3YXNtQ29kZU92ZXJyaWRlKGNvbmZpZyksIGFjdGlvbkRhdGFPdmVycmlkZShzdHJ1Y3RMb29rdXAsIGZvcmNlQWN0aW9uRGF0YUhleCksIGNvbmZpZy5vdmVycmlkZSk7XG5cbiAgdmFyIGVvc1R5cGVzID0ge1xuICAgIG5hbWU6IGZ1bmN0aW9uIG5hbWUoKSB7XG4gICAgICByZXR1cm4gW05hbWVdO1xuICAgIH0sXG4gICAgcHVibGljX2tleTogZnVuY3Rpb24gcHVibGljX2tleSgpIHtcbiAgICAgIHJldHVybiBbdmFyaWFudChQdWJsaWNLZXlFY2MpXTtcbiAgICB9LFxuXG4gICAgc3ltYm9sOiBmdW5jdGlvbiBzeW1ib2woKSB7XG4gICAgICByZXR1cm4gW19TeW1ib2xdO1xuICAgIH0sXG4gICAgc3ltYm9sX2NvZGU6IGZ1bmN0aW9uIHN5bWJvbF9jb2RlKCkge1xuICAgICAgcmV0dXJuIFtTeW1ib2xDb2RlXTtcbiAgICB9LFxuICAgIGV4dGVuZGVkX3N5bWJvbDogZnVuY3Rpb24gZXh0ZW5kZWRfc3ltYm9sKCkge1xuICAgICAgcmV0dXJuIFtFeHRlbmRlZFN5bWJvbF07XG4gICAgfSxcblxuICAgIGFzc2V0OiBmdW5jdGlvbiBhc3NldCgpIHtcbiAgICAgIHJldHVybiBbQXNzZXRdO1xuICAgIH0sIC8vIEFmdGVyIFN5bWJvbDogYW1vdW50LCBwcmVjaXNpb24sIHN5bWJvbCwgY29udHJhY3RcbiAgICBleHRlbmRlZF9hc3NldDogZnVuY3Rpb24gZXh0ZW5kZWRfYXNzZXQoKSB7XG4gICAgICByZXR1cm4gW0V4dGVuZGVkQXNzZXRdO1xuICAgIH0sIC8vIEFmdGVyIEFzc2V0OiBhbW91bnQsIHByZWNpc2lvbiwgc3ltYm9sLCBjb250cmFjdFxuXG4gICAgc2lnbmF0dXJlOiBmdW5jdGlvbiBzaWduYXR1cmUoKSB7XG4gICAgICByZXR1cm4gW3ZhcmlhbnQoU2lnbmF0dXJlVHlwZSldO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3VzdG9tVHlwZXMgPSBPYmplY3QuYXNzaWduKHt9LCBlb3NUeXBlcywgY29uZmlnLmN1c3RvbVR5cGVzKTtcbiAgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7IG92ZXJyaWRlOiBvdmVycmlkZSB9LCB7IGN1c3RvbVR5cGVzOiBjdXN0b21UeXBlcyB9LCBjb25maWcpO1xuXG4gIC8vIERvIG5vdCBzb3J0IHRyYW5zYWN0aW9uIGFjdGlvbnNcbiAgY29uZmlnLnNvcnQgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcuc29ydCk7XG4gIGNvbmZpZy5zb3J0WydhY3Rpb24uYXV0aG9yaXphdGlvbiddID0gdHJ1ZTtcbiAgY29uZmlnLnNvcnRbJ3NpZ25lZF90cmFuc2FjdGlvbi5zaWduYXR1cmUnXSA9IHRydWU7XG4gIGNvbmZpZy5zb3J0WydhdXRob3JpdHkuYWNjb3VudHMnXSA9IHRydWU7XG4gIGNvbmZpZy5zb3J0WydhdXRob3JpdHkua2V5cyddID0gdHJ1ZTtcblxuICB2YXIgZnVsbFNjaGVtYSA9IE9iamVjdC5hc3NpZ24oe30sIHNjaGVtYSwgZXh0ZW5kZWRTY2hlbWEpO1xuXG4gIHZhciBfRmNidWZmZXIgPSBGY2J1ZmZlcihmdWxsU2NoZW1hLCBjb25maWcpLFxuICAgICAgc3RydWN0cyA9IF9GY2J1ZmZlci5zdHJ1Y3RzLFxuICAgICAgdHlwZXMgPSBfRmNidWZmZXIudHlwZXMsXG4gICAgICBlcnJvcnMgPSBfRmNidWZmZXIuZXJyb3JzLFxuICAgICAgZnJvbUJ1ZmZlciA9IF9GY2J1ZmZlci5mcm9tQnVmZmVyLFxuICAgICAgdG9CdWZmZXIgPSBfRmNidWZmZXIudG9CdWZmZXI7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyb3JzLCBudWxsLCA0KSk7XG4gIH1cblxuICByZXR1cm4geyBzdHJ1Y3RzOiBzdHJ1Y3RzLCB0eXBlczogdHlwZXMsIGZyb21CdWZmZXI6IGZyb21CdWZmZXIsIHRvQnVmZmVyOiB0b0J1ZmZlciB9O1xufTtcblxuLyoqXG4gIE5hbWUgZW9zOjp0eXBlcyBuYXRpdmUuaHBwXG4qL1xudmFyIE5hbWUgPSBmdW5jdGlvbiBOYW1lKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIG4gPSBkZWNvZGVOYW1lKGIucmVhZFVpbnQ2NCgpLCBmYWxzZSk7IC8vIGIgaXMgYWxyZWFkeSBpbiBsaXR0bGVFbmRpYW5cbiAgICAgIC8vIGlmKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgIC8vICAgY29uc29sZS5lcnJvcihgJHtufWAsICcoTmFtZS5mcm9tQnl0ZUJ1ZmZlciknKVxuICAgICAgLy8gfVxuICAgICAgcmV0dXJuIG47XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAvLyAgIGNvbnNvbGUuZXJyb3IoYCR7dmFsdWV9YCwgKE5hbWUuYXBwZW5kQnl0ZUJ1ZmZlcikpXG4gICAgICAvLyB9XG4gICAgICBiLndyaXRlVWludDY0KGVuY29kZU5hbWUodmFsdWUsIGZhbHNlKSk7IC8vIGIgaXMgYWxyZWFkeSBpbiBsaXR0bGVFbmRpYW5cbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEEgdmFyaWFudCBpcyBsaWtlIGhhdmluZyBhIHZlcnNpb24gb2YgYW4gb2JqZWN0LiAgQSB2YXJpbnQgY29tZXNcbiAgZmlyc3QgYW5kIGlkZW50aWZpZXMgd2hpY2ggdHlwZSBvZiBvYmplY3QgdGhpcyBpcy5cblxuICBAYXJnIHtBcnJheX0gdmFyaWFudEFycmF5IGFycmF5IG9mIHR5cGVzXG4qL1xudmFyIHZhcmlhbnQgPSBmdW5jdGlvbiB2YXJpYW50KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFyaWFudEFycmF5ID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgdmFyaWFudEFycmF5W19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWxpZGF0aW9uLCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzKSB7XG4gICAgdmFyIHZhcmlhbnRzID0gdmFyaWFudEFycmF5Lm1hcChmdW5jdGlvbiAoVHlwZSkge1xuICAgICAgcmV0dXJuIFR5cGUodmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcyk7XG4gICAgfSk7XG4gICAgdmFyIHN0YXRpY1ZhcmlhbnQgPSBiYXNlVHlwZXMuc3RhdGljX3ZhcmlhbnQodmFyaWFudHMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNWYXJpYW50LmZyb21CeXRlQnVmZmVyKGIpO1xuICAgICAgfSxcbiAgICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gWzAsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWNWYXJpYW50LmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gWzAsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGljVmFyaWFudC5mcm9tT2JqZWN0KHZhbHVlKVsxXTtcbiAgICAgIH0sXG4gICAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gWzAsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGljVmFyaWFudC50b09iamVjdCh2YWx1ZSlbMV07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBQdWJsaWNLZXlFY2MgPSBmdW5jdGlvbiBQdWJsaWNLZXlFY2ModmFsaWRhdGlvbikge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYmNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgMzMpO1xuICAgICAgYi5za2lwKDMzKTtcbiAgICAgIHZhciBwdWJidWYgPSBCdWZmZXIuZnJvbShiY29weS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG4gICAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIocHViYnVmKS50b1N0cmluZyh2YWxpZGF0aW9uLmtleVByZWZpeCk7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAvLyAgIGNvbnNvbGUuZXJyb3IoYCR7dmFsdWV9YCwgJ1B1YmxpY0tleVR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcicpXG4gICAgICAvLyB9XG4gICAgICB2YXIgYnVmID0gUHVibGljS2V5LmZyb21TdHJpbmdPclRocm93KHZhbHVlLCB2YWxpZGF0aW9uLmtleVByZWZpeCkudG9CdWZmZXIoKTtcbiAgICAgIGIuYXBwZW5kKGJ1Zi50b1N0cmluZygnYmluYXJ5JyksICdiaW5hcnknKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB2YXIga2V5UHJlZml4ID0gdmFsaWRhdGlvbi5rZXlQcmVmaXggPyB2YWxpZGF0aW9uLmtleVByZWZpeCA6ICdFT1MnO1xuICAgICAgICByZXR1cm4ga2V5UHJlZml4ICsgJzZNUnkuLic7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEludGVybmFsOiBwcmVjaXNpb24sIHN5bWJvbFxuICBFeHRlcm5hbDogc3ltYm9sXG4gIEBleGFtcGxlICdTWVMnXG4qL1xudmFyIF9TeW1ib2wgPSBmdW5jdGlvbiBfU3ltYm9sKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGJjb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIDgpO1xuICAgICAgYi5za2lwKDgpO1xuXG4gICAgICB2YXIgcHJlY2lzaW9uID0gYmNvcHkucmVhZFVpbnQ4KCk7XG4gICAgICB2YXIgYmluID0gYmNvcHkudG9CaW5hcnkoKTtcblxuICAgICAgdmFyIHN5bWJvbCA9ICcnO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBiaW5bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgY29kZSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgIGlmIChjb2RlID09ICdcXDAnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3ltYm9sICs9IGNvZGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZWNpc2lvbiArICcsJyArIHN5bWJvbDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhciBfcGFyc2VBc3NldCA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0LnN5bWJvbCxcbiAgICAgICAgICBwcmVjaXNpb24gPSBfcGFyc2VBc3NldC5wcmVjaXNpb247XG5cbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ1ByZWNpc2lvbiB1bmtub3duIGZvciBzeW1ib2w6ICcgKyB2YWx1ZSk7XG4gICAgICB2YXIgcGFkID0gJ1xcMCcucmVwZWF0KDcgLSBzeW1ib2wubGVuZ3RoKTtcbiAgICAgIGIuYXBwZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUocHJlY2lzaW9uKSArIHN5bWJvbCArIHBhZCk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBhc3NlcnQodmFsdWUgIT0gbnVsbCwgJ1N5bWJvbCBpcyByZXF1aXJlZDogJyArIHZhbHVlKTtcblxuICAgICAgdmFyIF9wYXJzZUFzc2V0MiA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0Mi5zeW1ib2wsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQyLnByZWNpc2lvbjtcblxuICAgICAgaWYgKHByZWNpc2lvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbnRlcm5hbCBvYmplY3QsIHRoaXMgY2FuIGhhdmUgdGhlIHByZWNpc2lvbiBwcmVmaXhcbiAgICAgICAgcmV0dXJuIHByZWNpc2lvbiArICcsJyArIHN5bWJvbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ1NZUyc7XG4gICAgICB9XG4gICAgICAvLyBzeW1ib2wgb25seSAod2l0aG91dCBwcmVjaXNpb24gcHJlZml4KVxuICAgICAgcmV0dXJuIHBhcnNlQXNzZXQodmFsdWUpLnN5bWJvbDtcbiAgICB9XG4gIH07XG59O1xuXG4vKiogU3ltYm9sIHR5cGUgd2l0aG91dCB0aGUgcHJlY2lzaW9uICovXG52YXIgU3ltYm9sQ29kZSA9IGZ1bmN0aW9uIFN5bWJvbENvZGUodmFsaWRhdGlvbikge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYmNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgOCk7XG4gICAgICBiLnNraXAoOCk7XG5cbiAgICAgIHZhciBiaW4gPSBiY29weS50b0JpbmFyeSgpO1xuXG4gICAgICB2YXIgc3ltYm9sID0gJyc7XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IGJpbltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBjb2RlID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGNvZGUgPT0gJ1xcMCcpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzeW1ib2wgKz0gY29kZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gJycgKyBzeW1ib2w7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YXIgX3BhcnNlQXNzZXQzID0gcGFyc2VBc3NldCh2YWx1ZSksXG4gICAgICAgICAgc3ltYm9sID0gX3BhcnNlQXNzZXQzLnN5bWJvbDtcblxuICAgICAgdmFyIHBhZCA9ICdcXDAnLnJlcGVhdCg4IC0gc3ltYm9sLmxlbmd0aCk7XG4gICAgICBiLmFwcGVuZChzeW1ib2wgKyBwYWQpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgYXNzZXJ0KHZhbHVlICE9IG51bGwsICdTeW1ib2wgaXMgcmVxdWlyZWQ6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIHZhciBfcGFyc2VBc3NldDQgPSBwYXJzZUFzc2V0KHZhbHVlKSxcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDQuc3ltYm9sO1xuXG4gICAgICByZXR1cm4gc3ltYm9sO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnU1lTJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZUFzc2V0KHZhbHVlKS5zeW1ib2w7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEludGVybmFsOiBwcmVjaXNpb24sIHN5bWJvbCwgY29udHJhY3RcbiAgRXh0ZXJuYWw6IHN5bWJvbCwgY29udHJhY3RcbiAgQGV4YW1wbGUgJ1NZU0Bjb250cmFjdCdcbiovXG52YXIgRXh0ZW5kZWRTeW1ib2wgPSBmdW5jdGlvbiBFeHRlbmRlZFN5bWJvbCh2YWxpZGF0aW9uLCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzKSB7XG4gIHZhciBzeW1ib2xUeXBlID0gY3VzdG9tVHlwZXMuc3ltYm9sKHZhbGlkYXRpb24pO1xuICB2YXIgY29udHJhY3ROYW1lID0gY3VzdG9tVHlwZXMubmFtZSh2YWxpZGF0aW9uKTtcblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgc3ltYm9sID0gc3ltYm9sVHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHZhciBjb250cmFjdCA9IGNvbnRyYWN0TmFtZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHJldHVybiBzeW1ib2wgKyAnQCcgKyBjb250cmFjdDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpLCAnc3RyaW5nJywgJ0ludmFsaWQgZXh0ZW5kZWQgc3ltYm9sOiAnICsgdmFsdWUpO1xuXG4gICAgICB2YXIgX3ZhbHVlJHNwbGl0ID0gdmFsdWUuc3BsaXQoJ0AnKSxcbiAgICAgICAgICBfdmFsdWUkc3BsaXQyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfdmFsdWUkc3BsaXQsIDIpLFxuICAgICAgICAgIHN5bWJvbCA9IF92YWx1ZSRzcGxpdDJbMF0sXG4gICAgICAgICAgY29udHJhY3QgPSBfdmFsdWUkc3BsaXQyWzFdO1xuXG4gICAgICBhc3NlcnQoY29udHJhY3QgIT0gbnVsbCwgJ01pc3NpbmcgQGNvbnRyYWN0IHN1ZmZpeCBpbiBleHRlbmRlZCBzeW1ib2w6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIHN5bWJvbFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBzeW1ib2wpO1xuICAgICAgY29udHJhY3ROYW1lLmFwcGVuZEJ5dGVCdWZmZXIoYiwgY29udHJhY3QpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnU1lTQGNvbnRyYWN0JztcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAgSW50ZXJuYWw6IGFtb3VudCwgcHJlY2lzaW9uLCBzeW1ib2wsIGNvbnRyYWN0XG4gIEBleGFtcGxlICcxLjAwMDAgU1lTJ1xuKi9cbnZhciBBc3NldCA9IGZ1bmN0aW9uIEFzc2V0KHZhbGlkYXRpb24sIGJhc2VUeXBlcywgY3VzdG9tVHlwZXMpIHtcbiAgdmFyIGFtb3VudFR5cGUgPSBiYXNlVHlwZXMuaW50NjQodmFsaWRhdGlvbik7XG4gIHZhciBzeW1ib2xUeXBlID0gY3VzdG9tVHlwZXMuc3ltYm9sKHZhbGlkYXRpb24pO1xuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBhbW91bnQgPSBhbW91bnRUeXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuICAgICAgYXNzZXJ0KGFtb3VudCAhPSBudWxsLCAnYW1vdW50Jyk7XG5cbiAgICAgIHZhciBzeW0gPSBzeW1ib2xUeXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuXG4gICAgICB2YXIgX3BhcnNlQXNzZXQ1ID0gcGFyc2VBc3NldCgnJyArIHN5bSksXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ1LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDUuc3ltYm9sO1xuXG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdwcmVjaXNpb24nKTtcbiAgICAgIGFzc2VydChzeW1ib2wgIT0gbnVsbCwgJ3N5bWJvbCcpO1xuXG4gICAgICByZXR1cm4gRGVjaW1hbFVuaW1wbHkoYW1vdW50LCBwcmVjaXNpb24pICsgJyAnICsgc3ltYm9sO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFyIF9wYXJzZUFzc2V0NiA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIGFtb3VudCA9IF9wYXJzZUFzc2V0Ni5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ2LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDYuc3ltYm9sO1xuXG4gICAgICBhc3NlcnQoYW1vdW50ICE9IG51bGwsICdhbW91bnQnKTtcbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ3ByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnc3ltYm9sJyk7XG5cbiAgICAgIGFtb3VudFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBEZWNpbWFsSW1wbHkoYW1vdW50LCBwcmVjaXNpb24pKTtcbiAgICAgIHN5bWJvbFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBwcmVjaXNpb24gKyAnLCcgKyBzeW1ib2wpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIF9wYXJzZUFzc2V0NyA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIGFtb3VudCA9IF9wYXJzZUFzc2V0Ny5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ3LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDcuc3ltYm9sO1xuXG4gICAgICBhc3NlcnQoYW1vdW50ICE9IG51bGwsICdhbW91bnQnKTtcbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ3ByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnc3ltYm9sJyk7XG5cbiAgICAgIHJldHVybiBEZWNpbWFsUGFkKGFtb3VudCwgcHJlY2lzaW9uKSArICcgJyArIHN5bWJvbDtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJzAuMDAwMSBTWVMnO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3BhcnNlQXNzZXQ4ID0gcGFyc2VBc3NldCh2YWx1ZSksXG4gICAgICAgICAgYW1vdW50ID0gX3BhcnNlQXNzZXQ4LmFtb3VudCxcbiAgICAgICAgICBwcmVjaXNpb24gPSBfcGFyc2VBc3NldDgucHJlY2lzaW9uLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0OC5zeW1ib2w7XG5cbiAgICAgIGFzc2VydChhbW91bnQgIT0gbnVsbCwgJ2Ftb3VudCcpO1xuICAgICAgYXNzZXJ0KHByZWNpc2lvbiAhPSBudWxsLCAncHJlY2lzaW9uJyk7XG4gICAgICBhc3NlcnQoc3ltYm9sICE9IG51bGwsICdzeW1ib2wnKTtcblxuICAgICAgcmV0dXJuIERlY2ltYWxQYWQoYW1vdW50LCBwcmVjaXNpb24pICsgJyAnICsgc3ltYm9sO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICBAZXhhbXBsZSAnMS4wMDAwIFNZU0Bjb250cmFjdCdcbiovXG52YXIgRXh0ZW5kZWRBc3NldCA9IGZ1bmN0aW9uIEV4dGVuZGVkQXNzZXQodmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcykge1xuICB2YXIgYXNzZXRUeXBlID0gY3VzdG9tVHlwZXMuYXNzZXQodmFsaWRhdGlvbik7XG4gIHZhciBjb250cmFjdE5hbWUgPSBjdXN0b21UeXBlcy5uYW1lKHZhbGlkYXRpb24pO1xuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBhc3NldCA9IGFzc2V0VHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHZhciBjb250cmFjdCA9IGNvbnRyYWN0TmFtZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHJldHVybiBwYXJzZUFzc2V0KGFzc2V0ICsgJ0AnICsgY29udHJhY3QpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSksICdvYmplY3QnLCAnZXhwZWN0aW5nIGV4dGVuZGVkX2Fzc2V0IG9iamVjdCwgZ290ICcgKyAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkpO1xuXG4gICAgICB2YXIgYXNzZXQgPSBwcmludEFzc2V0KHZhbHVlKTtcblxuICAgICAgdmFyIF9hc3NldCRzcGxpdCA9IGFzc2V0LnNwbGl0KCdAJyksXG4gICAgICAgICAgX2Fzc2V0JHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX2Fzc2V0JHNwbGl0LCAyKSxcbiAgICAgICAgICBjb250cmFjdCA9IF9hc3NldCRzcGxpdDJbMV07XG5cbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgY29udHJhY3QgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY29udHJhY3QpLCAnc3RyaW5nJywgJ0ludmFsaWQgZXh0ZW5kZWQgYXNzZXQ6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIC8vIGFzc2V0IGluY2x1ZGVzIGNvbnRyYWN0IChhc3NldFR5cGUgbmVlZHMgdGhpcylcbiAgICAgIGFzc2V0VHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIGFzc2V0KTtcbiAgICAgIGNvbnRyYWN0TmFtZS5hcHBlbmRCeXRlQnVmZmVyKGIsIGNvbnRyYWN0KTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIC8vIGxpa2U6IDEuMDAwMCBTWVNAY29udHJhY3Qgb3IgMSBTWVNAY29udHJhY3RcbiAgICAgIHZhciBhc3NldCA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihhc3NldCwgcGFyc2VBc3NldCh2YWx1ZSkpO1xuICAgICAgfSBlbHNlIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXNzZXQsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgJ2V4cGVjdGluZyBleHRlbmRlZF9hc3NldDxvYmplY3R8c3RyaW5nPiwgZ290OiAnICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFtb3VudCA9IGFzc2V0LmFtb3VudCxcbiAgICAgICAgICBwcmVjaXNpb24gPSBhc3NldC5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gYXNzZXQuc3ltYm9sLFxuICAgICAgICAgIGNvbnRyYWN0ID0gYXNzZXQuY29udHJhY3Q7XG5cbiAgICAgIGFzc2VydChhbW91bnQgIT0gbnVsbCwgJ21pc3NpbmcgYW1vdW50Jyk7XG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdtaXNzaW5nIHByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnbWlzc2luZyBzeW1ib2wnKTtcbiAgICAgIGFzc2VydChjb250cmFjdCAhPSBudWxsLCAnbWlzc2luZyBjb250cmFjdCcpO1xuXG4gICAgICByZXR1cm4geyBhbW91bnQ6IGFtb3VudCwgcHJlY2lzaW9uOiBwcmVjaXNpb24sIHN5bWJvbDogc3ltYm9sLCBjb250cmFjdDogY29udHJhY3QgfTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFtb3VudDogJzEuMDAwMCcsXG4gICAgICAgICAgcHJlY2lzaW9uOiA0LFxuICAgICAgICAgIHN5bWJvbDogJ1NZUycsXG4gICAgICAgICAgY29udHJhY3Q6ICdlb3Npby50b2tlbidcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSksICdvYmplY3QnLCAnZXhwZWN0aW5nIGV4dGVuZGVkX2Fzc2V0IG9iamVjdCcpO1xuICAgICAgdmFyIGFtb3VudCA9IHZhbHVlLmFtb3VudCxcbiAgICAgICAgICBwcmVjaXNpb24gPSB2YWx1ZS5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gdmFsdWUuc3ltYm9sLFxuICAgICAgICAgIGNvbnRyYWN0ID0gdmFsdWUuY29udHJhY3Q7XG5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYW1vdW50OiBEZWNpbWFsUGFkKGFtb3VudCwgcHJlY2lzaW9uKSxcbiAgICAgICAgcHJlY2lzaW9uOiBwcmVjaXNpb24sXG4gICAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgICBjb250cmFjdDogY29udHJhY3RcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxudmFyIFNpZ25hdHVyZVR5cGUgPSBmdW5jdGlvbiBTaWduYXR1cmVUeXBlKHZhbGlkYXRpb24sIGJhc2VUeXBlcykge1xuICB2YXIgc2lnbmF0dXJlVHlwZSA9IGJhc2VUeXBlcy5maXhlZF9ieXRlczY1KHZhbGlkYXRpb24pO1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgc2lnbmF0dXJlQnVmZmVyID0gc2lnbmF0dXJlVHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHZhciBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmVCdWZmZXIpO1xuICAgICAgcmV0dXJuIHNpZ25hdHVyZS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFyIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHZhbHVlKTtcbiAgICAgIHNpZ25hdHVyZVR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBzaWduYXR1cmUudG9CdWZmZXIoKSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20odmFsdWUpO1xuICAgICAgcmV0dXJuIHNpZ25hdHVyZS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnU0lHX0sxX2JhczU4c2lnbmF0dXJlLi4nO1xuICAgICAgfVxuICAgICAgdmFyIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHZhbHVlKTtcbiAgICAgIHJldHVybiBzaWduYXR1cmUudG9TdHJpbmcoKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgYXV0aG9yaXR5T3ZlcnJpZGUgPSBmdW5jdGlvbiBhdXRob3JpdHlPdmVycmlkZShjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiogc2hvcnRoYW5kIGBFT1M2TVJ5QWouLmAgKi9cbiAgICAnYXV0aG9yaXR5LmZyb21PYmplY3QnOiBmdW5jdGlvbiBhdXRob3JpdHlGcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoUHVibGljS2V5LmZyb21TdHJpbmcodmFsdWUsIGNvbmZpZy5rZXlQcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGhyZXNob2xkOiAxLFxuICAgICAgICAgIGtleXM6IFt7IGtleTogdmFsdWUsIHdlaWdodDogMSB9XVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIF92YWx1ZSRzcGxpdDMgPSB2YWx1ZS5zcGxpdCgnQCcpLFxuICAgICAgICAgICAgX3ZhbHVlJHNwbGl0NCA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3ZhbHVlJHNwbGl0MywgMiksXG4gICAgICAgICAgICBhY2NvdW50ID0gX3ZhbHVlJHNwbGl0NFswXSxcbiAgICAgICAgICAgIF92YWx1ZSRzcGxpdDQkID0gX3ZhbHVlJHNwbGl0NFsxXSxcbiAgICAgICAgICAgIHBlcm1pc3Npb24gPSBfdmFsdWUkc3BsaXQ0JCA9PT0gdW5kZWZpbmVkID8gJ2FjdGl2ZScgOiBfdmFsdWUkc3BsaXQ0JDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRocmVzaG9sZDogMSxcbiAgICAgICAgICBhY2NvdW50czogW3tcbiAgICAgICAgICAgIHBlcm1pc3Npb246IHtcbiAgICAgICAgICAgICAgYWN0b3I6IGFjY291bnQsXG4gICAgICAgICAgICAgIHBlcm1pc3Npb246IHBlcm1pc3Npb25cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3ZWlnaHQ6IDFcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBhYmlPdmVycmlkZSA9IGZ1bmN0aW9uIGFiaU92ZXJyaWRlKHN0cnVjdExvb2t1cCkge1xuICByZXR1cm4ge1xuICAgICdhYmlfZGVmLmZyb21PYmplY3QnOiBmdW5jdGlvbiBhYmlfZGVmRnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGpzb24gPSBCdWZmZXIuZnJvbSh2YWx1ZSwgJ2hleCcpLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChqc29uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGpzb24gPSBCdWZmZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgIH1cbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7IC8vIGxldCB0aGUgZGVmYXVsdCB0eXBlIHRha2UgY2FyZSBvZiBpdFxuICAgIH0sXG5cbiAgICAnc2V0YWJpLmFiaS5hcHBlbmRCeXRlQnVmZmVyJzogZnVuY3Rpb24gc2V0YWJpQWJpQXBwZW5kQnl0ZUJ1ZmZlcihfcmVmKSB7XG4gICAgICB2YXIgZmllbGRzID0gX3JlZi5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZi5vYmplY3QsXG4gICAgICAgICAgYiA9IF9yZWYuYjtcblxuICAgICAgdmFyIHNlciA9IHN0cnVjdExvb2t1cCgnYWJpX2RlZicsICdlb3NpbycpO1xuICAgICAgdmFyIGIyID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuXG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iamVjdC5hYmkpKSB7XG4gICAgICAgIGIyLmFwcGVuZChvYmplY3QuYWJpKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9iamVjdC5hYmkpID09ICdvYmplY3QnKSB7XG4gICAgICAgIHNlci5hcHBlbmRCeXRlQnVmZmVyKGIyLCBvYmplY3QuYWJpKTtcbiAgICAgIH1cblxuICAgICAgYi53cml0ZVZhcmludDMyKGIyLm9mZnNldCk7IC8vIGxlbmd0aCBwcmVmaXhcbiAgICAgIGIuYXBwZW5kKGIyLmNvcHkoMCwgYjIub2Zmc2V0KSwgJ2JpbmFyeScpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciB3YXNtQ29kZU92ZXJyaWRlID0gZnVuY3Rpb24gd2FzbUNvZGVPdmVycmlkZShjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICAnc2V0Y29kZS5jb2RlLmZyb21PYmplY3QnOiBmdW5jdGlvbiBzZXRjb2RlQ29kZUZyb21PYmplY3QoX3JlZjIpIHtcbiAgICAgIHZhciBvYmplY3QgPSBfcmVmMi5vYmplY3QsXG4gICAgICAgICAgcmVzdWx0ID0gX3JlZjIucmVzdWx0O1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgY29kZSA9IG9iamVjdC5jb2RlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICgvXlxccypcXChtb2R1bGUvLnRlc3QoY29kZSkpIHtcbiAgICAgICAgICB2YXIgYmluYXJ5ZW4gPSBjb25maWcuYmluYXJ5ZW47XG5cbiAgICAgICAgICBhc3NlcnQoYmluYXJ5ZW4gIT0gbnVsbCwgJ3JlcXVpcmVkOiBjb25maWcuYmluYXJ5ZW4gPSByZXF1aXJlKFwiYmluYXJ5ZW5cIiknKTtcbiAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQXNzZW1ibGluZyBXQVNNLi4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHdhc20gPSBCdWZmZXIuZnJvbShiaW5hcnllbi5wYXJzZVRleHQoY29kZSkuZW1pdEJpbmFyeSgpKTtcbiAgICAgICAgICByZXN1bHQuY29kZSA9IHdhc207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LmNvZGUgPSBvYmplY3QuY29kZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvciwgb2JqZWN0LmNvZGUpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAgTmVzdGVkIHNlcmlhbGl6ZWQgc3RydWN0dXJlLiAgTmVzdGVkIHN0cnVjdCBtYXkgYmUgaW4gSEVYIG9yIG9iamVjdCBmb3JtYXQuXG4qL1xudmFyIGFjdGlvbkRhdGFPdmVycmlkZSA9IGZ1bmN0aW9uIGFjdGlvbkRhdGFPdmVycmlkZShzdHJ1Y3RMb29rdXAsIGZvcmNlQWN0aW9uRGF0YUhleCkge1xuICByZXR1cm4ge1xuICAgICdhY3Rpb24uZGF0YS5mcm9tQnl0ZUJ1ZmZlcic6IGZ1bmN0aW9uIGFjdGlvbkRhdGFGcm9tQnl0ZUJ1ZmZlcihfcmVmMykge1xuICAgICAgdmFyIGZpZWxkcyA9IF9yZWYzLmZpZWxkcyxcbiAgICAgICAgICBvYmplY3QgPSBfcmVmMy5vYmplY3QsXG4gICAgICAgICAgYiA9IF9yZWYzLmIsXG4gICAgICAgICAgY29uZmlnID0gX3JlZjMuY29uZmlnO1xuXG4gICAgICB2YXIgc2VyID0gKG9iamVjdC5uYW1lIHx8ICcnKSA9PSAnJyA/IGZpZWxkcy5kYXRhIDogc3RydWN0TG9va3VwKG9iamVjdC5uYW1lLCBvYmplY3QuYWNjb3VudCk7XG4gICAgICBpZiAoc2VyKSB7XG4gICAgICAgIGIucmVhZFZhcmludDMyKCk7IC8vIGxlbmd0aCBwcmVmaXggKHVzZWZ1bGwgaWYgb2JqZWN0Lm5hbWUgaXMgdW5rbm93bilcbiAgICAgICAgb2JqZWN0LmRhdGEgPSBzZXIuZnJvbUJ5dGVCdWZmZXIoYiwgY29uZmlnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBVbmtub3duIEFjdGlvbi5uYW1lICR7b2JqZWN0Lm5hbWV9YClcbiAgICAgICAgdmFyIGxlblByZWZpeCA9IGIucmVhZFZhcmludDMyKCk7XG4gICAgICAgIHZhciBiQ29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyBsZW5QcmVmaXgpO1xuICAgICAgICBiLnNraXAobGVuUHJlZml4KTtcbiAgICAgICAgb2JqZWN0LmRhdGEgPSBCdWZmZXIuZnJvbShiQ29weS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdhY3Rpb24uZGF0YS5hcHBlbmRCeXRlQnVmZmVyJzogZnVuY3Rpb24gYWN0aW9uRGF0YUFwcGVuZEJ5dGVCdWZmZXIoX3JlZjQpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfcmVmNC5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZjQub2JqZWN0LFxuICAgICAgICAgIGIgPSBfcmVmNC5iO1xuXG4gICAgICB2YXIgc2VyID0gKG9iamVjdC5uYW1lIHx8ICcnKSA9PSAnJyA/IGZpZWxkcy5kYXRhIDogc3RydWN0TG9va3VwKG9iamVjdC5uYW1lLCBvYmplY3QuYWNjb3VudCk7XG4gICAgICBpZiAoc2VyKSB7XG4gICAgICAgIHZhciBiMiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICAgICAgc2VyLmFwcGVuZEJ5dGVCdWZmZXIoYjIsIG9iamVjdC5kYXRhKTtcbiAgICAgICAgYi53cml0ZVZhcmludDMyKGIyLm9mZnNldCk7XG4gICAgICAgIGIuYXBwZW5kKGIyLmNvcHkoMCwgYjIub2Zmc2V0KSwgJ2JpbmFyeScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFVua25vd24gQWN0aW9uLm5hbWUgJHtvYmplY3QubmFtZX1gKVxuICAgICAgICB2YXIgZGF0YSA9IHR5cGVvZiBvYmplY3QuZGF0YSA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShvYmplY3QuZGF0YSwgJ2hleCcpIDogb2JqZWN0LmRhdGE7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBzdHJ1Y3QgXFwnJyArIG9iamVjdC5uYW1lICsgJ1xcJyBmb3IgY29udHJhY3QgXFwnJyArIG9iamVjdC5hY2NvdW50ICsgJ1xcJywgbG9jYXRlIHRoaXMgc3RydWN0IG9yIHByb3ZpZGUgc2VyaWFsaXplZCBhY3Rpb24uZGF0YScpO1xuICAgICAgICB9XG4gICAgICAgIGIud3JpdGVWYXJpbnQzMihkYXRhLmxlbmd0aCk7XG4gICAgICAgIGIuYXBwZW5kKGRhdGEudG9TdHJpbmcoJ2JpbmFyeScpLCAnYmluYXJ5Jyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdhY3Rpb24uZGF0YS5mcm9tT2JqZWN0JzogZnVuY3Rpb24gYWN0aW9uRGF0YUZyb21PYmplY3QoX3JlZjUpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfcmVmNS5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZjUub2JqZWN0LFxuICAgICAgICAgIHJlc3VsdCA9IF9yZWY1LnJlc3VsdDtcbiAgICAgIHZhciBkYXRhID0gb2JqZWN0LmRhdGEsXG4gICAgICAgICAgbmFtZSA9IG9iamVjdC5uYW1lO1xuXG4gICAgICB2YXIgc2VyID0gKG5hbWUgfHwgJycpID09ICcnID8gZmllbGRzLmRhdGEgOiBzdHJ1Y3RMb29rdXAobmFtZSwgb2JqZWN0LmFjY291bnQpO1xuICAgICAgaWYgKHNlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXN1bHQuZGF0YSA9IHNlci5mcm9tT2JqZWN0KGRhdGEpOyAvLyByZXNvbHZlIHNob3J0aGFuZFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhciBidWYgPSBCdWZmZXIuZnJvbShkYXRhLCAnaGV4Jyk7XG4gICAgICAgICAgcmVzdWx0LmRhdGEgPSBGY2J1ZmZlci5mcm9tQnVmZmVyKHNlciwgYnVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgaGV4IHN0cmluZyBvciBvYmplY3QgaW4gYWN0aW9uLmRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFVua25vd24gQWN0aW9uLm5hbWUgJHtvYmplY3QubmFtZX1gKVxuICAgICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdhY3Rpb24uZGF0YS50b09iamVjdCc6IGZ1bmN0aW9uIGFjdGlvbkRhdGFUb09iamVjdChfcmVmNikge1xuICAgICAgdmFyIGZpZWxkcyA9IF9yZWY2LmZpZWxkcyxcbiAgICAgICAgICBvYmplY3QgPSBfcmVmNi5vYmplY3QsXG4gICAgICAgICAgcmVzdWx0ID0gX3JlZjYucmVzdWx0LFxuICAgICAgICAgIGNvbmZpZyA9IF9yZWY2LmNvbmZpZztcblxuICAgICAgdmFyIF9yZWY3ID0gb2JqZWN0IHx8IHt9LFxuICAgICAgICAgIGRhdGEgPSBfcmVmNy5kYXRhLFxuICAgICAgICAgIG5hbWUgPSBfcmVmNy5uYW1lO1xuXG4gICAgICB2YXIgc2VyID0gKG5hbWUgfHwgJycpID09ICcnID8gZmllbGRzLmRhdGEgOiBzdHJ1Y3RMb29rdXAobmFtZSwgb2JqZWN0LmFjY291bnQpO1xuICAgICAgaWYgKCFzZXIpIHtcbiAgICAgICAgLy8gVHlwZXMgd2l0aG91dCBhbiBBQkkgd2lsbCBhY2NlcHQgaGV4XG4gICAgICAgIHJlc3VsdC5kYXRhID0gQnVmZmVyLmlzQnVmZmVyKGRhdGEpID8gZGF0YS50b1N0cmluZygnaGV4JykgOiBkYXRhO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZUFjdGlvbkRhdGFIZXgpIHtcbiAgICAgICAgdmFyIGIyID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHNlci5hcHBlbmRCeXRlQnVmZmVyKGIyLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuZGF0YSA9IGIyLmNvcHkoMCwgYjIub2Zmc2V0KS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXN1bHQuZGF0YScsIHJlc3VsdC5kYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNlcmlhbGl6YWJsZSBKU09OXG4gICAgICByZXN1bHQuZGF0YSA9IHNlci50b09iamVjdChkYXRhLCBjb25maWcpO1xuICAgIH1cbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXNJdGVyYWJsZTIgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9pcy1pdGVyYWJsZVwiKTtcblxudmFyIF9pc0l0ZXJhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSXRlcmFibGUyKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9nZXQtaXRlcmF0b3JcIik7XG5cbnZhciBfZ2V0SXRlcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SXRlcmF0b3IyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2kgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShhcnIpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gdHJ1ZTtcbiAgICAgIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2FycjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNJdGVyYWJsZTMuZGVmYXVsdCkoT2JqZWN0KGFycikpKSB7XG4gICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgICB9XG4gIH07XG59KCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpO1xuXG52YXIgX3JlZ2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2VuZXJhdG9yKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGVjYyA9IHJlcXVpcmUoJ2Vvc2pzLWVjYycpO1xudmFyIEZjYnVmZmVyID0gcmVxdWlyZSgnZmNidWZmZXInKTtcbnZhciBFb3NBcGkgPSByZXF1aXJlKCdlb3Nqcy1hcGknKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxudmFyIFN0cnVjdHMgPSByZXF1aXJlKCcuL3N0cnVjdHMnKTtcbnZhciBBYmlDYWNoZSA9IHJlcXVpcmUoJy4vYWJpLWNhY2hlJyk7XG52YXIgd3JpdGVBcGlHZW4gPSByZXF1aXJlKCcuL3dyaXRlLWFwaScpO1xudmFyIGZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG52YXIgc2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEnKTtcblxudmFyIHRva2VuID0gcmVxdWlyZSgnLi9zY2hlbWEvZW9zaW8udG9rZW4uYWJpLmpzb24nKTtcbnZhciBzeXN0ZW0gPSByZXF1aXJlKCcuL3NjaGVtYS9lb3Npby5zeXN0ZW0uYWJpLmpzb24nKTtcbnZhciBlb3Npb19udWxsID0gcmVxdWlyZSgnLi9zY2hlbWEvZW9zaW8ubnVsbC5hYmkuanNvbicpO1xuXG52YXIgRW9zID0gZnVuY3Rpb24gRW9zKCkge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgY29uZmlnRGVmYXVsdHMgPSB7XG4gICAgaHR0cEVuZHBvaW50OiAnaHR0cDovLzEyNy4wLjAuMTo4ODg4JyxcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgdmVyYm9zZTogZmFsc2UsXG4gICAgYnJvYWRjYXN0OiB0cnVlLFxuICAgIGxvZ2dlcjoge1xuICAgICAgbG9nOiBmdW5jdGlvbiBsb2coKSB7XG4gICAgICAgIHZhciBfY29uc29sZTtcblxuICAgICAgICByZXR1cm4gY29uZmlnLnZlcmJvc2UgPyAoX2NvbnNvbGUgPSBjb25zb2xlKS5sb2cuYXBwbHkoX2NvbnNvbGUsIGFyZ3VtZW50cykgOiBudWxsO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgICAgdmFyIF9jb25zb2xlMjtcblxuICAgICAgICByZXR1cm4gY29uZmlnLnZlcmJvc2UgPyAoX2NvbnNvbGUyID0gY29uc29sZSkuZXJyb3IuYXBwbHkoX2NvbnNvbGUyLCBhcmd1bWVudHMpIDogbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNpZ246IHRydWVcbiAgfTtcblxuICBmdW5jdGlvbiBhcHBseURlZmF1bHRzKHRhcmdldCwgZGVmYXVsdHMpIHtcbiAgICBPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAodGFyZ2V0W2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGRlZmF1bHRzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhcHBseURlZmF1bHRzKGNvbmZpZywgY29uZmlnRGVmYXVsdHMpO1xuICBhcHBseURlZmF1bHRzKGNvbmZpZy5sb2dnZXIsIGNvbmZpZ0RlZmF1bHRzLmxvZ2dlcik7XG4gIHJldHVybiBjcmVhdGVFb3MoY29uZmlnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW9zO1xuXG5PYmplY3QuYXNzaWduKEVvcywge1xuICB2ZXJzaW9uOiAnMTYuMC4wJyxcbiAgbW9kdWxlczoge1xuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGFwaTogRW9zQXBpLFxuICAgIGVjYzogZWNjLFxuICAgIGpzb246IHtcbiAgICAgIGFwaTogRW9zQXBpLmFwaSxcbiAgICAgIHNjaGVtYTogc2NoZW1hXG4gICAgfSxcbiAgICBGY2J1ZmZlcjogRmNidWZmZXJcbiAgfSxcblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgVGVzdG5ldDogZnVuY3Rpb24gVGVzdG5ldChjb25maWcpIHtcbiAgICBjb25zb2xlLmVycm9yKCdkZXByZWNhdGVkLCBjaGFuZ2UgRW9zLlRlc3RuZXQoLi4pIHRvIGp1c3QgRW9zKC4uKScpO1xuICAgIHJldHVybiBFb3MoY29uZmlnKTtcbiAgfSxcblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgTG9jYWxuZXQ6IGZ1bmN0aW9uIExvY2FsbmV0KGNvbmZpZykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2RlcHJlY2F0ZWQsIGNoYW5nZSBFb3MuTG9jYWxuZXQoLi4pIHRvIGp1c3QgRW9zKC4uKScpO1xuICAgIHJldHVybiBFb3MoY29uZmlnKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVvcyhjb25maWcpIHtcbiAgdmFyIG5ldHdvcmsgPSBjb25maWcuaHR0cEVuZHBvaW50ICE9IG51bGwgPyBFb3NBcGkoY29uZmlnKSA6IG51bGw7XG4gIGNvbmZpZy5uZXR3b3JrID0gbmV0d29yaztcblxuICB2YXIgYWJpcyA9IFtdO1xuICB2YXIgYWJpQ2FjaGUgPSBBYmlDYWNoZShuZXR3b3JrLCBjb25maWcpO1xuICBhYmlzLnB1c2goYWJpQ2FjaGUuYWJpKCdlb3Npby5udWxsJywgZW9zaW9fbnVsbCkpO1xuICBhYmlzLnB1c2goYWJpQ2FjaGUuYWJpKCdlb3Npby50b2tlbicsIHRva2VuKSk7XG4gIGFiaXMucHVzaChhYmlDYWNoZS5hYmkoJ2Vvc2lvJywgc3lzdGVtKSk7XG5cbiAgaWYgKCFjb25maWcuY2hhaW5JZCkge1xuICAgIGNvbmZpZy5jaGFpbklkID0gJ2NmMDU3YmJmYjcyNjQwNDcxZmQ5MTBiY2I2NzYzOWMyMmRmOWY5MjQ3MDkzNmNkZGMxYWRlMGUyZjJlN2RjNGYnO1xuICB9XG5cbiAgaWYgKG5ldHdvcmspIHtcbiAgICBjaGVja0NoYWluSWQobmV0d29yaywgY29uZmlnLmNoYWluSWQsIGNvbmZpZy5sb2dnZXIpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zICE9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIG1vY2sgPSBjb25maWcubW9ja1RyYW5zYWN0aW9ucztcbiAgICAgIGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbW9jaztcbiAgICAgIH07XG4gICAgfVxuICAgIGFzc2VydC5lcXVhbCgoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY29uZmlnLm1vY2tUcmFuc2FjdGlvbnMpLCAnZnVuY3Rpb24nLCAnY29uZmlnLm1vY2tUcmFuc2FjdGlvbnMnKTtcbiAgfVxuXG4gIHZhciBfU3RydWN0cyA9IFN0cnVjdHMoY29uZmlnKSxcbiAgICAgIHN0cnVjdHMgPSBfU3RydWN0cy5zdHJ1Y3RzLFxuICAgICAgdHlwZXMgPSBfU3RydWN0cy50eXBlcyxcbiAgICAgIGZyb21CdWZmZXIgPSBfU3RydWN0cy5mcm9tQnVmZmVyLFxuICAgICAgdG9CdWZmZXIgPSBfU3RydWN0cy50b0J1ZmZlcjtcblxuICB2YXIgZW9zID0gbWVyZ2VXcml0ZUZ1bmN0aW9ucyhjb25maWcsIEVvc0FwaSwgc3RydWN0cywgYWJpcyk7XG5cbiAgT2JqZWN0LmFzc2lnbihlb3MsIHtcbiAgICBjb25maWc6IHNhZmVDb25maWcoY29uZmlnKSxcbiAgICBmYzoge1xuICAgICAgc3RydWN0czogc3RydWN0cyxcbiAgICAgIHR5cGVzOiB0eXBlcyxcbiAgICAgIGZyb21CdWZmZXI6IGZyb21CdWZmZXIsXG4gICAgICB0b0J1ZmZlcjogdG9CdWZmZXIsXG4gICAgICBhYmlDYWNoZTogYWJpQ2FjaGVcbiAgICB9LFxuICAgIC8vIFJlcGVhdCBvZiBzdGF0aWMgRW9zLm1vZHVsZXMsIGhlbHAgYXBwcyB0aGF0IHVzZSBkZXBlbmRlbmN5IGluamVjdGlvblxuICAgIG1vZHVsZXM6IHtcbiAgICAgIGZvcm1hdDogZm9ybWF0XG4gICAgfVxuICB9KTtcblxuICBpZiAoIWNvbmZpZy5zaWduUHJvdmlkZXIpIHtcbiAgICBjb25maWcuc2lnblByb3ZpZGVyID0gZGVmYXVsdFNpZ25Qcm92aWRlcihlb3MsIGNvbmZpZyk7XG4gIH1cblxuICByZXR1cm4gZW9zO1xufVxuXG4vKipcbiAgU2V0IGVhY2ggcHJvcGVydHkgYXMgcmVhZC1vbmx5LCByZWFkLXdyaXRlLCBuby1hY2Nlc3MuICBUaGlzIGlzIHNoYWxsb3dcbiAgaW4gdGhhdCBpdCBhcHBsaWVzIG9ubHkgdG8gdGhlIHJvb3Qgb2JqZWN0IGFuZCBkb2VzIG5vdCBsaW1pdCBhY2Nlc3NcbiAgdG8gcHJvcGVydGllcyB1bmRlciBhIGdpdmVuIG9iamVjdC5cbiovXG5mdW5jdGlvbiBzYWZlQ29uZmlnKGNvbmZpZykge1xuICAvLyBhY2Nlc3MgY29udHJvbCBpcyBzaGFsbG93IHJlZmVyZW5jZXMgb25seVxuICB2YXIgcmVhZE9ubHkgPSBuZXcgU2V0KFsnaHR0cEVuZHBvaW50JywgJ2FiaUNhY2hlJywgJ2NoYWluSWQnLCAnZXhwaXJlSW5TZWNvbmRzJ10pO1xuICB2YXIgcmVhZFdyaXRlID0gbmV3IFNldChbJ3ZlcmJvc2UnLCAnZGVidWcnLCAnYnJvYWRjYXN0JywgJ2xvZ2dlcicsICdzaWduJ10pO1xuICB2YXIgcHJvdGVjdGVkQ29uZmlnID0ge307XG5cbiAgT2JqZWN0LmtleXMoY29uZmlnKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdGVjdGVkQ29uZmlnLCBrZXksIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChyZWFkV3JpdGUuaGFzKGtleSkpIHtcbiAgICAgICAgICBjb25maWdba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY2VzcyBkZW5pZWQnKTtcbiAgICAgIH0sXG5cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAocmVhZE9ubHkuaGFzKGtleSkgfHwgcmVhZFdyaXRlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZ1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQWNjZXNzIGRlbmllZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHByb3RlY3RlZENvbmZpZztcbn1cblxuLyoqXG4gIE1lcmdlIGluIHdyaXRlIGZ1bmN0aW9ucyAob3BlcmF0aW9ucykuICBUZXN0ZWQgYWdhaW5zdCBleGlzdGluZyBtZXRob2RzIGZvclxuICBuYW1lIGNvbmZsaWN0cy5cblxuICBAYXJnIHtvYmplY3R9IGNvbmZpZy5uZXR3b3JrIC0gcmVhZC1vbmx5IGFwaSBjYWxsc1xuICBAYXJnIHtvYmplY3R9IEVvc0FwaSAtIGFwaVtFb3NBcGldIHJlYWQtb25seSBhcGkgY2FsbHNcbiAgQHJldHVybiB7b2JqZWN0fSAtIHJlYWQgYW5kIHdyaXRlIG1ldGhvZCBjYWxscyAoY3JlYXRlIGFuZCBzaWduIHRyYW5zYWN0aW9ucylcbiAgQHRocm93IHtUeXBlRXJyb3J9IGlmIGEgZnVuY2l0b24gbmFtZSBjb25mbGljdHNcbiovXG5mdW5jdGlvbiBtZXJnZVdyaXRlRnVuY3Rpb25zKGNvbmZpZywgRW9zQXBpLCBzdHJ1Y3RzLCBhYmlzKSB7XG4gIHZhciBuZXR3b3JrID0gY29uZmlnLm5ldHdvcms7XG5cblxuICB2YXIgbWVyZ2UgPSBPYmplY3QuYXNzaWduKHt9LCBuZXR3b3JrKTtcblxuICB2YXIgd3JpdGVBcGkgPSB3cml0ZUFwaUdlbihFb3NBcGksIG5ldHdvcmssIHN0cnVjdHMsIGNvbmZpZywgYWJpcyk7XG4gIHRocm93T25EdXBsaWNhdGUobWVyZ2UsIHdyaXRlQXBpLCAnQ29uZmxpY3RpbmcgbWV0aG9kcyBpbiBFb3NBcGkgYW5kIFRyYW5zYWN0aW9uIEFwaScpO1xuICBPYmplY3QuYXNzaWduKG1lcmdlLCB3cml0ZUFwaSk7XG5cbiAgcmV0dXJuIG1lcmdlO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uRHVwbGljYXRlKG8xLCBvMiwgbXNnKSB7XG4gIGZvciAodmFyIGtleSBpbiBvMSkge1xuICAgIGlmIChvMltrZXldKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1zZyArICc6ICcgKyBrZXkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAgVGhlIGRlZmF1bHQgc2lnbiBwcm92aWRlciBpcyBkZXNpZ25lZCB0byBpbnRlcmFjdCB3aXRoIHRoZSBhdmFpbGFibGUgcHVibGljXG4gIGtleXMgKG1heWJlIGp1c3Qgb25lKSwgdGhlIHRyYW5zYWN0aW9uLCBhbmQgdGhlIGJsb2NrY2hhaW4gdG8gZmlndXJlIG91dFxuICB0aGUgbWluaW11bSBzZXQgb2Ygc2lnbmluZyBrZXlzLlxuXG4gIElmIG9ubHkgb25lIGtleSBpcyBhdmFpbGFibGUsIHRoZSBibG9ja2NoYWluIEFQSSBjYWxscyBhcmUgc2tpcHBlZCBhbmQgdGhhdFxuICBrZXkgaXMgdXNlZCB0byBzaWduIHRoZSB0cmFuc2FjdGlvbi5cbiovXG52YXIgZGVmYXVsdFNpZ25Qcm92aWRlciA9IGZ1bmN0aW9uIGRlZmF1bHRTaWduUHJvdmlkZXIoZW9zLCBjb25maWcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikge1xuICAgIHZhciBzaWduID0gX3JlZi5zaWduLFxuICAgICAgICBidWYgPSBfcmVmLmJ1ZixcbiAgICAgICAgdHJhbnNhY3Rpb24gPSBfcmVmLnRyYW5zYWN0aW9uLFxuICAgICAgICBvcHRpb25zS2V5UHJvdmlkZXIgPSBfcmVmLm9wdGlvbnNLZXlQcm92aWRlcjtcblxuICAgIHZhciBrZXlQcm92aWRlciwga2V5cywgcHZ0LCBzaWdzLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uLCBfZGlkSXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yRXJyb3IsIF9pdGVyYXRvciwgX3N0ZXAsIGtleSwga2V5TWFwLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiwgX2RpZEl0ZXJhdG9yRXJyb3IyLCBfaXRlcmF0b3JFcnJvcjIsIF9pdGVyYXRvcjIsIF9zdGVwMiwgX2tleSwgaXNQcml2YXRlLCBpc1B1YmxpYywgcHVia2V5cztcblxuICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAvLyBvcHRpb25zS2V5UHJvdmlkZXIgaXMgYSBwZXItYWN0aW9uIGtleTogYXdhaXQgZW9zLnNvbWVBY3Rpb24oJ3VzZXIyJyAuLiwge2tleVByb3ZpZGVyOiBwcml2YXRlS2V5Mn0pXG4gICAgICAgICAgICBrZXlQcm92aWRlciA9IG9wdGlvbnNLZXlQcm92aWRlciA/IG9wdGlvbnNLZXlQcm92aWRlciA6IGNvbmZpZy5rZXlQcm92aWRlcjtcblxuICAgICAgICAgICAgaWYgKGtleVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcyB0cmFuc2FjdGlvbiByZXF1aXJlcyBhIGtleVByb3ZpZGVyIGZvciBzaWduaW5nJyk7XG5cbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBrZXlzID0ga2V5UHJvdmlkZXI7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5UHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAga2V5cyA9IGtleVByb3ZpZGVyKHsgdHJhbnNhY3Rpb246IHRyYW5zYWN0aW9uIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBrZXlQcm92aWRlciBtYXkgcmV0dXJuIGtleXMgb3IgUHJvbWlzZTxrZXlzPlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7XG4gICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmF3cmFwKFByb21pc2UucmVzb2x2ZShrZXlzKSk7XG5cbiAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBrZXlzID0gX2NvbnRleHQuc2VudDtcblxuXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIHtcbiAgICAgICAgICAgICAga2V5cyA9IFtrZXlzXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAga2V5cyA9IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgZm9ybWF0IChXSUYgPT4gUFZUX0sxX2Jhc2U1OHByaXZhdGVLZXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcHJpdmF0ZTogZWNjLlByaXZhdGVLZXkoa2V5KS50b1N0cmluZygpIH07XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgZm9ybWF0IChFT1NLZXkgPT4gUFVCX0sxX2Jhc2U1OHB1YmxpY0tleSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyBwdWJsaWM6IGVjYy5QdWJsaWNLZXkoa2V5KS50b1N0cmluZygpIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCAnZXhwZWN0aW5nIHB1YmxpYyBvciBwcml2YXRlIGtleXMgZnJvbSBrZXlQcm92aWRlcicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3Npbmcga2V5LCBjaGVjayB5b3VyIGtleVByb3ZpZGVyJyk7XG5cbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgaWYgKCEoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXS5wcml2YXRlKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwdnQgPSBrZXlzWzBdLnByaXZhdGU7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCBzaWduKGJ1ZiwgcHZ0KSk7XG5cbiAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgaWYgKCEoY29uZmlnLmh0dHBFbmRwb2ludCA9PSBudWxsKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaWdzID0gW107XG4gICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyMDtcblxuICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IgPSBrZXlzW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgIGtleSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICAgIHNpZ3MucHVzaChzaWduKGJ1Ziwga2V5LnByaXZhdGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyODtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNDtcbiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbJ2NhdGNoJ10oMjApO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDtcblxuICAgICAgICAgIGNhc2UgMjg6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjg7XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjk7XG5cbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzE7XG5cbiAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cbiAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgzMSk7XG5cbiAgICAgICAgICBjYXNlIDM1OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyOCk7XG5cbiAgICAgICAgICBjYXNlIDM2OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgc2lncyk7XG5cbiAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAga2V5TWFwID0gbmV3IE1hcCgpO1xuXG4gICAgICAgICAgICAvLyBrZXlzIGFyZSBlaXRoZXIgcHVibGljIG9yIHByaXZhdGUga2V5c1xuXG4gICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0MTtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMiA9IGtleXNbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9rZXkgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgICAgICAgIGlzUHJpdmF0ZSA9IF9rZXkucHJpdmF0ZSAhPSBudWxsO1xuICAgICAgICAgICAgICBpc1B1YmxpYyA9IF9rZXkucHVibGljICE9IG51bGw7XG5cblxuICAgICAgICAgICAgICBpZiAoaXNQcml2YXRlKSB7XG4gICAgICAgICAgICAgICAga2V5TWFwLnNldChlY2MucHJpdmF0ZVRvUHVibGljKF9rZXkucHJpdmF0ZSksIF9rZXkucHJpdmF0ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5TWFwLnNldChfa2V5LnB1YmxpYywgbnVsbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ5O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ1O1xuICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dFsnY2F0Y2gnXSg0MSk7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gX2NvbnRleHQudDE7XG5cbiAgICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ5O1xuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDUwO1xuXG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDUyOlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDUyO1xuXG4gICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG5cbiAgICAgICAgICBjYXNlIDU1OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg1Mik7XG5cbiAgICAgICAgICBjYXNlIDU2OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg0OSk7XG5cbiAgICAgICAgICBjYXNlIDU3OlxuICAgICAgICAgICAgcHVia2V5cyA9IEFycmF5LmZyb20oa2V5TWFwLmtleXMoKSk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCBlb3MuZ2V0UmVxdWlyZWRLZXlzKHRyYW5zYWN0aW9uLCBwdWJrZXlzKS50aGVuKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRfa2V5cyA9IF9yZWYyLnJlcXVpcmVkX2tleXM7XG5cbiAgICAgICAgICAgICAgaWYgKCFyZXF1aXJlZF9rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyByZXF1aXJlZCBrZXlzIGZvciAnICsgSlNPTi5zdHJpbmdpZnkodHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBwdnRzID0gW10sXG4gICAgICAgICAgICAgICAgICBtaXNzaW5nS2V5cyA9IFtdO1xuXG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSByZXF1aXJlZF9rZXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRLZXkgPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSAoRU9TS2V5Li4gPT4gUFVCX0sxX0tleS4uKVxuICAgICAgICAgICAgICAgICAgcmVxdWlyZWRLZXkgPSBlY2MuUHVibGljS2V5KHJlcXVpcmVkS2V5KS50b1N0cmluZygpO1xuXG4gICAgICAgICAgICAgICAgICB2YXIgd2lmID0ga2V5TWFwLmdldChyZXF1aXJlZEtleSk7XG4gICAgICAgICAgICAgICAgICBpZiAod2lmKSB7XG4gICAgICAgICAgICAgICAgICAgIHB2dHMucHVzaCh3aWYpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0tleXMucHVzaChyZXF1aXJlZEtleSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobWlzc2luZ0tleXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KHR5cGVvZiBrZXlQcm92aWRlciA9PT0gJ2Z1bmN0aW9uJywgJ2tleVByb3ZpZGVyIGZ1bmN0aW9uIGlzIG5lZWRlZCBmb3IgcHJpdmF0ZSBrZXkgbG9va3VwJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb25zdCBwdWJrZXlzID0gbWlzc2luZ0tleXMubWFwKGtleSA9PiBlY2MuUHVibGljS2V5KGtleSkudG9TdHJpbmdMZWdhY3koKSlcbiAgICAgICAgICAgICAgICBrZXlQcm92aWRlcih7IHB1YmtleXM6IG1pc3NpbmdLZXlzIH0pLmZvckVhY2goZnVuY3Rpb24gKHB2dCkge1xuICAgICAgICAgICAgICAgICAgcHZ0cy5wdXNoKHB2dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgc2lncyA9IFtdO1xuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gcHZ0c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIF9wdnQgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgIHNpZ3MucHVzaChzaWduKGJ1ZiwgX3B2dCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHNpZ3M7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgbnVsbCwgdGhpcywgW1syMCwgMjQsIDI4LCAzNl0sIFsyOSwsIDMxLCAzNV0sIFs0MSwgNDUsIDQ5LCA1N10sIFs1MCwsIDUyLCA1Nl1dKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGNoZWNrQ2hhaW5JZChuZXR3b3JrLCBjaGFpbklkLCBsb2dnZXIpIHtcbiAgbmV0d29yay5nZXRJbmZvKHt9KS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgaWYgKGluZm8uY2hhaW5faWQgIT09IGNoYWluSWQpIHtcbiAgICAgIGlmIChsb2dnZXIubG9nKSB7XG4gICAgICAgIGxvZ2dlci5sb2coJ2NoYWluSWQgbWlzbWF0Y2gsIHNpZ25hdHVyZXMgd2lsbCBub3QgbWF0Y2ggdHJhbnNhY3Rpb24gYXV0aG9yaXR5LiAnICsgKCdleHBlY3RlZCAnICsgY2hhaW5JZCArICcgIT09IGFjdHVhbCAnICsgaW5mby5jaGFpbl9pZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgaWYgKGxvZ2dlci5lcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdXYXJuaW5nLCB1bmFibGUgdG8gdmFsaWRhdGUgY2hhaW5JZDogJyArIGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbnZhciBCeXRlQnVmZmVyID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgUHVibGljS2V5ID0gcmVxdWlyZSgnLi9rZXlfcHVibGljJyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4va2V5X3ByaXZhdGUnKTtcbnZhciBoYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG5cbnZhciBMb25nID0gQnl0ZUJ1ZmZlci5Mb25nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBlbmNyeXB0OiBlbmNyeXB0LFxuICAgIGRlY3J5cHQ6IGRlY3J5cHRcblxuICAgIC8qKlxuICAgICAgICBTcGVjOiBodHRwOi8vbG9jYWxob3N0OjMwMDIvc3RlZW0vQGRhbnRoZW1hbi9ob3ctdG8tZW5jcnlwdC1hLW1lbW8td2hlbi10cmFuc2ZlcnJpbmctc3RlZW1cbiAgICBcbiAgICAgICAgQHRocm93cyB7RXJyb3J8VHlwZUVycm9yfSAtIFwiSW52YWxpZCBLZXksIC4uLlwiXG4gICAgXG4gICAgICAgIEBhcmcge1ByaXZhdGVLZXl9IHByaXZhdGVfa2V5IC0gcmVxdWlyZWQgYW5kIHVzZWQgZm9yIGRlY3J5cHRpb25cbiAgICAgICAgQGFyZyB7UHVibGljS2V5fSBwdWJsaWNfa2V5IC0gcmVxdWlyZWQgYW5kIHVzZWQgdG8gY2FsY3VhbHRlIHRoZSBzaGFyZWQgc2VjcmV0XG4gICAgICAgIEBhcmcge3N0cmluZ30gW25vbmNlID0gdW5pcXVlTm9uY2UoKV0gLSBhc3NpZ25lZCBhIHJhbmRvbSB1bmlxdWUgdWludDY0XG4gICAgXG4gICAgICAgIEByZXR1cm4ge29iamVjdH1cbiAgICAgICAgQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIC0gcmFuZG9tIG9yIHVuaXF1ZSB1aW50NjQsIHByb3ZpZGVzIGVudHJvcHkgd2hlbiByZS11c2luZyB0aGUgc2FtZSBwcml2YXRlL3B1YmxpYyBrZXlzLlxuICAgICAgICBAcHJvcGVydHkge0J1ZmZlcn0gbWVzc2FnZSAtIFBsYWluIHRleHQgbWVzc2FnZVxuICAgICAgICBAcHJvcGVydHkge251bWJlcn0gY2hlY2tzdW0gLSBzaGFyZWQgc2VjcmV0IGNoZWNrc3VtXG4gICAgKi9cbn07ZnVuY3Rpb24gZW5jcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbWVzc2FnZSkge1xuICAgIHZhciBub25jZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdW5pcXVlTm9uY2UoKTtcblxuICAgIHJldHVybiBjcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbm9uY2UsIG1lc3NhZ2UpO1xufVxuXG4vKipcbiAgICBTcGVjOiBodHRwOi8vbG9jYWxob3N0OjMwMDIvc3RlZW0vQGRhbnRoZW1hbi9ob3ctdG8tZW5jcnlwdC1hLW1lbW8td2hlbi10cmFuc2ZlcnJpbmctc3RlZW1cblxuICAgIEBhcmcge1ByaXZhdGVLZXl9IHByaXZhdGVfa2V5IC0gcmVxdWlyZWQgYW5kIHVzZWQgZm9yIGRlY3J5cHRpb25cbiAgICBAYXJnIHtQdWJsaWNLZXl9IHB1YmxpY19rZXkgLSByZXF1aXJlZCBhbmQgdXNlZCB0byBjYWxjdWFsdGUgdGhlIHNoYXJlZCBzZWNyZXRcbiAgICBAYXJnIHtzdHJpbmd9IG5vbmNlIC0gcmFuZG9tIG9yIHVuaXF1ZSB1aW50NjQsIHByb3ZpZGVzIGVudHJvcHkgd2hlbiByZS11c2luZyB0aGUgc2FtZSBwcml2YXRlL3B1YmxpYyBrZXlzLlxuICAgIEBhcmcge0J1ZmZlcn0gbWVzc2FnZSAtIEVuY3J5cHRlZCBvciBwbGFpbiB0ZXh0IG1lc3NhZ2VcbiAgICBAYXJnIHtudW1iZXJ9IGNoZWNrc3VtIC0gc2hhcmVkIHNlY3JldCBjaGVja3N1bVxuXG4gICAgQHRocm93cyB7RXJyb3J8VHlwZUVycm9yfSAtIFwiSW52YWxpZCBLZXksIC4uLlwiXG5cbiAgICBAcmV0dXJuIHtCdWZmZXJ9IC0gbWVzc2FnZVxuKi9cbmZ1bmN0aW9uIGRlY3J5cHQocHJpdmF0ZV9rZXksIHB1YmxpY19rZXksIG5vbmNlLCBtZXNzYWdlLCBjaGVja3N1bSkge1xuICAgIHJldHVybiBjcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbm9uY2UsIG1lc3NhZ2UsIGNoZWNrc3VtKS5tZXNzYWdlO1xufVxuXG4vKipcbiAgICBAYXJnIHtCdWZmZXJ9IG1lc3NhZ2UgLSBFbmNyeXB0ZWQgb3IgcGxhaW4gdGV4dCBtZXNzYWdlIChzZWUgY2hlY2tzdW0pXG4gICAgQGFyZyB7bnVtYmVyfSBjaGVja3N1bSAtIHNoYXJlZCBzZWNyZXQgY2hlY2tzdW0gKG51bGwgdG8gZW5jcnlwdCwgbm9uLW51bGwgdG8gZGVjcnlwdClcbiAgICBAcHJpdmF0ZVxuKi9cbmZ1bmN0aW9uIGNyeXB0KHByaXZhdGVfa2V5LCBwdWJsaWNfa2V5LCBub25jZSwgbWVzc2FnZSwgY2hlY2tzdW0pIHtcbiAgICBwcml2YXRlX2tleSA9IFByaXZhdGVLZXkocHJpdmF0ZV9rZXkpO1xuICAgIGlmICghcHJpdmF0ZV9rZXkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByaXZhdGVfa2V5IGlzIHJlcXVpcmVkJyk7XG5cbiAgICBwdWJsaWNfa2V5ID0gUHVibGljS2V5KHB1YmxpY19rZXkpO1xuICAgIGlmICghcHVibGljX2tleSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncHVibGljX2tleSBpcyByZXF1aXJlZCcpO1xuXG4gICAgbm9uY2UgPSB0b0xvbmdPYmoobm9uY2UpO1xuICAgIGlmICghbm9uY2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vbmNlIGlzIHJlcXVpcmVkJyk7XG5cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihtZXNzYWdlKSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdtZXNzYWdlIHNob3VsZCBiZSBidWZmZXIgb3Igc3RyaW5nJyk7XG4gICAgICAgIG1lc3NhZ2UgPSBuZXcgQnVmZmVyKG1lc3NhZ2UsICdiaW5hcnknKTtcbiAgICB9XG4gICAgaWYgKGNoZWNrc3VtICYmIHR5cGVvZiBjaGVja3N1bSAhPT0gJ251bWJlcicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NoZWNrc3VtIHNob3VsZCBiZSBhIG51bWJlcicpO1xuXG4gICAgdmFyIFMgPSBwcml2YXRlX2tleS5nZXRTaGFyZWRTZWNyZXQocHVibGljX2tleSk7XG4gICAgdmFyIGVidWYgPSBuZXcgQnl0ZUJ1ZmZlcihCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFksIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTik7XG4gICAgZWJ1Zi53cml0ZVVpbnQ2NChub25jZSk7XG4gICAgZWJ1Zi5hcHBlbmQoUy50b1N0cmluZygnYmluYXJ5JyksICdiaW5hcnknKTtcbiAgICBlYnVmID0gbmV3IEJ1ZmZlcihlYnVmLmNvcHkoMCwgZWJ1Zi5vZmZzZXQpLnRvQmluYXJ5KCksICdiaW5hcnknKTtcbiAgICB2YXIgZW5jcnlwdGlvbl9rZXkgPSBoYXNoLnNoYTUxMihlYnVmKTtcblxuICAgIC8vIEQgRSBCIFUgR1xuICAgIC8vIGNvbnNvbGUubG9nKCdjcnlwdCcsIHtcbiAgICAvLyAgICAgcHJpdl90b19wdWI6IHByaXZhdGVfa2V5LnRvUHVibGljKCkudG9TdHJpbmcoKSxcbiAgICAvLyAgICAgcHViOiBwdWJsaWNfa2V5LnRvU3RyaW5nKCksXG4gICAgLy8gICAgIG5vbmNlOiBub25jZS50b1N0cmluZygpLFxuICAgIC8vICAgICBtZXNzYWdlOiBtZXNzYWdlLmxlbmd0aCxcbiAgICAvLyAgICAgY2hlY2tzdW0sXG4gICAgLy8gICAgIFM6IFMudG9TdHJpbmcoJ2hleCcpLFxuICAgIC8vICAgICBlbmNyeXB0aW9uX2tleTogZW5jcnlwdGlvbl9rZXkudG9TdHJpbmcoJ2hleCcpLFxuICAgIC8vIH0pXG5cbiAgICB2YXIgaXYgPSBlbmNyeXB0aW9uX2tleS5zbGljZSgzMiwgNDgpO1xuICAgIHZhciBrZXkgPSBlbmNyeXB0aW9uX2tleS5zbGljZSgwLCAzMik7XG5cbiAgICAvLyBjaGVjayBpcyBmaXJzdCA2NCBiaXQgb2Ygc2hhMjU2IGhhc2ggdHJlYXRlZCBhcyB1aW50NjRfdCB0cnVuY2F0ZWQgdG8gMzIgYml0cy5cbiAgICB2YXIgY2hlY2sgPSBoYXNoLnNoYTI1NihlbmNyeXB0aW9uX2tleSk7XG4gICAgY2hlY2sgPSBjaGVjay5zbGljZSgwLCA0KTtcbiAgICB2YXIgY2J1ZiA9IEJ5dGVCdWZmZXIuZnJvbUJpbmFyeShjaGVjay50b1N0cmluZygnYmluYXJ5JyksIEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICBjaGVjayA9IGNidWYucmVhZFVpbnQzMigpO1xuXG4gICAgaWYgKGNoZWNrc3VtKSB7XG4gICAgICAgIGlmIChjaGVjayAhPT0gY2hlY2tzdW0pIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBrZXknKTtcbiAgICAgICAgbWVzc2FnZSA9IGNyeXB0b0pzRGVjcnlwdChtZXNzYWdlLCBrZXksIGl2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gY3J5cHRvSnNFbmNyeXB0KG1lc3NhZ2UsIGtleSwgaXYpO1xuICAgIH1cbiAgICByZXR1cm4geyBub25jZTogbm9uY2UsIG1lc3NhZ2U6IG1lc3NhZ2UsIGNoZWNrc3VtOiBjaGVjayB9O1xufVxuXG4vKiogVGhpcyBtZXRob2QgZG9lcyBub3QgdXNlIGEgY2hlY2tzdW0sIHRoZSByZXR1cm5lZCBkYXRhIG11c3QgYmUgdmFsaWRhdGVkIHNvbWUgb3RoZXIgd2F5LlxuXG4gICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gbWVzc2FnZSAtIGNpcGhlcnRleHQgYmluYXJ5IGZvcm1hdFxuICAgIEBhcmcge3N0cmluZzx1dGY4PnxCdWZmZXJ9IGtleSAtIDI1NmJpdFxuICAgIEBhcmcge3N0cmluZzx1dGY4PnxCdWZmZXJ9IGl2IC0gMTI4Yml0XG5cbiAgICBAcmV0dXJuIHtCdWZmZXJ9XG4qL1xuZnVuY3Rpb24gY3J5cHRvSnNEZWNyeXB0KG1lc3NhZ2UsIGtleSwgaXYpIHtcbiAgICBhc3NlcnQobWVzc2FnZSwgXCJNaXNzaW5nIGNpcGhlciB0ZXh0XCIpO1xuICAgIG1lc3NhZ2UgPSB0b0JpbmFyeUJ1ZmZlcihtZXNzYWdlKTtcbiAgICB2YXIgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdignYWVzLTI1Ni1jYmMnLCBrZXksIGl2KTtcbiAgICAvLyBkZWNpcGhlci5zZXRBdXRvUGFkZGluZyh0cnVlKVxuICAgIG1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KFtkZWNpcGhlci51cGRhdGUobWVzc2FnZSksIGRlY2lwaGVyLmZpbmFsKCldKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHVzZSBhIGNoZWNrc3VtLCB0aGUgcmV0dXJuZWQgZGF0YSBtdXN0IGJlIHZhbGlkYXRlZCBzb21lIG90aGVyIHdheS5cbiAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBtZXNzYWdlIC0gcGxhaW50ZXh0IGJpbmFyeSBmb3JtYXRcbiAgICBAYXJnIHtzdHJpbmc8dXRmOD58QnVmZmVyfSBrZXkgLSAyNTZiaXRcbiAgICBAYXJnIHtzdHJpbmc8dXRmOD58QnVmZmVyfSBpdiAtIDEyOGJpdFxuXG4gICAgQHJldHVybiB7QnVmZmVyfVxuKi9cbmZ1bmN0aW9uIGNyeXB0b0pzRW5jcnlwdChtZXNzYWdlLCBrZXksIGl2KSB7XG4gICAgYXNzZXJ0KG1lc3NhZ2UsIFwiTWlzc2luZyBwbGFpbiB0ZXh0XCIpO1xuICAgIG1lc3NhZ2UgPSB0b0JpbmFyeUJ1ZmZlcihtZXNzYWdlKTtcbiAgICB2YXIgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpO1xuICAgIC8vIGNpcGhlci5zZXRBdXRvUGFkZGluZyh0cnVlKVxuICAgIG1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KFtjaXBoZXIudXBkYXRlKG1lc3NhZ2UpLCBjaXBoZXIuZmluYWwoKV0pO1xuICAgIHJldHVybiBtZXNzYWdlO1xufVxuXG4vKiogQHJldHVybiB7c3RyaW5nfSB1bmlxdWUgNjQgYml0IHVuc2lnbmVkIG51bWJlciBzdHJpbmcuICBCZWluZyB0aW1lIGJhc2VkLCB0aGlzIGlzIGNhcmVmdWwgdG8gbmV2ZXIgY2hvb3NlIHRoZSBzYW1lIG5vbmNlIHR3aWNlLiAgVGhpcyB2YWx1ZSBjb3VsZCBiZSByZWNvcmRlZCBpbiB0aGUgYmxvY2tjaGFpbiBmb3IgYSBsb25nIHRpbWUuXG4qL1xuZnVuY3Rpb24gdW5pcXVlTm9uY2UoKSB7XG4gICAgaWYgKHVuaXF1ZV9ub25jZV9lbnRyb3B5ID09PSBudWxsKSB7XG4gICAgICAgIHZhciBiID0gbmV3IFVpbnQ4QXJyYXkocmFuZG9tQnl0ZXMoMikpO1xuICAgICAgICB1bmlxdWVfbm9uY2VfZW50cm9weSA9IHBhcnNlSW50KGJbMF0gPDwgOCB8IGJbMV0sIDEwKTtcbiAgICB9XG4gICAgdmFyIGxvbmcgPSBMb25nLmZyb21OdW1iZXIoRGF0ZS5ub3coKSk7XG4gICAgdmFyIGVudHJvcHkgPSArK3VuaXF1ZV9ub25jZV9lbnRyb3B5ICUgMHhGRkZGO1xuICAgIC8vIGNvbnNvbGUubG9nKCd1bmlxdWVOb25jZSBkYXRlXFx0JywgQnl0ZUJ1ZmZlci5hbGxvY2F0ZSg4KS53cml0ZVVpbnQ2NChsb25nKS50b0hleCgwKSlcbiAgICAvLyBjb25zb2xlLmxvZygndW5pcXVlTm9uY2UgZW50cm9weVxcdCcsIEJ5dGVCdWZmZXIuYWxsb2NhdGUoOCkud3JpdGVVaW50NjQoTG9uZy5mcm9tTnVtYmVyKGVudHJvcHkpKS50b0hleCgwKSlcbiAgICBsb25nID0gbG9uZy5zaGlmdExlZnQoMTYpLm9yKExvbmcuZnJvbU51bWJlcihlbnRyb3B5KSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3VuaXF1ZU5vbmNlIGZpbmFsXFx0JywgQnl0ZUJ1ZmZlci5hbGxvY2F0ZSg4KS53cml0ZVVpbnQ2NChsb25nKS50b0hleCgwKSlcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxudmFyIHVuaXF1ZV9ub25jZV9lbnRyb3B5ID0gbnVsbDtcbi8vIGZvcihsZXQgaT0xOyBpIDwgMTA7IGkrKykga2V5LnVuaXF1ZU5vbmNlKClcblxudmFyIHRvTG9uZ09iaiA9IGZ1bmN0aW9uIHRvTG9uZ09iaihvKSB7XG4gICAgcmV0dXJuIG8gPyBMb25nLmlzTG9uZyhvKSA/IG8gOiBMb25nLmZyb21TdHJpbmcobykgOiBvO1xufTtcbnZhciB0b0JpbmFyeUJ1ZmZlciA9IGZ1bmN0aW9uIHRvQmluYXJ5QnVmZmVyKG8pIHtcbiAgICByZXR1cm4gbyA/IEJ1ZmZlci5pc0J1ZmZlcihvKSA/IG8gOiBuZXcgQnVmZmVyKG8sICdiaW5hcnknKSA6IG87XG59OyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXFxuVXNlIENocm9tZSwgRmlyZWZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IDY1NTM2KSB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVlc3RlZCB0b28gbWFueSByYW5kb20gYnl0ZXMnKVxuICAvLyBpbiBjYXNlIGJyb3dzZXJpZnkgIGlzbid0IHVzaW5nIHRoZSBVaW50OEFycmF5IHZlcnNpb25cbiAgdmFyIHJhd0J5dGVzID0gbmV3IGdsb2JhbC5VaW50OEFycmF5KHNpemUpXG5cbiAgLy8gVGhpcyB3aWxsIG5vdCB3b3JrIGluIG9sZGVyIGJyb3dzZXJzLlxuICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gIGlmIChzaXplID4gMCkgeyAgLy8gZ2V0UmFuZG9tVmFsdWVzIGZhaWxzIG9uIElFIGlmIHNpemUgPT0gMFxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocmF3Qnl0ZXMpXG4gIH1cblxuICAvLyBYWFg6IHBoYW50b21qcyBkb2Vzbid0IGxpa2UgYSBidWZmZXIgYmVpbmcgcGFzc2VkIGhlcmVcbiAgdmFyIGJ5dGVzID0gQnVmZmVyLmZyb20ocmF3Qnl0ZXMuYnVmZmVyKVxuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcylcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi4vaW5jcjMyJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2tSYXcoc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxudmFyIGJsb2NrU2l6ZSA9IDE2XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgdmFyIGNodW5rTnVtID0gTWF0aC5jZWlsKGNodW5rLmxlbmd0aCAvIGJsb2NrU2l6ZSlcbiAgdmFyIHN0YXJ0ID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fY2FjaGUsXG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlKGNodW5rTnVtICogYmxvY2tTaXplKVxuICBdKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rTnVtOyBpKyspIHtcbiAgICB2YXIgb3V0ID0gZ2V0QmxvY2soc2VsZilcbiAgICB2YXIgb2Zmc2V0ID0gc3RhcnQgKyBpICogYmxvY2tTaXplXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMF0sIG9mZnNldCArIDApXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMV0sIG9mZnNldCArIDQpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMl0sIG9mZnNldCArIDgpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbM10sIG9mZnNldCArIDEyKVxuICB9XG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJmdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBpbmNyMzJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuL2luY3IzMicpXG5cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgb3V0KytcblxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gY2FsY0l2IChzZWxmLCBpdiwgY2spIHtcbiAgaWYgKGl2Lmxlbmd0aCA9PT0gMTIpIHtcbiAgICBzZWxmLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMV0pXSlcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAyXSldKVxuICB9XG4gIHZhciBnaGFzaCA9IG5ldyBHSEFTSChjaylcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgdG9QYWQgPSBsZW4gJSAxNlxuICBnaGFzaC51cGRhdGUoaXYpXG4gIGlmICh0b1BhZCkge1xuICAgIHRvUGFkID0gMTYgLSB0b1BhZFxuICAgIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2ModG9QYWQsIDApKVxuICB9XG4gIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2MoOCwgMCkpXG4gIHZhciBpdkJpdHMgPSBsZW4gKiA4XG4gIHZhciB0YWlsID0gQnVmZmVyLmFsbG9jKDgpXG4gIHRhaWwud3JpdGVVSW50QkUoaXZCaXRzLCAwLCA4KVxuICBnaGFzaC51cGRhdGUodGFpbClcbiAgc2VsZi5fZmluSUQgPSBnaGFzaC5zdGF0ZVxuICB2YXIgb3V0ID0gQnVmZmVyLmZyb20oc2VsZi5fZmluSUQpXG4gIGluY3IzMihvdXQpXG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHZhciBoID0gQnVmZmVyLmFsbG9jKDQsIDApXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB2YXIgY2sgPSB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKGNrKVxuICBpdiA9IGNhbGNJdih0aGlzLCBpdiwgY2spXG5cbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIHRoaXMuX21vZGUgPSBtb2RlXG5cbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IEJ1ZmZlci5hbGxvYyhydW1wLCAwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmIHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0IHx8ICFCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHJldHVybiB0aGlzLl9hdXRoVGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAodGhpcy5fY2FsbGVkKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5Qml0cywgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgaWYgKHNhbHQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsICdiaW5hcnknKVxuICAgIGlmIChzYWx0Lmxlbmd0aCAhPT0gOCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NhbHQgc2hvdWxkIGJlIEJ1ZmZlciB3aXRoIDggYnl0ZSBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGtleUxlbiA9IGtleUJpdHMgLyA4XG4gIHZhciBrZXkgPSBCdWZmZXIuYWxsb2Moa2V5TGVuKVxuICB2YXIgaXYgPSBCdWZmZXIuYWxsb2MoaXZMZW4gfHwgMClcbiAgdmFyIHRtcCA9IEJ1ZmZlci5hbGxvYygwKVxuXG4gIHdoaWxlIChrZXlMZW4gPiAwIHx8IGl2TGVuID4gMCkge1xuICAgIHZhciBoYXNoID0gbmV3IE1ENSgpXG4gICAgaGFzaC51cGRhdGUodG1wKVxuICAgIGhhc2gudXBkYXRlKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSBoYXNoLnVwZGF0ZShzYWx0KVxuICAgIHRtcCA9IGhhc2guZGlnZXN0KClcblxuICAgIHZhciB1c2VkID0gMFxuXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHZhciBrZXlTdGFydCA9IGtleS5sZW5ndGggLSBrZXlMZW5cbiAgICAgIHVzZWQgPSBNYXRoLm1pbihrZXlMZW4sIHRtcC5sZW5ndGgpXG4gICAgICB0bXAuY29weShrZXksIGtleVN0YXJ0LCAwLCB1c2VkKVxuICAgICAga2V5TGVuIC09IHVzZWRcbiAgICB9XG5cbiAgICBpZiAodXNlZCA8IHRtcC5sZW5ndGggJiYgaXZMZW4gPiAwKSB7XG4gICAgICB2YXIgaXZTdGFydCA9IGl2Lmxlbmd0aCAtIGl2TGVuXG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oaXZMZW4sIHRtcC5sZW5ndGggLSB1c2VkKVxuICAgICAgdG1wLmNvcHkoaXYsIGl2U3RhcnQsIHVzZWQsIHVzZWQgKyBsZW5ndGgpXG4gICAgICBpdkxlbiAtPSBsZW5ndGhcbiAgICB9XG4gIH1cblxuICB0bXAuZmlsbCgwKVxuICByZXR1cm4geyBrZXk6IGtleSwgaXY6IGl2IH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyICh2YWwsIHByZWZpeCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWwpICYmIHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwcmVmaXggKyAnIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBidWZmZXInKVxuICB9XG59XG5cbmZ1bmN0aW9uIEhhc2hCYXNlIChibG9ja1NpemUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja1NpemUpXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgdGhpcy5fbGVuZ3RoID0gWzAsIDAsIDAsIDBdXG5cbiAgdGhpcy5fZmluYWxpemVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoSGFzaEJhc2UsIFRyYW5zZm9ybSlcblxuSGFzaEJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy51cGRhdGUoY2h1bmssIGVuY29kaW5nKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLmRpZ2VzdCgpKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcpIHtcbiAgdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyKGRhdGEsICdEYXRhJylcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKVxuXG4gIC8vIGNvbnN1bWUgZGF0YVxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgb2Zmc2V0ID0gMFxuICB3aGlsZSAodGhpcy5fYmxvY2tPZmZzZXQgKyBkYXRhLmxlbmd0aCAtIG9mZnNldCA+PSB0aGlzLl9ibG9ja1NpemUpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5fYmxvY2tPZmZzZXQ7IGkgPCB0aGlzLl9ibG9ja1NpemU7KSBibG9ja1tpKytdID0gZGF0YVtvZmZzZXQrK11cbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG4gIHdoaWxlIChvZmZzZXQgPCBkYXRhLmxlbmd0aCkgYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSBkYXRhW29mZnNldCsrXVxuXG4gIC8vIHVwZGF0ZSBsZW5ndGhcbiAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gZGF0YS5sZW5ndGggKiA4OyBjYXJyeSA+IDA7ICsraikge1xuICAgIHRoaXMuX2xlbmd0aFtqXSArPSBjYXJyeVxuICAgIGNhcnJ5ID0gKHRoaXMuX2xlbmd0aFtqXSAvIDB4MDEwMDAwMDAwMCkgfCAwXG4gICAgaWYgKGNhcnJ5ID4gMCkgdGhpcy5fbGVuZ3RoW2pdIC09IDB4MDEwMDAwMDAwMCAqIGNhcnJ5XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICB0aGlzLl9maW5hbGl6ZWQgPSB0cnVlXG5cbiAgdmFyIGRpZ2VzdCA9IHRoaXMuX2RpZ2VzdCgpXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSBkaWdlc3QgPSBkaWdlc3QudG9TdHJpbmcoZW5jb2RpbmcpXG5cbiAgLy8gcmVzZXQgc3RhdGVcbiAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHRoaXMuX2xlbmd0aFtpXSA9IDBcblxuICByZXR1cm4gZGlnZXN0XG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ19kaWdlc3QgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoQmFzZVxuIiwidmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpXG5cbnZhciBUSFJFRSA9IEJpZ0ludGVnZXIudmFsdWVPZigzKVxuXG5mdW5jdGlvbiBQb2ludCAoY3VydmUsIHgsIHksIHopIHtcbiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKHosIHVuZGVmaW5lZCwgJ01pc3NpbmcgWiBjb29yZGluYXRlJylcblxuICB0aGlzLmN1cnZlID0gY3VydmVcbiAgdGhpcy54ID0geFxuICB0aGlzLnkgPSB5XG4gIHRoaXMueiA9IHpcbiAgdGhpcy5fekludiA9IG51bGxcblxuICB0aGlzLmNvbXByZXNzZWQgPSB0cnVlXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICd6SW52Jywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fekludiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fekludiA9IHRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fekludlxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUG9pbnQucHJvdG90eXBlLCAnYWZmaW5lWCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMueC5tdWx0aXBseSh0aGlzLnpJbnYpLm1vZCh0aGlzLmN1cnZlLnApXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICdhZmZpbmVZJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy55Lm11bHRpcGx5KHRoaXMuekludikubW9kKHRoaXMuY3VydmUucClcbiAgfVxufSlcblxuUG9pbnQuZnJvbUFmZmluZSA9IGZ1bmN0aW9uIChjdXJ2ZSwgeCwgeSkge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCB4LCB5LCBCaWdJbnRlZ2VyLk9ORSlcbn1cblxuUG9pbnQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBpZiAob3RoZXIgPT09IHRoaXMpIHJldHVybiB0cnVlXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiB0aGlzLmN1cnZlLmlzSW5maW5pdHkob3RoZXIpXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkob3RoZXIpKSByZXR1cm4gdGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpXG5cbiAgLy8gdSA9IFkyICogWjEgLSBZMSAqIFoyXG4gIHZhciB1ID0gb3RoZXIueS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucClcblxuICBpZiAodS5zaWdudW0oKSAhPT0gMCkgcmV0dXJuIGZhbHNlXG5cbiAgLy8gdiA9IFgyICogWjEgLSBYMSAqIFoyXG4gIHZhciB2ID0gb3RoZXIueC5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucClcblxuICByZXR1cm4gdi5zaWdudW0oKSA9PT0gMFxufVxuXG5Qb2ludC5wcm90b3R5cGUubmVnYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IHRoaXMuY3VydmUucC5zdWJ0cmFjdCh0aGlzLnkpXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB0aGlzLngsIHksIHRoaXMueilcbn1cblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChiKSB7XG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiBiXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkoYikpIHJldHVybiB0aGlzXG5cbiAgdmFyIHgxID0gdGhpcy54XG4gIHZhciB5MSA9IHRoaXMueVxuICB2YXIgeDIgPSBiLnhcbiAgdmFyIHkyID0gYi55XG5cbiAgLy8gdSA9IFkyICogWjEgLSBZMSAqIFoyXG4gIHZhciB1ID0geTIubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh5MS5tdWx0aXBseShiLnopKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgdmFyIHYgPSB4Mi5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHgxLm11bHRpcGx5KGIueikpLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgaWYgKHYuc2lnbnVtKCkgPT09IDApIHtcbiAgICBpZiAodS5zaWdudW0oKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMudHdpY2UoKSAvLyB0aGlzID09IGIsIHNvIGRvdWJsZVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5IC8vIHRoaXMgPSAtYiwgc28gaW5maW5pdHlcbiAgfVxuXG4gIHZhciB2MiA9IHYuc3F1YXJlKClcbiAgdmFyIHYzID0gdjIubXVsdGlwbHkodilcbiAgdmFyIHgxdjIgPSB4MS5tdWx0aXBseSh2MilcbiAgdmFyIHp1MiA9IHUuc3F1YXJlKCkubXVsdGlwbHkodGhpcy56KVxuXG4gIC8vIHgzID0gdiAqICh6MiAqICh6MSAqIHVeMiAtIDIgKiB4MSAqIHZeMikgLSB2XjMpXG4gIHZhciB4MyA9IHp1Mi5zdWJ0cmFjdCh4MXYyLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkoYi56KS5zdWJ0cmFjdCh2MykubXVsdGlwbHkodikubW9kKHRoaXMuY3VydmUucClcbiAgLy8geTMgPSB6MiAqICgzICogeDEgKiB1ICogdl4yIC0geTEgKiB2XjMgLSB6MSAqIHVeMykgKyB1ICogdl4zXG4gIHZhciB5MyA9IHgxdjIubXVsdGlwbHkoVEhSRUUpLm11bHRpcGx5KHUpLnN1YnRyYWN0KHkxLm11bHRpcGx5KHYzKSkuc3VidHJhY3QoenUyLm11bHRpcGx5KHUpKS5tdWx0aXBseShiLnopLmFkZCh1Lm11bHRpcGx5KHYzKSkubW9kKHRoaXMuY3VydmUucClcbiAgLy8gejMgPSB2XjMgKiB6MSAqIHoyXG4gIHZhciB6MyA9IHYzLm11bHRpcGx5KHRoaXMueikubXVsdGlwbHkoYi56KS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIHJldHVybiBuZXcgUG9pbnQodGhpcy5jdXJ2ZSwgeDMsIHkzLCB6Mylcbn1cblxuUG9pbnQucHJvdG90eXBlLnR3aWNlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gdGhpc1xuICBpZiAodGhpcy55LnNpZ251bSgpID09PSAwKSByZXR1cm4gdGhpcy5jdXJ2ZS5pbmZpbml0eVxuXG4gIHZhciB4MSA9IHRoaXMueFxuICB2YXIgeTEgPSB0aGlzLnlcblxuICB2YXIgeTF6MSA9IHkxLm11bHRpcGx5KHRoaXMueikubW9kKHRoaXMuY3VydmUucClcbiAgdmFyIHkxc3F6MSA9IHkxejEubXVsdGlwbHkoeTEpLm1vZCh0aGlzLmN1cnZlLnApXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hXG5cbiAgLy8gdyA9IDMgKiB4MV4yICsgYSAqIHoxXjJcbiAgdmFyIHcgPSB4MS5zcXVhcmUoKS5tdWx0aXBseShUSFJFRSlcblxuICBpZiAoYS5zaWdudW0oKSAhPT0gMCkge1xuICAgIHcgPSB3LmFkZCh0aGlzLnouc3F1YXJlKCkubXVsdGlwbHkoYSkpXG4gIH1cblxuICB3ID0gdy5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB4MyA9IDIgKiB5MSAqIHoxICogKHdeMiAtIDggKiB4MSAqIHkxXjIgKiB6MSlcbiAgdmFyIHgzID0gdy5zcXVhcmUoKS5zdWJ0cmFjdCh4MS5zaGlmdExlZnQoMykubXVsdGlwbHkoeTFzcXoxKSkuc2hpZnRMZWZ0KDEpLm11bHRpcGx5KHkxejEpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHkzID0gNCAqIHkxXjIgKiB6MSAqICgzICogdyAqIHgxIC0gMiAqIHkxXjIgKiB6MSkgLSB3XjNcbiAgdmFyIHkzID0gdy5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkoeDEpLnN1YnRyYWN0KHkxc3F6MS5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseSh5MXNxejEpLnN1YnRyYWN0KHcucG93KDMpKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB6MyA9IDggKiAoeTEgKiB6MSleM1xuICB2YXIgejMgPSB5MXoxLnBvdygzKS5zaGlmdExlZnQoMykubW9kKHRoaXMuY3VydmUucClcblxuICByZXR1cm4gbmV3IFBvaW50KHRoaXMuY3VydmUsIHgzLCB5MywgejMpXG59XG5cbi8vIFNpbXBsZSBOQUYgKE5vbi1BZGphY2VudCBGb3JtKSBtdWx0aXBsaWNhdGlvbiBhbGdvcml0aG1cbi8vIFRPRE86IG1vZHVsYXJpemUgdGhlIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuUG9pbnQucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKGspIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIHRoaXNcbiAgaWYgKGsuc2lnbnVtKCkgPT09IDApIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5XG5cbiAgdmFyIGUgPSBrXG4gIHZhciBoID0gZS5tdWx0aXBseShUSFJFRSlcblxuICB2YXIgbmVnID0gdGhpcy5uZWdhdGUoKVxuICB2YXIgUiA9IHRoaXNcblxuICBmb3IgKHZhciBpID0gaC5iaXRMZW5ndGgoKSAtIDI7IGkgPiAwOyAtLWkpIHtcbiAgICB2YXIgaEJpdCA9IGgudGVzdEJpdChpKVxuICAgIHZhciBlQml0ID0gZS50ZXN0Qml0KGkpXG5cbiAgICBSID0gUi50d2ljZSgpXG5cbiAgICBpZiAoaEJpdCAhPT0gZUJpdCkge1xuICAgICAgUiA9IFIuYWRkKGhCaXQgPyB0aGlzIDogbmVnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSXG59XG5cbi8vIENvbXB1dGUgdGhpcypqICsgeCprIChzaW11bHRhbmVvdXMgbXVsdGlwbGljYXRpb24pXG5Qb2ludC5wcm90b3R5cGUubXVsdGlwbHlUd28gPSBmdW5jdGlvbiAoaiwgeCwgaykge1xuICB2YXIgaSA9IE1hdGgubWF4KGouYml0TGVuZ3RoKCksIGsuYml0TGVuZ3RoKCkpIC0gMVxuICB2YXIgUiA9IHRoaXMuY3VydmUuaW5maW5pdHlcbiAgdmFyIGJvdGggPSB0aGlzLmFkZCh4KVxuXG4gIHdoaWxlIChpID49IDApIHtcbiAgICB2YXIgakJpdCA9IGoudGVzdEJpdChpKVxuICAgIHZhciBrQml0ID0gay50ZXN0Qml0KGkpXG5cbiAgICBSID0gUi50d2ljZSgpXG5cbiAgICBpZiAoakJpdCkge1xuICAgICAgaWYgKGtCaXQpIHtcbiAgICAgICAgUiA9IFIuYWRkKGJvdGgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSID0gUi5hZGQodGhpcylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtCaXQpIHtcbiAgICAgIFIgPSBSLmFkZCh4KVxuICAgIH1cbiAgICAtLWlcbiAgfVxuXG4gIHJldHVybiBSXG59XG5cblBvaW50LnByb3RvdHlwZS5nZXRFbmNvZGVkID0gZnVuY3Rpb24gKGNvbXByZXNzZWQpIHtcbiAgaWYgKGNvbXByZXNzZWQgPT0gbnVsbCkgY29tcHJlc3NlZCA9IHRoaXMuY29tcHJlc3NlZFxuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gQnVmZmVyLmFsbG9jKDEsIDApIC8vIEluZmluaXR5IHBvaW50IGVuY29kZWQgaXMgc2ltcGx5ICcwMCdcblxuICB2YXIgeCA9IHRoaXMuYWZmaW5lWFxuICB2YXIgeSA9IHRoaXMuYWZmaW5lWVxuICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuY3VydmUucExlbmd0aFxuICB2YXIgYnVmZmVyXG5cbiAgLy8gMHgwMi8weDAzIHwgWFxuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgYnl0ZUxlbmd0aClcbiAgICBidWZmZXIud3JpdGVVSW50OCh5LmlzRXZlbigpID8gMHgwMiA6IDB4MDMsIDApXG5cbiAgLy8gMHgwNCB8IFggfCBZXG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aClcbiAgICBidWZmZXIud3JpdGVVSW50OCgweDA0LCAwKVxuXG4gICAgeS50b0J1ZmZlcihieXRlTGVuZ3RoKS5jb3B5KGJ1ZmZlciwgMSArIGJ5dGVMZW5ndGgpXG4gIH1cblxuICB4LnRvQnVmZmVyKGJ5dGVMZW5ndGgpLmNvcHkoYnVmZmVyLCAxKVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxuUG9pbnQuZGVjb2RlRnJvbSA9IGZ1bmN0aW9uIChjdXJ2ZSwgYnVmZmVyKSB7XG4gIHZhciB0eXBlID0gYnVmZmVyLnJlYWRVSW50OCgwKVxuICB2YXIgY29tcHJlc3NlZCA9ICh0eXBlICE9PSA0KVxuXG4gIHZhciBieXRlTGVuZ3RoID0gTWF0aC5mbG9vcigoY3VydmUucC5iaXRMZW5ndGgoKSArIDcpIC8gOClcbiAgdmFyIHggPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEsIDEgKyBieXRlTGVuZ3RoKSlcblxuICB2YXIgUVxuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIGFzc2VydC5lcXVhbChidWZmZXIubGVuZ3RoLCBieXRlTGVuZ3RoICsgMSwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJylcbiAgICBhc3NlcnQodHlwZSA9PT0gMHgwMiB8fCB0eXBlID09PSAweDAzLCAnSW52YWxpZCBzZXF1ZW5jZSB0YWcnKVxuXG4gICAgdmFyIGlzT2RkID0gKHR5cGUgPT09IDB4MDMpXG4gICAgUSA9IGN1cnZlLnBvaW50RnJvbVgoaXNPZGQsIHgpXG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5sZW5ndGgsIDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aCwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJylcblxuICAgIHZhciB5ID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1ZmZlci5zbGljZSgxICsgYnl0ZUxlbmd0aCkpXG4gICAgUSA9IFBvaW50LmZyb21BZmZpbmUoY3VydmUsIHgsIHkpXG4gIH1cblxuICBRLmNvbXByZXNzZWQgPSBjb21wcmVzc2VkXG4gIHJldHVybiBRXG59XG5cblBvaW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuICcoSU5GSU5JVFkpJ1xuXG4gIHJldHVybiAnKCcgKyB0aGlzLmFmZmluZVgudG9TdHJpbmcoKSArICcsJyArIHRoaXMuYWZmaW5lWS50b1N0cmluZygpICsgJyknXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnRcbiIsIi8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG5mdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJpZ0ludGVnZXIpKVxuICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihhLCBiLCBjKVxuXG4gIGlmIChhICE9IG51bGwpIHtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSkgdGhpcy5mcm9tTnVtYmVyKGEsIGIsIGMpXG4gICAgZWxzZSBpZiAoYiA9PSBudWxsICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIGEpIHRoaXMuZnJvbVN0cmluZyhhLCAyNTYpXG4gICAgZWxzZSB0aGlzLmZyb21TdHJpbmcoYSwgYilcbiAgfVxufVxuXG52YXIgcHJvdG8gPSBCaWdJbnRlZ2VyLnByb3RvdHlwZVxuXG4vLyBkdWNrLXR5cGVkIGlzQmlnSW50ZWdlclxucHJvdG8uX19iaWdpID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIgPSBmdW5jdGlvbiAob2JqLCBjaGVja192ZXIpIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19iaWdpICYmICghY2hlY2tfdmVyIHx8IG9iai5fX2JpZ2kgPT09IHByb3RvLl9fYmlnaSlcbn1cblxuLy8gQml0cyBwZXIgZGlnaXRcbnZhciBkYml0c1xuXG4vLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG4vLyBjIGlzIGluaXRpYWwgY2FycnksIHJldHVybnMgZmluYWwgY2FycnkuXG4vLyBjIDwgMypkdmFsdWUsIHggPCAyKmR2YWx1ZSwgdGhpc19pIDwgZHZhbHVlXG4vLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxuXG4vLyBhbTE6IHVzZSBhIHNpbmdsZSBtdWx0IGFuZCBkaXZpZGUgdG8gZ2V0IHRoZSBoaWdoIGJpdHMsXG4vLyBtYXggZGlnaXQgYml0cyBzaG91bGQgYmUgMjYgYmVjYXVzZVxuLy8gbWF4IGludGVybmFsIHZhbHVlID0gMipkdmFsdWVeMi0yKmR2YWx1ZSAoPCAyXjUzKVxuZnVuY3Rpb24gYW0xKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGNcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKVxuICAgIHdbaisrXSA9IHYgJiAweDNmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuXG4vLyBNYXggZGlnaXQgYml0cyBzaG91bGQgYmUgPD0gMzAgYmVjYXVzZSB3ZSBkbyBiaXR3aXNlIG9wc1xuLy8gb24gdmFsdWVzIHVwIHRvIDIqaGR2YWx1ZV4yLWhkdmFsdWUtMSAoPCAyXjMxKVxuZnVuY3Rpb24gYW0yKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgdmFyIHhsID0geCAmIDB4N2ZmZixcbiAgICB4aCA9IHggPj4gMTVcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldICYgMHg3ZmZmXG4gICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTVcbiAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bFxuICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDdmZmYpIDw8IDE1KSArIHdbal0gKyAoYyAmIDB4M2ZmZmZmZmYpXG4gICAgYyA9IChsID4+PiAzMCkgKyAobSA+Pj4gMTUpICsgeGggKiBoICsgKGMgPj4+IDMwKVxuICAgIHdbaisrXSA9IGwgJiAweDNmZmZmZmZmXG4gIH1cbiAgcmV0dXJuIGNcbn1cbi8vIEFsdGVybmF0ZWx5LCBzZXQgbWF4IGRpZ2l0IGJpdHMgdG8gMjggc2luY2Ugc29tZVxuLy8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuZnVuY3Rpb24gYW0zKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgdmFyIHhsID0geCAmIDB4M2ZmZixcbiAgICB4aCA9IHggPj4gMTRcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldICYgMHgzZmZmXG4gICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTRcbiAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bFxuICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDNmZmYpIDw8IDE0KSArIHdbal0gKyBjXG4gICAgYyA9IChsID4+IDI4KSArIChtID4+IDE0KSArIHhoICogaFxuICAgIHdbaisrXSA9IGwgJiAweGZmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuXG4vLyB3dGY/XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMVxuZGJpdHMgPSAyNlxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQiA9IGRiaXRzXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5ETSA9ICgoMSA8PCBkYml0cykgLSAxKVxudmFyIERWID0gQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMSA8PCBkYml0cylcblxudmFyIEJJX0ZQID0gNTJcbkJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5GMSA9IEJJX0ZQIC0gZGJpdHNcbkJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMiAqIGRiaXRzIC0gQklfRlBcblxuLy8gRGlnaXQgY29udmVyc2lvbnNcbnZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJcbnZhciBCSV9SQyA9IG5ldyBBcnJheSgpXG52YXIgcnIsIHZ2XG5yciA9IFwiMFwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2XG5yciA9IFwiYVwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2dlxucnIgPSBcIkFcIi5jaGFyQ29kZUF0KDApXG5mb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnZcblxuZnVuY3Rpb24gaW50MmNoYXIobikge1xuICByZXR1cm4gQklfUk0uY2hhckF0KG4pXG59XG5cbmZ1bmN0aW9uIGludEF0KHMsIGkpIHtcbiAgdmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldXG4gIHJldHVybiAoYyA9PSBudWxsKSA/IC0xIDogY1xufVxuXG4vLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuZnVuY3Rpb24gYm5wQ29weVRvKHIpIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gdGhpc1tpXVxuICByLnQgPSB0aGlzLnRcbiAgci5zID0gdGhpcy5zXG59XG5cbi8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIGludGVnZXIgdmFsdWUgeCwgLURWIDw9IHggPCBEVlxuZnVuY3Rpb24gYm5wRnJvbUludCh4KSB7XG4gIHRoaXMudCA9IDFcbiAgdGhpcy5zID0gKHggPCAwKSA/IC0xIDogMFxuICBpZiAoeCA+IDApIHRoaXNbMF0gPSB4XG4gIGVsc2UgaWYgKHggPCAtMSkgdGhpc1swXSA9IHggKyBEVlxuICBlbHNlIHRoaXMudCA9IDBcbn1cblxuLy8gcmV0dXJuIGJpZ2ludCBpbml0aWFsaXplZCB0byB2YWx1ZVxuZnVuY3Rpb24gbmJ2KGkpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHIuZnJvbUludChpKVxuICByZXR1cm4gclxufVxuXG4vLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG5mdW5jdGlvbiBibnBGcm9tU3RyaW5nKHMsIGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgdmFyIGtcbiAgaWYgKGIgPT0gMTYpIGsgPSA0XG4gIGVsc2UgaWYgKGIgPT0gOCkgayA9IDNcbiAgZWxzZSBpZiAoYiA9PSAyNTYpIGsgPSA4OyAvLyBieXRlIGFycmF5XG4gIGVsc2UgaWYgKGIgPT0gMikgayA9IDFcbiAgZWxzZSBpZiAoYiA9PSAzMikgayA9IDVcbiAgZWxzZSBpZiAoYiA9PSA0KSBrID0gMlxuICBlbHNlIHtcbiAgICBzZWxmLmZyb21SYWRpeChzLCBiKVxuICAgIHJldHVyblxuICB9XG4gIHNlbGYudCA9IDBcbiAgc2VsZi5zID0gMFxuICB2YXIgaSA9IHMubGVuZ3RoLFxuICAgIG1pID0gZmFsc2UsXG4gICAgc2ggPSAwXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHZhciB4ID0gKGsgPT0gOCkgPyBzW2ldICYgMHhmZiA6IGludEF0KHMsIGkpXG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBpZiAocy5jaGFyQXQoaSkgPT0gXCItXCIpIG1pID0gdHJ1ZVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgbWkgPSBmYWxzZVxuICAgIGlmIChzaCA9PSAwKVxuICAgICAgc2VsZltzZWxmLnQrK10gPSB4XG4gICAgZWxzZSBpZiAoc2ggKyBrID4gc2VsZi5EQikge1xuICAgICAgc2VsZltzZWxmLnQgLSAxXSB8PSAoeCAmICgoMSA8PCAoc2VsZi5EQiAtIHNoKSkgLSAxKSkgPDwgc2hcbiAgICAgIHNlbGZbc2VsZi50KytdID0gKHggPj4gKHNlbGYuREIgLSBzaCkpXG4gICAgfSBlbHNlXG4gICAgICBzZWxmW3NlbGYudCAtIDFdIHw9IHggPDwgc2hcbiAgICBzaCArPSBrXG4gICAgaWYgKHNoID49IHNlbGYuREIpIHNoIC09IHNlbGYuREJcbiAgfVxuICBpZiAoayA9PSA4ICYmIChzWzBdICYgMHg4MCkgIT0gMCkge1xuICAgIHNlbGYucyA9IC0xXG4gICAgaWYgKHNoID4gMCkgc2VsZltzZWxmLnQgLSAxXSB8PSAoKDEgPDwgKHNlbGYuREIgLSBzaCkpIC0gMSkgPDwgc2hcbiAgfVxuICBzZWxmLmNsYW1wKClcbiAgaWYgKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oc2VsZiwgc2VsZilcbn1cblxuLy8gKHByb3RlY3RlZCkgY2xhbXAgb2ZmIGV4Y2VzcyBoaWdoIHdvcmRzXG5mdW5jdGlvbiBibnBDbGFtcCgpIHtcbiAgdmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNXG4gIHdoaWxlICh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50IC0gMV0gPT0gYyktLXRoaXMudFxufVxuXG4vLyAocHVibGljKSByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGF0aW9uIGluIGdpdmVuIHJhZGl4XG5mdW5jdGlvbiBiblRvU3RyaW5nKGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLnMgPCAwKSByZXR1cm4gXCItXCIgKyBzZWxmLm5lZ2F0ZSgpXG4gICAgLnRvU3RyaW5nKGIpXG4gIHZhciBrXG4gIGlmIChiID09IDE2KSBrID0gNFxuICBlbHNlIGlmIChiID09IDgpIGsgPSAzXG4gIGVsc2UgaWYgKGIgPT0gMikgayA9IDFcbiAgZWxzZSBpZiAoYiA9PSAzMikgayA9IDVcbiAgZWxzZSBpZiAoYiA9PSA0KSBrID0gMlxuICBlbHNlIHJldHVybiBzZWxmLnRvUmFkaXgoYilcbiAgdmFyIGttID0gKDEgPDwgaykgLSAxLFxuICAgIGQsIG0gPSBmYWxzZSxcbiAgICByID0gXCJcIixcbiAgICBpID0gc2VsZi50XG4gIHZhciBwID0gc2VsZi5EQiAtIChpICogc2VsZi5EQikgJSBrXG4gIGlmIChpLS0gPiAwKSB7XG4gICAgaWYgKHAgPCBzZWxmLkRCICYmIChkID0gc2VsZltpXSA+PiBwKSA+IDApIHtcbiAgICAgIG0gPSB0cnVlXG4gICAgICByID0gaW50MmNoYXIoZClcbiAgICB9XG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgaWYgKHAgPCBrKSB7XG4gICAgICAgIGQgPSAoc2VsZltpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoayAtIHApXG4gICAgICAgIGQgfD0gc2VsZlstLWldID4+IChwICs9IHNlbGYuREIgLSBrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZCA9IChzZWxmW2ldID4+IChwIC09IGspKSAmIGttXG4gICAgICAgIGlmIChwIDw9IDApIHtcbiAgICAgICAgICBwICs9IHNlbGYuREJcbiAgICAgICAgICAtLWlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGQgPiAwKSBtID0gdHJ1ZVxuICAgICAgaWYgKG0pIHIgKz0gaW50MmNoYXIoZClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG0gPyByIDogXCIwXCJcbn1cblxuLy8gKHB1YmxpYykgLXRoaXNcbmZ1bmN0aW9uIGJuTmVnYXRlKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHx0aGlzfFxuZnVuY3Rpb24gYm5BYnMoKSB7XG4gIHJldHVybiAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpc1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gKyBpZiB0aGlzID4gYSwgLSBpZiB0aGlzIDwgYSwgMCBpZiBlcXVhbFxuZnVuY3Rpb24gYm5Db21wYXJlVG8oYSkge1xuICB2YXIgciA9IHRoaXMucyAtIGEuc1xuICBpZiAociAhPSAwKSByZXR1cm4gclxuICB2YXIgaSA9IHRoaXMudFxuICByID0gaSAtIGEudFxuICBpZiAociAhPSAwKSByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByXG4gIHdoaWxlICgtLWkgPj0gMClcbiAgICBpZiAoKHIgPSB0aGlzW2ldIC0gYVtpXSkgIT0gMCkgcmV0dXJuIHJcbiAgcmV0dXJuIDBcbn1cblxuLy8gcmV0dXJucyBiaXQgbGVuZ3RoIG9mIHRoZSBpbnRlZ2VyIHhcbmZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgdmFyIHIgPSAxLFxuICAgIHRcbiAgaWYgKCh0ID0geCA+Pj4gMTYpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMTZcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDgpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gOFxuICB9XG4gIGlmICgodCA9IHggPj4gNCkgIT0gMCkge1xuICAgIHggPSB0XG4gICAgciArPSA0XG4gIH1cbiAgaWYgKCh0ID0geCA+PiAyKSAhPSAwKSB7XG4gICAgeCA9IHRcbiAgICByICs9IDJcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDEpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMVxuICB9XG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHJldHVybiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gXCJ0aGlzXCJcbmZ1bmN0aW9uIGJuQml0TGVuZ3RoKCkge1xuICBpZiAodGhpcy50IDw9IDApIHJldHVybiAwXG4gIHJldHVybiB0aGlzLkRCICogKHRoaXMudCAtIDEpICsgbmJpdHModGhpc1t0aGlzLnQgLSAxXSBeICh0aGlzLnMgJiB0aGlzLkRNKSlcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gXCJ0aGlzXCJcbmZ1bmN0aW9uIGJuQnl0ZUxlbmd0aCgpIHtcbiAgcmV0dXJuIHRoaXMuYml0TGVuZ3RoKCkgPj4gM1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuKkRCXG5mdW5jdGlvbiBibnBETFNoaWZ0VG8obiwgcikge1xuICB2YXIgaVxuICBmb3IgKGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkgcltpICsgbl0gPSB0aGlzW2ldXG4gIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkgcltpXSA9IDBcbiAgci50ID0gdGhpcy50ICsgblxuICByLnMgPSB0aGlzLnNcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gbipEQlxuZnVuY3Rpb24gYm5wRFJTaGlmdFRvKG4sIHIpIHtcbiAgZm9yICh2YXIgaSA9IG47IGkgPCB0aGlzLnQ7ICsraSkgcltpIC0gbl0gPSB0aGlzW2ldXG4gIHIudCA9IE1hdGgubWF4KHRoaXMudCAtIG4sIDApXG4gIHIucyA9IHRoaXMuc1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG5mdW5jdGlvbiBibnBMU2hpZnRUbyhuLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgYnMgPSBuICUgc2VsZi5EQlxuICB2YXIgY2JzID0gc2VsZi5EQiAtIGJzXG4gIHZhciBibSA9ICgxIDw8IGNicykgLSAxXG4gIHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHNlbGYuREIpLFxuICAgIGMgPSAoc2VsZi5zIDw8IGJzKSAmIHNlbGYuRE0sXG4gICAgaVxuICBmb3IgKGkgPSBzZWxmLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgIHJbaSArIGRzICsgMV0gPSAoc2VsZltpXSA+PiBjYnMpIHwgY1xuICAgIGMgPSAoc2VsZltpXSAmIGJtKSA8PCBic1xuICB9XG4gIGZvciAoaSA9IGRzIC0gMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSAwXG4gIHJbZHNdID0gY1xuICByLnQgPSBzZWxmLnQgKyBkcyArIDFcbiAgci5zID0gc2VsZi5zXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuXG5mdW5jdGlvbiBibnBSU2hpZnRUbyhuLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByLnMgPSBzZWxmLnNcbiAgdmFyIGRzID0gTWF0aC5mbG9vcihuIC8gc2VsZi5EQilcbiAgaWYgKGRzID49IHNlbGYudCkge1xuICAgIHIudCA9IDBcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYnMgPSBuICUgc2VsZi5EQlxuICB2YXIgY2JzID0gc2VsZi5EQiAtIGJzXG4gIHZhciBibSA9ICgxIDw8IGJzKSAtIDFcbiAgclswXSA9IHNlbGZbZHNdID4+IGJzXG4gIGZvciAodmFyIGkgPSBkcyArIDE7IGkgPCBzZWxmLnQ7ICsraSkge1xuICAgIHJbaSAtIGRzIC0gMV0gfD0gKHNlbGZbaV0gJiBibSkgPDwgY2JzXG4gICAgcltpIC0gZHNdID0gc2VsZltpXSA+PiBic1xuICB9XG4gIGlmIChicyA+IDApIHJbc2VsZi50IC0gZHMgLSAxXSB8PSAoc2VsZi5zICYgYm0pIDw8IGNic1xuICByLnQgPSBzZWxmLnQgLSBkc1xuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgLSBhXG5mdW5jdGlvbiBibnBTdWJUbyhhLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSA9IDAsXG4gICAgYyA9IDAsXG4gICAgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBjICs9IHNlbGZbaV0gLSBhW2ldXG4gICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICBjID4+PSBzZWxmLkRCXG4gIH1cbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGMgLT0gYS5zXG4gICAgd2hpbGUgKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBzZWxmLnNcbiAgfSBlbHNlIHtcbiAgICBjICs9IHNlbGYuc1xuICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICBjIC09IGFbaV1cbiAgICAgIHJbaSsrXSA9IGMgJiBzZWxmLkRNXG4gICAgICBjID4+PSBzZWxmLkRCXG4gICAgfVxuICAgIGMgLT0gYS5zXG4gIH1cbiAgci5zID0gKGMgPCAwKSA/IC0xIDogMFxuICBpZiAoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWICsgY1xuICBlbHNlIGlmIChjID4gMCkgcltpKytdID0gY1xuICByLnQgPSBpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVRvKGEsIHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpLFxuICAgIHkgPSBhLmFicygpXG4gIHZhciBpID0geC50XG4gIHIudCA9IGkgKyB5LnRcbiAgd2hpbGUgKC0taSA+PSAwKSByW2ldID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgeS50OyArK2kpIHJbaSArIHgudF0gPSB4LmFtKDAsIHlbaV0sIHIsIGksIDAsIHgudClcbiAgci5zID0gMFxuICByLmNsYW1wKClcbiAgaWYgKHRoaXMucyAhPSBhLnMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbmZ1bmN0aW9uIGJucFNxdWFyZVRvKHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpXG4gIHZhciBpID0gci50ID0gMiAqIHgudFxuICB3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwXG4gIGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpIHtcbiAgICB2YXIgYyA9IHguYW0oaSwgeFtpXSwgciwgMiAqIGksIDAsIDEpXG4gICAgaWYgKChyW2kgKyB4LnRdICs9IHguYW0oaSArIDEsIDIgKiB4W2ldLCByLCAyICogaSArIDEsIGMsIHgudCAtIGkgLSAxKSkgPj0geC5EVikge1xuICAgICAgcltpICsgeC50XSAtPSB4LkRWXG4gICAgICByW2kgKyB4LnQgKyAxXSA9IDFcbiAgICB9XG4gIH1cbiAgaWYgKHIudCA+IDApIHJbci50IC0gMV0gKz0geC5hbShpLCB4W2ldLCByLCAyICogaSwgMCwgMSlcbiAgci5zID0gMFxuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgZGl2aWRlIHRoaXMgYnkgbSwgcXVvdGllbnQgYW5kIHJlbWFpbmRlciB0byBxLCByIChIQUMgMTQuMjApXG4vLyByICE9IHEsIHRoaXMgIT0gbS4gIHEgb3IgciBtYXkgYmUgbnVsbC5cbmZ1bmN0aW9uIGJucERpdlJlbVRvKG0sIHEsIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBwbSA9IG0uYWJzKClcbiAgaWYgKHBtLnQgPD0gMCkgcmV0dXJuXG4gIHZhciBwdCA9IHNlbGYuYWJzKClcbiAgaWYgKHB0LnQgPCBwbS50KSB7XG4gICAgaWYgKHEgIT0gbnVsbCkgcS5mcm9tSW50KDApXG4gICAgaWYgKHIgIT0gbnVsbCkgc2VsZi5jb3B5VG8ocilcbiAgICByZXR1cm5cbiAgfVxuICBpZiAociA9PSBudWxsKSByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB2YXIgeSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgdHMgPSBzZWxmLnMsXG4gICAgbXMgPSBtLnNcbiAgdmFyIG5zaCA9IHNlbGYuREIgLSBuYml0cyhwbVtwbS50IC0gMV0pOyAvLyBub3JtYWxpemUgbW9kdWx1c1xuICBpZiAobnNoID4gMCkge1xuICAgIHBtLmxTaGlmdFRvKG5zaCwgeSlcbiAgICBwdC5sU2hpZnRUbyhuc2gsIHIpXG4gIH0gZWxzZSB7XG4gICAgcG0uY29weVRvKHkpXG4gICAgcHQuY29weVRvKHIpXG4gIH1cbiAgdmFyIHlzID0geS50XG4gIHZhciB5MCA9IHlbeXMgLSAxXVxuICBpZiAoeTAgPT0gMCkgcmV0dXJuXG4gIHZhciB5dCA9IHkwICogKDEgPDwgc2VsZi5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gc2VsZi5GMiA6IDApXG4gIHZhciBkMSA9IHNlbGYuRlYgLyB5dCxcbiAgICBkMiA9ICgxIDw8IHNlbGYuRjEpIC8geXQsXG4gICAgZSA9IDEgPDwgc2VsZi5GMlxuICB2YXIgaSA9IHIudCxcbiAgICBqID0gaSAtIHlzLFxuICAgIHQgPSAocSA9PSBudWxsKSA/IG5ldyBCaWdJbnRlZ2VyKCkgOiBxXG4gIHkuZGxTaGlmdFRvKGosIHQpXG4gIGlmIChyLmNvbXBhcmVUbyh0KSA+PSAwKSB7XG4gICAgcltyLnQrK10gPSAxXG4gICAgci5zdWJUbyh0LCByKVxuICB9XG4gIEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbyh5cywgdClcbiAgdC5zdWJUbyh5LCB5KTsgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcbiAgd2hpbGUgKHkudCA8IHlzKSB5W3kudCsrXSA9IDBcbiAgd2hpbGUgKC0taiA+PSAwKSB7XG4gICAgLy8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXRcbiAgICB2YXIgcWQgPSAoclstLWldID09IHkwKSA/IHNlbGYuRE0gOiBNYXRoLmZsb29yKHJbaV0gKiBkMSArIChyW2kgLSAxXSArIGUpICogZDIpXG4gICAgaWYgKChyW2ldICs9IHkuYW0oMCwgcWQsIHIsIGosIDAsIHlzKSkgPCBxZCkgeyAvLyBUcnkgaXQgb3V0XG4gICAgICB5LmRsU2hpZnRUbyhqLCB0KVxuICAgICAgci5zdWJUbyh0LCByKVxuICAgICAgd2hpbGUgKHJbaV0gPCAtLXFkKSByLnN1YlRvKHQsIHIpXG4gICAgfVxuICB9XG4gIGlmIChxICE9IG51bGwpIHtcbiAgICByLmRyU2hpZnRUbyh5cywgcSlcbiAgICBpZiAodHMgIT0gbXMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhxLCBxKVxuICB9XG4gIHIudCA9IHlzXG4gIHIuY2xhbXAoKVxuICBpZiAobnNoID4gMCkgci5yU2hpZnRUbyhuc2gsIHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcbiAgaWYgKHRzIDwgMCkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIsIHIpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbmZ1bmN0aW9uIGJuTW9kKGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuYWJzKClcbiAgICAuZGl2UmVtVG8oYSwgbnVsbCwgcilcbiAgaWYgKHRoaXMucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIGEuc3ViVG8ociwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gTW9kdWxhciByZWR1Y3Rpb24gdXNpbmcgXCJjbGFzc2ljXCIgYWxnb3JpdGhtXG5mdW5jdGlvbiBDbGFzc2ljKG0pIHtcbiAgdGhpcy5tID0gbVxufVxuXG5mdW5jdGlvbiBjQ29udmVydCh4KSB7XG4gIGlmICh4LnMgPCAwIHx8IHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkgcmV0dXJuIHgubW9kKHRoaXMubSlcbiAgZWxzZSByZXR1cm4geFxufVxuXG5mdW5jdGlvbiBjUmV2ZXJ0KHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuZnVuY3Rpb24gY1JlZHVjZSh4KSB7XG4gIHguZGl2UmVtVG8odGhpcy5tLCBudWxsLCB4KVxufVxuXG5mdW5jdGlvbiBjTXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuZnVuY3Rpb24gY1NxclRvKHgsIHIpIHtcbiAgeC5zcXVhcmVUbyhyKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5DbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0ID0gY0NvbnZlcnRcbkNsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGNSZXZlcnRcbkNsYXNzaWMucHJvdG90eXBlLnJlZHVjZSA9IGNSZWR1Y2VcbkNsYXNzaWMucHJvdG90eXBlLm11bFRvID0gY011bFRvXG5DbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUb1xuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuLy8ganVzdGlmaWNhdGlvbjpcbi8vICAgICAgICAgeHkgPT0gMSAobW9kIG0pXG4vLyAgICAgICAgIHh5ID0gIDEra21cbi8vICAgeHkoMi14eSkgPSAoMStrbSkoMS1rbSlcbi8vIHhbeSgyLXh5KV0gPSAxLWteMm1eMlxuLy8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuLy8gaWYgeSBpcyAxL3ggbW9kIG0sIHRoZW4geSgyLXh5KSBpcyAxL3ggbW9kIG1eMlxuLy8gc2hvdWxkIHJlZHVjZSB4IGFuZCB5KDIteHkpIGJ5IG1eMiBhdCBlYWNoIHN0ZXAgdG8ga2VlcCBzaXplIGJvdW5kZWQuXG4vLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG5mdW5jdGlvbiBibnBJbnZEaWdpdCgpIHtcbiAgaWYgKHRoaXMudCA8IDEpIHJldHVybiAwXG4gIHZhciB4ID0gdGhpc1swXVxuICBpZiAoKHggJiAxKSA9PSAwKSByZXR1cm4gMFxuICB2YXIgeSA9IHggJiAzOyAvLyB5ID09IDEveCBtb2QgMl4yXG4gIHkgPSAoeSAqICgyIC0gKHggJiAweGYpICogeSkpICYgMHhmOyAvLyB5ID09IDEveCBtb2QgMl40XG4gIHkgPSAoeSAqICgyIC0gKHggJiAweGZmKSAqIHkpKSAmIDB4ZmY7IC8vIHkgPT0gMS94IG1vZCAyXjhcbiAgeSA9ICh5ICogKDIgLSAoKCh4ICYgMHhmZmZmKSAqIHkpICYgMHhmZmZmKSkpICYgMHhmZmZmOyAvLyB5ID09IDEveCBtb2QgMl4xNlxuICAvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHlcbiAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG4gIHkgPSAoeSAqICgyIC0geCAqIHkgJSB0aGlzLkRWKSkgJSB0aGlzLkRWOyAvLyB5ID09IDEveCBtb2QgMl5kYml0c1xuICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVlxuICByZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXlcbn1cblxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbmZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICB0aGlzLm0gPSBtXG4gIHRoaXMubXAgPSBtLmludkRpZ2l0KClcbiAgdGhpcy5tcGwgPSB0aGlzLm1wICYgMHg3ZmZmXG4gIHRoaXMubXBoID0gdGhpcy5tcCA+PiAxNVxuICB0aGlzLnVtID0gKDEgPDwgKG0uREIgLSAxNSkpIC0gMVxuICB0aGlzLm10MiA9IDIgKiBtLnRcbn1cblxuLy8geFIgbW9kIG1cbmZ1bmN0aW9uIG1vbnRDb252ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHguYWJzKClcbiAgICAuZGxTaGlmdFRvKHRoaXMubS50LCByKVxuICByLmRpdlJlbVRvKHRoaXMubSwgbnVsbCwgcilcbiAgaWYgKHgucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIHRoaXMubS5zdWJUbyhyLCByKVxuICByZXR1cm4gclxufVxuXG4vLyB4L1IgbW9kIG1cbmZ1bmN0aW9uIG1vbnRSZXZlcnQoeCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgeC5jb3B5VG8ocilcbiAgdGhpcy5yZWR1Y2UocilcbiAgcmV0dXJuIHJcbn1cblxuLy8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7XG4gIHdoaWxlICh4LnQgPD0gdGhpcy5tdDIpIC8vIHBhZCB4IHNvIGFtIGhhcyBlbm91Z2ggcm9vbSBsYXRlclxuICAgIHhbeC50KytdID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubS50OyArK2kpIHtcbiAgICAvLyBmYXN0ZXIgd2F5IG9mIGNhbGN1bGF0aW5nIHUwID0geFtpXSptcCBtb2QgRFZcbiAgICB2YXIgaiA9IHhbaV0gJiAweDdmZmZcbiAgICB2YXIgdTAgPSAoaiAqIHRoaXMubXBsICsgKCgoaiAqIHRoaXMubXBoICsgKHhbaV0gPj4gMTUpICogdGhpcy5tcGwpICYgdGhpcy51bSkgPDwgMTUpKSAmIHguRE1cbiAgICAvLyB1c2UgYW0gdG8gY29tYmluZSB0aGUgbXVsdGlwbHktc2hpZnQtYWRkIGludG8gb25lIGNhbGxcbiAgICBqID0gaSArIHRoaXMubS50XG4gICAgeFtqXSArPSB0aGlzLm0uYW0oMCwgdTAsIHgsIGksIDAsIHRoaXMubS50KVxuICAgIC8vIHByb3BhZ2F0ZSBjYXJyeVxuICAgIHdoaWxlICh4W2pdID49IHguRFYpIHtcbiAgICAgIHhbal0gLT0geC5EVlxuICAgICAgeFsrK2pdKytcbiAgICB9XG4gIH1cbiAgeC5jbGFtcCgpXG4gIHguZHJTaGlmdFRvKHRoaXMubS50LCB4KVxuICBpZiAoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSwgeClcbn1cblxuLy8gciA9IFwieF4yL1IgbW9kIG1cIjsgeCAhPSByXG5mdW5jdGlvbiBtb250U3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbi8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcbmZ1bmN0aW9uIG1vbnRNdWxUbyh4LCB5LCByKSB7XG4gIHgubXVsdGlwbHlUbyh5LCByKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5Nb250Z29tZXJ5LnByb3RvdHlwZS5jb252ZXJ0ID0gbW9udENvbnZlcnRcbk1vbnRnb21lcnkucHJvdG90eXBlLnJldmVydCA9IG1vbnRSZXZlcnRcbk1vbnRnb21lcnkucHJvdG90eXBlLnJlZHVjZSA9IG1vbnRSZWR1Y2Vcbk1vbnRnb21lcnkucHJvdG90eXBlLm11bFRvID0gbW9udE11bFRvXG5Nb250Z29tZXJ5LnByb3RvdHlwZS5zcXJUbyA9IG1vbnRTcXJUb1xuXG4vLyAocHJvdGVjdGVkKSB0cnVlIGlmZiB0aGlzIGlzIGV2ZW5cbmZ1bmN0aW9uIGJucElzRXZlbigpIHtcbiAgcmV0dXJuICgodGhpcy50ID4gMCkgPyAodGhpc1swXSAmIDEpIDogdGhpcy5zKSA9PSAwXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXNeZSwgZSA8IDJeMzIsIGRvaW5nIHNxciBhbmQgbXVsIHdpdGggXCJyXCIgKEhBQyAxNC43OSlcbmZ1bmN0aW9uIGJucEV4cChlLCB6KSB7XG4gIGlmIChlID4gMHhmZmZmZmZmZiB8fCBlIDwgMSkgcmV0dXJuIEJpZ0ludGVnZXIuT05FXG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICByMiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgZyA9IHouY29udmVydCh0aGlzKSxcbiAgICBpID0gbmJpdHMoZSkgLSAxXG4gIGcuY29weVRvKHIpXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHouc3FyVG8ociwgcjIpXG4gICAgaWYgKChlICYgKDEgPDwgaSkpID4gMCkgei5tdWxUbyhyMiwgZywgcilcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0ID0gclxuICAgICAgciA9IHIyXG4gICAgICByMiA9IHRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpXG59XG5cbi8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbmZ1bmN0aW9uIGJuTW9kUG93SW50KGUsIG0pIHtcbiAgdmFyIHpcbiAgaWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkgeiA9IG5ldyBDbGFzc2ljKG0pXG4gIGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pXG4gIHJldHVybiB0aGlzLmV4cChlLCB6KVxufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNvcHlUbyA9IGJucENvcHlUb1xucHJvdG8uZnJvbUludCA9IGJucEZyb21JbnRcbnByb3RvLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nXG5wcm90by5jbGFtcCA9IGJucENsYW1wXG5wcm90by5kbFNoaWZ0VG8gPSBibnBETFNoaWZ0VG9cbnByb3RvLmRyU2hpZnRUbyA9IGJucERSU2hpZnRUb1xucHJvdG8ubFNoaWZ0VG8gPSBibnBMU2hpZnRUb1xucHJvdG8uclNoaWZ0VG8gPSBibnBSU2hpZnRUb1xucHJvdG8uc3ViVG8gPSBibnBTdWJUb1xucHJvdG8ubXVsdGlwbHlUbyA9IGJucE11bHRpcGx5VG9cbnByb3RvLnNxdWFyZVRvID0gYm5wU3F1YXJlVG9cbnByb3RvLmRpdlJlbVRvID0gYm5wRGl2UmVtVG9cbnByb3RvLmludkRpZ2l0ID0gYm5wSW52RGlnaXRcbnByb3RvLmlzRXZlbiA9IGJucElzRXZlblxucHJvdG8uZXhwID0gYm5wRXhwXG5cbi8vIHB1YmxpY1xucHJvdG8udG9TdHJpbmcgPSBiblRvU3RyaW5nXG5wcm90by5uZWdhdGUgPSBibk5lZ2F0ZVxucHJvdG8uYWJzID0gYm5BYnNcbnByb3RvLmNvbXBhcmVUbyA9IGJuQ29tcGFyZVRvXG5wcm90by5iaXRMZW5ndGggPSBibkJpdExlbmd0aFxucHJvdG8uYnl0ZUxlbmd0aCA9IGJuQnl0ZUxlbmd0aFxucHJvdG8ubW9kID0gYm5Nb2RcbnByb3RvLm1vZFBvd0ludCA9IGJuTW9kUG93SW50XG5cbi8vIChwdWJsaWMpXG5mdW5jdGlvbiBibkNsb25lKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5jb3B5VG8ocilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGludGVnZXJcbmZ1bmN0aW9uIGJuSW50VmFsdWUoKSB7XG4gIGlmICh0aGlzLnMgPCAwKSB7XG4gICAgaWYgKHRoaXMudCA9PSAxKSByZXR1cm4gdGhpc1swXSAtIHRoaXMuRFZcbiAgICBlbHNlIGlmICh0aGlzLnQgPT0gMCkgcmV0dXJuIC0xXG4gIH0gZWxzZSBpZiAodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdXG4gIGVsc2UgaWYgKHRoaXMudCA9PSAwKSByZXR1cm4gMFxuICAvLyBhc3N1bWVzIDE2IDwgREIgPCAzMlxuICByZXR1cm4gKCh0aGlzWzFdICYgKCgxIDw8ICgzMiAtIHRoaXMuREIpKSAtIDEpKSA8PCB0aGlzLkRCKSB8IHRoaXNbMF1cbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGJ5dGVcbmZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCkge1xuICByZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDI0KSA+PiAyNFxufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuZnVuY3Rpb24gYm5TaG9ydFZhbHVlKCkge1xuICByZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDE2KSA+PiAxNlxufVxuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4geCBzLnQuIHJeeCA8IERWXG5mdW5jdGlvbiBibnBDaHVua1NpemUocikge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMiAqIHRoaXMuREIgLyBNYXRoLmxvZyhyKSlcbn1cblxuLy8gKHB1YmxpYykgMCBpZiB0aGlzID09IDAsIDEgaWYgdGhpcyA+IDBcbmZ1bmN0aW9uIGJuU2lnTnVtKCkge1xuICBpZiAodGhpcy5zIDwgMCkgcmV0dXJuIC0xXG4gIGVsc2UgaWYgKHRoaXMudCA8PSAwIHx8ICh0aGlzLnQgPT0gMSAmJiB0aGlzWzBdIDw9IDApKSByZXR1cm4gMFxuICBlbHNlIHJldHVybiAxXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5mdW5jdGlvbiBibnBUb1JhZGl4KGIpIHtcbiAgaWYgKGIgPT0gbnVsbCkgYiA9IDEwXG4gIGlmICh0aGlzLnNpZ251bSgpID09IDAgfHwgYiA8IDIgfHwgYiA+IDM2KSByZXR1cm4gXCIwXCJcbiAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYilcbiAgdmFyIGEgPSBNYXRoLnBvdyhiLCBjcylcbiAgdmFyIGQgPSBuYnYoYSksXG4gICAgeSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgeiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgciA9IFwiXCJcbiAgdGhpcy5kaXZSZW1UbyhkLCB5LCB6KVxuICB3aGlsZSAoeS5zaWdudW0oKSA+IDApIHtcbiAgICByID0gKGEgKyB6LmludFZhbHVlKCkpXG4gICAgICAudG9TdHJpbmcoYilcbiAgICAgIC5zdWJzdHIoMSkgKyByXG4gICAgeS5kaXZSZW1UbyhkLCB5LCB6KVxuICB9XG4gIHJldHVybiB6LmludFZhbHVlKClcbiAgICAudG9TdHJpbmcoYikgKyByXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgZnJvbSByYWRpeCBzdHJpbmdcbmZ1bmN0aW9uIGJucEZyb21SYWRpeChzLCBiKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLmZyb21JbnQoMClcbiAgaWYgKGIgPT0gbnVsbCkgYiA9IDEwXG4gIHZhciBjcyA9IHNlbGYuY2h1bmtTaXplKGIpXG4gIHZhciBkID0gTWF0aC5wb3coYiwgY3MpLFxuICAgIG1pID0gZmFsc2UsXG4gICAgaiA9IDAsXG4gICAgdyA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHggPSBpbnRBdChzLCBpKVxuICAgIGlmICh4IDwgMCkge1xuICAgICAgaWYgKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHNlbGYuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICB3ID0gYiAqIHcgKyB4XG4gICAgaWYgKCsraiA+PSBjcykge1xuICAgICAgc2VsZi5kTXVsdGlwbHkoZClcbiAgICAgIHNlbGYuZEFkZE9mZnNldCh3LCAwKVxuICAgICAgaiA9IDBcbiAgICAgIHcgPSAwXG4gICAgfVxuICB9XG4gIGlmIChqID4gMCkge1xuICAgIHNlbGYuZE11bHRpcGx5KE1hdGgucG93KGIsIGopKVxuICAgIHNlbGYuZEFkZE9mZnNldCh3LCAwKVxuICB9XG4gIGlmIChtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHNlbGYsIHNlbGYpXG59XG5cbi8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gYm5wRnJvbU51bWJlcihhLCBiLCBjKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYikge1xuICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxpbnQsUk5HKVxuICAgIGlmIChhIDwgMikgc2VsZi5mcm9tSW50KDEpXG4gICAgZWxzZSB7XG4gICAgICBzZWxmLmZyb21OdW1iZXIoYSwgYylcbiAgICAgIGlmICghc2VsZi50ZXN0Qml0KGEgLSAxKSkgLy8gZm9yY2UgTVNCIHNldFxuICAgICAgICBzZWxmLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCBvcF9vciwgc2VsZilcbiAgICAgIGlmIChzZWxmLmlzRXZlbigpKSBzZWxmLmRBZGRPZmZzZXQoMSwgMCk7IC8vIGZvcmNlIG9kZFxuICAgICAgd2hpbGUgKCFzZWxmLmlzUHJvYmFibGVQcmltZShiKSkge1xuICAgICAgICBzZWxmLmRBZGRPZmZzZXQoMiwgMClcbiAgICAgICAgaWYgKHNlbGYuYml0TGVuZ3RoKCkgPiBhKSBzZWxmLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIHNlbGYpXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxSTkcpXG4gICAgdmFyIHggPSBuZXcgQXJyYXkoKSxcbiAgICAgIHQgPSBhICYgN1xuICAgIHgubGVuZ3RoID0gKGEgPj4gMykgKyAxXG4gICAgYi5uZXh0Qnl0ZXMoeClcbiAgICBpZiAodCA+IDApIHhbMF0gJj0gKCgxIDw8IHQpIC0gMSlcbiAgICBlbHNlIHhbMF0gPSAwXG4gICAgc2VsZi5mcm9tU3RyaW5nKHgsIDI1NilcbiAgfVxufVxuXG4vLyAocHVibGljKSBjb252ZXJ0IHRvIGJpZ2VuZGlhbiBieXRlIGFycmF5XG5mdW5jdGlvbiBiblRvQnl0ZUFycmF5KCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGkgPSBzZWxmLnQsXG4gICAgciA9IG5ldyBBcnJheSgpXG4gIHJbMF0gPSBzZWxmLnNcbiAgdmFyIHAgPSBzZWxmLkRCIC0gKGkgKiBzZWxmLkRCKSAlIDgsXG4gICAgZCwgayA9IDBcbiAgaWYgKGktLSA+IDApIHtcbiAgICBpZiAocCA8IHNlbGYuREIgJiYgKGQgPSBzZWxmW2ldID4+IHApICE9IChzZWxmLnMgJiBzZWxmLkRNKSA+PiBwKVxuICAgICAgcltrKytdID0gZCB8IChzZWxmLnMgPDwgKHNlbGYuREIgLSBwKSlcbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICBpZiAocCA8IDgpIHtcbiAgICAgICAgZCA9IChzZWxmW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8ICg4IC0gcClcbiAgICAgICAgZCB8PSBzZWxmWy0taV0gPj4gKHAgKz0gc2VsZi5EQiAtIDgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkID0gKHNlbGZbaV0gPj4gKHAgLT0gOCkpICYgMHhmZlxuICAgICAgICBpZiAocCA8PSAwKSB7XG4gICAgICAgICAgcCArPSBzZWxmLkRCXG4gICAgICAgICAgLS1pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgoZCAmIDB4ODApICE9IDApIGQgfD0gLTI1NlxuICAgICAgaWYgKGsgPT09IDAgJiYgKHNlbGYucyAmIDB4ODApICE9IChkICYgMHg4MCkpKytrXG4gICAgICBpZiAoayA+IDAgfHwgZCAhPSBzZWxmLnMpIHJbaysrXSA9IGRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuZnVuY3Rpb24gYm5FcXVhbHMoYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID09IDApXG59XG5cbmZ1bmN0aW9uIGJuTWluKGEpIHtcbiAgcmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA8IDApID8gdGhpcyA6IGFcbn1cblxuZnVuY3Rpb24gYm5NYXgoYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyBvcCBhIChiaXR3aXNlKVxuZnVuY3Rpb24gYm5wQml0d2lzZVRvKGEsIG9wLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3Aoc2VsZltpXSwgYVtpXSlcbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGYgPSBhLnMgJiBzZWxmLkRNXG4gICAgZm9yIChpID0gbTsgaSA8IHNlbGYudDsgKytpKSByW2ldID0gb3Aoc2VsZltpXSwgZilcbiAgICByLnQgPSBzZWxmLnRcbiAgfSBlbHNlIHtcbiAgICBmID0gc2VsZi5zICYgc2VsZi5ETVxuICAgIGZvciAoaSA9IG07IGkgPCBhLnQ7ICsraSkgcltpXSA9IG9wKGYsIGFbaV0pXG4gICAgci50ID0gYS50XG4gIH1cbiAgci5zID0gb3Aoc2VsZi5zLCBhLnMpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHVibGljKSB0aGlzICYgYVxuZnVuY3Rpb24gb3BfYW5kKHgsIHkpIHtcbiAgcmV0dXJuIHggJiB5XG59XG5cbmZ1bmN0aW9uIGJuQW5kKGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyB8IGFcbmZ1bmN0aW9uIG9wX29yKHgsIHkpIHtcbiAgcmV0dXJuIHggfCB5XG59XG5cbmZ1bmN0aW9uIGJuT3IoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgXiBhXG5mdW5jdGlvbiBvcF94b3IoeCwgeSkge1xuICByZXR1cm4geCBeIHlcbn1cblxuZnVuY3Rpb24gYm5Yb3IoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfeG9yLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzICYgfmFcbmZ1bmN0aW9uIG9wX2FuZG5vdCh4LCB5KSB7XG4gIHJldHVybiB4ICYgfnlcbn1cblxuZnVuY3Rpb24gYm5BbmROb3QoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB+dGhpc1xuZnVuY3Rpb24gYm5Ob3QoKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gdGhpcy5ETSAmIH50aGlzW2ldXG4gIHIudCA9IHRoaXMudFxuICByLnMgPSB+dGhpcy5zXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgPDwgblxuZnVuY3Rpb24gYm5TaGlmdExlZnQobikge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgaWYgKG4gPCAwKSB0aGlzLnJTaGlmdFRvKC1uLCByKVxuICBlbHNlIHRoaXMubFNoaWZ0VG8obiwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyA+PiBuXG5mdW5jdGlvbiBiblNoaWZ0UmlnaHQobikge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgaWYgKG4gPCAwKSB0aGlzLmxTaGlmdFRvKC1uLCByKVxuICBlbHNlIHRoaXMuclNoaWZ0VG8obiwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuZnVuY3Rpb24gbGJpdCh4KSB7XG4gIGlmICh4ID09IDApIHJldHVybiAtMVxuICB2YXIgciA9IDBcbiAgaWYgKCh4ICYgMHhmZmZmKSA9PSAwKSB7XG4gICAgeCA+Pj0gMTZcbiAgICByICs9IDE2XG4gIH1cbiAgaWYgKCh4ICYgMHhmZikgPT0gMCkge1xuICAgIHggPj49IDhcbiAgICByICs9IDhcbiAgfVxuICBpZiAoKHggJiAweGYpID09IDApIHtcbiAgICB4ID4+PSA0XG4gICAgciArPSA0XG4gIH1cbiAgaWYgKCh4ICYgMykgPT0gMCkge1xuICAgIHggPj49IDJcbiAgICByICs9IDJcbiAgfVxuICBpZiAoKHggJiAxKSA9PSAwKSsrclxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSByZXR1cm5zIGluZGV4IG9mIGxvd2VzdCAxLWJpdCAob3IgLTEgaWYgbm9uZSlcbmZ1bmN0aW9uIGJuR2V0TG93ZXN0U2V0Qml0KCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKVxuICAgIGlmICh0aGlzW2ldICE9IDApIHJldHVybiBpICogdGhpcy5EQiArIGxiaXQodGhpc1tpXSlcbiAgaWYgKHRoaXMucyA8IDApIHJldHVybiB0aGlzLnQgKiB0aGlzLkRCXG4gIHJldHVybiAtMVxufVxuXG4vLyByZXR1cm4gbnVtYmVyIG9mIDEgYml0cyBpbiB4XG5mdW5jdGlvbiBjYml0KHgpIHtcbiAgdmFyIHIgPSAwXG4gIHdoaWxlICh4ICE9IDApIHtcbiAgICB4ICY9IHggLSAxXG4gICAgKytyXG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIG51bWJlciBvZiBzZXQgYml0c1xuZnVuY3Rpb24gYm5CaXRDb3VudCgpIHtcbiAgdmFyIHIgPSAwLFxuICAgIHggPSB0aGlzLnMgJiB0aGlzLkRNXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHIgKz0gY2JpdCh0aGlzW2ldIF4geClcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdHJ1ZSBpZmYgbnRoIGJpdCBpcyBzZXRcbmZ1bmN0aW9uIGJuVGVzdEJpdChuKSB7XG4gIHZhciBqID0gTWF0aC5mbG9vcihuIC8gdGhpcy5EQilcbiAgaWYgKGogPj0gdGhpcy50KSByZXR1cm4gKHRoaXMucyAhPSAwKVxuICByZXR1cm4gKCh0aGlzW2pdICYgKDEgPDwgKG4gJSB0aGlzLkRCKSkpICE9IDApXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXMgb3AgKDE8PG4pXG5mdW5jdGlvbiBibnBDaGFuZ2VCaXQobiwgb3ApIHtcbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQobilcbiAgdGhpcy5iaXR3aXNlVG8ociwgb3AsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgfCAoMTw8bilcbmZ1bmN0aW9uIGJuU2V0Qml0KG4pIHtcbiAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKVxufVxuXG4vLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuZnVuY3Rpb24gYm5DbGVhckJpdChuKSB7XG4gIHJldHVybiB0aGlzLmNoYW5nZUJpdChuLCBvcF9hbmRub3QpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbmZ1bmN0aW9uIGJuRmxpcEJpdChuKSB7XG4gIHJldHVybiB0aGlzLmNoYW5nZUJpdChuLCBvcF94b3IpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICsgYVxuZnVuY3Rpb24gYm5wQWRkVG8oYSwgcikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICB2YXIgaSA9IDAsXG4gICAgYyA9IDAsXG4gICAgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBjICs9IHNlbGZbaV0gKyBhW2ldXG4gICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICBjID4+PSBzZWxmLkRCXG4gIH1cbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGMgKz0gYS5zXG4gICAgd2hpbGUgKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBzZWxmLnNcbiAgfSBlbHNlIHtcbiAgICBjICs9IHNlbGYuc1xuICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICBjICs9IGFbaV1cbiAgICAgIHJbaSsrXSA9IGMgJiBzZWxmLkRNXG4gICAgICBjID4+PSBzZWxmLkRCXG4gICAgfVxuICAgIGMgKz0gYS5zXG4gIH1cbiAgci5zID0gKGMgPCAwKSA/IC0xIDogMFxuICBpZiAoYyA+IDApIHJbaSsrXSA9IGNcbiAgZWxzZSBpZiAoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWICsgY1xuICByLnQgPSBpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHVibGljKSB0aGlzICsgYVxuZnVuY3Rpb24gYm5BZGQoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5hZGRUbyhhLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIC0gYVxuZnVuY3Rpb24gYm5TdWJ0cmFjdChhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnN1YlRvKGEsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgKiBhXG5mdW5jdGlvbiBibk11bHRpcGx5KGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMubXVsdGlwbHlUbyhhLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzXjJcbmZ1bmN0aW9uIGJuU3F1YXJlKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5zcXVhcmVUbyhyKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIC8gYVxuZnVuY3Rpb24gYm5EaXZpZGUoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzICUgYVxuZnVuY3Rpb24gYm5SZW1haW5kZXIoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCBudWxsLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSBbdGhpcy9hLHRoaXMlYV1cbmZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGEpIHtcbiAgdmFyIHEgPSBuZXcgQmlnSW50ZWdlcigpLFxuICAgIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuZGl2UmVtVG8oYSwgcSwgcilcbiAgcmV0dXJuIG5ldyBBcnJheShxLCByKVxufVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzICo9IG4sIHRoaXMgPj0gMCwgMSA8IG4gPCBEVlxuZnVuY3Rpb24gYm5wRE11bHRpcGx5KG4pIHtcbiAgdGhpc1t0aGlzLnRdID0gdGhpcy5hbSgwLCBuIC0gMSwgdGhpcywgMCwgMCwgdGhpcy50KVxuICArK3RoaXMudFxuICB0aGlzLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyArPSBuIDw8IHcgd29yZHMsIHRoaXMgPj0gMFxuZnVuY3Rpb24gYm5wREFkZE9mZnNldChuLCB3KSB7XG4gIGlmIChuID09IDApIHJldHVyblxuICB3aGlsZSAodGhpcy50IDw9IHcpIHRoaXNbdGhpcy50KytdID0gMFxuICB0aGlzW3ddICs9IG5cbiAgd2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVikge1xuICAgIHRoaXNbd10gLT0gdGhpcy5EVlxuICAgIGlmICgrK3cgPj0gdGhpcy50KSB0aGlzW3RoaXMudCsrXSA9IDBcbiAgICArK3RoaXNbd11cbiAgfVxufVxuXG4vLyBBIFwibnVsbFwiIHJlZHVjZXJcbmZ1bmN0aW9uIE51bGxFeHAoKSB7fVxuXG5mdW5jdGlvbiBuTm9wKHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuZnVuY3Rpb24gbk11bFRvKHgsIHksIHIpIHtcbiAgeC5tdWx0aXBseVRvKHksIHIpXG59XG5cbmZ1bmN0aW9uIG5TcXJUbyh4LCByKSB7XG4gIHguc3F1YXJlVG8ocilcbn1cblxuTnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3Bcbk51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3Bcbk51bGxFeHAucHJvdG90eXBlLm11bFRvID0gbk11bFRvXG5OdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUb1xuXG4vLyAocHVibGljKSB0aGlzXmVcbmZ1bmN0aW9uIGJuUG93KGUpIHtcbiAgcmV0dXJuIHRoaXMuZXhwKGUsIG5ldyBOdWxsRXhwKCkpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSBsb3dlciBuIHdvcmRzIG9mIFwidGhpcyAqIGFcIiwgYS50IDw9IG5cbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLCBuLCByKSB7XG4gIHZhciBpID0gTWF0aC5taW4odGhpcy50ICsgYS50LCBuKVxuICByLnMgPSAwOyAvLyBhc3N1bWVzIGEsdGhpcyA+PSAwXG4gIHIudCA9IGlcbiAgd2hpbGUgKGkgPiAwKSByWy0taV0gPSAwXG4gIHZhciBqXG4gIGZvciAoaiA9IHIudCAtIHRoaXMudDsgaSA8IGo7ICsraSkgcltpICsgdGhpcy50XSA9IHRoaXMuYW0oMCwgYVtpXSwgciwgaSwgMCwgdGhpcy50KVxuICBmb3IgKGogPSBNYXRoLm1pbihhLnQsIG4pOyBpIDwgajsgKytpKSB0aGlzLmFtKDAsIGFbaV0sIHIsIGksIDAsIG4gLSBpKVxuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IFwidGhpcyAqIGFcIiB3aXRob3V0IGxvd2VyIG4gd29yZHMsIG4gPiAwXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYSwgbiwgcikge1xuICAtLW5cbiAgdmFyIGkgPSByLnQgPSB0aGlzLnQgKyBhLnQgLSBuXG4gIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgd2hpbGUgKC0taSA+PSAwKSByW2ldID0gMFxuICBmb3IgKGkgPSBNYXRoLm1heChuIC0gdGhpcy50LCAwKTsgaSA8IGEudDsgKytpKVxuICAgIHJbdGhpcy50ICsgaSAtIG5dID0gdGhpcy5hbShuIC0gaSwgYVtpXSwgciwgMCwgMCwgdGhpcy50ICsgaSAtIG4pXG4gIHIuY2xhbXAoKVxuICByLmRyU2hpZnRUbygxLCByKVxufVxuXG4vLyBCYXJyZXR0IG1vZHVsYXIgcmVkdWN0aW9uXG5mdW5jdGlvbiBCYXJyZXR0KG0pIHtcbiAgLy8gc2V0dXAgQmFycmV0dFxuICB0aGlzLnIyID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnEzID0gbmV3IEJpZ0ludGVnZXIoKVxuICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiAqIG0udCwgdGhpcy5yMilcbiAgdGhpcy5tdSA9IHRoaXMucjIuZGl2aWRlKG0pXG4gIHRoaXMubSA9IG1cbn1cblxuZnVuY3Rpb24gYmFycmV0dENvbnZlcnQoeCkge1xuICBpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHJldHVybiB4Lm1vZCh0aGlzLm0pXG4gIGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSByZXR1cm4geFxuICBlbHNlIHtcbiAgICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgICB4LmNvcHlUbyhyKVxuICAgIHRoaXMucmVkdWNlKHIpXG4gICAgcmV0dXJuIHJcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuLy8geCA9IHggbW9kIG0gKEhBQyAxNC40MilcbmZ1bmN0aW9uIGJhcnJldHRSZWR1Y2UoeCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgeC5kclNoaWZ0VG8oc2VsZi5tLnQgLSAxLCBzZWxmLnIyKVxuICBpZiAoeC50ID4gc2VsZi5tLnQgKyAxKSB7XG4gICAgeC50ID0gc2VsZi5tLnQgKyAxXG4gICAgeC5jbGFtcCgpXG4gIH1cbiAgc2VsZi5tdS5tdWx0aXBseVVwcGVyVG8oc2VsZi5yMiwgc2VsZi5tLnQgKyAxLCBzZWxmLnEzKVxuICBzZWxmLm0ubXVsdGlwbHlMb3dlclRvKHNlbGYucTMsIHNlbGYubS50ICsgMSwgc2VsZi5yMilcbiAgd2hpbGUgKHguY29tcGFyZVRvKHNlbGYucjIpIDwgMCkgeC5kQWRkT2Zmc2V0KDEsIHNlbGYubS50ICsgMSlcbiAgeC5zdWJUbyhzZWxmLnIyLCB4KVxuICB3aGlsZSAoeC5jb21wYXJlVG8oc2VsZi5tKSA+PSAwKSB4LnN1YlRvKHNlbGYubSwgeClcbn1cblxuLy8gciA9IHheMiBtb2QgbTsgeCAhPSByXG5mdW5jdGlvbiBiYXJyZXR0U3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbi8vIHIgPSB4KnkgbW9kIG07IHgseSAhPSByXG5mdW5jdGlvbiBiYXJyZXR0TXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuQmFycmV0dC5wcm90b3R5cGUuY29udmVydCA9IGJhcnJldHRDb252ZXJ0XG5CYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQgPSBiYXJyZXR0UmV2ZXJ0XG5CYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlXG5CYXJyZXR0LnByb3RvdHlwZS5tdWxUbyA9IGJhcnJldHRNdWxUb1xuQmFycmV0dC5wcm90b3R5cGUuc3FyVG8gPSBiYXJyZXR0U3FyVG9cblxuLy8gKHB1YmxpYykgdGhpc15lICUgbSAoSEFDIDE0Ljg1KVxuZnVuY3Rpb24gYm5Nb2RQb3coZSwgbSkge1xuICB2YXIgaSA9IGUuYml0TGVuZ3RoKCksXG4gICAgaywgciA9IG5idigxKSxcbiAgICB6XG4gIGlmIChpIDw9IDApIHJldHVybiByXG4gIGVsc2UgaWYgKGkgPCAxOCkgayA9IDFcbiAgZWxzZSBpZiAoaSA8IDQ4KSBrID0gM1xuICBlbHNlIGlmIChpIDwgMTQ0KSBrID0gNFxuICBlbHNlIGlmIChpIDwgNzY4KSBrID0gNVxuICBlbHNlIGsgPSA2XG4gIGlmIChpIDwgOClcbiAgICB6ID0gbmV3IENsYXNzaWMobSlcbiAgZWxzZSBpZiAobS5pc0V2ZW4oKSlcbiAgICB6ID0gbmV3IEJhcnJldHQobSlcbiAgZWxzZVxuICAgIHogPSBuZXcgTW9udGdvbWVyeShtKVxuXG4gIC8vIHByZWNvbXB1dGF0aW9uXG4gIHZhciBnID0gbmV3IEFycmF5KCksXG4gICAgbiA9IDMsXG4gICAgazEgPSBrIC0gMSxcbiAgICBrbSA9ICgxIDw8IGspIC0gMVxuICBnWzFdID0gei5jb252ZXJ0KHRoaXMpXG4gIGlmIChrID4gMSkge1xuICAgIHZhciBnMiA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgICB6LnNxclRvKGdbMV0sIGcyKVxuICAgIHdoaWxlIChuIDw9IGttKSB7XG4gICAgICBnW25dID0gbmV3IEJpZ0ludGVnZXIoKVxuICAgICAgei5tdWxUbyhnMiwgZ1tuIC0gMl0sIGdbbl0pXG4gICAgICBuICs9IDJcbiAgICB9XG4gIH1cblxuICB2YXIgaiA9IGUudCAtIDEsXG4gICAgdywgaXMxID0gdHJ1ZSxcbiAgICByMiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgdFxuICBpID0gbmJpdHMoZVtqXSkgLSAxXG4gIHdoaWxlIChqID49IDApIHtcbiAgICBpZiAoaSA+PSBrMSkgdyA9IChlW2pdID4+IChpIC0gazEpKSAmIGttXG4gICAgZWxzZSB7XG4gICAgICB3ID0gKGVbal0gJiAoKDEgPDwgKGkgKyAxKSkgLSAxKSkgPDwgKGsxIC0gaSlcbiAgICAgIGlmIChqID4gMCkgdyB8PSBlW2ogLSAxXSA+PiAodGhpcy5EQiArIGkgLSBrMSlcbiAgICB9XG5cbiAgICBuID0ga1xuICAgIHdoaWxlICgodyAmIDEpID09IDApIHtcbiAgICAgIHcgPj49IDFcbiAgICAgIC0tblxuICAgIH1cbiAgICBpZiAoKGkgLT0gbikgPCAwKSB7XG4gICAgICBpICs9IHRoaXMuREJcbiAgICAgIC0talxuICAgIH1cbiAgICBpZiAoaXMxKSB7IC8vIHJldCA9PSAxLCBkb24ndCBib3RoZXIgc3F1YXJpbmcgb3IgbXVsdGlwbHlpbmcgaXRcbiAgICAgIGdbd10uY29weVRvKHIpXG4gICAgICBpczEgPSBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAobiA+IDEpIHtcbiAgICAgICAgei5zcXJUbyhyLCByMilcbiAgICAgICAgei5zcXJUbyhyMiwgcilcbiAgICAgICAgbiAtPSAyXG4gICAgICB9XG4gICAgICBpZiAobiA+IDApIHouc3FyVG8ociwgcjIpXG4gICAgICBlbHNlIHtcbiAgICAgICAgdCA9IHJcbiAgICAgICAgciA9IHIyXG4gICAgICAgIHIyID0gdFxuICAgICAgfVxuICAgICAgei5tdWxUbyhyMiwgZ1t3XSwgcilcbiAgICB9XG5cbiAgICB3aGlsZSAoaiA+PSAwICYmIChlW2pdICYgKDEgPDwgaSkpID09IDApIHtcbiAgICAgIHouc3FyVG8ociwgcjIpXG4gICAgICB0ID0gclxuICAgICAgciA9IHIyXG4gICAgICByMiA9IHRcbiAgICAgIGlmICgtLWkgPCAwKSB7XG4gICAgICAgIGkgPSB0aGlzLkRCIC0gMVxuICAgICAgICAtLWpcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpXG59XG5cbi8vIChwdWJsaWMpIGdjZCh0aGlzLGEpIChIQUMgMTQuNTQpXG5mdW5jdGlvbiBibkdDRChhKSB7XG4gIHZhciB4ID0gKHRoaXMucyA8IDApID8gdGhpcy5uZWdhdGUoKSA6IHRoaXMuY2xvbmUoKVxuICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKClcbiAgaWYgKHguY29tcGFyZVRvKHkpIDwgMCkge1xuICAgIHZhciB0ID0geFxuICAgIHggPSB5XG4gICAgeSA9IHRcbiAgfVxuICB2YXIgaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCksXG4gICAgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KClcbiAgaWYgKGcgPCAwKSByZXR1cm4geFxuICBpZiAoaSA8IGcpIGcgPSBpXG4gIGlmIChnID4gMCkge1xuICAgIHguclNoaWZ0VG8oZywgeClcbiAgICB5LnJTaGlmdFRvKGcsIHkpXG4gIH1cbiAgd2hpbGUgKHguc2lnbnVtKCkgPiAwKSB7XG4gICAgaWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB4LnJTaGlmdFRvKGksIHgpXG4gICAgaWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGksIHkpXG4gICAgaWYgKHguY29tcGFyZVRvKHkpID49IDApIHtcbiAgICAgIHguc3ViVG8oeSwgeClcbiAgICAgIHguclNoaWZ0VG8oMSwgeClcbiAgICB9IGVsc2Uge1xuICAgICAgeS5zdWJUbyh4LCB5KVxuICAgICAgeS5yU2hpZnRUbygxLCB5KVxuICAgIH1cbiAgfVxuICBpZiAoZyA+IDApIHkubFNoaWZ0VG8oZywgeSlcbiAgcmV0dXJuIHlcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyAlIG4sIG4gPCAyXjI2XG5mdW5jdGlvbiBibnBNb2RJbnQobikge1xuICBpZiAobiA8PSAwKSByZXR1cm4gMFxuICB2YXIgZCA9IHRoaXMuRFYgJSBuLFxuICAgIHIgPSAodGhpcy5zIDwgMCkgPyBuIC0gMSA6IDBcbiAgaWYgKHRoaXMudCA+IDApXG4gICAgaWYgKGQgPT0gMCkgciA9IHRoaXNbMF0gJSBuXG4gICAgZWxzZVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByID0gKGQgKiByICsgdGhpc1tpXSkgJSBuXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcbmZ1bmN0aW9uIGJuTW9kSW52ZXJzZShtKSB7XG4gIHZhciBhYyA9IG0uaXNFdmVuKClcbiAgaWYgKHRoaXMuc2lnbnVtKCkgPT09IDApIHRocm93IG5ldyBFcnJvcignZGl2aXNpb24gYnkgemVybycpXG4gIGlmICgodGhpcy5pc0V2ZW4oKSAmJiBhYykgfHwgbS5zaWdudW0oKSA9PSAwKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPXG4gIHZhciB1ID0gbS5jbG9uZSgpLFxuICAgIHYgPSB0aGlzLmNsb25lKClcbiAgdmFyIGEgPSBuYnYoMSksXG4gICAgYiA9IG5idigwKSxcbiAgICBjID0gbmJ2KDApLFxuICAgIGQgPSBuYnYoMSlcbiAgd2hpbGUgKHUuc2lnbnVtKCkgIT0gMCkge1xuICAgIHdoaWxlICh1LmlzRXZlbigpKSB7XG4gICAgICB1LnJTaGlmdFRvKDEsIHUpXG4gICAgICBpZiAoYWMpIHtcbiAgICAgICAgaWYgKCFhLmlzRXZlbigpIHx8ICFiLmlzRXZlbigpKSB7XG4gICAgICAgICAgYS5hZGRUbyh0aGlzLCBhKVxuICAgICAgICAgIGIuc3ViVG8obSwgYilcbiAgICAgICAgfVxuICAgICAgICBhLnJTaGlmdFRvKDEsIGEpXG4gICAgICB9IGVsc2UgaWYgKCFiLmlzRXZlbigpKSBiLnN1YlRvKG0sIGIpXG4gICAgICBiLnJTaGlmdFRvKDEsIGIpXG4gICAgfVxuICAgIHdoaWxlICh2LmlzRXZlbigpKSB7XG4gICAgICB2LnJTaGlmdFRvKDEsIHYpXG4gICAgICBpZiAoYWMpIHtcbiAgICAgICAgaWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKSB7XG4gICAgICAgICAgYy5hZGRUbyh0aGlzLCBjKVxuICAgICAgICAgIGQuc3ViVG8obSwgZClcbiAgICAgICAgfVxuICAgICAgICBjLnJTaGlmdFRvKDEsIGMpXG4gICAgICB9IGVsc2UgaWYgKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sIGQpXG4gICAgICBkLnJTaGlmdFRvKDEsIGQpXG4gICAgfVxuICAgIGlmICh1LmNvbXBhcmVUbyh2KSA+PSAwKSB7XG4gICAgICB1LnN1YlRvKHYsIHUpXG4gICAgICBpZiAoYWMpIGEuc3ViVG8oYywgYSlcbiAgICAgIGIuc3ViVG8oZCwgYilcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zdWJUbyh1LCB2KVxuICAgICAgaWYgKGFjKSBjLnN1YlRvKGEsIGMpXG4gICAgICBkLnN1YlRvKGIsIGQpXG4gICAgfVxuICB9XG4gIGlmICh2LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCkgcmV0dXJuIEJpZ0ludGVnZXIuWkVST1xuICB3aGlsZSAoZC5jb21wYXJlVG8obSkgPj0gMCkgZC5zdWJUbyhtLCBkKVxuICB3aGlsZSAoZC5zaWdudW0oKSA8IDApIGQuYWRkVG8obSwgZClcbiAgcmV0dXJuIGRcbn1cblxudmFyIGxvd3ByaW1lcyA9IFtcbiAgMiwgMywgNSwgNywgMTEsIDEzLCAxNywgMTksIDIzLCAyOSwgMzEsIDM3LCA0MSwgNDMsIDQ3LCA1MywgNTksIDYxLCA2NywgNzEsXG4gIDczLCA3OSwgODMsIDg5LCA5NywgMTAxLCAxMDMsIDEwNywgMTA5LCAxMTMsIDEyNywgMTMxLCAxMzcsIDEzOSwgMTQ5LCAxNTEsXG4gIDE1NywgMTYzLCAxNjcsIDE3MywgMTc5LCAxODEsIDE5MSwgMTkzLCAxOTcsIDE5OSwgMjExLCAyMjMsIDIyNywgMjI5LCAyMzMsXG4gIDIzOSwgMjQxLCAyNTEsIDI1NywgMjYzLCAyNjksIDI3MSwgMjc3LCAyODEsIDI4MywgMjkzLCAzMDcsIDMxMSwgMzEzLCAzMTcsXG4gIDMzMSwgMzM3LCAzNDcsIDM0OSwgMzUzLCAzNTksIDM2NywgMzczLCAzNzksIDM4MywgMzg5LCAzOTcsIDQwMSwgNDA5LCA0MTksXG4gIDQyMSwgNDMxLCA0MzMsIDQzOSwgNDQzLCA0NDksIDQ1NywgNDYxLCA0NjMsIDQ2NywgNDc5LCA0ODcsIDQ5MSwgNDk5LCA1MDMsXG4gIDUwOSwgNTIxLCA1MjMsIDU0MSwgNTQ3LCA1NTcsIDU2MywgNTY5LCA1NzEsIDU3NywgNTg3LCA1OTMsIDU5OSwgNjAxLCA2MDcsXG4gIDYxMywgNjE3LCA2MTksIDYzMSwgNjQxLCA2NDMsIDY0NywgNjUzLCA2NTksIDY2MSwgNjczLCA2NzcsIDY4MywgNjkxLCA3MDEsXG4gIDcwOSwgNzE5LCA3MjcsIDczMywgNzM5LCA3NDMsIDc1MSwgNzU3LCA3NjEsIDc2OSwgNzczLCA3ODcsIDc5NywgODA5LCA4MTEsXG4gIDgyMSwgODIzLCA4MjcsIDgyOSwgODM5LCA4NTMsIDg1NywgODU5LCA4NjMsIDg3NywgODgxLCA4ODMsIDg4NywgOTA3LCA5MTEsXG4gIDkxOSwgOTI5LCA5MzcsIDk0MSwgOTQ3LCA5NTMsIDk2NywgOTcxLCA5NzcsIDk4MywgOTkxLCA5OTdcbl1cblxudmFyIGxwbGltID0gKDEgPDwgMjYpIC8gbG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGggLSAxXVxuXG4vLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbmZ1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKHQpIHtcbiAgdmFyIGksIHggPSB0aGlzLmFicygpXG4gIGlmICh4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbG93cHJpbWVzLmxlbmd0aDsgKytpKVxuICAgICAgaWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmICh4LmlzRXZlbigpKSByZXR1cm4gZmFsc2VcbiAgaSA9IDFcbiAgd2hpbGUgKGkgPCBsb3dwcmltZXMubGVuZ3RoKSB7XG4gICAgdmFyIG0gPSBsb3dwcmltZXNbaV0sXG4gICAgICBqID0gaSArIDFcbiAgICB3aGlsZSAoaiA8IGxvd3ByaW1lcy5sZW5ndGggJiYgbSA8IGxwbGltKSBtICo9IGxvd3ByaW1lc1tqKytdXG4gICAgbSA9IHgubW9kSW50KG0pXG4gICAgd2hpbGUgKGkgPCBqKSBpZiAobSAlIGxvd3ByaW1lc1tpKytdID09IDApIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB4Lm1pbGxlclJhYmluKHQpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRydWUgaWYgcHJvYmFibHkgcHJpbWUgKEhBQyA0LjI0LCBNaWxsZXItUmFiaW4pXG5mdW5jdGlvbiBibnBNaWxsZXJSYWJpbih0KSB7XG4gIHZhciBuMSA9IHRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpXG4gIHZhciBrID0gbjEuZ2V0TG93ZXN0U2V0Qml0KClcbiAgaWYgKGsgPD0gMCkgcmV0dXJuIGZhbHNlXG4gIHZhciByID0gbjEuc2hpZnRSaWdodChrKVxuICB0ID0gKHQgKyAxKSA+PiAxXG4gIGlmICh0ID4gbG93cHJpbWVzLmxlbmd0aCkgdCA9IGxvd3ByaW1lcy5sZW5ndGhcbiAgdmFyIGEgPSBuZXcgQmlnSW50ZWdlcihudWxsKVxuICB2YXIgaiwgYmFzZXMgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHQ7ICsraSkge1xuICAgIGZvciAoOzspIHtcbiAgICAgIGogPSBsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbG93cHJpbWVzLmxlbmd0aCldXG4gICAgICBpZiAoYmFzZXMuaW5kZXhPZihqKSA9PSAtMSkgYnJlYWtcbiAgICB9XG4gICAgYmFzZXMucHVzaChqKVxuICAgIGEuZnJvbUludChqKVxuICAgIHZhciB5ID0gYS5tb2RQb3cociwgdGhpcylcbiAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDAgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgIHZhciBqID0gMVxuICAgICAgd2hpbGUgKGorKyA8IGsgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgeSA9IHkubW9kUG93SW50KDIsIHRoaXMpXG4gICAgICAgIGlmICh5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgPT0gMCkgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZVxucHJvdG8udG9SYWRpeCA9IGJucFRvUmFkaXhcbnByb3RvLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeFxucHJvdG8uZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXJcbnByb3RvLmJpdHdpc2VUbyA9IGJucEJpdHdpc2VUb1xucHJvdG8uY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0XG5wcm90by5hZGRUbyA9IGJucEFkZFRvXG5wcm90by5kTXVsdGlwbHkgPSBibnBETXVsdGlwbHlcbnByb3RvLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0XG5wcm90by5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG9cbnByb3RvLm11bHRpcGx5VXBwZXJUbyA9IGJucE11bHRpcGx5VXBwZXJUb1xucHJvdG8ubW9kSW50ID0gYm5wTW9kSW50XG5wcm90by5taWxsZXJSYWJpbiA9IGJucE1pbGxlclJhYmluXG5cbi8vIHB1YmxpY1xucHJvdG8uY2xvbmUgPSBibkNsb25lXG5wcm90by5pbnRWYWx1ZSA9IGJuSW50VmFsdWVcbnByb3RvLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlXG5wcm90by5zaG9ydFZhbHVlID0gYm5TaG9ydFZhbHVlXG5wcm90by5zaWdudW0gPSBiblNpZ051bVxucHJvdG8udG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5XG5wcm90by5lcXVhbHMgPSBibkVxdWFsc1xucHJvdG8ubWluID0gYm5NaW5cbnByb3RvLm1heCA9IGJuTWF4XG5wcm90by5hbmQgPSBibkFuZFxucHJvdG8ub3IgPSBibk9yXG5wcm90by54b3IgPSBiblhvclxucHJvdG8uYW5kTm90ID0gYm5BbmROb3RcbnByb3RvLm5vdCA9IGJuTm90XG5wcm90by5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdFxucHJvdG8uc2hpZnRSaWdodCA9IGJuU2hpZnRSaWdodFxucHJvdG8uZ2V0TG93ZXN0U2V0Qml0ID0gYm5HZXRMb3dlc3RTZXRCaXRcbnByb3RvLmJpdENvdW50ID0gYm5CaXRDb3VudFxucHJvdG8udGVzdEJpdCA9IGJuVGVzdEJpdFxucHJvdG8uc2V0Qml0ID0gYm5TZXRCaXRcbnByb3RvLmNsZWFyQml0ID0gYm5DbGVhckJpdFxucHJvdG8uZmxpcEJpdCA9IGJuRmxpcEJpdFxucHJvdG8uYWRkID0gYm5BZGRcbnByb3RvLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdFxucHJvdG8ubXVsdGlwbHkgPSBibk11bHRpcGx5XG5wcm90by5kaXZpZGUgPSBibkRpdmlkZVxucHJvdG8ucmVtYWluZGVyID0gYm5SZW1haW5kZXJcbnByb3RvLmRpdmlkZUFuZFJlbWFpbmRlciA9IGJuRGl2aWRlQW5kUmVtYWluZGVyXG5wcm90by5tb2RQb3cgPSBibk1vZFBvd1xucHJvdG8ubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZVxucHJvdG8ucG93ID0gYm5Qb3dcbnByb3RvLmdjZCA9IGJuR0NEXG5wcm90by5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZVxuXG4vLyBKU0JOLXNwZWNpZmljIGV4dGVuc2lvblxucHJvdG8uc3F1YXJlID0gYm5TcXVhcmVcblxuLy8gY29uc3RhbnRzXG5CaWdJbnRlZ2VyLlpFUk8gPSBuYnYoMClcbkJpZ0ludGVnZXIuT05FID0gbmJ2KDEpXG5CaWdJbnRlZ2VyLnZhbHVlT2YgPSBuYnZcblxubW9kdWxlLmV4cG9ydHMgPSBCaWdJbnRlZ2VyXG4iLCJ2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpXG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKVxuXG5mdW5jdGlvbiBDdXJ2ZSAocCwgYSwgYiwgR3gsIEd5LCBuLCBoKSB7XG4gIHRoaXMucCA9IHBcbiAgdGhpcy5hID0gYVxuICB0aGlzLmIgPSBiXG4gIHRoaXMuRyA9IFBvaW50LmZyb21BZmZpbmUodGhpcywgR3gsIEd5KVxuICB0aGlzLm4gPSBuXG4gIHRoaXMuaCA9IGhcblxuICB0aGlzLmluZmluaXR5ID0gbmV3IFBvaW50KHRoaXMsIG51bGwsIG51bGwsIEJpZ0ludGVnZXIuWkVSTylcblxuICAvLyByZXN1bHQgY2FjaGluZ1xuICB0aGlzLnBPdmVyRm91ciA9IHAuYWRkKEJpZ0ludGVnZXIuT05FKS5zaGlmdFJpZ2h0KDIpXG5cbiAgLy8gZGV0ZXJtaW5lIHNpemUgb2YgcCBpbiBieXRlc1xuICB0aGlzLnBMZW5ndGggPSBNYXRoLmZsb29yKCh0aGlzLnAuYml0TGVuZ3RoKCkgKyA3KSAvIDgpXG59XG5cbkN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gKGlzT2RkLCB4KSB7XG4gIHZhciBhbHBoYSA9IHgucG93KDMpLmFkZCh0aGlzLmEubXVsdGlwbHkoeCkpLmFkZCh0aGlzLmIpLm1vZCh0aGlzLnApXG4gIHZhciBiZXRhID0gYWxwaGEubW9kUG93KHRoaXMucE92ZXJGb3VyLCB0aGlzLnApIC8vIFhYWDogbm90IGNvbXBhdGlibGUgd2l0aCBhbGwgY3VydmVzXG5cbiAgdmFyIHkgPSBiZXRhXG4gIGlmIChiZXRhLmlzRXZlbigpIF4gIWlzT2RkKSB7XG4gICAgeSA9IHRoaXMucC5zdWJ0cmFjdCh5KSAvLyAteSAlIHBcbiAgfVxuXG4gIHJldHVybiBQb2ludC5mcm9tQWZmaW5lKHRoaXMsIHgsIHkpXG59XG5cbkN1cnZlLnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gKFEpIHtcbiAgaWYgKFEgPT09IHRoaXMuaW5maW5pdHkpIHJldHVybiB0cnVlXG5cbiAgcmV0dXJuIFEuei5zaWdudW0oKSA9PT0gMCAmJiBRLnkuc2lnbnVtKCkgIT09IDBcbn1cblxuQ3VydmUucHJvdG90eXBlLmlzT25DdXJ2ZSA9IGZ1bmN0aW9uIChRKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoUSkpIHJldHVybiB0cnVlXG5cbiAgdmFyIHggPSBRLmFmZmluZVhcbiAgdmFyIHkgPSBRLmFmZmluZVlcbiAgdmFyIGEgPSB0aGlzLmFcbiAgdmFyIGIgPSB0aGlzLmJcbiAgdmFyIHAgPSB0aGlzLnBcblxuICAvLyBDaGVjayB0aGF0IHhRIGFuZCB5USBhcmUgaW50ZWdlcnMgaW4gdGhlIGludGVydmFsIFswLCBwIC0gMV1cbiAgaWYgKHguc2lnbnVtKCkgPCAwIHx8IHguY29tcGFyZVRvKHApID49IDApIHJldHVybiBmYWxzZVxuICBpZiAoeS5zaWdudW0oKSA8IDAgfHwgeS5jb21wYXJlVG8ocCkgPj0gMCkgcmV0dXJuIGZhbHNlXG5cbiAgLy8gYW5kIGNoZWNrIHRoYXQgeV4yID0geF4zICsgYXggKyBiIChtb2QgcClcbiAgdmFyIGxocyA9IHkuc3F1YXJlKCkubW9kKHApXG4gIHZhciByaHMgPSB4LnBvdygzKS5hZGQoYS5tdWx0aXBseSh4KSkuYWRkKGIpLm1vZChwKVxuICByZXR1cm4gbGhzLmVxdWFscyhyaHMpXG59XG5cbi8qKlxuICogVmFsaWRhdGUgYW4gZWxsaXB0aWMgY3VydmUgcG9pbnQuXG4gKlxuICogU2VlIFNFQyAxLCBzZWN0aW9uIDMuMi4yLjE6IEVsbGlwdGljIEN1cnZlIFB1YmxpYyBLZXkgVmFsaWRhdGlvbiBQcmltaXRpdmVcbiAqL1xuQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKFEpIHtcbiAgLy8gQ2hlY2sgUSAhPSBPXG4gIGFzc2VydCghdGhpcy5pc0luZmluaXR5KFEpLCAnUG9pbnQgaXMgYXQgaW5maW5pdHknKVxuICBhc3NlcnQodGhpcy5pc09uQ3VydmUoUSksICdQb2ludCBpcyBub3Qgb24gdGhlIGN1cnZlJylcblxuICAvLyBDaGVjayBuUSA9IE8gKHdoZXJlIFEgaXMgYSBzY2FsYXIgbXVsdGlwbGUgb2YgRylcbiAgdmFyIG5RID0gUS5tdWx0aXBseSh0aGlzLm4pXG4gIGFzc2VydCh0aGlzLmlzSW5maW5pdHkoblEpLCAnUG9pbnQgaXMgbm90IGEgc2NhbGFyIG11bHRpcGxlIG9mIEcnKVxuXG4gIHJldHVybiB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3VydmVcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXVxudmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd29yZHMgPSBBUlJBWTE2XG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgd29yZHNbal0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShqICogNClcblxuICB2YXIgYWwgPSB0aGlzLl9hIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9iIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lIHwgMFxuXG4gIHZhciBhciA9IHRoaXMuX2EgfCAwXG4gIHZhciBiciA9IHRoaXMuX2IgfCAwXG4gIHZhciBjciA9IHRoaXMuX2MgfCAwXG4gIHZhciBkciA9IHRoaXMuX2QgfCAwXG4gIHZhciBlciA9IHRoaXMuX2UgfCAwXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdmFyIHRsXG4gICAgdmFyIHRyXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdGwgPSBmbjEoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzBdLCBzbFtpXSlcbiAgICAgIHRyID0gZm41KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclswXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0bCA9IGZuMyhhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMl0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzJdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdGwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzNdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4yKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclszXSwgc3JbaV0pXG4gICAgfSBlbHNlIHsgLy8gaWYgKGk8ODApIHtcbiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKVxuICAgIH1cblxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0bFxuXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRyXG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9lLCAxNilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm4xIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4yIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjMgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiIHwgKH5jKSkgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNCAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm41IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gKGMgfCAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJJUEVNRDE2MFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2doLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oaCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgZWNkc2EgPSByZXF1aXJlKCcuL2VjZHNhJyk7XG52YXIgaGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIGN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJykuZ2V0Q3VydmVCeU5hbWUoJ3NlY3AyNTZrMScpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJyk7XG52YXIga2V5VXRpbHMgPSByZXF1aXJlKCcuL2tleV91dGlscycpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoJy4va2V5X3B1YmxpYycpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL2tleV9wcml2YXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBTaWduYXR1cmUociwgcywgaSkge1xuICAgIGFzc2VydC5lcXVhbChyICE9IG51bGwsIHRydWUsICdNaXNzaW5nIHBhcmFtZXRlcicpO1xuICAgIGFzc2VydC5lcXVhbChzICE9IG51bGwsIHRydWUsICdNaXNzaW5nIHBhcmFtZXRlcicpO1xuICAgIGFzc2VydC5lcXVhbChpICE9IG51bGwsIHRydWUsICdNaXNzaW5nIHBhcmFtZXRlcicpO1xuXG4gICAgLyoqXG4gICAgICAgIFZlcmlmeSBzaWduZWQgZGF0YS5cbiAgICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGEgLSBmdWxsIGRhdGFcbiAgICAgICAgQGFyZyB7cHVia2V5fFB1YmxpY0tleX0gcHVia2V5IC0gRU9TS2V5Li5cbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAndXRmOCddIC0gZGF0YSBlbmNvZGluZyAoaWYgZGF0YSBpcyBhIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgKi9cbiAgICBmdW5jdGlvbiB2ZXJpZnkoZGF0YSwgcHVia2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ3V0ZjgnO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSwgJ2RhdGEgaXMgYSByZXF1aXJlZCBTdHJpbmcgb3IgQnVmZmVyJyk7XG4gICAgICAgIGRhdGEgPSBoYXNoLnNoYTI1NihkYXRhKTtcbiAgICAgICAgcmV0dXJuIHZlcmlmeUhhc2goZGF0YSwgcHVia2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICAgVmVyaWZ5IGEgYnVmZmVyIG9mIGV4YWN0YWxseSAzMiBieXRlcyBpbiBzaXplIChzaGEyNTYodGV4dCkpXG4gICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBkYXRhU2hhMjU2IC0gMzIgYnl0ZSBidWZmZXIgb3Igc3RyaW5nXG4gICAgICAgIEBhcmcge1N0cmluZ3xQdWJsaWNLZXl9IHB1YmtleSAtIEVPU0tleS4uXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7Ym9vbGVhbn1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeUhhc2goZGF0YVNoYTI1NiwgcHVia2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2hleCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhU2hhMjU2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YVNoYTI1NiA9IEJ1ZmZlci5mcm9tKGRhdGFTaGEyNTYsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVNoYTI1Ni5sZW5ndGggIT09IDMyIHx8ICFCdWZmZXIuaXNCdWZmZXIoZGF0YVNoYTI1NikpIHRocm93IG5ldyBFcnJvcihcImRhdGFTaGEyNTY6IDMyIGJ5dGVzIHJlcXVpcmVkXCIpO1xuXG4gICAgICAgIHZhciBwdWJsaWNLZXkgPSBQdWJsaWNLZXkocHVia2V5KTtcbiAgICAgICAgYXNzZXJ0KHB1YmxpY0tleSwgJ3B1YmtleSByZXF1aXJlZCcpO1xuXG4gICAgICAgIHJldHVybiBlY2RzYS52ZXJpZnkoY3VydmUsIGRhdGFTaGEyNTYsIHsgcjogciwgczogcyB9LCBwdWJsaWNLZXkuUSk7XG4gICAgfTtcblxuICAgIC8qKiBAZGVwcmVjYXRlZFxuICAgICAgICAgVmVyaWZ5IGhleCBkYXRhIGJ5IGNvbnZlcnRpbmcgdG8gYSBidWZmZXIgdGhlbiBoYXNoaW5nLlxuICAgICAgICAgQHJldHVybiB7Ym9vbGVhbn1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeUhleChoZXgsIHB1YmtleSkge1xuICAgICAgICBjb25zb2xlLmxvZygnRGVwcmVjYXRlZDogdXNlIHZlcmlmeShkYXRhLCBwdWJrZXksIFwiaGV4XCIpJyk7XG5cbiAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKGhleCwgJ2hleCcpO1xuICAgICAgICByZXR1cm4gdmVyaWZ5KGJ1ZiwgcHVia2V5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgIFJlY292ZXIgdGhlIHB1YmxpYyBrZXkgdXNlZCB0byBjcmVhdGUgdGhpcyBzaWduYXR1cmUgdXNpbmcgZnVsbCBkYXRhLlxuICAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGZ1bGwgZGF0YVxuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICd1dGY4J10gLSBkYXRhIGVuY29kaW5nIChpZiBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtQdWJsaWNLZXl9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZWNvdmVyKGRhdGEpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndXRmOCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGRhdGEpLCAnZGF0YSBpcyBhIHJlcXVpcmVkIFN0cmluZyBvciBCdWZmZXInKTtcbiAgICAgICAgZGF0YSA9IGhhc2guc2hhMjU2KGRhdGEpO1xuXG4gICAgICAgIHJldHVybiByZWNvdmVySGFzaChkYXRhKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGFTaGEyNTYgLSBzaGEyNTYgaGFzaCAzMiBieXRlIGJ1ZmZlciBvciBoZXggc3RyaW5nXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7UHVibGljS2V5fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVjb3Zlckhhc2goZGF0YVNoYTI1Nikge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdoZXgnO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVNoYTI1NiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRhdGFTaGEyNTYgPSBCdWZmZXIuZnJvbShkYXRhU2hhMjU2LCBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFTaGEyNTYubGVuZ3RoICE9PSAzMiB8fCAhQnVmZmVyLmlzQnVmZmVyKGRhdGFTaGEyNTYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkYXRhU2hhMjU2OiAzMiBieXRlIFN0cmluZyBvciBidWZmZXIgcmVxdXJlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGRhdGFTaGEyNTYpO1xuICAgICAgICB2YXIgaTIgPSBpO1xuICAgICAgICBpMiAtPSAyNztcbiAgICAgICAgaTIgPSBpMiAmIDM7XG4gICAgICAgIHZhciBRID0gZWNkc2EucmVjb3ZlclB1YktleShjdXJ2ZSwgZSwgeyByOiByLCBzOiBzLCBpOiBpIH0sIGkyKTtcbiAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tUG9pbnQoUSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRvQnVmZmVyKCkge1xuICAgICAgICB2YXIgYnVmO1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyKDY1KTtcbiAgICAgICAgYnVmLndyaXRlVUludDgoaSwgMCk7XG4gICAgICAgIHIudG9CdWZmZXIoMzIpLmNvcHkoYnVmLCAxKTtcbiAgICAgICAgcy50b0J1ZmZlcigzMikuY29weShidWYsIDMzKTtcbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIH07XG5cbiAgICB2YXIgc2lnbmF0dXJlQ2FjaGUgPSB2b2lkIDA7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgaWYgKHNpZ25hdHVyZUNhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbmF0dXJlQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgc2lnbmF0dXJlQ2FjaGUgPSAnU0lHX0sxXycgKyBrZXlVdGlscy5jaGVja0VuY29kZSh0b0J1ZmZlcigpLCAnSzEnKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZUNhY2hlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHI6IHIsIHM6IHMsIGk6IGksXG4gICAgICAgIHRvQnVmZmVyOiB0b0J1ZmZlcixcbiAgICAgICAgdmVyaWZ5OiB2ZXJpZnksXG4gICAgICAgIHZlcmlmeUhhc2g6IHZlcmlmeUhhc2gsXG4gICAgICAgIHZlcmlmeUhleDogdmVyaWZ5SGV4LCAvLyBkZXByZWNhdGVkXG4gICAgICAgIHJlY292ZXI6IHJlY292ZXIsXG4gICAgICAgIHJlY292ZXJIYXNoOiByZWNvdmVySGFzaCxcbiAgICAgICAgdG9IZXg6IHRvSGV4LFxuICAgICAgICB0b1N0cmluZzogdG9TdHJpbmcsXG5cbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSB2ZXJpZnkgKHNhbWUgYXJndW1lbnRzIGFuZCByZXR1cm4pICovXG4gICAgICAgIHZlcmlmeUJ1ZmZlcjogZnVuY3Rpb24gdmVyaWZ5QnVmZmVyKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlcHJlY2F0ZWQ6IHVzZSBzaWduYXR1cmUudmVyaWZ5IGluc3RlYWQgKHNhbWUgYXJndW1lbnRzKScpO1xuICAgICAgICAgICAgcmV0dXJuIHZlcmlmeS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSByZWNvdmVyIChzYW1lIGFyZ3VtZW50cyBhbmQgcmV0dXJuKSAqL1xuICAgICAgICByZWNvdmVyUHVibGljS2V5OiBmdW5jdGlvbiByZWNvdmVyUHVibGljS2V5KCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlcHJlY2F0ZWQ6IHVzZSBzaWduYXR1cmUucmVjb3ZlciBpbnN0ZWFkIChzYW1lIGFyZ3VtZW50cyknKTtcbiAgICAgICAgICAgIHJldHVybiByZWNvdmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHJlY292ZXJIYXNoIChzYW1lIGFyZ3VtZW50cyBhbmQgcmV0dXJuKSAqL1xuICAgICAgICByZWNvdmVyUHVibGljS2V5RnJvbUJ1ZmZlcjogZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleUZyb21CdWZmZXIoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVwcmVjYXRlZDogdXNlIHNpZ25hdHVyZS5yZWNvdmVySGFzaCBpbnN0ZWFkIChzYW1lIGFyZ3VtZW50cyknKTtcbiAgICAgICAgICAgIHJldHVybiByZWNvdmVySGFzaC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKipcbiAgICBIYXNoIGFuZCBzaWduIGFyYml0cmFyeSBkYXRhLlxuXG4gICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGZ1bGwgZGF0YVxuICAgIEBhcmcge3dpZnxQcml2YXRlS2V5fSBwcml2YXRlS2V5XG4gICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAndXRmOCddIC0gZGF0YSBlbmNvZGluZyAoaWYgc3RyaW5nKVxuXG4gICAgQHJldHVybiB7U2lnbmF0dXJlfVxuKi9cblNpZ25hdHVyZS5zaWduID0gZnVuY3Rpb24gKGRhdGEsIHByaXZhdGVLZXkpIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICd1dGY4JztcblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTtcbiAgICB9XG4gICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSwgJ2RhdGEgaXMgYSByZXF1aXJlZCBTdHJpbmcgb3IgQnVmZmVyJyk7XG4gICAgZGF0YSA9IGhhc2guc2hhMjU2KGRhdGEpO1xuICAgIHJldHVybiBTaWduYXR1cmUuc2lnbkhhc2goZGF0YSwgcHJpdmF0ZUtleSk7XG59O1xuXG4vKipcbiAgICBTaWduIGEgYnVmZmVyIG9mIGV4YWN0YWxseSAzMiBieXRlcyBpbiBzaXplIChzaGEyNTYodGV4dCkpXG5cbiAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhU2hhMjU2IC0gMzIgYnl0ZSBidWZmZXIgb3Igc3RyaW5nXG4gICAgQGFyZyB7d2lmfFByaXZhdGVLZXl9IHByaXZhdGVLZXlcbiAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICdoZXgnXSAtIGRhdGFTaGEyNTYgZW5jb2RpbmcgKGlmIHN0cmluZylcblxuICAgIEByZXR1cm4ge1NpZ25hdHVyZX1cbiovXG5TaWduYXR1cmUuc2lnbkhhc2ggPSBmdW5jdGlvbiAoZGF0YVNoYTI1NiwgcHJpdmF0ZUtleSkge1xuICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2hleCc7XG5cbiAgICBpZiAodHlwZW9mIGRhdGFTaGEyNTYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGFTaGEyNTYgPSBCdWZmZXIuZnJvbShkYXRhU2hhMjU2LCBlbmNvZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXRhU2hhMjU2Lmxlbmd0aCAhPT0gMzIgfHwgIUJ1ZmZlci5pc0J1ZmZlcihkYXRhU2hhMjU2KSkgdGhyb3cgbmV3IEVycm9yKFwiZGF0YVNoYTI1NjogMzIgYnl0ZSBidWZmZXIgcmVxdXJlZFwiKTtcblxuICAgIHByaXZhdGVLZXkgPSBQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xuICAgIGFzc2VydChwcml2YXRlS2V5LCAncHJpdmF0ZUtleSByZXF1aXJlZCcpO1xuXG4gICAgdmFyIGRlciwgZSwgZWNzaWduYXR1cmUsIGksIGxlblIsIGxlblMsIG5vbmNlO1xuICAgIGkgPSBudWxsO1xuICAgIG5vbmNlID0gMDtcbiAgICBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGRhdGFTaGEyNTYpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGVjc2lnbmF0dXJlID0gZWNkc2Euc2lnbihjdXJ2ZSwgZGF0YVNoYTI1NiwgcHJpdmF0ZUtleS5kLCBub25jZSsrKTtcbiAgICAgICAgZGVyID0gZWNzaWduYXR1cmUudG9ERVIoKTtcbiAgICAgICAgbGVuUiA9IGRlclszXTtcbiAgICAgICAgbGVuUyA9IGRlcls1ICsgbGVuUl07XG4gICAgICAgIGlmIChsZW5SID09PSAzMiAmJiBsZW5TID09PSAzMikge1xuICAgICAgICAgICAgaSA9IGVjZHNhLmNhbGNQdWJLZXlSZWNvdmVyeVBhcmFtKGN1cnZlLCBlLCBlY3NpZ25hdHVyZSwgcHJpdmF0ZUtleS50b1B1YmxpYygpLlEpO1xuICAgICAgICAgICAgaSArPSA0OyAvLyBjb21wcmVzc2VkXG4gICAgICAgICAgICBpICs9IDI3OyAvLyBjb21wYWN0ICAvLyAgMjQgb3IgMjcgOiggZm9yY2luZyBvZGQteSAybmQga2V5IGNhbmRpZGF0ZSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub25jZSAlIDEwID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldBUk46IFwiICsgbm9uY2UgKyBcIiBhdHRlbXB0cyB0byBmaW5kIGNhbm9uaWNhbCBzaWduYXR1cmVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFNpZ25hdHVyZShlY3NpZ25hdHVyZS5yLCBlY3NpZ25hdHVyZS5zLCBpKTtcbn07XG5cblNpZ25hdHVyZS5mcm9tQnVmZmVyID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIHZhciBpLCByLCBzO1xuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIoYnVmKSwgJ0J1ZmZlciBpcyByZXF1aXJlZCcpO1xuICAgIGFzc2VydC5lcXVhbChidWYubGVuZ3RoLCA2NSwgJ0ludmFsaWQgc2lnbmF0dXJlIGxlbmd0aCcpO1xuICAgIGkgPSBidWYucmVhZFVJbnQ4KDApO1xuICAgIGFzc2VydC5lcXVhbChpIC0gMjcsIGkgLSAyNyAmIDcsICdJbnZhbGlkIHNpZ25hdHVyZSBwYXJhbWV0ZXInKTtcbiAgICByID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1Zi5zbGljZSgxLCAzMykpO1xuICAgIHMgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmLnNsaWNlKDMzKSk7XG4gICAgcmV0dXJuIFNpZ25hdHVyZShyLCBzLCBpKTtcbn07XG5cblNpZ25hdHVyZS5mcm9tSGV4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHJldHVybiBTaWduYXR1cmUuZnJvbUJ1ZmZlcihCdWZmZXIuZnJvbShoZXgsIFwiaGV4XCIpKTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gc2lnbmF0dXJlIC0gbGlrZSBTSUdfSzFfYmFzZTU4c2lnbmF0dXJlLi5cbiAgICBAcmV0dXJuIHtTaWduYXR1cmV9IG9yIGBudWxsYCAoaW52YWxpZClcbiovXG5TaWduYXR1cmUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21TdHJpbmdPclRocm93KHNpZ25hdHVyZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAgICBAYXJnIHtzdHJpbmd9IHNpZ25hdHVyZSAtIGxpa2UgU0lHX0sxX2Jhc2U1OHNpZ25hdHVyZS4uXG4gICAgQHRocm93cyB7RXJyb3J9IGludmFsaWRcbiAgICBAcmV0dXJuIHtTaWduYXR1cmV9XG4qL1xuU2lnbmF0dXJlLmZyb21TdHJpbmdPclRocm93ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygc2lnbmF0dXJlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzaWduYXR1cmUpLCAnc3RyaW5nJywgJ3NpZ25hdHVyZScpO1xuICAgIHZhciBtYXRjaCA9IHNpZ25hdHVyZS5tYXRjaCgvXlNJR18oW0EtWmEtejAtOV0rKV8oW0EtWmEtejAtOV0rKSQvKTtcbiAgICBhc3NlcnQobWF0Y2ggIT0gbnVsbCAmJiBtYXRjaC5sZW5ndGggPT09IDMsICdFeHBlY3Rpbmcgc2lnbmF0dXJlIGxpa2U6IFNJR19LMV9iYXNlNThzaWduYXR1cmUuLicpO1xuXG4gICAgdmFyIF9tYXRjaCA9IF9zbGljZWRUb0FycmF5KG1hdGNoLCAzKSxcbiAgICAgICAga2V5VHlwZSA9IF9tYXRjaFsxXSxcbiAgICAgICAga2V5U3RyaW5nID0gX21hdGNoWzJdO1xuXG4gICAgYXNzZXJ0LmVxdWFsKGtleVR5cGUsICdLMScsICdLMSBzaWduYXR1cmUgZXhwZWN0ZWQnKTtcbiAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG59O1xuXG4vKipcbiAgICBAYXJnIHtTdHJpbmd8U2lnbmF0dXJlfSBvIC0gaGV4IHN0cmluZ1xuICAgIEByZXR1cm4ge1NpZ25hdHVyZX1cbiovXG5TaWduYXR1cmUuZnJvbSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIHNpZ25hdHVyZSA9IG8gPyBvLnIgJiYgby5zICYmIG8uaSA/IG8gOiB0eXBlb2YgbyA9PT0gJ3N0cmluZycgJiYgby5sZW5ndGggPT09IDEzMCA/IFNpZ25hdHVyZS5mcm9tSGV4KG8pIDogdHlwZW9mIG8gPT09ICdzdHJpbmcnICYmIG8ubGVuZ3RoICE9PSAxMzAgPyBTaWduYXR1cmUuZnJvbVN0cmluZ09yVGhyb3cobykgOiBCdWZmZXIuaXNCdWZmZXIobykgPyBTaWduYXR1cmUuZnJvbUJ1ZmZlcihvKSA6IG51bGwgOiBvOyAvKm51bGwgb3IgdW5kZWZpbmVkKi9cblxuICAgIGlmICghc2lnbmF0dXJlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpZ25hdHVyZSBzaG91bGQgYmUgYSBoZXggc3RyaW5nIG9yIGJ1ZmZlcicpO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmF0dXJlO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5mb3JjZSh0eXBlLCB2YWx1ZSkge1xuICAvLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbmpzL2JpdGNvaW5qcy1saWJcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnQnVmZmVyJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdOdW1iZXInOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgaWYgKGdldE5hbWUodmFsdWUuY29uc3RydWN0b3IpID09PSBnZXROYW1lKHR5cGUpKSByZXR1cm47XG4gICAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAnICsgKGdldE5hbWUodHlwZSkgfHwgdHlwZSkgKyAnLCBnb3QgJyArIHZhbHVlKTtcbn07XG5cbmZ1bmN0aW9uIGdldE5hbWUoZm4pIHtcbiAgLy8gV2h5IG5vdCBmbi5uYW1lOiBodHRwczovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8jZnVuY3Rpb25fbmFtZV9wcm9wZXJ0eVxuICB2YXIgbWF0Y2ggPSBmbi50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvbiAoLio/KVxcKC8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IG51bGw7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBpID0gcmVxdWlyZSgnLi9hcGkvdjEnKTtcbnZhciBhcGlHZW4gPSByZXF1aXJlKCcuL2FwaWdlbicpO1xudmFyIHByb2Nlc3NBcmdzID0gcmVxdWlyZSgnLi9wcm9jZXNzLWFyZ3MnKTtcblxudmFyIEVvc0FwaSA9IGZ1bmN0aW9uIEVvc0FwaShjb25maWcpIHtcbiAgcmV0dXJuIGFwaUdlbigndjEnLCBhcGksIGNvbmZpZyk7XG59O1xuXG5PYmplY3QuYXNzaWduKEVvc0FwaSwge1xuICBwcm9jZXNzQXJnczogcHJvY2Vzc0FyZ3MsXG4gIGFwaTogYXBpLFxuXG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBUZXN0bmV0OiBmdW5jdGlvbiBUZXN0bmV0KGNvbmZpZykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2RlcHJlY2F0ZWQsIGNoYW5nZSBFb3NBcGkuVGVzdG5ldCguLikgdG8ganVzdCBFb3NBcGkoLi4pJyk7XG4gICAgcmV0dXJuIEVvc0FwaShjb25maWcpO1xuICB9LFxuXG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBMb2NhbG5ldDogZnVuY3Rpb24gTG9jYWxuZXQoY29uZmlnKSB7XG4gICAgY29uc29sZS5lcnJvcignZGVwcmVjYXRlZCwgY2hhbmdlIEVvc0FwaS5Mb2NhbG5ldCguLikgdG8ganVzdCBFb3NBcGkoLi4pJyk7XG4gICAgcmV0dXJuIEVvc0FwaShjb25maWcpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFb3NBcGk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc0FyZ3M7XG5cbi8qKlxuICBAdHlwZWRlZiB7b2JqZWN0fSBwcm9jZXNzZWRBcmdzIC0gTm9ybWFsaXplZCBvYmplY3QgY29udGFpbmluZyBhcmd1bWVudHMsIGFuZFxuICBhIGNoYWluZWQgcHJvbWlzZSBhbmQgYSBjYWxsYmFjay5cblxuICBAcHJvcGVydHkge29iamVjdH0gcGFyYW1zIC0gbm9ybWFsaXplZCBhcmdzIG9ubHksIHBhcmFtZXRlcnMgYnkgbmFtZSwgbm8gZXh0cmEgb3B0aW9ucyBvciBjYWxsYmFjay5cblxuICBAcHJvcGVydHkge29iamVjdH0gb3B0aW9ucyAtIG5vbi1udWxsIG9yIG5vbi11bmRlZmluZWQgcmV0dXJuIHZhbHVlIGZyb20gaW52b2NhdGlvbiBvZlxuICBvcHRpb25zRm9ybWF0dGVyKG9wdGlvbnNQYXJhbSkuXG5cbiAgQHByb3BlcnR5IHtmdW5jdGlvbn0gY2FsbGJhY2sgLWNoYWluZWQgdG8gb3B0aW9uYWwgY2FsbGJhY2sgcHJvdmlkZWQgaW4gYXJncy4gIFJlc29sdmVzXG4gIG9yIHJlamVjdHMgcmV0dXJuUHJvbWlzZS5cblxuICBAcHJvcGVydHkge1Byb21pc2V9IHJldHVyblByb21pc2UgLSBwcm9taXNlIGlzIHJldHVybmVkIHdoZW4gbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQgaW5cbiAgYXJnc1thcmdzLmxlbmd0aCAtIDFdLiAgVW5kZWZpbmVkIHdoZW4gYSBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiovXG4vKipcbiAgQ29udmVydCBhcmdzIGFycmF5IG9yIG9iamVjdCBpbnRvIGEgbm9ybWFsaXplZCB2YWx1ZSBvYmplY3QuICBTdXBwb29ydHMgZXh0cmFcbiAgb3B0aW9ucyBhbmQob3IpIGNhbGxiYWNrIHBhcmFtZXRlcnMuXG5cbiAgUGVyIHRoZSBQcm9taXNlIEFQSSBmZWF0dXJlIHByb21pc2lmeUFsbCAoc2VlIGFsc28gc2ItcHJvbWlzaWZ5KSwgdGhlIGNhbGxiYWNrXG4gIChpZiBwcm92aWRlZCkgbXVzdCBhbHdheXMgYmUgbGFzdC5cblxuICBAYXJnIHtBcnJheXxvYmplY3R9IGFyZ3MgLSBVc2VyLXByb3ZpZGVkIHBhcmFtZXRlciBvYmplY3Qgb3IgYXJyYXkgb2YgcGFyYW1ldGVyc1xuICBAYXJnIHtBcnJheX0gZGVmUGFyYW1zIC0gTmFtZXMgZm9yIHRoZSBwYXJhbWV0ZXJzLlxuICBAYXJnIHtzdHJpbmd9IG1ldGhvZE5hbWUgLSBmb3IgZXJyb3IgcmVwb3J0aW5nXG4gIEBhcmcge2Z1bmN0aW9ufSBbb3B0aW9uc0Zvcm1hdHRlcihleHRyYVBhcmFtKSA9IG51bGxdIC0gb3B0aW9uYWwgY2FsbGJhY2sgdXNlZCBpZiBhblxuICAgIGV4dHJhIG9wdGlvbmFsIChub24tY2FsbGJhY2spIHBhcmFtZXRlciBpcyBwcm92aWRlZC5cblxuXG4gIEByZXR1cm4ge3Byb2Nlc3NlZEFyZ3N9IHByb2Nlc3NlZEFyZ3NcbiAgQHRocm93cyBUeXBlRXJyb3IgLSB3aGVuIHBhcmFtZXRlciBjb3VudCBpcyBub3QgZXhhY3QgKGFmdGVyIGFkanVzdGluZyBmb3JcbiAgb3B0aW9ucyBhbmQgY2FsbGJhY2spXG5cbiAgQGV4YW1wbGUgYXBpLnByb2Nlc3NBcmdzKGFyZ3MsIFsnYWNjb3VudCddLCAnY29udHJhY3QnLCBvcHRpb25zRm9ybWF0dGVyKVxuKi9cbmZ1bmN0aW9uIHByb2Nlc3NBcmdzKGFyZ3MsIGRlZlBhcmFtcykge1xuICB2YXIgbWV0aG9kTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ21ldGhvZCc7XG4gIHZhciBvcHRpb25zRm9ybWF0dGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBwYXJhbXMgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICB2YXIgZXhwZWN0ZWRBcmdDb3VudCA9IGRlZlBhcmFtcy5sZW5ndGg7XG5cbiAgLy8gRXh0cmEgY2FsbGJhY2sgYXJndW1lbnQ/ICBMYXN0IHBlciBwcm9taXNpZnlBbGwgc3RhbmRhcmQuXG4gIHZhciBjYWxsYmFja0FyZyA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFja0FyZyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgdmFyIGNhbGxiYWNrID0gdm9pZCAwO1xuICB2YXIgcmV0dXJuUHJvbWlzZSA9IHZvaWQgMDtcbiAgaWYgKGNhbGxiYWNrQXJnKSB7XG4gICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFja0FyZyhlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2tBcmcobnVsbCwgcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVyblByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBMb29rIGZvciB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgKGFmdGVyIHBvdGVudGlhbCBjYWxsYmFjayB3YXMgcmVtb3ZlZClcbiAgaWYgKHR5cGVvZiBvcHRpb25zRm9ybWF0dGVyID09PSAnZnVuY3Rpb24nICYmIGFyZ3MubGVuZ3RoID4gMCAmJiAoX3R5cGVvZihhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiYgYXJncy5sZW5ndGggPT09IDIgfHwgYXJncy5sZW5ndGggPT09IGV4cGVjdGVkQXJnQ291bnQgKyAxKSkge1xuICAgIC8vQW4gZXh0cmEgb3B0aW9ucyBhcmd1bWVudFxuICAgIG9wdGlvbnMgPSBvcHRpb25zRm9ybWF0dGVyKGFyZ3NbYXJncy5sZW5ndGggLSAxXSk7XG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgLy8gSXQgaXMgdmFsaWQsIHJlbW92ZSBpdCB0byBhdm9pZCBwYXJhbWV0ZXIgY291bnQgYW4gZXJyb3IgYmVsb3dcbiAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyYW1ldGV0ZXJzIChhcmdzKSBjYW4gYmUgb3JkZXJlZCBvciBhbiBvYmplY3RcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIF90eXBlb2YoYXJnc1swXSkgPT09ICdvYmplY3QnKSB7XG4gICAgcGFyYW1zID0gYXJnc1swXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBnaXZlIG9yZGVyZWQgcGFyYW1hdGVycyBuYW1lc1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gZXhwZWN0ZWRBcmdDb3VudCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3R5cGVvZiBkZWZQYXJhbXNbZXhwZWN0ZWRBcmdDb3VudF0nLCBhcmdzKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtZXRob2ROYW1lICsgJyBpcyBleHBlY3RpbmcgJyArIGV4cGVjdGVkQXJnQ291bnQgKyAnIHBhcmFtZXRlcnMgYnV0ICcgKyBhcmdzLmxlbmd0aCArICcgd2hlcmUgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IG9yZGVyZWQgcGFyYW1ldGVycyBpbnRvIGEgdmFsdWUgb2JqZWN0IGJ5IHBhcmFtZXRlciBuYW1lXG4gICAgdmFyIHBvcyA9IDA7XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBkZWZQYXJhbXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgIHZhciBkZWZQYXJhbSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIHBhcmFtc1tkZWZQYXJhbV0gPSBhcmdzW3Bvc107XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4geyBwYXJhbXM6IHBhcmFtcywgb3B0aW9uczogb3B0aW9ucywgY2FsbGJhY2s6IGNhbGxiYWNrLCByZXR1cm5Qcm9taXNlOiByZXR1cm5Qcm9taXNlIH07XG59IiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxdWlyZSgnLi9jaGFpbl90eXBlcy5qc29uJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNjaGVtYTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkVG9BcnJheTIpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J5dGVidWZmZXInKSxcbiAgICBMb25nID0gX3JlcXVpcmUuTG9uZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVMb25nOiBVTG9uZyxcbiAgaXNOYW1lOiBpc05hbWUsXG4gIGVuY29kZU5hbWU6IGVuY29kZU5hbWUsIC8vIGVuY29kZSBodW1hbiByZWFkYWJsZSBuYW1lIHRvIHVpbnQ2NCAobnVtYmVyIHN0cmluZylcbiAgZGVjb2RlTmFtZTogZGVjb2RlTmFtZSwgLy8gZGVjb2RlIGZyb20gdWludDY0IHRvIGh1bWFuIHJlYWRhYmxlXG4gIGVuY29kZU5hbWVIZXg6IGZ1bmN0aW9uIGVuY29kZU5hbWVIZXgobmFtZSkge1xuICAgIHJldHVybiBMb25nLmZyb21TdHJpbmcoZW5jb2RlTmFtZShuYW1lKSwgdHJ1ZSkudG9TdHJpbmcoMTYpO1xuICB9LFxuICBkZWNvZGVOYW1lSGV4OiBmdW5jdGlvbiBkZWNvZGVOYW1lSGV4KGhleCkge1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgcmV0dXJuIGRlY29kZU5hbWUoTG9uZy5mcm9tU3RyaW5nKGhleCwgdHJ1ZSwgMTYpLnRvU3RyaW5nKCksIGxpdHRsZUVuZGlhbik7XG4gIH0sXG4gIERlY2ltYWxTdHJpbmc6IERlY2ltYWxTdHJpbmcsXG4gIERlY2ltYWxQYWQ6IERlY2ltYWxQYWQsXG4gIERlY2ltYWxJbXBseTogRGVjaW1hbEltcGx5LFxuICBEZWNpbWFsVW5pbXBseTogRGVjaW1hbFVuaW1wbHksXG4gIHByaW50QXNzZXQ6IHByaW50QXNzZXQsXG4gIHBhcnNlQXNzZXQ6IHBhcnNlQXNzZXRcblxuICAvKiogQHByaXZhdGUgKi9cbn07dmFyIHNpZ25lZCA9IGZ1bmN0aW9uIHNpZ25lZChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge307XG59O1xuXG5mdW5jdGlvbiBVTG9uZyh2YWx1ZSkge1xuICB2YXIgdW5zaWduZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gIHZhciByYWRpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTA7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBTb21lIEpTT04gbGlicyB1c2UgbnVtYmVycyBmb3IgdmFsdWVzIHVuZGVyIDUzIGJpdHMgb3Igc3RyaW5ncyBmb3IgbGFyZ2VyLlxuICAgIC8vIEFjY29taWRhdGUgYnV0IGRvdWJsZS1jaGVjayBpdC4uXG4gICAgaWYgKHZhbHVlID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIHBhcmFtZXRlciBvdmVyZmxvdycpO1xuXG4gICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcoU3RyaW5nKHZhbHVlKSwgdW5zaWduZWQsIHJhZGl4KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUsIHVuc2lnbmVkLCByYWRpeCk7XG4gIH0gZWxzZSBpZiAoIUxvbmcuaXNMb25nKHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIHBhcmFtZXRlciBpcyBhIHJlcXVpZWQgTG9uZywgTnVtYmVyIG9yIFN0cmluZycpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gaXNOYW1lKHN0ciwgZXJyKSB7XG4gIHRyeSB7XG4gICAgZW5jb2RlTmFtZShzdHIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGVycihlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG52YXIgY2hhcm1hcCA9ICcuMTIzNDVhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XG52YXIgY2hhcmlkeCA9IGZ1bmN0aW9uIGNoYXJpZHgoY2gpIHtcbiAgdmFyIGlkeCA9IGNoYXJtYXAuaW5kZXhPZihjaCk7XG4gIGlmIChpZHggPT09IC0xKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlcjogXFwnJyArIGNoICsgJ1xcJycpO1xuXG4gIHJldHVybiBpZHg7XG59O1xuXG4vKiogT3JpZ2luYWwgTmFtZSBlbmNvZGUgYW5kIGRlY29kZSBsb2dpYyBpcyBpbiBnaXRodWIuY29tL2Vvc2lvL2VvcyAgbmF0aXZlLmhwcCAqL1xuXG4vKipcbiAgRW5jb2RlIGEgbmFtZSAoYSBiYXNlMzIgc3RyaW5nKSB0byBhIG51bWJlci5cblxuICBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgdGhlIGJsb2NrY2hhaW4gdXNlcyB0aGUgbnVtZXJpY2FsIGVuY29kaW5nIG9mIHN0cmluZ3NcbiAgZm9yIHZlcnkgY29tbW9uIHR5cGVzIGxpa2UgYWNjb3VudCBuYW1lcy5cblxuICBAc2VlIHR5cGVzLmhwcCBzdHJpbmdfdG9fbmFtZVxuXG4gIEBhcmcge3N0cmluZ30gbmFtZSAtIEEgc3RyaW5nIHRvIGVuY29kZSwgdXAgdG8gMTIgY2hhcmFjdGVycyBsb25nLlxuICBAYXJnIHtzdHJpbmd9IFtsaXR0bGVFbmRpYW4gPSB0cnVlXSAtIExpdHRsZSBvciBCaWdlbmRpYW4gZW5jb2RpbmdcblxuICBAcmV0dXJuIHtzdHJpbmc8dWludDY0Pn0gLSBjb21wcmVzc2VkIHN0cmluZyAoZnJvbSBuYW1lIGFyZykuICBBIHN0cmluZyBpc1xuICAgIGFsd2F5cyB1c2VkIGJlY2F1c2UgYSBudW1iZXIgY291bGQgZXhjZWVkIEphdmFTY3JpcHQncyA1MiBiaXQgbGltaXQuXG4qL1xuZnVuY3Rpb24gZW5jb2RlTmFtZShuYW1lKSB7XG4gIHZhciBsaXR0bGVFbmRpYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignbmFtZSBwYXJhbWV0ZXIgaXMgYSByZXF1aXJlZCBzdHJpbmcnKTtcblxuICBpZiAobmFtZS5sZW5ndGggPiAxMikgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBuYW1lIGNhbiBiZSB1cCB0byAxMiBjaGFyYWN0ZXJzIGxvbmcnKTtcblxuICB2YXIgYml0c3RyID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IDEyOyBpKyspIHtcbiAgICAvLyBwcm9jZXNzIGFsbCA2NCBiaXRzIChldmVuIGlmIG5hbWUgaXMgc2hvcnQpXG4gICAgdmFyIGMgPSBpIDwgbmFtZS5sZW5ndGggPyBjaGFyaWR4KG5hbWVbaV0pIDogMDtcbiAgICB2YXIgYml0bGVuID0gaSA8IDEyID8gNSA6IDQ7XG4gICAgdmFyIGJpdHMgPSBOdW1iZXIoYykudG9TdHJpbmcoMik7XG4gICAgaWYgKGJpdHMubGVuZ3RoID4gYml0bGVuKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5hbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBiaXRzID0gJzAnLnJlcGVhdChiaXRsZW4gLSBiaXRzLmxlbmd0aCkgKyBiaXRzO1xuICAgIGJpdHN0ciArPSBiaXRzO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKGJpdHN0ciwgdHJ1ZSwgMik7XG5cbiAgLy8gY29udmVydCB0byBMSVRUTEVfRU5ESUFOXG4gIHZhciBsZUhleCA9ICcnO1xuICB2YXIgYnl0ZXMgPSBsaXR0bGVFbmRpYW4gPyB2YWx1ZS50b0J5dGVzTEUoKSA6IHZhbHVlLnRvQnl0ZXNCRSgpO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBieXRlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBiID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHZhciBuID0gTnVtYmVyKGIpLnRvU3RyaW5nKDE2KTtcbiAgICAgIGxlSGV4ICs9IChuLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIG47XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciB1bE5hbWUgPSBMb25nLmZyb21TdHJpbmcobGVIZXgsIHRydWUsIDE2KS50b1N0cmluZygpO1xuXG4gIC8vIGNvbnNvbGUubG9nKCdlbmNvZGVOYW1lJywgbmFtZSwgdmFsdWUudG9TdHJpbmcoKSwgdWxOYW1lLnRvU3RyaW5nKCksIEpTT04uc3RyaW5naWZ5KGJpdHN0ci5zcGxpdCgvKC4uLi4uKS8pLnNsaWNlKDEpKSlcblxuICByZXR1cm4gdWxOYW1lLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICBAYXJnIHtMb25nfFN0cmluZ3xudW1iZXJ9IHZhbHVlIHVpbnQ2NFxuICBAYXJnIHtzdHJpbmd9IFtsaXR0bGVFbmRpYW4gPSB0cnVlXSAtIExpdHRsZSBvciBCaWdlbmRpYW4gZW5jb2RpbmdcblxuICBAcmV0dXJuIHtzdHJpbmd9XG4qL1xuZnVuY3Rpb24gZGVjb2RlTmFtZSh2YWx1ZSkge1xuICB2YXIgbGl0dGxlRW5kaWFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIHZhbHVlID0gVUxvbmcodmFsdWUpO1xuXG4gIC8vIGNvbnZlcnQgZnJvbSBMSVRUTEVfRU5ESUFOXG4gIHZhciBiZUhleCA9ICcnO1xuICB2YXIgYnl0ZXMgPSBsaXR0bGVFbmRpYW4gPyB2YWx1ZS50b0J5dGVzTEUoKSA6IHZhbHVlLnRvQnl0ZXNCRSgpO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gYnl0ZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgIHZhciBiID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICB2YXIgbiA9IE51bWJlcihiKS50b1N0cmluZygxNik7XG4gICAgICBiZUhleCArPSAobi5sZW5ndGggPT09IDEgPyAnMCcgOiAnJykgKyBuO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYmVIZXggKz0gJzAnLnJlcGVhdCgxNiAtIGJlSGV4Lmxlbmd0aCk7XG5cbiAgdmFyIGZpdmVCaXRzID0gTG9uZy5mcm9tTnVtYmVyKDB4MWYsIHRydWUpO1xuICB2YXIgZm91ckJpdHMgPSBMb25nLmZyb21OdW1iZXIoMHgwZiwgdHJ1ZSk7XG4gIHZhciBiZVZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKGJlSGV4LCB0cnVlLCAxNik7XG5cbiAgdmFyIHN0ciA9ICcnO1xuICB2YXIgdG1wID0gYmVWYWx1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8PSAxMjsgaSsrKSB7XG4gICAgdmFyIGMgPSBjaGFybWFwW3RtcC5hbmQoaSA9PT0gMCA/IGZvdXJCaXRzIDogZml2ZUJpdHMpXTtcbiAgICBzdHIgPSBjICsgc3RyO1xuICAgIHRtcCA9IHRtcC5zaGlmdFJpZ2h0KGkgPT09IDAgPyA0IDogNSk7XG4gIH1cbiAgc3RyID0gc3RyLnJlcGxhY2UoL1xcLiskLywgJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgZG90cyAoYWxsIG9mIHRoZW0pXG5cbiAgLy8gY29uc29sZS5sb2coJ2RlY29kZU5hbWUnLCBzdHIsIGJlVmFsdWUudG9TdHJpbmcoKSwgdmFsdWUudG9TdHJpbmcoKSwgSlNPTi5zdHJpbmdpZnkoYmVWYWx1ZS50b1N0cmluZygyKS5zcGxpdCgvKC4uLi4uKS8pLnNsaWNlKDEpKSlcblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAgTm9ybWFsaXplIGFuZCB2YWxpZGF0ZSBkZWNpbWFsIHN0cmluZyAocG90ZW50aWFsbHkgbGFyZ2UgdmFsdWVzKS4gIFNob3VsZFxuICBhdm9pZCBpbnRlcm5hdGlvbmFsaXphdGlvbiBpc3N1ZXMgaWYgcG9zc2libGUgYnV0IHdpbGwgYmUgc2FmZSBhbmRcbiAgdGhyb3cgYW4gZXJyb3IgZm9yIGFuIGludmFsaWQgbnVtYmVyLlxuXG4gIE5vcm1hbGl6YXRpb24gcmVtb3ZlcyBleHRyYSB6ZXJvcyBvciBkZWNpbWFsLlxuXG4gIEByZXR1cm4ge3N0cmluZ30gdmFsdWVcbiovXG5mdW5jdGlvbiBEZWNpbWFsU3RyaW5nKHZhbHVlKSB7XG4gIGFzc2VydCh2YWx1ZSAhPSBudWxsLCAndmFsdWUgaXMgcmVxdWlyZWQnKTtcbiAgdmFsdWUgPSB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUudG9TdHJpbmcgPyB2YWx1ZS50b1N0cmluZygpIDogU3RyaW5nKHZhbHVlKTtcblxuICB2YXIgbmVnID0gL14tLy50ZXN0KHZhbHVlKTtcbiAgaWYgKG5lZykge1xuICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgaWYgKHZhbHVlWzBdID09PSAnLicpIHtcbiAgICB2YWx1ZSA9ICcwJyArIHZhbHVlO1xuICB9XG5cbiAgdmFyIHBhcnQgPSB2YWx1ZS5zcGxpdCgnLicpO1xuICBhc3NlcnQocGFydC5sZW5ndGggPD0gMiwgJ2ludmFsaWQgZGVjaW1hbCAnICsgdmFsdWUpO1xuICBhc3NlcnQoL15cXGQrKCw/XFxkKSpcXGQqJC8udGVzdChwYXJ0WzBdKSwgJ2ludmFsaWQgZGVjaW1hbCAnICsgdmFsdWUpO1xuXG4gIGlmIChwYXJ0Lmxlbmd0aCA9PT0gMikge1xuICAgIGFzc2VydCgvXlxcZCokLy50ZXN0KHBhcnRbMV0pLCAnaW52YWxpZCBkZWNpbWFsICcgKyB2YWx1ZSk7XG4gICAgcGFydFsxXSA9IHBhcnRbMV0ucmVwbGFjZSgvMCskLywgJycpOyAvLyByZW1vdmUgc3VmZml4aW5nIHplcm9zXG4gICAgaWYgKHBhcnRbMV0gPT09ICcnKSB7XG4gICAgICBwYXJ0LnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnRbMF0gPSBwYXJ0WzBdLnJlcGxhY2UoL14wKi8sICcnKTsgLy8gcmVtb3ZlIGxlYWRpbmcgemVyb3NcbiAgaWYgKHBhcnRbMF0gPT09ICcnKSB7XG4gICAgcGFydFswXSA9ICcwJztcbiAgfVxuICByZXR1cm4gKG5lZyA/ICctJyA6ICcnKSArIHBhcnQuam9pbignLicpO1xufVxuXG4vKipcbiAgRW5zdXJlIGEgZml4ZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLiAgU2FmZSBmb3IgbGFyZ2UgbnVtYmVycy5cblxuICBAc2VlIC4vZm9ybWF0LnRlc3QuanNcblxuICBAZXhhbXBsZSBEZWNpbWFsUGFkKDEwLjIsIDMpID09PSAnMTAuMjAwJ1xuXG4gIEBhcmcge251bWJlcnxzdHJpbmd8b2JqZWN0LnRvU3RyaW5nfSBudW1cbiAgQGFyZyB7bnVtYmVyfSBbcHJlY2lzaW9uID0gbnVsbF0gLSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMuICBOdWxsIHNraXBzXG4gICAgcGFkZGluZyBzdWZmaXggYnV0IHN0aWxsIGFwcGxpZXMgbnVtYmVyIGZvcm1hdCBub3JtYWxpemF0aW9uLlxuICBAcmV0dXJuIHtzdHJpbmd9IGRlY2ltYWwgcGFydCBpcyBhZGRlZCBhbmQgemVybyBwYWRkZWQgdG8gbWF0Y2ggcHJlY2lzaW9uXG4qL1xuZnVuY3Rpb24gRGVjaW1hbFBhZChudW0sIHByZWNpc2lvbikge1xuICB2YXIgdmFsdWUgPSBEZWNpbWFsU3RyaW5nKG51bSk7XG4gIGlmIChwcmVjaXNpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGFzc2VydChwcmVjaXNpb24gPj0gMCAmJiBwcmVjaXNpb24gPD0gMTgsICdQcmVjaXNpb24gc2hvdWxkIGJlIDE4IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuXG4gIHZhciBwYXJ0ID0gdmFsdWUuc3BsaXQoJy4nKTtcblxuICBpZiAocHJlY2lzaW9uID09PSAwICYmIHBhcnQubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHBhcnRbMF07XG4gIH1cblxuICBpZiAocGFydC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcGFydFswXSArICcuJyArICcwJy5yZXBlYXQocHJlY2lzaW9uKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFkID0gcHJlY2lzaW9uIC0gcGFydFsxXS5sZW5ndGg7XG4gICAgYXNzZXJ0KHBhZCA+PSAwLCAnZGVjaW1hbCBcXCcnICsgdmFsdWUgKyAnXFwnIGV4Y2VlZHMgcHJlY2lzaW9uICcgKyBwcmVjaXNpb24pO1xuICAgIHJldHVybiBwYXJ0WzBdICsgJy4nICsgcGFydFsxXSArICcwJy5yZXBlYXQocGFkKTtcbiAgfVxufVxuXG4vKiogRW5zdXJlcyBwcm9wZXIgdHJhaWxpbmcgemVyb3MgdGhlbiByZW1vdmVzIGRlY2ltYWwgcGxhY2UuICovXG5mdW5jdGlvbiBEZWNpbWFsSW1wbHkodmFsdWUsIHByZWNpc2lvbikge1xuICByZXR1cm4gRGVjaW1hbFBhZCh2YWx1ZSwgcHJlY2lzaW9uKS5yZXBsYWNlKCcuJywgJycpO1xufVxuXG4vKipcbiAgUHV0IHRoZSBkZWNpbWFsIHBsYWNlIGJhY2sgaW4gaXRzIHBvc2l0aW9uIGFuZCByZXR1cm4gdGhlIG5vcm1hbGl6ZWQgbnVtYmVyXG4gIHN0cmluZyAod2l0aCBhbnkgdW5uZWNlc3NhcnkgemVyb3Mgb3IgYW4gdW5uZWNlc3NhcnkgZGVjaW1hbCByZW1vdmVkKS5cblxuICBAYXJnIHtzdHJpbmd8bnVtYmVyfHZhbHVlLnRvU3RyaW5nfSB2YWx1ZSAxMDAwMFxuICBAYXJnIHtudW1iZXJ9IHByZWNpc2lvbiA0XG4gIEByZXR1cm4ge251bWJlcn0gMS4wMDAwXG4qL1xuZnVuY3Rpb24gRGVjaW1hbFVuaW1wbHkodmFsdWUsIHByZWNpc2lvbikge1xuICBhc3NlcnQodmFsdWUgIT0gbnVsbCwgJ3ZhbHVlIGlzIHJlcXVpcmVkJyk7XG4gIHZhbHVlID0gdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLnRvU3RyaW5nID8gdmFsdWUudG9TdHJpbmcoKSA6IFN0cmluZyh2YWx1ZSk7XG4gIHZhciBuZWcgPSAvXi0vLnRlc3QodmFsdWUpO1xuICBpZiAobmVnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSk7XG4gIH1cbiAgYXNzZXJ0KC9eXFxkKyQvLnRlc3QodmFsdWUpLCAnaW52YWxpZCB3aG9sZSBudW1iZXIgJyArIHZhbHVlKTtcbiAgYXNzZXJ0KHByZWNpc2lvbiAhPSBudWxsLCAncHJlY2lzaW9uIHJlcXVpcmVkJyk7XG4gIGFzc2VydChwcmVjaXNpb24gPj0gMCAmJiBwcmVjaXNpb24gPD0gMTgsICdQcmVjaXNpb24gc2hvdWxkIGJlIDE4IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuXG4gIC8vIEVuc3VyZSBtaW5pbXVtIGxlbmd0aFxuICB2YXIgcGFkID0gcHJlY2lzaW9uIC0gdmFsdWUubGVuZ3RoO1xuICBpZiAocGFkID4gMCkge1xuICAgIHZhbHVlID0gJycgKyAnMCcucmVwZWF0KHBhZCkgKyB2YWx1ZTtcbiAgfVxuXG4gIHZhciBkb3RJZHggPSB2YWx1ZS5sZW5ndGggLSBwcmVjaXNpb247XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgZG90SWR4KSArICcuJyArIHZhbHVlLnNsaWNlKGRvdElkeCk7XG4gIHJldHVybiAobmVnID8gJy0nIDogJycpICsgRGVjaW1hbFBhZCh2YWx1ZSwgcHJlY2lzaW9uKTsgLy8gTm9ybWFsaXplXG59XG5cbi8qKiBAcHJpdmF0ZSBmb3Igbm93LCBzdXBwb3J0IGZvciBhc3NldCBzdHJpbmdzIGlzIGxpbWl0ZWRcbiovXG5mdW5jdGlvbiBwcmludEFzc2V0KF9yZWYpIHtcbiAgdmFyIGFtb3VudCA9IF9yZWYuYW1vdW50LFxuICAgICAgcHJlY2lzaW9uID0gX3JlZi5wcmVjaXNpb24sXG4gICAgICBzeW1ib2wgPSBfcmVmLnN5bWJvbCxcbiAgICAgIGNvbnRyYWN0ID0gX3JlZi5jb250cmFjdDtcblxuICBhc3NlcnQuZXF1YWwodHlwZW9mIHN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzeW1ib2wpLCAnc3RyaW5nJywgJ3N5bWJvbCBpcyBhIHJlcXVpcmVkIHN0cmluZycpO1xuXG4gIGlmIChhbW91bnQgIT0gbnVsbCAmJiBwcmVjaXNpb24gIT0gbnVsbCkge1xuICAgIGFtb3VudCA9IERlY2ltYWxQYWQoYW1vdW50LCBwcmVjaXNpb24pO1xuICB9XG5cbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKGUxLCBlMikge1xuICAgIHJldHVybiBlMSA9PSBudWxsID8gJycgOiBlMiA9PSBudWxsID8gJycgOiBlMSArIGUyO1xuICB9O1xuXG4gIGlmIChhbW91bnQgIT0gbnVsbCkge1xuICAgIC8vIHRoZSBhbW91bnQgY29udGFpbnMgdGhlIHByZWNpc2lvblxuICAgIHJldHVybiBqb2luKGFtb3VudCwgJyAnKSArIHN5bWJvbCArIGpvaW4oJ0AnLCBjb250cmFjdCk7XG4gIH1cblxuICByZXR1cm4gam9pbihwcmVjaXNpb24sICcsJykgKyBzeW1ib2wgKyBqb2luKCdAJywgY29udHJhY3QpO1xufVxuXG4vKipcbiAgQXR0ZW1wdHMgdG8gcGFyc2UgYWxsIGZvcm1zIG9mIHRoZSBhc3NldCBzdHJpbmdzIChzeW1ib2wsIGFzc2V0LCBvciBleHRlbmRlZFxuICB2ZXJzaW9ucykuICBJZiB0aGUgcHJvdmlkZWQgc3RyaW5nIGNvbnRhaW5zIGFueSBhZGRpdGlvbmFsIG9yIGFwcGVhcnMgdG8gaGF2ZVxuICBpbnZhbGlkIGluZm9ybWF0aW9uIGFuIGVycm9yIGlzIHRocm93bi5cblxuICBAcmV0dXJuIHtvYmplY3R9IHthbW91bnQsIHByZWNpc2lvbiwgc3ltYm9sLCBjb250cmFjdH1cbiAgQHRocm93cyBBc3NlcnRpb25FcnJvclxuKi9cbmZ1bmN0aW9uIHBhcnNlQXNzZXQoc3RyKSB7XG4gIHZhciBfc3RyJHNwbGl0ID0gc3RyLnNwbGl0KCcgJyksXG4gICAgICBfc3RyJHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3N0ciRzcGxpdCwgMSksXG4gICAgICBhbW91bnRSYXcgPSBfc3RyJHNwbGl0MlswXTtcblxuICB2YXIgYW1vdW50TWF0Y2ggPSBhbW91bnRSYXcubWF0Y2goL14oLT9bMC05XSsoXFwuWzAtOV0rKT8pKCB8JCkvKTtcbiAgdmFyIGFtb3VudCA9IGFtb3VudE1hdGNoID8gYW1vdW50TWF0Y2hbMV0gOiBudWxsO1xuXG4gIHZhciBwcmVjaXNpb25NYXRjaCA9IHN0ci5tYXRjaCgvKF58ICkoWzAtOV0rKSwoW0EtWl0rKShAfCQpLyk7XG4gIHZhciBwcmVjaXNpb25TeW1ib2wgPSBwcmVjaXNpb25NYXRjaCA/IE51bWJlcihwcmVjaXNpb25NYXRjaFsyXSkgOiBudWxsO1xuICB2YXIgcHJlY2lzaW9uQW1vdW50ID0gYW1vdW50ID8gKGFtb3VudC5zcGxpdCgnLicpWzFdIHx8ICcnKS5sZW5ndGggOiBudWxsO1xuICB2YXIgcHJlY2lzaW9uID0gcHJlY2lzaW9uU3ltYm9sICE9IG51bGwgPyBwcmVjaXNpb25TeW1ib2wgOiBwcmVjaXNpb25BbW91bnQ7XG5cbiAgdmFyIHN5bWJvbE1hdGNoID0gc3RyLm1hdGNoKC8oXnwgfCwpKFtBLVpdKykoQHwkKS8pO1xuICB2YXIgc3ltYm9sID0gc3ltYm9sTWF0Y2ggPyBzeW1ib2xNYXRjaFsyXSA6IG51bGw7XG5cbiAgdmFyIF9zdHIkc3BsaXQzID0gc3RyLnNwbGl0KCdAJyksXG4gICAgICBfc3RyJHNwbGl0NCA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3N0ciRzcGxpdDMsIDIpLFxuICAgICAgX3N0ciRzcGxpdDQkID0gX3N0ciRzcGxpdDRbMV0sXG4gICAgICBjb250cmFjdFJhdyA9IF9zdHIkc3BsaXQ0JCA9PT0gdW5kZWZpbmVkID8gJycgOiBfc3RyJHNwbGl0NCQ7XG5cbiAgdmFyIGNvbnRyYWN0ID0gL15bYS16MC01XSsoXFwuW2EtejAtNV0rKSokLy50ZXN0KGNvbnRyYWN0UmF3KSA/IGNvbnRyYWN0UmF3IDogbnVsbDtcblxuICB2YXIgY2hlY2sgPSBwcmludEFzc2V0KHsgYW1vdW50OiBhbW91bnQsIHByZWNpc2lvbjogcHJlY2lzaW9uLCBzeW1ib2w6IHN5bWJvbCwgY29udHJhY3Q6IGNvbnRyYWN0IH0pO1xuXG4gIGFzc2VydC5lcXVhbChzdHIsIGNoZWNrLCAnSW52YWxpZCBhc3NldCBzdHJpbmc6ICcgKyBzdHIgKyAnICE9PSAnICsgY2hlY2spO1xuXG4gIGlmIChwcmVjaXNpb24gIT0gbnVsbCkge1xuICAgIGFzc2VydChwcmVjaXNpb24gPj0gMCAmJiBwcmVjaXNpb24gPD0gMTgsICdQcmVjaXNpb24gc2hvdWxkIGJlIDE4IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuICB9XG4gIGlmIChzeW1ib2wgIT0gbnVsbCkge1xuICAgIGFzc2VydChzeW1ib2wubGVuZ3RoIDw9IDcsICdBc3NldCBzeW1ib2wgaXMgNyBjaGFyYWN0ZXJzIG9yIGxlc3MnKTtcbiAgfVxuICBpZiAoY29udHJhY3QgIT0gbnVsbCkge1xuICAgIGFzc2VydChjb250cmFjdC5sZW5ndGggPD0gMTIsICdDb250cmFjdCBpcyAxMiBjaGFyYWN0ZXJzIG9yIGxlc3MnKTtcbiAgfVxuXG4gIHJldHVybiB7IGFtb3VudDogYW1vdW50LCBwcmVjaXNpb246IHByZWNpc2lvbiwgc3ltYm9sOiBzeW1ib2wsIGNvbnRyYWN0OiBjb250cmFjdCB9O1xufSIsIjsoZnVuY3Rpb24gKGdsb2JhbE9iamVjdCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbi8qXHJcbiAqICAgICAgYmlnbnVtYmVyLmpzIHY4LjAuMVxyXG4gKiAgICAgIEEgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBhcmJpdHJhcnktcHJlY2lzaW9uIGFyaXRobWV0aWMuXHJcbiAqICAgICAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnbnVtYmVyLmpzXHJcbiAqICAgICAgQ29weXJpZ2h0IChjKSAyMDE4IE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XHJcbiAqICAgICAgTUlUIExpY2Vuc2VkLlxyXG4gKlxyXG4gKiAgICAgIEJpZ051bWJlci5wcm90b3R5cGUgbWV0aG9kcyAgICAgfCAgQmlnTnVtYmVyIG1ldGhvZHNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBhYnNvbHV0ZVZhbHVlICAgICAgICAgICAgYWJzICAgIHwgIGNsb25lXHJcbiAqICAgICAgY29tcGFyZWRUbyAgICAgICAgICAgICAgICAgICAgICB8ICBjb25maWcgICAgICAgICAgICAgICBzZXRcclxuICogICAgICBkZWNpbWFsUGxhY2VzICAgICAgICAgICAgZHAgICAgIHwgICAgICBERUNJTUFMX1BMQUNFU1xyXG4gKiAgICAgIGRpdmlkZWRCeSAgICAgICAgICAgICAgICBkaXYgICAgfCAgICAgIFJPVU5ESU5HX01PREVcclxuICogICAgICBkaXZpZGVkVG9JbnRlZ2VyQnkgICAgICAgaWRpdiAgIHwgICAgICBFWFBPTkVOVElBTF9BVFxyXG4gKiAgICAgIGV4cG9uZW50aWF0ZWRCeSAgICAgICAgICBwb3cgICAgfCAgICAgIFJBTkdFXHJcbiAqICAgICAgaW50ZWdlclZhbHVlICAgICAgICAgICAgICAgICAgICB8ICAgICAgQ1JZUFRPXHJcbiAqICAgICAgaXNFcXVhbFRvICAgICAgICAgICAgICAgIGVxICAgICB8ICAgICAgTU9EVUxPX01PREVcclxuICogICAgICBpc0Zpbml0ZSAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICBQT1dfUFJFQ0lTSU9OXHJcbiAqICAgICAgaXNHcmVhdGVyVGhhbiAgICAgICAgICAgIGd0ICAgICB8ICAgICAgRk9STUFUXHJcbiAqICAgICAgaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyAgIGd0ZSAgICB8ICAgICAgQUxQSEFCRVRcclxuICogICAgICBpc0ludGVnZXIgICAgICAgICAgICAgICAgICAgICAgIHwgIGlzQmlnTnVtYmVyXHJcbiAqICAgICAgaXNMZXNzVGhhbiAgICAgICAgICAgICAgIGx0ICAgICB8ICBtYXhpbXVtICAgICAgICAgICAgICBtYXhcclxuICogICAgICBpc0xlc3NUaGFuT3JFcXVhbFRvICAgICAgbHRlICAgIHwgIG1pbmltdW0gICAgICAgICAgICAgIG1pblxyXG4gKiAgICAgIGlzTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgcmFuZG9tXHJcbiAqICAgICAgaXNOZWdhdGl2ZSAgICAgICAgICAgICAgICAgICAgICB8ICBzdW1cclxuICogICAgICBpc1Bvc2l0aXZlICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBpc1plcm8gICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBtaW51cyAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBtb2R1bG8gICAgICAgICAgICAgICAgICAgbW9kICAgIHxcclxuICogICAgICBtdWx0aXBsaWVkQnkgICAgICAgICAgICAgdGltZXMgIHxcclxuICogICAgICBuZWdhdGVkICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBwcmVjaXNpb24gICAgICAgICAgICAgICAgc2QgICAgIHxcclxuICogICAgICBzaGlmdGVkQnkgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBzcXVhcmVSb290ICAgICAgICAgICAgICAgc3FydCAgIHxcclxuICogICAgICB0b0V4cG9uZW50aWFsICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0ZpeGVkICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0Zvcm1hdCAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0ZyYWN0aW9uICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0pTT04gICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b051bWJlciAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b1ByZWNpc2lvbiAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b1N0cmluZyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB2YWx1ZU9mICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICpcclxuICovXHJcblxyXG5cclxuICB2YXIgQmlnTnVtYmVyLFxyXG4gICAgaXNOdW1lcmljID0gL14tPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8kL2ksXHJcblxyXG4gICAgbWF0aGNlaWwgPSBNYXRoLmNlaWwsXHJcbiAgICBtYXRoZmxvb3IgPSBNYXRoLmZsb29yLFxyXG5cclxuICAgIGJpZ251bWJlckVycm9yID0gJ1tCaWdOdW1iZXIgRXJyb3JdICcsXHJcbiAgICB0b29NYW55RGlnaXRzID0gYmlnbnVtYmVyRXJyb3IgKyAnTnVtYmVyIHByaW1pdGl2ZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czogJyxcclxuXHJcbiAgICBCQVNFID0gMWUxNCxcclxuICAgIExPR19CQVNFID0gMTQsXHJcbiAgICBNQVhfU0FGRV9JTlRFR0VSID0gMHgxZmZmZmZmZmZmZmZmZiwgICAgICAgICAvLyAyXjUzIC0gMVxyXG4gICAgLy8gTUFYX0lOVDMyID0gMHg3ZmZmZmZmZiwgICAgICAgICAgICAgICAgICAgLy8gMl4zMSAtIDFcclxuICAgIFBPV1NfVEVOID0gWzEsIDEwLCAxMDAsIDFlMywgMWU0LCAxZTUsIDFlNiwgMWU3LCAxZTgsIDFlOSwgMWUxMCwgMWUxMSwgMWUxMiwgMWUxM10sXHJcbiAgICBTUVJUX0JBU0UgPSAxZTcsXHJcblxyXG4gICAgLy8gRURJVEFCTEVcclxuICAgIC8vIFRoZSBsaW1pdCBvbiB0aGUgdmFsdWUgb2YgREVDSU1BTF9QTEFDRVMsIFRPX0VYUF9ORUcsIFRPX0VYUF9QT1MsIE1JTl9FWFAsIE1BWF9FWFAsIGFuZFxyXG4gICAgLy8gdGhlIGFyZ3VtZW50cyB0byB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCwgYW5kIHRvUHJlY2lzaW9uLlxyXG4gICAgTUFYID0gMUU5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhfSU5UMzJcclxuXHJcblxyXG4gIC8qXHJcbiAgICogQ3JlYXRlIGFuZCByZXR1cm4gYSBCaWdOdW1iZXIgY29uc3RydWN0b3IuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY2xvbmUoY29uZmlnT2JqZWN0KSB7XHJcbiAgICB2YXIgZGl2LCBjb252ZXJ0QmFzZSwgcGFyc2VOdW1lcmljLFxyXG4gICAgICBQID0gQmlnTnVtYmVyLnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IEJpZ051bWJlciwgdG9TdHJpbmc6IG51bGwsIHZhbHVlT2Y6IG51bGwgfSxcclxuICAgICAgT05FID0gbmV3IEJpZ051bWJlcigxKSxcclxuXHJcblxyXG4gICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVESVRBQkxFIENPTkZJRyBERUZBVUxUUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cclxuICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93IG11c3QgYmUgaW50ZWdlcnMgd2l0aGluIHRoZSBpbmNsdXNpdmUgcmFuZ2VzIHN0YXRlZC5cclxuICAgICAgLy8gVGhlIHZhbHVlcyBjYW4gYWxzbyBiZSBjaGFuZ2VkIGF0IHJ1bi10aW1lIHVzaW5nIEJpZ051bWJlci5zZXQuXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIG9wZXJhdGlvbnMgaW52b2x2aW5nIGRpdmlzaW9uLlxyXG4gICAgICBERUNJTUFMX1BMQUNFUyA9IDIwLCAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgICAvLyBUaGUgcm91bmRpbmcgbW9kZSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLCBhbmQgd2hlbiB1c2luZ1xyXG4gICAgICAvLyB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCBhbmQgdG9QcmVjaXNpb24sIGFuZCByb3VuZCAoZGVmYXVsdCB2YWx1ZSkuXHJcbiAgICAgIC8vIFVQICAgICAgICAgMCBBd2F5IGZyb20gemVyby5cclxuICAgICAgLy8gRE9XTiAgICAgICAxIFRvd2FyZHMgemVyby5cclxuICAgICAgLy8gQ0VJTCAgICAgICAyIFRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBGTE9PUiAgICAgIDMgVG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgIC8vIEhBTEZfVVAgICAgNCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdXAuXHJcbiAgICAgIC8vIEhBTEZfRE9XTiAgNSBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgZG93bi5cclxuICAgICAgLy8gSEFMRl9FVkVOICA2IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIGV2ZW4gbmVpZ2hib3VyLlxyXG4gICAgICAvLyBIQUxGX0NFSUwgIDcgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBIQUxGX0ZMT09SIDggVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgLUluZmluaXR5LlxyXG4gICAgICBST1VORElOR19NT0RFID0gNCwgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOFxyXG5cclxuICAgICAgLy8gRVhQT05FTlRJQUxfQVQgOiBbVE9fRVhQX05FRyAsIFRPX0VYUF9QT1NdXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGJlbmVhdGggd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAgLy8gTnVtYmVyIHR5cGU6IC03XHJcbiAgICAgIFRPX0VYUF9ORUcgPSAtNywgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byAtTUFYXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGFib3ZlIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgIC8vIE51bWJlciB0eXBlOiAyMVxyXG4gICAgICBUT19FWFBfUE9TID0gMjEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgICAvLyBSQU5HRSA6IFtNSU5fRVhQLCBNQVhfRVhQXVxyXG5cclxuICAgICAgLy8gVGhlIG1pbmltdW0gZXhwb25lbnQgdmFsdWUsIGJlbmVhdGggd2hpY2ggdW5kZXJmbG93IHRvIHplcm8gb2NjdXJzLlxyXG4gICAgICAvLyBOdW1iZXIgdHlwZTogLTMyNCAgKDVlLTMyNClcclxuICAgICAgTUlOX0VYUCA9IC0xZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtMSB0byAtTUFYXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBleHBvbmVudCB2YWx1ZSwgYWJvdmUgd2hpY2ggb3ZlcmZsb3cgdG8gSW5maW5pdHkgb2NjdXJzLlxyXG4gICAgICAvLyBOdW1iZXIgdHlwZTogIDMwOCAgKDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KVxyXG4gICAgICAvLyBGb3IgTUFYX0VYUCA+IDFlNywgZS5nLiBuZXcgQmlnTnVtYmVyKCcxZTEwMDAwMDAwMCcpLnBsdXMoMSkgbWF5IGJlIHNsb3cuXHJcbiAgICAgIE1BWF9FWFAgPSAxZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSB0byBNQVhcclxuXHJcbiAgICAgIC8vIFdoZXRoZXIgdG8gdXNlIGNyeXB0b2dyYXBoaWNhbGx5LXNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24sIGlmIGF2YWlsYWJsZS5cclxuICAgICAgQ1JZUFRPID0gZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVlIG9yIGZhbHNlXHJcblxyXG4gICAgICAvLyBUaGUgbW9kdWxvIG1vZGUgdXNlZCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBtb2R1bHVzOiBhIG1vZCBuLlxyXG4gICAgICAvLyBUaGUgcXVvdGllbnQgKHEgPSBhIC8gbikgaXMgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcm91bmRpbmcgbW9kZS5cclxuICAgICAgLy8gVGhlIHJlbWFpbmRlciAocikgaXMgY2FsY3VsYXRlZCBhczogciA9IGEgLSBuICogcS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVVAgICAgICAgIDAgVGhlIHJlbWFpbmRlciBpcyBwb3NpdGl2ZSBpZiB0aGUgZGl2aWRlbmQgaXMgbmVnYXRpdmUsIGVsc2UgaXMgbmVnYXRpdmUuXHJcbiAgICAgIC8vIERPV04gICAgICAxIFRoZSByZW1haW5kZXIgaGFzIHRoZSBzYW1lIHNpZ24gYXMgdGhlIGRpdmlkZW5kLlxyXG4gICAgICAvLyAgICAgICAgICAgICBUaGlzIG1vZHVsbyBtb2RlIGlzIGNvbW1vbmx5IGtub3duIGFzICd0cnVuY2F0ZWQgZGl2aXNpb24nIGFuZCBpc1xyXG4gICAgICAvLyAgICAgICAgICAgICBlcXVpdmFsZW50IHRvIChhICUgbikgaW4gSmF2YVNjcmlwdC5cclxuICAgICAgLy8gRkxPT1IgICAgIDMgVGhlIHJlbWFpbmRlciBoYXMgdGhlIHNhbWUgc2lnbiBhcyB0aGUgZGl2aXNvciAoUHl0aG9uICUpLlxyXG4gICAgICAvLyBIQUxGX0VWRU4gNiBUaGlzIG1vZHVsbyBtb2RlIGltcGxlbWVudHMgdGhlIElFRUUgNzU0IHJlbWFpbmRlciBmdW5jdGlvbi5cclxuICAgICAgLy8gRVVDTElEICAgIDkgRXVjbGlkaWFuIGRpdmlzaW9uLiBxID0gc2lnbihuKSAqIGZsb29yKGEgLyBhYnMobikpLlxyXG4gICAgICAvLyAgICAgICAgICAgICBUaGUgcmVtYWluZGVyIGlzIGFsd2F5cyBwb3NpdGl2ZS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVGhlIHRydW5jYXRlZCBkaXZpc2lvbiwgZmxvb3JlZCBkaXZpc2lvbiwgRXVjbGlkaWFuIGRpdmlzaW9uIGFuZCBJRUVFIDc1NCByZW1haW5kZXJcclxuICAgICAgLy8gbW9kZXMgYXJlIGNvbW1vbmx5IHVzZWQgZm9yIHRoZSBtb2R1bHVzIG9wZXJhdGlvbi5cclxuICAgICAgLy8gQWx0aG91Z2ggdGhlIG90aGVyIHJvdW5kaW5nIG1vZGVzIGNhbiBhbHNvIGJlIHVzZWQsIHRoZXkgbWF5IG5vdCBnaXZlIHVzZWZ1bCByZXN1bHRzLlxyXG4gICAgICBNT0RVTE9fTU9ERSA9IDEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOVxyXG5cclxuICAgICAgLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgcmVzdWx0IG9mIHRoZSBleHBvbmVudGlhdGVkQnkgb3BlcmF0aW9uLlxyXG4gICAgICAvLyBJZiBQT1dfUFJFQ0lTSU9OIGlzIDAsIHRoZXJlIHdpbGwgYmUgdW5saW1pdGVkIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgICAgUE9XX1BSRUNJU0lPTiA9IDAsICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIE1BWFxyXG5cclxuICAgICAgLy8gVGhlIGZvcm1hdCBzcGVjaWZpY2F0aW9uIHVzZWQgYnkgdGhlIEJpZ051bWJlci5wcm90b3R5cGUudG9Gb3JtYXQgbWV0aG9kLlxyXG4gICAgICBGT1JNQVQgPSB7XHJcbiAgICAgICAgcHJlZml4OiAnJyxcclxuICAgICAgICBncm91cFNpemU6IDMsXHJcbiAgICAgICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICAgIGdyb3VwU2VwYXJhdG9yOiAnLCcsXHJcbiAgICAgICAgZGVjaW1hbFNlcGFyYXRvcjogJy4nLFxyXG4gICAgICAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICAgIGZyYWN0aW9uR3JvdXBTZXBhcmF0b3I6ICdcXHhBMCcsICAgICAgLy8gbm9uLWJyZWFraW5nIHNwYWNlXHJcbiAgICAgICAgc3VmZml4OiAnJ1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gVGhlIGFscGhhYmV0IHVzZWQgZm9yIGJhc2UgY29udmVyc2lvbi4gSXQgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnMgbG9uZywgd2l0aCBubyAnKycsXHJcbiAgICAgIC8vICctJywgJy4nLCB3aGl0ZXNwYWNlLCBvciByZXBlYXRlZCBjaGFyYWN0ZXIuXHJcbiAgICAgIC8vICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWiRfJ1xyXG4gICAgICBBTFBIQUJFVCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xyXG5cclxuXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHJcbiAgICAvLyBDT05TVFJVQ1RPUlxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogVGhlIEJpZ051bWJlciBjb25zdHJ1Y3RvciBhbmQgZXhwb3J0ZWQgZnVuY3Rpb24uXHJcbiAgICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZ051bWJlciBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAqIFtiXSB7bnVtYmVyfSBUaGUgYmFzZSBvZiBuLiBJbnRlZ2VyLCAyIHRvIEFMUEhBQkVULmxlbmd0aCBpbmNsdXNpdmUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEJpZ051bWJlcihuLCBiKSB7XHJcbiAgICAgIHZhciBhbHBoYWJldCwgYywgY2FzZUNoYW5nZWQsIGUsIGksIGlzTnVtLCBsZW4sIHN0cixcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIC8vIEVuYWJsZSBjb25zdHJ1Y3RvciB1c2FnZSB3aXRob3V0IG5ldy5cclxuICAgICAgaWYgKCEoeCBpbnN0YW5jZW9mIEJpZ051bWJlcikpIHtcclxuXHJcbiAgICAgICAgLy8gRG9uJ3QgdGhyb3cgb24gY29uc3RydWN0b3IgY2FsbCB3aXRob3V0IG5ldyAoIzgxKS5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQ29uc3RydWN0b3IgY2FsbCB3aXRob3V0IG5ldzoge259J1xyXG4gICAgICAgIC8vdGhyb3cgRXJyb3IoYmlnbnVtYmVyRXJyb3IgKyAnIENvbnN0cnVjdG9yIGNhbGwgd2l0aG91dCBuZXc6ICcgKyBuKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihuLCBiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGIgPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAvLyBEdXBsaWNhdGUuXHJcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBCaWdOdW1iZXIpIHtcclxuICAgICAgICAgIHgucyA9IG4ucztcclxuICAgICAgICAgIHguZSA9IG4uZTtcclxuICAgICAgICAgIHguYyA9IChuID0gbi5jKSA/IG4uc2xpY2UoKSA6IG47XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc051bSA9IHR5cGVvZiBuID09ICdudW1iZXInO1xyXG5cclxuICAgICAgICBpZiAoaXNOdW0gJiYgbiAqIDAgPT0gMCkge1xyXG5cclxuICAgICAgICAgIC8vIFVzZSBgMSAvIG5gIHRvIGhhbmRsZSBtaW51cyB6ZXJvIGFsc28uXHJcbiAgICAgICAgICB4LnMgPSAxIC8gbiA8IDAgPyAobiA9IC1uLCAtMSkgOiAxO1xyXG5cclxuICAgICAgICAgIC8vIEZhc3RlciBwYXRoIGZvciBpbnRlZ2Vycy5cclxuICAgICAgICAgIGlmIChuID09PSB+fm4pIHtcclxuICAgICAgICAgICAgZm9yIChlID0gMCwgaSA9IG47IGkgPj0gMTA7IGkgLz0gMTAsIGUrKyk7XHJcbiAgICAgICAgICAgIHguZSA9IGU7XHJcbiAgICAgICAgICAgIHguYyA9IFtuXTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHN0ciA9IFN0cmluZyhuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RyID0gU3RyaW5nKG4pO1xyXG4gICAgICAgICAgaWYgKCFpc051bWVyaWMudGVzdChzdHIpKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0pO1xyXG4gICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT0gNDUgPyAoc3RyID0gc3RyLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGVjaW1hbCBwb2ludD9cclxuICAgICAgICBpZiAoKGUgPSBzdHIuaW5kZXhPZignLicpKSA+IC0xKSBzdHIgPSBzdHIucmVwbGFjZSgnLicsICcnKTtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRpYWwgZm9ybT9cclxuICAgICAgICBpZiAoKGkgPSBzdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAgICAgICAvLyBEZXRlcm1pbmUgZXhwb25lbnQuXHJcbiAgICAgICAgICBpZiAoZSA8IDApIGUgPSBpO1xyXG4gICAgICAgICAgZSArPSArc3RyLnNsaWNlKGkgKyAxKTtcclxuICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgICAgICAgIC8vIEludGVnZXIuXHJcbiAgICAgICAgICBlID0gc3RyLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICAgICAgaW50Q2hlY2soYiwgMiwgQUxQSEFCRVQubGVuZ3RoLCAnQmFzZScpO1xyXG4gICAgICAgIHN0ciA9IFN0cmluZyhuKTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYmUgdXNlZCB3aXRoIGJhc2UgMTAgYXJndW1lbnQsIHdoaWxlXHJcbiAgICAgICAgLy8gYWxzbyByb3VuZGluZyB0byBERUNJTUFMX1BMQUNFUyBhcyB3aXRoIG90aGVyIGJhc2VzLlxyXG4gICAgICAgIGlmIChiID09IDEwKSB7XHJcbiAgICAgICAgICB4ID0gbmV3IEJpZ051bWJlcihuIGluc3RhbmNlb2YgQmlnTnVtYmVyID8gbiA6IHN0cik7XHJcbiAgICAgICAgICByZXR1cm4gcm91bmQoeCwgREVDSU1BTF9QTEFDRVMgKyB4LmUgKyAxLCBST1VORElOR19NT0RFKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzTnVtID0gdHlwZW9mIG4gPT0gJ251bWJlcic7XHJcblxyXG4gICAgICAgIGlmIChpc051bSkge1xyXG5cclxuICAgICAgICAgIC8vIEF2b2lkIHBvdGVudGlhbCBpbnRlcnByZXRhdGlvbiBvZiBJbmZpbml0eSBhbmQgTmFOIGFzIGJhc2UgNDQrIHZhbHVlcy5cclxuICAgICAgICAgIGlmIChuICogMCAhPSAwKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0sIGIpO1xyXG5cclxuICAgICAgICAgIHgucyA9IDEgLyBuIDwgMCA/IChzdHIgPSBzdHIuc2xpY2UoMSksIC0xKSA6IDE7XHJcblxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE51bWJlciBwcmltaXRpdmUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHM6IHtufSdcclxuICAgICAgICAgIGlmIChCaWdOdW1iZXIuREVCVUcgJiYgc3RyLnJlcGxhY2UoL14wXFwuMCp8XFwuLywgJycpLmxlbmd0aCA+IDE1KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAodG9vTWFueURpZ2l0cyArIG4pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFByZXZlbnQgbGF0ZXIgY2hlY2sgZm9yIGxlbmd0aCBvbiBjb252ZXJ0ZWQgbnVtYmVyLlxyXG4gICAgICAgICAgaXNOdW0gPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT09IDQ1ID8gKHN0ciA9IHN0ci5zbGljZSgxKSwgLTEpIDogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFscGhhYmV0ID0gQUxQSEFCRVQuc2xpY2UoMCwgYik7XHJcbiAgICAgICAgZSA9IGkgPSAwO1xyXG5cclxuICAgICAgICAvLyBDaGVjayB0aGF0IHN0ciBpcyBhIHZhbGlkIGJhc2UgYiBudW1iZXIuXHJcbiAgICAgICAgLy8gRG9uJ3QgdXNlIFJlZ0V4cCBzbyBhbHBoYWJldCBjYW4gY29udGFpbiBzcGVjaWFsIGNoYXJhY3RlcnMuXHJcbiAgICAgICAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgIGlmIChhbHBoYWJldC5pbmRleE9mKGMgPSBzdHIuY2hhckF0KGkpKSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKGMgPT0gJy4nKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIElmICcuJyBpcyBub3QgdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgaXQgaGFzIG5vdCBiZSBmb3VuZCBiZWZvcmUuXHJcbiAgICAgICAgICAgICAgaWYgKGkgPiBlKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gbGVuO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFjYXNlQ2hhbmdlZCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBBbGxvdyBlLmcuIGhleGFkZWNpbWFsICdGRicgYXMgd2VsbCBhcyAnZmYnLlxyXG4gICAgICAgICAgICAgIGlmIChzdHIgPT0gc3RyLnRvVXBwZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICAgICAgICAgICAgICBzdHIgPT0gc3RyLnRvTG93ZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWMoeCwgU3RyaW5nKG4pLCBpc051bSwgYik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdHIgPSBjb252ZXJ0QmFzZShzdHIsIGIsIDEwLCB4LnMpO1xyXG5cclxuICAgICAgICAvLyBEZWNpbWFsIHBvaW50P1xyXG4gICAgICAgIGlmICgoZSA9IHN0ci5pbmRleE9mKCcuJykpID4gLTEpIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgIGVsc2UgZSA9IHN0ci5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIERldGVybWluZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKGkgPSAwOyBzdHIuY2hhckNvZGVBdChpKSA9PT0gNDg7IGkrKyk7XHJcblxyXG4gICAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAobGVuID0gc3RyLmxlbmd0aDsgc3RyLmNoYXJDb2RlQXQoLS1sZW4pID09PSA0ODspO1xyXG5cclxuICAgICAgc3RyID0gc3RyLnNsaWNlKGksICsrbGVuKTtcclxuXHJcbiAgICAgIGlmIChzdHIpIHtcclxuICAgICAgICBsZW4gLT0gaTtcclxuXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE51bWJlciBwcmltaXRpdmUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHM6IHtufSdcclxuICAgICAgICBpZiAoaXNOdW0gJiYgQmlnTnVtYmVyLkRFQlVHICYmXHJcbiAgICAgICAgICBsZW4gPiAxNSAmJiAobiA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgbiAhPT0gbWF0aGZsb29yKG4pKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvclxyXG4gICAgICAgICAgICAgKHRvb01hbnlEaWdpdHMgKyAoeC5zICogbikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZSA9IGUgLSBpIC0gMTtcclxuXHJcbiAgICAgICAgIC8vIE92ZXJmbG93P1xyXG4gICAgICAgIGlmIChlID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgICAgIC8vIEluZmluaXR5LlxyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gVW5kZXJmbG93P1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZSA8IE1JTl9FWFApIHtcclxuXHJcbiAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4LmUgPSBlO1xyXG4gICAgICAgICAgeC5jID0gW107XHJcblxyXG4gICAgICAgICAgLy8gVHJhbnNmb3JtIGJhc2VcclxuXHJcbiAgICAgICAgICAvLyBlIGlzIHRoZSBiYXNlIDEwIGV4cG9uZW50LlxyXG4gICAgICAgICAgLy8gaSBpcyB3aGVyZSB0byBzbGljZSBzdHIgdG8gZ2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2VmZmljaWVudCBhcnJheS5cclxuICAgICAgICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XHJcbiAgICAgICAgICBpZiAoZSA8IDApIGkgKz0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgaWYgKGkgPCBsZW4pIHtcclxuICAgICAgICAgICAgaWYgKGkpIHguYy5wdXNoKCtzdHIuc2xpY2UoMCwgaSkpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47KSB7XHJcbiAgICAgICAgICAgICAgeC5jLnB1c2goK3N0ci5zbGljZShpLCBpICs9IExPR19CQVNFKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZShpKTtcclxuICAgICAgICAgICAgaSA9IExPR19CQVNFIC0gc3RyLmxlbmd0aDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGkgLT0gbGVuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgeC5jLnB1c2goK3N0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDT05TVFJVQ1RPUiBQUk9QRVJUSUVTXHJcblxyXG5cclxuICAgIEJpZ051bWJlci5jbG9uZSA9IGNsb25lO1xyXG5cclxuICAgIEJpZ051bWJlci5ST1VORF9VUCA9IDA7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfRE9XTiA9IDE7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfQ0VJTCA9IDI7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfRkxPT1IgPSAzO1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfVVAgPSA0O1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRE9XTiA9IDU7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfSEFMRl9FVkVOID0gNjtcclxuICAgIEJpZ051bWJlci5ST1VORF9IQUxGX0NFSUwgPSA3O1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRkxPT1IgPSA4O1xyXG4gICAgQmlnTnVtYmVyLkVVQ0xJRCA9IDk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBDb25maWd1cmUgaW5mcmVxdWVudGx5LWNoYW5naW5nIGxpYnJhcnktd2lkZSBzZXR0aW5ncy5cclxuICAgICAqXHJcbiAgICAgKiBBY2NlcHQgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25hbCBwcm9wZXJ0aWVzIChpZiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBpc1xyXG4gICAgICogYSBudW1iZXIsIGl0IG11c3QgYmUgYW4gaW50ZWdlciB3aXRoaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBzdGF0ZWQpOlxyXG4gICAgICpcclxuICAgICAqICAgREVDSU1BTF9QTEFDRVMgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byBNQVhcclxuICAgICAqICAgUk9VTkRJTkdfTU9ERSAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA4XHJcbiAgICAgKiAgIEVYUE9ORU5USUFMX0FUICAge251bWJlcnxudW1iZXJbXX0gIC1NQVggdG8gTUFYICBvciAgWy1NQVggdG8gMCwgMCB0byBNQVhdXHJcbiAgICAgKiAgIFJBTkdFICAgICAgICAgICAge251bWJlcnxudW1iZXJbXX0gIC1NQVggdG8gTUFYIChub3QgemVybykgIG9yICBbLU1BWCB0byAtMSwgMSB0byBNQVhdXHJcbiAgICAgKiAgIENSWVBUTyAgICAgICAgICAge2Jvb2xlYW59ICAgICAgICAgIHRydWUgb3IgZmFsc2VcclxuICAgICAqICAgTU9EVUxPX01PREUgICAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA5XHJcbiAgICAgKiAgIFBPV19QUkVDSVNJT04gICAgICAge251bWJlcn0gICAgICAgICAgIDAgdG8gTUFYXHJcbiAgICAgKiAgIEFMUEhBQkVUICAgICAgICAge3N0cmluZ30gICAgICAgICAgIEEgc3RyaW5nIG9mIHR3byBvciBtb3JlIHVuaXF1ZSBjaGFyYWN0ZXJzIHdoaWNoIGRvZXNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGNvbnRhaW4gJy4nLlxyXG4gICAgICogICBGT1JNQVQgICAgICAgICAgIHtvYmplY3R9ICAgICAgICAgICBBbiBvYmplY3Qgd2l0aCBzb21lIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICBwcmVmaXggICAgICAgICAgICAgICAgIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgZ3JvdXBTaXplICAgICAgICAgICAgICB7bnVtYmVyfVxyXG4gICAgICogICAgIHNlY29uZGFyeUdyb3VwU2l6ZSAgICAge251bWJlcn1cclxuICAgICAqICAgICBncm91cFNlcGFyYXRvciAgICAgICAgIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgZGVjaW1hbFNlcGFyYXRvciAgICAgICB7c3RyaW5nfVxyXG4gICAgICogICAgIGZyYWN0aW9uR3JvdXBTaXplICAgICAge251bWJlcn1cclxuICAgICAqICAgICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgc3VmZml4ICAgICAgICAgICAgICAgICB7c3RyaW5nfVxyXG4gICAgICpcclxuICAgICAqIChUaGUgdmFsdWVzIGFzc2lnbmVkIHRvIHRoZSBhYm92ZSBGT1JNQVQgb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBjaGVja2VkIGZvciB2YWxpZGl0eS4pXHJcbiAgICAgKlxyXG4gICAgICogRS5nLlxyXG4gICAgICogQmlnTnVtYmVyLmNvbmZpZyh7IERFQ0lNQUxfUExBQ0VTIDogMjAsIFJPVU5ESU5HX01PREUgOiA0IH0pXHJcbiAgICAgKlxyXG4gICAgICogSWdub3JlIHByb3BlcnRpZXMvcGFyYW1ldGVycyBzZXQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGV4Y2VwdCBmb3IgQUxQSEFCRVQuXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJuIGFuIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGN1cnJlbnQgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBCaWdOdW1iZXIuY29uZmlnID0gQmlnTnVtYmVyLnNldCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgdmFyIHAsIHY7XHJcblxyXG4gICAgICBpZiAob2JqICE9IG51bGwpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcclxuXHJcbiAgICAgICAgICAvLyBERUNJTUFMX1BMQUNFUyB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gREVDSU1BTF9QTEFDRVMge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0RFQ0lNQUxfUExBQ0VTJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaW50Q2hlY2sodiwgMCwgTUFYLCBwKTtcclxuICAgICAgICAgICAgREVDSU1BTF9QTEFDRVMgPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJPVU5ESU5HX01PREUge251bWJlcn0gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBST1VORElOR19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdST1VORElOR19NT0RFJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaW50Q2hlY2sodiwgMCwgOCwgcCk7XHJcbiAgICAgICAgICAgIFJPVU5ESU5HX01PREUgPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEVYUE9ORU5USUFMX0FUIHtudW1iZXJ8bnVtYmVyW119XHJcbiAgICAgICAgICAvLyBJbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcclxuICAgICAgICAgIC8vIFtpbnRlZ2VyIC1NQVggdG8gMCBpbmNsdXNpdmUsIDAgdG8gTUFYIGluY2x1c2l2ZV0uXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gRVhQT05FTlRJQUxfQVQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0VYUE9ORU5USUFMX0FUJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaWYgKHYgJiYgdi5wb3ApIHtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzBdLCAtTUFYLCAwLCBwKTtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzFdLCAwLCBNQVgsIHApO1xyXG4gICAgICAgICAgICAgIFRPX0VYUF9ORUcgPSB2WzBdO1xyXG4gICAgICAgICAgICAgIFRPX0VYUF9QT1MgPSB2WzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgICAgVE9fRVhQX05FRyA9IC0oVE9fRVhQX1BPUyA9IHYgPCAwID8gLXYgOiB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJBTkdFIHtudW1iZXJ8bnVtYmVyW119IE5vbi16ZXJvIGludGVnZXIsIC1NQVggdG8gTUFYIGluY2x1c2l2ZSBvclxyXG4gICAgICAgICAgLy8gW2ludGVnZXIgLU1BWCB0byAtMSBpbmNsdXNpdmUsIGludGVnZXIgMSB0byBNQVggaW5jbHVzaXZlXS5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBSQU5HRSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V8Y2Fubm90IGJlIHplcm99OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUkFOR0UnKSkge1xyXG4gICAgICAgICAgICB2ID0gb2JqW3BdO1xyXG4gICAgICAgICAgICBpZiAodiAmJiB2LnBvcCkge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHZbMF0sIC1NQVgsIC0xLCBwKTtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzFdLCAxLCBNQVgsIHApO1xyXG4gICAgICAgICAgICAgIE1JTl9FWFAgPSB2WzBdO1xyXG4gICAgICAgICAgICAgIE1BWF9FWFAgPSB2WzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgIE1JTl9FWFAgPSAtKE1BWF9FWFAgPSB2IDwgMCA/IC12IDogdik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgcCArICcgY2Fubm90IGJlIHplcm86ICcgKyB2KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBDUllQVE8ge2Jvb2xlYW59IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQ1JZUFRPIG5vdCB0cnVlIG9yIGZhbHNlOiB7dn0nXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gY3J5cHRvIHVuYXZhaWxhYmxlJ1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0NSWVBUTycpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGlmICh2ID09PSAhIXYpIHtcclxuICAgICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvICYmXHJcbiAgICAgICAgICAgICAgICAgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgfHwgY3J5cHRvLnJhbmRvbUJ5dGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICBDUllQVE8gPSB2O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgQ1JZUFRPID0gIXY7XHJcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnY3J5cHRvIHVuYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIENSWVBUTyA9IHY7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIG5vdCB0cnVlIG9yIGZhbHNlOiAnICsgdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBNT0RVTE9fTU9ERSB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIDkgaW5jbHVzaXZlLlxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE1PRFVMT19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdNT0RVTE9fTU9ERScpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIDAsIDksIHApO1xyXG4gICAgICAgICAgICBNT0RVTE9fTU9ERSA9IHY7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUE9XX1BSRUNJU0lPTiB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gUE9XX1BSRUNJU0lPTiB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUE9XX1BSRUNJU0lPTicpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIDAsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIFBPV19QUkVDSVNJT04gPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEZPUk1BVCB7b2JqZWN0fVxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIEZPUk1BVCBub3QgYW4gb2JqZWN0OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnRk9STUFUJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdvYmplY3QnKSBGT1JNQVQgPSB2O1xyXG4gICAgICAgICAgICBlbHNlIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyBwICsgJyBub3QgYW4gb2JqZWN0OiAnICsgdik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQUxQSEFCRVQge3N0cmluZ31cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBBTFBIQUJFVCBpbnZhbGlkOiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnQUxQSEFCRVQnKSkge1xyXG4gICAgICAgICAgICB2ID0gb2JqW3BdO1xyXG5cclxuICAgICAgICAgICAgLy8gRGlzYWxsb3cgaWYgb25seSBvbmUgY2hhcmFjdGVyLFxyXG4gICAgICAgICAgICAvLyBvciBpZiBpdCBjb250YWlucyAnKycsICctJywgJy4nLCB3aGl0ZXNwYWNlLCBvciBhIHJlcGVhdGVkIGNoYXJhY3Rlci5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdzdHJpbmcnICYmICEvXi4kfFsrLS5cXHNdfCguKS4qXFwxLy50ZXN0KHYpKSB7XHJcbiAgICAgICAgICAgICAgQUxQSEFCRVQgPSB2O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIGludmFsaWQ6ICcgKyB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBPYmplY3QgZXhwZWN0ZWQ6IHt2fSdcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ09iamVjdCBleHBlY3RlZDogJyArIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIERFQ0lNQUxfUExBQ0VTOiBERUNJTUFMX1BMQUNFUyxcclxuICAgICAgICBST1VORElOR19NT0RFOiBST1VORElOR19NT0RFLFxyXG4gICAgICAgIEVYUE9ORU5USUFMX0FUOiBbVE9fRVhQX05FRywgVE9fRVhQX1BPU10sXHJcbiAgICAgICAgUkFOR0U6IFtNSU5fRVhQLCBNQVhfRVhQXSxcclxuICAgICAgICBDUllQVE86IENSWVBUTyxcclxuICAgICAgICBNT0RVTE9fTU9ERTogTU9EVUxPX01PREUsXHJcbiAgICAgICAgUE9XX1BSRUNJU0lPTjogUE9XX1BSRUNJU0lPTixcclxuICAgICAgICBGT1JNQVQ6IEZPUk1BVCxcclxuICAgICAgICBBTFBIQUJFVDogQUxQSEFCRVRcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB2IGlzIGEgQmlnTnVtYmVyIGluc3RhbmNlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICpcclxuICAgICAqIHYge2FueX1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLmlzQmlnTnVtYmVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgcmV0dXJuIHYgaW5zdGFuY2VvZiBCaWdOdW1iZXIgfHwgdiAmJiB2Ll9pc0JpZ051bWJlciA9PT0gdHJ1ZSB8fCBmYWxzZTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtYXhpbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLm1heGltdW0gPSBCaWdOdW1iZXIubWF4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmx0KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtaW5pbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLm1pbmltdW0gPSBCaWdOdW1iZXIubWluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmd0KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdpdGggYSByYW5kb20gdmFsdWUgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDAgYW5kIGxlc3MgdGhhbiAxLFxyXG4gICAgICogYW5kIHdpdGggZHAsIG9yIERFQ0lNQUxfUExBQ0VTIGlmIGRwIGlzIG9taXR0ZWQsIGRlY2ltYWwgcGxhY2VzIChvciBsZXNzIGlmIHRyYWlsaW5nXHJcbiAgICAgKiB6ZXJvcyBhcmUgcHJvZHVjZWQpLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfSdcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBjcnlwdG8gdW5hdmFpbGFibGUnXHJcbiAgICAgKi9cclxuICAgIEJpZ051bWJlci5yYW5kb20gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgcG93Ml81MyA9IDB4MjAwMDAwMDAwMDAwMDA7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gYSA1MyBiaXQgaW50ZWdlciBuLCB3aGVyZSAwIDw9IG4gPCA5MDA3MTk5MjU0NzQwOTkyLlxyXG4gICAgICAvLyBDaGVjayBpZiBNYXRoLnJhbmRvbSgpIHByb2R1Y2VzIG1vcmUgdGhhbiAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXHJcbiAgICAgIC8vIElmIGl0IGRvZXMsIGFzc3VtZSBhdCBsZWFzdCA1MyBiaXRzIGFyZSBwcm9kdWNlZCwgb3RoZXJ3aXNlIGFzc3VtZSBhdCBsZWFzdCAzMCBiaXRzLlxyXG4gICAgICAvLyAweDQwMDAwMDAwIGlzIDJeMzAsIDB4ODAwMDAwIGlzIDJeMjMsIDB4MWZmZmZmIGlzIDJeMjEgLSAxLlxyXG4gICAgICB2YXIgcmFuZG9tNTNiaXRJbnQgPSAoTWF0aC5yYW5kb20oKSAqIHBvdzJfNTMpICYgMHgxZmZmZmZcclxuICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0aGZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3cyXzUzKTsgfVxyXG4gICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoKE1hdGgucmFuZG9tKCkgKiAweDQwMDAwMDAwIHwgMCkgKiAweDgwMDAwMCkgK1xyXG4gICAgICAgICAoTWF0aC5yYW5kb20oKSAqIDB4ODAwMDAwIHwgMCk7IH07XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgdmFyIGEsIGIsIGUsIGssIHYsXHJcbiAgICAgICAgICBpID0gMCxcclxuICAgICAgICAgIGMgPSBbXSxcclxuICAgICAgICAgIHJhbmQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcblxyXG4gICAgICAgIGlmIChkcCA9PSBudWxsKSBkcCA9IERFQ0lNQUxfUExBQ0VTO1xyXG4gICAgICAgIGVsc2UgaW50Q2hlY2soZHAsIDAsIE1BWCk7XHJcblxyXG4gICAgICAgIGsgPSBtYXRoY2VpbChkcCAvIExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgaWYgKENSWVBUTykge1xyXG5cclxuICAgICAgICAgIC8vIEJyb3dzZXJzIHN1cHBvcnRpbmcgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5cclxuICAgICAgICAgIGlmIChjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcblxyXG4gICAgICAgICAgICBhID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoayAqPSAyKSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKDsgaSA8IGs7KSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIDUzIGJpdHM6XHJcbiAgICAgICAgICAgICAgLy8gKChNYXRoLnBvdygyLCAzMikgLSAxKSAqIE1hdGgucG93KDIsIDIxKSkudG9TdHJpbmcoMilcclxuICAgICAgICAgICAgICAvLyAxMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTEwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMFxyXG4gICAgICAgICAgICAgIC8vICgoTWF0aC5wb3coMiwgMzIpIC0gMSkgPj4+IDExKS50b1N0cmluZygyKVxyXG4gICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExMTExIDExMTExMTExIDExMTExMTExXHJcbiAgICAgICAgICAgICAgLy8gMHgyMDAwMCBpcyAyXjIxLlxyXG4gICAgICAgICAgICAgIHYgPSBhW2ldICogMHgyMDAwMCArIChhW2kgKyAxXSA+Pj4gMTEpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBSZWplY3Rpb24gc2FtcGxpbmc6XHJcbiAgICAgICAgICAgICAgLy8gMCA8PSB2IDwgOTAwNzE5OTI1NDc0MDk5MlxyXG4gICAgICAgICAgICAgIC8vIFByb2JhYmlsaXR5IHRoYXQgdiA+PSA5ZTE1LCBpc1xyXG4gICAgICAgICAgICAgIC8vIDcxOTkyNTQ3NDA5OTIgLyA5MDA3MTk5MjU0NzQwOTkyIH49IDAuMDAwOCwgaS5lLiAxIGluIDEyNTFcclxuICAgICAgICAgICAgICBpZiAodiA+PSA5ZTE1KSB7XHJcbiAgICAgICAgICAgICAgICBiID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMikpO1xyXG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbMF07XHJcbiAgICAgICAgICAgICAgICBhW2kgKyAxXSA9IGJbMV07XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwIDw9IHYgPD0gODk5OTk5OTk5OTk5OTk5OVxyXG4gICAgICAgICAgICAgICAgLy8gMCA8PSAodiAlIDFlMTQpIDw9IDk5OTk5OTk5OTk5OTk5XHJcbiAgICAgICAgICAgICAgICBjLnB1c2godiAlIDFlMTQpO1xyXG4gICAgICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gayAvIDI7XHJcblxyXG4gICAgICAgICAgLy8gTm9kZS5qcyBzdXBwb3J0aW5nIGNyeXB0by5yYW5kb21CeXRlcy5cclxuICAgICAgICAgIH0gZWxzZSBpZiAoY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBidWZmZXJcclxuICAgICAgICAgICAgYSA9IGNyeXB0by5yYW5kb21CeXRlcyhrICo9IDcpO1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IGkgPCBrOykge1xyXG5cclxuICAgICAgICAgICAgICAvLyAweDEwMDAwMDAwMDAwMDAgaXMgMl40OCwgMHgxMDAwMDAwMDAwMCBpcyAyXjQwXHJcbiAgICAgICAgICAgICAgLy8gMHgxMDAwMDAwMDAgaXMgMl4zMiwgMHgxMDAwMDAwIGlzIDJeMjRcclxuICAgICAgICAgICAgICAvLyAxMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMVxyXG4gICAgICAgICAgICAgIC8vIDAgPD0gdiA8IDkwMDcxOTkyNTQ3NDA5OTJcclxuICAgICAgICAgICAgICB2ID0gKChhW2ldICYgMzEpICogMHgxMDAwMDAwMDAwMDAwKSArIChhW2kgKyAxXSAqIDB4MTAwMDAwMDAwMDApICtcclxuICAgICAgICAgICAgICAgICAoYVtpICsgMl0gKiAweDEwMDAwMDAwMCkgKyAoYVtpICsgM10gKiAweDEwMDAwMDApICtcclxuICAgICAgICAgICAgICAgICAoYVtpICsgNF0gPDwgMTYpICsgKGFbaSArIDVdIDw8IDgpICsgYVtpICsgNl07XHJcblxyXG4gICAgICAgICAgICAgIGlmICh2ID49IDllMTUpIHtcclxuICAgICAgICAgICAgICAgIGNyeXB0by5yYW5kb21CeXRlcyg3KS5jb3B5KGEsIGkpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMCA8PSAodiAlIDFlMTQpIDw9IDk5OTk5OTk5OTk5OTk5XHJcbiAgICAgICAgICAgICAgICBjLnB1c2godiAlIDFlMTQpO1xyXG4gICAgICAgICAgICAgICAgaSArPSA3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gayAvIDc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBDUllQVE8gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdjcnlwdG8gdW5hdmFpbGFibGUnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVzZSBNYXRoLnJhbmRvbS5cclxuICAgICAgICBpZiAoIUNSWVBUTykge1xyXG5cclxuICAgICAgICAgIGZvciAoOyBpIDwgazspIHtcclxuICAgICAgICAgICAgdiA9IHJhbmRvbTUzYml0SW50KCk7XHJcbiAgICAgICAgICAgIGlmICh2IDwgOWUxNSkgY1tpKytdID0gdiAlIDFlMTQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrID0gY1stLWldO1xyXG4gICAgICAgIGRwICU9IExPR19CQVNFO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHRyYWlsaW5nIGRpZ2l0cyB0byB6ZXJvcyBhY2NvcmRpbmcgdG8gZHAuXHJcbiAgICAgICAgaWYgKGsgJiYgZHApIHtcclxuICAgICAgICAgIHYgPSBQT1dTX1RFTltMT0dfQkFTRSAtIGRwXTtcclxuICAgICAgICAgIGNbaV0gPSBtYXRoZmxvb3IoayAvIHYpICogdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBlbGVtZW50cyB3aGljaCBhcmUgemVyby5cclxuICAgICAgICBmb3IgKDsgY1tpXSA9PT0gMDsgYy5wb3AoKSwgaS0tKTtcclxuXHJcbiAgICAgICAgLy8gWmVybz9cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIGMgPSBbZSA9IDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgZWxlbWVudHMgd2hpY2ggYXJlIHplcm8gYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgICAgICAgIGZvciAoZSA9IC0xIDsgY1swXSA9PT0gMDsgYy5zcGxpY2UoMCwgMSksIGUgLT0gTE9HX0JBU0UpO1xyXG5cclxuICAgICAgICAgIC8vIENvdW50IHRoZSBkaWdpdHMgb2YgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYyB0byBkZXRlcm1pbmUgbGVhZGluZyB6ZXJvcywgYW5kLi4uXHJcbiAgICAgICAgICBmb3IgKGkgPSAxLCB2ID0gY1swXTsgdiA+PSAxMDsgdiAvPSAxMCwgaSsrKTtcclxuXHJcbiAgICAgICAgICAvLyBhZGp1c3QgdGhlIGV4cG9uZW50IGFjY29yZGluZ2x5LlxyXG4gICAgICAgICAgaWYgKGkgPCBMT0dfQkFTRSkgZSAtPSBMT0dfQkFTRSAtIGk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByYW5kLmUgPSBlO1xyXG4gICAgICAgIHJhbmQuYyA9IGM7XHJcbiAgICAgICAgcmV0dXJuIHJhbmQ7XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBzdW0gb2YgdGhlIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBCaWdOdW1iZXIuc3VtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgaSA9IDEsXHJcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcclxuICAgICAgICBzdW0gPSBuZXcgQmlnTnVtYmVyKGFyZ3NbMF0pO1xyXG4gICAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOykgc3VtID0gc3VtLnBsdXMoYXJnc1tpKytdKTtcclxuICAgICAgcmV0dXJuIHN1bTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIFBSSVZBVEUgRlVOQ1RJT05TXHJcblxyXG5cclxuICAgIC8vIENhbGxlZCBieSBCaWdOdW1iZXIgYW5kIEJpZ051bWJlci5wcm90b3R5cGUudG9TdHJpbmcuXHJcbiAgICBjb252ZXJ0QmFzZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBkZWNpbWFsID0gJzAxMjM0NTY3ODknO1xyXG5cclxuICAgICAgLypcclxuICAgICAgICogQ29udmVydCBzdHJpbmcgb2YgYmFzZUluIHRvIGFuIGFycmF5IG9mIG51bWJlcnMgb2YgYmFzZU91dC5cclxuICAgICAgICogRWcuIHRvQmFzZU91dCgnMjU1JywgMTAsIDE2KSByZXR1cm5zIFsxNSwgMTVdLlxyXG4gICAgICAgKiBFZy4gdG9CYXNlT3V0KCdmZicsIDE2LCAxMCkgcmV0dXJucyBbMiwgNSwgNV0uXHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiB0b0Jhc2VPdXQoc3RyLCBiYXNlSW4sIGJhc2VPdXQsIGFscGhhYmV0KSB7XHJcbiAgICAgICAgdmFyIGosXHJcbiAgICAgICAgICBhcnIgPSBbMF0sXHJcbiAgICAgICAgICBhcnJMLFxyXG4gICAgICAgICAgaSA9IDAsXHJcbiAgICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgICBmb3IgKDsgaSA8IGxlbjspIHtcclxuICAgICAgICAgIGZvciAoYXJyTCA9IGFyci5sZW5ndGg7IGFyckwtLTsgYXJyW2FyckxdICo9IGJhc2VJbik7XHJcblxyXG4gICAgICAgICAgYXJyWzBdICs9IGFscGhhYmV0LmluZGV4T2Yoc3RyLmNoYXJBdChpKyspKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJyW2pdID4gYmFzZU91dCAtIDEpIHtcclxuICAgICAgICAgICAgICBpZiAoYXJyW2ogKyAxXSA9PSBudWxsKSBhcnJbaiArIDFdID0gMDtcclxuICAgICAgICAgICAgICBhcnJbaiArIDFdICs9IGFycltqXSAvIGJhc2VPdXQgfCAwO1xyXG4gICAgICAgICAgICAgIGFycltqXSAlPSBiYXNlT3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJyLnJldmVyc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29udmVydCBhIG51bWVyaWMgc3RyaW5nIG9mIGJhc2VJbiB0byBhIG51bWVyaWMgc3RyaW5nIG9mIGJhc2VPdXQuXHJcbiAgICAgIC8vIElmIHRoZSBjYWxsZXIgaXMgdG9TdHJpbmcsIHdlIGFyZSBjb252ZXJ0aW5nIGZyb20gYmFzZSAxMCB0byBiYXNlT3V0LlxyXG4gICAgICAvLyBJZiB0aGUgY2FsbGVyIGlzIEJpZ051bWJlciwgd2UgYXJlIGNvbnZlcnRpbmcgZnJvbSBiYXNlSW4gdG8gYmFzZSAxMC5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIsIGJhc2VJbiwgYmFzZU91dCwgc2lnbiwgY2FsbGVySXNUb1N0cmluZykge1xyXG4gICAgICAgIHZhciBhbHBoYWJldCwgZCwgZSwgaywgciwgeCwgeGMsIHksXHJcbiAgICAgICAgICBpID0gc3RyLmluZGV4T2YoJy4nKSxcclxuICAgICAgICAgIGRwID0gREVDSU1BTF9QTEFDRVMsXHJcbiAgICAgICAgICBybSA9IFJPVU5ESU5HX01PREU7XHJcblxyXG4gICAgICAgIC8vIE5vbi1pbnRlZ2VyLlxyXG4gICAgICAgIGlmIChpID49IDApIHtcclxuICAgICAgICAgIGsgPSBQT1dfUFJFQ0lTSU9OO1xyXG5cclxuICAgICAgICAgIC8vIFVubGltaXRlZCBwcmVjaXNpb24uXHJcbiAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gMDtcclxuICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoYmFzZUluKTtcclxuICAgICAgICAgIHggPSB5LnBvdyhzdHIubGVuZ3RoIC0gaSk7XHJcbiAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gaztcclxuXHJcbiAgICAgICAgICAvLyBDb252ZXJ0IHN0ciBhcyBpZiBhbiBpbnRlZ2VyLCB0aGVuIHJlc3RvcmUgdGhlIGZyYWN0aW9uIHBhcnQgYnkgZGl2aWRpbmcgdGhlXHJcbiAgICAgICAgICAvLyByZXN1bHQgYnkgaXRzIGJhc2UgcmFpc2VkIHRvIGEgcG93ZXIuXHJcblxyXG4gICAgICAgICAgeS5jID0gdG9CYXNlT3V0KHRvRml4ZWRQb2ludChjb2VmZlRvU3RyaW5nKHguYyksIHguZSwgJzAnKSxcclxuICAgICAgICAgICAxMCwgYmFzZU91dCwgZGVjaW1hbCk7XHJcbiAgICAgICAgICB5LmUgPSB5LmMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCB0aGUgbnVtYmVyIGFzIGludGVnZXIuXHJcblxyXG4gICAgICAgIHhjID0gdG9CYXNlT3V0KHN0ciwgYmFzZUluLCBiYXNlT3V0LCBjYWxsZXJJc1RvU3RyaW5nXHJcbiAgICAgICAgID8gKGFscGhhYmV0ID0gQUxQSEFCRVQsIGRlY2ltYWwpXHJcbiAgICAgICAgIDogKGFscGhhYmV0ID0gZGVjaW1hbCwgQUxQSEFCRVQpKTtcclxuXHJcbiAgICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGFzIGFuIGludGVnZXIgYW5kIGNvbnZlcnRlZCB0byBiYXNlT3V0LiBlIGlzIHRoZSBleHBvbmVudC5cclxuICAgICAgICBlID0gayA9IHhjLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoOyB4Y1stLWtdID09IDA7IHhjLnBvcCgpKTtcclxuXHJcbiAgICAgICAgLy8gWmVybz9cclxuICAgICAgICBpZiAoIXhjWzBdKSByZXR1cm4gYWxwaGFiZXQuY2hhckF0KDApO1xyXG5cclxuICAgICAgICAvLyBEb2VzIHN0ciByZXByZXNlbnQgYW4gaW50ZWdlcj8gSWYgc28sIG5vIG5lZWQgZm9yIHRoZSBkaXZpc2lvbi5cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIC0tZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5jID0geGM7XHJcbiAgICAgICAgICB4LmUgPSBlO1xyXG5cclxuICAgICAgICAgIC8vIFRoZSBzaWduIGlzIG5lZWRlZCBmb3IgY29ycmVjdCByb3VuZGluZy5cclxuICAgICAgICAgIHgucyA9IHNpZ247XHJcbiAgICAgICAgICB4ID0gZGl2KHgsIHksIGRwLCBybSwgYmFzZU91dCk7XHJcbiAgICAgICAgICB4YyA9IHguYztcclxuICAgICAgICAgIHIgPSB4LnI7XHJcbiAgICAgICAgICBlID0geC5lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGNvbnZlcnRlZCB0byBiYXNlT3V0LlxyXG5cclxuICAgICAgICAvLyBUSGUgaW5kZXggb2YgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgIGQgPSBlICsgZHAgKyAxO1xyXG5cclxuICAgICAgICAvLyBUaGUgcm91bmRpbmcgZGlnaXQ6IHRoZSBkaWdpdCB0byB0aGUgcmlnaHQgb2YgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgaSA9IHhjW2RdO1xyXG5cclxuICAgICAgICAvLyBMb29rIGF0IHRoZSByb3VuZGluZyBkaWdpdHMgYW5kIG1vZGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcm91bmQgdXAuXHJcblxyXG4gICAgICAgIGsgPSBiYXNlT3V0IC8gMjtcclxuICAgICAgICByID0gciB8fCBkIDwgMCB8fCB4Y1tkICsgMV0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgciA9IHJtIDwgNCA/IChpICE9IG51bGwgfHwgcikgJiYgKHJtID09IDAgfHwgcm0gPT0gKHgucyA8IDAgPyAzIDogMikpXHJcbiAgICAgICAgICAgICAgOiBpID4gayB8fCBpID09IGsgJiYocm0gPT0gNCB8fCByIHx8IHJtID09IDYgJiYgeGNbZCAtIDFdICYgMSB8fFxyXG4gICAgICAgICAgICAgICBybSA9PSAoeC5zIDwgMCA/IDggOiA3KSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBpbmRleCBvZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgbm90IGdyZWF0ZXIgdGhhbiB6ZXJvLCBvciB4YyByZXByZXNlbnRzXHJcbiAgICAgICAgLy8gemVybywgdGhlbiB0aGUgcmVzdWx0IG9mIHRoZSBiYXNlIGNvbnZlcnNpb24gaXMgemVybyBvciwgaWYgcm91bmRpbmcgdXAsIGEgdmFsdWVcclxuICAgICAgICAvLyBzdWNoIGFzIDAuMDAwMDEuXHJcbiAgICAgICAgaWYgKGQgPCAxIHx8ICF4Y1swXSkge1xyXG5cclxuICAgICAgICAgIC8vIDFeLWRwIG9yIDBcclxuICAgICAgICAgIHN0ciA9IHIgPyB0b0ZpeGVkUG9pbnQoYWxwaGFiZXQuY2hhckF0KDEpLCAtZHAsIGFscGhhYmV0LmNoYXJBdCgwKSkgOiBhbHBoYWJldC5jaGFyQXQoMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBUcnVuY2F0ZSB4YyB0byB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICAgICAgeGMubGVuZ3RoID0gZDtcclxuXHJcbiAgICAgICAgICAvLyBSb3VuZCB1cD9cclxuICAgICAgICAgIGlmIChyKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBSb3VuZGluZyB1cCBtYXkgbWVhbiB0aGUgcHJldmlvdXMgZGlnaXQgaGFzIHRvIGJlIHJvdW5kZWQgdXAgYW5kIHNvIG9uLlxyXG4gICAgICAgICAgICBmb3IgKC0tYmFzZU91dDsgKyt4Y1stLWRdID4gYmFzZU91dDspIHtcclxuICAgICAgICAgICAgICB4Y1tkXSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgIGlmICghZCkge1xyXG4gICAgICAgICAgICAgICAgKytlO1xyXG4gICAgICAgICAgICAgICAgeGMgPSBbMV0uY29uY2F0KHhjKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICBmb3IgKGsgPSB4Yy5sZW5ndGg7ICF4Y1stLWtdOyk7XHJcblxyXG4gICAgICAgICAgLy8gRS5nLiBbNCwgMTEsIDE1XSBiZWNvbWVzIDRiZi5cclxuICAgICAgICAgIGZvciAoaSA9IDAsIHN0ciA9ICcnOyBpIDw9IGs7IHN0ciArPSBhbHBoYWJldC5jaGFyQXQoeGNbaSsrXSkpO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCBsZWFkaW5nIHplcm9zLCBkZWNpbWFsIHBvaW50IGFuZCB0cmFpbGluZyB6ZXJvcyBhcyByZXF1aXJlZC5cclxuICAgICAgICAgIHN0ciA9IHRvRml4ZWRQb2ludChzdHIsIGUsIGFscGhhYmV0LmNoYXJBdCgwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgY2FsbGVyIHdpbGwgYWRkIHRoZSBzaWduLlxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvLyBQZXJmb3JtIGRpdmlzaW9uIGluIHRoZSBzcGVjaWZpZWQgYmFzZS4gQ2FsbGVkIGJ5IGRpdiBhbmQgY29udmVydEJhc2UuXHJcbiAgICBkaXYgPSAoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgLy8gQXNzdW1lIG5vbi16ZXJvIHggYW5kIGsuXHJcbiAgICAgIGZ1bmN0aW9uIG11bHRpcGx5KHgsIGssIGJhc2UpIHtcclxuICAgICAgICB2YXIgbSwgdGVtcCwgeGxvLCB4aGksXHJcbiAgICAgICAgICBjYXJyeSA9IDAsXHJcbiAgICAgICAgICBpID0geC5sZW5ndGgsXHJcbiAgICAgICAgICBrbG8gPSBrICUgU1FSVF9CQVNFLFxyXG4gICAgICAgICAga2hpID0gayAvIFNRUlRfQkFTRSB8IDA7XHJcblxyXG4gICAgICAgIGZvciAoeCA9IHguc2xpY2UoKTsgaS0tOykge1xyXG4gICAgICAgICAgeGxvID0geFtpXSAlIFNRUlRfQkFTRTtcclxuICAgICAgICAgIHhoaSA9IHhbaV0gLyBTUVJUX0JBU0UgfCAwO1xyXG4gICAgICAgICAgbSA9IGtoaSAqIHhsbyArIHhoaSAqIGtsbztcclxuICAgICAgICAgIHRlbXAgPSBrbG8gKiB4bG8gKyAoKG0gJSBTUVJUX0JBU0UpICogU1FSVF9CQVNFKSArIGNhcnJ5O1xyXG4gICAgICAgICAgY2FycnkgPSAodGVtcCAvIGJhc2UgfCAwKSArIChtIC8gU1FSVF9CQVNFIHwgMCkgKyBraGkgKiB4aGk7XHJcbiAgICAgICAgICB4W2ldID0gdGVtcCAlIGJhc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FycnkpIHggPSBbY2FycnldLmNvbmNhdCh4KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYiwgYUwsIGJMKSB7XHJcbiAgICAgICAgdmFyIGksIGNtcDtcclxuXHJcbiAgICAgICAgaWYgKGFMICE9IGJMKSB7XHJcbiAgICAgICAgICBjbXAgPSBhTCA+IGJMID8gMSA6IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgZm9yIChpID0gY21wID0gMDsgaSA8IGFMOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChhW2ldICE9IGJbaV0pIHtcclxuICAgICAgICAgICAgICBjbXAgPSBhW2ldID4gYltpXSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNtcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc3VidHJhY3QoYSwgYiwgYUwsIGJhc2UpIHtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IGIgZnJvbSBhLlxyXG4gICAgICAgIGZvciAoOyBhTC0tOykge1xyXG4gICAgICAgICAgYVthTF0gLT0gaTtcclxuICAgICAgICAgIGkgPSBhW2FMXSA8IGJbYUxdID8gMSA6IDA7XHJcbiAgICAgICAgICBhW2FMXSA9IGkgKiBiYXNlICsgYVthTF0gLSBiW2FMXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7IGEuc3BsaWNlKDAsIDEpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8geDogZGl2aWRlbmQsIHk6IGRpdmlzb3IuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSwgZHAsIHJtLCBiYXNlKSB7XHJcbiAgICAgICAgdmFyIGNtcCwgZSwgaSwgbW9yZSwgbiwgcHJvZCwgcHJvZEwsIHEsIHFjLCByZW0sIHJlbUwsIHJlbTAsIHhpLCB4TCwgeWMwLFxyXG4gICAgICAgICAgeUwsIHl6LFxyXG4gICAgICAgICAgcyA9IHgucyA9PSB5LnMgPyAxIDogLTEsXHJcbiAgICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICAgIHljID0geS5jO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgTmFOLCBJbmZpbml0eSBvciAwP1xyXG4gICAgICAgIGlmICgheGMgfHwgIXhjWzBdIHx8ICF5YyB8fCAheWNbMF0pIHtcclxuXHJcbiAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihcclxuXHJcbiAgICAgICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgTmFOLCBvciBib3RoIEluZmluaXR5IG9yIDAuXHJcbiAgICAgICAgICAgIXgucyB8fCAheS5zIHx8ICh4YyA/IHljICYmIHhjWzBdID09IHljWzBdIDogIXljKSA/IE5hTiA6XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gwrEwIGlmIHggaXMgwrEwIG9yIHkgaXMgwrFJbmZpbml0eSwgb3IgcmV0dXJuIMKxSW5maW5pdHkgYXMgeSBpcyDCsTAuXHJcbiAgICAgICAgICAgIHhjICYmIHhjWzBdID09IDAgfHwgIXljID8gcyAqIDAgOiBzIC8gMFxyXG4gICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcSA9IG5ldyBCaWdOdW1iZXIocyk7XHJcbiAgICAgICAgcWMgPSBxLmMgPSBbXTtcclxuICAgICAgICBlID0geC5lIC0geS5lO1xyXG4gICAgICAgIHMgPSBkcCArIGUgKyAxO1xyXG5cclxuICAgICAgICBpZiAoIWJhc2UpIHtcclxuICAgICAgICAgIGJhc2UgPSBCQVNFO1xyXG4gICAgICAgICAgZSA9IGJpdEZsb29yKHguZSAvIExPR19CQVNFKSAtIGJpdEZsb29yKHkuZSAvIExPR19CQVNFKTtcclxuICAgICAgICAgIHMgPSBzIC8gTE9HX0JBU0UgfCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVzdWx0IGV4cG9uZW50IG1heSBiZSBvbmUgbGVzcyB0aGVuIHRoZSBjdXJyZW50IHZhbHVlIG9mIGUuXHJcbiAgICAgICAgLy8gVGhlIGNvZWZmaWNpZW50cyBvZiB0aGUgQmlnTnVtYmVycyBmcm9tIGNvbnZlcnRCYXNlIG1heSBoYXZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoaSA9IDA7IHljW2ldID09ICh4Y1tpXSB8fCAwKTsgaSsrKTtcclxuXHJcbiAgICAgICAgaWYgKHljW2ldID4gKHhjW2ldIHx8IDApKSBlLS07XHJcblxyXG4gICAgICAgIGlmIChzIDwgMCkge1xyXG4gICAgICAgICAgcWMucHVzaCgxKTtcclxuICAgICAgICAgIG1vcmUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4TCA9IHhjLmxlbmd0aDtcclxuICAgICAgICAgIHlMID0geWMubGVuZ3RoO1xyXG4gICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICBzICs9IDI7XHJcblxyXG4gICAgICAgICAgLy8gTm9ybWFsaXNlIHhjIGFuZCB5YyBzbyBoaWdoZXN0IG9yZGVyIGRpZ2l0IG9mIHljIGlzID49IGJhc2UgLyAyLlxyXG5cclxuICAgICAgICAgIG4gPSBtYXRoZmxvb3IoYmFzZSAvICh5Y1swXSArIDEpKTtcclxuXHJcbiAgICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5LCBidXQgdG8gaGFuZGxlIG9kZCBiYXNlcyB3aGVyZSB5Y1swXSA9PSAoYmFzZSAvIDIpIC0gMS5cclxuICAgICAgICAgIC8vIGlmIChuID4gMSB8fCBuKysgPT0gMSAmJiB5Y1swXSA8IGJhc2UgLyAyKSB7XHJcbiAgICAgICAgICBpZiAobiA+IDEpIHtcclxuICAgICAgICAgICAgeWMgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICAgIHhjID0gbXVsdGlwbHkoeGMsIG4sIGJhc2UpO1xyXG4gICAgICAgICAgICB5TCA9IHljLmxlbmd0aDtcclxuICAgICAgICAgICAgeEwgPSB4Yy5sZW5ndGg7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgeGkgPSB5TDtcclxuICAgICAgICAgIHJlbSA9IHhjLnNsaWNlKDAsIHlMKTtcclxuICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCB6ZXJvcyB0byBtYWtlIHJlbWFpbmRlciBhcyBsb25nIGFzIGRpdmlzb3IuXHJcbiAgICAgICAgICBmb3IgKDsgcmVtTCA8IHlMOyByZW1bcmVtTCsrXSA9IDApO1xyXG4gICAgICAgICAgeXogPSB5Yy5zbGljZSgpO1xyXG4gICAgICAgICAgeXogPSBbMF0uY29uY2F0KHl6KTtcclxuICAgICAgICAgIHljMCA9IHljWzBdO1xyXG4gICAgICAgICAgaWYgKHljWzFdID49IGJhc2UgLyAyKSB5YzArKztcclxuICAgICAgICAgIC8vIE5vdCBuZWNlc3NhcnksIGJ1dCB0byBwcmV2ZW50IHRyaWFsIGRpZ2l0IG4gPiBiYXNlLCB3aGVuIHVzaW5nIGJhc2UgMy5cclxuICAgICAgICAgIC8vIGVsc2UgaWYgKGJhc2UgPT0gMyAmJiB5YzAgPT0gMSkgeWMwID0gMSArIDFlLTE1O1xyXG5cclxuICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgbiA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgY21wID0gY29tcGFyZSh5YywgcmVtLCB5TCwgcmVtTCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBkaXZpc29yIDwgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBpZiAoY21wIDwgMCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdHJpYWwgZGlnaXQsIG4uXHJcblxyXG4gICAgICAgICAgICAgIHJlbTAgPSByZW1bMF07XHJcbiAgICAgICAgICAgICAgaWYgKHlMICE9IHJlbUwpIHJlbTAgPSByZW0wICogYmFzZSArIChyZW1bMV0gfHwgMCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIG4gaXMgaG93IG1hbnkgdGltZXMgdGhlIGRpdmlzb3IgZ29lcyBpbnRvIHRoZSBjdXJyZW50IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBuID0gbWF0aGZsb29yKHJlbTAgLyB5YzApO1xyXG5cclxuICAgICAgICAgICAgICAvLyAgQWxnb3JpdGhtOlxyXG4gICAgICAgICAgICAgIC8vICBwcm9kdWN0ID0gZGl2aXNvciBtdWx0aXBsaWVkIGJ5IHRyaWFsIGRpZ2l0IChuKS5cclxuICAgICAgICAgICAgICAvLyAgQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgLy8gIElmIHByb2R1Y3QgaXMgZ3JlYXRlciB0aGFuIHJlbWFpbmRlcjpcclxuICAgICAgICAgICAgICAvLyAgICBTdWJ0cmFjdCBkaXZpc29yIGZyb20gcHJvZHVjdCwgZGVjcmVtZW50IHRyaWFsIGRpZ2l0LlxyXG4gICAgICAgICAgICAgIC8vICBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIC8vICBJZiBwcm9kdWN0IHdhcyBsZXNzIHRoYW4gcmVtYWluZGVyIGF0IHRoZSBsYXN0IGNvbXBhcmU6XHJcbiAgICAgICAgICAgICAgLy8gICAgQ29tcGFyZSBuZXcgcmVtYWluZGVyIGFuZCBkaXZpc29yLlxyXG4gICAgICAgICAgICAgIC8vICAgIElmIHJlbWFpbmRlciBpcyBncmVhdGVyIHRoYW4gZGl2aXNvcjpcclxuICAgICAgICAgICAgICAvLyAgICAgIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIsIGluY3JlbWVudCB0cmlhbCBkaWdpdC5cclxuXHJcbiAgICAgICAgICAgICAgaWYgKG4gPiAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbiBtYXkgYmUgPiBiYXNlIG9ubHkgd2hlbiBiYXNlIGlzIDMuXHJcbiAgICAgICAgICAgICAgICBpZiAobiA+PSBiYXNlKSBuID0gYmFzZSAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3IgKiB0cmlhbCBkaWdpdC5cclxuICAgICAgICAgICAgICAgIHByb2QgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0ID4gcmVtYWluZGVyIHRoZW4gdHJpYWwgZGlnaXQgbiB0b28gaGlnaC5cclxuICAgICAgICAgICAgICAgIC8vIG4gaXMgMSB0b28gaGlnaCBhYm91dCA1JSBvZiB0aGUgdGltZSwgYW5kIGlzIG5vdCBrbm93biB0byBoYXZlXHJcbiAgICAgICAgICAgICAgICAvLyBldmVyIGJlZW4gbW9yZSB0aGFuIDEgdG9vIGhpZ2guXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY29tcGFyZShwcm9kLCByZW0sIHByb2RMLCByZW1MKSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSBwcm9kdWN0LlxyXG4gICAgICAgICAgICAgICAgICBzdWJ0cmFjdChwcm9kLCB5TCA8IHByb2RMID8geXogOiB5YywgcHJvZEwsIGJhc2UpO1xyXG4gICAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICBjbXAgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbiBpcyAwIG9yIDEsIGNtcCBpcyAtMS5cclxuICAgICAgICAgICAgICAgIC8vIElmIG4gaXMgMCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjb21wYXJlIHljIGFuZCByZW0gYWdhaW4gYmVsb3csXHJcbiAgICAgICAgICAgICAgICAvLyBzbyBjaGFuZ2UgY21wIHRvIDEgdG8gYXZvaWQgaXQuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBuIGlzIDEsIGxlYXZlIGNtcCBhcyAtMSwgc28geWMgYW5kIHJlbSBhcmUgY29tcGFyZWQgYWdhaW4uXHJcbiAgICAgICAgICAgICAgICBpZiAobiA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBkaXZpc29yIDwgcmVtYWluZGVyLCBzbyBuIG11c3QgYmUgYXQgbGVhc3QgMS5cclxuICAgICAgICAgICAgICAgICAgY21wID0gbiA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3JcclxuICAgICAgICAgICAgICAgIHByb2QgPSB5Yy5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChwcm9kTCA8IHJlbUwpIHByb2QgPSBbMF0uY29uY2F0KHByb2QpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIHN1YnRyYWN0KHJlbSwgcHJvZCwgcmVtTCwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0IHdhcyA8IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBpZiAoY21wID09IC0xKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCBuZXcgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgICAgLy8gSWYgZGl2aXNvciA8IG5ldyByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBUcmlhbCBkaWdpdCBuIHRvbyBsb3cuXHJcbiAgICAgICAgICAgICAgICAvLyBuIGlzIDEgdG9vIGxvdyBhYm91dCA1JSBvZiB0aGUgdGltZSwgYW5kIHZlcnkgcmFyZWx5IDIgdG9vIGxvdy5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChjb21wYXJlKHljLCByZW0sIHlMLCByZW1MKSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgbisrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZGl2aXNvciBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICAgICAgc3VidHJhY3QocmVtLCB5TCA8IHJlbUwgPyB5eiA6IHljLCByZW1MLCBiYXNlKTtcclxuICAgICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIG4rKztcclxuICAgICAgICAgICAgICByZW0gPSBbMF07XHJcbiAgICAgICAgICAgIH0gLy8gZWxzZSBjbXAgPT09IDEgYW5kIG4gd2lsbCBiZSAwXHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIG5leHQgZGlnaXQsIG4sIHRvIHRoZSByZXN1bHQgYXJyYXkuXHJcbiAgICAgICAgICAgIHFjW2krK10gPSBuO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIGlmIChyZW1bMF0pIHtcclxuICAgICAgICAgICAgICByZW1bcmVtTCsrXSA9IHhjW3hpXSB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlbSA9IFt4Y1t4aV1dO1xyXG4gICAgICAgICAgICAgIHJlbUwgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IHdoaWxlICgoeGkrKyA8IHhMIHx8IHJlbVswXSAhPSBudWxsKSAmJiBzLS0pO1xyXG5cclxuICAgICAgICAgIG1vcmUgPSByZW1bMF0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgICAvLyBMZWFkaW5nIHplcm8/XHJcbiAgICAgICAgICBpZiAoIXFjWzBdKSBxYy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmFzZSA9PSBCQVNFKSB7XHJcblxyXG4gICAgICAgICAgLy8gVG8gY2FsY3VsYXRlIHEuZSwgZmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHFjWzBdLlxyXG4gICAgICAgICAgZm9yIChpID0gMSwgcyA9IHFjWzBdOyBzID49IDEwOyBzIC89IDEwLCBpKyspO1xyXG5cclxuICAgICAgICAgIHJvdW5kKHEsIGRwICsgKHEuZSA9IGkgKyBlICogTE9HX0JBU0UgLSAxKSArIDEsIHJtLCBtb3JlKTtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGVyIGlzIGNvbnZlcnRCYXNlLlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBxLmUgPSBlO1xyXG4gICAgICAgICAgcS5yID0gK21vcmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcTtcclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIgbiBpbiBmaXhlZC1wb2ludCBvciBleHBvbmVudGlhbFxyXG4gICAgICogbm90YXRpb24gcm91bmRlZCB0byB0aGUgc3BlY2lmaWVkIGRlY2ltYWwgcGxhY2VzIG9yIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgICAqXHJcbiAgICAgKiBuOiBhIEJpZ051bWJlci5cclxuICAgICAqIGk6IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBkaWdpdCByZXF1aXJlZCAoaS5lLiB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cCkuXHJcbiAgICAgKiBybTogdGhlIHJvdW5kaW5nIG1vZGUuXHJcbiAgICAgKiBpZDogMSAodG9FeHBvbmVudGlhbCkgb3IgMiAodG9QcmVjaXNpb24pLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmb3JtYXQobiwgaSwgcm0sIGlkKSB7XHJcbiAgICAgIHZhciBjMCwgZSwgbmUsIGxlbiwgc3RyO1xyXG5cclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICBpZiAoIW4uYykgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIGMwID0gbi5jWzBdO1xyXG4gICAgICBuZSA9IG4uZTtcclxuXHJcbiAgICAgIGlmIChpID09IG51bGwpIHtcclxuICAgICAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKG4uYyk7XHJcbiAgICAgICAgc3RyID0gaWQgPT0gMSB8fCBpZCA9PSAyICYmIG5lIDw9IFRPX0VYUF9ORUdcclxuICAgICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgbmUpXHJcbiAgICAgICAgIDogdG9GaXhlZFBvaW50KHN0ciwgbmUsICcwJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbiA9IHJvdW5kKG5ldyBCaWdOdW1iZXIobiksIGksIHJtKTtcclxuXHJcbiAgICAgICAgLy8gbi5lIG1heSBoYXZlIGNoYW5nZWQgaWYgdGhlIHZhbHVlIHdhcyByb3VuZGVkIHVwLlxyXG4gICAgICAgIGUgPSBuLmU7XHJcblxyXG4gICAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyB0b1ByZWNpc2lvbiByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzXHJcbiAgICAgICAgLy8gc3BlY2lmaWVkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBpbnRlZ2VyXHJcbiAgICAgICAgLy8gcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24uXHJcblxyXG4gICAgICAgIC8vIEV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAgICAgIGlmIChpZCA9PSAxIHx8IGlkID09IDIgJiYgKGkgPD0gZSB8fCBlIDw9IFRPX0VYUF9ORUcpKSB7XHJcblxyXG4gICAgICAgICAgLy8gQXBwZW5kIHplcm9zP1xyXG4gICAgICAgICAgZm9yICg7IGxlbiA8IGk7IHN0ciArPSAnMCcsIGxlbisrKTtcclxuICAgICAgICAgIHN0ciA9IHRvRXhwb25lbnRpYWwoc3RyLCBlKTtcclxuXHJcbiAgICAgICAgLy8gRml4ZWQtcG9pbnQgbm90YXRpb24uXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGkgLT0gbmU7XHJcbiAgICAgICAgICBzdHIgPSB0b0ZpeGVkUG9pbnQoc3RyLCBlLCAnMCcpO1xyXG5cclxuICAgICAgICAgIC8vIEFwcGVuZCB6ZXJvcz9cclxuICAgICAgICAgIGlmIChlICsgMSA+IGxlbikge1xyXG4gICAgICAgICAgICBpZiAoLS1pID4gMCkgZm9yIChzdHIgKz0gJy4nOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaSArPSBlIC0gbGVuO1xyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICBpZiAoZSArIDEgPT0gbGVuKSBzdHIgKz0gJy4nO1xyXG4gICAgICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbi5zIDwgMCAmJiBjMCA/ICctJyArIHN0ciA6IHN0cjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSGFuZGxlIEJpZ051bWJlci5tYXggYW5kIEJpZ051bWJlci5taW4uXHJcbiAgICBmdW5jdGlvbiBtYXhPck1pbihhcmdzLCBtZXRob2QpIHtcclxuICAgICAgdmFyIG4sXHJcbiAgICAgICAgaSA9IDEsXHJcbiAgICAgICAgbSA9IG5ldyBCaWdOdW1iZXIoYXJnc1swXSk7XHJcblxyXG4gICAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBuID0gbmV3IEJpZ051bWJlcihhcmdzW2ldKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYW55IG51bWJlciBpcyBOYU4sIHJldHVybiBOYU4uXHJcbiAgICAgICAgaWYgKCFuLnMpIHtcclxuICAgICAgICAgIG0gPSBuO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QuY2FsbChtLCBuKSkge1xyXG4gICAgICAgICAgbSA9IG47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFN0cmlwIHRyYWlsaW5nIHplcm9zLCBjYWxjdWxhdGUgYmFzZSAxMCBleHBvbmVudCBhbmQgY2hlY2sgYWdhaW5zdCBNSU5fRVhQIGFuZCBNQVhfRVhQLlxyXG4gICAgICogQ2FsbGVkIGJ5IG1pbnVzLCBwbHVzIGFuZCB0aW1lcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbm9ybWFsaXNlKG4sIGMsIGUpIHtcclxuICAgICAgdmFyIGkgPSAxLFxyXG4gICAgICAgIGogPSBjLmxlbmd0aDtcclxuXHJcbiAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAoOyAhY1stLWpdOyBjLnBvcCgpKTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYmFzZSAxMCBleHBvbmVudC4gRmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIGNbMF0uXHJcbiAgICAgIGZvciAoaiA9IGNbMF07IGogPj0gMTA7IGogLz0gMTAsIGkrKyk7XHJcblxyXG4gICAgICAvLyBPdmVyZmxvdz9cclxuICAgICAgaWYgKChlID0gaSArIGUgKiBMT0dfQkFTRSAtIDEpID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgICAvLyBJbmZpbml0eS5cclxuICAgICAgICBuLmMgPSBuLmUgPSBudWxsO1xyXG5cclxuICAgICAgLy8gVW5kZXJmbG93P1xyXG4gICAgICB9IGVsc2UgaWYgKGUgPCBNSU5fRVhQKSB7XHJcblxyXG4gICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgbi5jID0gW24uZSA9IDBdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG4uZSA9IGU7XHJcbiAgICAgICAgbi5jID0gYztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEhhbmRsZSB2YWx1ZXMgdGhhdCBmYWlsIHRoZSB2YWxpZGl0eSB0ZXN0IGluIEJpZ051bWJlci5cclxuICAgIHBhcnNlTnVtZXJpYyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaSxcclxuICAgICAgICBkb3RBZnRlciA9IC9eKFteLl0rKVxcLiQvLFxyXG4gICAgICAgIGRvdEJlZm9yZSA9IC9eXFwuKFteLl0rKSQvLFxyXG4gICAgICAgIGlzSW5maW5pdHlPck5hTiA9IC9eLT8oSW5maW5pdHl8TmFOKSQvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VPclBsdXMgPSAvXlxccypcXCsoPz1bXFx3Ll0pfF5cXHMrfFxccyskL2c7XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgsIHN0ciwgaXNOdW0sIGIpIHtcclxuICAgICAgICB2YXIgYmFzZSxcclxuICAgICAgICAgIHMgPSBpc051bSA/IHN0ciA6IHN0ci5yZXBsYWNlKHdoaXRlc3BhY2VPclBsdXMsICcnKTtcclxuXHJcbiAgICAgICAgLy8gTm8gZXhjZXB0aW9uIG9uIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICAgIGlmIChpc0luZmluaXR5T3JOYU4udGVzdChzKSkge1xyXG4gICAgICAgICAgeC5zID0gaXNOYU4ocykgPyBudWxsIDogcyA8IDAgPyAtMSA6IDE7XHJcbiAgICAgICAgICB4LmMgPSB4LmUgPSBudWxsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoIWlzTnVtKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaVxyXG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKGJhc2VQcmVmaXgsIGZ1bmN0aW9uIChtLCBwMSwgcDIpIHtcclxuICAgICAgICAgICAgICBiYXNlID0gKHAyID0gcDIudG9Mb3dlckNhc2UoKSkgPT0gJ3gnID8gMTYgOiBwMiA9PSAnYicgPyAyIDogODtcclxuICAgICAgICAgICAgICByZXR1cm4gIWIgfHwgYiA9PSBiYXNlID8gcDEgOiBtO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChiKSB7XHJcbiAgICAgICAgICAgICAgYmFzZSA9IGI7XHJcblxyXG4gICAgICAgICAgICAgIC8vIEUuZy4gJzEuJyB0byAnMScsICcuMScgdG8gJzAuMSdcclxuICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlKGRvdEFmdGVyLCAnJDEnKS5yZXBsYWNlKGRvdEJlZm9yZSwgJzAuJDEnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHN0ciAhPSBzKSByZXR1cm4gbmV3IEJpZ051bWJlcihzLCBiYXNlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgYmFzZSB7Yn0gbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgICBpZiAoQmlnTnVtYmVyLkRFQlVHKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ05vdCBhJyArIChiID8gJyBiYXNlICcgKyBiIDogJycpICsgJyBudW1iZXI6ICcgKyBzdHIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIE5hTlxyXG4gICAgICAgICAgeC5jID0geC5lID0geC5zID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSb3VuZCB4IHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLiBDaGVjayBmb3Igb3Zlci91bmRlci1mbG93LlxyXG4gICAgICogSWYgciBpcyB0cnV0aHksIGl0IGlzIGtub3duIHRoYXQgdGhlcmUgYXJlIG1vcmUgZGlnaXRzIGFmdGVyIHRoZSByb3VuZGluZyBkaWdpdC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcm91bmQoeCwgc2QsIHJtLCByKSB7XHJcbiAgICAgIHZhciBkLCBpLCBqLCBrLCBuLCBuaSwgcmQsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgcG93czEwID0gUE9XU19URU47XHJcblxyXG4gICAgICAvLyBpZiB4IGlzIG5vdCBJbmZpbml0eSBvciBOYU4uLi5cclxuICAgICAgaWYgKHhjKSB7XHJcblxyXG4gICAgICAgIC8vIHJkIGlzIHRoZSByb3VuZGluZyBkaWdpdCwgaS5lLiB0aGUgZGlnaXQgYWZ0ZXIgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgLy8gbiBpcyBhIGJhc2UgMWUxNCBudW1iZXIsIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBvZiBhcnJheSB4LmMgY29udGFpbmluZyByZC5cclxuICAgICAgICAvLyBuaSBpcyB0aGUgaW5kZXggb2YgbiB3aXRoaW4geC5jLlxyXG4gICAgICAgIC8vIGQgaXMgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAvLyBpIGlzIHRoZSBpbmRleCBvZiByZCB3aXRoaW4gbiBpbmNsdWRpbmcgbGVhZGluZyB6ZXJvcy5cclxuICAgICAgICAvLyBqIGlzIHRoZSBhY3R1YWwgaW5kZXggb2YgcmQgd2l0aGluIG4gKGlmIDwgMCwgcmQgaXMgYSBsZWFkaW5nIHplcm8pLlxyXG4gICAgICAgIG91dDoge1xyXG5cclxuICAgICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiB4Yy5cclxuICAgICAgICAgIGZvciAoZCA9IDEsIGsgPSB4Y1swXTsgayA+PSAxMDsgayAvPSAxMCwgZCsrKTtcclxuICAgICAgICAgIGkgPSBzZCAtIGQ7XHJcblxyXG4gICAgICAgICAgLy8gSWYgdGhlIHJvdW5kaW5nIGRpZ2l0IGlzIGluIHRoZSBmaXJzdCBlbGVtZW50IG9mIHhjLi4uXHJcbiAgICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgICAgaSArPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgaiA9IHNkO1xyXG4gICAgICAgICAgICBuID0geGNbbmkgPSAwXTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcm91bmRpbmcgZGlnaXQgYXQgaW5kZXggaiBvZiBuLlxyXG4gICAgICAgICAgICByZCA9IG4gLyBwb3dzMTBbZCAtIGogLSAxXSAlIDEwIHwgMDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5pID0gbWF0aGNlaWwoKGkgKyAxKSAvIExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuaSA+PSB4Yy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkZWQgYnkgc3FydC5cclxuICAgICAgICAgICAgICAgIGZvciAoOyB4Yy5sZW5ndGggPD0gbmk7IHhjLnB1c2goMCkpO1xyXG4gICAgICAgICAgICAgICAgbiA9IHJkID0gMDtcclxuICAgICAgICAgICAgICAgIGQgPSAxO1xyXG4gICAgICAgICAgICAgICAgaSAlPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgICAgIGogPSBpIC0gTE9HX0JBU0UgKyAxO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhayBvdXQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIG4gPSBrID0geGNbbmldO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAgICAgICBmb3IgKGQgPSAxOyBrID49IDEwOyBrIC89IDEwLCBkKyspO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHJkIHdpdGhpbiBuLlxyXG4gICAgICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIG4sIGFkanVzdGVkIGZvciBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyBvZiBuIGlzIGdpdmVuIGJ5IExPR19CQVNFIC0gZC5cclxuICAgICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgZDtcclxuXHJcbiAgICAgICAgICAgICAgLy8gR2V0IHRoZSByb3VuZGluZyBkaWdpdCBhdCBpbmRleCBqIG9mIG4uXHJcbiAgICAgICAgICAgICAgcmQgPSBqIDwgMCA/IDAgOiBuIC8gcG93czEwW2QgLSBqIC0gMV0gJSAxMCB8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByID0gciB8fCBzZCA8IDAgfHxcclxuXHJcbiAgICAgICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XHJcbiAgICAgICAgICAvLyBUaGUgZXhwcmVzc2lvbiAgbiAlIHBvd3MxMFtkIC0gaiAtIDFdICByZXR1cm5zIGFsbCBkaWdpdHMgb2YgbiB0byB0aGUgcmlnaHRcclxuICAgICAgICAgIC8vIG9mIHRoZSBkaWdpdCBhdCBqLCBlLmcuIGlmIG4gaXMgOTA4NzE0IGFuZCBqIGlzIDIsIHRoZSBleHByZXNzaW9uIGdpdmVzIDcxNC5cclxuICAgICAgICAgICB4Y1tuaSArIDFdICE9IG51bGwgfHwgKGogPCAwID8gbiA6IG4gJSBwb3dzMTBbZCAtIGogLSAxXSk7XHJcblxyXG4gICAgICAgICAgciA9IHJtIDwgNFxyXG4gICAgICAgICAgID8gKHJkIHx8IHIpICYmIChybSA9PSAwIHx8IHJtID09ICh4LnMgPCAwID8gMyA6IDIpKVxyXG4gICAgICAgICAgIDogcmQgPiA1IHx8IHJkID09IDUgJiYgKHJtID09IDQgfHwgciB8fCBybSA9PSA2ICYmXHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBkaWdpdCB0byB0aGUgbGVmdCBvZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgb2RkLlxyXG4gICAgICAgICAgICAoKGkgPiAwID8gaiA+IDAgPyBuIC8gcG93czEwW2QgLSBqXSA6IDAgOiB4Y1tuaSAtIDFdKSAlIDEwKSAmIDEgfHxcclxuICAgICAgICAgICAgIHJtID09ICh4LnMgPCAwID8gOCA6IDcpKTtcclxuXHJcbiAgICAgICAgICBpZiAoc2QgPCAxIHx8ICF4Y1swXSkge1xyXG4gICAgICAgICAgICB4Yy5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gQ29udmVydCBzZCB0byBkZWNpbWFsIHBsYWNlcy5cclxuICAgICAgICAgICAgICBzZCAtPSB4LmUgKyAxO1xyXG5cclxuICAgICAgICAgICAgICAvLyAxLCAwLjEsIDAuMDEsIDAuMDAxLCAwLjAwMDEgZXRjLlxyXG4gICAgICAgICAgICAgIHhjWzBdID0gcG93czEwWyhMT0dfQkFTRSAtIHNkICUgTE9HX0JBU0UpICUgTE9HX0JBU0VdO1xyXG4gICAgICAgICAgICAgIHguZSA9IC1zZCB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgICAgIHhjWzBdID0geC5lID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGV4Y2VzcyBkaWdpdHMuXHJcbiAgICAgICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pO1xyXG4gICAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgICAgbmktLTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pICsgMTtcclxuICAgICAgICAgICAgayA9IHBvd3MxMFtMT0dfQkFTRSAtIGldO1xyXG5cclxuICAgICAgICAgICAgLy8gRS5nLiA1NjcwMCBiZWNvbWVzIDU2MDAwIGlmIDcgaXMgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgICAgICAvLyBqID4gMCBtZWFucyBpID4gbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2Ygbi5cclxuICAgICAgICAgICAgeGNbbmldID0gaiA+IDAgPyBtYXRoZmxvb3IobiAvIHBvd3MxMFtkIC0gal0gJSBwb3dzMTBbal0pICogayA6IDA7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUm91bmQgdXA/XHJcbiAgICAgICAgICBpZiAocikge1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IDspIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGRpZ2l0IHRvIGJlIHJvdW5kZWQgdXAgaXMgaW4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgeGMuLi5cclxuICAgICAgICAgICAgICBpZiAobmkgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGkgd2lsbCBiZSB0aGUgbGVuZ3RoIG9mIHhjWzBdIGJlZm9yZSBrIGlzIGFkZGVkLlxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMSwgaiA9IHhjWzBdOyBqID49IDEwOyBqIC89IDEwLCBpKyspO1xyXG4gICAgICAgICAgICAgICAgaiA9IHhjWzBdICs9IGs7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAxOyBqID49IDEwOyBqIC89IDEwLCBrKyspO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGkgIT0gayB0aGUgbGVuZ3RoIGhhcyBpbmNyZWFzZWQuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSBrKSB7XHJcbiAgICAgICAgICAgICAgICAgIHguZSsrO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoeGNbMF0gPT0gQkFTRSkgeGNbMF0gPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB4Y1tuaV0gKz0gaztcclxuICAgICAgICAgICAgICAgIGlmICh4Y1tuaV0gIT0gQkFTRSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB4Y1tuaS0tXSA9IDA7XHJcbiAgICAgICAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICBmb3IgKGkgPSB4Yy5sZW5ndGg7IHhjWy0taV0gPT09IDA7IHhjLnBvcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE92ZXJmbG93PyBJbmZpbml0eS5cclxuICAgICAgICBpZiAoeC5lID4gTUFYX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gVW5kZXJmbG93PyBaZXJvLlxyXG4gICAgICAgIH0gZWxzZSBpZiAoeC5lIDwgTUlOX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbHVlT2Yobikge1xyXG4gICAgICB2YXIgc3RyLFxyXG4gICAgICAgIGUgPSBuLmU7XHJcblxyXG4gICAgICBpZiAoZSA9PT0gbnVsbCkgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuXHJcbiAgICAgIHN0ciA9IGUgPD0gVE9fRVhQX05FRyB8fCBlID49IFRPX0VYUF9QT1NcclxuICAgICAgICA/IHRvRXhwb25lbnRpYWwoc3RyLCBlKVxyXG4gICAgICAgIDogdG9GaXhlZFBvaW50KHN0ciwgZSwgJzAnKTtcclxuXHJcbiAgICAgIHJldHVybiBuLnMgPCAwID8gJy0nICsgc3RyIDogc3RyO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBQUk9UT1RZUEUvSU5TVEFOQ0UgTUVUSE9EU1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIuXHJcbiAgICAgKi9cclxuICAgIFAuYWJzb2x1dGVWYWx1ZSA9IFAuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgeCA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XHJcbiAgICAgIGlmICh4LnMgPCAwKSB4LnMgPSAxO1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm5cclxuICAgICAqICAgMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICAgKiAgIC0xIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcclxuICAgICAqICAgMCBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUsXHJcbiAgICAgKiAgIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIGVpdGhlciBpcyBOYU4uXHJcbiAgICAgKi9cclxuICAgIFAuY29tcGFyZWRUbyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIElmIGRwIGlzIHVuZGVmaW5lZCBvciBudWxsIG9yIHRydWUgb3IgZmFsc2UsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9mIHRoZVxyXG4gICAgICogdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICpcclxuICAgICAqIE90aGVyd2lzZSwgaWYgZHAgaXMgYSBudW1iZXIsIHJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXNcclxuICAgICAqIEJpZ051bWJlciByb3VuZGVkIHRvIGEgbWF4aW11bSBvZiBkcCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAgICogUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXM6IGludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfHJtfSdcclxuICAgICAqL1xyXG4gICAgUC5kZWNpbWFsUGxhY2VzID0gUC5kcCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgdmFyIGMsIG4sIHYsXHJcbiAgICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICAgIGlmIChybSA9PSBudWxsKSBybSA9IFJPVU5ESU5HX01PREU7XHJcbiAgICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3VuZChuZXcgQmlnTnVtYmVyKHgpLCBkcCArIHguZSArIDEsIHJtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCEoYyA9IHguYykpIHJldHVybiBudWxsO1xyXG4gICAgICBuID0gKCh2ID0gYy5sZW5ndGggLSAxKSAtIGJpdEZsb29yKHRoaXMuZSAvIExPR19CQVNFKSkgKiBMT0dfQkFTRTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3QgbnVtYmVyLlxyXG4gICAgICBpZiAodiA9IGNbdl0pIGZvciAoOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tKTtcclxuICAgICAgaWYgKG4gPCAwKSBuID0gMDtcclxuXHJcbiAgICAgIHJldHVybiBuO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuIC8gMCA9IElcclxuICAgICAqICBuIC8gTiA9IE5cclxuICAgICAqICBuIC8gSSA9IDBcclxuICAgICAqICAwIC8gbiA9IDBcclxuICAgICAqICAwIC8gMCA9IE5cclxuICAgICAqICAwIC8gTiA9IE5cclxuICAgICAqICAwIC8gSSA9IDBcclxuICAgICAqICBOIC8gbiA9IE5cclxuICAgICAqICBOIC8gMCA9IE5cclxuICAgICAqICBOIC8gTiA9IE5cclxuICAgICAqICBOIC8gSSA9IE5cclxuICAgICAqICBJIC8gbiA9IElcclxuICAgICAqICBJIC8gMCA9IElcclxuICAgICAqICBJIC8gTiA9IE5cclxuICAgICAqICBJIC8gSSA9IE5cclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBkaXZpZGVkIGJ5IHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLCByb3VuZGVkIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmQgUk9VTkRJTkdfTU9ERS5cclxuICAgICAqL1xyXG4gICAgUC5kaXZpZGVkQnkgPSBQLmRpdiA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBkaXYodGhpcywgbmV3IEJpZ051bWJlcih5LCBiKSwgREVDSU1BTF9QTEFDRVMsIFJPVU5ESU5HX01PREUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIGludGVnZXIgcGFydCBvZiBkaXZpZGluZyB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAgICogQmlnTnVtYmVyIGJ5IHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYikuXHJcbiAgICAgKi9cclxuICAgIFAuZGl2aWRlZFRvSW50ZWdlckJ5ID0gUC5pZGl2ID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgICAgcmV0dXJuIGRpdih0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpLCAwLCAxKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGV4cG9uZW50aWF0ZWQgYnkgbi5cclxuICAgICAqXHJcbiAgICAgKiBJZiBtIGlzIHByZXNlbnQsIHJldHVybiB0aGUgcmVzdWx0IG1vZHVsbyBtLlxyXG4gICAgICogSWYgbiBpcyBuZWdhdGl2ZSByb3VuZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKiBJZiBQT1dfUFJFQ0lTSU9OIGlzIG5vbi16ZXJvIGFuZCBtIGlzIG5vdCBwcmVzZW50LCByb3VuZCB0byBQT1dfUFJFQ0lTSU9OIHVzaW5nIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIG1vZHVsYXIgcG93ZXIgb3BlcmF0aW9uIHdvcmtzIGVmZmljaWVudGx5IHdoZW4geCwgbiwgYW5kIG0gYXJlIGludGVnZXJzLCBvdGhlcndpc2UgaXRcclxuICAgICAqIGlzIGVxdWl2YWxlbnQgdG8gY2FsY3VsYXRpbmcgeC5leHBvbmVudGlhdGVkQnkobikubW9kdWxvKG0pIHdpdGggYSBQT1dfUFJFQ0lTSU9OIG9mIDAuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBleHBvbmVudC4gQW4gaW50ZWdlci5cclxuICAgICAqIFttXSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBtb2R1bHVzLlxyXG4gICAgICpcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBFeHBvbmVudCBub3QgYW4gaW50ZWdlcjoge259J1xyXG4gICAgICovXHJcbiAgICBQLmV4cG9uZW50aWF0ZWRCeSA9IFAucG93ID0gZnVuY3Rpb24gKG4sIG0pIHtcclxuICAgICAgdmFyIGhhbGYsIGlzTW9kRXhwLCBpLCBrLCBtb3JlLCBuSXNCaWcsIG5Jc05lZywgbklzT2RkLCB5LFxyXG4gICAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobik7XHJcblxyXG4gICAgICAvLyBBbGxvdyBOYU4gYW5kIMKxSW5maW5pdHksIGJ1dCBub3Qgb3RoZXIgbm9uLWludGVnZXJzLlxyXG4gICAgICBpZiAobi5jICYmICFuLmlzSW50ZWdlcigpKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdFeHBvbmVudCBub3QgYW4gaW50ZWdlcjogJyArIHZhbHVlT2YobikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobSAhPSBudWxsKSBtID0gbmV3IEJpZ051bWJlcihtKTtcclxuXHJcbiAgICAgIC8vIEV4cG9uZW50IG9mIE1BWF9TQUZFX0lOVEVHRVIgaXMgMTUuXHJcbiAgICAgIG5Jc0JpZyA9IG4uZSA+IDE0O1xyXG5cclxuICAgICAgLy8gSWYgeCBpcyBOYU4sIMKxSW5maW5pdHksIMKxMCBvciDCsTEsIG9yIG4gaXMgwrFJbmZpbml0eSwgTmFOIG9yIMKxMC5cclxuICAgICAgaWYgKCF4LmMgfHwgIXguY1swXSB8fCB4LmNbMF0gPT0gMSAmJiAheC5lICYmIHguYy5sZW5ndGggPT0gMSB8fCAhbi5jIHx8ICFuLmNbMF0pIHtcclxuXHJcbiAgICAgICAgLy8gVGhlIHNpZ24gb2YgdGhlIHJlc3VsdCBvZiBwb3cgd2hlbiB4IGlzIG5lZ2F0aXZlIGRlcGVuZHMgb24gdGhlIGV2ZW5uZXNzIG9mIG4uXHJcbiAgICAgICAgLy8gSWYgK24gb3ZlcmZsb3dzIHRvIMKxSW5maW5pdHksIHRoZSBldmVubmVzcyBvZiBuIHdvdWxkIGJlIG5vdCBiZSBrbm93bi5cclxuICAgICAgICB5ID0gbmV3IEJpZ051bWJlcihNYXRoLnBvdygrdmFsdWVPZih4KSwgbklzQmlnID8gMiAtIGlzT2RkKG4pIDogK3ZhbHVlT2YobikpKTtcclxuICAgICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogeTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbklzTmVnID0gbi5zIDwgMDtcclxuXHJcbiAgICAgIGlmIChtKSB7XHJcblxyXG4gICAgICAgIC8vIHggJSBtIHJldHVybnMgTmFOIGlmIGFicyhtKSBpcyB6ZXJvLCBvciBtIGlzIE5hTi5cclxuICAgICAgICBpZiAobS5jID8gIW0uY1swXSA6ICFtLnMpIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgICAgIGlzTW9kRXhwID0gIW5Jc05lZyAmJiB4LmlzSW50ZWdlcigpICYmIG0uaXNJbnRlZ2VyKCk7XHJcblxyXG4gICAgICAgIGlmIChpc01vZEV4cCkgeCA9IHgubW9kKG0pO1xyXG5cclxuICAgICAgLy8gT3ZlcmZsb3cgdG8gwrFJbmZpbml0eTogPj0yKioxZTEwIG9yID49MS4wMDAwMDI0KioxZTE1LlxyXG4gICAgICAvLyBVbmRlcmZsb3cgdG8gwrEwOiA8PTAuNzkqKjFlMTAgb3IgPD0wLjk5OTk5NzUqKjFlMTUuXHJcbiAgICAgIH0gZWxzZSBpZiAobi5lID4gOSAmJiAoeC5lID4gMCB8fCB4LmUgPCAtMSB8fCAoeC5lID09IDBcclxuICAgICAgICAvLyBbMSwgMjQwMDAwMDAwXVxyXG4gICAgICAgID8geC5jWzBdID4gMSB8fCBuSXNCaWcgJiYgeC5jWzFdID49IDI0ZTdcclxuICAgICAgICAvLyBbODAwMDAwMDAwMDAwMDBdICBbOTk5OTk3NTAwMDAwMDBdXHJcbiAgICAgICAgOiB4LmNbMF0gPCA4ZTEzIHx8IG5Jc0JpZyAmJiB4LmNbMF0gPD0gOTk5OTk3NWU3KSkpIHtcclxuXHJcbiAgICAgICAgLy8gSWYgeCBpcyBuZWdhdGl2ZSBhbmQgbiBpcyBvZGQsIGsgPSAtMCwgZWxzZSBrID0gMC5cclxuICAgICAgICBrID0geC5zIDwgMCAmJiBpc09kZChuKSA/IC0wIDogMDtcclxuXHJcbiAgICAgICAgLy8gSWYgeCA+PSAxLCBrID0gwrFJbmZpbml0eS5cclxuICAgICAgICBpZiAoeC5lID4gLTEpIGsgPSAxIC8gaztcclxuXHJcbiAgICAgICAgLy8gSWYgbiBpcyBuZWdhdGl2ZSByZXR1cm4gwrEwLCBlbHNlIHJldHVybiDCsUluZmluaXR5LlxyXG4gICAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKG5Jc05lZyA/IDEgLyBrIDogayk7XHJcblxyXG4gICAgICB9IGVsc2UgaWYgKFBPV19QUkVDSVNJT04pIHtcclxuXHJcbiAgICAgICAgLy8gVHJ1bmNhdGluZyBlYWNoIGNvZWZmaWNpZW50IGFycmF5IHRvIGEgbGVuZ3RoIG9mIGsgYWZ0ZXIgZWFjaCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIC8vIGVxdWF0ZXMgdG8gdHJ1bmNhdGluZyBzaWduaWZpY2FudCBkaWdpdHMgdG8gUE9XX1BSRUNJU0lPTiArIFsyOCwgNDFdLFxyXG4gICAgICAgIC8vIGkuZS4gdGhlcmUgd2lsbCBiZSBhIG1pbmltdW0gb2YgMjggZ3VhcmQgZGlnaXRzIHJldGFpbmVkLlxyXG4gICAgICAgIGsgPSBtYXRoY2VpbChQT1dfUFJFQ0lTSU9OIC8gTE9HX0JBU0UgKyAyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5Jc0JpZykge1xyXG4gICAgICAgIGhhbGYgPSBuZXcgQmlnTnVtYmVyKDAuNSk7XHJcbiAgICAgICAgaWYgKG5Jc05lZykgbi5zID0gMTtcclxuICAgICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpID0gTWF0aC5hYnMoK3ZhbHVlT2YobikpO1xyXG4gICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB5ID0gbmV3IEJpZ051bWJlcihPTkUpO1xyXG5cclxuICAgICAgLy8gUGVyZm9ybXMgNTQgbG9vcCBpdGVyYXRpb25zIGZvciBuIG9mIDkwMDcxOTkyNTQ3NDA5OTEuXHJcbiAgICAgIGZvciAoOyA7KSB7XHJcblxyXG4gICAgICAgIGlmIChuSXNPZGQpIHtcclxuICAgICAgICAgIHkgPSB5LnRpbWVzKHgpO1xyXG4gICAgICAgICAgaWYgKCF5LmMpIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGlmIChrKSB7XHJcbiAgICAgICAgICAgIGlmICh5LmMubGVuZ3RoID4gaykgeS5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9kRXhwKSB7XHJcbiAgICAgICAgICAgIHkgPSB5Lm1vZChtKTsgICAgLy95ID0geS5taW51cyhkaXYoeSwgbSwgMCwgTU9EVUxPX01PREUpLnRpbWVzKG0pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICBpID0gbWF0aGZsb29yKGkgLyAyKTtcclxuICAgICAgICAgIGlmIChpID09PSAwKSBicmVhaztcclxuICAgICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuID0gbi50aW1lcyhoYWxmKTtcclxuICAgICAgICAgIHJvdW5kKG4sIG4uZSArIDEsIDEpO1xyXG5cclxuICAgICAgICAgIGlmIChuLmUgPiAxNCkge1xyXG4gICAgICAgICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGkgPSArdmFsdWVPZihuKTtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICBuSXNPZGQgPSBpICUgMjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHggPSB4LnRpbWVzKHgpO1xyXG5cclxuICAgICAgICBpZiAoaykge1xyXG4gICAgICAgICAgaWYgKHguYyAmJiB4LmMubGVuZ3RoID4gaykgeC5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc01vZEV4cCkge1xyXG4gICAgICAgICAgeCA9IHgubW9kKG0pOyAgICAvL3ggPSB4Lm1pbnVzKGRpdih4LCBtLCAwLCBNT0RVTE9fTU9ERSkudGltZXMobSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzTW9kRXhwKSByZXR1cm4geTtcclxuICAgICAgaWYgKG5Jc05lZykgeSA9IE9ORS5kaXYoeSk7XHJcblxyXG4gICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogayA/IHJvdW5kKHksIFBPV19QUkVDSVNJT04sIFJPVU5ESU5HX01PREUsIG1vcmUpIDogeTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIGFuIGludGVnZXJcclxuICAgICAqIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIFJPVU5ESU5HX01PREUgaWYgcm0gaXMgb21pdHRlZC5cclxuICAgICAqXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtybX0nXHJcbiAgICAgKi9cclxuICAgIFAuaW50ZWdlclZhbHVlID0gZnVuY3Rpb24gKHJtKSB7XHJcbiAgICAgIHZhciBuID0gbmV3IEJpZ051bWJlcih0aGlzKTtcclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcbiAgICAgIHJldHVybiByb3VuZChuLCBuLmUgKyAxLCBybSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzRXF1YWxUbyA9IFAuZXEgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZSh0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpKSA9PT0gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgYSBmaW5pdGUgbnVtYmVyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzRmluaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gISF0aGlzLmM7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyKHksIGIpLFxyXG4gICAgICogb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5pc0dyZWF0ZXJUaGFuID0gUC5ndCA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpID4gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzR3JlYXRlclRoYW5PckVxdWFsVG8gPSBQLmd0ZSA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiAoYiA9IGNvbXBhcmUodGhpcywgbmV3IEJpZ051bWJlcih5LCBiKSkpID09PSAxIHx8IGIgPT09IDA7XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBhbiBpbnRlZ2VyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzSW50ZWdlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICEhdGhpcy5jICYmIGJpdEZsb29yKHRoaXMuZSAvIExPR19CQVNFKSA+IHRoaXMuYy5sZW5ndGggLSAyO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcclxuICAgICAqIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuaXNMZXNzVGhhbiA9IFAubHQgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZSh0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpKSA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5pc0xlc3NUaGFuT3JFcXVhbFRvID0gUC5sdGUgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gKGIgPSBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpKSA9PT0gLTEgfHwgYiA9PT0gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgTmFOLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzTmFOID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gIXRoaXMucztcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbmVnYXRpdmUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucyA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIHBvc2l0aXZlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnMgPiAwO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyAwIG9yIC0wLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICEhdGhpcy5jICYmIHRoaXMuY1swXSA9PSAwO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuIC0gMCA9IG5cclxuICAgICAqICBuIC0gTiA9IE5cclxuICAgICAqICBuIC0gSSA9IC1JXHJcbiAgICAgKiAgMCAtIG4gPSAtblxyXG4gICAgICogIDAgLSAwID0gMFxyXG4gICAgICogIDAgLSBOID0gTlxyXG4gICAgICogIDAgLSBJID0gLUlcclxuICAgICAqICBOIC0gbiA9IE5cclxuICAgICAqICBOIC0gMCA9IE5cclxuICAgICAqICBOIC0gTiA9IE5cclxuICAgICAqICBOIC0gSSA9IE5cclxuICAgICAqICBJIC0gbiA9IElcclxuICAgICAqICBJIC0gMCA9IElcclxuICAgICAqICBJIC0gTiA9IE5cclxuICAgICAqICBJIC0gSSA9IE5cclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBtaW51cyB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKS5cclxuICAgICAqL1xyXG4gICAgUC5taW51cyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBpLCBqLCB0LCB4TFR5LFxyXG4gICAgICAgIHggPSB0aGlzLFxyXG4gICAgICAgIGEgPSB4LnM7XHJcblxyXG4gICAgICB5ID0gbmV3IEJpZ051bWJlcih5LCBiKTtcclxuICAgICAgYiA9IHkucztcclxuXHJcbiAgICAgIC8vIEVpdGhlciBOYU4/XHJcbiAgICAgIGlmICghYSB8fCAhYikgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgICAgaWYgKGEgIT0gYikge1xyXG4gICAgICAgIHkucyA9IC1iO1xyXG4gICAgICAgIHJldHVybiB4LnBsdXMoeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxyXG4gICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgSW5maW5pdHk/XHJcbiAgICAgICAgaWYgKCF4YyB8fCAheWMpIHJldHVybiB4YyA/ICh5LnMgPSAtYiwgeSkgOiBuZXcgQmlnTnVtYmVyKHljID8geCA6IE5hTik7XHJcblxyXG4gICAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICAgIGlmICgheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgICAgLy8gUmV0dXJuIHkgaWYgeSBpcyBub24temVybywgeCBpZiB4IGlzIG5vbi16ZXJvLCBvciB6ZXJvIGlmIGJvdGggYXJlIHplcm8uXHJcbiAgICAgICAgICByZXR1cm4geWNbMF0gPyAoeS5zID0gLWIsIHkpIDogbmV3IEJpZ051bWJlcih4Y1swXSA/IHggOlxyXG5cclxuICAgICAgICAgICAvLyBJRUVFIDc1NCAoMjAwOCkgNi4zOiBuIC0gbiA9IC0wIHdoZW4gcm91bmRpbmcgdG8gLUluZmluaXR5XHJcbiAgICAgICAgICAgUk9VTkRJTkdfTU9ERSA9PSAzID8gLTAgOiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHhlID0gYml0Rmxvb3IoeGUpO1xyXG4gICAgICB5ZSA9IGJpdEZsb29yKHllKTtcclxuICAgICAgeGMgPSB4Yy5zbGljZSgpO1xyXG5cclxuICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGlzIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG4gICAgICBpZiAoYSA9IHhlIC0geWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHhMVHkgPSBhIDwgMCkge1xyXG4gICAgICAgICAgYSA9IC1hO1xyXG4gICAgICAgICAgdCA9IHhjO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdC5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLlxyXG4gICAgICAgIGZvciAoYiA9IGE7IGItLTsgdC5wdXNoKDApKTtcclxuICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRzIGVxdWFsLiBDaGVjayBkaWdpdCBieSBkaWdpdC5cclxuICAgICAgICBqID0gKHhMVHkgPSAoYSA9IHhjLmxlbmd0aCkgPCAoYiA9IHljLmxlbmd0aCkpID8gYSA6IGI7XHJcblxyXG4gICAgICAgIGZvciAoYSA9IGIgPSAwOyBiIDwgajsgYisrKSB7XHJcblxyXG4gICAgICAgICAgaWYgKHhjW2JdICE9IHljW2JdKSB7XHJcbiAgICAgICAgICAgIHhMVHkgPSB4Y1tiXSA8IHljW2JdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHggPCB5PyBQb2ludCB4YyB0byB0aGUgYXJyYXkgb2YgdGhlIGJpZ2dlciBudW1iZXIuXHJcbiAgICAgIGlmICh4TFR5KSB0ID0geGMsIHhjID0geWMsIHljID0gdCwgeS5zID0gLXkucztcclxuXHJcbiAgICAgIGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCk7XHJcblxyXG4gICAgICAvLyBBcHBlbmQgemVyb3MgdG8geGMgaWYgc2hvcnRlci5cclxuICAgICAgLy8gTm8gbmVlZCB0byBhZGQgemVyb3MgdG8geWMgaWYgc2hvcnRlciBhcyBzdWJ0cmFjdCBvbmx5IG5lZWRzIHRvIHN0YXJ0IGF0IHljLmxlbmd0aC5cclxuICAgICAgaWYgKGIgPiAwKSBmb3IgKDsgYi0tOyB4Y1tpKytdID0gMCk7XHJcbiAgICAgIGIgPSBCQVNFIC0gMTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuXHJcbiAgICAgIGZvciAoOyBqID4gYTspIHtcclxuXHJcbiAgICAgICAgaWYgKHhjWy0tal0gPCB5Y1tqXSkge1xyXG4gICAgICAgICAgZm9yIChpID0gajsgaSAmJiAheGNbLS1pXTsgeGNbaV0gPSBiKTtcclxuICAgICAgICAgIC0teGNbaV07XHJcbiAgICAgICAgICB4Y1tqXSArPSBCQVNFO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeGNbal0gLT0geWNbal07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuXHJcbiAgICAgIGZvciAoOyB4Y1swXSA9PSAwOyB4Yy5zcGxpY2UoMCwgMSksIC0teWUpO1xyXG5cclxuICAgICAgLy8gWmVybz9cclxuICAgICAgaWYgKCF4Y1swXSkge1xyXG5cclxuICAgICAgICAvLyBGb2xsb3dpbmcgSUVFRSA3NTQgKDIwMDgpIDYuMyxcclxuICAgICAgICAvLyBuIC0gbiA9ICswICBidXQgIG4gLSBuID0gLTAgIHdoZW4gcm91bmRpbmcgdG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgICAgeS5zID0gUk9VTkRJTkdfTU9ERSA9PSAzID8gLTEgOiAxO1xyXG4gICAgICAgIHkuYyA9IFt5LmUgPSAwXTtcclxuICAgICAgICByZXR1cm4geTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgSW5maW5pdHkgYXMgK3ggLSAreSAhPSBJbmZpbml0eSAmJiAteCAtIC15ICE9IEluZmluaXR5XHJcbiAgICAgIC8vIGZvciBmaW5pdGUgeCBhbmQgeS5cclxuICAgICAgcmV0dXJuIG5vcm1hbGlzZSh5LCB4YywgeWUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICAgbiAlIDAgPSAgTlxyXG4gICAgICogICBuICUgTiA9ICBOXHJcbiAgICAgKiAgIG4gJSBJID0gIG5cclxuICAgICAqICAgMCAlIG4gPSAgMFxyXG4gICAgICogIC0wICUgbiA9IC0wXHJcbiAgICAgKiAgIDAgJSAwID0gIE5cclxuICAgICAqICAgMCAlIE4gPSAgTlxyXG4gICAgICogICAwICUgSSA9ICAwXHJcbiAgICAgKiAgIE4gJSBuID0gIE5cclxuICAgICAqICAgTiAlIDAgPSAgTlxyXG4gICAgICogICBOICUgTiA9ICBOXHJcbiAgICAgKiAgIE4gJSBJID0gIE5cclxuICAgICAqICAgSSAlIG4gPSAgTlxyXG4gICAgICogICBJICUgMCA9ICBOXHJcbiAgICAgKiAgIEkgJSBOID0gIE5cclxuICAgICAqICAgSSAlIEkgPSAgTlxyXG4gICAgICpcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG1vZHVsbyB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKS4gVGhlIHJlc3VsdCBkZXBlbmRzIG9uIHRoZSB2YWx1ZSBvZiBNT0RVTE9fTU9ERS5cclxuICAgICAqL1xyXG4gICAgUC5tb2R1bG8gPSBQLm1vZCA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBxLCBzLFxyXG4gICAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoeSwgYik7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gTmFOIGlmIHggaXMgSW5maW5pdHkgb3IgTmFOLCBvciB5IGlzIE5hTiBvciB6ZXJvLlxyXG4gICAgICBpZiAoIXguYyB8fCAheS5zIHx8IHkuYyAmJiAheS5jWzBdKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIC8vIFJldHVybiB4IGlmIHkgaXMgSW5maW5pdHkgb3IgeCBpcyB6ZXJvLlxyXG4gICAgICB9IGVsc2UgaWYgKCF5LmMgfHwgeC5jICYmICF4LmNbMF0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcih4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKE1PRFVMT19NT0RFID09IDkpIHtcclxuXHJcbiAgICAgICAgLy8gRXVjbGlkaWFuIGRpdmlzaW9uOiBxID0gc2lnbih5KSAqIGZsb29yKHggLyBhYnMoeSkpXHJcbiAgICAgICAgLy8gciA9IHggLSBxeSAgICB3aGVyZSAgMCA8PSByIDwgYWJzKHkpXHJcbiAgICAgICAgcyA9IHkucztcclxuICAgICAgICB5LnMgPSAxO1xyXG4gICAgICAgIHEgPSBkaXYoeCwgeSwgMCwgMyk7XHJcbiAgICAgICAgeS5zID0gcztcclxuICAgICAgICBxLnMgKj0gcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBxID0gZGl2KHgsIHksIDAsIE1PRFVMT19NT0RFKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgeSA9IHgubWludXMocS50aW1lcyh5KSk7XHJcblxyXG4gICAgICAvLyBUbyBtYXRjaCBKYXZhU2NyaXB0ICUsIGVuc3VyZSBzaWduIG9mIHplcm8gaXMgc2lnbiBvZiBkaXZpZGVuZC5cclxuICAgICAgaWYgKCF5LmNbMF0gJiYgTU9EVUxPX01PREUgPT0gMSkgeS5zID0geC5zO1xyXG5cclxuICAgICAgcmV0dXJuIHk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogIG4gKiAwID0gMFxyXG4gICAgICogIG4gKiBOID0gTlxyXG4gICAgICogIG4gKiBJID0gSVxyXG4gICAgICogIDAgKiBuID0gMFxyXG4gICAgICogIDAgKiAwID0gMFxyXG4gICAgICogIDAgKiBOID0gTlxyXG4gICAgICogIDAgKiBJID0gTlxyXG4gICAgICogIE4gKiBuID0gTlxyXG4gICAgICogIE4gKiAwID0gTlxyXG4gICAgICogIE4gKiBOID0gTlxyXG4gICAgICogIE4gKiBJID0gTlxyXG4gICAgICogIEkgKiBuID0gSVxyXG4gICAgICogIEkgKiAwID0gTlxyXG4gICAgICogIEkgKiBOID0gTlxyXG4gICAgICogIEkgKiBJID0gSVxyXG4gICAgICpcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG11bHRpcGxpZWQgYnkgdGhlIHZhbHVlXHJcbiAgICAgKiBvZiBCaWdOdW1iZXIoeSwgYikuXHJcbiAgICAgKi9cclxuICAgIFAubXVsdGlwbGllZEJ5ID0gUC50aW1lcyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBjLCBlLCBpLCBqLCBrLCBtLCB4Y0wsIHhsbywgeGhpLCB5Y0wsIHlsbywgeWhpLCB6YyxcclxuICAgICAgICBiYXNlLCBzcXJ0QmFzZSxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICB5YyA9ICh5ID0gbmV3IEJpZ051bWJlcih5LCBiKSkuYztcclxuXHJcbiAgICAgIC8vIEVpdGhlciBOYU4sIMKxSW5maW5pdHkgb3IgwrEwP1xyXG4gICAgICBpZiAoIXhjIHx8ICF5YyB8fCAheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBOYU4gaWYgZWl0aGVyIGlzIE5hTiwgb3Igb25lIGlzIDAgYW5kIHRoZSBvdGhlciBpcyBJbmZpbml0eS5cclxuICAgICAgICBpZiAoIXgucyB8fCAheS5zIHx8IHhjICYmICF4Y1swXSAmJiAheWMgfHwgeWMgJiYgIXljWzBdICYmICF4Yykge1xyXG4gICAgICAgICAgeS5jID0geS5lID0geS5zID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeS5zICo9IHgucztcclxuXHJcbiAgICAgICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgaXMgwrFJbmZpbml0eS5cclxuICAgICAgICAgIGlmICgheGMgfHwgIXljKSB7XHJcbiAgICAgICAgICAgIHkuYyA9IHkuZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgLy8gUmV0dXJuIMKxMCBpZiBlaXRoZXIgaXMgwrEwLlxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeS5jID0gWzBdO1xyXG4gICAgICAgICAgICB5LmUgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGUgPSBiaXRGbG9vcih4LmUgLyBMT0dfQkFTRSkgKyBiaXRGbG9vcih5LmUgLyBMT0dfQkFTRSk7XHJcbiAgICAgIHkucyAqPSB4LnM7XHJcbiAgICAgIHhjTCA9IHhjLmxlbmd0aDtcclxuICAgICAgeWNMID0geWMubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gRW5zdXJlIHhjIHBvaW50cyB0byBsb25nZXIgYXJyYXkgYW5kIHhjTCB0byBpdHMgbGVuZ3RoLlxyXG4gICAgICBpZiAoeGNMIDwgeWNMKSB6YyA9IHhjLCB4YyA9IHljLCB5YyA9IHpjLCBpID0geGNMLCB4Y0wgPSB5Y0wsIHljTCA9IGk7XHJcblxyXG4gICAgICAvLyBJbml0aWFsaXNlIHRoZSByZXN1bHQgYXJyYXkgd2l0aCB6ZXJvcy5cclxuICAgICAgZm9yIChpID0geGNMICsgeWNMLCB6YyA9IFtdOyBpLS07IHpjLnB1c2goMCkpO1xyXG5cclxuICAgICAgYmFzZSA9IEJBU0U7XHJcbiAgICAgIHNxcnRCYXNlID0gU1FSVF9CQVNFO1xyXG5cclxuICAgICAgZm9yIChpID0geWNMOyAtLWkgPj0gMDspIHtcclxuICAgICAgICBjID0gMDtcclxuICAgICAgICB5bG8gPSB5Y1tpXSAlIHNxcnRCYXNlO1xyXG4gICAgICAgIHloaSA9IHljW2ldIC8gc3FydEJhc2UgfCAwO1xyXG5cclxuICAgICAgICBmb3IgKGsgPSB4Y0wsIGogPSBpICsgazsgaiA+IGk7KSB7XHJcbiAgICAgICAgICB4bG8gPSB4Y1stLWtdICUgc3FydEJhc2U7XHJcbiAgICAgICAgICB4aGkgPSB4Y1trXSAvIHNxcnRCYXNlIHwgMDtcclxuICAgICAgICAgIG0gPSB5aGkgKiB4bG8gKyB4aGkgKiB5bG87XHJcbiAgICAgICAgICB4bG8gPSB5bG8gKiB4bG8gKyAoKG0gJSBzcXJ0QmFzZSkgKiBzcXJ0QmFzZSkgKyB6Y1tqXSArIGM7XHJcbiAgICAgICAgICBjID0gKHhsbyAvIGJhc2UgfCAwKSArIChtIC8gc3FydEJhc2UgfCAwKSArIHloaSAqIHhoaTtcclxuICAgICAgICAgIHpjW2otLV0gPSB4bG8gJSBiYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgemNbal0gPSBjO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYykge1xyXG4gICAgICAgICsrZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB6Yy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBub3JtYWxpc2UoeSwgemMsIGUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG5lZ2F0ZWQsXHJcbiAgICAgKiBpLmUuIG11bHRpcGxpZWQgYnkgLTEuXHJcbiAgICAgKi9cclxuICAgIFAubmVnYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHggPSBuZXcgQmlnTnVtYmVyKHRoaXMpO1xyXG4gICAgICB4LnMgPSAteC5zIHx8IG51bGw7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuICsgMCA9IG5cclxuICAgICAqICBuICsgTiA9IE5cclxuICAgICAqICBuICsgSSA9IElcclxuICAgICAqICAwICsgbiA9IG5cclxuICAgICAqICAwICsgMCA9IDBcclxuICAgICAqICAwICsgTiA9IE5cclxuICAgICAqICAwICsgSSA9IElcclxuICAgICAqICBOICsgbiA9IE5cclxuICAgICAqICBOICsgMCA9IE5cclxuICAgICAqICBOICsgTiA9IE5cclxuICAgICAqICBOICsgSSA9IE5cclxuICAgICAqICBJICsgbiA9IElcclxuICAgICAqICBJICsgMCA9IElcclxuICAgICAqICBJICsgTiA9IE5cclxuICAgICAqICBJICsgSSA9IElcclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBwbHVzIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLlxyXG4gICAgICovXHJcbiAgICBQLnBsdXMgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICB2YXIgdCxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICBhID0geC5zO1xyXG5cclxuICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoeSwgYik7XHJcbiAgICAgIGIgPSB5LnM7XHJcblxyXG4gICAgICAvLyBFaXRoZXIgTmFOP1xyXG4gICAgICBpZiAoIWEgfHwgIWIpIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICAgICBpZiAoYSAhPSBiKSB7XHJcbiAgICAgICAgeS5zID0gLWI7XHJcbiAgICAgICAgcmV0dXJuIHgubWludXMoeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxyXG4gICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgwrFJbmZpbml0eS5cclxuICAgICAgICBpZiAoIXhjIHx8ICF5YykgcmV0dXJuIG5ldyBCaWdOdW1iZXIoYSAvIDApO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgemVybz9cclxuICAgICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLCB4IGlmIHggaXMgbm9uLXplcm8sIG9yIHplcm8gaWYgYm90aCBhcmUgemVyby5cclxuICAgICAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgcmV0dXJuIHljWzBdID8geSA6IG5ldyBCaWdOdW1iZXIoeGNbMF0gPyB4IDogYSAqIDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB4ZSA9IGJpdEZsb29yKHhlKTtcclxuICAgICAgeWUgPSBiaXRGbG9vcih5ZSk7XHJcbiAgICAgIHhjID0geGMuc2xpY2UoKTtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLiBGYXN0ZXIgdG8gdXNlIHJldmVyc2UgdGhlbiBkbyB1bnNoaWZ0cy5cclxuICAgICAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcbiAgICAgICAgaWYgKGEgPiAwKSB7XHJcbiAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgICB0ID0geGM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgICBmb3IgKDsgYS0tOyB0LnB1c2goMCkpO1xyXG4gICAgICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhID0geGMubGVuZ3RoO1xyXG4gICAgICBiID0geWMubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gUG9pbnQgeGMgdG8gdGhlIGxvbmdlciBhcnJheSwgYW5kIGIgdG8gdGhlIHNob3J0ZXIgbGVuZ3RoLlxyXG4gICAgICBpZiAoYSAtIGIgPCAwKSB0ID0geWMsIHljID0geGMsIHhjID0gdCwgYiA9IGE7XHJcblxyXG4gICAgICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5Yy5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4YyBjYW4gYmUgaWdub3JlZC5cclxuICAgICAgZm9yIChhID0gMDsgYjspIHtcclxuICAgICAgICBhID0gKHhjWy0tYl0gPSB4Y1tiXSArIHljW2JdICsgYSkgLyBCQVNFIHwgMDtcclxuICAgICAgICB4Y1tiXSA9IEJBU0UgPT09IHhjW2JdID8gMCA6IHhjW2JdICUgQkFTRTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGEpIHtcclxuICAgICAgICB4YyA9IFthXS5jb25jYXQoeGMpO1xyXG4gICAgICAgICsreWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgZm9yIHplcm8sIGFzICt4ICsgK3kgIT0gMCAmJiAteCArIC15ICE9IDBcclxuICAgICAgLy8geWUgPSBNQVhfRVhQICsgMSBwb3NzaWJsZVxyXG4gICAgICByZXR1cm4gbm9ybWFsaXNlKHksIHhjLCB5ZSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogSWYgc2QgaXMgdW5kZWZpbmVkIG9yIG51bGwgb3IgdHJ1ZSBvciBmYWxzZSwgcmV0dXJuIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzIG9mXHJcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICogSWYgc2QgaXMgdHJ1ZSBpbmNsdWRlIGludGVnZXItcGFydCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgY291bnQuXHJcbiAgICAgKlxyXG4gICAgICogT3RoZXJ3aXNlLCBpZiBzZCBpcyBhIG51bWJlciwgcmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAgICogQmlnTnVtYmVyIHJvdW5kZWQgdG8gYSBtYXhpbXVtIG9mIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAgICogUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAgICpcclxuICAgICAqIHNkIHtudW1iZXJ8Ym9vbGVhbn0gbnVtYmVyOiBzaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDEgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbjogd2hldGhlciB0byBjb3VudCBpbnRlZ2VyLXBhcnQgdHJhaWxpbmcgemVyb3M6IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtzZHxybX0nXHJcbiAgICAgKi9cclxuICAgIFAucHJlY2lzaW9uID0gUC5zZCA9IGZ1bmN0aW9uIChzZCwgcm0pIHtcclxuICAgICAgdmFyIGMsIG4sIHYsXHJcbiAgICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2QgIT0gbnVsbCAmJiBzZCAhPT0gISFzZCkge1xyXG4gICAgICAgIGludENoZWNrKHNkLCAxLCBNQVgpO1xyXG4gICAgICAgIGlmIChybSA9PSBudWxsKSBybSA9IFJPVU5ESU5HX01PREU7XHJcbiAgICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3VuZChuZXcgQmlnTnVtYmVyKHgpLCBzZCwgcm0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIShjID0geC5jKSkgcmV0dXJuIG51bGw7XHJcbiAgICAgIHYgPSBjLmxlbmd0aCAtIDE7XHJcbiAgICAgIG4gPSB2ICogTE9HX0JBU0UgKyAxO1xyXG5cclxuICAgICAgaWYgKHYgPSBjW3ZdKSB7XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3QgZWxlbWVudC5cclxuICAgICAgICBmb3IgKDsgdiAlIDEwID09IDA7IHYgLz0gMTAsIG4tLSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgICAgICBmb3IgKHYgPSBjWzBdOyB2ID49IDEwOyB2IC89IDEwLCBuKyspO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2QgJiYgeC5lICsgMSA+IG4pIG4gPSB4LmUgKyAxO1xyXG5cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgc2hpZnRlZCBieSBrIHBsYWNlc1xyXG4gICAgICogKHBvd2VycyBvZiAxMCkuIFNoaWZ0IHRvIHRoZSByaWdodCBpZiBuID4gMCwgYW5kIHRvIHRoZSBsZWZ0IGlmIG4gPCAwLlxyXG4gICAgICpcclxuICAgICAqIGsge251bWJlcn0gSW50ZWdlciwgLU1BWF9TQUZFX0lOVEVHRVIgdG8gTUFYX1NBRkVfSU5URUdFUiBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtrfSdcclxuICAgICAqL1xyXG4gICAgUC5zaGlmdGVkQnkgPSBmdW5jdGlvbiAoaykge1xyXG4gICAgICBpbnRDaGVjayhrLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUik7XHJcbiAgICAgIHJldHVybiB0aGlzLnRpbWVzKCcxZScgKyBrKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiAgc3FydCgtbikgPSAgTlxyXG4gICAgICogIHNxcnQoTikgPSAgTlxyXG4gICAgICogIHNxcnQoLUkpID0gIE5cclxuICAgICAqICBzcXJ0KEkpID0gIElcclxuICAgICAqICBzcXJ0KDApID0gIDBcclxuICAgICAqICBzcXJ0KC0wKSA9IC0wXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLFxyXG4gICAgICogcm91bmRlZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKi9cclxuICAgIFAuc3F1YXJlUm9vdCA9IFAuc3FydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIG0sIG4sIHIsIHJlcCwgdCxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICBjID0geC5jLFxyXG4gICAgICAgIHMgPSB4LnMsXHJcbiAgICAgICAgZSA9IHguZSxcclxuICAgICAgICBkcCA9IERFQ0lNQUxfUExBQ0VTICsgNCxcclxuICAgICAgICBoYWxmID0gbmV3IEJpZ051bWJlcignMC41Jyk7XHJcblxyXG4gICAgICAvLyBOZWdhdGl2ZS9OYU4vSW5maW5pdHkvemVybz9cclxuICAgICAgaWYgKHMgIT09IDEgfHwgIWMgfHwgIWNbMF0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcighcyB8fCBzIDwgMCAmJiAoIWMgfHwgY1swXSkgPyBOYU4gOiBjID8geCA6IDEgLyAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSW5pdGlhbCBlc3RpbWF0ZS5cclxuICAgICAgcyA9IE1hdGguc3FydCgrdmFsdWVPZih4KSk7XHJcblxyXG4gICAgICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xyXG4gICAgICAvLyBQYXNzIHggdG8gTWF0aC5zcXJ0IGFzIGludGVnZXIsIHRoZW4gYWRqdXN0IHRoZSBleHBvbmVudCBvZiB0aGUgcmVzdWx0LlxyXG4gICAgICBpZiAocyA9PSAwIHx8IHMgPT0gMSAvIDApIHtcclxuICAgICAgICBuID0gY29lZmZUb1N0cmluZyhjKTtcclxuICAgICAgICBpZiAoKG4ubGVuZ3RoICsgZSkgJSAyID09IDApIG4gKz0gJzAnO1xyXG4gICAgICAgIHMgPSBNYXRoLnNxcnQoK24pO1xyXG4gICAgICAgIGUgPSBiaXRGbG9vcigoZSArIDEpIC8gMikgLSAoZSA8IDAgfHwgZSAlIDIpO1xyXG5cclxuICAgICAgICBpZiAocyA9PSAxIC8gMCkge1xyXG4gICAgICAgICAgbiA9ICcxZScgKyBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XHJcbiAgICAgICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoJ2UnKSArIDEpICsgZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHIgPSBuZXcgQmlnTnVtYmVyKG4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHIgPSBuZXcgQmlnTnVtYmVyKHMgKyAnJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGZvciB6ZXJvLlxyXG4gICAgICAvLyByIGNvdWxkIGJlIHplcm8gaWYgTUlOX0VYUCBpcyBjaGFuZ2VkIGFmdGVyIHRoZSB0aGlzIHZhbHVlIHdhcyBjcmVhdGVkLlxyXG4gICAgICAvLyBUaGlzIHdvdWxkIGNhdXNlIGEgZGl2aXNpb24gYnkgemVybyAoeC90KSBhbmQgaGVuY2UgSW5maW5pdHkgYmVsb3csIHdoaWNoIHdvdWxkIGNhdXNlXHJcbiAgICAgIC8vIGNvZWZmVG9TdHJpbmcgdG8gdGhyb3cuXHJcbiAgICAgIGlmIChyLmNbMF0pIHtcclxuICAgICAgICBlID0gci5lO1xyXG4gICAgICAgIHMgPSBlICsgZHA7XHJcbiAgICAgICAgaWYgKHMgPCAzKSBzID0gMDtcclxuXHJcbiAgICAgICAgLy8gTmV3dG9uLVJhcGhzb24gaXRlcmF0aW9uLlxyXG4gICAgICAgIGZvciAoOyA7KSB7XHJcbiAgICAgICAgICB0ID0gcjtcclxuICAgICAgICAgIHIgPSBoYWxmLnRpbWVzKHQucGx1cyhkaXYoeCwgdCwgZHAsIDEpKSk7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZWZmVG9TdHJpbmcodC5jKS5zbGljZSgwLCBzKSA9PT0gKG4gPSBjb2VmZlRvU3RyaW5nKHIuYykpLnNsaWNlKDAsIHMpKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGUgZXhwb25lbnQgb2YgciBtYXkgaGVyZSBiZSBvbmUgbGVzcyB0aGFuIHRoZSBmaW5hbCByZXN1bHQgZXhwb25lbnQsXHJcbiAgICAgICAgICAgIC8vIGUuZyAwLjAwMDk5OTkgKGUtNCkgLS0+IDAuMDAxIChlLTMpLCBzbyBhZGp1c3QgcyBzbyB0aGUgcm91bmRpbmcgZGlnaXRzXHJcbiAgICAgICAgICAgIC8vIGFyZSBpbmRleGVkIGNvcnJlY3RseS5cclxuICAgICAgICAgICAgaWYgKHIuZSA8IGUpIC0tcztcclxuICAgICAgICAgICAgbiA9IG4uc2xpY2UocyAtIDMsIHMgKyAxKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZSA0dGggcm91bmRpbmcgZGlnaXQgbWF5IGJlIGluIGVycm9yIGJ5IC0xIHNvIGlmIHRoZSA0IHJvdW5kaW5nIGRpZ2l0c1xyXG4gICAgICAgICAgICAvLyBhcmUgOTk5OSBvciA0OTk5IChpLmUuIGFwcHJvYWNoaW5nIGEgcm91bmRpbmcgYm91bmRhcnkpIGNvbnRpbnVlIHRoZVxyXG4gICAgICAgICAgICAvLyBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgIGlmIChuID09ICc5OTk5JyB8fCAhcmVwICYmIG4gPT0gJzQ5OTknKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIE9uIHRoZSBmaXJzdCBpdGVyYXRpb24gb25seSwgY2hlY2sgdG8gc2VlIGlmIHJvdW5kaW5nIHVwIGdpdmVzIHRoZVxyXG4gICAgICAgICAgICAgIC8vIGV4YWN0IHJlc3VsdCBhcyB0aGUgbmluZXMgbWF5IGluZmluaXRlbHkgcmVwZWF0LlxyXG4gICAgICAgICAgICAgIGlmICghcmVwKSB7XHJcbiAgICAgICAgICAgICAgICByb3VuZCh0LCB0LmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0LnRpbWVzKHQpLmVxKHgpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHIgPSB0O1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGRwICs9IDQ7XHJcbiAgICAgICAgICAgICAgcyArPSA0O1xyXG4gICAgICAgICAgICAgIHJlcCA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIElmIHJvdW5kaW5nIGRpZ2l0cyBhcmUgbnVsbCwgMHswLDR9IG9yIDUwezAsM30sIGNoZWNrIGZvciBleGFjdFxyXG4gICAgICAgICAgICAgIC8vIHJlc3VsdC4gSWYgbm90LCB0aGVuIHRoZXJlIGFyZSBmdXJ0aGVyIGRpZ2l0cyBhbmQgbSB3aWxsIGJlIHRydXRoeS5cclxuICAgICAgICAgICAgICBpZiAoIStuIHx8ICErbi5zbGljZSgxKSAmJiBuLmNoYXJBdCgwKSA9PSAnNScpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUcnVuY2F0ZSB0byB0aGUgZmlyc3Qgcm91bmRpbmcgZGlnaXQuXHJcbiAgICAgICAgICAgICAgICByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDEpO1xyXG4gICAgICAgICAgICAgICAgbSA9ICFyLnRpbWVzKHIpLmVxKHgpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDEsIFJPVU5ESU5HX01PREUsIG0pO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGV4cG9uZW50aWFsIG5vdGF0aW9uIGFuZFxyXG4gICAgICogcm91bmRlZCB1c2luZyBST1VORElOR19NT0RFIHRvIGRwIGZpeGVkIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfHJtfSdcclxuICAgICAqL1xyXG4gICAgUC50b0V4cG9uZW50aWFsID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gICAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICAgIGRwKys7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZvcm1hdCh0aGlzLCBkcCwgcm0sIDEpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGZpeGVkLXBvaW50IG5vdGF0aW9uIHJvdW5kaW5nXHJcbiAgICAgKiB0byBkcCBmaXhlZCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBST1VORElOR19NT0RFIGlmIHJtIGlzIG9taXR0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogYXMgd2l0aCBKYXZhU2NyaXB0J3MgbnVtYmVyIHR5cGUsICgtMCkudG9GaXhlZCgwKSBpcyAnMCcsXHJcbiAgICAgKiBidXQgZS5nLiAoLTAuMDAwMDEpLnRvRml4ZWQoMCkgaXMgJy0wJy5cclxuICAgICAqXHJcbiAgICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICAgKi9cclxuICAgIFAudG9GaXhlZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgaWYgKGRwICE9IG51bGwpIHtcclxuICAgICAgICBpbnRDaGVjayhkcCwgMCwgTUFYKTtcclxuICAgICAgICBkcCA9IGRwICsgdGhpcy5lICsgMTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZm9ybWF0KHRoaXMsIGRwLCBybSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24gcm91bmRlZFxyXG4gICAgICogdXNpbmcgcm0gb3IgUk9VTkRJTkdfTU9ERSB0byBkcCBkZWNpbWFsIHBsYWNlcywgYW5kIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHByb3BlcnRpZXNcclxuICAgICAqIG9mIHRoZSBmb3JtYXQgb3IgRk9STUFUIG9iamVjdCAoc2VlIEJpZ051bWJlci5zZXQpLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBmb3JtYXR0aW5nIG9iamVjdCBtYXkgY29udGFpbiBzb21lIG9yIGFsbCBvZiB0aGUgcHJvcGVydGllcyBzaG93biBiZWxvdy5cclxuICAgICAqXHJcbiAgICAgKiBGT1JNQVQgPSB7XHJcbiAgICAgKiAgIHByZWZpeDogJycsXHJcbiAgICAgKiAgIGdyb3VwU2l6ZTogMyxcclxuICAgICAqICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICogICBncm91cFNlcGFyYXRvcjogJywnLFxyXG4gICAgICogICBkZWNpbWFsU2VwYXJhdG9yOiAnLicsXHJcbiAgICAgKiAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICogICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yOiAnXFx4QTAnLCAgICAgIC8vIG5vbi1icmVha2luZyBzcGFjZVxyXG4gICAgICogICBzdWZmaXg6ICcnXHJcbiAgICAgKiB9O1xyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqIFtmb3JtYXRdIHtvYmplY3R9IEZvcm1hdHRpbmcgb3B0aW9ucy4gU2VlIEZPUk1BVCBwYmplY3QgYWJvdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQgbm90IGFuIG9iamVjdDoge2Zvcm1hdH0nXHJcbiAgICAgKi9cclxuICAgIFAudG9Gb3JtYXQgPSBmdW5jdGlvbiAoZHAsIHJtLCBmb3JtYXQpIHtcclxuICAgICAgdmFyIHN0cixcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIGlmIChmb3JtYXQgPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChkcCAhPSBudWxsICYmIHJtICYmIHR5cGVvZiBybSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgZm9ybWF0ID0gcm07XHJcbiAgICAgICAgICBybSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkcCAmJiB0eXBlb2YgZHAgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIGZvcm1hdCA9IGRwO1xyXG4gICAgICAgICAgZHAgPSBybSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvcm1hdCA9IEZPUk1BVDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnQXJndW1lbnQgbm90IGFuIG9iamVjdDogJyArIGZvcm1hdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0ciA9IHgudG9GaXhlZChkcCwgcm0pO1xyXG5cclxuICAgICAgaWYgKHguYykge1xyXG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgYXJyID0gc3RyLnNwbGl0KCcuJyksXHJcbiAgICAgICAgICBnMSA9ICtmb3JtYXQuZ3JvdXBTaXplLFxyXG4gICAgICAgICAgZzIgPSArZm9ybWF0LnNlY29uZGFyeUdyb3VwU2l6ZSxcclxuICAgICAgICAgIGdyb3VwU2VwYXJhdG9yID0gZm9ybWF0Lmdyb3VwU2VwYXJhdG9yIHx8ICcnLFxyXG4gICAgICAgICAgaW50UGFydCA9IGFyclswXSxcclxuICAgICAgICAgIGZyYWN0aW9uUGFydCA9IGFyclsxXSxcclxuICAgICAgICAgIGlzTmVnID0geC5zIDwgMCxcclxuICAgICAgICAgIGludERpZ2l0cyA9IGlzTmVnID8gaW50UGFydC5zbGljZSgxKSA6IGludFBhcnQsXHJcbiAgICAgICAgICBsZW4gPSBpbnREaWdpdHMubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoZzIpIGkgPSBnMSwgZzEgPSBnMiwgZzIgPSBpLCBsZW4gLT0gaTtcclxuXHJcbiAgICAgICAgaWYgKGcxID4gMCAmJiBsZW4gPiAwKSB7XHJcbiAgICAgICAgICBpID0gbGVuICUgZzEgfHwgZzE7XHJcbiAgICAgICAgICBpbnRQYXJ0ID0gaW50RGlnaXRzLnN1YnN0cigwLCBpKTtcclxuICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpICs9IGcxKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnN1YnN0cihpLCBnMSk7XHJcbiAgICAgICAgICBpZiAoZzIgPiAwKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnNsaWNlKGkpO1xyXG4gICAgICAgICAgaWYgKGlzTmVnKSBpbnRQYXJ0ID0gJy0nICsgaW50UGFydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0ciA9IGZyYWN0aW9uUGFydFxyXG4gICAgICAgICA/IGludFBhcnQgKyAoZm9ybWF0LmRlY2ltYWxTZXBhcmF0b3IgfHwgJycpICsgKChnMiA9ICtmb3JtYXQuZnJhY3Rpb25Hcm91cFNpemUpXHJcbiAgICAgICAgICA/IGZyYWN0aW9uUGFydC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxkeycgKyBnMiArICd9XFxcXEInLCAnZycpLFxyXG4gICAgICAgICAgICckJicgKyAoZm9ybWF0LmZyYWN0aW9uR3JvdXBTZXBhcmF0b3IgfHwgJycpKVxyXG4gICAgICAgICAgOiBmcmFjdGlvblBhcnQpXHJcbiAgICAgICAgIDogaW50UGFydDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIChmb3JtYXQucHJlZml4IHx8ICcnKSArIHN0ciArIChmb3JtYXQuc3VmZml4IHx8ICcnKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgdHdvIEJpZ051bWJlcnMgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBhcyBhIHNpbXBsZVxyXG4gICAgICogZnJhY3Rpb24gd2l0aCBhbiBpbnRlZ2VyIG51bWVyYXRvciBhbmQgYW4gaW50ZWdlciBkZW5vbWluYXRvci5cclxuICAgICAqIFRoZSBkZW5vbWluYXRvciB3aWxsIGJlIGEgcG9zaXRpdmUgbm9uLXplcm8gdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWRcclxuICAgICAqIG1heGltdW0gZGVub21pbmF0b3IuIElmIGEgbWF4aW11bSBkZW5vbWluYXRvciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZGVub21pbmF0b3Igd2lsbCBiZVxyXG4gICAgICogdGhlIGxvd2VzdCB2YWx1ZSBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBudW1iZXIgZXhhY3RseS5cclxuICAgICAqXHJcbiAgICAgKiBbbWRdIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gSW50ZWdlciA+PSAxLCBvciBJbmZpbml0eS4gVGhlIG1heGltdW0gZGVub21pbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9IDoge21kfSdcclxuICAgICAqL1xyXG4gICAgUC50b0ZyYWN0aW9uID0gZnVuY3Rpb24gKG1kKSB7XHJcbiAgICAgIHZhciBkLCBkMCwgZDEsIGQyLCBlLCBleHAsIG4sIG4wLCBuMSwgcSwgciwgcyxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICB4YyA9IHguYztcclxuXHJcbiAgICAgIGlmIChtZCAhPSBudWxsKSB7XHJcbiAgICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobWQpO1xyXG5cclxuICAgICAgICAvLyBUaHJvdyBpZiBtZCBpcyBsZXNzIHRoYW4gb25lIG9yIGlzIG5vdCBhbiBpbnRlZ2VyLCB1bmxlc3MgaXQgaXMgSW5maW5pdHkuXHJcbiAgICAgICAgaWYgKCFuLmlzSW50ZWdlcigpICYmIChuLmMgfHwgbi5zICE9PSAxKSB8fCBuLmx0KE9ORSkpIHtcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdBcmd1bWVudCAnICtcclxuICAgICAgICAgICAgICAobi5pc0ludGVnZXIoKSA/ICdvdXQgb2YgcmFuZ2U6ICcgOiAnbm90IGFuIGludGVnZXI6ICcpICsgdmFsdWVPZihuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXhjKSByZXR1cm4gbmV3IEJpZ051bWJlcih4KTtcclxuXHJcbiAgICAgIGQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIG4xID0gZDAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIGQxID0gbjAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIHMgPSBjb2VmZlRvU3RyaW5nKHhjKTtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSBpbml0aWFsIGRlbm9taW5hdG9yLlxyXG4gICAgICAvLyBkIGlzIGEgcG93ZXIgb2YgMTAgYW5kIHRoZSBtaW5pbXVtIG1heCBkZW5vbWluYXRvciB0aGF0IHNwZWNpZmllcyB0aGUgdmFsdWUgZXhhY3RseS5cclxuICAgICAgZSA9IGQuZSA9IHMubGVuZ3RoIC0geC5lIC0gMTtcclxuICAgICAgZC5jWzBdID0gUE9XU19URU5bKGV4cCA9IGUgJSBMT0dfQkFTRSkgPCAwID8gTE9HX0JBU0UgKyBleHAgOiBleHBdO1xyXG4gICAgICBtZCA9ICFtZCB8fCBuLmNvbXBhcmVkVG8oZCkgPiAwID8gKGUgPiAwID8gZCA6IG4xKSA6IG47XHJcblxyXG4gICAgICBleHAgPSBNQVhfRVhQO1xyXG4gICAgICBNQVhfRVhQID0gMSAvIDA7XHJcbiAgICAgIG4gPSBuZXcgQmlnTnVtYmVyKHMpO1xyXG5cclxuICAgICAgLy8gbjAgPSBkMSA9IDBcclxuICAgICAgbjAuY1swXSA9IDA7XHJcblxyXG4gICAgICBmb3IgKDsgOykgIHtcclxuICAgICAgICBxID0gZGl2KG4sIGQsIDAsIDEpO1xyXG4gICAgICAgIGQyID0gZDAucGx1cyhxLnRpbWVzKGQxKSk7XHJcbiAgICAgICAgaWYgKGQyLmNvbXBhcmVkVG8obWQpID09IDEpIGJyZWFrO1xyXG4gICAgICAgIGQwID0gZDE7XHJcbiAgICAgICAgZDEgPSBkMjtcclxuICAgICAgICBuMSA9IG4wLnBsdXMocS50aW1lcyhkMiA9IG4xKSk7XHJcbiAgICAgICAgbjAgPSBkMjtcclxuICAgICAgICBkID0gbi5taW51cyhxLnRpbWVzKGQyID0gZCkpO1xyXG4gICAgICAgIG4gPSBkMjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZDIgPSBkaXYobWQubWludXMoZDApLCBkMSwgMCwgMSk7XHJcbiAgICAgIG4wID0gbjAucGx1cyhkMi50aW1lcyhuMSkpO1xyXG4gICAgICBkMCA9IGQwLnBsdXMoZDIudGltZXMoZDEpKTtcclxuICAgICAgbjAucyA9IG4xLnMgPSB4LnM7XHJcbiAgICAgIGUgPSBlICogMjtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSB3aGljaCBmcmFjdGlvbiBpcyBjbG9zZXIgdG8geCwgbjAvZDAgb3IgbjEvZDFcclxuICAgICAgciA9IGRpdihuMSwgZDEsIGUsIFJPVU5ESU5HX01PREUpLm1pbnVzKHgpLmFicygpLmNvbXBhcmVkVG8oXHJcbiAgICAgICAgICBkaXYobjAsIGQwLCBlLCBST1VORElOR19NT0RFKS5taW51cyh4KS5hYnMoKSkgPCAxID8gW24xLCBkMV0gOiBbbjAsIGQwXTtcclxuXHJcbiAgICAgIE1BWF9FWFAgPSBleHA7XHJcblxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGNvbnZlcnRlZCB0byBhIG51bWJlciBwcmltaXRpdmUuXHJcbiAgICAgKi9cclxuICAgIFAudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiArdmFsdWVPZih0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0c1xyXG4gICAgICogdXNpbmcgcm91bmRpbmcgbW9kZSBybSBvciBST1VORElOR19NT0RFLiBJZiBzZCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHNcclxuICAgICAqIG5lY2Vzc2FyeSB0byByZXByZXNlbnQgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24sIHRoZW4gdXNlXHJcbiAgICAgKiBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVggaW5jbHVzaXZlLlxyXG4gICAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAgICpcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7c2R8cm19J1xyXG4gICAgICovXHJcbiAgICBQLnRvUHJlY2lzaW9uID0gZnVuY3Rpb24gKHNkLCBybSkge1xyXG4gICAgICBpZiAoc2QgIT0gbnVsbCkgaW50Q2hlY2soc2QsIDEsIE1BWCk7XHJcbiAgICAgIHJldHVybiBmb3JtYXQodGhpcywgc2QsIHJtLCAyKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpbiBiYXNlIGIsIG9yIGJhc2UgMTAgaWYgYiBpc1xyXG4gICAgICogb21pdHRlZC4gSWYgYSBiYXNlIGlzIHNwZWNpZmllZCwgaW5jbHVkaW5nIGJhc2UgMTAsIHJvdW5kIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmRcclxuICAgICAqIFJPVU5ESU5HX01PREUuIElmIGEgYmFzZSBpcyBub3Qgc3BlY2lmaWVkLCBhbmQgdGhpcyBCaWdOdW1iZXIgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnRcclxuICAgICAqIHRoYXQgaXMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIFRPX0VYUF9QT1MsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuXHJcbiAgICAgKiBUT19FWFBfTkVHLCByZXR1cm4gZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogW2JdIHtudW1iZXJ9IEludGVnZXIsIDIgdG8gQUxQSEFCRVQubGVuZ3RoIGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICAgKi9cclxuICAgIFAudG9TdHJpbmcgPSBmdW5jdGlvbiAoYikge1xyXG4gICAgICB2YXIgc3RyLFxyXG4gICAgICAgIG4gPSB0aGlzLFxyXG4gICAgICAgIHMgPSBuLnMsXHJcbiAgICAgICAgZSA9IG4uZTtcclxuXHJcbiAgICAgIC8vIEluZmluaXR5IG9yIE5hTj9cclxuICAgICAgaWYgKGUgPT09IG51bGwpIHtcclxuICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgc3RyID0gJ0luZmluaXR5JztcclxuICAgICAgICAgIGlmIChzIDwgMCkgc3RyID0gJy0nICsgc3RyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdHIgPSAnTmFOJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyID0gY29lZmZUb1N0cmluZyhuLmMpO1xyXG5cclxuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XHJcbiAgICAgICAgICBzdHIgPSBlIDw9IFRPX0VYUF9ORUcgfHwgZSA+PSBUT19FWFBfUE9TXHJcbiAgICAgICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgZSlcclxuICAgICAgICAgICA6IHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGludENoZWNrKGIsIDIsIEFMUEhBQkVULmxlbmd0aCwgJ0Jhc2UnKTtcclxuICAgICAgICAgIHN0ciA9IGNvbnZlcnRCYXNlKHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyksIDEwLCBiLCBzLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzIDwgMCAmJiBuLmNbMF0pIHN0ciA9ICctJyArIHN0cjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYXMgdG9TdHJpbmcsIGJ1dCBkbyBub3QgYWNjZXB0IGEgYmFzZSBhcmd1bWVudCwgYW5kIGluY2x1ZGUgdGhlIG1pbnVzIHNpZ24gZm9yXHJcbiAgICAgKiBuZWdhdGl2ZSB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBQLnZhbHVlT2YgPSBQLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlT2YodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBQLl9pc0JpZ051bWJlciA9IHRydWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnKSB7XHJcbiAgICAgIFBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdCaWdOdW1iZXInO1xyXG4gICAgICAvLyBOb2RlLmpzIHYxMC4xMi4wK1xyXG4gICAgICBQW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gUC52YWx1ZU9mO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb25maWdPYmplY3QgIT0gbnVsbCkgQmlnTnVtYmVyLnNldChjb25maWdPYmplY3QpO1xyXG5cclxuICAgIHJldHVybiBCaWdOdW1iZXI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUFJJVkFURSBIRUxQRVIgRlVOQ1RJT05TXHJcblxyXG5cclxuICBmdW5jdGlvbiBiaXRGbG9vcihuKSB7XHJcbiAgICB2YXIgaSA9IG4gfCAwO1xyXG4gICAgcmV0dXJuIG4gPiAwIHx8IG4gPT09IGkgPyBpIDogaSAtIDE7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUmV0dXJuIGEgY29lZmZpY2llbnQgYXJyYXkgYXMgYSBzdHJpbmcgb2YgYmFzZSAxMCBkaWdpdHMuXHJcbiAgZnVuY3Rpb24gY29lZmZUb1N0cmluZyhhKSB7XHJcbiAgICB2YXIgcywgeixcclxuICAgICAgaSA9IDEsXHJcbiAgICAgIGogPSBhLmxlbmd0aCxcclxuICAgICAgciA9IGFbMF0gKyAnJztcclxuXHJcbiAgICBmb3IgKDsgaSA8IGo7KSB7XHJcbiAgICAgIHMgPSBhW2krK10gKyAnJztcclxuICAgICAgeiA9IExPR19CQVNFIC0gcy5sZW5ndGg7XHJcbiAgICAgIGZvciAoOyB6LS07IHMgPSAnMCcgKyBzKTtcclxuICAgICAgciArPSBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoaiA9IHIubGVuZ3RoOyByLmNoYXJDb2RlQXQoLS1qKSA9PT0gNDg7KTtcclxuXHJcbiAgICByZXR1cm4gci5zbGljZSgwLCBqICsgMSB8fCAxKTtcclxuICB9XHJcblxyXG5cclxuICAvLyBDb21wYXJlIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXJzIHggYW5kIHkuXHJcbiAgZnVuY3Rpb24gY29tcGFyZSh4LCB5KSB7XHJcbiAgICB2YXIgYSwgYixcclxuICAgICAgeGMgPSB4LmMsXHJcbiAgICAgIHljID0geS5jLFxyXG4gICAgICBpID0geC5zLFxyXG4gICAgICBqID0geS5zLFxyXG4gICAgICBrID0geC5lLFxyXG4gICAgICBsID0geS5lO1xyXG5cclxuICAgIC8vIEVpdGhlciBOYU4/XHJcbiAgICBpZiAoIWkgfHwgIWopIHJldHVybiBudWxsO1xyXG5cclxuICAgIGEgPSB4YyAmJiAheGNbMF07XHJcbiAgICBiID0geWMgJiYgIXljWzBdO1xyXG5cclxuICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgaWYgKGEgfHwgYikgcmV0dXJuIGEgPyBiID8gMCA6IC1qIDogaTtcclxuXHJcbiAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICBpZiAoaSAhPSBqKSByZXR1cm4gaTtcclxuXHJcbiAgICBhID0gaSA8IDA7XHJcbiAgICBiID0gayA9PSBsO1xyXG5cclxuICAgIC8vIEVpdGhlciBJbmZpbml0eT9cclxuICAgIGlmICgheGMgfHwgIXljKSByZXR1cm4gYiA/IDAgOiAheGMgXiBhID8gMSA6IC0xO1xyXG5cclxuICAgIC8vIENvbXBhcmUgZXhwb25lbnRzLlxyXG4gICAgaWYgKCFiKSByZXR1cm4gayA+IGwgXiBhID8gMSA6IC0xO1xyXG5cclxuICAgIGogPSAoayA9IHhjLmxlbmd0aCkgPCAobCA9IHljLmxlbmd0aCkgPyBrIDogbDtcclxuXHJcbiAgICAvLyBDb21wYXJlIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gICAgZm9yIChpID0gMDsgaSA8IGo7IGkrKykgaWYgKHhjW2ldICE9IHljW2ldKSByZXR1cm4geGNbaV0gPiB5Y1tpXSBeIGEgPyAxIDogLTE7XHJcblxyXG4gICAgLy8gQ29tcGFyZSBsZW5ndGhzLlxyXG4gICAgcmV0dXJuIGsgPT0gbCA/IDAgOiBrID4gbCBeIGEgPyAxIDogLTE7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBDaGVjayB0aGF0IG4gaXMgYSBwcmltaXRpdmUgbnVtYmVyLCBhbiBpbnRlZ2VyLCBhbmQgaW4gcmFuZ2UsIG90aGVyd2lzZSB0aHJvdy5cclxuICAgKi9cclxuICBmdW5jdGlvbiBpbnRDaGVjayhuLCBtaW4sIG1heCwgbmFtZSkge1xyXG4gICAgaWYgKG4gPCBtaW4gfHwgbiA+IG1heCB8fCBuICE9PSAobiA8IDAgPyBtYXRoY2VpbChuKSA6IG1hdGhmbG9vcihuKSkpIHtcclxuICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgIChiaWdudW1iZXJFcnJvciArIChuYW1lIHx8ICdBcmd1bWVudCcpICsgKHR5cGVvZiBuID09ICdudW1iZXInXHJcbiAgICAgICAgID8gbiA8IG1pbiB8fCBuID4gbWF4ID8gJyBvdXQgb2YgcmFuZ2U6ICcgOiAnIG5vdCBhbiBpbnRlZ2VyOiAnXHJcbiAgICAgICAgIDogJyBub3QgYSBwcmltaXRpdmUgbnVtYmVyOiAnKSArIFN0cmluZyhuKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQXNzdW1lcyBmaW5pdGUgbi5cclxuICBmdW5jdGlvbiBpc09kZChuKSB7XHJcbiAgICB2YXIgayA9IG4uYy5sZW5ndGggLSAxO1xyXG4gICAgcmV0dXJuIGJpdEZsb29yKG4uZSAvIExPR19CQVNFKSA9PSBrICYmIG4uY1trXSAlIDIgIT0gMDtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKHN0ciwgZSkge1xyXG4gICAgcmV0dXJuIChzdHIubGVuZ3RoID4gMSA/IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSkgOiBzdHIpICtcclxuICAgICAoZSA8IDAgPyAnZScgOiAnZSsnKSArIGU7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gdG9GaXhlZFBvaW50KHN0ciwgZSwgeikge1xyXG4gICAgdmFyIGxlbiwgenM7XHJcblxyXG4gICAgLy8gTmVnYXRpdmUgZXhwb25lbnQ/XHJcbiAgICBpZiAoZSA8IDApIHtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MuXHJcbiAgICAgIGZvciAoenMgPSB6ICsgJy4nOyArK2U7IHpzICs9IHopO1xyXG4gICAgICBzdHIgPSB6cyArIHN0cjtcclxuXHJcbiAgICAvLyBQb3NpdGl2ZSBleHBvbmVudFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIEFwcGVuZCB6ZXJvcy5cclxuICAgICAgaWYgKCsrZSA+IGxlbikge1xyXG4gICAgICAgIGZvciAoenMgPSB6LCBlIC09IGxlbjsgLS1lOyB6cyArPSB6KTtcclxuICAgICAgICBzdHIgKz0genM7XHJcbiAgICAgIH0gZWxzZSBpZiAoZSA8IGxlbikge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCBlKSArICcuJyArIHN0ci5zbGljZShlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gRVhQT1JUXHJcblxyXG5cclxuICBCaWdOdW1iZXIgPSBjbG9uZSgpO1xyXG4gIEJpZ051bWJlclsnZGVmYXVsdCddID0gQmlnTnVtYmVyLkJpZ051bWJlciA9IEJpZ051bWJlcjtcclxuXHJcbiAgLy8gQU1ELlxyXG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpZ051bWJlcjsgfSk7XHJcblxyXG4gIC8vIE5vZGUuanMgYW5kIG90aGVyIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMuXHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJpZ051bWJlcjtcclxuXHJcbiAgLy8gQnJvd3Nlci5cclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKCFnbG9iYWxPYmplY3QpIHtcclxuICAgICAgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiA/IHNlbGYgOiB3aW5kb3c7XHJcbiAgICB9XHJcblxyXG4gICAgZ2xvYmFsT2JqZWN0LkJpZ051bWJlciA9IEJpZ051bWJlcjtcclxuICB9XHJcbn0pKHRoaXMpO1xyXG4iLCJjb25zdCBpZGIgPSByZXF1aXJlKCdpZGInKTtcbmNvbnN0IEVvcyA9IHJlcXVpcmUoJ2Vvc2pzJyk7XG5jb25zdCB7QmlnTnVtYmVyfSA9IHJlcXVpcmUoJ2JpZ251bWJlci5qcycpO1xuXG5jb25zdCBuZXRDb25mID0gcmVxdWlyZSgnLi9jb25mJyk7XG5jb25zdCBTY2F0dGVyUGxheWVyID0gcmVxdWlyZSgnLi9zY2F0dGVyUGxheWVyJyk7XG5cbi8qKlxuICogZW52IG9mIGJyb3dzZXJcbiAqIEB0eXBlIHtpc1BjfVxuICovXG53aW5kb3cuZW52ID0gY2xhc3MgZW52IHtcbiAgICBzdGF0aWMgZ2V0IGlzUGMoKSB7XG4gICAgICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBvZHxCbGFja0JlcnJ5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIGVvc2pzXG4gKiBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Vvc2pzfVxuICogQHR5cGUge0Vvc31cbiAqL1xud2luZG93LmVvc2pzID0gRW9zO1xuXG4vKipcbiAqIGJpZyBudW1iZXJcbiAqIEBzZWUge0B1cmwgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmlnbnVtYmVyLmpzfVxuICogQHR5cGUge0JpZ051bWJlcn1cbiAqL1xud2luZG93LkJpZ051bWJlciA9IEJpZ051bWJlcjtcblxuLyoqXG4gKiBpbmRleCBkYXRhIGJhc2VcbiAqIEBzZWUge0B1cmwgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaWRiIH1cbiAqL1xud2luZG93LmlkYiA9IGlkYjtcblxuLyoqXG4gKiB0aGUgZW9zIHBsYXllclxuICogQHR5cGUge1BsYXllcn1cbiAqL1xud2luZG93LmVvc3BsYXllciA9IG5ldyBTY2F0dGVyUGxheWVyKG5ldENvbmYpOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiB0b0FycmF5KGFycikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKSB7XG4gICAgdmFyIHJlcXVlc3Q7XG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3QgPSBvYmpbbWV0aG9kXS5hcHBseShvYmosIGFyZ3MpO1xuICAgICAgcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBwLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKTtcbiAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgcC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UHJvcGVydGllcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUNsYXNzLnByb3RvdHlwZSwgcHJvcCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdLmFwcGx5KHRoaXNbdGFyZ2V0UHJvcF0sIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEluZGV4KGluZGV4KSB7XG4gICAgdGhpcy5faW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhJbmRleCwgJ19pbmRleCcsIFtcbiAgICAnbmFtZScsXG4gICAgJ2tleVBhdGgnLFxuICAgICdtdWx0aUVudHJ5JyxcbiAgICAndW5pcXVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnZ2V0JyxcbiAgICAnZ2V0S2V5JyxcbiAgICAnZ2V0QWxsJyxcbiAgICAnZ2V0QWxsS2V5cycsXG4gICAgJ2NvdW50J1xuICBdKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnb3BlbkN1cnNvcicsXG4gICAgJ29wZW5LZXlDdXJzb3InXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIEN1cnNvcihjdXJzb3IsIHJlcXVlc3QpIHtcbiAgICB0aGlzLl9jdXJzb3IgPSBjdXJzb3I7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoQ3Vyc29yLCAnX2N1cnNvcicsIFtcbiAgICAnZGlyZWN0aW9uJyxcbiAgICAna2V5JyxcbiAgICAncHJpbWFyeUtleScsXG4gICAgJ3ZhbHVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEN1cnNvciwgJ19jdXJzb3InLCBJREJDdXJzb3IsIFtcbiAgICAndXBkYXRlJyxcbiAgICAnZGVsZXRlJ1xuICBdKTtcblxuICAvLyBwcm94eSAnbmV4dCcgbWV0aG9kc1xuICBbJ2FkdmFuY2UnLCAnY29udGludWUnLCAnY29udGludWVQcmltYXJ5S2V5J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgaWYgKCEobWV0aG9kTmFtZSBpbiBJREJDdXJzb3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgIEN1cnNvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJzb3IgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgY3Vyc29yLl9jdXJzb3JbbWV0aG9kTmFtZV0uYXBwbHkoY3Vyc29yLl9jdXJzb3IsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChjdXJzb3IuX3JlcXVlc3QpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIGN1cnNvci5fcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gT2JqZWN0U3RvcmUoc3RvcmUpIHtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICB9XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmNyZWF0ZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5jcmVhdGVJbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5pbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ2luZGV4TmFtZXMnLFxuICAgICdhdXRvSW5jcmVtZW50J1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAncHV0JyxcbiAgICAnYWRkJyxcbiAgICAnZGVsZXRlJyxcbiAgICAnY2xlYXInLFxuICAgICdnZXQnLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAnZGVsZXRlSW5kZXgnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKGlkYlRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fdHggPSBpZGJUcmFuc2FjdGlvbjtcbiAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5vYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fdHgub2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fdHgsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhUcmFuc2FjdGlvbiwgJ190eCcsIFtcbiAgICAnb2JqZWN0U3RvcmVOYW1lcycsXG4gICAgJ21vZGUnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhUcmFuc2FjdGlvbiwgJ190eCcsIElEQlRyYW5zYWN0aW9uLCBbXG4gICAgJ2Fib3J0J1xuICBdKTtcblxuICBmdW5jdGlvbiBVcGdyYWRlREIoZGIsIG9sZFZlcnNpb24sIHRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgICB0aGlzLm9sZFZlcnNpb24gPSBvbGRWZXJzaW9uO1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgVXBncmFkZURCLnByb3RvdHlwZS5jcmVhdGVPYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fZGIuY3JlYXRlT2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhVcGdyYWRlREIsICdfZGInLCBbXG4gICAgJ25hbWUnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFVwZ3JhZGVEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2RlbGV0ZU9iamVjdFN0b3JlJyxcbiAgICAnY2xvc2UnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIERCKGRiKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgfVxuXG4gIERCLnByb3RvdHlwZS50cmFuc2FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24odGhpcy5fZGIudHJhbnNhY3Rpb24uYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoREIsICdfZGInLCBJREJEYXRhYmFzZSwgW1xuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgLy8gQWRkIGN1cnNvciBpdGVyYXRvcnNcbiAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBicm93c2VycyBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aCBwcm9taXNlc1xuICBbJ29wZW5DdXJzb3InLCAnb3BlbktleUN1cnNvciddLmZvckVhY2goZnVuY3Rpb24oZnVuY05hbWUpIHtcbiAgICBbT2JqZWN0U3RvcmUsIEluZGV4XS5mb3JFYWNoKGZ1bmN0aW9uKENvbnN0cnVjdG9yKSB7XG4gICAgICAvLyBEb24ndCBjcmVhdGUgaXRlcmF0ZUtleUN1cnNvciBpZiBvcGVuS2V5Q3Vyc29yIGRvZXNuJ3QgZXhpc3QuXG4gICAgICBpZiAoIShmdW5jTmFtZSBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG5cbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jTmFtZS5yZXBsYWNlKCdvcGVuJywgJ2l0ZXJhdGUnKV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG5hdGl2ZU9iamVjdCA9IHRoaXMuX3N0b3JlIHx8IHRoaXMuX2luZGV4O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IG5hdGl2ZU9iamVjdFtmdW5jTmFtZV0uYXBwbHkobmF0aXZlT2JqZWN0LCBhcmdzLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcG9seWZpbGwgZ2V0QWxsXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCkgcmV0dXJuO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihxdWVyeSwgY291bnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgaW5zdGFuY2UuaXRlcmF0ZUN1cnNvcihxdWVyeSwgZnVuY3Rpb24oY3Vyc29yKSB7XG4gICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPT0gY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgZXhwID0ge1xuICAgIG9wZW46IGZ1bmN0aW9uKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdvcGVuJywgW25hbWUsIHZlcnNpb25dKTtcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgICAgdXBncmFkZUNhbGxiYWNrKG5ldyBVcGdyYWRlREIocmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24sIHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlbGYuaWRiID0gZXhwO1xuICB9XG59KCkpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEluIHNsb3BweSBtb2RlLCB1bmJvdW5kIGB0aGlzYCByZWZlcnMgdG8gdGhlIGdsb2JhbCBvYmplY3QsIGZhbGxiYWNrIHRvXG4gIC8vIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGlmIHdlJ3JlIGluIGdsb2JhbCBzdHJpY3QgbW9kZS4gVGhhdCBpcyBzYWRseSBhIGZvcm1cbiAgLy8gb2YgaW5kaXJlY3QgZXZhbCB3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeS5cbiAgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBZXMgPSByZXF1aXJlKFwiLi9hZXNcIik7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoXCIuL2tleV9wcml2YXRlXCIpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoXCIuL2tleV9wdWJsaWNcIik7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZShcIi4vc2lnbmF0dXJlXCIpO1xudmFyIGtleV91dGlscyA9IHJlcXVpcmUoXCIuL2tleV91dGlsc1wiKTtcbnZhciBoYXNoID0gcmVxdWlyZShcIi4vaGFzaFwiKTtcblxuLyoqXG4gICAgW1dhbGxldCBJbXBvcnQgRm9ybWF0XShodHRwczovL2VuLmJpdGNvaW4uaXQvd2lraS9XYWxsZXRfaW1wb3J0X2Zvcm1hdClcbiAgICBAdHlwZWRlZiB7c3RyaW5nfSB3aWZcbiovXG4vKipcbiAgICBFT1NLZXkuLlxuICAgIEB0eXBlZGVmIHtzdHJpbmd9IHB1YmtleVxuKi9cblxuLyoqIEBuYW1lc3BhY2UgKi9cbnZhciBlY2MgPSB7XG4gICAgLyoqXG4gICAgICBJbml0aWFsaXplIGJ5IHJ1bm5pbmcgc29tZSBzZWxmLWNoZWNraW5nIGNvZGUuICBUaGlzIHNob3VsZCB0YWtlIGFcbiAgICAgIHNlY29uZCB0byBnYXRoZXIgYWRkaXRpb25hbCBDUFUgZW50cm9weSB1c2VkIGR1cmluZyBwcml2YXRlIGtleVxuICAgICAgZ2VuZXJhdGlvbi5cbiAgICAgICBJbml0aWFsaXphdGlvbiBoYXBwZW5zIG9uY2UgZXZlbiBpZiBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgQHJldHVybiB7UHJvbWlzZX1cbiAgICAqL1xuICAgIGluaXRpYWxpemU6IFByaXZhdGVLZXkuaW5pdGlhbGl6ZSxcblxuICAgIC8qKlxuICAgICAgRG9lcyBub3QgcGF1c2UgdG8gZ2F0aGVyIENQVSBlbnRyb3B5LlxuICAgICAgQHJldHVybiB7UHJvbWlzZTxQcml2YXRlS2V5Pn0gdGVzdCBrZXlcbiAgICAqL1xuICAgIHVuc2FmZVJhbmRvbUtleTogZnVuY3Rpb24gdW5zYWZlUmFuZG9tS2V5KCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS51bnNhZmVSYW5kb21LZXkoKS50aGVuKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBAYXJnIHtudW1iZXJ9IFtjcHVFbnRyb3B5Qml0cyA9IDBdIGdhdGhlciBhZGRpdGlvbmFsIGVudHJvcHlcbiAgICAgICAgZnJvbSBhIENQVSBtaW5pbmcgYWxnb3JpdGhtLiAgVGhpcyB3aWxsIGFscmVhZHkgaGFwcGVuIG9uY2UgYnlcbiAgICAgICAgZGVmYXVsdC5cbiAgICAgICAgIEByZXR1cm4ge1Byb21pc2U8d2lmPn1cbiAgICAgICAgIEBleGFtcGxlXG4gICAgZWNjLnJhbmRvbUtleSgpLnRoZW4ocHJpdmF0ZUtleSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1ByaXZhdGUgS2V5OlxcdCcsIHByaXZhdGVLZXkpIC8vIHdpZlxuICAgIGNvbnNvbGUubG9nKCdQdWJsaWMgS2V5OlxcdCcsIGVjYy5wcml2YXRlVG9QdWJsaWMocHJpdmF0ZUtleSkpIC8vIEVPU2tleS4uLlxuICAgIH0pXG4gICAgKi9cbiAgICByYW5kb21LZXk6IGZ1bmN0aW9uIHJhbmRvbUtleShjcHVFbnRyb3B5Qml0cykge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5yYW5kb21LZXkoY3B1RW50cm9weUJpdHMpLnRoZW4oZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleS50b1N0cmluZygpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgICBAYXJnIHtzdHJpbmd9IHNlZWQgLSBhbnkgbGVuZ3RoIHN0cmluZy4gIFRoaXMgaXMgcHJpdmF0ZS4gIFRoZSBzYW1lXG4gICAgICAgIHNlZWQgcHJvZHVjZXMgdGhlIHNhbWUgcHJpdmF0ZSBrZXkgZXZlcnkgdGltZS4gIEF0IGxlYXN0IDEyOCByYW5kb21cbiAgICAgICAgYml0cyBzaG91bGQgYmUgdXNlZCB0byBwcm9kdWNlIGEgZ29vZCBwcml2YXRlIGtleS5cbiAgICAgICAgQHJldHVybiB7d2lmfVxuICAgICAgICAgQGV4YW1wbGUgZWNjLnNlZWRQcml2YXRlKCdzZWNyZXQnKSA9PT0gd2lmXG4gICAgKi9cbiAgICBzZWVkUHJpdmF0ZTogZnVuY3Rpb24gc2VlZFByaXZhdGUoc2VlZCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU2VlZChzZWVkKS50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7d2lmfSB3aWZcbiAgICAgICAgQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXSAtIHB1YmxpYyBrZXkgcHJlZml4XG4gICAgICAgICBAcmV0dXJuIHtwdWJrZXl9XG4gICAgICAgICBAZXhhbXBsZSBlY2MucHJpdmF0ZVRvUHVibGljKHdpZikgPT09IHB1YmtleVxuICAgICovXG4gICAgcHJpdmF0ZVRvUHVibGljOiBmdW5jdGlvbiBwcml2YXRlVG9QdWJsaWMod2lmKSB7XG4gICAgICAgIHZhciBwdWJrZXlfcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnRU9TJztcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkod2lmKS50b1B1YmxpYygpLnRvU3RyaW5nKHB1YmtleV9wcmVmaXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7cHVia2V5fSBwdWJrZXkgLSBsaWtlIEVPU0tleS4uXG4gICAgICAgIEBhcmcge3N0cmluZ30gW3B1YmtleV9wcmVmaXggPSAnRU9TJ11cbiAgICAgICAgIEByZXR1cm4ge2Jvb2xlYW59IHZhbGlkXG4gICAgICAgICBAZXhhbXBsZSBlY2MuaXNWYWxpZFB1YmxpYyhwdWJrZXkpID09PSB0cnVlXG4gICAgKi9cbiAgICBpc1ZhbGlkUHVibGljOiBmdW5jdGlvbiBpc1ZhbGlkUHVibGljKHB1YmtleSkge1xuICAgICAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuaXNWYWxpZChwdWJrZXksIHB1YmtleV9wcmVmaXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7d2lmfSB3aWZcbiAgICAgICAgQHJldHVybiB7Ym9vbGVhbn0gdmFsaWRcbiAgICAgICAgIEBleGFtcGxlIGVjYy5pc1ZhbGlkUHJpdmF0ZSh3aWYpID09PSB0cnVlXG4gICAgKi9cbiAgICBpc1ZhbGlkUHJpdmF0ZTogZnVuY3Rpb24gaXNWYWxpZFByaXZhdGUod2lmKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LmlzVmFsaWQod2lmKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIENyZWF0ZSBhIHNpZ25hdHVyZSB1c2luZyBkYXRhIG9yIGEgaGFzaC5cbiAgICAgICAgIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGFcbiAgICAgICAgQGFyZyB7d2lmfFByaXZhdGVLZXl9IHByaXZhdGVLZXlcbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAndXRmOCddIC0gZGF0YSBlbmNvZGluZyAoaWYgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7c3RyaW5nfSBzdHJpbmcgc2lnbmF0dXJlXG4gICAgICAgICBAZXhhbXBsZSBlY2Muc2lnbignSSBhbSBhbGl2ZScsIHdpZilcbiAgICAqL1xuICAgIHNpZ246IGZ1bmN0aW9uIHNpZ24oZGF0YSwgcHJpdmF0ZUtleSkge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICd1dGY4JztcblxuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FQSSBjaGFuZ2VkLCB1c2Ugc2lnbkhhc2goLi4pIGluc3RlYWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnV2FybmluZzogZWNjLnNpZ24gaGFzaERhdGEgcGFyYW1ldGVyIHdhcyByZW1vdmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNpZ25hdHVyZS5zaWduKGRhdGEsIHByaXZhdGVLZXksIGVuY29kaW5nKS50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YVNoYTI1NiAtIHNoYTI1NiBoYXNoIDMyIGJ5dGUgYnVmZmVyIG9yIHN0cmluZ1xuICAgICAgICBAYXJnIHt3aWZ8UHJpdmF0ZUtleX0gcHJpdmF0ZUtleVxuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICdoZXgnXSAtIGRhdGFTaGEyNTYgZW5jb2RpbmcgKGlmIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge3N0cmluZ30gc3RyaW5nIHNpZ25hdHVyZVxuICAgICovXG4gICAgc2lnbkhhc2g6IGZ1bmN0aW9uIHNpZ25IYXNoKGRhdGFTaGEyNTYsIHByaXZhdGVLZXkpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaGV4JztcblxuICAgICAgICByZXR1cm4gU2lnbmF0dXJlLnNpZ25IYXNoKGRhdGFTaGEyNTYsIHByaXZhdGVLZXksIGVuY29kaW5nKS50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgVmVyaWZ5IHNpZ25lZCBkYXRhLlxuICAgICAgICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gc2lnbmF0dXJlIC0gYnVmZmVyIG9yIGhleCBzdHJpbmdcbiAgICAgICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YVxuICAgICAgICBAYXJnIHtwdWJrZXl8UHVibGljS2V5fSBwdWJrZXlcbiAgICAgICAgQGFyZyB7Ym9vbGVhbn0gW2hhc2hEYXRhID0gdHJ1ZV0gLSBzaGEyNTYgaGFzaCBkYXRhIGJlZm9yZSB2ZXJpZnlcbiAgICAgICAgQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgICAgIEBleGFtcGxlIGVjYy52ZXJpZnkoc2lnbmF0dXJlLCAnSSBhbSBhbGl2ZScsIHB1YmtleSkgPT09IHRydWVcbiAgICAqL1xuICAgIHZlcmlmeTogZnVuY3Rpb24gdmVyaWZ5KHNpZ25hdHVyZSwgZGF0YSwgcHVia2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJ3V0ZjgnO1xuXG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQVBJIGNoYW5nZWQsIHVzZSB2ZXJpZnlIYXNoKC4uKSBpbnN0ZWFkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1dhcm5pbmc6IGVjYy52ZXJpZnkgaGFzaERhdGEgcGFyYW1ldGVyIHdhcyByZW1vdmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20oc2lnbmF0dXJlKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS52ZXJpZnkoZGF0YSwgcHVia2V5LCBlbmNvZGluZyk7XG4gICAgfSxcblxuICAgIHZlcmlmeUhhc2g6IGZ1bmN0aW9uIHZlcmlmeUhhc2goc2lnbmF0dXJlLCBkYXRhU2hhMjU2LCBwdWJrZXkpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnaGV4JztcblxuICAgICAgICBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmUpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlLnZlcmlmeUhhc2goZGF0YVNoYTI1NiwgcHVia2V5LCBlbmNvZGluZyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICAgIFJlY292ZXIgdGhlIHB1YmxpYyBrZXkgdXNlZCB0byBjcmVhdGUgdGhlIHNpZ25hdHVyZS5cbiAgICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IHNpZ25hdHVyZSAoRU9TYmFzZTU4c2lnLi4sIEhleCwgQnVmZmVyKVxuICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBkYXRhIC0gZnVsbCBkYXRhXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ3V0ZjgnXSAtIGRhdGEgZW5jb2RpbmcgKGlmIGRhdGEgaXMgYSBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtwdWJrZXl9XG4gICAgICAgICBAZXhhbXBsZSBlY2MucmVjb3ZlcihzaWduYXR1cmUsICdJIGFtIGFsaXZlJykgPT09IHB1YmtleVxuICAgICovXG4gICAgcmVjb3ZlcjogZnVuY3Rpb24gcmVjb3ZlcihzaWduYXR1cmUsIGRhdGEpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAndXRmOCc7XG5cbiAgICAgICAgaWYgKGVuY29kaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBUEkgY2hhbmdlZCwgdXNlIHJlY292ZXJIYXNoKHNpZ25hdHVyZSwgZGF0YSkgaW5zdGVhZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXYXJuaW5nOiBlY2MucmVjb3ZlciBoYXNoRGF0YSBwYXJhbWV0ZXIgd2FzIHJlbW92ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmUpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXIoZGF0YSwgZW5jb2RpbmcpLnRvU3RyaW5nKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBzaWduYXR1cmUgKEVPU2Jhc2U1OHNpZy4uLCBIZXgsIEJ1ZmZlcilcbiAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YVNoYTI1NiAtIHNoYTI1NiBoYXNoIDMyIGJ5dGUgYnVmZmVyIG9yIGhleCBzdHJpbmdcbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAnaGV4J10gLSBkYXRhU2hhMjU2IGVuY29kaW5nIChpZiBkYXRhU2hhMjU2IGlzIGEgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7UHVibGljS2V5fVxuICAgICovXG4gICAgcmVjb3Zlckhhc2g6IGZ1bmN0aW9uIHJlY292ZXJIYXNoKHNpZ25hdHVyZSwgZGF0YVNoYTI1Nikge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdoZXgnO1xuXG4gICAgICAgIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHNpZ25hdHVyZSk7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmUucmVjb3Zlckhhc2goZGF0YVNoYTI1NiwgZW5jb2RpbmcpLnRvU3RyaW5nKCk7XG4gICAgfSxcblxuICAgIC8qKiBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhIC0gYWx3YXlzIGJpbmFyeSwgeW91IG1heSBuZWVkIEJ1ZmZlci5mcm9tKGRhdGEsICdoZXgnKVxuICAgICAgICBAYXJnIHtzdHJpbmd9IFtlbmNvZGluZyA9ICdoZXgnXSAtIHJlc3VsdCBlbmNvZGluZyAnaGV4JywgJ2JpbmFyeScgb3IgJ2Jhc2U2NCdcbiAgICAgICAgQHJldHVybiB7c3RyaW5nfEJ1ZmZlcn0gLSBCdWZmZXIgd2hlbiBlbmNvZGluZyBpcyBudWxsLCBvciBzdHJpbmdcbiAgICAgICAgIEBleGFtcGxlIGVjYy5zaGEyNTYoJ2hhc2htZScpID09PSAnMDIyMDhiLi4nXG4gICAgICAgIEBleGFtcGxlIGVjYy5zaGEyNTYoQnVmZmVyLmZyb20oJzAyMjA4YicsICdoZXgnKSkgPT09ICcyOWEyMy4uJ1xuICAgICovXG4gICAgc2hhMjU2OiBmdW5jdGlvbiBzaGEyNTYoZGF0YSkge1xuICAgICAgICB2YXIgcmVzdWx0RW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdoZXgnO1xuICAgICAgICByZXR1cm4gaGFzaC5zaGEyNTYoZGF0YSwgcmVzdWx0RW5jb2RpbmcpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZWNjOyIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLypcclxuIENvcHlyaWdodCAyMDEzIERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiBDb3B5cmlnaHQgMjAwOSBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG5cclxuIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcclxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBsaWNlbnNlIGxvbmcuanMgKGMpIDIwMTMgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxyXG4gKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2xvbmcuanMgZm9yIGRldGFpbHNcclxuICovXHJcbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcclxuXHJcbiAgICAvKiBBTUQgKi8gaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lW1wiYW1kXCJdKVxyXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XHJcbiAgICAvKiBDb21tb25KUyAqLyBlbHNlIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZSAmJiBtb2R1bGVbXCJleHBvcnRzXCJdKVxyXG4gICAgICAgIG1vZHVsZVtcImV4cG9ydHNcIl0gPSBmYWN0b3J5KCk7XHJcbiAgICAvKiBHbG9iYWwgKi8gZWxzZVxyXG4gICAgICAgIChnbG9iYWxbXCJkY29kZUlPXCJdID0gZ2xvYmFsW1wiZGNvZGVJT1wiXSB8fCB7fSlbXCJMb25nXCJdID0gZmFjdG9yeSgpO1xyXG5cclxufSkodGhpcywgZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdHMgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyLCBnaXZlbiBpdHMgbG93IGFuZCBoaWdoIDMyIGJpdCB2YWx1ZXMgYXMgKnNpZ25lZCogaW50ZWdlcnMuXHJcbiAgICAgKiAgU2VlIHRoZSBmcm9tKiBmdW5jdGlvbnMgYmVsb3cgZm9yIG1vcmUgY29udmVuaWVudCB3YXlzIG9mIGNvbnN0cnVjdGluZyBMb25ncy5cclxuICAgICAqIEBleHBvcnRzIExvbmdcclxuICAgICAqIEBjbGFzcyBBIExvbmcgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIDY0IGJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIgdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93IFRoZSBsb3cgKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgbG9uZ1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgbG9uZ1xyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIHNpZ25lZFxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIExvbmcobG93LCBoaWdoLCB1bnNpZ25lZCkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG93IDMyIGJpdHMgYXMgYSBzaWduZWQgdmFsdWUuXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmxvdyA9IGxvdyB8IDA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBoaWdoIDMyIGJpdHMgYXMgYSBzaWduZWQgdmFsdWUuXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmhpZ2ggPSBoaWdoIHwgMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hldGhlciB1bnNpZ25lZCBvciBub3QuXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy51bnNpZ25lZCA9ICEhdW5zaWduZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGEgbG9uZyBpcyB0aGUgdHdvIGdpdmVuIHNpZ25lZCwgMzItYml0IHZhbHVlcy5cclxuICAgIC8vIFdlIHVzZSAzMi1iaXQgcGllY2VzIGJlY2F1c2UgdGhlc2UgYXJlIHRoZSBzaXplIG9mIGludGVnZXJzIG9uIHdoaWNoXHJcbiAgICAvLyBKYXZhc2NyaXB0IHBlcmZvcm1zIGJpdC1vcGVyYXRpb25zLiAgRm9yIG9wZXJhdGlvbnMgbGlrZSBhZGRpdGlvbiBhbmRcclxuICAgIC8vIG11bHRpcGxpY2F0aW9uLCB3ZSBzcGxpdCBlYWNoIG51bWJlciBpbnRvIDE2IGJpdCBwaWVjZXMsIHdoaWNoIGNhbiBlYXNpbHkgYmVcclxuICAgIC8vIG11bHRpcGxpZWQgd2l0aGluIEphdmFzY3JpcHQncyBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiB3aXRob3V0IG92ZXJmbG93XHJcbiAgICAvLyBvciBjaGFuZ2UgaW4gc2lnbi5cclxuICAgIC8vXHJcbiAgICAvLyBJbiB0aGUgYWxnb3JpdGhtcyBiZWxvdywgd2UgZnJlcXVlbnRseSByZWR1Y2UgdGhlIG5lZ2F0aXZlIGNhc2UgdG8gdGhlXHJcbiAgICAvLyBwb3NpdGl2ZSBjYXNlIGJ5IG5lZ2F0aW5nIHRoZSBpbnB1dChzKSBhbmQgdGhlbiBwb3N0LXByb2Nlc3NpbmcgdGhlIHJlc3VsdC5cclxuICAgIC8vIE5vdGUgdGhhdCB3ZSBtdXN0IEFMV0FZUyBjaGVjayBzcGVjaWFsbHkgd2hldGhlciB0aG9zZSB2YWx1ZXMgYXJlIE1JTl9WQUxVRVxyXG4gICAgLy8gKC0yXjYzKSBiZWNhdXNlIC1NSU5fVkFMVUUgPT0gTUlOX1ZBTFVFIChzaW5jZSAyXjYzIGNhbm5vdCBiZSByZXByZXNlbnRlZCBhc1xyXG4gICAgLy8gYSBwb3NpdGl2ZSBudW1iZXIsIGl0IG92ZXJmbG93cyBiYWNrIGludG8gYSBuZWdhdGl2ZSkuICBOb3QgaGFuZGxpbmcgdGhpc1xyXG4gICAgLy8gY2FzZSB3b3VsZCBvZnRlbiByZXN1bHQgaW4gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4gICAgLy9cclxuICAgIC8vIENvbW1vbiBjb25zdGFudCB2YWx1ZXMgWkVSTywgT05FLCBORUdfT05FLCBldGMuIGFyZSBkZWZpbmVkIGJlbG93IHRoZSBmcm9tKlxyXG4gICAgLy8gbWV0aG9kcyBvbiB3aGljaCB0aGV5IGRlcGVuZC5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGluZGljYXRvciB1c2VkIHRvIHJlbGlhYmx5IGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBMb25nIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBMb25nLnByb3RvdHlwZS5fX2lzTG9uZ19fO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb25nLnByb3RvdHlwZSwgXCJfX2lzTG9uZ19fXCIsIHtcclxuICAgICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpc0xvbmcob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIChvYmogJiYgb2JqW1wiX19pc0xvbmdfX1wiXSkgPT09IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhIExvbmcuXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmcuaXNMb25nID0gaXNMb25nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBjYWNoZSBvZiB0aGUgTG9uZyByZXByZXNlbnRhdGlvbnMgb2Ygc21hbGwgaW50ZWdlciB2YWx1ZXMuXHJcbiAgICAgKiBAdHlwZSB7IU9iamVjdH1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgSU5UX0NBQ0hFID0ge307XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy5cclxuICAgICAqIEB0eXBlIHshT2JqZWN0fVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBVSU5UX0NBQ0hFID0ge307XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbUludCh2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgICAgICB2YXIgb2JqLCBjYWNoZWRPYmosIGNhY2hlO1xyXG4gICAgICAgIGlmICh1bnNpZ25lZCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDA7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZSA9ICgwIDw9IHZhbHVlICYmIHZhbHVlIDwgMjU2KSkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkT2JqID0gVUlOVF9DQUNIRVt2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqID0gZnJvbUJpdHModmFsdWUsICh2YWx1ZSB8IDApIDwgMCA/IC0xIDogMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZSlcclxuICAgICAgICAgICAgICAgIFVJTlRfQ0FDSEVbdmFsdWVdID0gb2JqO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlIHw9IDA7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZSA9ICgtMTI4IDw9IHZhbHVlICYmIHZhbHVlIDwgMTI4KSkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkT2JqID0gSU5UX0NBQ0hFW3ZhbHVlXTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWRPYmopXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE9iajtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmogPSBmcm9tQml0cyh2YWx1ZSwgdmFsdWUgPCAwID8gLTEgOiAwLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZSlcclxuICAgICAgICAgICAgICAgIElOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiAzMiBiaXQgaW50ZWdlciB2YWx1ZS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSAzMiBiaXQgaW50ZWdlciBpbiBxdWVzdGlvblxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIHNpZ25lZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIExvbmcuZnJvbUludCA9IGZyb21JbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgIHJldHVybiB1bnNpZ25lZCA/IFVaRVJPIDogWkVSTztcclxuICAgICAgICBpZiAodW5zaWduZWQpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBVWkVSTztcclxuICAgICAgICAgICAgaWYgKHZhbHVlID49IFRXT19QV1JfNjRfREJMKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1BWF9VTlNJR05FRF9WQUxVRTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPD0gLVRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICsgMSA+PSBUV09fUFdSXzYzX0RCTClcclxuICAgICAgICAgICAgICAgIHJldHVybiBNQVhfVkFMVUU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA8IDApXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tTnVtYmVyKC12YWx1ZSwgdW5zaWduZWQpLm5lZygpO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygodmFsdWUgJSBUV09fUFdSXzMyX0RCTCkgfCAwLCAodmFsdWUgLyBUV09fUFdSXzMyX0RCTCkgfCAwLCB1bnNpZ25lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlIG51bWJlci4gT3RoZXJ3aXNlLCB6ZXJvIGlzIHJldHVybmVkLlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG51bWJlciBpbiBxdWVzdGlvblxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIHNpZ25lZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIExvbmcuZnJvbU51bWJlciA9IGZyb21OdW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93Qml0c1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZyb21CaXRzKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTG9uZyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSA2NCBiaXQgaW50ZWdlciB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGdpdmVuIGxvdyBhbmQgaGlnaCBiaXRzLiBFYWNoIGlzXHJcbiAgICAgKiAgYXNzdW1lZCB0byB1c2UgMzIgYml0cy5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHMgVGhlIGxvdyAzMiBiaXRzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGlnaEJpdHMgVGhlIGhpZ2ggMzIgYml0c1xyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIHNpZ25lZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIExvbmcuZnJvbUJpdHMgPSBmcm9tQml0cztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJhc2VcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBleHBvbmVudFxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgcG93X2RibCA9IE1hdGgucG93OyAvLyBVc2VkIDQgdGltZXMgKDQqOCB0byAxNSs0KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gICAgICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXhcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0ciwgdW5zaWduZWQsIHJhZGl4KSB7XHJcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdlbXB0eSBzdHJpbmcnKTtcclxuICAgICAgICBpZiAoc3RyID09PSBcIk5hTlwiIHx8IHN0ciA9PT0gXCJJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCIrSW5maW5pdHlcIiB8fCBzdHIgPT09IFwiLUluZmluaXR5XCIpXHJcbiAgICAgICAgICAgIHJldHVybiBaRVJPO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdW5zaWduZWQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIC8vIEZvciBnb29nLm1hdGgubG9uZyBjb21wYXRpYmlsaXR5XHJcbiAgICAgICAgICAgIHJhZGl4ID0gdW5zaWduZWQsXHJcbiAgICAgICAgICAgIHVuc2lnbmVkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdW5zaWduZWQgPSAhISB1bnNpZ25lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFkaXggPSByYWRpeCB8fCAxMDtcclxuICAgICAgICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpXHJcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ3JhZGl4Jyk7XHJcblxyXG4gICAgICAgIHZhciBwO1xyXG4gICAgICAgIGlmICgocCA9IHN0ci5pbmRleE9mKCctJykpID4gMClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2ludGVyaW9yIGh5cGhlbicpO1xyXG4gICAgICAgIGVsc2UgaWYgKHAgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21TdHJpbmcoc3RyLnN1YnN0cmluZygxKSwgdW5zaWduZWQsIHJhZGl4KS5uZWcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERvIHNldmVyYWwgKDgpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgICAgICAvLyBtaW5pbWl6ZSB0aGUgY2FsbHMgdG8gdGhlIHZlcnkgZXhwZW5zaXZlIGVtdWxhdGVkIGRpdi5cclxuICAgICAgICB2YXIgcmFkaXhUb1Bvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCA4KSk7XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBaRVJPO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSA4KSB7XHJcbiAgICAgICAgICAgIHZhciBzaXplID0gTWF0aC5taW4oOCwgc3RyLmxlbmd0aCAtIGkpLFxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKGksIGkgKyBzaXplKSwgcmFkaXgpO1xyXG4gICAgICAgICAgICBpZiAoc2l6ZSA8IDgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgc2l6ZSkpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChwb3dlcikuYWRkKGZyb21OdW1iZXIodmFsdWUpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tdWwocmFkaXhUb1Bvd2VyKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5hZGQoZnJvbU51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC51bnNpZ25lZCA9IHVuc2lnbmVkO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gc3RyaW5nLCB3cml0dGVuIHVzaW5nIHRoZSBzcGVjaWZpZWQgcmFkaXguXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIExvbmdcclxuICAgICAqIEBwYXJhbSB7KGJvb2xlYW58bnVtYmVyKT19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXggVGhlIHJhZGl4IGluIHdoaWNoIHRoZSB0ZXh0IGlzIHdyaXR0ZW4gKDItMzYpLCBkZWZhdWx0cyB0byAxMFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIExvbmcuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbVZhbHVlKHZhbCkge1xyXG4gICAgICAgIGlmICh2YWwgLyogaXMgY29tcGF0aWJsZSAqLyBpbnN0YW5jZW9mIExvbmcpXHJcbiAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbU51bWJlcih2YWwpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21TdHJpbmcodmFsKTtcclxuICAgICAgICAvLyBUaHJvd3MgZm9yIG5vbi1vYmplY3RzLCBjb252ZXJ0cyBub24taW5zdGFuY2VvZiBMb25nOlxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh2YWwubG93LCB2YWwuaGlnaCwgdmFsLnVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgdmFsdWUgdG8gYSBMb25nLlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd8IXtsb3c6IG51bWJlciwgaGlnaDogbnVtYmVyLCB1bnNpZ25lZDogYm9vbGVhbn19IHZhbCBWYWx1ZVxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21WYWx1ZSA9IGZyb21WYWx1ZTtcclxuXHJcbiAgICAvLyBOT1RFOiB0aGUgY29tcGlsZXIgc2hvdWxkIGlubGluZSB0aGVzZSBjb25zdGFudCB2YWx1ZXMgYmVsb3cgYW5kIHRoZW4gcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlXHJcbiAgICAvLyBubyBydW50aW1lIHBlbmFsdHkgZm9yIHRoZXNlLlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzE2X0RCTCA9IDEgPDwgMTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfMjRfREJMID0gMSA8PCAyNDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl8zMl9EQkwgPSBUV09fUFdSXzE2X0RCTCAqIFRXT19QV1JfMTZfREJMO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzY0X0RCTCA9IFRXT19QV1JfMzJfREJMICogVFdPX1BXUl8zMl9EQkw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfNjNfREJMID0gVFdPX1BXUl82NF9EQkwgLyAyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfMjQgPSBmcm9tSW50KFRXT19QV1JfMjRfREJMKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgWkVSTyA9IGZyb21JbnQoMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaWduZWQgemVyby5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5aRVJPID0gWkVSTztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVVpFUk8gPSBmcm9tSW50KDAsIHRydWUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5zaWduZWQgemVyby5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5VWkVSTyA9IFVaRVJPO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBPTkUgPSBmcm9tSW50KDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2lnbmVkIG9uZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5PTkUgPSBPTkU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFVPTkUgPSBmcm9tSW50KDEsIHRydWUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5zaWduZWQgb25lLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLlVPTkUgPSBVT05FO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBORUdfT05FID0gZnJvbUludCgtMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaWduZWQgbmVnYXRpdmUgb25lLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLk5FR19PTkUgPSBORUdfT05FO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBNQVhfVkFMVUUgPSBmcm9tQml0cygweEZGRkZGRkZGfDAsIDB4N0ZGRkZGRkZ8MCwgZmFsc2UpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWF4aW11bSBzaWduZWQgdmFsdWUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuTUFYX1ZBTFVFID0gTUFYX1ZBTFVFO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBNQVhfVU5TSUdORURfVkFMVUUgPSBmcm9tQml0cygweEZGRkZGRkZGfDAsIDB4RkZGRkZGRkZ8MCwgdHJ1ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXhpbXVtIHVuc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLk1BWF9VTlNJR05FRF9WQUxVRSA9IE1BWF9VTlNJR05FRF9WQUxVRTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgTUlOX1ZBTFVFID0gZnJvbUJpdHMoMCwgMHg4MDAwMDAwMHwwLCBmYWxzZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaW5pbXVtIHNpZ25lZCB2YWx1ZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5NSU5fVkFMVUUgPSBNSU5fVkFMVUU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAYWxpYXMgTG9uZy5wcm90b3R5cGVcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgTG9uZ1Byb3RvdHlwZSA9IExvbmcucHJvdG90eXBlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIExvbmcgdG8gYSAzMiBiaXQgaW50ZWdlciwgYXNzdW1pbmcgaXQgaXMgYSAzMiBiaXQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9JbnQgPSBmdW5jdGlvbiB0b0ludCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IHRoaXMubG93ID4+PiAwIDogdGhpcy5sb3c7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIExvbmcgdG8gYSB0aGUgbmVhcmVzdCBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlIChkb3VibGUsIDUzIGJpdCBtYW50aXNzYSkuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgICAgIHJldHVybiAoKHRoaXMuaGlnaCA+Pj4gMCkgKiBUV09fUFdSXzMyX0RCTCkgKyAodGhpcy5sb3cgPj4+IDApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2ggKiBUV09fUFdSXzMyX0RCTCArICh0aGlzLmxvdyA+Pj4gMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIExvbmcgdG8gYSBzdHJpbmcgd3JpdHRlbiBpbiB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBSYWRpeCAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICogQG92ZXJyaWRlXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgcmFkaXhgIGlzIG91dCBvZiByYW5nZVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcocmFkaXgpIHtcclxuICAgICAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgICAgIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcigncmFkaXgnKTtcclxuICAgICAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICAgICAgcmV0dXJuICcwJztcclxuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHsgLy8gVW5zaWduZWQgTG9uZ3MgYXJlIG5ldmVyIG5lZ2F0aXZlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hhbmdlIHRoZSBMb25nIHZhbHVlIGJlZm9yZSBpdCBjYW4gYmUgbmVnYXRlZCwgc28gd2UgcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgYm90dG9tLW1vc3QgZGlnaXQgaW4gdGhpcyBiYXNlIGFuZCB0aGVuIHJlY3Vyc2UgdG8gZG8gdGhlIHJlc3QuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXhMb25nID0gZnJvbU51bWJlcihyYWRpeCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5kaXYocmFkaXhMb25nKSxcclxuICAgICAgICAgICAgICAgICAgICByZW0xID0gZGl2Lm11bChyYWRpeExvbmcpLnN1Yih0aGlzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkaXYudG9TdHJpbmcocmFkaXgpICsgcmVtMS50b0ludCgpLnRvU3RyaW5nKHJhZGl4KTtcclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJy0nICsgdGhpcy5uZWcoKS50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEbyBzZXZlcmFsICg2KSBkaWdpdHMgZWFjaCB0aW1lIHRocm91Z2ggdGhlIGxvb3AsIHNvIGFzIHRvXHJcbiAgICAgICAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXHJcbiAgICAgICAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgNiksIHRoaXMudW5zaWduZWQpLFxyXG4gICAgICAgICAgICByZW0gPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVtRGl2ID0gcmVtLmRpdihyYWRpeFRvUG93ZXIpLFxyXG4gICAgICAgICAgICAgICAgaW50dmFsID0gcmVtLnN1YihyZW1EaXYubXVsKHJhZGl4VG9Qb3dlcikpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICBkaWdpdHMgPSBpbnR2YWwudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgICAgICByZW0gPSByZW1EaXY7XHJcbiAgICAgICAgICAgIGlmIChyZW0uaXNaZXJvKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlnaXRzICsgcmVzdWx0O1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoIDwgNilcclxuICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSAnMCcgKyBkaWdpdHM7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAnJyArIGRpZ2l0cyArIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYSBzaWduZWQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFNpZ25lZCBoaWdoIGJpdHNcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5nZXRIaWdoQml0cyA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2g7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgaGlnaCAzMiBiaXRzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCBoaWdoIGJpdHNcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5nZXRIaWdoQml0c1Vuc2lnbmVkID0gZnVuY3Rpb24gZ2V0SGlnaEJpdHNVbnNpZ25lZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoID4+PiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgbG93IGJpdHNcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzID0gZnVuY3Rpb24gZ2V0TG93Qml0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb3c7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbG93IDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuc2lnbmVkIGxvdyBiaXRzXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ2V0TG93Qml0c1Vuc2lnbmVkID0gZnVuY3Rpb24gZ2V0TG93Qml0c1Vuc2lnbmVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvdyA+Pj4gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYml0cyBuZWVkZWQgdG8gcmVwcmVzZW50IHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIExvbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdldE51bUJpdHNBYnMgPSBmdW5jdGlvbiBnZXROdW1CaXRzQWJzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkgLy8gVW5zaWduZWQgTG9uZ3MgYXJlIG5ldmVyIG5lZ2F0aXZlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKE1JTl9WQUxVRSkgPyA2NCA6IHRoaXMubmVnKCkuZ2V0TnVtQml0c0FicygpO1xyXG4gICAgICAgIHZhciB2YWwgPSB0aGlzLmhpZ2ggIT0gMCA/IHRoaXMuaGlnaCA6IHRoaXMubG93O1xyXG4gICAgICAgIGZvciAodmFyIGJpdCA9IDMxOyBiaXQgPiAwOyBiaXQtLSlcclxuICAgICAgICAgICAgaWYgKCh2YWwgJiAoMSA8PCBiaXQpKSAhPSAwKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCAhPSAwID8gYml0ICsgMzMgOiBiaXQgKyAxO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB6ZXJvLlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IDAgJiYgdGhpcy5sb3cgPT09IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbmVnYXRpdmUuXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5pc05lZ2F0aXZlID0gZnVuY3Rpb24gaXNOZWdhdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMudW5zaWduZWQgJiYgdGhpcy5oaWdoIDwgMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBwb3NpdGl2ZS5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiBpc1Bvc2l0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkIHx8IHRoaXMuaGlnaCA+PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG9kZC5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAxO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGV2ZW4uXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXIpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICBpZiAodGhpcy51bnNpZ25lZCAhPT0gb3RoZXIudW5zaWduZWQgJiYgKHRoaXMuaGlnaCA+Pj4gMzEpID09PSAxICYmIChvdGhlci5oaWdoID4+PiAzMSkgPT09IDEpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoID09PSBvdGhlci5oaWdoICYmIHRoaXMubG93ID09PSBvdGhlci5sb3c7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNlcXVhbHN9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5lcSA9IExvbmdQcm90b3R5cGUuZXF1YWxzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIG5vdEVxdWFscyhvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5lcSgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbm90RXF1YWxzfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubmVxID0gTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubGVzc1RoYW4gPSBmdW5jdGlvbiBsZXNzVGhhbihvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA8IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmx0ID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPD0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2xlc3NUaGFuT3JFcXVhbH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmx0ZSA9IExvbmdQcm90b3R5cGUubGVzc1RoYW5PckVxdWFsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuID0gZnVuY3Rpb24gZ3JlYXRlclRoYW4ob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW59LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5ndCA9IExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsID0gZnVuY3Rpb24gZ3JlYXRlclRoYW5PckVxdWFsKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpID49IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbk9yRXF1YWx9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5ndGUgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmVzIHRoaXMgTG9uZydzIHZhbHVlIHdpdGggdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyIGFuZCAtMVxyXG4gICAgICogIGlmIHRoZSBnaXZlbiBvbmUgaXMgZ3JlYXRlclxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuZXEob3RoZXIpKVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB2YXIgdGhpc05lZyA9IHRoaXMuaXNOZWdhdGl2ZSgpLFxyXG4gICAgICAgICAgICBvdGhlck5lZyA9IG90aGVyLmlzTmVnYXRpdmUoKTtcclxuICAgICAgICBpZiAodGhpc05lZyAmJiAhb3RoZXJOZWcpXHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICBpZiAoIXRoaXNOZWcgJiYgb3RoZXJOZWcpXHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHNpZ24gYml0cyBhcmUgdGhlIHNhbWVcclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YihvdGhlcikuaXNOZWdhdGl2ZSgpID8gLTEgOiAxO1xyXG4gICAgICAgIC8vIEJvdGggYXJlIHBvc2l0aXZlIGlmIGF0IGxlYXN0IG9uZSBpcyB1bnNpZ25lZFxyXG4gICAgICAgIHJldHVybiAob3RoZXIuaGlnaCA+Pj4gMCkgPiAodGhpcy5oaWdoID4+PiAwKSB8fCAob3RoZXIuaGlnaCA9PT0gdGhpcy5oaWdoICYmIChvdGhlci5sb3cgPj4+IDApID4gKHRoaXMubG93ID4+PiAwKSkgPyAtMSA6IDE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjY29tcGFyZX0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcclxuICAgICAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5jb21wID0gTG9uZ1Byb3RvdHlwZS5jb21wYXJlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS5cclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gTmVnYXRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubmVnYXRlID0gZnVuY3Rpb24gbmVnYXRlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy51bnNpZ25lZCAmJiB0aGlzLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgIHJldHVybiBNSU5fVkFMVUU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm90KCkuYWRkKE9ORSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNuZWdhdGV9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IE5lZ2F0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm5lZyA9IExvbmdQcm90b3R5cGUubmVnYXRlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgc3VtIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gYWRkZW5kIEFkZGVuZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTdW1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoYWRkZW5kKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcoYWRkZW5kKSlcclxuICAgICAgICAgICAgYWRkZW5kID0gZnJvbVZhbHVlKGFkZGVuZCk7XHJcblxyXG4gICAgICAgIC8vIERpdmlkZSBlYWNoIG51bWJlciBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIHN1bSB0aGUgY2h1bmtzLlxyXG5cclxuICAgICAgICB2YXIgYTQ4ID0gdGhpcy5oaWdoID4+PiAxNjtcclxuICAgICAgICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhGRkZGO1xyXG4gICAgICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGEwMCA9IHRoaXMubG93ICYgMHhGRkZGO1xyXG5cclxuICAgICAgICB2YXIgYjQ4ID0gYWRkZW5kLmhpZ2ggPj4+IDE2O1xyXG4gICAgICAgIHZhciBiMzIgPSBhZGRlbmQuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYjE2ID0gYWRkZW5kLmxvdyA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGIwMCA9IGFkZGVuZC5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgICAgIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xyXG4gICAgICAgIGMwMCArPSBhMDAgKyBiMDA7XHJcbiAgICAgICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICAgICAgYzAwICY9IDB4RkZGRjtcclxuICAgICAgICBjMTYgKz0gYTE2ICsgYjE2O1xyXG4gICAgICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzMyICs9IGEzMiArIGIzMjtcclxuICAgICAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgICAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgICAgIGM0OCArPSBhNDggKyBiNDg7XHJcbiAgICAgICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gc3VidHJhaGVuZCBTdWJ0cmFoZW5kXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IERpZmZlcmVuY2VcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIHN1YnRyYWN0KHN1YnRyYWhlbmQpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhzdWJ0cmFoZW5kKSlcclxuICAgICAgICAgICAgc3VidHJhaGVuZCA9IGZyb21WYWx1ZShzdWJ0cmFoZW5kKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGQoc3VidHJhaGVuZC5uZWcoKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc3VidHJhY3R9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc3ViID0gTG9uZ1Byb3RvdHlwZS5zdWJ0cmFjdDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUHJvZHVjdFxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gbXVsdGlwbHkobXVsdGlwbGllcikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gWkVSTztcclxuICAgICAgICBpZiAoIWlzTG9uZyhtdWx0aXBsaWVyKSlcclxuICAgICAgICAgICAgbXVsdGlwbGllciA9IGZyb21WYWx1ZShtdWx0aXBsaWVyKTtcclxuICAgICAgICBpZiAobXVsdGlwbGllci5pc1plcm8oKSlcclxuICAgICAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgcmV0dXJuIG11bHRpcGxpZXIuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XHJcbiAgICAgICAgaWYgKG11bHRpcGxpZXIuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgICAgICBpZiAobXVsdGlwbGllci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllci5uZWcoKSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLm11bChtdWx0aXBsaWVyKS5uZWcoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tdWwobXVsdGlwbGllci5uZWcoKSkubmVnKCk7XHJcblxyXG4gICAgICAgIC8vIElmIGJvdGggbG9uZ3MgYXJlIHNtYWxsLCB1c2UgZmxvYXQgbXVsdGlwbGljYXRpb25cclxuICAgICAgICBpZiAodGhpcy5sdChUV09fUFdSXzI0KSAmJiBtdWx0aXBsaWVyLmx0KFRXT19QV1JfMjQpKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbU51bWJlcih0aGlzLnRvTnVtYmVyKCkgKiBtdWx0aXBsaWVyLnRvTnVtYmVyKCksIHRoaXMudW5zaWduZWQpO1xyXG5cclxuICAgICAgICAvLyBEaXZpZGUgZWFjaCBsb25nIGludG8gNCBjaHVua3Mgb2YgMTYgYml0cywgYW5kIHRoZW4gYWRkIHVwIDR4NCBwcm9kdWN0cy5cclxuICAgICAgICAvLyBXZSBjYW4gc2tpcCBwcm9kdWN0cyB0aGF0IHdvdWxkIG92ZXJmbG93LlxyXG5cclxuICAgICAgICB2YXIgYTQ4ID0gdGhpcy5oaWdoID4+PiAxNjtcclxuICAgICAgICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhGRkZGO1xyXG4gICAgICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGEwMCA9IHRoaXMubG93ICYgMHhGRkZGO1xyXG5cclxuICAgICAgICB2YXIgYjQ4ID0gbXVsdGlwbGllci5oaWdoID4+PiAxNjtcclxuICAgICAgICB2YXIgYjMyID0gbXVsdGlwbGllci5oaWdoICYgMHhGRkZGO1xyXG4gICAgICAgIHZhciBiMTYgPSBtdWx0aXBsaWVyLmxvdyA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGIwMCA9IG11bHRpcGxpZXIubG93ICYgMHhGRkZGO1xyXG5cclxuICAgICAgICB2YXIgYzQ4ID0gMCwgYzMyID0gMCwgYzE2ID0gMCwgYzAwID0gMDtcclxuICAgICAgICBjMDAgKz0gYTAwICogYjAwO1xyXG4gICAgICAgIGMxNiArPSBjMDAgPj4+IDE2O1xyXG4gICAgICAgIGMwMCAmPSAweEZGRkY7XHJcbiAgICAgICAgYzE2ICs9IGExNiAqIGIwMDtcclxuICAgICAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgICAgICBjMTYgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMxNiArPSBhMDAgKiBiMTY7XHJcbiAgICAgICAgYzMyICs9IGMxNiA+Pj4gMTY7XHJcbiAgICAgICAgYzE2ICY9IDB4RkZGRjtcclxuICAgICAgICBjMzIgKz0gYTMyICogYjAwO1xyXG4gICAgICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzMyICs9IGExNiAqIGIxNjtcclxuICAgICAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgICAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMzMiArPSBhMDAgKiBiMzI7XHJcbiAgICAgICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICAgICAgYzMyICY9IDB4RkZGRjtcclxuICAgICAgICBjNDggKz0gYTQ4ICogYjAwICsgYTMyICogYjE2ICsgYTE2ICogYjMyICsgYTAwICogYjQ4O1xyXG4gICAgICAgIGM0OCAmPSAweEZGRkY7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMiwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcHJvZHVjdCBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbXVsdGlwbHl9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubXVsID0gTG9uZ1Byb3RvdHlwZS5tdWx0aXBseTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIGRpdmlkZWQgYnkgdGhlIHNwZWNpZmllZC4gVGhlIHJlc3VsdCBpcyBzaWduZWQgaWYgdGhpcyBMb25nIGlzIHNpZ25lZCBvclxyXG4gICAgICogIHVuc2lnbmVkIGlmIHRoaXMgTG9uZyBpcyB1bnNpZ25lZC5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFF1b3RpZW50XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gZGl2aWRlKGRpdmlzb3IpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhkaXZpc29yKSlcclxuICAgICAgICAgICAgZGl2aXNvciA9IGZyb21WYWx1ZShkaXZpc29yKTtcclxuICAgICAgICBpZiAoZGl2aXNvci5pc1plcm8oKSlcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2RpdmlzaW9uIGJ5IHplcm8nKTtcclxuICAgICAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICAgICAgdmFyIGFwcHJveCwgcmVtLCByZXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgc2VjdGlvbiBpcyBvbmx5IHJlbGV2YW50IGZvciBzaWduZWQgbG9uZ3MgYW5kIGlzIGRlcml2ZWQgZnJvbSB0aGVcclxuICAgICAgICAgICAgLy8gY2xvc3VyZSBsaWJyYXJ5IGFzIGEgd2hvbGUuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXZpc29yLmVxKE9ORSkgfHwgZGl2aXNvci5lcShORUdfT05FKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFOyAgLy8gcmVjYWxsIHRoYXQgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUVcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRpdmlzb3IuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT05FO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgaGF2ZSB8b3RoZXJ8ID49IDIsIHNvIHx0aGlzL290aGVyfCA8IHxNSU5fVkFMVUV8LlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYWxmVGhpcyA9IHRoaXMuc2hyKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcHJveCA9IGhhbGZUaGlzLmRpdihkaXZpc29yKS5zaGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFwcHJveC5lcShaRVJPKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGl2aXNvci5pc05lZ2F0aXZlKCkgPyBPTkUgOiBORUdfT05FO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbSA9IHRoaXMuc3ViKGRpdmlzb3IubXVsKGFwcHJveCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBhcHByb3guYWRkKHJlbS5kaXYoZGl2aXNvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXZpc29yLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IFVaRVJPIDogWkVSTztcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkuZGl2KGRpdmlzb3IubmVnKCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkuZGl2KGRpdmlzb3IpLm5lZygpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpdmlzb3IuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGl2KGRpdmlzb3IubmVnKCkpLm5lZygpO1xyXG4gICAgICAgICAgICByZXMgPSBaRVJPO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBhbGdvcml0aG0gYmVsb3cgaGFzIG5vdCBiZWVuIG1hZGUgZm9yIHVuc2lnbmVkIGxvbmdzLiBJdCdzIHRoZXJlZm9yZVxyXG4gICAgICAgICAgICAvLyByZXF1aXJlZCB0byB0YWtlIHNwZWNpYWwgY2FyZSBvZiB0aGUgTVNCIHByaW9yIHRvIHJ1bm5pbmcgaXQuXHJcbiAgICAgICAgICAgIGlmICghZGl2aXNvci51bnNpZ25lZClcclxuICAgICAgICAgICAgICAgIGRpdmlzb3IgPSBkaXZpc29yLnRvVW5zaWduZWQoKTtcclxuICAgICAgICAgICAgaWYgKGRpdmlzb3IuZ3QodGhpcykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVVpFUk87XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmd0KHRoaXMuc2hydSgxKSkpIC8vIDE1ID4+PiAxID0gNyA7IHdpdGggZGl2aXNvciA9IDggOyB0cnVlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVU9ORTtcclxuICAgICAgICAgICAgcmVzID0gVVpFUk87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXBlYXQgdGhlIGZvbGxvd2luZyB1bnRpbCB0aGUgcmVtYWluZGVyIGlzIGxlc3MgdGhhbiBvdGhlcjogIGZpbmQgYVxyXG4gICAgICAgIC8vIGZsb2F0aW5nLXBvaW50IHRoYXQgYXBwcm94aW1hdGVzIHJlbWFpbmRlciAvIG90aGVyICpmcm9tIGJlbG93KiwgYWRkIHRoaXNcclxuICAgICAgICAvLyBpbnRvIHRoZSByZXN1bHQsIGFuZCBzdWJ0cmFjdCBpdCBmcm9tIHRoZSByZW1haW5kZXIuICBJdCBpcyBjcml0aWNhbCB0aGF0XHJcbiAgICAgICAgLy8gdGhlIGFwcHJveGltYXRlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVhbCB2YWx1ZSBzbyB0aGF0IHRoZVxyXG4gICAgICAgIC8vIHJlbWFpbmRlciBuZXZlciBiZWNvbWVzIG5lZ2F0aXZlLlxyXG4gICAgICAgIHJlbSA9IHRoaXM7XHJcbiAgICAgICAgd2hpbGUgKHJlbS5ndGUoZGl2aXNvcikpIHtcclxuICAgICAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIHJlc3VsdCBvZiBkaXZpc2lvbi4gVGhpcyBtYXkgYmUgYSBsaXR0bGUgZ3JlYXRlciBvclxyXG4gICAgICAgICAgICAvLyBzbWFsbGVyIHRoYW4gdGhlIGFjdHVhbCB2YWx1ZS5cclxuICAgICAgICAgICAgYXBwcm94ID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihyZW0udG9OdW1iZXIoKSAvIGRpdmlzb3IudG9OdW1iZXIoKSkpO1xyXG5cclxuICAgICAgICAgICAgLy8gV2Ugd2lsbCB0d2VhayB0aGUgYXBwcm94aW1hdGUgcmVzdWx0IGJ5IGNoYW5naW5nIGl0IGluIHRoZSA0OC10aCBkaWdpdCBvclxyXG4gICAgICAgICAgICAvLyB0aGUgc21hbGxlc3Qgbm9uLWZyYWN0aW9uYWwgZGlnaXQsIHdoaWNoZXZlciBpcyBsYXJnZXIuXHJcbiAgICAgICAgICAgIHZhciBsb2cyID0gTWF0aC5jZWlsKE1hdGgubG9nKGFwcHJveCkgLyBNYXRoLkxOMiksXHJcbiAgICAgICAgICAgICAgICBkZWx0YSA9IChsb2cyIDw9IDQ4KSA/IDEgOiBwb3dfZGJsKDIsIGxvZzIgLSA0OCksXHJcblxyXG4gICAgICAgICAgICAvLyBEZWNyZWFzZSB0aGUgYXBwcm94aW1hdGlvbiB1bnRpbCBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHJlbWFpbmRlci4gIE5vdGVcclxuICAgICAgICAgICAgLy8gdGhhdCBpZiBpdCBpcyB0b28gbGFyZ2UsIHRoZSBwcm9kdWN0IG92ZXJmbG93cyBhbmQgaXMgbmVnYXRpdmUuXHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCksXHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsKGRpdmlzb3IpO1xyXG4gICAgICAgICAgICB3aGlsZSAoYXBwcm94UmVtLmlzTmVnYXRpdmUoKSB8fCBhcHByb3hSZW0uZ3QocmVtKSkge1xyXG4gICAgICAgICAgICAgICAgYXBwcm94IC09IGRlbHRhO1xyXG4gICAgICAgICAgICAgICAgYXBwcm94UmVzID0gZnJvbU51bWJlcihhcHByb3gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgYW5zd2VyIGNhbid0IGJlIHplcm8uLi4gYW5kIGFjdHVhbGx5LCB6ZXJvIHdvdWxkIGNhdXNlXHJcbiAgICAgICAgICAgIC8vIGluZmluaXRlIHJlY3Vyc2lvbiBzaW5jZSB3ZSB3b3VsZCBtYWtlIG5vIHByb2dyZXNzLlxyXG4gICAgICAgICAgICBpZiAoYXBwcm94UmVzLmlzWmVybygpKVxyXG4gICAgICAgICAgICAgICAgYXBwcm94UmVzID0gT05FO1xyXG5cclxuICAgICAgICAgICAgcmVzID0gcmVzLmFkZChhcHByb3hSZXMpO1xyXG4gICAgICAgICAgICByZW0gPSByZW0uc3ViKGFwcHJveFJlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2RpdmlkZX0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFF1b3RpZW50XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZGl2ID0gTG9uZ1Byb3RvdHlwZS5kaXZpZGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm1vZHVsbyA9IGZ1bmN0aW9uIG1vZHVsbyhkaXZpc29yKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcoZGl2aXNvcikpXHJcbiAgICAgICAgICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViKHRoaXMuZGl2KGRpdmlzb3IpLm11bChkaXZpc29yKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgbW9kdWxvIHRoZSBzcGVjaWZpZWQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbW9kdWxvfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUmVtYWluZGVyXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubW9kID0gTG9uZ1Byb3RvdHlwZS5tb2R1bG87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBiaXR3aXNlIE5PVCBvZiB0aGlzIExvbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubm90ID0gZnVuY3Rpb24gbm90KCkge1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh+dGhpcy5sb3csIH50aGlzLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGJpdHdpc2UgQU5EIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZChvdGhlcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyAmIG90aGVyLmxvdywgdGhpcy5oaWdoICYgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IHwgb3RoZXIubG93LCB0aGlzLmhpZ2ggfCBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBiaXR3aXNlIFhPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBnaXZlbiBvbmUuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3Iob3RoZXIpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgXiBvdGhlci5sb3csIHRoaXMuaGlnaCBeIG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zaGlmdExlZnQgPSBmdW5jdGlvbiBzaGlmdExlZnQobnVtQml0cykge1xyXG4gICAgICAgIGlmIChpc0xvbmcobnVtQml0cykpXHJcbiAgICAgICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICAgICAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgPDwgbnVtQml0cywgKHRoaXMuaGlnaCA8PCBudW1CaXRzKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbnVtQml0cykpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQml0cygwLCB0aGlzLmxvdyA8PCAobnVtQml0cyAtIDMyKSwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHNoaWZ0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdExlZnR9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zaGwgPSBMb25nUHJvdG90eXBlLnNoaWZ0TGVmdDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc2hpZnRSaWdodCA9IGZ1bmN0aW9uIHNoaWZ0UmlnaHQobnVtQml0cykge1xyXG4gICAgICAgIGlmIChpc0xvbmcobnVtQml0cykpXHJcbiAgICAgICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICAgICAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoKHRoaXMubG93ID4+PiBudW1CaXRzKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCB0aGlzLmhpZ2ggPj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5oaWdoID4+IChudW1CaXRzIC0gMzIpLCB0aGlzLmhpZ2ggPj0gMCA/IDAgOiAtMSwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGFyaXRobWV0aWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnNociA9IExvbmdQcm90b3R5cGUuc2hpZnRSaWdodDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZCA9IGZ1bmN0aW9uIHNoaWZ0UmlnaHRVbnNpZ25lZChudW1CaXRzKSB7XHJcbiAgICAgICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICAgICAgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcclxuICAgICAgICBudW1CaXRzICY9IDYzO1xyXG4gICAgICAgIGlmIChudW1CaXRzID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGhpZ2ggPSB0aGlzLmhpZ2g7XHJcbiAgICAgICAgICAgIGlmIChudW1CaXRzIDwgMzIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb3cgPSB0aGlzLmxvdztcclxuICAgICAgICAgICAgICAgIHJldHVybiBmcm9tQml0cygobG93ID4+PiBudW1CaXRzKSB8IChoaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgaGlnaCA+Pj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtQml0cyA9PT0gMzIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoaGlnaCwgMCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBmcm9tQml0cyhoaWdoID4+PiAobnVtQml0cyAtIDMyKSwgMCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0VW5zaWduZWR9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zaHJ1ID0gTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gc2lnbmVkLlxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaWduZWQgbG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvU2lnbmVkID0gZnVuY3Rpb24gdG9TaWduZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byB1bnNpZ25lZC5cclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVW5zaWduZWQgbG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvVW5zaWduZWQgPSBmdW5jdGlvbiB0b1Vuc2lnbmVkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGUgV2hldGhlciBsaXR0bGUgb3IgYmlnIGVuZGlhbiwgZGVmYXVsdHMgdG8gYmlnIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gQnl0ZSByZXByZXNlbnRhdGlvblxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbihsZSkge1xyXG4gICAgICAgIHJldHVybiBsZSA/IHRoaXMudG9CeXRlc0xFKCkgOiB0aGlzLnRvQnl0ZXNCRSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBsaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b0J5dGVzTEUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGkgPSB0aGlzLmhpZ2gsXHJcbiAgICAgICAgICAgIGxvID0gdGhpcy5sb3c7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgIGxvICAgICAgICAgJiAweGZmLFxyXG4gICAgICAgICAgICAobG8gPj4+ICA4KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChsbyA+Pj4gMTYpICYgMHhmZixcclxuICAgICAgICAgICAgKGxvID4+PiAyNCkgJiAweGZmLFxyXG4gICAgICAgICAgICAgaGkgICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChoaSA+Pj4gIDgpICYgMHhmZixcclxuICAgICAgICAgICAgKGhpID4+PiAxNikgJiAweGZmLFxyXG4gICAgICAgICAgICAoaGkgPj4+IDI0KSAmIDB4ZmZcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBiaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBCaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b0J5dGVzQkUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGkgPSB0aGlzLmhpZ2gsXHJcbiAgICAgICAgICAgIGxvID0gdGhpcy5sb3c7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgKGhpID4+PiAyNCkgJiAweGZmLFxyXG4gICAgICAgICAgICAoaGkgPj4+IDE2KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChoaSA+Pj4gIDgpICYgMHhmZixcclxuICAgICAgICAgICAgIGhpICAgICAgICAgJiAweGZmLFxyXG4gICAgICAgICAgICAobG8gPj4+IDI0KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChsbyA+Pj4gMTYpICYgMHhmZixcclxuICAgICAgICAgICAgKGxvID4+PiAgOCkgJiAweGZmLFxyXG4gICAgICAgICAgICAgbG8gICAgICAgICAmIDB4ZmZcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBMb25nO1xyXG59KTtcclxuIiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG52YXIgZGVjaXBoZXJzID0gcmVxdWlyZSgnLi9kZWNyeXB0ZXInKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2Rlcy9saXN0Lmpzb24nKVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIE1PREVTID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXIgKG1vZGUsIGtleSwgaXYpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxudmFyIFBBRERJTkcgPSBCdWZmZXIuYWxsb2MoMTYsIDB4MTApXG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIGNodW5rID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICBpZiAoIWNodW5rLmVxdWFscyhQQURESU5HKSkge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcblxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWRCdWZmLndyaXRlVUludDgobGVuLCBpKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQpXG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxuICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSAnYXV0aCcpIHtcbiAgICByZXR1cm4gbmV3IEF1dGhDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxuICB9XG5cbiAgcmV0dXJuIG5ldyBDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG4iLCJleHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soYmxvY2spXG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcbn1cbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KVxuXG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGRhdGEpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgcGFkID0gc2VsZi5fcHJldlxuXG4gIHNlbGYuX3ByZXYgPSBibG9ja1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcblxuICByZXR1cm4geG9yKG91dCwgcGFkKVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGVuY3J5cHRTdGFydCAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGhcbiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSlcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB2YXIgbGVuXG5cbiAgd2hpbGUgKGRhdGEubGVuZ3RoKSB7XG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgICBzZWxmLl9wcmV2ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICB2YXIgb3V0ID0gcGFkWzBdIF4gYnl0ZVBhcmFtXG5cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIHNlbGYuX3ByZXYuc2xpY2UoMSksXG4gICAgQnVmZmVyLmZyb20oW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKVxuICBdKVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkXG4gIHZhciBpID0gLTFcbiAgdmFyIGxlbiA9IDhcbiAgdmFyIG91dCA9IDBcbiAgdmFyIGJpdCwgdmFsdWVcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICBiaXQgPSAoYnl0ZVBhcmFtICYgKDEgPDwgKDcgLSBpKSkpID8gMHg4MCA6IDBcbiAgICB2YWx1ZSA9IHBhZFswXSBeIGJpdFxuICAgIG91dCArPSAoKHZhbHVlICYgMHg4MCkgPj4gKGkgJSA4KSlcbiAgICBzZWxmLl9wcmV2ID0gc2hpZnRJbihzZWxmLl9wcmV2LCBkZWNyeXB0ID8gYml0IDogdmFsdWUpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzaGlmdEluIChidWZmZXIsIHZhbHVlKSB7XG4gIHZhciBsZW4gPSBidWZmZXIubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIEJ1ZmZlci5mcm9tKFt2YWx1ZV0pXSlcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9FUyA9IEJ1ZmZlci5hbGxvYygxNiwgMClcblxuZnVuY3Rpb24gdG9BcnJheSAoYnVmKSB7XG4gIHJldHVybiBbXG4gICAgYnVmLnJlYWRVSW50MzJCRSgwKSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDQpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoOCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSgxMilcbiAgXVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0gPj4+IDAsIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSA+Pj4gMCwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdID4+PiAwLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10gPj4+IDAsIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIEdIQVNIIChrZXkpIHtcbiAgdGhpcy5oID0ga2V5XG4gIHRoaXMuc3RhdGUgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JWaVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCAxMjgpIHtcbiAgICB4aSA9ICh0aGlzLnN0YXRlW35+KGkgLyA4KV0gJiAoMSA8PCAoNyAtIChpICUgOCkpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaVswXSBePSBWaVswXVxuICAgICAgWmlbMV0gXj0gVmlbMV1cbiAgICAgIFppWzJdIF49IFZpWzJdXG4gICAgICBaaVszXSBePSBWaVszXVxuICAgIH1cblxuICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBvZiBMU0IoVl9pKVxuICAgIGxzYlZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYlZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5cbkdIQVNILnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBidWZdKVxuICB2YXIgY2h1bmtcbiAgd2hpbGUgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgY2h1bmsgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHRoaXMuZ2hhc2goY2h1bmspXG4gIH1cbn1cblxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBaRVJPRVNdLCAxNikpXG4gIH1cblxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbMCwgYWJsLCAwLCBibF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG4iLCJ2YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcblxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIHJldHVybiB1bnBhZCh0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspKVxuICB9IGVsc2UgaWYgKGNodW5rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoYXV0b1BhZGRpbmcpIHtcbiAgdmFyIG91dFxuICBpZiAoYXV0b1BhZGRpbmcpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2FjaGVcbn1cblxuZnVuY3Rpb24gdW5wYWQgKGxhc3QpIHtcbiAgdmFyIHBhZGRlZCA9IGxhc3RbMTVdXG4gIGlmIChwYWRkZWQgPCAxIHx8IHBhZGRlZCA+IDE2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikgcmV0dXJuXG5cbiAgcmV0dXJuIGxhc3Quc2xpY2UoMCwgMTYgLSBwYWRkZWQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBuZXcgRGVjaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiLy8gRklYTUU6IEtpbmQgb2YgYSB3ZWlyZCB3YXkgdG8gdGhyb3cgZXhjZXB0aW9ucywgY29uc2lkZXIgcmVtb3ZpbmdcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCcuL2JpZ2knKVxuXG4vKipcbiAqIFR1cm5zIGEgYnl0ZSBhcnJheSBpbnRvIGEgYmlnIGludGVnZXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGludGVycHJldCBhIGJ5dGUgYXJyYXkgYXMgYSBiaWcgaW50ZWdlciBpbiBiaWdcbiAqIGVuZGlhbiBub3RhdGlvbi5cbiAqL1xuQmlnSW50ZWdlci5mcm9tQnl0ZUFycmF5VW5zaWduZWQgPSBmdW5jdGlvbihieXRlQXJyYXkpIHtcbiAgLy8gQmlnSW50ZWdlciBleHBlY3RzIGEgREVSIGludGVnZXIgY29uZm9ybWFudCBieXRlIGFycmF5XG4gIGlmIChieXRlQXJyYXlbMF0gJiAweDgwKSB7XG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKFswXS5jb25jYXQoYnl0ZUFycmF5KSlcbiAgfVxuXG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihieXRlQXJyYXkpXG59XG5cbi8qKlxuICogUmV0dXJucyBhIGJ5dGUgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJpZyBpbnRlZ2VyLlxuICpcbiAqIFRoaXMgcmV0dXJucyB0aGUgYWJzb2x1dGUgb2YgdGhlIGNvbnRhaW5lZCB2YWx1ZSBpbiBiaWcgZW5kaWFuXG4gKiBmb3JtLiBBIHZhbHVlIG9mIHplcm8gcmVzdWx0cyBpbiBhbiBlbXB0eSBhcnJheS5cbiAqL1xuQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXlVbnNpZ25lZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYnl0ZUFycmF5ID0gdGhpcy50b0J5dGVBcnJheSgpXG4gIHJldHVybiBieXRlQXJyYXlbMF0gPT09IDAgPyBieXRlQXJyYXkuc2xpY2UoMSkgOiBieXRlQXJyYXlcbn1cblxuQmlnSW50ZWdlci5mcm9tREVSSW50ZWdlciA9IGZ1bmN0aW9uKGJ5dGVBcnJheSkge1xuICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYnl0ZUFycmF5KVxufVxuXG4vKlxuICogQ29udmVydHMgQmlnSW50ZWdlciB0byBhIERFUiBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIFRoZSBmb3JtYXQgZm9yIHRoaXMgdmFsdWUgdXNlcyB0aGUgbW9zdCBzaWduaWZpY2FudCBiaXQgYXMgYSBzaWduXG4gKiBiaXQuICBJZiB0aGUgbW9zdCBzaWduaWZpY2FudCBiaXQgaXMgYWxyZWFkeSBzZXQgYW5kIHRoZSBpbnRlZ2VyIGlzXG4gKiBwb3NpdGl2ZSwgYSAweDAwIGlzIHByZXBlbmRlZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIDAgPT4gICAgIDB4MDBcbiAqICAgICAgMSA9PiAgICAgMHgwMVxuICogICAgIC0xID0+ICAgICAweGZmXG4gKiAgICAxMjcgPT4gICAgIDB4N2ZcbiAqICAgLTEyNyA9PiAgICAgMHg4MVxuICogICAgMTI4ID0+ICAgMHgwMDgwXG4gKiAgIC0xMjggPT4gICAgIDB4ODBcbiAqICAgIDI1NSA9PiAgIDB4MDBmZlxuICogICAtMjU1ID0+ICAgMHhmZjAxXG4gKiAgMTYzMDAgPT4gICAweDNmYWNcbiAqIC0xNjMwMCA9PiAgIDB4YzA1NFxuICogIDYyMzAwID0+IDB4MDBmMzVjXG4gKiAtNjIzMDAgPT4gMHhmZjBjYTRcbiovXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0RFUkludGVnZXIgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J5dGVBcnJheVxuXG5CaWdJbnRlZ2VyLmZyb21CdWZmZXIgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gQmlnSW50ZWdlciBleHBlY3RzIGEgREVSIGludGVnZXIgY29uZm9ybWFudCBieXRlIGFycmF5XG4gIGlmIChidWZmZXJbMF0gJiAweDgwKSB7XG4gICAgdmFyIGJ5dGVBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ1ZmZlcilcblxuICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihbMF0uY29uY2F0KGJ5dGVBcnJheSkpXG4gIH1cblxuICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYnVmZmVyKVxufVxuXG5CaWdJbnRlZ2VyLmZyb21IZXggPSBmdW5jdGlvbihoZXgpIHtcbiAgaWYgKGhleCA9PT0gJycpIHJldHVybiBCaWdJbnRlZ2VyLlpFUk9cblxuICBhc3NlcnQuZXF1YWwoaGV4LCBoZXgubWF0Y2goL15bQS1GYS1mMC05XSsvKSwgJ0ludmFsaWQgaGV4IHN0cmluZycpXG4gIGFzc2VydC5lcXVhbChoZXgubGVuZ3RoICUgMiwgMCwgJ0luY29tcGxldGUgaGV4JylcbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGhleCwgMTYpXG59XG5cbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24oc2l6ZSkge1xuICB2YXIgYnl0ZUFycmF5ID0gdGhpcy50b0J5dGVBcnJheVVuc2lnbmVkKClcbiAgdmFyIHplcm9zID0gW11cblxuICB2YXIgcGFkZGluZyA9IHNpemUgLSBieXRlQXJyYXkubGVuZ3RoXG4gIHdoaWxlICh6ZXJvcy5sZW5ndGggPCBwYWRkaW5nKSB6ZXJvcy5wdXNoKDApXG5cbiAgcmV0dXJuIG5ldyBCdWZmZXIoemVyb3MuY29uY2F0KGJ5dGVBcnJheSkpXG59XG5cbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24oc2l6ZSkge1xuICByZXR1cm4gdGhpcy50b0J1ZmZlcihzaXplKS50b1N0cmluZygnaGV4Jylcbn1cbiIsInZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpXG5cbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJylcbnZhciBDdXJ2ZSA9IHJlcXVpcmUoJy4vY3VydmUnKVxuXG5mdW5jdGlvbiBnZXRDdXJ2ZUJ5TmFtZSAobmFtZSkge1xuICB2YXIgY3VydmUgPSBjdXJ2ZXNbbmFtZV1cbiAgaWYgKCFjdXJ2ZSkgcmV0dXJuIG51bGxcblxuICB2YXIgcCA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLnAsIDE2KVxuICB2YXIgYSA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLmEsIDE2KVxuICB2YXIgYiA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLmIsIDE2KVxuICB2YXIgbiA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLm4sIDE2KVxuICB2YXIgaCA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLmgsIDE2KVxuICB2YXIgR3ggPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5HeCwgMTYpXG4gIHZhciBHeSA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLkd5LCAxNilcblxuICByZXR1cm4gbmV3IEN1cnZlKHAsIGEsIGIsIEd4LCBHeSwgbiwgaClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDdXJ2ZUJ5TmFtZVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMCwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS5cbiAqIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gU0hBLTAgYW5kIFNIQS0xIGlzIGp1c3QgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0XG4gKiBvcGVyYXRpb24gd2FzIGFkZGVkLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4Y2JiYjlkNWRcbiAgdGhpcy5fYmggPSAweDYyOWEyOTJhXG4gIHRoaXMuX2NoID0gMHg5MTU5MDE1YVxuICB0aGlzLl9kaCA9IDB4MTUyZmVjZDhcbiAgdGhpcy5fZWggPSAweDY3MzMyNjY3XG4gIHRoaXMuX2ZoID0gMHg4ZWI0NGE4N1xuICB0aGlzLl9naCA9IDB4ZGIwYzJlMGRcbiAgdGhpcy5faGggPSAweDQ3YjU0ODFkXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQ4KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTM4NFxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3knKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG5cbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIHZhciBoYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gICAga2V5ID0gaGFzaC51cGRhdGUoa2V5KS5kaWdlc3QoKVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG4gIHRoaXMuX2hhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgdGhpcy5faGFzaC51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBoYXNoID0gdGhpcy5fYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYSh0aGlzLl9hbGcpXG4gIHJldHVybiBoYXNoLnVwZGF0ZSh0aGlzLl9vcGFkKS51cGRhdGUoaCkuZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIbWFjIChhbGcsIGtleSkge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSB7XG4gICAgcmV0dXJuIG5ldyBIbWFjKCdybWQxNjAnLCBrZXkpXG4gIH1cbiAgaWYgKGFsZyA9PT0gJ21kNScpIHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeShtZDUsIGtleSlcbiAgfVxuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBibG9ja3NpemUgPSA2NFxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGFsZyhrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB0aGlzLl9oYXNoID0gW2lwYWRdXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnB1c2goZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KHRoaXMuX2hhc2gpKVxuICByZXR1cm4gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQoW3RoaXMuX29wYWQsIGhdKSlcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY1xuIiwidmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICByZXR1cm4gbmV3IE1ENSgpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXG59XG4iLCJ2YXIgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxudmFyIEFMUEhBQkVUID0gJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonXG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZXgoQUxQSEFCRVQpXG4iLCIvLyBiYXNlLXggZW5jb2Rpbmdcbi8vIEZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvYnM1OFxuLy8gT3JpZ2luYWxseSB3cml0dGVuIGJ5IE1pa2UgSGVhcm4gZm9yIEJpdGNvaW5KXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTEgR29vZ2xlIEluY1xuLy8gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgU3RlZmFuIFRob21hc1xuLy8gTWVyZ2VkIEJ1ZmZlciByZWZhY3RvcmluZ3MgZnJvbSBiYXNlNTgtbmF0aXZlIGJ5IFN0ZXBoZW4gUGFpclxuLy8gQ29weXJpZ2h0IChjKSAyMDEzIEJpdFBheSBJbmNcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFzZSAoQUxQSEFCRVQpIHtcbiAgdmFyIEFMUEhBQkVUX01BUCA9IHt9XG4gIHZhciBCQVNFID0gQUxQSEFCRVQubGVuZ3RoXG4gIHZhciBMRUFERVIgPSBBTFBIQUJFVC5jaGFyQXQoMClcblxuICAvLyBwcmUtY29tcHV0ZSBsb29rdXAgdGFibGVcbiAgZm9yICh2YXIgeiA9IDA7IHogPCBBTFBIQUJFVC5sZW5ndGg7IHorKykge1xuICAgIHZhciB4ID0gQUxQSEFCRVQuY2hhckF0KHopXG5cbiAgICBpZiAoQUxQSEFCRVRfTUFQW3hdICE9PSB1bmRlZmluZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoeCArICcgaXMgYW1iaWd1b3VzJylcbiAgICBBTFBIQUJFVF9NQVBbeF0gPSB6XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGUgKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm4gJydcblxuICAgIHZhciBkaWdpdHMgPSBbMF1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gc291cmNlW2ldOyBqIDwgZGlnaXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGRpZ2l0c1tqXSA8PCA4XG4gICAgICAgIGRpZ2l0c1tqXSA9IGNhcnJ5ICUgQkFTRVxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpIHwgMFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGRpZ2l0cy5wdXNoKGNhcnJ5ICUgQkFTRSlcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSB8IDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gJydcblxuICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgZm9yICh2YXIgayA9IDA7IHNvdXJjZVtrXSA9PT0gMCAmJiBrIDwgc291cmNlLmxlbmd0aCAtIDE7ICsraykgc3RyaW5nICs9IExFQURFUlxuICAgIC8vIGNvbnZlcnQgZGlnaXRzIHRvIGEgc3RyaW5nXG4gICAgZm9yICh2YXIgcSA9IGRpZ2l0cy5sZW5ndGggLSAxOyBxID49IDA7IC0tcSkgc3RyaW5nICs9IEFMUEhBQkVUW2RpZ2l0c1txXV1cblxuICAgIHJldHVybiBzdHJpbmdcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBTdHJpbmcnKVxuICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG5cbiAgICB2YXIgYnl0ZXMgPSBbMF1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gQUxQSEFCRVRfTUFQW3N0cmluZ1tpXV1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm5cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gdmFsdWU7IGogPCBieXRlcy5sZW5ndGg7ICsraikge1xuICAgICAgICBjYXJyeSArPSBieXRlc1tqXSAqIEJBU0VcbiAgICAgICAgYnl0ZXNbal0gPSBjYXJyeSAmIDB4ZmZcbiAgICAgICAgY2FycnkgPj49IDhcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGNhcnJ5ID4gMCkge1xuICAgICAgICBieXRlcy5wdXNoKGNhcnJ5ICYgMHhmZilcbiAgICAgICAgY2FycnkgPj49IDhcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkZWFsIHdpdGggbGVhZGluZyB6ZXJvc1xuICAgIGZvciAodmFyIGsgPSAwOyBzdHJpbmdba10gPT09IExFQURFUiAmJiBrIDwgc3RyaW5nLmxlbmd0aCAtIDE7ICsraykge1xuICAgICAgYnl0ZXMucHVzaCgwKVxuICAgIH1cblxuICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcy5yZXZlcnNlKCkpXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUgKHN0cmluZykge1xuICAgIHZhciBidWZmZXIgPSBkZWNvZGVVbnNhZmUoc3RyaW5nKVxuICAgIGlmIChidWZmZXIpIHJldHVybiBidWZmZXJcblxuICAgIHRocm93IG5ldyBFcnJvcignTm9uLWJhc2UnICsgQkFTRSArICcgY2hhcmFjdGVyJylcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG4gICAgZGVjb2RlOiBkZWNvZGVcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICBDb252ZXJ0IGEgc3luY2hyb25vdXMgZnVuY3Rpb24gaW50byBhIGFzeW5jaHJvbm91cyBvbmUgKHZpYSBzZXRUaW1lb3V0KVxuICB3cmFwcGluZyBpdCBpbiBhIHByb21pc2UuICBUaGlzIGRvZXMgbm90IGV4cGVjdCB0aGUgZnVuY3Rpb24gdG8gaGF2ZSBhXG4gIGNhbGxiYWNrIHBhcmFtdGVyLlxuXG4gIEBhcmcge2Z1bmN0aW9ufSBmdW5jIC0gbm9uLWNhbGxiYWNrIGZ1bmN0aW9uXG5cbiAgQGV4YW1wbGUgcHJvbWlzZUFzeW5jKG15ZnVuY3Rpb24pXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNvbHZlKGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7IC8vIGZyb20gZ2l0aHViLmNvbS9iaXRjb2luanMvYml0Y29pbmpzLWxpYiBmcm9tIGdpdGh1Yi5jb20vY3J5cHRvY29pbmpzL2VjZHNhXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnLi9oYXNoJyk7XG52YXIgZW5mb3JjZVR5cGUgPSByZXF1aXJlKCcuL2VuZm9yY2VfdHlwZXMnKTtcblxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJyk7XG52YXIgRUNTaWduYXR1cmUgPSByZXF1aXJlKCcuL2Vjc2lnbmF0dXJlJyk7XG5cbi8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTc5I3NlY3Rpb24tMy4yXG5mdW5jdGlvbiBkZXRlcm1pbmlzdGljR2VuZXJhdGVLKGN1cnZlLCBoYXNoLCBkLCBjaGVja1NpZywgbm9uY2UpIHtcblxuICBlbmZvcmNlVHlwZSgnQnVmZmVyJywgaGFzaCk7XG4gIGVuZm9yY2VUeXBlKEJpZ0ludGVnZXIsIGQpO1xuXG4gIGlmIChub25jZSkge1xuICAgIGhhc2ggPSBjcnlwdG8uc2hhMjU2KEJ1ZmZlci5jb25jYXQoW2hhc2gsIG5ldyBCdWZmZXIobm9uY2UpXSkpO1xuICB9XG5cbiAgLy8gc2FuaXR5IGNoZWNrXG4gIGFzc2VydC5lcXVhbChoYXNoLmxlbmd0aCwgMzIsICdIYXNoIG11c3QgYmUgMjU2IGJpdCcpO1xuXG4gIHZhciB4ID0gZC50b0J1ZmZlcigzMik7XG4gIHZhciBrID0gbmV3IEJ1ZmZlcigzMik7XG4gIHZhciB2ID0gbmV3IEJ1ZmZlcigzMik7XG5cbiAgLy8gU3RlcCBCXG4gIHYuZmlsbCgxKTtcblxuICAvLyBTdGVwIENcbiAgay5maWxsKDApO1xuXG4gIC8vIFN0ZXAgRFxuICBrID0gY3J5cHRvLkhtYWNTSEEyNTYoQnVmZmVyLmNvbmNhdChbdiwgbmV3IEJ1ZmZlcihbMF0pLCB4LCBoYXNoXSksIGspO1xuXG4gIC8vIFN0ZXAgRVxuICB2ID0gY3J5cHRvLkhtYWNTSEEyNTYodiwgayk7XG5cbiAgLy8gU3RlcCBGXG4gIGsgPSBjcnlwdG8uSG1hY1NIQTI1NihCdWZmZXIuY29uY2F0KFt2LCBuZXcgQnVmZmVyKFsxXSksIHgsIGhhc2hdKSwgayk7XG5cbiAgLy8gU3RlcCBHXG4gIHYgPSBjcnlwdG8uSG1hY1NIQTI1Nih2LCBrKTtcblxuICAvLyBTdGVwIEgxL0gyYSwgaWdub3JlZCBhcyB0bGVuID09PSBxbGVuICgyNTYgYml0KVxuICAvLyBTdGVwIEgyYlxuICB2ID0gY3J5cHRvLkhtYWNTSEEyNTYodiwgayk7XG5cbiAgdmFyIFQgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIodik7XG5cbiAgLy8gU3RlcCBIMywgcmVwZWF0IHVudGlsIFQgaXMgd2l0aGluIHRoZSBpbnRlcnZhbCBbMSwgbiAtIDFdXG4gIHdoaWxlIChULnNpZ251bSgpIDw9IDAgfHwgVC5jb21wYXJlVG8oY3VydmUubikgPj0gMCB8fCAhY2hlY2tTaWcoVCkpIHtcbiAgICBrID0gY3J5cHRvLkhtYWNTSEEyNTYoQnVmZmVyLmNvbmNhdChbdiwgbmV3IEJ1ZmZlcihbMF0pXSksIGspO1xuICAgIHYgPSBjcnlwdG8uSG1hY1NIQTI1Nih2LCBrKTtcblxuICAgIC8vIFN0ZXAgSDEvSDJhLCBhZ2FpbiwgaWdub3JlZCBhcyB0bGVuID09PSBxbGVuICgyNTYgYml0KVxuICAgIC8vIFN0ZXAgSDJiIGFnYWluXG4gICAgdiA9IGNyeXB0by5IbWFjU0hBMjU2KHYsIGspO1xuXG4gICAgVCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcih2KTtcbiAgfVxuXG4gIHJldHVybiBUO1xufVxuXG5mdW5jdGlvbiBzaWduKGN1cnZlLCBoYXNoLCBkLCBub25jZSkge1xuXG4gIHZhciBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGhhc2gpO1xuICB2YXIgbiA9IGN1cnZlLm47XG4gIHZhciBHID0gY3VydmUuRztcblxuICB2YXIgciwgcztcbiAgdmFyIGsgPSBkZXRlcm1pbmlzdGljR2VuZXJhdGVLKGN1cnZlLCBoYXNoLCBkLCBmdW5jdGlvbiAoaykge1xuICAgIC8vIGZpbmQgY2Fub25pY2FsbHkgdmFsaWQgc2lnbmF0dXJlXG4gICAgdmFyIFEgPSBHLm11bHRpcGx5KGspO1xuXG4gICAgaWYgKGN1cnZlLmlzSW5maW5pdHkoUSkpIHJldHVybiBmYWxzZTtcblxuICAgIHIgPSBRLmFmZmluZVgubW9kKG4pO1xuICAgIGlmIChyLnNpZ251bSgpID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBzID0gay5tb2RJbnZlcnNlKG4pLm11bHRpcGx5KGUuYWRkKGQubXVsdGlwbHkocikpKS5tb2Qobik7XG4gICAgaWYgKHMuc2lnbnVtKCkgPT09IDApIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9LCBub25jZSk7XG5cbiAgdmFyIE5fT1ZFUl9UV08gPSBuLnNoaWZ0UmlnaHQoMSk7XG5cbiAgLy8gZW5mb3JjZSBsb3cgUyB2YWx1ZXMsIHNlZSBiaXA2MjogJ2xvdyBzIHZhbHVlcyBpbiBzaWduYXR1cmVzJ1xuICBpZiAocy5jb21wYXJlVG8oTl9PVkVSX1RXTykgPiAwKSB7XG4gICAgcyA9IG4uc3VidHJhY3Qocyk7XG4gIH1cblxuICByZXR1cm4gRUNTaWduYXR1cmUociwgcyk7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVJhdyhjdXJ2ZSwgZSwgc2lnbmF0dXJlLCBRKSB7XG4gIHZhciBuID0gY3VydmUubjtcbiAgdmFyIEcgPSBjdXJ2ZS5HO1xuXG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG5cbiAgLy8gMS40LjEgRW5mb3JjZSByIGFuZCBzIGFyZSBib3RoIGludGVnZXJzIGluIHRoZSBpbnRlcnZhbCBbMSwgbiDiiJIgMV1cbiAgaWYgKHIuc2lnbnVtKCkgPD0gMCB8fCByLmNvbXBhcmVUbyhuKSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gIGlmIChzLnNpZ251bSgpIDw9IDAgfHwgcy5jb21wYXJlVG8obikgPj0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIGMgPSBzXi0xIG1vZCBuXG4gIHZhciBjID0gcy5tb2RJbnZlcnNlKG4pO1xuXG4gIC8vIDEuNC40IENvbXB1dGUgdTEgPSBlc17iiJIxIG1vZCBuXG4gIC8vICAgICAgICAgICAgICAgdTIgPSByc17iiJIxIG1vZCBuXG4gIHZhciB1MSA9IGUubXVsdGlwbHkoYykubW9kKG4pO1xuICB2YXIgdTIgPSByLm11bHRpcGx5KGMpLm1vZChuKTtcblxuICAvLyAxLjQuNSBDb21wdXRlIFIgPSAoeFIsIHlSKSA9IHUxRyArIHUyUVxuICB2YXIgUiA9IEcubXVsdGlwbHlUd28odTEsIFEsIHUyKTtcblxuICAvLyAxLjQuNSAoY29udC4pIEVuZm9yY2UgUiBpcyBub3QgYXQgaW5maW5pdHlcbiAgaWYgKGN1cnZlLmlzSW5maW5pdHkoUikpIHJldHVybiBmYWxzZTtcblxuICAvLyAxLjQuNiBDb252ZXJ0IHRoZSBmaWVsZCBlbGVtZW50IFIueCB0byBhbiBpbnRlZ2VyXG4gIHZhciB4UiA9IFIuYWZmaW5lWDtcblxuICAvLyAxLjQuNyBTZXQgdiA9IHhSIG1vZCBuXG4gIHZhciB2ID0geFIubW9kKG4pO1xuXG4gIC8vIDEuNC44IElmIHYgPSByLCBvdXRwdXQgXCJ2YWxpZFwiLCBhbmQgaWYgdiAhPSByLCBvdXRwdXQgXCJpbnZhbGlkXCJcbiAgcmV0dXJuIHYuZXF1YWxzKHIpO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnkoY3VydmUsIGhhc2gsIHNpZ25hdHVyZSwgUSkge1xuICAvLyAxLjQuMiBIID0gSGFzaChNKSwgYWxyZWFkeSBkb25lIGJ5IHRoZSB1c2VyXG4gIC8vIDEuNC4zIGUgPSBIXG4gIHZhciBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGhhc2gpO1xuICByZXR1cm4gdmVyaWZ5UmF3KGN1cnZlLCBlLCBzaWduYXR1cmUsIFEpO1xufVxuXG4vKipcbiAgKiBSZWNvdmVyIGEgcHVibGljIGtleSBmcm9tIGEgc2lnbmF0dXJlLlxuICAqXG4gICogU2VlIFNFQyAxOiBFbGxpcHRpYyBDdXJ2ZSBDcnlwdG9ncmFwaHksIHNlY3Rpb24gNC4xLjYsIFwiUHVibGljXG4gICogS2V5IFJlY292ZXJ5IE9wZXJhdGlvblwiLlxuICAqXG4gICogaHR0cDovL3d3dy5zZWNnLm9yZy9kb3dubG9hZC9haWQtNzgwL3NlYzEtdjIucGRmXG4gICovXG5mdW5jdGlvbiByZWNvdmVyUHViS2V5KGN1cnZlLCBlLCBzaWduYXR1cmUsIGkpIHtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGkgJiAzLCBpLCAnUmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG5cbiAgdmFyIG4gPSBjdXJ2ZS5uO1xuICB2YXIgRyA9IGN1cnZlLkc7XG5cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICBhc3NlcnQoci5zaWdudW0oKSA+IDAgJiYgci5jb21wYXJlVG8obikgPCAwLCAnSW52YWxpZCByIHZhbHVlJyk7XG4gIGFzc2VydChzLnNpZ251bSgpID4gMCAmJiBzLmNvbXBhcmVUbyhuKSA8IDAsICdJbnZhbGlkIHMgdmFsdWUnKTtcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGkgJiAxO1xuXG4gIC8vIFRoZSBtb3JlIHNpZ25pZmljYW50IGJpdCBzcGVjaWZpZXMgd2hldGhlciB3ZSBzaG91bGQgdXNlIHRoZVxuICAvLyBmaXJzdCBvciBzZWNvbmQgY2FuZGlkYXRlIGtleS5cbiAgdmFyIGlzU2Vjb25kS2V5ID0gaSA+PiAxO1xuXG4gIC8vIDEuMSBMZXQgeCA9IHIgKyBqblxuICB2YXIgeCA9IGlzU2Vjb25kS2V5ID8gci5hZGQobikgOiByO1xuICB2YXIgUiA9IGN1cnZlLnBvaW50RnJvbVgoaXNZT2RkLCB4KTtcblxuICAvLyAxLjQgQ2hlY2sgdGhhdCBuUiBpcyBhdCBpbmZpbml0eVxuICB2YXIgblIgPSBSLm11bHRpcGx5KG4pO1xuICBhc3NlcnQoY3VydmUuaXNJbmZpbml0eShuUiksICduUiBpcyBub3QgYSB2YWxpZCBjdXJ2ZSBwb2ludCcpO1xuXG4gIC8vIENvbXB1dGUgLWUgZnJvbSBlXG4gIHZhciBlTmVnID0gZS5uZWdhdGUoKS5tb2Qobik7XG5cbiAgLy8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpXG4gIC8vICAgICAgICAgICAgICAgUSA9IHJeLTEgKHNSICsgLWVHKVxuICB2YXIgckludiA9IHIubW9kSW52ZXJzZShuKTtcblxuICB2YXIgUSA9IFIubXVsdGlwbHlUd28ocywgRywgZU5lZykubXVsdGlwbHkockludik7XG4gIGN1cnZlLnZhbGlkYXRlKFEpO1xuXG4gIHJldHVybiBRO1xufVxuXG4vKipcbiAgKiBDYWxjdWxhdGUgcHVia2V5IGV4dHJhY3Rpb24gcGFyYW1ldGVyLlxuICAqXG4gICogV2hlbiBleHRyYWN0aW5nIGEgcHVia2V5IGZyb20gYSBzaWduYXR1cmUsIHdlIGhhdmUgdG9cbiAgKiBkaXN0aW5ndWlzaCBmb3VyIGRpZmZlcmVudCBjYXNlcy4gUmF0aGVyIHRoYW4gcHV0dGluZyB0aGlzXG4gICogYnVyZGVuIG9uIHRoZSB2ZXJpZmllciwgQml0Y29pbiBpbmNsdWRlcyBhIDItYml0IHZhbHVlIHdpdGggdGhlXG4gICogc2lnbmF0dXJlLlxuICAqXG4gICogVGhpcyBmdW5jdGlvbiBzaW1wbHkgdHJpZXMgYWxsIGZvdXIgY2FzZXMgYW5kIHJldHVybnMgdGhlIHZhbHVlXG4gICogdGhhdCByZXN1bHRlZCBpbiBhIHN1Y2Nlc3NmdWwgcHVia2V5IHJlY292ZXJ5LlxuICAqL1xuZnVuY3Rpb24gY2FsY1B1YktleVJlY292ZXJ5UGFyYW0oY3VydmUsIGUsIHNpZ25hdHVyZSwgUSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBRcHJpbWUgPSByZWNvdmVyUHViS2V5KGN1cnZlLCBlLCBzaWduYXR1cmUsIGkpO1xuXG4gICAgLy8gMS42LjIgVmVyaWZ5IFFcbiAgICBpZiAoUXByaW1lLmVxdWFscyhRKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhbGNQdWJLZXlSZWNvdmVyeVBhcmFtOiBjYWxjUHViS2V5UmVjb3ZlcnlQYXJhbSxcbiAgZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSzogZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSyxcbiAgcmVjb3ZlclB1YktleTogcmVjb3ZlclB1YktleSxcbiAgc2lnbjogc2lnbixcbiAgdmVyaWZ5OiB2ZXJpZnksXG4gIHZlcmlmeVJhdzogdmVyaWZ5UmF3XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOyAvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luanMvYml0Y29pbmpzLWxpYlxudmFyIGVuZm9yY2VUeXBlID0gcmVxdWlyZSgnLi9lbmZvcmNlX3R5cGVzJyk7XG5cbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xuXG5mdW5jdGlvbiBFQ1NpZ25hdHVyZShyLCBzKSB7XG4gIGVuZm9yY2VUeXBlKEJpZ0ludGVnZXIsIHIpO1xuICBlbmZvcmNlVHlwZShCaWdJbnRlZ2VyLCBzKTtcblxuICBmdW5jdGlvbiB0b0NvbXBhY3QoaSwgY29tcHJlc3NlZCkge1xuICAgIGlmIChjb21wcmVzc2VkKSBpICs9IDQ7XG4gICAgaSArPSAyNztcblxuICAgIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKDY1KTtcbiAgICBidWZmZXIud3JpdGVVSW50OChpLCAwKTtcblxuICAgIHIudG9CdWZmZXIoMzIpLmNvcHkoYnVmZmVyLCAxKTtcbiAgICBzLnRvQnVmZmVyKDMyKS5jb3B5KGJ1ZmZlciwgMzMpO1xuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvREVSKCkge1xuICAgIHZhciByQmEgPSByLnRvREVSSW50ZWdlcigpO1xuICAgIHZhciBzQmEgPSBzLnRvREVSSW50ZWdlcigpO1xuXG4gICAgdmFyIHNlcXVlbmNlID0gW107XG5cbiAgICAvLyBJTlRFR0VSXG4gICAgc2VxdWVuY2UucHVzaCgweDAyLCByQmEubGVuZ3RoKTtcbiAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlLmNvbmNhdChyQmEpO1xuXG4gICAgLy8gSU5URUdFUlxuICAgIHNlcXVlbmNlLnB1c2goMHgwMiwgc0JhLmxlbmd0aCk7XG4gICAgc2VxdWVuY2UgPSBzZXF1ZW5jZS5jb25jYXQoc0JhKTtcblxuICAgIC8vIFNFUVVFTkNFXG4gICAgc2VxdWVuY2UudW5zaGlmdCgweDMwLCBzZXF1ZW5jZS5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc2VxdWVuY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9TY3JpcHRTaWduYXR1cmUoaGFzaFR5cGUpIHtcbiAgICB2YXIgaGFzaFR5cGVCdWZmZXIgPSBuZXcgQnVmZmVyKDEpO1xuICAgIGhhc2hUeXBlQnVmZmVyLndyaXRlVUludDgoaGFzaFR5cGUsIDApO1xuXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3RvREVSKCksIGhhc2hUeXBlQnVmZmVyXSk7XG4gIH1cblxuICByZXR1cm4geyByOiByLCBzOiBzLCB0b0NvbXBhY3Q6IHRvQ29tcGFjdCwgdG9ERVI6IHRvREVSLCB0b1NjcmlwdFNpZ25hdHVyZTogdG9TY3JpcHRTaWduYXR1cmUgfTtcbn1cblxuLy8gSW1wb3J0IG9wZXJhdGlvbnNcbkVDU2lnbmF0dXJlLnBhcnNlQ29tcGFjdCA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5sZW5ndGgsIDY1LCAnSW52YWxpZCBzaWduYXR1cmUgbGVuZ3RoJyk7XG4gIHZhciBpID0gYnVmZmVyLnJlYWRVSW50OCgwKSAtIDI3O1xuXG4gIC8vIEF0IG1vc3QgMyBiaXRzXG4gIGFzc2VydC5lcXVhbChpLCBpICYgNywgJ0ludmFsaWQgc2lnbmF0dXJlIHBhcmFtZXRlcicpO1xuICB2YXIgY29tcHJlc3NlZCA9ICEhKGkgJiA0KTtcblxuICAvLyBSZWNvdmVyeSBwYXJhbSBvbmx5XG4gIGkgPSBpICYgMztcblxuICB2YXIgciA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWZmZXIuc2xpY2UoMSwgMzMpKTtcbiAgdmFyIHMgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDMzKSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb21wcmVzc2VkOiBjb21wcmVzc2VkLFxuICAgIGk6IGksXG4gICAgc2lnbmF0dXJlOiBFQ1NpZ25hdHVyZShyLCBzKVxuICB9O1xufTtcblxuRUNTaWduYXR1cmUuZnJvbURFUiA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5yZWFkVUludDgoMCksIDB4MzAsICdOb3QgYSBERVIgc2VxdWVuY2UnKTtcbiAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5yZWFkVUludDgoMSksIGJ1ZmZlci5sZW5ndGggLSAyLCAnSW52YWxpZCBzZXF1ZW5jZSBsZW5ndGgnKTtcbiAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5yZWFkVUludDgoMiksIDB4MDIsICdFeHBlY3RlZCBhIERFUiBpbnRlZ2VyJyk7XG5cbiAgdmFyIHJMZW4gPSBidWZmZXIucmVhZFVJbnQ4KDMpO1xuICBhc3NlcnQockxlbiA+IDAsICdSIGxlbmd0aCBpcyB6ZXJvJyk7XG5cbiAgdmFyIG9mZnNldCA9IDQgKyByTGVuO1xuICBhc3NlcnQuZXF1YWwoYnVmZmVyLnJlYWRVSW50OChvZmZzZXQpLCAweDAyLCAnRXhwZWN0ZWQgYSBERVIgaW50ZWdlciAoMiknKTtcblxuICB2YXIgc0xlbiA9IGJ1ZmZlci5yZWFkVUludDgob2Zmc2V0ICsgMSk7XG4gIGFzc2VydChzTGVuID4gMCwgJ1MgbGVuZ3RoIGlzIHplcm8nKTtcblxuICB2YXIgckIgPSBidWZmZXIuc2xpY2UoNCwgb2Zmc2V0KTtcbiAgdmFyIHNCID0gYnVmZmVyLnNsaWNlKG9mZnNldCArIDIpO1xuICBvZmZzZXQgKz0gMiArIHNMZW47XG5cbiAgaWYgKHJMZW4gPiAxICYmIHJCLnJlYWRVSW50OCgwKSA9PT0gMHgwMCkge1xuICAgIGFzc2VydChyQi5yZWFkVUludDgoMSkgJiAweDgwLCAnUiB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWQnKTtcbiAgfVxuXG4gIGlmIChzTGVuID4gMSAmJiBzQi5yZWFkVUludDgoMCkgPT09IDB4MDApIHtcbiAgICBhc3NlcnQoc0IucmVhZFVJbnQ4KDEpICYgMHg4MCwgJ1MgdmFsdWUgZXhjZXNzaXZlbHkgcGFkZGVkJyk7XG4gIH1cblxuICBhc3NlcnQuZXF1YWwob2Zmc2V0LCBidWZmZXIubGVuZ3RoLCAnSW52YWxpZCBERVIgZW5jb2RpbmcnKTtcbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLmZyb21ERVJJbnRlZ2VyKHJCKTtcbiAgdmFyIHMgPSBCaWdJbnRlZ2VyLmZyb21ERVJJbnRlZ2VyKHNCKTtcblxuICBhc3NlcnQoci5zaWdudW0oKSA+PSAwLCAnUiB2YWx1ZSBpcyBuZWdhdGl2ZScpO1xuICBhc3NlcnQocy5zaWdudW0oKSA+PSAwLCAnUyB2YWx1ZSBpcyBuZWdhdGl2ZScpO1xuXG4gIHJldHVybiBFQ1NpZ25hdHVyZShyLCBzKTtcbn07XG5cbi8vIEZJWE1FOiAweDAwLCAweDA0LCAweDgwIGFyZSBTSUdIQVNIXyogYm91bmRhcnkgY29uc3RhbnRzLCBpbXBvcnRpbmcgVHJhbnNhY3Rpb24gY2F1c2VzIGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuRUNTaWduYXR1cmUucGFyc2VTY3JpcHRTaWduYXR1cmUgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHZhciBoYXNoVHlwZSA9IGJ1ZmZlci5yZWFkVUludDgoYnVmZmVyLmxlbmd0aCAtIDEpO1xuICB2YXIgaGFzaFR5cGVNb2QgPSBoYXNoVHlwZSAmIH4weDgwO1xuXG4gIGFzc2VydChoYXNoVHlwZU1vZCA+IDB4MDAgJiYgaGFzaFR5cGVNb2QgPCAweDA0LCAnSW52YWxpZCBoYXNoVHlwZScpO1xuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBFQ1NpZ25hdHVyZS5mcm9tREVSKGJ1ZmZlci5zbGljZSgwLCAtMSkpLFxuICAgIGhhc2hUeXBlOiBoYXNoVHlwZVxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFQ1NpZ25hdHVyZTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIEFlcyA9IHJlcXVpcmUoXCIuL2Flc1wiKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZShcIi4va2V5X3ByaXZhdGVcIik7XG52YXIgUHVibGljS2V5ID0gcmVxdWlyZShcIi4va2V5X3B1YmxpY1wiKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKFwiLi9zaWduYXR1cmVcIik7XG52YXIga2V5X3V0aWxzID0gcmVxdWlyZShcIi4va2V5X3V0aWxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBBZXM6IEFlcywgUHJpdmF0ZUtleTogUHJpdmF0ZUtleSwgUHVibGljS2V5OiBQdWJsaWNLZXksXG4gICAgU2lnbmF0dXJlOiBTaWduYXR1cmUsIGtleV91dGlsczoga2V5X3V0aWxzXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdieXRlYnVmZmVyJyksXG4gICAgTG9uZyA9IF9yZXF1aXJlLkxvbmc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxudmFyIHR5cGVzID0ge1xuICBieXRlczogZnVuY3Rpb24gYnl0ZXMoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmXTtcbiAgfSxcbiAgc3RyaW5nOiBmdW5jdGlvbiBzdHJpbmcoKSB7XG4gICAgcmV0dXJuIFtfc3RyaW5nXTtcbiAgfSxcbiAgdmVjdG9yOiBmdW5jdGlvbiB2ZWN0b3IodHlwZSkge1xuICAgIHZhciBzb3J0ZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgcmV0dXJuIFtfdmVjdG9yLCB7IHR5cGU6IHR5cGUsIHNvcnRlZDogc29ydGVkIH1dO1xuICB9LFxuICBvcHRpb25hbDogZnVuY3Rpb24gb3B0aW9uYWwodHlwZSkge1xuICAgIHJldHVybiBbX29wdGlvbmFsLCB7IHR5cGU6IHR5cGUgfV07XG4gIH0sXG4gIHRpbWU6IGZ1bmN0aW9uIHRpbWUoKSB7XG4gICAgcmV0dXJuIFtfdGltZTJdO1xuICB9LFxuICBtYXA6IGZ1bmN0aW9uIG1hcChhbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIFtfbWFwLCB7IGFubm90YXRpb246IGFubm90YXRpb24gfV07XG4gIH0sXG4gIHN0YXRpY192YXJpYW50OiBmdW5jdGlvbiBzdGF0aWNfdmFyaWFudCh0eXBlcykge1xuICAgIHJldHVybiBbX3N0YXRpY192YXJpYW50LCB7IHR5cGVzOiB0eXBlcyB9XTtcbiAgfSxcblxuICBmaXhlZF9zdHJpbmcxNjogZnVuY3Rpb24gZml4ZWRfc3RyaW5nMTYoKSB7XG4gICAgcmV0dXJuIFtfc3RyaW5nLCB7IG1heExlbjogMTYgfV07XG4gIH0sXG4gIGZpeGVkX3N0cmluZzMyOiBmdW5jdGlvbiBmaXhlZF9zdHJpbmczMigpIHtcbiAgICByZXR1cm4gW19zdHJpbmcsIHsgbWF4TGVuOiAzMiB9XTtcbiAgfSxcblxuICBmaXhlZF9ieXRlczE2OiBmdW5jdGlvbiBmaXhlZF9ieXRlczE2KCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDE2IH1dO1xuICB9LFxuICBmaXhlZF9ieXRlczIwOiBmdW5jdGlvbiBmaXhlZF9ieXRlczIwKCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDIwIH1dO1xuICB9LFxuICBmaXhlZF9ieXRlczI4OiBmdW5jdGlvbiBmaXhlZF9ieXRlczI4KCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDI4IH1dO1xuICB9LFxuICBmaXhlZF9ieXRlczMyOiBmdW5jdGlvbiBmaXhlZF9ieXRlczMyKCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDMyIH1dO1xuICB9LFxuICBmaXhlZF9ieXRlczMzOiBmdW5jdGlvbiBmaXhlZF9ieXRlczMzKCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDMzIH1dO1xuICB9LFxuICBmaXhlZF9ieXRlczY0OiBmdW5jdGlvbiBmaXhlZF9ieXRlczY0KCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDY0IH1dO1xuICB9LFxuICBmaXhlZF9ieXRlczY1OiBmdW5jdGlvbiBmaXhlZF9ieXRlczY1KCkge1xuICAgIHJldHVybiBbYnl0ZWJ1ZiwgeyBsZW46IDY1IH1dO1xuICB9LFxuXG4gIHVpbnQ4OiBmdW5jdGlvbiB1aW50OCgpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBiaXRzOiA4IH1dO1xuICB9LFxuICB1aW50MTY6IGZ1bmN0aW9uIHVpbnQxNigpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBiaXRzOiAxNiB9XTtcbiAgfSxcbiAgdWludDMyOiBmdW5jdGlvbiB1aW50MzIoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgYml0czogMzIgfV07XG4gIH0sXG4gIHVpbnQ2NDogZnVuY3Rpb24gdWludDY0KCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IGJpdHM6IDY0IH1dO1xuICB9LFxuICB1aW50MTI4OiBmdW5jdGlvbiB1aW50MTI4KCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgYml0czogMTI4IH1dO1xuICB9LFxuICB1aW50MjI0OiBmdW5jdGlvbiB1aW50MjI0KCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgYml0czogMjI0IH1dO1xuICB9LFxuICB1aW50MjU2OiBmdW5jdGlvbiB1aW50MjU2KCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgYml0czogMjU2IH1dO1xuICB9LFxuICB1aW50NTEyOiBmdW5jdGlvbiB1aW50NTEyKCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgYml0czogNTEyIH1dO1xuICB9LFxuXG4gIHZhcnVpbnQzMjogZnVuY3Rpb24gdmFydWludDMyKCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IGJpdHM6IDMyLCB2YXJpYWJsZTogdHJ1ZSB9XTtcbiAgfSxcblxuICBpbnQ4OiBmdW5jdGlvbiBpbnQ4KCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogOCB9XTtcbiAgfSxcbiAgaW50MTY6IGZ1bmN0aW9uIGludDE2KCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogMTYgfV07XG4gIH0sXG4gIGludDMyOiBmdW5jdGlvbiBpbnQzMigpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDMyIH1dO1xuICB9LFxuICBpbnQ2NDogZnVuY3Rpb24gaW50NjQoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiA2NCB9XTtcbiAgfSxcbiAgaW50MTI4OiBmdW5jdGlvbiBpbnQxMjgoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDEyOCB9XTtcbiAgfSxcbiAgaW50MjI0OiBmdW5jdGlvbiBpbnQyMjQoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDIyNCB9XTtcbiAgfSxcbiAgaW50MjU2OiBmdW5jdGlvbiBpbnQyNTYoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDI1NiB9XTtcbiAgfSxcbiAgaW50NTEyOiBmdW5jdGlvbiBpbnQ1MTIoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDUxMiB9XTtcbiAgfSxcblxuICB2YXJpbnQzMjogZnVuY3Rpb24gdmFyaW50MzIoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiAzMiwgdmFyaWFibGU6IHRydWUgfV07XG4gIH0sXG5cbiAgZmxvYXQzMjogZnVuY3Rpb24gZmxvYXQzMigpIHtcbiAgICByZXR1cm4gW2Zsb2F0LCB7IGJpdHM6IDMyIH1dO1xuICB9LFxuICBmbG9hdDY0OiBmdW5jdGlvbiBmbG9hdDY0KCkge1xuICAgIHJldHVybiBbZmxvYXQsIHsgYml0czogNjQgfV07XG4gIH1cblxuICAvKlxuICAgIEBhcmcge1NlcmlhbGl6ZXJDb25maWd9IGNvbmZpZ1xuICAgIEByZXR1cm4ge29iamVjdH0ge1t0eXBlTmFtZV06IGZ1bmN0aW9uKGFyZ3MpfVxuICAqL1xufTttb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7IGRlZmF1bHRzOiBmYWxzZSwgZGVidWc6IGZhbHNlLCBjdXN0b21UeXBlczoge30gfSwgY29uZmlnKTtcblxuICB2YXIgYWxsVHlwZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0eXBlcywgY29uZmlnLmN1c3RvbVR5cGVzKTtcblxuICB2YXIgY3JlYXRlVHlwZVJlZHVjZXIgPSBmdW5jdGlvbiBjcmVhdGVUeXBlUmVkdWNlcihiYXNlVHlwZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGN1c3RvbVR5cGVzLCBuYW1lKSB7XG4gICAgICBjdXN0b21UeXBlc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHR5cGUgPSBjcmVhdGVUeXBlKG5hbWUsIGNvbmZpZywgYXJncywgYmFzZVR5cGVzLCBhbGxUeXBlcywgY3VzdG9tVHlwZXMpO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gY3VzdG9tVHlwZXM7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgYmFzZVR5cGVzID0gT2JqZWN0LmtleXModHlwZXMpLnJlZHVjZShjcmVhdGVUeXBlUmVkdWNlcigpLCB7fSk7XG5cbiAgdmFyIGN1c3RvbVR5cGVzID0gT2JqZWN0LmtleXMoY29uZmlnLmN1c3RvbVR5cGVzIHx8IHt9KS5yZWR1Y2UoY3JlYXRlVHlwZVJlZHVjZXIoYmFzZVR5cGVzKSwge30pO1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzLCB7IGNvbmZpZzogY29uZmlnIH0pO1xufTtcblxuLyoqXG4gICAgQGFyZ3Mge3N0cmluZ30gdHlwZU5hbWUgLSBtYXRjaGVzIHR5cGVzW11cbiAgICBAYXJncyB7c3RyaW5nfSBjb25maWcgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cyBmb3IgdHlwZXNcbiovXG5mdW5jdGlvbiBjcmVhdGVUeXBlKHR5cGVOYW1lLCBjb25maWcsIGFyZ3MsIGJhc2VUeXBlcywgYWxsVHlwZXMsIGN1c3RvbVR5cGVzKSB7XG4gIHZhciBUeXBlID0gYmFzZVR5cGVzID8gYWxsVHlwZXNbdHlwZU5hbWVdIDogdHlwZXNbdHlwZU5hbWVdO1xuXG4gIHZhciBfVHlwZSA9IFR5cGUuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpLFxuICAgICAgX1R5cGUyID0gX3NsaWNlZFRvQXJyYXkoX1R5cGUsIDIpLFxuICAgICAgZm4gPSBfVHlwZTJbMF0sXG4gICAgICBfVHlwZTIkID0gX1R5cGUyWzFdLFxuICAgICAgdiA9IF9UeXBlMiQgPT09IHVuZGVmaW5lZCA/IHt9IDogX1R5cGUyJDtcblxuICB2YXIgdmFsaWRhdGlvbiA9IE9iamVjdC5hc3NpZ24odiwgY29uZmlnKTtcbiAgdmFsaWRhdGlvbi50eXBlTmFtZSA9IHR5cGVOYW1lO1xuICB2YXIgdHlwZSA9IGZuKHZhbGlkYXRpb24sIGJhc2VUeXBlcywgY3VzdG9tVHlwZXMpO1xuICB0eXBlLnR5cGVOYW1lID0gdHlwZU5hbWU7XG4gIHJldHVybiB0eXBlO1xufVxuXG52YXIgX21hcCA9IGZ1bmN0aW9uIF9tYXAodmFsaWRhdGlvbikge1xuICB2YXIgX3ZhbGlkYXRpb24kYW5ub3RhdGlvID0gX3NsaWNlZFRvQXJyYXkodmFsaWRhdGlvbi5hbm5vdGF0aW9uLCAyKSxcbiAgICAgIHR5cGUxID0gX3ZhbGlkYXRpb24kYW5ub3RhdGlvWzBdLFxuICAgICAgdHlwZTIgPSBfdmFsaWRhdGlvbiRhbm5vdGF0aW9bMV07XG5cbiAgaWYgKCFpc1NlcmlhbGl6ZXIodHlwZTEpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFwPHR5cGUxLCA+IHVua25vd24nKTtcbiAgfVxuICBpZiAoIWlzU2VyaWFsaXplcih0eXBlMikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXA8LCB0eXBlMj4gdW5rbm93bicpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIHNpemUgPSBiLnJlYWRWYXJpbnQzMigpO1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgcmVzdWx0W3R5cGUxLmZyb21CeXRlQnVmZmVyKGIpXSA9IHR5cGUyLmZyb21CeXRlQnVmZmVyKGIpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJzB4JyArIHNpemUudG9TdHJpbmcoMTYpLCAnKG1hcC5mcm9tQnl0ZUJ1ZmZlciBsZW5ndGgpJywgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICAgIGIud3JpdGVWYXJpbnQzMihrZXlzLmxlbmd0aCk7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygnMHgnICsga2V5cy5sZW5ndGgudG9TdHJpbmcoMTYpLCAnKG1hcC5hcHBlbmRCeXRlQnVmZmVyIGxlbmd0aCknLCBrZXlzKTtcbiAgICAgIH1cbiAgICAgIC8vIGlmKHNvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gICB2YWx1ZSA9IHNvcnRLZXlzKHR5cGUxLCBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkpXG4gICAgICAvLyB9XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0ga2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgbyA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgdmFyIHZhbHVlMiA9IHZhbHVlW29dO1xuICAgICAgICAgIHR5cGUxLmFwcGVuZEJ5dGVCdWZmZXIoYiwgbyk7XG4gICAgICAgICAgdHlwZTIuYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZTIpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIC8vIGlmKHNvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gICB2YWx1ZSA9IHNvcnRLZXlzKHR5cGUxLCBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkpXG4gICAgICAvLyB9XG4gICAgICBmb3IgKHZhciBvIGluIHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFt0eXBlMS5mcm9tT2JqZWN0KG8pXSA9IHR5cGUyLmZyb21PYmplY3QodmFsdWVbb10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCB0eXBlMS50b09iamVjdChudWxsKSwgdHlwZTIudG9PYmplY3QobnVsbCkpO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgLy8gaWYoc29ydGVkID09PSB0cnVlKSB7XG4gICAgICAvLyAgIHZhbHVlID0gc29ydEtleSh0eXBlMSwgT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpKVxuICAgICAgLy8gfVxuICAgICAgZm9yICh2YXIgbyBpbiB2YWx1ZSkge1xuICAgICAgICByZXN1bHRbdHlwZTEudG9PYmplY3QobyldID0gdHlwZTIudG9PYmplY3QodmFsdWVbb10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgX3N0YXRpY192YXJpYW50ID0gZnVuY3Rpb24gX3N0YXRpY192YXJpYW50KHZhbGlkYXRpb24pIHtcbiAgdmFyIHR5cGVzID0gdmFsaWRhdGlvbi50eXBlcztcblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgdHlwZVBvc2l0aW9uID0gYi5yZWFkVmFyaW50MzIoKTtcbiAgICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZVBvc2l0aW9uXTtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ3N0YXRpY192YXJpYW50IGlkICcgKyB0eXBlUG9zaXRpb24gKyAnICgweCcgKyB0eXBlUG9zaXRpb24udG9TdHJpbmcoMTYpICsgJyknKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydCh0eXBlLCAnc3RhdGljX3ZhcmlhbnQgaW52YWxpZCB0eXBlIHBvc2l0aW9uICcgKyB0eXBlUG9zaXRpb24pO1xuICAgICAgcmV0dXJuIFt0eXBlUG9zaXRpb24sIHR5cGUuZnJvbUJ5dGVCdWZmZXIoYildO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvYmplY3QpIHtcbiAgICAgIGFzc2VydChBcnJheS5pc0FycmF5KG9iamVjdCkgJiYgb2JqZWN0Lmxlbmd0aCA9PT0gMiwgJ1JlcXVpcmVkIHR1cGxlJyk7XG4gICAgICB2YXIgdHlwZVBvc2l0aW9uID0gb2JqZWN0WzBdO1xuICAgICAgdmFyIHR5cGUgPSB0eXBlc1t0eXBlUG9zaXRpb25dO1xuICAgICAgYXNzZXJ0KHR5cGUsICd0eXBlICcgKyB0eXBlUG9zaXRpb24pO1xuICAgICAgYi53cml0ZVZhcmludDMyKHR5cGVQb3NpdGlvbik7XG4gICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgb2JqZWN0WzFdKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3Qob2JqZWN0KSB7XG4gICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5sZW5ndGggPT09IDIsICdSZXF1aXJlZCB0dXBsZScpO1xuICAgICAgdmFyIHR5cGVQb3NpdGlvbiA9IG9iamVjdFswXTtcbiAgICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZVBvc2l0aW9uXTtcbiAgICAgIGFzc2VydCh0eXBlLCAndHlwZSAnICsgdHlwZVBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBbdHlwZVBvc2l0aW9uLCB0eXBlLmZyb21PYmplY3Qob2JqZWN0WzFdKV07XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3Qob2JqZWN0KSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiBvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gWzAsIHR5cGVzWzBdLnRvT2JqZWN0KG51bGwsIGRlYnVnKV07XG4gICAgICB9XG4gICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5sZW5ndGggPT09IDIsICdSZXF1aXJlZCB0dXBsZScpO1xuICAgICAgdmFyIHR5cGVQb3NpdGlvbiA9IG9iamVjdFswXTtcbiAgICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZVBvc2l0aW9uXTtcbiAgICAgIGFzc2VydCh0eXBlLCAndHlwZSAnICsgdHlwZVBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBbdHlwZVBvc2l0aW9uLCB0eXBlLnRvT2JqZWN0KG9iamVjdFsxXSldO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfdmVjdG9yID0gZnVuY3Rpb24gX3ZlY3Rvcih2YWxpZGF0aW9uKSB7XG4gIHZhciB0eXBlID0gdmFsaWRhdGlvbi50eXBlLFxuICAgICAgc29ydGVkID0gdmFsaWRhdGlvbi5zb3J0ZWQ7XG5cbiAgaWYgKCFpc1NlcmlhbGl6ZXIodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2ZWN0b3IgdHlwZSBzaG91bGQgYmUgYSBzZXJpYWxpemVyJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgc2l6ZSA9IGIucmVhZFZhcmludDMyKCk7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygnZnJvbUJ5dGVCdWZmZXIgdmVjdG9yIGxlbmd0aCcsIHNpemUsICcoMHgnICsgc2l6ZS50b1N0cmluZygxNikgKyAnKScpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgcmVzdWx0LnB1c2godHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIGIud3JpdGVWYXJpbnQzMih2YWx1ZS5sZW5ndGgpO1xuICAgICAgaWYgKHNvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9IHNvcnQodHlwZSwgT2JqZWN0LmFzc2lnbihbXSwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcweCcgKyB2YWx1ZS5sZW5ndGgudG9TdHJpbmcoMTYpLCAnKHZlY3Rvci5hcHBlbmRCeXRlQnVmZmVyIGxlbmd0aCknLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIG8gPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgbyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIG8gPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgICByZXN1bHQucHVzaCh0eXBlLmZyb21PYmplY3QobykpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmVzdWx0ID0gc29ydCh0eXBlLCBPYmplY3QuYXNzaWduKFtdLCByZXN1bHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFt0eXBlLnRvT2JqZWN0KHZhbHVlKV07XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgaWYgKHNvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9IHNvcnQodHlwZSwgT2JqZWN0LmFzc2lnbihbXSwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgbyA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgIHJlc3VsdC5wdXNoKHR5cGUudG9PYmplY3QobykpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I0LnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufTtcblxudmFyIF9vcHRpb25hbCA9IGZ1bmN0aW9uIF9vcHRpb25hbCh2YWxpZGF0aW9uKSB7XG4gIHZhciB0eXBlID0gdmFsaWRhdGlvbi50eXBlO1xuXG4gIGlmICghaXNTZXJpYWxpemVyKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uYWwgcGFyYW1ldGVyIHNob3VsZCBiZSBhIHNlcmlhbGl6ZXInKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIGlmICghKGIucmVhZFVpbnQ4KCkgPT09IDEpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBiLndyaXRlVWludDgoMSk7XG4gICAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLndyaXRlVWludDgoMCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlLmZyb21PYmplY3QodmFsdWUpO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICAvLyB0b09iamVjdCBpcyBvbmx5IG51bGwgc2F2ZSBpZiBkZWZhdWx0cyBpcyB0cnVlXG4gICAgICB2YXIgcmVzdWx0VmFsdWUgPSB2b2lkIDA7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhdmFsaWRhdGlvbi5kZWZhdWx0cykge1xuICAgICAgICByZXN1bHRWYWx1ZSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRWYWx1ZSA9IHR5cGUudG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdFZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBpbnRidWZUeXBlID0gZnVuY3Rpb24gaW50YnVmVHlwZShfcmVmMikge1xuICB2YXIgX3JlZjIkc2lnbmVkID0gX3JlZjIuc2lnbmVkLFxuICAgICAgc2lnbmVkID0gX3JlZjIkc2lnbmVkID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYyJHNpZ25lZCxcbiAgICAgIGJpdHMgPSBfcmVmMi5iaXRzLFxuICAgICAgdmFyaWFibGUgPSBfcmVmMi52YXJpYWJsZTtcbiAgcmV0dXJuIHZhcmlhYmxlID8gJ1ZhcmludCcgKyBiaXRzICsgKHNpZ25lZCA/ICdaaWdaYWcnIDogJycpIDogJycgKyAoc2lnbmVkID8gJ0ludCcgOiAnVWludCcpICsgYml0cztcbn07XG5cbnZhciBpbnRidWYgPSBmdW5jdGlvbiBpbnRidWYodmFsaWRhdGlvbikge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgdmFsdWUgPSBiWydyZWFkJyArIGludGJ1ZlR5cGUodmFsaWRhdGlvbildKCk7XG4gICAgICByZXR1cm4gTG9uZy5pc0xvbmcodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgLy8gdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pXG4gICAgICAvLyB2YWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBMb25nLmZyb21TdHJpbmcodmFsdWUpIDogdmFsdWVcbiAgICAgIGJbJ3dyaXRlJyArIGludGJ1ZlR5cGUodmFsaWRhdGlvbildKHZhbHVlKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIC8vIGlmKHZhbGlkYXRpb24uYml0cyA+IDUzICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAvLyAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGlvbi5iaXRzID4gNTMgPyAnMCcgOiAwO1xuICAgICAgfVxuXG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmJpdHMgPiA1MyAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgLy8gICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuXG4gICAgICByZXR1cm4gTG9uZy5pc0xvbmcodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKiBCaWcgTnVtYmVycyAoPiA2NCBiaXRzKSAqL1xudmFyIGJuYnVmID0gZnVuY3Rpb24gYm5idWYodmFsaWRhdGlvbikge1xuICB2YXIgX3ZhbGlkYXRpb24kc2lnbmVkID0gdmFsaWRhdGlvbi5zaWduZWQsXG4gICAgICBzaWduZWQgPSBfdmFsaWRhdGlvbiRzaWduZWQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3ZhbGlkYXRpb24kc2lnbmVkLFxuICAgICAgYml0cyA9IHZhbGlkYXRpb24uYml0cztcblxuICB2YXIgc2l6ZSA9IGJpdHMgLyA4O1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYmNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgc2l6ZSk7XG4gICAgICBiLnNraXAoc2l6ZSk7XG5cbiAgICAgIHZhciBibiA9IG5ldyBCTihiY29weS50b0hleCgpLCAnaGV4Jyk7XG4gICAgICB2YXIgYnVmID0gYm4udG9BcnJheUxpa2UoQnVmZmVyLCAnbGUnLCBzaXplKTsgLy8gY29udmVydCB0byBsaXR0bGUgZW5kaWFuXG4gICAgICBibiA9IG5ldyBCTihidWYudG9TdHJpbmcoJ2hleCcpLCAnaGV4Jyk7XG4gICAgICBpZiAoc2lnbmVkKSB7XG4gICAgICAgIGJuID0gYm4uZnJvbVR3b3MoYml0cyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBibi50b1N0cmluZygpO1xuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIGJpdHMgPiA1MyA/IHZhbHVlIDogYm4udG9OdW1iZXIoKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHZhciBibiA9IG5ldyBCTih2YWx1ZSk7XG4gICAgICBpZiAoc2lnbmVkKSB7XG4gICAgICAgIGJuID0gYm4udG9Ud29zKGJpdHMpO1xuICAgICAgfVxuICAgICAgdmFyIGJ1ZiA9IGJuLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2xlJywgc2l6ZSk7XG4gICAgICBiLmFwcGVuZChidWYudG9TdHJpbmcoJ2JpbmFyeScpLCAnYmluYXJ5Jyk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb24uYml0cyA+IDUzID8gJzAnIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgZmxvYXRQb2ludCA9IHJlcXVpcmUoJ2llZWUtZmxvYXQnKTtcblxudmFyIGZsb2F0ID0gZnVuY3Rpb24gZmxvYXQodmFsaWRhdGlvbikge1xuICB2YXIgYml0cyA9IHZhbGlkYXRpb24uYml0cztcblxuICAvLyBhc3NlcnQoYml0cyA9PT0gMzIgfHwgYml0cyA9PT0gNjQsICd1bnN1cHBvcnRlZCBmbG9hdCBiaXQgc2l6ZTogJyArIGJpdHMpXG5cbiAgdmFyIHNpemVOYW1lID0gYml0cyA9PT0gMzIgPyAnRmxvYXQnIDogYml0cyA9PT0gNjQgPyAnRG91YmxlJyA6IG51bGw7XG4gIGFzc2VydChzaXplTmFtZSwgJ3Vuc3VwcG9ydGVkIGZsb2F0IGJpdCBzaXplOiAnICsgYml0cyk7XG4gIHZhciBzaXplID0gYml0cyAvIDg7XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGJjb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIHNpemUpO1xuICAgICAgYi5za2lwKHNpemUpO1xuICAgICAgdmFyIGZiID0gQnVmZmVyLmZyb20oYmNvcHkudG9CaW5hcnkoKSwgJ2JpbmFyeScpO1xuICAgICAgcmV0dXJuIGZsb2F0UG9pbnRbJ3JlYWQnICsgc2l6ZU5hbWUgKyAnTEUnXShmYik7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICBmbG9hdFBvaW50Wyd3cml0ZScgKyBzaXplTmFtZSArICdMRSddKG91dHB1dCwgdmFsdWUpO1xuICAgICAgYi5hcHBlbmQob3V0cHV0KTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBieXRlYnVmID0gZnVuY3Rpb24gYnl0ZWJ1Zih2YWxpZGF0aW9uKSB7XG4gIHZhciBfYnl0ZWJ1ZiA9IHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGxlbiA9IHZhbGlkYXRpb24ubGVuO1xuXG4gICAgICB2YXIgYkNvcHkgPSB2b2lkIDA7XG4gICAgICBpZiAobGVuID09IG51bGwpIHtcbiAgICAgICAgdmFyIGxlblByZWZpeCA9IGIucmVhZFZhcmludDMyKCk7XG4gICAgICAgIGJDb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIGxlblByZWZpeCk7XG4gICAgICAgIGIuc2tpcChsZW5QcmVmaXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYkNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgbGVuKTtcbiAgICAgICAgYi5za2lwKGxlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gQnVmZmVyLmZyb20oYkNvcHkudG9CaW5hcnkoKSwgJ2JpbmFyeScpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgLy8gdmFsdWUgPSBfYnl0ZWJ1Zi5mcm9tT2JqZWN0KHZhbHVlKVxuXG4gICAgICB2YXIgbGVuID0gdmFsaWRhdGlvbi5sZW47XG5cbiAgICAgIGlmIChsZW4gPT0gbnVsbCkge1xuICAgICAgICBiLndyaXRlVmFyaW50MzIodmFsdWUubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGIuYXBwZW5kKHZhbHVlLnRvU3RyaW5nKCdiaW5hcnknKSwgJ2JpbmFyeScpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWUgPSBCdWZmZXIuZnJvbSh2YWx1ZSwgJ2hleCcpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHZhbHVlID0gQnVmZmVyLmZyb20odmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgdmFsdWUgPSBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIGRlZmF1bHRzID0gdmFsaWRhdGlvbi5kZWZhdWx0cyxcbiAgICAgICAgICBsZW4gPSB2YWxpZGF0aW9uLmxlbjtcblxuICAgICAgaWYgKGRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5KGxlbiA/IGxlbiArIDEgOiAxKS5qb2luKCcwMCcpO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9LFxuICAgIGNvbXBhcmU6IGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKGEsIGIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9ieXRlYnVmO1xufTtcblxudmFyIF9zdHJpbmcgPSBmdW5jdGlvbiBfc3RyaW5nKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgcmV0dXJuIGIucmVhZFZTdHJpbmcoKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIGIud3JpdGVWU3RyaW5nKHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgX3RpbWUyID0gZnVuY3Rpb24gX3RpbWUyKHZhbGlkYXRpb24pIHtcbiAgdmFyIF90aW1lID0ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICByZXR1cm4gYi5yZWFkVWludDMyKCk7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyBpZih0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpXG4gICAgICAvLyAgICAgdmFsdWUgPSBfdGltZS5mcm9tT2JqZWN0KHZhbHVlKVxuXG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICBiLndyaXRlVWludDMyKHZhbHVlKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUuZ2V0VGltZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih2YWx1ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGRhdGUgdHlwZTogJyArIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hyb21lIGFzc3VtZXMgWnVsdSB3aGVuIG1pc3NpbmcsIEZpcmVmb3ggZG9lcyBub3RcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEvWiQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlICs9ICdaJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IobmV3IERhdGUodmFsdWUpLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgwKS50b0lTT1N0cmluZygpLnNwbGl0KCcuJylbMF07XG4gICAgICB9XG5cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcblxuICAgICAgLy8gaWYodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyAgICAgaWYoIS9aJC8udGVzdCh2YWx1ZSkpXG4gICAgICAvLyAgICAgICAgIHZhbHVlICs9IFwiWlwiXG4gICAgICAvL1xuICAgICAgLy8gICAgIHJldHVybiB2YWx1ZVxuICAgICAgLy8gfVxuXG4gICAgICAvLyBpZih2YWx1ZS5nZXRUaW1lKVxuICAgICAgLy8gICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpLnNwbGl0KCcuJylbMF0gKyAnWidcblxuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHNwcmVhZCh2YWxpZGF0aW9uLCB7IGJpdHM6IDMyIH0pKTtcbiAgICAgIHZhciBpbnQgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICByZXR1cm4gbmV3IERhdGUoaW50ICogMTAwMCkudG9JU09TdHJpbmcoKS5zcGxpdCgnLicpWzBdO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF90aW1lO1xufTtcblxudmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pIHtcbiAgaWYgKGlzRW1wdHkodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCAnICsgdmFsaWRhdGlvbi50eXBlTmFtZSk7XG4gIH1cblxuICBpZiAodmFsaWRhdGlvbi5sZW4gIT0gbnVsbCkge1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdsZW4gdmFsaWRhdGlvbiByZXF1cmllcyBhIFwibGVuZ3RoXCIgcHJvcGVydHknKTtcbiAgICB9XG5cbiAgICB2YXIgbGVuID0gdmFsaWRhdGlvbi5sZW47XG5cbiAgICBpZiAodmFsdWUubGVuZ3RoICE9PSBsZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih2YWxpZGF0aW9uLnR5cGVOYW1lICsgJyBsZW5ndGggJyArIHZhbHVlLmxlbmd0aCArICcgZG9lcyBub3QgZXF1YWwgJyArIGxlbik7XG4gICAgfVxuICB9XG5cbiAgaWYgKHZhbGlkYXRpb24ubWF4TGVuICE9IG51bGwpIHtcbiAgICB2YXIgbWF4TGVuID0gdmFsaWRhdGlvbi5tYXhMZW47XG5cbiAgICBpZiAodmFsdWUubGVuZ3RoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWF4TGVuIHZhbGlkYXRpb24gcmVxdXJpZXMgYSBcImxlbmd0aFwiIHByb3BlcnR5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IG1heExlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkYXRpb24udHlwZU5hbWUgKyAnIGxlbmd0aCAnICsgdmFsdWUubGVuZ3RoICsgJyBleGNlZWRzIG1heExlbiAnICsgbWF4TGVuKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBaRVJPID0gbmV3IEJOKCk7XG52YXIgT05FID0gbmV3IEJOKCcxJyk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKSB7XG4gIGlmIChpc0VtcHR5KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgJyArIHZhbGlkYXRpb24udHlwZU5hbWUpO1xuICB9XG4gIHZhciBfdmFsaWRhdGlvbiRzaWduZWQyID0gdmFsaWRhdGlvbi5zaWduZWQsXG4gICAgICBzaWduZWQgPSBfdmFsaWRhdGlvbiRzaWduZWQyID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF92YWxpZGF0aW9uJHNpZ25lZDIsXG4gICAgICBfdmFsaWRhdGlvbiRiaXRzID0gdmFsaWRhdGlvbi5iaXRzLFxuICAgICAgYml0cyA9IF92YWxpZGF0aW9uJGJpdHMgPT09IHVuZGVmaW5lZCA/IDU0IDogX3ZhbGlkYXRpb24kYml0cztcblxuXG4gIHZhbHVlID0gU3RyaW5nKHZhbHVlKS50cmltKCk7XG4gIGlmIChzaWduZWQgJiYgIS9eLT9bMC05XSskLy50ZXN0KHZhbHVlKSB8fCAhc2lnbmVkICYmICEvXlswLTldKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgZm9ybWF0ICcgKyB2YWxpZGF0aW9uLnR5cGVOYW1lICsgJyAnICsgdmFsdWUpO1xuICB9XG5cbiAgdmFyIG1heCA9IHNpZ25lZCA/IG1heFNpZ25lZChiaXRzKSA6IG1heFVuc2lnbmVkKGJpdHMpO1xuICB2YXIgbWluID0gc2lnbmVkID8gbWluU2lnbmVkKGJpdHMpIDogWkVSTztcbiAgdmFyIGkgPSBuZXcgQk4odmFsdWUpO1xuXG4gIC8vIGNvbnNvbGUubG9nKCdpLnRvU3RyaW5nKCksIG1pbi50b1N0cmluZygpJywgaS50b1N0cmluZygpLCBtaW4udG9TdHJpbmcoKSlcbiAgaWYgKGkuY21wKG1pbikgPCAwIHx8IGkuY21wKG1heCkgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPdmVyZmxvdyAnICsgdmFsaWRhdGlvbi50eXBlTmFtZSArICcgJyArIHZhbHVlICsgJywgJyArICgnbWF4ICcgKyBtYXgudG9TdHJpbmcoKSArICcsIG1pbiAnICsgbWluLnRvU3RyaW5nKCkgKyAnLCBzaWduZWQgJyArIHNpZ25lZCArICcsIGJpdHMgJyArIGJpdHMpKTtcbiAgfVxufVxuXG52YXIgaXNTZXJpYWxpemVyID0gZnVuY3Rpb24gaXNTZXJpYWxpemVyKHR5cGUpIHtcbiAgcmV0dXJuICh0eXBlb2YgdHlwZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodHlwZSkpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHlwZS5mcm9tQnl0ZUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5hcHBlbmRCeXRlQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLmZyb21PYmplY3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUudG9PYmplY3QgPT09ICdmdW5jdGlvbic7XG59O1xuXG52YXIgdG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nID8gdmFsdWUudG9TdHJpbmcoZW5jb2RpbmcpIDogdmFsdWU7XG59O1xuXG52YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQodHlwZSwgdmFsdWVzKSB7XG4gIHJldHVybiB0eXBlLmNvbXBhcmUgPyB2YWx1ZXMuc29ydCh0eXBlLmNvbXBhcmUpIDogLy8gY3VzdG9tIGNvbXBhcmVcbiAgdmFsdWVzLnNvcnQoKTtcbn07XG5cbnZhciBzcHJlYWQgPSBmdW5jdGlvbiBzcHJlYWQoKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgYXJndW1lbnRzKTtcbn07XG52YXIgaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGw7XG59O1xuXG4vLyAxIDw8IE4gPT09IE1hdGgucG93KDIsIE4pXG52YXIgbWF4VW5zaWduZWQgPSBmdW5jdGlvbiBtYXhVbnNpZ25lZChiaXRzKSB7XG4gIHJldHVybiBuZXcgQk4oMSkuaXNobG4oYml0cykuaXN1YihPTkUpO1xufTtcbnZhciBtYXhTaWduZWQgPSBmdW5jdGlvbiBtYXhTaWduZWQoYml0cykge1xuICByZXR1cm4gbmV3IEJOKDEpLmlzaGxuKGJpdHMgLSAxKS5pc3ViKE9ORSk7XG59O1xudmFyIG1pblNpZ25lZCA9IGZ1bmN0aW9uIG1pblNpZ25lZChiaXRzKSB7XG4gIHJldHVybiBuZXcgQk4oMSkuaXNobG4oYml0cyAtIDEpLmluZWcoKTtcbn07IiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBwdXJlIGphdmFzY3JpcHQgZnVuY3Rpb25zIHRvIHJlYWQgYW5kIHdyaXRlIDMyLWJpdCBhbmQgNjQtYml0IElFRUUgNzU0IGZsb2F0aW5nLXBvaW50XG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE3IEFuZHJhcyBSYWRpY3NcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc0JpZ2VDcHUgPSBmYWxzZTtcbnZhciByZWFkRmxvYXQzMkFycmF5LCB3cml0ZUZsb2F0MzJBcnJheSwgcmVhZEZsb2F0MzJBcnJheVJldiwgd3JpdGVGbG9hdDMyQXJyYXlSZXY7XG52YXIgcmVhZEZsb2F0NjRBcnJheSwgd3JpdGVGbG9hdDY0QXJyYXksIHJlYWRGbG9hdDY0QXJyYXlSZXYsIHdyaXRlRmxvYXQ2NEFycmF5UmV2O1xuXG5cbi8vIHRlc3QgRmxvYXRBcnJheSBleGlzdGVuY2Ugd2l0aCAmJiB0byBub3QgdGhyb3cgb2ZmIGNvZGUgY292ZXJhZ2Vcbih0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nKSAmJiAoZnVuY3Rpb24oKXtcbiAgICB2YXIgX2ZwMzIgPSBuZXcgRmxvYXQzMkFycmF5KDEpO1xuICAgIHZhciBfYjMyID0gbmV3IFVpbnQ4QXJyYXkoX2ZwMzIuYnVmZmVyKTtcblxuICAgIF9mcDMyWzBdID0gLTE7XG4gICAgaXNCaWdlQ3B1ID0gX2IzMlszXSA9PT0gMDtcblxuICAgIHJlYWRGbG9hdDMyQXJyYXkgPSBmdW5jdGlvbiByZWFkRmxvYXQzMkFycmF5KCBidWYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIGlmIChwb3MgPCAwIHx8IHBvcyArIDQgPiBidWYubGVuZ3RoKSByZXR1cm4gMDtcbiAgICAgICAgX2IzMlswXSA9IGJ1Zltwb3MrK107IF9iMzJbMV0gPSBidWZbcG9zKytdOyBfYjMyWzJdID0gYnVmW3BvcysrXTtfYjMyWzNdID0gYnVmW3Bvc107XG4gICAgICAgIC8vX2IzMlswXSA9IGJ1Zltwb3MrMF07IF9iMzJbMV0gPSBidWZbcG9zKzFdOyBfYjMyWzJdID0gYnVmW3BvcysyXTsgX2IzMlszXSA9IGJ1Zltwb3MrM107XG4gICAgICAgIHJldHVybiBfZnAzMlswXTtcbiAgICB9XG5cbiAgICByZWFkRmxvYXQzMkFycmF5UmV2ID0gZnVuY3Rpb24gcmVhZEZsb2F0MzJBcnJheVJldiggYnVmLCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBpZiAocG9zIDwgMCB8fCBwb3MgKyA0ID4gYnVmLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIF9iMzJbM10gPSBidWZbcG9zKytdOyBfYjMyWzJdID0gYnVmW3BvcysrXTsgX2IzMlsxXSA9IGJ1Zltwb3MrK107IF9iMzJbMF0gPSBidWZbcG9zXTtcbiAgICAgICAgLy9fYjMyWzNdID0gYnVmW3BvcyswXTsgX2IzMlsyXSA9IGJ1Zltwb3MrMV07IF9iMzJbMV0gPSBidWZbcG9zKzJdOyBfYjMyWzBdID0gYnVmW3BvcyszXTtcbiAgICAgICAgcmV0dXJuIF9mcDMyWzBdO1xuICAgIH1cblxuICAgIHdyaXRlRmxvYXQzMkFycmF5ID0gZnVuY3Rpb24gd3JpdGVGbG9hdDMyQXJyYXkoIGJ1ZiwgdiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgX2ZwMzJbMF0gPSB2O1xuICAgICAgICBidWZbcG9zKytdID0gX2IzMlswXTsgYnVmW3BvcysrXSA9IF9iMzJbMV07IGJ1Zltwb3MrK10gPSBfYjMyWzJdOyBidWZbcG9zXSA9IF9iMzJbM107XG4gICAgICAgIC8vYnVmW3BvcyswXSA9IF9iMzJbMF07IGJ1Zltwb3MrMV0gPSBfYjMyWzFdOyBidWZbcG9zKzJdID0gX2IzMlsyXTsgYnVmW3BvcyszXSA9IF9iMzJbM107XG4gICAgfVxuXG4gICAgd3JpdGVGbG9hdDMyQXJyYXlSZXYgPSBmdW5jdGlvbiB3cml0ZUZsb2F0MzJBcnJheVJldiggYnVmLCB2LCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBfZnAzMlswXSA9IHY7XG4gICAgICAgIGJ1Zltwb3MrK10gPSBfYjMyWzNdOyBidWZbcG9zKytdID0gX2IzMlsyXTsgYnVmW3BvcysrXSA9IF9iMzJbMV07IGJ1Zltwb3NdID0gX2IzMlswXTtcbiAgICAgICAgLy9idWZbcG9zKzBdID0gX2IzMlszXTsgYnVmW3BvcysxXSA9IF9iMzJbMl07IGJ1Zltwb3MrMl0gPSBfYjMyWzFdOyBidWZbcG9zKzNdID0gX2IzMlswXTtcbiAgICB9XG59KSgpO1xuXG4odHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ2Z1bmN0aW9uJykgJiYgKGZ1bmN0aW9uKCl7XG4gICAgdmFyIF9mcDY0ID0gbmV3IEZsb2F0NjRBcnJheSgxKTtcbiAgICB2YXIgX2I2NCA9IG5ldyBVaW50OEFycmF5KF9mcDY0LmJ1ZmZlcik7XG5cbiAgICByZWFkRmxvYXQ2NEFycmF5ID0gZnVuY3Rpb24gcmVhZEZsb2F0NjRBcnJheSggYnVmLCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBpZiAocG9zIDwgMCB8fCBwb3MgKyA4ID4gYnVmLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIC8vX2I2NFswXSA9IGJ1Zltwb3MrK107IF9iNjRbMV0gPSBidWZbcG9zKytdOyBfYjY0WzJdID0gYnVmW3BvcysrXTsgX2I2NFszXSA9IGJ1Zltwb3MrK107XG4gICAgICAgIC8vX2I2NFs0XSA9IGJ1Zltwb3MrK107IF9iNjRbNV0gPSBidWZbcG9zKytdOyBfYjY0WzZdID0gYnVmW3BvcysrXTsgX2I2NFs3XSA9IGJ1Zltwb3NdO1xuICAgICAgICBfYjY0WzBdID0gYnVmW3BvcyswXTsgX2I2NFsxXSA9IGJ1Zltwb3MrMV07IF9iNjRbMl0gPSBidWZbcG9zKzJdOyBfYjY0WzNdID0gYnVmW3BvcyszXTtcbiAgICAgICAgX2I2NFs0XSA9IGJ1Zltwb3MrNF07IF9iNjRbNV0gPSBidWZbcG9zKzVdOyBfYjY0WzZdID0gYnVmW3Bvcys2XTsgX2I2NFs3XSA9IGJ1Zltwb3MrN107XG4gICAgICAgIHJldHVybiBfZnA2NFswXTtcbiAgICB9XG5cbiAgICByZWFkRmxvYXQ2NEFycmF5UmV2ID0gZnVuY3Rpb24gcmVhZEZsb2F0NjRBcnJheVJldiggYnVmLCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBpZiAocG9zIDwgMCB8fCBwb3MgKyA4ID4gYnVmLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIC8vX2I2NFs3XSA9IGJ1Zltwb3MrK107IF9iNjRbNl0gPSBidWZbcG9zKytdOyBfYjY0WzVdID0gYnVmW3BvcysrXTsgX2I2NFs0XSA9IGJ1Zltwb3MrK107XG4gICAgICAgIC8vX2I2NFszXSA9IGJ1Zltwb3MrK107IF9iNjRbMl0gPSBidWZbcG9zKytdOyBfYjY0WzFdID0gYnVmW3BvcysrXTsgX2I2NFswXSA9IGJ1Zltwb3NdO1xuICAgICAgICBfYjY0WzddID0gYnVmW3BvcyswXTsgX2I2NFs2XSA9IGJ1Zltwb3MrMV07IF9iNjRbNV0gPSBidWZbcG9zKzJdOyBfYjY0WzRdID0gYnVmW3BvcyszXTtcbiAgICAgICAgX2I2NFszXSA9IGJ1Zltwb3MrNF07IF9iNjRbMl0gPSBidWZbcG9zKzVdOyBfYjY0WzFdID0gYnVmW3Bvcys2XTsgX2I2NFswXSA9IGJ1Zltwb3MrN107XG4gICAgICAgIHJldHVybiBfZnA2NFswXTtcbiAgICB9XG5cbiAgICB3cml0ZUZsb2F0NjRBcnJheSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NEFycmF5KCBidWYsIHYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIF9mcDY0WzBdID0gdjtcbiAgICAgICAgYnVmW3BvcyArIDBdID0gX2I2NFswXTsgYnVmW3BvcyArIDFdID0gX2I2NFsxXTsgYnVmW3BvcyArIDJdID0gX2I2NFsyXTsgYnVmW3BvcyArIDNdID0gX2I2NFszXTtcbiAgICAgICAgYnVmW3BvcyArIDRdID0gX2I2NFs0XTsgYnVmW3BvcyArIDVdID0gX2I2NFs1XTsgYnVmW3BvcyArIDZdID0gX2I2NFs2XTsgYnVmW3BvcyArIDddID0gX2I2NFs3XTtcbiAgICB9XG5cbiAgICB3cml0ZUZsb2F0NjRBcnJheVJldiA9IGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NEFycmF5UmV2KCBidWYsIHYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIF9mcDY0WzBdID0gdjtcbiAgICAgICAgYnVmW3BvcyArIDBdID0gX2I2NFs3XTsgYnVmW3BvcyArIDFdID0gX2I2NFs2XTsgYnVmW3BvcyArIDJdID0gX2I2NFs1XTsgYnVmW3BvcyArIDNdID0gX2I2NFs0XTtcbiAgICAgICAgYnVmW3BvcyArIDRdID0gX2I2NFszXTsgYnVmW3BvcyArIDVdID0gX2I2NFsyXTsgYnVmW3BvcyArIDZdID0gX2I2NFsxXTsgYnVmW3BvcyArIDddID0gX2I2NFswXTtcbiAgICB9XG59KSgpO1xuXG5cbi8vIGFyaXRobWV0aWMgb3BlcmF0aW9ucyBwcmVzZXJ2ZSBOYU4sIGJ1dCBsb2dpY2FsIG9wcyAoLCA+PiwgZXRjKSBjb252ZXJ0IHRoZW0gdG8gemVyb1xuLy8gQXNzZW1ibGUgdGhlIHdvcmQgdG8gZ2VuZXJhdGUgTmFOIGlmIGFueSByZWFkcyBhcmUgdW5kZWZpbmVkIChvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIGFycmF5KS5cbmZ1bmN0aW9uIHJlYWRXb3JkKCBidWYsIG9mZnMsIGRpcm4gKSB7XG4gICAgdmFyIGEgPSBidWZbb2ZmcysrXSwgYiA9IGJ1ZltvZmZzKytdLCBjID0gYnVmW29mZnMrK10sIGQgPSBidWZbb2Zmc107XG4gICAgcmV0dXJuIChkaXJuID09PSAnYmlnZScpXG4gICAgICAgID8gKCgoKChhICogMjU2KSArIGIpICogMjU2KSArIGMpICogMjU2KSArIGRcbiAgICAgICAgOiAoKCgoKGQgKiAyNTYpICsgYykgKiAyNTYpICsgYikgKiAyNTYpICsgYTtcbn1cblxuZnVuY3Rpb24gd3JpdGVXb3JkKCBidWYsIHYsIG9mZnMsIGRpcm4gKSB7XG4gICAgdmFyIGEgPSAodiA+Pj4gMjQpICYgMHhmZiwgYiA9ICh2ID4+IDE2KSAmIDB4ZmYsIGMgPSAodiA+PiA4KSAmIDB4ZmYsIGQgPSAodikgJiAweGZmO1xuICAgIChkaXJuID09PSAnYmlnZScpXG4gICAgICAgID8gKGJ1ZltvZmZzKytdID0gYSwgYnVmW29mZnMrK10gPSBiLCBidWZbb2ZmcysrXSA9IGMsIGJ1ZltvZmZzXSA9IGQpXG4gICAgICAgIDogKGJ1ZltvZmZzKytdID0gZCwgYnVmW29mZnMrK10gPSBjLCBidWZbb2ZmcysrXSA9IGIsIGJ1ZltvZmZzXSA9IGEpXG59XG5cbi8vIHdyaXRlIHRoZSB0d28td29yZCB2YWx1ZSBbaGksbG9dIHdoZXJlIGhpIGhvbGRzIHRoZSAzMiBtc2IgYml0cyBhbmQgbG8gdGhlIDMyIGxzYiBiaXRzXG5mdW5jdGlvbiB3cml0ZURvdWJsZVdvcmQoIGJ1ZiwgaGksIGxvLCBvZmZzLCBkaXJuICkge1xuICAgIGlmIChkaXJuID09PSAnYmlnZScpIHtcbiAgICAgICAgd3JpdGVXb3JkKGJ1ZiwgaGksIG9mZnMsIGRpcm4pO1xuICAgICAgICB3cml0ZVdvcmQoYnVmLCBsbywgb2ZmcyArIDQsIGRpcm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd3JpdGVXb3JkKGJ1ZiwgbG8sIG9mZnMsIGRpcm4pO1xuICAgICAgICB3cml0ZVdvcmQoYnVmLCBoaSwgb2ZmcyArIDQsIGRpcm4pO1xuICAgIH1cbn1cblxuLy8gZ2l2ZW4gYW4gZXhwb25lbnQgbiwgcmV0dXJuIDIqKm5cbi8vIG4gaXMgYWx3YXlzIGFuIGludGVnZXIsIGZhc3RlciB0byBzaGlmdCB3aGVuIHBvc3NpYmxlXG4vLyBOb3RlIHRoYXQgbm9kZWpzIE1hdGgucG93KCkgaXMgZmFzdGVyIHRoYW4gYSBsb29rdXAgdGFibGUgKG1heSBiZSBjYWNoaW5nKVxudmFyIF8yZVhwID0gbmV3IEFycmF5KCk7IGZvciAodmFyIGk9MDsgaTwxMjAwOyBpKyspIF8yZVhwW2ldID0gTWF0aC5wb3coMiwgaSk7XG52YXIgXzJlWG4gPSBuZXcgQXJyYXkoKTsgZm9yICh2YXIgaT0wOyBpPDEyMDA7IGkrKykgXzJlWG5baV0gPSBNYXRoLnBvdygyLCAtaSk7XG5mdW5jdGlvbiBwb3cyKCBleHAgKSB7XG4gICAgcmV0dXJuIChleHAgPj0gMCkgPyBfMmVYcFtleHBdIDogXzJlWG5bLWV4cF07XG4gICAgLy9yZXR1cm4gKGV4cCA+PSAwKSA/IChleHAgPCAgMzEgPyAoMSA8PCBleHApIDogICAgICAgIE1hdGgucG93KDIsIGV4cCkpXG4gICAgLy8gICAgICAgICAgICAgICAgICA6IChleHAgPiAtMzEgPyAoMSAvICgxIDw8IC1leHApKSA6IE1hdGgucG93KDIsIGV4cCkpO1xufVxuXG5cbi8vIGdldEZsb2F0KCkgZnJvbSBxYnNvbiwgaHR0cHM6Ly9naXRodWIuY29tL2FuZHJhc3Evbm9kZS1xYnNvbjpcbi8qXG4gKiBleHRyYWN0IHRoZSA2NC1iaXQgbGl0dGxlLWVuZGlhbiBpZWVlIDc1NCBmbG9hdGluZy1wb2ludCB2YWx1ZVxuICogICBzZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Eb3VibGUtcHJlY2lzaW9uX2Zsb2F0aW5nLXBvaW50X2Zvcm1hdFxuICogICAxIGJpdCBzaWduICsgMTEgYml0cyBleHBvbmVudCArICgxIGltcGxpY2l0IG1hbnRpc3NhIDEgYml0KSArIDUyIG1hbnRpc3NhIGJpdHNcbiAqL1xudmFyIF9yc2hpZnQzMiA9ICgxIC8gMHgxMDAwMDAwMDApOyAgICAgIC8vID4+IDMyIGZvciBmbG9hdHNcbnZhciBfcnNoaWZ0MjAgPSAoMSAvIDB4MTAwMDAwKTsgICAgICAgICAvLyA+PiAyMCBmb3IgZmxvYXRzXG52YXIgX2xzaGlmdDMyID0gKDEgKiAweDEwMDAwMDAwMCk7ICAgICAgLy8gPDwgMzJcbnZhciBfcnNoaWZ0NTIgPSAoMSAqIF9yc2hpZnQzMiAqIF9yc2hpZnQyMCk7ICAgIC8vID4+IDUyXG52YXIgX3JzaGlmdDEwMjMgPSBwb3cyKC0xMDIzKTsgICAgICAgICAgLy8gMl4tMTAyM1xuZnVuY3Rpb24gcmVhZERvdWJsZSggYnVmLCBvZmZzZXQsIGRpcm4gKSB7XG4gICAgdmFyIHcwID0gcmVhZFdvcmQoYnVmLCBvZmZzZXQsIGRpcm4pO1xuICAgIHZhciB3MSA9IHJlYWRXb3JkKGJ1Ziwgb2Zmc2V0ICsgNCwgZGlybik7XG4gICAgdmFyIGhpZ2hXb3JkLCBsb3dXb3JkO1xuICAgIChkaXJuID09PSAnYmlnZScpID8gKGhpZ2hXb3JkID0gdzAsIGxvd1dvcmQgPSB3MSkgOiAoaGlnaFdvcmQgPSB3MSwgbG93V29yZCA9IHcwKTtcblxuICAgIHZhciBtYW50aXNzYSA9IChoaWdoV29yZCAmIDB4MDAwRkZGRkYpICogX2xzaGlmdDMyICsgbG93V29yZDtcbiAgICB2YXIgZXhwb25lbnQgPSAoaGlnaFdvcmQgJiAweDdGRjAwMDAwKSA+Pj4gMjA7XG4gICAgdmFyIHNpZ24gPSAoaGlnaFdvcmQgPj4gMzEpIHx8IDE7ICAgLy8gLTEsIDEsIG9yIDEgaWYgTmFOXG5cbiAgICB2YXIgdmFsdWU7XG4gICAgaWYgKGV4cG9uZW50ID09PSAweDAwMCkge1xuICAgICAgICAvLyB6ZXJvIGlmICFtYW50aXNzYSwgZWxzZSBzdWJub3JtYWwgKG5vbi1ub3JtYWxpemVkIHJlZHVjZWQgcHJlY2lzaW9uIHNtYWxsIHZhbHVlKVxuICAgICAgICAvLyByZWNvdmVyIG5lZ2F0aXZlIHplcm8gLTAuMCBhcyBkaXN0aW5jdCBmcm9tIDAuMFxuICAgICAgICAvLyBzdWJub3JtYWxzIGRvIG5vdCBoYXZlIGFuIGltcGxpZWQgbGVhZGluZyAxIGJpdCBhbmQgYXJlIHBvc2l0aW9uZWQgMSBiaXQgdG8gdGhlIGxlZnRcbiAgICAgICAgdmFsdWUgPSBtYW50aXNzYSA/IChtYW50aXNzYSAqIHBvdzIoLTUyICsgMSAtMTAyMykpIDogMC4wO1xuICAgIH1cbiAgICBlbHNlIGlmIChleHBvbmVudCA8IDB4N2ZmKSB7XG4gICAgICAgIC8vIG5vcm1hbGl6ZWQgdmFsdWUgd2l0aCBhbiBpbXBsaWVkIGxlYWRpbmcgMSBiaXQgYW5kIDEwMjMgYmlhc2VkIGV4cG9uZW50XG4gICAgICAgIC8vIHRlc3QgZm9yIE5hTiB3aXRoIChtYW50aXNzYSA+PSAwKSwgYW5kIHJldHVybiAwIGlmIE5hTiBpZSByZWFkIGZyb20gb3V0c2lkZSBidWZmZXIgYm91bmRzXG4gICAgICAgIHZhbHVlID0gKG1hbnRpc3NhID49IDApID8gKDEgKyBtYW50aXNzYSAqIF9yc2hpZnQ1MikgKiBwb3cyKGV4cG9uZW50IC0gMTAyMykgOiAwLjA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJbmZpbml0eSBpZiB6ZXJvIG1hbnRpc3NhICgrLy0gcGVyIHNpZ24pLCBOYU4gaWYgbm9uemVybyBtYW50aXNzYVxuICAgICAgICB2YWx1ZSA9IG1hbnRpc3NhID8gTmFOIDogSW5maW5pdHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZ24gKiB2YWx1ZTtcbn1cblxuLy9cbi8vIE5vdGU6IG5vZGUtdjkgcHJlZmVycyArMjglIChzaWduICogdmFsdWUpLCBub2RlIHY2IGRvZXNudCBjYXJlLCBub2RlIHY4IGxpa2VzICsxNiUgKC12YWx1ZSA6IHZhbHVlKVxuLy9cbi8vIGZsb2F0MzI6IDEgc2lnbiArIDggZXhwb25lbnQgKyAyNCBtYW50aXNzYSAoMjMgc3RvcmVkLCAxIGltcGxpZWQpXG4vLyBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2luZ2xlLXByZWNpc2lvbl9mbG9hdGluZy1wb2ludF9mb3JtYXRcbi8vXG4vLyBFeHBvbmVudCAgICAgTWFudGlzc2EgPT0gMCAgIE1hbnRpc3NhID4gMCAgICBWYWx1ZVxuLy8gMDAgICAgICAgICAgICswLCAtMCAgICAgICAgICBkZW5vcm1hbGl6ZWQgICAgMl4oICAxLTEyNykgKiAoMC4gKyAobWFudGlzc2EgLyAyXjIzKSlcbi8vIDAwLi4gRkUgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZCAgICAgIDJeKGV4cC0xMjcpICogKDEuICsgKG1hbnRpc3NhIC8gMl4yMykpXG4vLyBGRiAgICAgICAgICAgKy8tSW5maW5pdHkgICAgIE5hTiAgICAgICAgICAgICAtXG4vL1xudmFyIF9yc2hpZnQyMyA9IE1hdGgucG93KDIsIC0yMyk7ICAgICAgLy8gPj4gMjMgZm9yIGZsb2F0c1xudmFyIF9yc2hpZnQxMjcgPSBNYXRoLnBvdygyLCAtMTI3KTsgICAgLy8gMl4tMTI3XG5mdW5jdGlvbiByZWFkRmxvYXQoIGJ1Ziwgb2Zmc2V0LCBkaXJuICkge1xuICAgIHZhciB3b3JkID0gcmVhZFdvcmQoYnVmLCBvZmZzZXQsIGRpcm4pO1xuICAgIHZhciBtYW50aXNzYSA9ICh3b3JkICYgMHgwMDdGRkZGRik7XG4gICAgdmFyIGV4cG9uZW50ID0gKHdvcmQgJiAweDdGODAwMDAwKSA+Pj4gMjM7XG4gICAgdmFyIHNpZ24gPSAod29yZCA+PiAzMSkgfHwgMTsgICAgICAgLy8gLTEsIDEsIG9yIDEgaWYgTmFOXG5cbiAgICB2YXIgdmFsdWU7XG4gICAgaWYgKGV4cG9uZW50ID09PSAweDAwMCkge1xuICAgICAgICB2YWx1ZSA9IG1hbnRpc3NhID8gbWFudGlzc2EgKiBfcnNoaWZ0MjMgKiAyICogX3JzaGlmdDEyNyA6IDAuMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwb25lbnQgPCAweGZmKSB7XG4gICAgICAgIHZhbHVlID0gKDEgKyBtYW50aXNzYSAqIF9yc2hpZnQyMykgKiBwb3cyKGV4cG9uZW50IC0gMTI3KSAvLyAqIF9yc2hpZnQxMjc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IG1hbnRpc3NhID8gTmFOIDogSW5maW5pdHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZ24gKiB2YWx1ZTtcbiAgICAvL3JldHVybiAod29yZCA+Pj4gMzEpID8gLXZhbHVlIDogdmFsdWU7XG59XG5cbi8vIGdpdmVuIGEgcG9zaXRpdmUgdmFsdWUgdiwgbm9ybWFsaXplIGl0IHRvIGJldHdlZW4gMSBhbmQgbGVzcyB0aGFuIDIgd2l0aCBhIGJpbmFyeSBleHBvbmVudFxuLy8gVGhlIGV4cG9uZW50IGlzIHRoZSBudW1iZXIgb2YgYml0IHBsYWNlcyBpdCB3YXMgc2hpZnRlZCwgcG9zaXRpdmUgaWYgdiB3YXMgPj0gMi5cbi8vIFRoZSBzcGVjaWFsIHZhbHVlcyAwLCAtMCwgTmFOLCArSW5maW5pdHkgYW5kIC1JbmZpbml0eSBhcmUgbm90IGhhbmRsZWQgaGVyZS5cbi8vIExvb3BpbmcgaXMgZmFzdGVyIHRoYW4gKE1hdGgubG9nKHYpIC8gTWF0aC5MTjIpIGluIG5vZGUtdjYsIHY4LCBhbmQgdjkuXG4vLyBUaGlzIGZ1bmN0aW9uIGNhbiBhY2NvdW50IGZvciBoYWxmIHRoZSB0aW1lIHRha2VuIHRvIHdyaXRlIGEgZG91YmxlLlxudmFyIF9wYXJ0cyA9IHsgZXhwOiAwLCBtYW50OiAwIH07XG5mdW5jdGlvbiBub3JtYWxpemUoIHYgKSB7XG4gICAgdmFyIGV4cCA9IDA7XG5cbiAgICBpZiAodiA+PSAyKSB7XG4gICAgICAgIGV4cCA9IGNvdW50RG91YmxpbmdzKDEsIHYpO1xuICAgICAgICB2ICo9IHBvdzIoLWV4cCk7XG4gICAgICAgIC8vIGlmIGRvdWJsZWQgdG8gZXhhY3RseSB2LzIsIGFkanVzdCB1cCB0byB2XG4gICAgICAgIGlmICh2ID49IDIpIHsgdiAvPSAyOyBleHAgKz0gMSB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHYgPCAxKSB7XG4gICAgICAgIGV4cCA9IGNvdW50RG91YmxpbmdzKHYsIDIpO1xuICAgICAgICAvLyBhdm9pZCB1c2luZyBwb3cyIGV4cG9uZW50cyA+IDEwMjMsIHRoZXkgb3ZlcmZsb3cgdG8gSW5maW5pdHlcbiAgICAgICAgaWYgKGV4cCA8PSAxMDIzKSB2ICo9IHBvdzIoZXhwKTtcbiAgICAgICAgZWxzZSB7IHYgKj0gcG93MihleHAgLSAxMDApOyB2ICo9IHBvdzIoMTAwKTsgfVxuICAgICAgICBleHAgPSAtZXhwO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHBhc3MgaW4gbnVtIGJpdHMsIGFuZCBub3JtYWxpemUgc3RyYWlnaHQgdG8gbWFudGlzc2EgLyBkZW5vcm1cblxuICAgIF9wYXJ0cy5leHAgPSBleHA7XG4gICAgX3BhcnRzLm1hbnQgPSB2O1xuICAgIHJldHVybiBfcGFydHM7XG59XG5cbi8vIGNvdW50IGhvdyBtYW55IGRvdWJsaW5ncyBvZiBhIGFyZSBuZWVkZWQgZm9yIGl0IGJlIGNsb3NlIHRvIGIuXG4vLyBSZXR1cm5zIGEgc2hpZnQgY291bnQgdGhhdCBncm93cyAoYSkgdG8gYXQgbGVhc3QgKGIvMikgYnV0IGxlc3MgdGhhbiAoYikuXG4vLyBEb3VibGluZyAxIHRvd2FyZCB2IGVuc3VyZXMgdGhhdCAodiA+PiBuKSA+PSAxIDwgMixcbi8vIGFuZCBkb3VibGluZyBmcm9tIHYgdG93YXJkIDIgZW5zdXJlcyB0aGF0ICh2IDw8IG4pID49IDEgPCAyLlxudmFyIF8yZTE5MiA9IE1hdGgucG93KDIsIDE5Mik7XG5mdW5jdGlvbiBjb3VudERvdWJsaW5ncyggYSwgYiApIHtcbiAgICB2YXIgbiA9IDA7XG5cbiAgICB3aGlsZSAoYSAqIF8yZTE5MiA8IGIpIHsgYSAqPSBfMmUxOTI7IG4gKz0gMTkyIH1cbiAgICB3aGlsZSAoYSAqIDB4MTAwMDAwMDAwMDAwMDAwMDAgPCBiKSB7IGEgKj0gMHgxMDAwMDAwMDAwMDAwMDAwMDsgbiArPSA2NCB9XG4gICAgd2hpbGUgKGEgKiAweDEwMDAwIDwgYikgeyBhICo9IDB4MTAwMDA7IG4gKz0gMTYgfVxuICAgIHdoaWxlIChhICogMHg0MCA8IGIpIHsgYSAqPSAweDQwOyBuICs9IDYgfVxuICAgIHdoaWxlIChhICogMiA8IGIpIHsgYSAqPSAyOyBuICs9IDEgfVxuXG4gICAgcmV0dXJuIG47XG59XG5cbi8vIHJvdW5kIHRoZSBmcmFjdGlvbiBpbiB2IGFuZCBzY2FsZSB1cCB0byBzY2FsZSA9IDJebiBiaXRzXG4vLyBodHRwczovL2Jsb2cuYW5ndWxhcmluZGVwdGguY29tL2hvdy10by1yb3VuZC1iaW5hcnktZnJhY3Rpb25zLTYyNWM4ZmEzYTFhZlxuLy8gUm91bmRpbmcgY2FuIGNhdXNlIHRoZSBzY2FsZWQgdmFsdWUgdG8gZXhjZWVkIDJebi5cbmZ1bmN0aW9uIHJvdW5kTWFudGlzc2EoIHYsIHNjYWxlICkge1xuICAgIHYgKj0gc2NhbGU7XG4gICAgLy8gcm91bmQgdG8gbmVhcmVzdCwgYnV0IHJvdW5kIGEgMC41IHRpZSB0byBldmVuICgwLjUgdG8gMC4wIGFuZCAxLjUgdG8gMi4wKVxuICAgIC8vIHJvdW5kIGFsbCBudW1iZXJzIHdpdGggYSBmcmFjdGlvbiBvdGhlciB0aGFuIDEvMiwgYW5kIHJvdW5kIHVwIG9kZCBudW1iZXJzIHdpdGhcbiAgICByZXR1cm4gKCh2IC0gTWF0aC5mbG9vcih2KSAhPT0gMC41KSB8fCAodiAmIDEpKSA/IHYgKyAwLjUgOiB2O1xufVxuXG4vLyBmbG9hdDMyOiAxIHNpZ24gKyA4IGV4cG9uZW50ICsgKDEgaW1wbGllZCBtYW50aXNzYSAxIGJpdCkgKyAyMyBzdG9yZWQgbWFudGlzc2EgYml0c1xuLy8gTmFOIHR5cGVzOiBxdWlldCBOYW4gPSB4LmZmLjh4eHgsIHNpZ25hbGluZyBOYU4gPSB4LmZmLjB4eDEgKG1zYiB6ZXJvLCBhdCBsZWFzdCBvbmUgb3RoZXIgYml0IHNldClcbi8vIEphdmFTY3JpcHQgYnVpbHQtaW4gTmFOIGlzIHRoZSBub24tc2lnbmFsaW5nIDdmYzAwMDAwLCBidXQgYXJpdGhtZXRpYyBjYW4geWllbGQgYSBuZWdhdGl2ZSBOYU4gZmZjMDAwMDAuXG5mdW5jdGlvbiB3cml0ZUZsb2F0KCBidWYsIHYsIG9mZnNldCwgZGlybiApIHtcbiAgICB2YXIgbm9ybSwgd29yZCwgc2lnbiA9IDA7XG4gICAgaWYgKHYgPCAwKSB7IHNpZ24gPSAweDgwMDAwMDAwOyB2ID0gLXY7IH1cblxuICAgIGlmICghICh2ICYmIHYgPCBJbmZpbml0eSkpIHtcbiAgICAgICAgaWYgKHYgPT09IDApIHsgICAgICAgICAgICAgICAgICAvLyAtMCwgKzBcbiAgICAgICAgICAgIHdvcmQgPSAoMS92IDwgMCkgPyAweDgwMDAwMDAwIDogMHgwMDAwMDAwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ID09PSBJbmZpbml0eSkgeyAgICAgIC8vIC1JbmZpbml0eSwgK0luZmluaXR5XG4gICAgICAgICAgICB3b3JkID0gc2lnbiB8IDB4N0Y4MDAwMDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYU4gLSBwb3NpdGl2ZSwgbm9uLXNpZ25hbGluZ1xuICAgICAgICAgICAgd29yZCA9IDB4N0ZDMDAwMDA7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVXb3JkKGJ1Ziwgd29yZCwgb2Zmc2V0LCBkaXJuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vcm0gPSBub3JtYWxpemUodik7ICAgICAgICAgICAgLy8gc2VwYXJhdGUgZXhwb25lbnQgYW5kIG1hbnRpc3NhXG4gICAgICAgIG5vcm0uZXhwICs9IDEyNzsgICAgICAgICAgICAgICAgLy8gYmlhcyBleHBvbmVudFxuXG4gICAgICAgIGlmIChub3JtLmV4cCA8PSAwKSB7ICAgICAgICAgICAgLy8gZGVub3JtYWxpemVkIG51bWJlclxuICAgICAgICAgICAgaWYgKG5vcm0uZXhwIDw9IC0yNSkgeyAgICAgIC8vIHRvbyBzbWFsbCwgdW5kZXJmbG93IHRvIHplcm8uICAtMjQgbWlnaHQgcm91bmQgdXAgdGhvdWdoLlxuICAgICAgICAgICAgICAgIG5vcm0ubWFudCA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybS5leHAgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgIC8vIGRlbm9ybWFsaXplXG4gICAgICAgICAgICAgICAgbm9ybS5tYW50ID0gcm91bmRNYW50aXNzYShub3JtLm1hbnQsIHBvdzIoMjIgKyBub3JtLmV4cCkpO1xuICAgICAgICAgICAgICAgIG5vcm0uZXhwID0gMDsgICAgICAgICAgIC8vIHJvdW5kaW5nIGNhbiBjYXJyeSBvdXQgYW5kIHJlLW5vcm1hbGl6ZSB0aGUgbnVtYmVyXG4gICAgICAgICAgICAgICAgaWYgKG5vcm0ubWFudCA+PSAweDgwMDAwMCkgeyBub3JtLm1hbnQgLT0gMHg4MDAwMDA7IG5vcm0uZXhwICs9IDEgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9ybS5tYW50ID0gcm91bmRNYW50aXNzYShub3JtLm1hbnQgLSAxLCAweDgwMDAwMCk7XG4gICAgICAgICAgICAvLyBpZiByb3VuZGluZyBvdmVyZmxvd2VkIGludG8gdGhlIGhpZGRlbiAxcyBwbGFjZSwgaGlkZSBpdCBhbmQgYWRqdXN0IHRoZSBleHBvbmVudFxuICAgICAgICAgICAgaWYgKG5vcm0ubWFudCA+PSAweDgwMDAwMCkgeyBub3JtLm1hbnQgLT0gMHg4MDAwMDA7IG5vcm0uZXhwICs9IDEgfVxuICAgICAgICAgICAgaWYgKG5vcm0uZXhwID4gMjU0KSB7ICAgICAgIC8vIG92ZXJmbG93IHRvIEluZmluaXR5XG4gICAgICAgICAgICAgICAgbm9ybS5tYW50ID0gMDtcbiAgICAgICAgICAgICAgICBub3JtLmV4cCA9IDI1NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdvcmQgPSBzaWduIHwgKG5vcm0uZXhwIDw8IDIzKSB8IG5vcm0ubWFudDtcbiAgICAgICAgd3JpdGVXb3JkKGJ1Ziwgd29yZCwgb2Zmc2V0LCBkaXJuKTtcbiAgICB9XG59XG5cbi8vIGRvdWJsZTY0OiAxIGJpdCBzaWduICsgMTEgYml0cyBleHBvbmVudCArICgxIGltcGxpZWQgbWFudGlzc2EgMSBiaXQpICsgNTIgc3RvcmVkIG1hbnRpc3NhIGJpdHNcbi8vIFdyaXRpbmcgZG91YmxlcyBpcyBzaW1wbGVyIHRoYW4gZmxvYXRzLCBiZWNhdXNlIHRoZSBpbnRlcm5hbCBqYXZhc2NyaXB0IDY0LWJpdCBmbG9hdHNcbi8vIGFyZSBpZGVudGljYWwgdG8gdGhlIHN0b3JlZCByZXByZXNlbnRhdGlvbiwgYW5kIHRodXMgd2lsbCBub3Qgb3ZlcmZsb3cgb3IgdW5kZXJmbG93LlxudmFyIGRvdWJsZUFycmF5ID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIGRvdWJsZUJ1ZiA9IG5ldyBCdWZmZXIoOCk7XG52YXIgXzJlNTIgPSBNYXRoLnBvdygyLCA1Mik7XG5mdW5jdGlvbiB3cml0ZURvdWJsZSggYnVmLCB2LCBvZmZzZXQsIGRpcm4gKSB7XG4gICAgdmFyIG5vcm0sIGhpZ2hXb3JkLCBsb3dXb3JkLCBzaWduID0gMDtcbiAgICBpZiAodiA8IDApIHsgc2lnbiA9IDB4ODAwMDAwMDA7IHYgPSAtdjsgfVxuXG4gICAgaWYgKCEgKHYgJiYgdiA8IEluZmluaXR5KSkge1xuICAgICAgICBpZiAodiA9PT0gMCkgeyAgICAgICAgICAgICAgICAgIC8vIC0wLCArMFxuICAgICAgICAgICAgaGlnaFdvcmQgPSAoMS92IDwgMCkgPyAweDgwMDAwMDAwIDogMDtcbiAgICAgICAgICAgIGxvd1dvcmQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHYgPT09IEluZmluaXR5KSB7ICAgICAgLy8gLUluZmluaXR5LCArSW5maW5pdHlcbiAgICAgICAgICAgIGhpZ2hXb3JkID0gKHNpZ24gKyAweDdGRjAwMDAwKTtcbiAgICAgICAgICAgIGxvd1dvcmQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFOIC0gcG9zaXRpdmUsIG5vbi1zaWduYWxpbmdcbiAgICAgICAgICAgIGhpZ2hXb3JkID0gMHg3RkY4MDAwMDtcbiAgICAgICAgICAgIGxvd1dvcmQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlRG91YmxlV29yZChidWYsIGhpZ2hXb3JkLCBsb3dXb3JkLCBvZmZzZXQsIGRpcm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9ybSA9IG5vcm1hbGl6ZSh2KTsgICAgICAgICAgICAvLyBzZXBhcmF0ZSBleHBvbmVudCBhbmQgbWFudGlzc2FcbiAgICAgICAgbm9ybS5leHAgKz0gMTAyMzsgICAgICAgICAgICAgICAvLyBiaWFzIGV4cG9uZW50XG5cbiAgICAgICAgaWYgKG5vcm0uZXhwIDw9IDApIHsgICAgICAgICAgICAvLyBkZW5vcm1hbGl6ZWRcbiAgICAgICAgICAgIC8vIEphdmFTY3JpcHQgbnVtYmVycyBjYW4gbm90IGhvbGQgdmFsdWVzIHNtYWxsIGVub3VnaCB0byB1bmRlcmZsb3dcbiAgICAgICAgICAgIC8vIGFuZCBubyBuZWVkIHRvIHJvdW5kLCBhbGwgYml0cyB3aWxsIGJlIHdyaXR0ZW5cbiAgICAgICAgICAgIG5vcm0ubWFudCAqPSBwb3cyKDUxICsgbm9ybS5leHApO1xuICAgICAgICAgICAgbm9ybS5leHAgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByb3VuZCwgYWxsIGJpdHMgd2lsbCBiZSB3cml0dGVuXG4gICAgICAgICAgICBub3JtLm1hbnQgPSAobm9ybS5tYW50IC0gMSkgKiBfMmU1MjtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZ2hXb3JkID0gc2lnbiB8IChub3JtLmV4cCA8PCAyMCkgfCAobm9ybS5tYW50IC8gMHgxMDAwMDAwMDApO1xuICAgICAgICBsb3dXb3JkID0gbm9ybS5tYW50ID4+PiAwO1xuICAgICAgICB3cml0ZURvdWJsZVdvcmQoYnVmLCBoaWdoV29yZCwgbG93V29yZCwgb2Zmc2V0LCBkaXJuKTtcbiAgICB9XG59XG5cblxuOyhmdW5jdGlvbiBpbnN0YWxsKCkge1xuICAgIHZhciBleHBvcnRzID0gdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgfHwgdGhpcztcblxuICAgIGV4cG9ydHMucmVhZFdvcmQgPSByZWFkV29yZDtcbiAgICBleHBvcnRzLndyaXRlV29yZCA9IHdyaXRlV29yZDtcbiAgICBleHBvcnRzLndyaXRlRG91YmxlV29yZCA9IHdyaXRlRG91YmxlV29yZDtcblxuICAgIGV4cG9ydHMucmVhZEZsb2F0ID0gcmVhZEZsb2F0O1xuICAgIGV4cG9ydHMud3JpdGVGbG9hdCA9IHdyaXRlRmxvYXQ7XG4gICAgZXhwb3J0cy5yZWFkRG91YmxlID0gcmVhZERvdWJsZTtcbiAgICBleHBvcnRzLndyaXRlRG91YmxlID0gd3JpdGVEb3VibGU7XG5cbiAgICAvLyBleHBvc2UgdGhlIGltcGxlbWVudGF0aW9uIHRvIHRoZSB0ZXN0c1xuICAgIGV4cG9ydHMuX3VzZUZsb2F0QXJyYXkgPSBmdW5jdGlvbiggeWVzbm8gKSB7XG4gICAgICAgIGV4cG9ydHMuX3VzaW5nRmxvYXRBcnJheSA9IHllc25vO1xuICAgICAgICBpZiAoeWVzbm8pIHtcbiAgICAgICAgICAgIC8vIHNvZnR3YXJlIGNvbnZlcnNpb24gaXMgZmFzdGVyIGZvciBmbG9hdDMyIHRoYW4gRmxvYXQzMkFycmF5XG4gICAgICAgICAgICAvLyBPbmx5IHJlYWQgdmlhIEZsb2F0MzJBcnJheSBpZiB5ZXNubyA9PSAnZnVsbCcuXG4gICAgICAgICAgICBpZiAoeWVzbm8gPT0gJ2Z1bGwnKSBleHBvcnRzLnJlYWRGbG9hdExFID0gaXNCaWdlQ3B1ID8gcmVhZEZsb2F0MzJBcnJheVJldiA6IHJlYWRGbG9hdDMyQXJyYXk7XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGlzQmlnZUNwdSA/IHdyaXRlRmxvYXQzMkFycmF5UmV2IDogd3JpdGVGbG9hdDMyQXJyYXk7XG4gICAgICAgICAgICBpZiAoeWVzbm8gPT0gJ2Z1bGwnKSBleHBvcnRzLnJlYWRGbG9hdEJFID0gaXNCaWdlQ3B1ID8gcmVhZEZsb2F0MzJBcnJheSA6IHJlYWRGbG9hdDMyQXJyYXlSZXY7XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRCRSA9IGlzQmlnZUNwdSA/IHdyaXRlRmxvYXQzMkFycmF5IDogd3JpdGVGbG9hdDMyQXJyYXlSZXY7XG5cbiAgICAgICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gaXNCaWdlQ3B1ID8gcmVhZEZsb2F0NjRBcnJheVJldiA6IHJlYWRGbG9hdDY0QXJyYXk7XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSBpc0JpZ2VDcHUgPyB3cml0ZUZsb2F0NjRBcnJheVJldiA6IHdyaXRlRmxvYXQ2NEFycmF5O1xuICAgICAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSBpc0JpZ2VDcHUgPyByZWFkRmxvYXQ2NEFycmF5IDogcmVhZEZsb2F0NjRBcnJheVJldjtcbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IGlzQmlnZUNwdSA/IHdyaXRlRmxvYXQ2NEFycmF5IDogd3JpdGVGbG9hdDY0QXJyYXlSZXY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHBvcnRzLl91c2luZ0Zsb2F0QXJyYXkgPSAnJztcbiAgICAgICAgICAgIGV4cG9ydHMucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSggYnVmLCBvZmZzZXQgKSB7IHJldHVybiBleHBvcnRzLnJlYWRGbG9hdChidWYsIG9mZnNldCB8fCAwLCAnbGUnKTsgfVxuICAgICAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUoIGJ1Ziwgdiwgb2Zmc2V0ICkgeyBleHBvcnRzLndyaXRlRmxvYXQoYnVmLCB2LCBvZmZzZXQgfHwgMCwgJ2xlJyk7IH07XG4gICAgICAgICAgICBleHBvcnRzLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUoIGJ1Ziwgb2Zmc2V0ICkgeyByZXR1cm4gZXhwb3J0cy5yZWFkRmxvYXQoYnVmLCBvZmZzZXQgfHwgMCwgJ2JpZ2UnKTsgfVxuICAgICAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUoIGJ1Ziwgdiwgb2Zmc2V0ICkgeyBleHBvcnRzLndyaXRlRmxvYXQoYnVmLCB2LCBvZmZzZXQgfHwgMCwgJ2JpZ2UnKTsgfVxuXG4gICAgICAgICAgICBleHBvcnRzLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSggYnVmLCBvZmZzZXQgKSB7IHJldHVybiBleHBvcnRzLnJlYWREb3VibGUoYnVmLCBvZmZzZXQgfHwgMCwgJ2xlJyk7IH1cbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUoIGJ1Ziwgdiwgb2Zmc2V0ICkgeyBleHBvcnRzLndyaXRlRG91YmxlKGJ1Ziwgdiwgb2Zmc2V0IHx8IDAsICdsZScpOyB9XG4gICAgICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSggYnVmLCBvZmZzZXQgKSB7IHJldHVybiBleHBvcnRzLnJlYWREb3VibGUoYnVmLCBvZmZzZXQgfHwgMCwgJ2JpZ2UnKTsgfVxuICAgICAgICAgICAgZXhwb3J0cy53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSggYnVmLCB2LCBvZmZzZXQgKSB7IGV4cG9ydHMud3JpdGVEb3VibGUoYnVmLCB2LCBvZmZzZXQgfHwgMCwgJ2JpZ2UnKTsgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXhwb3NlIHRoZSBjcHUgZW5kaWFuaXNtIHRvIHRoZSB0ZXN0c1xuICAgIGV4cG9ydHMuX2dldEJpZ2VDcHUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGlzQmlnZUNwdSB9O1xuICAgIGV4cG9ydHMuX3NldEJpZ2VDcHUgPSBmdW5jdGlvbih5ZXNubykgeyBpc0JpZ2VDcHUgPSB5ZXNubyB9O1xuXG4gICAgLy8gYnkgZGVmYXVsdCBleHBvcnQgdGhlIHNvZnR3YXJlIGNvbnZlcnNpb24gZnVuY3Rpb25zLCB0aGVuXG4gICAgLy8gaWYgYXZhaWxhYmxlLCBjb252ZXJ0IGJ5IGNhc3RpbmcgYSBGbG9hdEFycmF5IHRvIGEgYnl0ZSBhcnJheVxuICAgIGV4cG9ydHMuX3VzZUZsb2F0QXJyYXkoZmFsc2UpO1xuICAgIGV4cG9ydHMuX3VzZUZsb2F0QXJyYXkocmVhZEZsb2F0MzJBcnJheSAmJiByZWFkRmxvYXQ2NEFycmF5ICYmICdmYXN0ZXN0Jyk7XG5cbiAgICAvLyBhY2NlbGVyYXRlIGFjY2Vzc1xuICAgIGluc3RhbGwucHJvdG90eXBlID0gZXhwb3J0cztcblxufSkuY2FsbCh0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgQnl0ZUJ1ZmZlciA9IHJlcXVpcmUoJ2J5dGVidWZmZXInKTtcbnZhciBTdHJ1Y3QgPSByZXF1aXJlKCcuL3N0cnVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGUsXG4gIHRvQnVmZmVyOiB0b0J1ZmZlcixcbiAgZnJvbUJ1ZmZlcjogZnJvbUJ1ZmZlclxuXG4gIC8qKlxuICAgIEBzdW1tYXJ5IENyZWF0ZSBhIHNlcmlhbGl6ZXIgZm9yIGVhY2ggZGVmaW5pdGlvbi5cbiAgICBAcmV0dXJuIHtDcmVhdGVTdHJ1Y3R9XG4gICovXG59O2Z1bmN0aW9uIGNyZWF0ZShkZWZpbml0aW9ucywgdHlwZXMpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHlwZXMuY29uZmlnO1xuXG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgaWYgKCFjb25maWcuc29ydCkge1xuICAgIGNvbmZpZy5zb3J0ID0ge307XG4gIH1cblxuICAvLyBCYXNpYyBzdHJ1Y3R1cmUgdmFsaWRhdGlvblxuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICB2YXIgdmFsdWUgPSBkZWZpbml0aW9uc1trZXldO1xuICAgIHZhciBiYXNlID0gdmFsdWUuYmFzZSxcbiAgICAgICAgZmllbGRzID0gdmFsdWUuZmllbGRzO1xuXG4gICAgdmFyIHR5cGVPZlZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSk7XG4gICAgaWYgKHR5cGVPZlZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCFiYXNlICYmICFmaWVsZHMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ0V4cGVjdGluZyAnICsga2V5ICsgJy5maWVsZHMgb3IgJyArIGtleSArICcuYmFzZScpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlICYmIHR5cGVvZiBiYXNlICE9PSAnc3RyaW5nJykge1xuICAgICAgICBlcnJvcnMucHVzaCgnRXhwZWN0aW5nIHN0cmluZyAnICsga2V5ICsgJy5iYXNlJyk7XG4gICAgICB9XG4gICAgICBpZiAoZmllbGRzKSB7XG4gICAgICAgIGlmICgodHlwZW9mIGZpZWxkcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZmllbGRzKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goJ0V4cGVjdGluZyBvYmplY3QgJyArIGtleSArICcuZmllbGRzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gZmllbGRzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkc1tmaWVsZF0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGVycm9ycy5wdXNoKCdFeHBlY3Rpbmcgc3RyaW5nIGluICcgKyBrZXkgKyAnLmZpZWxkcy4nICsgZmllbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZU9mVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBlcnJvcnMucHVzaCgnRXhwZWN0aW5nIG9iamVjdCBvciBzdHJpbmcgdW5kZXIgJyArIGtleSArICcsIGluc3RlYWQgZ290ICcgKyAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEtleXMgd2l0aCBvYmplY3RzIGFyZSBzdHJ1Y3RzXG4gIHZhciBzdHJ1Y3RzID0ge307XG4gIGZvciAodmFyIF9rZXkgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICB2YXIgX3ZhbHVlID0gZGVmaW5pdGlvbnNbX2tleV07XG4gICAgaWYgKCh0eXBlb2YgX3ZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfdmFsdWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHN0cnVjdHNbX2tleV0gPSBTdHJ1Y3QoX2tleSwgY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXNvbHZlIHVzZXItZnJpZW5kbHkgdHlwZWRlZiBuYW1lcyBwb2ludGluZyB0byBhIG5hdGl2ZSB0eXBlIChvciBhbm90aGVyIHR5cGVkZWYpXG4gIGZvciAodmFyIF9rZXkyIGluIGRlZmluaXRpb25zKSB7XG4gICAgdmFyIF92YWx1ZTIgPSBkZWZpbml0aW9uc1tfa2V5Ml07XG4gICAgaWYgKHR5cGVvZiBfdmFsdWUyID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlc1tfdmFsdWUyXTtcbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIHR5cGVzW19rZXkyXSA9IHR5cGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBleGFtcGxlOiBrZXkgPT09ICdmaWVsZHMnICYmIHZhbHVlID09PSBmaWVsZFtdXG4gICAgICAgIHZhciBzdHJ1Y3QgPSBnZXRUeXBlT3JTdHJ1Y3QoX2tleTIsIF92YWx1ZTIpOyAvLyB0eXBlID0gdmVjdG9yKGZpZWxkKVxuICAgICAgICBpZiAoc3RydWN0KSB7XG4gICAgICAgICAgc3RydWN0c1tfa2V5Ml0gPSBzdHJ1Y3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goJ1VucmVjb2duaXplZCB0eXBlIG9yIHN0cnVjdCAnICsgX2tleTIgKyAnLicgKyBfdmFsdWUyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0cnVjdHMgY2FuIGluaGVyaXQgYW5vdGhlciBzdHJ1Y3QsIHRoZXkgd2lsbCBzaGFyZSB0aGUgc2FtZSBpbnN0YW5jZVxuICBmb3IgKHZhciBfa2V5MyBpbiBkZWZpbml0aW9ucykge1xuICAgIHZhciB0aGlzU3RydWN0ID0gc3RydWN0c1tfa2V5M107XG4gICAgaWYgKCF0aGlzU3RydWN0KSBjb250aW51ZTtcbiAgICB2YXIgX3ZhbHVlMyA9IGRlZmluaXRpb25zW19rZXkzXTtcbiAgICBpZiAoKHR5cGVvZiBfdmFsdWUzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfdmFsdWUzKSkgPT09ICdvYmplY3QnICYmIF92YWx1ZTMuYmFzZSkge1xuICAgICAgdmFyIGJhc2UgPSBfdmFsdWUzLmJhc2U7XG4gICAgICB2YXIgYmFzZVN0cnVjdCA9IHN0cnVjdHNbYmFzZV07XG4gICAgICBpZiAoIWJhc2VTdHJ1Y3QpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ01pc3NpbmcgJyArIGJhc2UgKyAnIGluICcgKyBfa2V5MyArICcuYmFzZScpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXNTdHJ1Y3QuYWRkKCcnLCBzdHJ1Y3RQdHIoYmFzZVN0cnVjdCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENyZWF0ZSB0eXBlcyBmcm9tIGEgc3RyaW5nIChleCB2ZWN0b3JbVHlwZV0pXG4gIGZ1bmN0aW9uIGdldFR5cGVPclN0cnVjdChrZXksIFR5cGUsIHR5cGVBcmdzLCBmaWVsZE5hbWUpIHtcbiAgICB2YXIgdHlwZWF0dHkgPSBwYXJzZVR5cGUoVHlwZSk7XG4gICAgaWYgKCF0eXBlYXR0eSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG5hbWUgPSB0eXBlYXR0eS5uYW1lLFxuICAgICAgICBhbm5vdGF0aW9uID0gdHlwZWF0dHkuYW5ub3RhdGlvbixcbiAgICAgICAgYXJyYXlUeXBlID0gdHlwZWF0dHkuYXJyYXlUeXBlO1xuXG4gICAgdmFyIHJldCA9IHZvaWQgMDtcbiAgICBpZiAoYW5ub3RhdGlvbikge1xuICAgICAgLy8gYW55X3R5cGU8ZmllbGRfbmFtZSwgdHlwZV9uYW1lPlxuICAgICAgdmFyIF90eXBlID0gdHlwZXNbbmFtZV07XG4gICAgICBpZiAoX3R5cGUgPT0gbnVsbCkge1xuICAgICAgICBlcnJvcnMucHVzaCgnTWlzc2luZyAnICsgbmFtZSArICcgaW4gJyArIFR5cGUpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBhbm5UeXBlcyA9IFtdO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFubm90YXRpb25bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIGFublR5cGVOYW1lID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICB2YXIgYW5uVHlwZSA9IGdldFR5cGVPclN0cnVjdChrZXksIGFublR5cGVOYW1lLCBudWxsLCBmaWVsZE5hbWUpO1xuICAgICAgICAgIGlmICghYW5uVHlwZSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ01pc3NpbmcgJyArIGFublR5cGVOYW1lICsgJyBpbiAnICsgVHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYW5uVHlwZXMucHVzaChhbm5UeXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9IF90eXBlKGFublR5cGVzKTtcbiAgICB9IGVsc2UgaWYgKGFycmF5VHlwZSA9PSBudWxsKSB7XG4gICAgICAvLyBBbnlUeXBlXG4gICAgICB2YXIgZmllbGRTdHJ1Y3QgPSBzdHJ1Y3RzW25hbWVdO1xuICAgICAgaWYgKGZpZWxkU3RydWN0KSB7XG4gICAgICAgIHJldHVybiBmaWVsZFN0cnVjdDtcbiAgICAgIH1cblxuICAgICAgdmFyIF90eXBlMiA9IHR5cGVzW25hbWVdO1xuICAgICAgaWYgKCFfdHlwZTIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHR5cGVzIG5lZWQgdG8gYmUgaW5zdGFudGlhdGVkXG4gICAgICByZXQgPSBfdHlwZTIodHlwZUFyZ3MpO1xuICAgIH0gZWxzZSBpZiAoYXJyYXlUeXBlID09PSAnJykge1xuICAgICAgLy8gQW55VHlwZVtdXG4gICAgICB2YXIgbmFtZVR5cGUgPSBnZXRUeXBlT3JTdHJ1Y3Qoa2V5LCB0eXBlYXR0eS5uYW1lLCBudWxsLCBmaWVsZE5hbWUpO1xuICAgICAgaWYgKCFuYW1lVHlwZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvcnQgPSBjb25maWcuc29ydFtrZXkgKyAnLicgKyBmaWVsZE5hbWVdIHx8IGZhbHNlO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3NvcnQ/JywgYCR7a2V5fS4ke2ZpZWxkTmFtZX1gLCBzb3J0LCBjb25maWcuc29ydClcbiAgICAgIHJldCA9IHR5cGVzLnZlY3RvcihuYW1lVHlwZSwgc29ydCk7XG4gICAgfSBlbHNlIGlmIChhcnJheVR5cGUubGVuZ3RoID4gMCkge1xuICAgICAgLy8gdmVjdG9yW1R5cGVdXG4gICAgICB2YXIgYXJyYXlUcyA9IGdldFR5cGVPclN0cnVjdChrZXksIHR5cGVhdHR5LmFycmF5VHlwZSwgbnVsbCwgZmllbGROYW1lKTtcbiAgICAgIGlmICghYXJyYXlUcykge1xuICAgICAgICBlcnJvcnMucHVzaCgnTWlzc2luZyAnICsgdHlwZWF0dHkuYXJyYXlUeXBlICsgJyBpbiAnICsgVHlwZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGJhc2VUcyA9IGdldFR5cGVPclN0cnVjdChrZXksIHR5cGVhdHR5Lm5hbWUsIGFycmF5VHMsIGZpZWxkTmFtZSk7XG4gICAgICBpZiAoIWJhc2VUcykge1xuICAgICAgICBlcnJvcnMucHVzaCgnTWlzc2luZyAnICsgdHlwZWF0dHkubmFtZSArICcgaW4gJyArIFR5cGUpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldCA9IGJhc2VUcztcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVhdHR5Lm9wdGlvbmFsID8gdHlwZXMub3B0aW9uYWwocmV0KSA6IHJldDtcbiAgfVxuXG4gIC8vIEFkZCBhbGwgdGhlIGZpZWxkcy4gIFRoYW5rcyB0byBzdHJ1Y3RQdHIgbm8gbmVlZCB0byBsb29rIGF0IGJhc2UgdHlwZXMuXG4gIGZvciAodmFyIF9rZXk0IGluIGRlZmluaXRpb25zKSB7XG4gICAgdmFyIF90aGlzU3RydWN0ID0gc3RydWN0c1tfa2V5NF07XG4gICAgaWYgKCFfdGhpc1N0cnVjdCkgY29udGludWU7XG4gICAgdmFyIF92YWx1ZTQgPSBkZWZpbml0aW9uc1tfa2V5NF07XG4gICAgaWYgKCFfdmFsdWU0LmZpZWxkcykgY29udGludWU7XG4gICAgdmFyIGZpZWxkcyA9IF92YWx1ZTQuZmllbGRzO1xuXG4gICAgZm9yICh2YXIgRmllbGQgaW4gZmllbGRzKSB7XG4gICAgICB2YXIgVHlwZSA9IGZpZWxkc1tGaWVsZF07XG4gICAgICB2YXIgdHMgPSBnZXRUeXBlT3JTdHJ1Y3QoX2tleTQsIFR5cGUsIG51bGwsIEZpZWxkKTtcbiAgICAgIGlmICghdHMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ01pc3NpbmcgJyArIFR5cGUgKyAnIGluICcgKyBfa2V5NCArICcuZmllbGRzLicgKyBGaWVsZCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgX3RoaXNTdHJ1Y3QuYWRkKEZpZWxkLCB0cyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAvLyAnc3RydWN0cycgY291bGQgY29udGFpbiBpbnZhbGlkIHJlZmVyZW5jZXNcbiAgICByZXR1cm4geyBlcnJvcnM6IGVycm9ycyB9O1xuICB9XG5cbiAgcmV0dXJuIHsgZXJyb3JzOiBlcnJvcnMsIHN0cnVjdHM6IHN0cnVjdHMgfTtcbn1cblxudmFyIHBhcnNlVHlwZSA9IGZ1bmN0aW9uIHBhcnNlVHlwZShuYW1lKSB7XG4gIGlmICghbmFtZSB8fCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG5hbWUgPSBuYW1lLnRyaW0oKTtcblxuICB2YXIgYW5ub3RhdGlvbk1hdGNoID0gbmFtZS5tYXRjaCgvPCguKik+Lyk7XG4gIGlmIChhbm5vdGF0aW9uTWF0Y2gpIHtcbiAgICB2YXIgYW5ub3RhdGlvbiA9IGFubm90YXRpb25NYXRjaCA/IGFubm90YXRpb25NYXRjaFsxXS5yZXBsYWNlKC8gL2csICcnKS5zcGxpdCgnLCcpIDogbnVsbDtcblxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYW5ub3RhdGlvbk1hdGNoWzBdLCAnJykudHJpbSgpO1xuICAgIHJldHVybiB7IG5hbWU6IG5hbWUsIGFubm90YXRpb246IGFubm90YXRpb24gfTtcbiAgfVxuXG4gIHZhciBhcnJheU1hdGNoID0gbmFtZS5tYXRjaCgvXFxbKC4qKVxcXS8pO1xuICB2YXIgYXJyYXlUeXBlID0gYXJyYXlNYXRjaCA/IGFycmF5TWF0Y2hbMV0udHJpbSgpIDogbnVsbDtcblxuICBpZiAoYXJyYXlNYXRjaCkge1xuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYXJyYXlNYXRjaFswXSwgJycpLnRyaW0oKTtcbiAgfVxuXG4gIHZhciBvcHRpb25hbCA9IGZhbHNlO1xuICBpZiAoL1xcPyQvLnRlc3QobmFtZSkpIHtcbiAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxKTtcbiAgICBvcHRpb25hbCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHsgbmFtZTogbmFtZSwgYXJyYXlUeXBlOiBhcnJheVR5cGUsIG9wdGlvbmFsOiBvcHRpb25hbCB9O1xufTtcblxuLyoqXG4gIEJhc2UgdHlwZXMgYWxsIHBvaW50IHRvIHRoZSBzYW1lIHN0cnVjdC5cblxuICBOb3RlLCBhcHBlbmRCeXRlQnVmZmVyIGhhcyBubyByZXR1cm4gdHlwZS5cbiovXG52YXIgc3RydWN0UHRyID0gZnVuY3Rpb24gc3RydWN0UHRyKHR5cGUpIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgcmV0dXJuIHR5cGUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGUuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlLnRvT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiB0b0J1ZmZlcih0eXBlLCB2YWx1ZSkge1xuICB2YXIgc3RydWN0ID0gdHlwZS5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRvQnl0ZUJ1ZmZlcih0eXBlLCBzdHJ1Y3QpLnRvQmluYXJ5KCksICdiaW5hcnknKTtcbn1cblxuZnVuY3Rpb24gZnJvbUJ1ZmZlcih0eXBlLCBidWZmZXIpIHtcbiAgdmFyIHRvT2JqZWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuXG4gIHZhciBiID0gQnl0ZUJ1ZmZlci5mcm9tQmluYXJ5KGJ1ZmZlci50b1N0cmluZygnYmluYXJ5JyksIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTik7XG4gIHZhciBzdHJ1Y3QgPSB0eXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuICByZXR1cm4gdG9PYmplY3QgPyB0eXBlLnRvT2JqZWN0KHN0cnVjdCkgOiBzdHJ1Y3Q7XG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUJ1ZmZlcih0eXBlLCB2YWx1ZSkge1xuICB2YXIgYiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKTtcbiAgcmV0dXJuIGIuY29weSgwLCBiLm9mZnNldCk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQnl0ZUJ1ZmZlciA9IHJlcXVpcmUoJ2J5dGVidWZmZXInKTtcblxuLyoqXG4gIEBjbGFzcyBTdHJ1Y3RcblxuICBAYXJnIHtvYmplY3R9IGNvbmZpZy5vdmVycmlkZSA9IHtcbiAgICAnTWVzc2FnZS5kYXRhLmFwcGVuZEJ5dGVCdWZmZXInOiAoe2ZpZWxkcywgb2JqZWN0LCBifSkgPT4gey4ufVxuICB9XG4gIFJhcmUgY2FzZXMgd2hlcmUgc3BlY2lhbGl6ZWQgc2VyaWxpemF0aW9uIGlzIG5lZWRlZCAoZXggQSBNZXNzYWdlIG9iamVjdCBoYXNcbiAgJ3R5cGUnIGFuZCAnZGF0YScgZmllbGRzIHdoZXJlIG9iamVjdC50eXBlID09PSAndHJhbnNmZXInIGNhbiBkZWZpbmVcbiAgc2VyaWFsaXphdGlvbiB0aW1lIFN0cnVjdCBuZWVkZWQgZm9yICdkYXRhJyAuLiBUaGlzIHNhdmVzIGNvbXBsZXhpdHkgZm9yIHRoZVxuICBlbmQtdXNlcidzIHdvcmtpbmcgd2l0aCBqc29uLiAgU2VlIG92ZXJyaWRlIHVuaXQgdGVzdC5cbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsgZGVidWc6IGZhbHNlIH07XG5cbiAgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7IG92ZXJyaWRlOiB7fSB9LCBjb25maWcpO1xuICB2YXIgZmllbGRzID0ge307XG4gIHZhciBmaWVsZE9uZSA9IHZvaWQgMCxcbiAgICAgIGZpZWxkT25lTmFtZSA9IHZvaWQgMDtcblxuICByZXR1cm4ge1xuICAgIGNvbXBhcmU6IGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgdmFyIHYxID0gYVtmaWVsZE9uZU5hbWVdO1xuICAgICAgdmFyIHYyID0gYltmaWVsZE9uZU5hbWVdO1xuXG4gICAgICBpZiAoIWZpZWxkT25lIHx8ICFmaWVsZE9uZS5jb21wYXJlKSB7XG4gICAgICAgIHJldHVybiB2MSA+IHYyID8gMSA6IHYxIDwgdjIgPyAtMSA6IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaWVsZE9uZS5jb21wYXJlKHYxLCB2Mik7XG4gICAgfSxcblxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQoZmllbGROYW1lLCB0eXBlKSB7XG4gICAgICBmaWVsZHNbZmllbGROYW1lXSA9IHR5cGU7XG4gICAgICBpZiAoZmllbGRPbmUgPT0gbnVsbCkge1xuICAgICAgICBmaWVsZE9uZSA9IHR5cGU7XG4gICAgICAgIGZpZWxkT25lTmFtZSA9IGZpZWxkTmFtZTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvLyBDb21wbGV0ZSBsaXN0IG9mIGZpZWxkcywgYWZ0ZXIgcmVzb2x2aW5nIFwiYmFzZVwiIGluaGVyaXRhbmNlXG4gICAgZmllbGRzOiBmaWVsZHMsXG5cbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgdmFyIGZpZWxkID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoZmllbGQgaW4gZmllbGRzKSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBmaWVsZHNbZmllbGRdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbzEgPSBiLm9mZnNldDtcbiAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgLy8gc3RydWN0UHRyXG4gICAgICAgICAgICAgIG9iamVjdCA9IHR5cGUuZnJvbUJ5dGVCdWZmZXIoYiwgY29uZmlnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBmcm9tQnl0ZUJ1ZmZlciA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy4nICsgZmllbGQgKyAnLmZyb21CeXRlQnVmZmVyJ107XG4gICAgICAgICAgICAgIGlmIChmcm9tQnl0ZUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGZyb21CeXRlQnVmZmVyKHsgZmllbGRzOiBmaWVsZHMsIG9iamVjdDogb2JqZWN0LCBiOiBiLCBjb25maWc6IGNvbmZpZyB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmplY3RbZmllbGRdID0gdHlwZS5mcm9tQnl0ZUJ1ZmZlcihiLCBjb25maWcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlLnN0cnVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodHlwZS5zdHJ1Y3QpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgLy8gaHVtYW4gcmVhZGFibGUgdGV4dFxuICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0eXBlLnRvT2JqZWN0KGZpZWxkID09PSAnJyA/IG9iamVjdCA6IG9iamVjdFtmaWVsZF0sIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ2Zyb21CeXRlQnVmZmVyIGRlYnVnIGVycm9yOicsIGVycm9yKVxuICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIF9iID0gYi5jb3B5KG8xLCBiLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZnJvbUJ5dGVCdWZmZXInLCBuYW1lICsgJy4nICsgZmllbGQsICdcXCcnICsgdmFsdWUgKyAnXFwnJywgX2IudG9IZXgoKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUgKyAnIGluICcgKyBuYW1lICsgJy4nICsgZmllbGQpO1xuICAgICAgICAgICAgYi5wcmludERlYnVnKCk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSAnIGluICcgKyBuYW1lICsgJy4nICsgZmllbGQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgb2JqZWN0KSB7XG4gICAgICB2YXIgZmllbGQgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkc1tmaWVsZF07XG4gICAgICAgICAgaWYgKGZpZWxkID09PSAnJykge1xuICAgICAgICAgICAgLy8gc3RydWN0UHRyXG4gICAgICAgICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgb2JqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFwcGVuZEJ5dGVCdWZmZXIgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcuJyArIGZpZWxkICsgJy5hcHBlbmRCeXRlQnVmZmVyJ107XG4gICAgICAgICAgICBpZiAoYXBwZW5kQnl0ZUJ1ZmZlcikge1xuICAgICAgICAgICAgICBhcHBlbmRCeXRlQnVmZmVyKHsgZmllbGRzOiBmaWVsZHMsIG9iamVjdDogb2JqZWN0LCBiOiBiIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIG9iamVjdFtmaWVsZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICs9ICcgJyArIG5hbWUgKyAnLicgKyBmaWVsZCArICcgPSAnICsgSlNPTi5zdHJpbmdpZnkob2JqZWN0W2ZpZWxkXSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBjaXJjdWxhciByZWZcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICs9ICcgJyArIG5hbWUgKyAnLicgKyBmaWVsZCArICcgPSAnICsgb2JqZWN0W2ZpZWxkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3Qoc2VyaWFsaXplZE9iamVjdCkge1xuICAgICAgdmFyIGZyb21PYmplY3Rfc3RydWN0ID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLmZyb21PYmplY3QnXTtcbiAgICAgIGlmIChmcm9tT2JqZWN0X3N0cnVjdCkge1xuICAgICAgICB2YXIgcmV0ID0gZnJvbU9iamVjdF9zdHJ1Y3Qoc2VyaWFsaXplZE9iamVjdCk7XG4gICAgICAgIGlmIChyZXQgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgdmFyIGZpZWxkID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoZmllbGQgaW4gZmllbGRzKSB7XG4gICAgICAgICAgLy8gaWYoY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgLy8gICBjb25zb2xlLmVycm9yKG5hbWUsIGZpZWxkLCAnKGZyb21PYmplY3QpJylcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgdmFyIHR5cGUgPSBmaWVsZHNbZmllbGRdO1xuICAgICAgICAgIGlmIChmaWVsZCA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIHN0cnVjdFB0clxuICAgICAgICAgICAgdmFyIG9iamVjdCA9IHR5cGUuZnJvbU9iamVjdChzZXJpYWxpemVkT2JqZWN0KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCBvYmplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZnJvbU9iamVjdCA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy4nICsgZmllbGQgKyAnLmZyb21PYmplY3QnXTtcbiAgICAgICAgICAgIGlmIChmcm9tT2JqZWN0KSB7XG4gICAgICAgICAgICAgIGZyb21PYmplY3QoeyBmaWVsZHM6IGZpZWxkcywgb2JqZWN0OiBzZXJpYWxpemVkT2JqZWN0LCByZXN1bHQ6IHJlc3VsdCB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNlcmlhbGl6ZWRPYmplY3RbZmllbGRdO1xuICAgICAgICAgICAgICB2YXIgX29iamVjdCA9IHR5cGUuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICAgIHJlc3VsdFtmaWVsZF0gPSBfb2JqZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSAnICcgKyBuYW1lICsgJy4nICsgZmllbGQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICAgICAgdmFyIHNlcmlhbGl6ZWRPYmplY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICB2YXIgdG9PYmplY3Rfc3RydWN0ID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLnRvT2JqZWN0J107XG4gICAgICBpZiAodG9PYmplY3Rfc3RydWN0KSB7XG4gICAgICAgIHZhciByZXQgPSB0b09iamVjdF9zdHJ1Y3Qoc2VyaWFsaXplZE9iamVjdCk7XG4gICAgICAgIGlmIChyZXQgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgdmFyIGZpZWxkID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGlmICghZmllbGRzKSB7IHJldHVybiByZXN1bHQgfVxuXG4gICAgICAgIGZvciAoZmllbGQgaW4gZmllbGRzKSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBmaWVsZHNbZmllbGRdO1xuXG4gICAgICAgICAgdmFyIHRvT2JqZWN0ID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLicgKyBmaWVsZCArICcudG9PYmplY3QnXTtcbiAgICAgICAgICBpZiAodG9PYmplY3QpIHtcbiAgICAgICAgICAgIHRvT2JqZWN0KHsgZmllbGRzOiBmaWVsZHMsIG9iamVjdDogc2VyaWFsaXplZE9iamVjdCwgcmVzdWx0OiByZXN1bHQsIGNvbmZpZzogY29uZmlnIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZmllbGQgPT09ICcnKSB7XG4gICAgICAgICAgICAgIC8vIHN0cnVjdFB0clxuICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gdHlwZS50b09iamVjdChzZXJpYWxpemVkT2JqZWN0LCBjb25maWcpO1xuICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc3VsdCwgb2JqZWN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBfb2JqZWN0MiA9IHR5cGUudG9PYmplY3Qoc2VyaWFsaXplZE9iamVjdCA/IHNlcmlhbGl6ZWRPYmplY3RbZmllbGRdIDogbnVsbCwgY29uZmlnKTtcbiAgICAgICAgICAgICAgcmVzdWx0W2ZpZWxkXSA9IF9vYmplY3QyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuICAgICAgICAgICAgICBpZiAoc2VyaWFsaXplZE9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc2VyaWFsaXplZE9iamVjdFtmaWVsZF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kQnl0ZUJ1ZmZlciA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy4nICsgZmllbGQgKyAnLmFwcGVuZEJ5dGVCdWZmZXInXTtcbiAgICAgICAgICAgICAgICAgIGlmICh0b09iamVjdCAmJiBhcHBlbmRCeXRlQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZEJ5dGVCdWZmZXIoeyBmaWVsZHM6IGZpZWxkcywgb2JqZWN0OiBzZXJpYWxpemVkT2JqZWN0LCBiOiBiIH0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYiA9IGIuY29weSgwLCBiLm9mZnNldCk7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3RvT2JqZWN0JywgbmFtZSArICcuJyArIGZpZWxkLCAnXFwnJyArIHJlc3VsdFtmaWVsZF0gKyAnXFwnJywgYi50b0hleCgpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIHdvcmstYXJvdW5kIHRvIHByZXZlbnQgZGVidWcgdGltZSBjcmFzaFxuICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gbmFtZSArICcuJyArIGZpZWxkICsgJyAnICsgZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlcnJvci5tZXNzYWdlICs9ICcgJyArIG5hbWUgKyAnLicgKyBmaWVsZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hhaW46IHJlcXVpcmUoJy4vY2hhaW4uanNvbicpLFxuICBoaXN0b3J5OiByZXF1aXJlKCcuL2hpc3RvcnkuanNvbicpXG59OyIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnaXNvbW9ycGhpYy1mZXRjaCcpO1xudmFyIGNhbWVsQ2FzZSA9IHJlcXVpcmUoJ2NhbWVsLWNhc2UnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9leHBvcnRlZC1oZWxwZXJzJyk7XG52YXIgcHJvY2Vzc0FyZ3MgPSByZXF1aXJlKCcuL3Byb2Nlc3MtYXJncycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwaUdlbjtcblxuZnVuY3Rpb24gYXBpR2VuKHZlcnNpb24sIGRlZmluaXRpb25zKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gIHZhciBjb25maWdEZWZhdWx0cyA9IHtcbiAgICBodHRwRW5kcG9pbnQ6ICdodHRwOi8vMTI3LjAuMC4xOjg4ODgnLFxuICAgIHZlcmJvc2U6IGZhbHNlLFxuICAgIGxvZ2dlcjoge1xuICAgICAgbG9nOiBmdW5jdGlvbiBsb2coKSB7XG4gICAgICAgIHZhciBfY29uc29sZTtcblxuICAgICAgICByZXR1cm4gY29uZmlnLnZlcmJvc2UgPyAoX2NvbnNvbGUgPSBjb25zb2xlKS5sb2cuYXBwbHkoX2NvbnNvbGUsIGFyZ3VtZW50cykgOiBudWxsO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgICAgdmFyIF9jb25zb2xlMjtcblxuICAgICAgICByZXR1cm4gY29uZmlnLnZlcmJvc2UgPyAoX2NvbnNvbGUyID0gY29uc29sZSkuZXJyb3IuYXBwbHkoX2NvbnNvbGUyLCBhcmd1bWVudHMpIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyh0YXJnZXQsIGRlZmF1bHRzKSB7XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHRhcmdldFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXBwbHlEZWZhdWx0cyhjb25maWcsIGNvbmZpZ0RlZmF1bHRzKTtcbiAgYXBwbHlEZWZhdWx0cyhjb25maWcubG9nZ2VyLCBjb25maWdEZWZhdWx0cy5sb2dnZXIpO1xuXG4gIHZhciBhcGkgPSB7fTtcbiAgdmFyIGh0dHBFbmRwb2ludCA9IGNvbmZpZy5odHRwRW5kcG9pbnQ7XG5cblxuICBmb3IgKHZhciBhcGlHcm91cCBpbiBkZWZpbml0aW9ucykge1xuICAgIGZvciAodmFyIGFwaU1ldGhvZCBpbiBkZWZpbml0aW9uc1thcGlHcm91cF0pIHtcbiAgICAgIHZhciBtZXRob2ROYW1lID0gY2FtZWxDYXNlKGFwaU1ldGhvZCk7XG4gICAgICB2YXIgdXJsID0gaHR0cEVuZHBvaW50ICsgJy8nICsgdmVyc2lvbiArICcvJyArIGFwaUdyb3VwICsgJy8nICsgYXBpTWV0aG9kO1xuICAgICAgYXBpW21ldGhvZE5hbWVdID0gZmV0Y2hNZXRob2QobWV0aG9kTmFtZSwgdXJsLCBkZWZpbml0aW9uc1thcGlHcm91cF1bYXBpTWV0aG9kXSwgY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChoZWxwZXIpIHtcbiAgICAvLyBJbnNlcnQgYGFwaWAgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciB0byBhbGwgQVBJIGhlbHBlcnNcbiAgICBhcGlbaGVscGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfaGVscGVycyRhcGk7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoX2hlbHBlcnMkYXBpID0gaGVscGVycy5hcGkpW2hlbHBlcl0uYXBwbHkoX2hlbHBlcnMkYXBpLCBbYXBpXS5jb25jYXQoYXJncykpO1xuICAgIH07XG4gIH07XG5cbiAgZm9yICh2YXIgaGVscGVyIGluIGhlbHBlcnMuYXBpKSB7XG4gICAgX2xvb3AoaGVscGVyKTtcbiAgfVxuICByZXR1cm4gYXBpO1xufVxuXG5mdW5jdGlvbiBmZXRjaE1ldGhvZChtZXRob2ROYW1lLCB1cmwsIGRlZmluaXRpb24sIGNvbmZpZykge1xuICB2YXIgbG9nZ2VyID0gY29uZmlnLmxvZ2dlcjtcblxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKHVzYWdlKG1ldGhvZE5hbWUsIGRlZmluaXRpb24pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW9uc0Zvcm1hdHRlciA9IGZ1bmN0aW9uIG9wdGlvbnNGb3JtYXR0ZXIob3B0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiB7IGJyb2FkY2FzdDogb3B0aW9uIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBwcm9jZXNzZWRBcmdzID0gcHJvY2Vzc0FyZ3MoYXJncywgT2JqZWN0LmtleXMoZGVmaW5pdGlvbi5wYXJhbXMgfHwgW10pLCBtZXRob2ROYW1lLCBvcHRpb25zRm9ybWF0dGVyKTtcblxuICAgIHZhciBwYXJhbXMgPSBwcm9jZXNzZWRBcmdzLnBhcmFtcyxcbiAgICAgICAgb3B0aW9ucyA9IHByb2Nlc3NlZEFyZ3Mub3B0aW9ucyxcbiAgICAgICAgcmV0dXJuUHJvbWlzZSA9IHByb2Nlc3NlZEFyZ3MucmV0dXJuUHJvbWlzZTtcbiAgICB2YXIgY2FsbGJhY2sgPSBwcm9jZXNzZWRBcmdzLmNhbGxiYWNrO1xuXG5cbiAgICB2YXIgYm9keSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG4gICAgaWYgKGxvZ2dlci5sb2cpIHtcbiAgICAgIGxvZ2dlci5sb2coJ2FwaSA+JywgJ3Bvc3QnLCAnXFx0JywgdXJsLCBib2R5KTtcbiAgICB9XG4gICAgdmFyIGZldGNoQ29uZmlndXJhdGlvbiA9IHsgYm9keTogYm9keSwgbWV0aG9kOiAnUE9TVCcgfTtcbiAgICBPYmplY3QuYXNzaWduKGZldGNoQ29uZmlndXJhdGlvbiwgY29uZmlnLmZldGNoQ29uZmlndXJhdGlvbik7XG5cbiAgICBmZXRjaCh1cmwsIGZldGNoQ29uZmlndXJhdGlvbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKS50aGVuKGZ1bmN0aW9uIChib2R5UmVzcCkge1xuICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihib2R5UmVzcCk7XG4gICAgICAgICAgZXJyb3Iuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgIGVycm9yLnN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0dXNUZXh0O1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS50aGVuKGZ1bmN0aW9uIChvYmplY3RSZXNwKSB7XG4gICAgICBpZiAobG9nZ2VyLmxvZykge1xuICAgICAgICBsb2dnZXIubG9nKCdhcGkgPCcsICdyZXNwb25zZScsICdcXHQnLCB1cmwsIEpTT04uc3RyaW5naWZ5KG9iamVjdFJlc3ApKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIG9iamVjdFJlc3ApO1xuICAgICAgfSBjYXRjaCAoY2FsbGJhY2tFcnJvcikge1xuICAgICAgICBpZiAobG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdhcGkgPCcsICdyZXN1bHQgY2FsbGJhY2snLCAnOicsIGNhbGxiYWNrRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9ICcnO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gbm9kZW9zIGZvcm1hdCAoZmFpbCBzYWZlKVxuICAgICAgICBtZXNzYWdlID0gSlNPTi5wYXJzZShlcnJvci5tZXNzYWdlKS5lcnJvci5kZXRhaWxzWzBdO1xuICAgICAgfSBjYXRjaCAoZTIpIHt9XG5cbiAgICAgIGlmIChsb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdhcGkgPCcsICdlcnJvcicsICdcXHQnLCBtZXNzYWdlLCB1cmwsIGJvZHkpO1xuICAgICAgICBsb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICB9IGNhdGNoIChjYWxsYmFja0Vycm9yKSB7XG4gICAgICAgIGlmIChsb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoJ2FwaSA8JywgJ2Vycm9yIGNhbGxiYWNrJywgJzonLCBjYWxsYmFja0Vycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJldHVyblByb21pc2U7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzYWdlKG1ldGhvZE5hbWUsIGRlZmluaXRpb24pIHtcbiAgdmFyIHVzYWdlID0gJyc7XG4gIHZhciBvdXQgPSBmdW5jdGlvbiBvdXQoc3RyKSB7XG4gICAgdXNhZ2UgKz0gc3RyICsgJ1xcbic7XG4gIH07XG5cbiAgb3V0KCdVU0FHRScpO1xuICBvdXQobWV0aG9kTmFtZSArICcgLSAnICsgZGVmaW5pdGlvbi5icmllZik7XG5cbiAgb3V0KCdcXG5QQVJBTUVURVJTJyk7XG4gIGlmIChkZWZpbml0aW9uLnBhcmFtcykge1xuICAgIG91dChKU09OLnN0cmluZ2lmeShkZWZpbml0aW9uLnBhcmFtcywgbnVsbCwgMikpO1xuICB9IGVsc2Uge1xuICAgIG91dCgnbm9uZScpO1xuICB9XG5cbiAgb3V0KCdcXG5SRVRVUk5TJyk7XG4gIGlmIChkZWZpbml0aW9uLnJlc3VsdHMpIHtcbiAgICBvdXQoJycgKyBKU09OLnN0cmluZ2lmeShkZWZpbml0aW9uLnJlc3VsdHMsIG51bGwsIDIpKTtcbiAgfSBlbHNlIHtcbiAgICBvdXQoJ25vIGRhdGEnKTtcbiAgfVxuXG4gIG91dCgnXFxuRVJST1JTJyk7XG4gIGlmIChkZWZpbml0aW9uLmVycm9ycykge1xuICAgIGZvciAodmFyIGVycm9yIGluIGRlZmluaXRpb24uZXJyb3JzKSB7XG4gICAgICB2YXIgZXJyb3JEZXNjID0gZGVmaW5pdGlvbi5lcnJvcnNbZXJyb3JdO1xuICAgICAgb3V0KCcnICsgZXJyb3IgKyAoZXJyb3JEZXNjID8gJyAtICcgKyBlcnJvckRlc2MgOiAnJykpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQoJ25vdGhpbmcgc3BlY2lhbCcpO1xuICB9XG5cbiAgcmV0dXJuIHVzYWdlO1xufSIsIi8vIHRoZSB3aGF0d2ctZmV0Y2ggcG9seWZpbGwgaW5zdGFsbHMgdGhlIGZldGNoKCkgZnVuY3Rpb25cbi8vIG9uIHRoZSBnbG9iYWwgb2JqZWN0ICh3aW5kb3cgb3Igc2VsZilcbi8vXG4vLyBSZXR1cm4gdGhhdCBhcyB0aGUgZXhwb3J0IGZvciB1c2UgaW4gV2VicGFjaywgQnJvd3NlcmlmeSBldGMuXG5yZXF1aXJlKCd3aGF0d2ctZmV0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gc2VsZi5mZXRjaC5iaW5kKHNlbGYpO1xuIiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsInZhciB1cHBlckNhc2UgPSByZXF1aXJlKCd1cHBlci1jYXNlJylcbnZhciBub0Nhc2UgPSByZXF1aXJlKCduby1jYXNlJylcblxuLyoqXG4gKiBDYW1lbCBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSAge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGxvY2FsZSwgbWVyZ2VOdW1iZXJzKSB7XG4gIHZhciByZXN1bHQgPSBub0Nhc2UodmFsdWUsIGxvY2FsZSlcblxuICAvLyBSZXBsYWNlIHBlcmlvZHMgYmV0d2VlbiBudW1lcmljIGVudGl0aWVzIHdpdGggYW4gdW5kZXJzY29yZS5cbiAgaWYgKCFtZXJnZU51bWJlcnMpIHtcbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvICg/PVxcZCkvZywgJ18nKVxuICB9XG5cbiAgLy8gUmVwbGFjZSBzcGFjZXMgYmV0d2VlbiB3b3JkcyB3aXRoIGFuIHVwcGVyIGNhc2VkIGNoYXJhY3Rlci5cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC8gKC4pL2csIGZ1bmN0aW9uIChtLCAkMSkge1xuICAgIHJldHVybiB1cHBlckNhc2UoJDEsIGxvY2FsZSlcbiAgfSlcbn1cbiIsIi8qKlxuICogU3BlY2lhbCBsYW5ndWFnZS1zcGVjaWZpYyBvdmVycmlkZXMuXG4gKlxuICogU291cmNlOiBmdHA6Ly9mdHAudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL1NwZWNpYWxDYXNpbmcudHh0XG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIExBTkdVQUdFUyA9IHtcbiAgdHI6IHtcbiAgICByZWdleHA6IC9bXFx1MDA2OV0vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDY5JzogJ1xcdTAxMzAnXG4gICAgfVxuICB9LFxuICBhejoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDY5XS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNjknOiAnXFx1MDEzMCdcbiAgICB9XG4gIH0sXG4gIGx0OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNjlcXHUwMDZBXFx1MDEyRl1cXHUwMzA3fFxcdTAwNjlcXHUwMzA3W1xcdTAzMDBcXHUwMzAxXFx1MDMwM10vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDY5XFx1MDMwNyc6ICdcXHUwMDQ5JyxcbiAgICAgICdcXHUwMDZBXFx1MDMwNyc6ICdcXHUwMDRBJyxcbiAgICAgICdcXHUwMTJGXFx1MDMwNyc6ICdcXHUwMTJFJyxcbiAgICAgICdcXHUwMDY5XFx1MDMwN1xcdTAzMDAnOiAnXFx1MDBDQycsXG4gICAgICAnXFx1MDA2OVxcdTAzMDdcXHUwMzAxJzogJ1xcdTAwQ0QnLFxuICAgICAgJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMyc6ICdcXHUwMTI4J1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFVwcGVyIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUpIHtcbiAgdmFyIGxhbmcgPSBMQU5HVUFHRVNbbG9jYWxlXVxuXG4gIHN0ciA9IHN0ciA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyKVxuXG4gIGlmIChsYW5nKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBsYW5nLm1hcFttXSB9KVxuICB9XG5cbiAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpXG59XG4iLCJ2YXIgbG93ZXJDYXNlID0gcmVxdWlyZSgnbG93ZXItY2FzZScpXG5cbnZhciBOT05fV09SRF9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9ub24td29yZC1yZWdleHAnKVxudmFyIENBTUVMX0NBU0VfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3IvY2FtZWwtY2FzZS1yZWdleHAnKVxudmFyIENBTUVMX0NBU0VfVVBQRVJfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3IvY2FtZWwtY2FzZS11cHBlci1yZWdleHAnKVxuXG4vKipcbiAqIFNlbnRlbmNlIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbG9jYWxlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlLCByZXBsYWNlbWVudCkge1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHJlcGxhY2VtZW50ID0gdHlwZW9mIHJlcGxhY2VtZW50ICE9PSAnc3RyaW5nJyA/ICcgJyA6IHJlcGxhY2VtZW50XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSAobWF0Y2gsIGluZGV4LCB2YWx1ZSkge1xuICAgIGlmIChpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gKHZhbHVlLmxlbmd0aCAtIG1hdGNoLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIHJldHVybiByZXBsYWNlbWVudFxuICB9XG5cbiAgc3RyID0gU3RyaW5nKHN0cilcbiAgICAvLyBTdXBwb3J0IGNhbWVsIGNhc2UgKFwiY2FtZWxDYXNlXCIgLT4gXCJjYW1lbCBDYXNlXCIpLlxuICAgIC5yZXBsYWNlKENBTUVMX0NBU0VfUkVHRVhQLCAnJDEgJDInKVxuICAgIC8vIFN1cHBvcnQgb2RkIGNhbWVsIGNhc2UgKFwiQ0FNRUxDYXNlXCIgLT4gXCJDQU1FTCBDYXNlXCIpLlxuICAgIC5yZXBsYWNlKENBTUVMX0NBU0VfVVBQRVJfUkVHRVhQLCAnJDEgJDInKVxuICAgIC8vIFJlbW92ZSBhbGwgbm9uLXdvcmQgY2hhcmFjdGVycyBhbmQgcmVwbGFjZSB3aXRoIGEgc2luZ2xlIHNwYWNlLlxuICAgIC5yZXBsYWNlKE5PTl9XT1JEX1JFR0VYUCwgcmVwbGFjZSlcblxuICAvLyBMb3dlciBjYXNlIHRoZSBlbnRpcmUgc3RyaW5nLlxuICByZXR1cm4gbG93ZXJDYXNlKHN0ciwgbG9jYWxlKVxufVxuIiwiLyoqXG4gKiBTcGVjaWFsIGxhbmd1YWdlLXNwZWNpZmljIG92ZXJyaWRlcy5cbiAqXG4gKiBTb3VyY2U6IGZ0cDovL2Z0cC51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvU3BlY2lhbENhc2luZy50eHRcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgTEFOR1VBR0VTID0ge1xuICB0cjoge1xuICAgIHJlZ2V4cDogL1xcdTAxMzB8XFx1MDA0OXxcXHUwMDQ5XFx1MDMwNy9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAxMzAnOiAnXFx1MDA2OScsXG4gICAgICAnXFx1MDA0OSc6ICdcXHUwMTMxJyxcbiAgICAgICdcXHUwMDQ5XFx1MDMwNyc6ICdcXHUwMDY5J1xuICAgIH1cbiAgfSxcbiAgYXo6IHtcbiAgICByZWdleHA6IC9bXFx1MDEzMF0vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMTMwJzogJ1xcdTAwNjknLFxuICAgICAgJ1xcdTAwNDknOiAnXFx1MDEzMScsXG4gICAgICAnXFx1MDA0OVxcdTAzMDcnOiAnXFx1MDA2OSdcbiAgICB9XG4gIH0sXG4gIGx0OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNDlcXHUwMDRBXFx1MDEyRVxcdTAwQ0NcXHUwMENEXFx1MDEyOF0vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDQ5JzogJ1xcdTAwNjlcXHUwMzA3JyxcbiAgICAgICdcXHUwMDRBJzogJ1xcdTAwNkFcXHUwMzA3JyxcbiAgICAgICdcXHUwMTJFJzogJ1xcdTAxMkZcXHUwMzA3JyxcbiAgICAgICdcXHUwMENDJzogJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMCcsXG4gICAgICAnXFx1MDBDRCc6ICdcXHUwMDY5XFx1MDMwN1xcdTAzMDEnLFxuICAgICAgJ1xcdTAxMjgnOiAnXFx1MDA2OVxcdTAzMDdcXHUwMzAzJ1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIExvd2VyY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIGxvY2FsZSkge1xuICB2YXIgbGFuZyA9IExBTkdVQUdFU1tsb2NhbGVdXG5cbiAgc3RyID0gc3RyID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHIpXG5cbiAgaWYgKGxhbmcpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShsYW5nLnJlZ2V4cCwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGxhbmcubWFwW21dIH0pXG4gIH1cblxuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKClcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gL1teQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwLVxcdTA4QjRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1Ri1cXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RjEtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEyRi1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxODNcXHUyMTg0XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyRTJGXFx1MzAwNVxcdTMwMDZcXHUzMDMxLVxcdTMwMzVcXHUzMDNCXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUQtXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkU1XFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FEXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDMC05XFx4QjJcXHhCM1xceEI5XFx4QkMtXFx4QkVcXHUwNjYwLVxcdTA2NjlcXHUwNkYwLVxcdTA2RjlcXHUwN0MwLVxcdTA3QzlcXHUwOTY2LVxcdTA5NkZcXHUwOUU2LVxcdTA5RUZcXHUwOUY0LVxcdTA5RjlcXHUwQTY2LVxcdTBBNkZcXHUwQUU2LVxcdTBBRUZcXHUwQjY2LVxcdTBCNkZcXHUwQjcyLVxcdTBCNzdcXHUwQkU2LVxcdTBCRjJcXHUwQzY2LVxcdTBDNkZcXHUwQzc4LVxcdTBDN0VcXHUwQ0U2LVxcdTBDRUZcXHUwRDY2LVxcdTBENzVcXHUwREU2LVxcdTBERUZcXHUwRTUwLVxcdTBFNTlcXHUwRUQwLVxcdTBFRDlcXHUwRjIwLVxcdTBGMzNcXHUxMDQwLVxcdTEwNDlcXHUxMDkwLVxcdTEwOTlcXHUxMzY5LVxcdTEzN0NcXHUxNkVFLVxcdTE2RjBcXHUxN0UwLVxcdTE3RTlcXHUxN0YwLVxcdTE3RjlcXHUxODEwLVxcdTE4MTlcXHUxOTQ2LVxcdTE5NEZcXHUxOUQwLVxcdTE5REFcXHUxQTgwLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQjUwLVxcdTFCNTlcXHUxQkIwLVxcdTFCQjlcXHUxQzQwLVxcdTFDNDlcXHUxQzUwLVxcdTFDNTlcXHUyMDcwXFx1MjA3NC1cXHUyMDc5XFx1MjA4MC1cXHUyMDg5XFx1MjE1MC1cXHUyMTgyXFx1MjE4NS1cXHUyMTg5XFx1MjQ2MC1cXHUyNDlCXFx1MjRFQS1cXHUyNEZGXFx1Mjc3Ni1cXHUyNzkzXFx1MkNGRFxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDM4LVxcdTMwM0FcXHUzMTkyLVxcdTMxOTVcXHUzMjIwLVxcdTMyMjlcXHUzMjQ4LVxcdTMyNEZcXHUzMjUxLVxcdTMyNUZcXHUzMjgwLVxcdTMyODlcXHUzMkIxLVxcdTMyQkZcXHVBNjIwLVxcdUE2MjlcXHVBNkU2LVxcdUE2RUZcXHVBODMwLVxcdUE4MzVcXHVBOEQwLVxcdUE4RDlcXHVBOTAwLVxcdUE5MDlcXHVBOUQwLVxcdUE5RDlcXHVBOUYwLVxcdUE5RjlcXHVBQTUwLVxcdUFBNTlcXHVBQkYwLVxcdUFCRjlcXHVGRjEwLVxcdUZGMTldKy9nXG4iLCJtb2R1bGUuZXhwb3J0cyA9IC8oW2EtelxceEI1XFx4REYtXFx4RjZcXHhGOC1cXHhGRlxcdTAxMDFcXHUwMTAzXFx1MDEwNVxcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMTBGXFx1MDExMVxcdTAxMTNcXHUwMTE1XFx1MDExN1xcdTAxMTlcXHUwMTFCXFx1MDExRFxcdTAxMUZcXHUwMTIxXFx1MDEyM1xcdTAxMjVcXHUwMTI3XFx1MDEyOVxcdTAxMkJcXHUwMTJEXFx1MDEyRlxcdTAxMzFcXHUwMTMzXFx1MDEzNVxcdTAxMzdcXHUwMTM4XFx1MDEzQVxcdTAxM0NcXHUwMTNFXFx1MDE0MFxcdTAxNDJcXHUwMTQ0XFx1MDE0NlxcdTAxNDhcXHUwMTQ5XFx1MDE0QlxcdTAxNERcXHUwMTRGXFx1MDE1MVxcdTAxNTNcXHUwMTU1XFx1MDE1N1xcdTAxNTlcXHUwMTVCXFx1MDE1RFxcdTAxNUZcXHUwMTYxXFx1MDE2M1xcdTAxNjVcXHUwMTY3XFx1MDE2OVxcdTAxNkJcXHUwMTZEXFx1MDE2RlxcdTAxNzFcXHUwMTczXFx1MDE3NVxcdTAxNzdcXHUwMTdBXFx1MDE3Q1xcdTAxN0UtXFx1MDE4MFxcdTAxODNcXHUwMTg1XFx1MDE4OFxcdTAxOENcXHUwMThEXFx1MDE5MlxcdTAxOTVcXHUwMTk5LVxcdTAxOUJcXHUwMTlFXFx1MDFBMVxcdTAxQTNcXHUwMUE1XFx1MDFBOFxcdTAxQUFcXHUwMUFCXFx1MDFBRFxcdTAxQjBcXHUwMUI0XFx1MDFCNlxcdTAxQjlcXHUwMUJBXFx1MDFCRC1cXHUwMUJGXFx1MDFDNlxcdTAxQzlcXHUwMUNDXFx1MDFDRVxcdTAxRDBcXHUwMUQyXFx1MDFENFxcdTAxRDZcXHUwMUQ4XFx1MDFEQVxcdTAxRENcXHUwMUREXFx1MDFERlxcdTAxRTFcXHUwMUUzXFx1MDFFNVxcdTAxRTdcXHUwMUU5XFx1MDFFQlxcdTAxRURcXHUwMUVGXFx1MDFGMFxcdTAxRjNcXHUwMUY1XFx1MDFGOVxcdTAxRkJcXHUwMUZEXFx1MDFGRlxcdTAyMDFcXHUwMjAzXFx1MDIwNVxcdTAyMDdcXHUwMjA5XFx1MDIwQlxcdTAyMERcXHUwMjBGXFx1MDIxMVxcdTAyMTNcXHUwMjE1XFx1MDIxN1xcdTAyMTlcXHUwMjFCXFx1MDIxRFxcdTAyMUZcXHUwMjIxXFx1MDIyM1xcdTAyMjVcXHUwMjI3XFx1MDIyOVxcdTAyMkJcXHUwMjJEXFx1MDIyRlxcdTAyMzFcXHUwMjMzLVxcdTAyMzlcXHUwMjNDXFx1MDIzRlxcdTAyNDBcXHUwMjQyXFx1MDI0N1xcdTAyNDlcXHUwMjRCXFx1MDI0RFxcdTAyNEYtXFx1MDI5M1xcdTAyOTUtXFx1MDJBRlxcdTAzNzFcXHUwMzczXFx1MDM3N1xcdTAzN0ItXFx1MDM3RFxcdTAzOTBcXHUwM0FDLVxcdTAzQ0VcXHUwM0QwXFx1MDNEMVxcdTAzRDUtXFx1MDNEN1xcdTAzRDlcXHUwM0RCXFx1MDNERFxcdTAzREZcXHUwM0UxXFx1MDNFM1xcdTAzRTVcXHUwM0U3XFx1MDNFOVxcdTAzRUJcXHUwM0VEXFx1MDNFRi1cXHUwM0YzXFx1MDNGNVxcdTAzRjhcXHUwM0ZCXFx1MDNGQ1xcdTA0MzAtXFx1MDQ1RlxcdTA0NjFcXHUwNDYzXFx1MDQ2NVxcdTA0NjdcXHUwNDY5XFx1MDQ2QlxcdTA0NkRcXHUwNDZGXFx1MDQ3MVxcdTA0NzNcXHUwNDc1XFx1MDQ3N1xcdTA0NzlcXHUwNDdCXFx1MDQ3RFxcdTA0N0ZcXHUwNDgxXFx1MDQ4QlxcdTA0OERcXHUwNDhGXFx1MDQ5MVxcdTA0OTNcXHUwNDk1XFx1MDQ5N1xcdTA0OTlcXHUwNDlCXFx1MDQ5RFxcdTA0OUZcXHUwNEExXFx1MDRBM1xcdTA0QTVcXHUwNEE3XFx1MDRBOVxcdTA0QUJcXHUwNEFEXFx1MDRBRlxcdTA0QjFcXHUwNEIzXFx1MDRCNVxcdTA0QjdcXHUwNEI5XFx1MDRCQlxcdTA0QkRcXHUwNEJGXFx1MDRDMlxcdTA0QzRcXHUwNEM2XFx1MDRDOFxcdTA0Q0FcXHUwNENDXFx1MDRDRVxcdTA0Q0ZcXHUwNEQxXFx1MDREM1xcdTA0RDVcXHUwNEQ3XFx1MDREOVxcdTA0REJcXHUwNEREXFx1MDRERlxcdTA0RTFcXHUwNEUzXFx1MDRFNVxcdTA0RTdcXHUwNEU5XFx1MDRFQlxcdTA0RURcXHUwNEVGXFx1MDRGMVxcdTA0RjNcXHUwNEY1XFx1MDRGN1xcdTA0RjlcXHUwNEZCXFx1MDRGRFxcdTA0RkZcXHUwNTAxXFx1MDUwM1xcdTA1MDVcXHUwNTA3XFx1MDUwOVxcdTA1MEJcXHUwNTBEXFx1MDUwRlxcdTA1MTFcXHUwNTEzXFx1MDUxNVxcdTA1MTdcXHUwNTE5XFx1MDUxQlxcdTA1MURcXHUwNTFGXFx1MDUyMVxcdTA1MjNcXHUwNTI1XFx1MDUyN1xcdTA1MjlcXHUwNTJCXFx1MDUyRFxcdTA1MkZcXHUwNTYxLVxcdTA1ODdcXHUxM0Y4LVxcdTEzRkRcXHUxRDAwLVxcdTFEMkJcXHUxRDZCLVxcdTFENzdcXHUxRDc5LVxcdTFEOUFcXHUxRTAxXFx1MUUwM1xcdTFFMDVcXHUxRTA3XFx1MUUwOVxcdTFFMEJcXHUxRTBEXFx1MUUwRlxcdTFFMTFcXHUxRTEzXFx1MUUxNVxcdTFFMTdcXHUxRTE5XFx1MUUxQlxcdTFFMURcXHUxRTFGXFx1MUUyMVxcdTFFMjNcXHUxRTI1XFx1MUUyN1xcdTFFMjlcXHUxRTJCXFx1MUUyRFxcdTFFMkZcXHUxRTMxXFx1MUUzM1xcdTFFMzVcXHUxRTM3XFx1MUUzOVxcdTFFM0JcXHUxRTNEXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MUU0NVxcdTFFNDdcXHUxRTQ5XFx1MUU0QlxcdTFFNERcXHUxRTRGXFx1MUU1MVxcdTFFNTNcXHUxRTU1XFx1MUU1N1xcdTFFNTlcXHUxRTVCXFx1MUU1RFxcdTFFNUZcXHUxRTYxXFx1MUU2M1xcdTFFNjVcXHUxRTY3XFx1MUU2OVxcdTFFNkJcXHUxRTZEXFx1MUU2RlxcdTFFNzFcXHUxRTczXFx1MUU3NVxcdTFFNzdcXHUxRTc5XFx1MUU3QlxcdTFFN0RcXHUxRTdGXFx1MUU4MVxcdTFFODNcXHUxRTg1XFx1MUU4N1xcdTFFODlcXHUxRThCXFx1MUU4RFxcdTFFOEZcXHUxRTkxXFx1MUU5M1xcdTFFOTUtXFx1MUU5RFxcdTFFOUZcXHUxRUExXFx1MUVBM1xcdTFFQTVcXHUxRUE3XFx1MUVBOVxcdTFFQUJcXHUxRUFEXFx1MUVBRlxcdTFFQjFcXHUxRUIzXFx1MUVCNVxcdTFFQjdcXHUxRUI5XFx1MUVCQlxcdTFFQkRcXHUxRUJGXFx1MUVDMVxcdTFFQzNcXHUxRUM1XFx1MUVDN1xcdTFFQzlcXHUxRUNCXFx1MUVDRFxcdTFFQ0ZcXHUxRUQxXFx1MUVEM1xcdTFFRDVcXHUxRUQ3XFx1MUVEOVxcdTFFREJcXHUxRUREXFx1MUVERlxcdTFFRTFcXHUxRUUzXFx1MUVFNVxcdTFFRTdcXHUxRUU5XFx1MUVFQlxcdTFFRURcXHUxRUVGXFx1MUVGMVxcdTFFRjNcXHUxRUY1XFx1MUVGN1xcdTFFRjlcXHUxRUZCXFx1MUVGRFxcdTFFRkYtXFx1MUYwN1xcdTFGMTAtXFx1MUYxNVxcdTFGMjAtXFx1MUYyN1xcdTFGMzAtXFx1MUYzN1xcdTFGNDAtXFx1MUY0NVxcdTFGNTAtXFx1MUY1N1xcdTFGNjAtXFx1MUY2N1xcdTFGNzAtXFx1MUY3RFxcdTFGODAtXFx1MUY4N1xcdTFGOTAtXFx1MUY5N1xcdTFGQTAtXFx1MUZBN1xcdTFGQjAtXFx1MUZCNFxcdTFGQjZcXHUxRkI3XFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzZcXHUxRkM3XFx1MUZEMC1cXHUxRkQzXFx1MUZENlxcdTFGRDdcXHUxRkUwLVxcdTFGRTdcXHUxRkYyLVxcdTFGRjRcXHUxRkY2XFx1MUZGN1xcdTIxMEFcXHUyMTBFXFx1MjEwRlxcdTIxMTNcXHUyMTJGXFx1MjEzNFxcdTIxMzlcXHUyMTNDXFx1MjEzRFxcdTIxNDYtXFx1MjE0OVxcdTIxNEVcXHUyMTg0XFx1MkMzMC1cXHUyQzVFXFx1MkM2MVxcdTJDNjVcXHUyQzY2XFx1MkM2OFxcdTJDNkFcXHUyQzZDXFx1MkM3MVxcdTJDNzNcXHUyQzc0XFx1MkM3Ni1cXHUyQzdCXFx1MkM4MVxcdTJDODNcXHUyQzg1XFx1MkM4N1xcdTJDODlcXHUyQzhCXFx1MkM4RFxcdTJDOEZcXHUyQzkxXFx1MkM5M1xcdTJDOTVcXHUyQzk3XFx1MkM5OVxcdTJDOUJcXHUyQzlEXFx1MkM5RlxcdTJDQTFcXHUyQ0EzXFx1MkNBNVxcdTJDQTdcXHUyQ0E5XFx1MkNBQlxcdTJDQURcXHUyQ0FGXFx1MkNCMVxcdTJDQjNcXHUyQ0I1XFx1MkNCN1xcdTJDQjlcXHUyQ0JCXFx1MkNCRFxcdTJDQkZcXHUyQ0MxXFx1MkNDM1xcdTJDQzVcXHUyQ0M3XFx1MkNDOVxcdTJDQ0JcXHUyQ0NEXFx1MkNDRlxcdTJDRDFcXHUyQ0QzXFx1MkNENVxcdTJDRDdcXHUyQ0Q5XFx1MkNEQlxcdTJDRERcXHUyQ0RGXFx1MkNFMVxcdTJDRTNcXHUyQ0U0XFx1MkNFQ1xcdTJDRUVcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHVBNjQxXFx1QTY0M1xcdUE2NDVcXHVBNjQ3XFx1QTY0OVxcdUE2NEJcXHVBNjREXFx1QTY0RlxcdUE2NTFcXHVBNjUzXFx1QTY1NVxcdUE2NTdcXHVBNjU5XFx1QTY1QlxcdUE2NURcXHVBNjVGXFx1QTY2MVxcdUE2NjNcXHVBNjY1XFx1QTY2N1xcdUE2NjlcXHVBNjZCXFx1QTY2RFxcdUE2ODFcXHVBNjgzXFx1QTY4NVxcdUE2ODdcXHVBNjg5XFx1QTY4QlxcdUE2OERcXHVBNjhGXFx1QTY5MVxcdUE2OTNcXHVBNjk1XFx1QTY5N1xcdUE2OTlcXHVBNjlCXFx1QTcyM1xcdUE3MjVcXHVBNzI3XFx1QTcyOVxcdUE3MkJcXHVBNzJEXFx1QTcyRi1cXHVBNzMxXFx1QTczM1xcdUE3MzVcXHVBNzM3XFx1QTczOVxcdUE3M0JcXHVBNzNEXFx1QTczRlxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3NDdcXHVBNzQ5XFx1QTc0QlxcdUE3NERcXHVBNzRGXFx1QTc1MVxcdUE3NTNcXHVBNzU1XFx1QTc1N1xcdUE3NTlcXHVBNzVCXFx1QTc1RFxcdUE3NUZcXHVBNzYxXFx1QTc2M1xcdUE3NjVcXHVBNzY3XFx1QTc2OVxcdUE3NkJcXHVBNzZEXFx1QTc2RlxcdUE3NzEtXFx1QTc3OFxcdUE3N0FcXHVBNzdDXFx1QTc3RlxcdUE3ODFcXHVBNzgzXFx1QTc4NVxcdUE3ODdcXHVBNzhDXFx1QTc4RVxcdUE3OTFcXHVBNzkzLVxcdUE3OTVcXHVBNzk3XFx1QTc5OVxcdUE3OUJcXHVBNzlEXFx1QTc5RlxcdUE3QTFcXHVBN0EzXFx1QTdBNVxcdUE3QTdcXHVBN0E5XFx1QTdCNVxcdUE3QjdcXHVBN0ZBXFx1QUIzMC1cXHVBQjVBXFx1QUI2MC1cXHVBQjY1XFx1QUI3MC1cXHVBQkJGXFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkY0MS1cXHVGRjVBMC05XFx4QjJcXHhCM1xceEI5XFx4QkMtXFx4QkVcXHUwNjYwLVxcdTA2NjlcXHUwNkYwLVxcdTA2RjlcXHUwN0MwLVxcdTA3QzlcXHUwOTY2LVxcdTA5NkZcXHUwOUU2LVxcdTA5RUZcXHUwOUY0LVxcdTA5RjlcXHUwQTY2LVxcdTBBNkZcXHUwQUU2LVxcdTBBRUZcXHUwQjY2LVxcdTBCNkZcXHUwQjcyLVxcdTBCNzdcXHUwQkU2LVxcdTBCRjJcXHUwQzY2LVxcdTBDNkZcXHUwQzc4LVxcdTBDN0VcXHUwQ0U2LVxcdTBDRUZcXHUwRDY2LVxcdTBENzVcXHUwREU2LVxcdTBERUZcXHUwRTUwLVxcdTBFNTlcXHUwRUQwLVxcdTBFRDlcXHUwRjIwLVxcdTBGMzNcXHUxMDQwLVxcdTEwNDlcXHUxMDkwLVxcdTEwOTlcXHUxMzY5LVxcdTEzN0NcXHUxNkVFLVxcdTE2RjBcXHUxN0UwLVxcdTE3RTlcXHUxN0YwLVxcdTE3RjlcXHUxODEwLVxcdTE4MTlcXHUxOTQ2LVxcdTE5NEZcXHUxOUQwLVxcdTE5REFcXHUxQTgwLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQjUwLVxcdTFCNTlcXHUxQkIwLVxcdTFCQjlcXHUxQzQwLVxcdTFDNDlcXHUxQzUwLVxcdTFDNTlcXHUyMDcwXFx1MjA3NC1cXHUyMDc5XFx1MjA4MC1cXHUyMDg5XFx1MjE1MC1cXHUyMTgyXFx1MjE4NS1cXHUyMTg5XFx1MjQ2MC1cXHUyNDlCXFx1MjRFQS1cXHUyNEZGXFx1Mjc3Ni1cXHUyNzkzXFx1MkNGRFxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDM4LVxcdTMwM0FcXHUzMTkyLVxcdTMxOTVcXHUzMjIwLVxcdTMyMjlcXHUzMjQ4LVxcdTMyNEZcXHUzMjUxLVxcdTMyNUZcXHUzMjgwLVxcdTMyODlcXHUzMkIxLVxcdTMyQkZcXHVBNjIwLVxcdUE2MjlcXHVBNkU2LVxcdUE2RUZcXHVBODMwLVxcdUE4MzVcXHVBOEQwLVxcdUE4RDlcXHVBOTAwLVxcdUE5MDlcXHVBOUQwLVxcdUE5RDlcXHVBOUYwLVxcdUE5RjlcXHVBQTUwLVxcdUFBNTlcXHVBQkYwLVxcdUFCRjlcXHVGRjEwLVxcdUZGMTldKShbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FEXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV0pL2dcbiIsIm1vZHVsZS5leHBvcnRzID0gLyhbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FEXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV0pKFtBLVpcXHhDMC1cXHhENlxceEQ4LVxceERFXFx1MDEwMFxcdTAxMDJcXHUwMTA0XFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAxMEVcXHUwMTEwXFx1MDExMlxcdTAxMTRcXHUwMTE2XFx1MDExOFxcdTAxMUFcXHUwMTFDXFx1MDExRVxcdTAxMjBcXHUwMTIyXFx1MDEyNFxcdTAxMjZcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTJFXFx1MDEzMFxcdTAxMzJcXHUwMTM0XFx1MDEzNlxcdTAxMzlcXHUwMTNCXFx1MDEzRFxcdTAxM0ZcXHUwMTQxXFx1MDE0M1xcdTAxNDVcXHUwMTQ3XFx1MDE0QVxcdTAxNENcXHUwMTRFXFx1MDE1MFxcdTAxNTJcXHUwMTU0XFx1MDE1NlxcdTAxNThcXHUwMTVBXFx1MDE1Q1xcdTAxNUVcXHUwMTYwXFx1MDE2MlxcdTAxNjRcXHUwMTY2XFx1MDE2OFxcdTAxNkFcXHUwMTZDXFx1MDE2RVxcdTAxNzBcXHUwMTcyXFx1MDE3NFxcdTAxNzZcXHUwMTc4XFx1MDE3OVxcdTAxN0JcXHUwMTdEXFx1MDE4MVxcdTAxODJcXHUwMTg0XFx1MDE4NlxcdTAxODdcXHUwMTg5LVxcdTAxOEJcXHUwMThFLVxcdTAxOTFcXHUwMTkzXFx1MDE5NFxcdTAxOTYtXFx1MDE5OFxcdTAxOUNcXHUwMTlEXFx1MDE5RlxcdTAxQTBcXHUwMUEyXFx1MDFBNFxcdTAxQTZcXHUwMUE3XFx1MDFBOVxcdTAxQUNcXHUwMUFFXFx1MDFBRlxcdTAxQjEtXFx1MDFCM1xcdTAxQjVcXHUwMUI3XFx1MDFCOFxcdTAxQkNcXHUwMUM0XFx1MDFDN1xcdTAxQ0FcXHUwMUNEXFx1MDFDRlxcdTAxRDFcXHUwMUQzXFx1MDFENVxcdTAxRDdcXHUwMUQ5XFx1MDFEQlxcdTAxREVcXHUwMUUwXFx1MDFFMlxcdTAxRTRcXHUwMUU2XFx1MDFFOFxcdTAxRUFcXHUwMUVDXFx1MDFFRVxcdTAxRjFcXHUwMUY0XFx1MDFGNi1cXHUwMUY4XFx1MDFGQVxcdTAxRkNcXHUwMUZFXFx1MDIwMFxcdTAyMDJcXHUwMjA0XFx1MDIwNlxcdTAyMDhcXHUwMjBBXFx1MDIwQ1xcdTAyMEVcXHUwMjEwXFx1MDIxMlxcdTAyMTRcXHUwMjE2XFx1MDIxOFxcdTAyMUFcXHUwMjFDXFx1MDIxRVxcdTAyMjBcXHUwMjIyXFx1MDIyNFxcdTAyMjZcXHUwMjI4XFx1MDIyQVxcdTAyMkNcXHUwMjJFXFx1MDIzMFxcdTAyMzJcXHUwMjNBXFx1MDIzQlxcdTAyM0RcXHUwMjNFXFx1MDI0MVxcdTAyNDMtXFx1MDI0NlxcdTAyNDhcXHUwMjRBXFx1MDI0Q1xcdTAyNEVcXHUwMzcwXFx1MDM3MlxcdTAzNzZcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDM4RlxcdTAzOTEtXFx1MDNBMVxcdTAzQTMtXFx1MDNBQlxcdTAzQ0ZcXHUwM0QyLVxcdTAzRDRcXHUwM0Q4XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTJcXHUwM0U0XFx1MDNFNlxcdTAzRThcXHUwM0VBXFx1MDNFQ1xcdTAzRUVcXHUwM0Y0XFx1MDNGN1xcdTAzRjlcXHUwM0ZBXFx1MDNGRC1cXHUwNDJGXFx1MDQ2MFxcdTA0NjJcXHUwNDY0XFx1MDQ2NlxcdTA0NjhcXHUwNDZBXFx1MDQ2Q1xcdTA0NkVcXHUwNDcwXFx1MDQ3MlxcdTA0NzRcXHUwNDc2XFx1MDQ3OFxcdTA0N0FcXHUwNDdDXFx1MDQ3RVxcdTA0ODBcXHUwNDhBXFx1MDQ4Q1xcdTA0OEVcXHUwNDkwXFx1MDQ5MlxcdTA0OTRcXHUwNDk2XFx1MDQ5OFxcdTA0OUFcXHUwNDlDXFx1MDQ5RVxcdTA0QTBcXHUwNEEyXFx1MDRBNFxcdTA0QTZcXHUwNEE4XFx1MDRBQVxcdTA0QUNcXHUwNEFFXFx1MDRCMFxcdTA0QjJcXHUwNEI0XFx1MDRCNlxcdTA0QjhcXHUwNEJBXFx1MDRCQ1xcdTA0QkVcXHUwNEMwXFx1MDRDMVxcdTA0QzNcXHUwNEM1XFx1MDRDN1xcdTA0QzlcXHUwNENCXFx1MDRDRFxcdTA0RDBcXHUwNEQyXFx1MDRENFxcdTA0RDZcXHUwNEQ4XFx1MDREQVxcdTA0RENcXHUwNERFXFx1MDRFMFxcdTA0RTJcXHUwNEU0XFx1MDRFNlxcdTA0RThcXHUwNEVBXFx1MDRFQ1xcdTA0RUVcXHUwNEYwXFx1MDRGMlxcdTA0RjRcXHUwNEY2XFx1MDRGOFxcdTA0RkFcXHUwNEZDXFx1MDRGRVxcdTA1MDBcXHUwNTAyXFx1MDUwNFxcdTA1MDZcXHUwNTA4XFx1MDUwQVxcdTA1MENcXHUwNTBFXFx1MDUxMFxcdTA1MTJcXHUwNTE0XFx1MDUxNlxcdTA1MThcXHUwNTFBXFx1MDUxQ1xcdTA1MUVcXHUwNTIwXFx1MDUyMlxcdTA1MjRcXHUwNTI2XFx1MDUyOFxcdTA1MkFcXHUwNTJDXFx1MDUyRVxcdTA1MzEtXFx1MDU1NlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTNBMC1cXHUxM0Y1XFx1MUUwMFxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTFFMDhcXHUxRTBBXFx1MUUwQ1xcdTFFMEVcXHUxRTEwXFx1MUUxMlxcdTFFMTRcXHUxRTE2XFx1MUUxOFxcdTFFMUFcXHUxRTFDXFx1MUUxRVxcdTFFMjBcXHUxRTIyXFx1MUUyNFxcdTFFMjZcXHUxRTI4XFx1MUUyQVxcdTFFMkNcXHUxRTJFXFx1MUUzMFxcdTFFMzJcXHUxRTM0XFx1MUUzNlxcdTFFMzhcXHUxRTNBXFx1MUUzQ1xcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTFFNDRcXHUxRTQ2XFx1MUU0OFxcdTFFNEFcXHUxRTRDXFx1MUU0RVxcdTFFNTBcXHUxRTUyXFx1MUU1NFxcdTFFNTZcXHUxRTU4XFx1MUU1QVxcdTFFNUNcXHUxRTVFXFx1MUU2MFxcdTFFNjJcXHUxRTY0XFx1MUU2NlxcdTFFNjhcXHUxRTZBXFx1MUU2Q1xcdTFFNkVcXHUxRTcwXFx1MUU3MlxcdTFFNzRcXHUxRTc2XFx1MUU3OFxcdTFFN0FcXHUxRTdDXFx1MUU3RVxcdTFFODBcXHUxRTgyXFx1MUU4NFxcdTFFODZcXHUxRTg4XFx1MUU4QVxcdTFFOENcXHUxRThFXFx1MUU5MFxcdTFFOTJcXHUxRTk0XFx1MUU5RVxcdTFFQTBcXHUxRUEyXFx1MUVBNFxcdTFFQTZcXHUxRUE4XFx1MUVBQVxcdTFFQUNcXHUxRUFFXFx1MUVCMFxcdTFFQjJcXHUxRUI0XFx1MUVCNlxcdTFFQjhcXHUxRUJBXFx1MUVCQ1xcdTFFQkVcXHUxRUMwXFx1MUVDMlxcdTFFQzRcXHUxRUM2XFx1MUVDOFxcdTFFQ0FcXHUxRUNDXFx1MUVDRVxcdTFFRDBcXHUxRUQyXFx1MUVENFxcdTFFRDZcXHUxRUQ4XFx1MUVEQVxcdTFFRENcXHUxRURFXFx1MUVFMFxcdTFFRTJcXHUxRUU0XFx1MUVFNlxcdTFFRThcXHUxRUVBXFx1MUVFQ1xcdTFFRUVcXHUxRUYwXFx1MUVGMlxcdTFFRjRcXHUxRUY2XFx1MUVGOFxcdTFFRkFcXHUxRUZDXFx1MUVGRVxcdTFGMDgtXFx1MUYwRlxcdTFGMTgtXFx1MUYxRFxcdTFGMjgtXFx1MUYyRlxcdTFGMzgtXFx1MUYzRlxcdTFGNDgtXFx1MUY0RFxcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUZcXHUxRjY4LVxcdTFGNkZcXHUxRkI4LVxcdTFGQkJcXHUxRkM4LVxcdTFGQ0JcXHUxRkQ4LVxcdTFGREJcXHUxRkU4LVxcdTFGRUNcXHUxRkY4LVxcdTFGRkJcXHUyMTAyXFx1MjEwN1xcdTIxMEItXFx1MjEwRFxcdTIxMTAtXFx1MjExMlxcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTMwLVxcdTIxMzNcXHUyMTNFXFx1MjEzRlxcdTIxNDVcXHUyMTgzXFx1MkMwMC1cXHUyQzJFXFx1MkM2MFxcdTJDNjItXFx1MkM2NFxcdTJDNjdcXHUyQzY5XFx1MkM2QlxcdTJDNkQtXFx1MkM3MFxcdTJDNzJcXHUyQzc1XFx1MkM3RS1cXHUyQzgwXFx1MkM4MlxcdTJDODRcXHUyQzg2XFx1MkM4OFxcdTJDOEFcXHUyQzhDXFx1MkM4RVxcdTJDOTBcXHUyQzkyXFx1MkM5NFxcdTJDOTZcXHUyQzk4XFx1MkM5QVxcdTJDOUNcXHUyQzlFXFx1MkNBMFxcdTJDQTJcXHUyQ0E0XFx1MkNBNlxcdTJDQThcXHUyQ0FBXFx1MkNBQ1xcdTJDQUVcXHUyQ0IwXFx1MkNCMlxcdTJDQjRcXHUyQ0I2XFx1MkNCOFxcdTJDQkFcXHUyQ0JDXFx1MkNCRVxcdTJDQzBcXHUyQ0MyXFx1MkNDNFxcdTJDQzZcXHUyQ0M4XFx1MkNDQVxcdTJDQ0NcXHUyQ0NFXFx1MkNEMFxcdTJDRDJcXHUyQ0Q0XFx1MkNENlxcdTJDRDhcXHUyQ0RBXFx1MkNEQ1xcdTJDREVcXHUyQ0UwXFx1MkNFMlxcdTJDRUJcXHUyQ0VEXFx1MkNGMlxcdUE2NDBcXHVBNjQyXFx1QTY0NFxcdUE2NDZcXHVBNjQ4XFx1QTY0QVxcdUE2NENcXHVBNjRFXFx1QTY1MFxcdUE2NTJcXHVBNjU0XFx1QTY1NlxcdUE2NThcXHVBNjVBXFx1QTY1Q1xcdUE2NUVcXHVBNjYwXFx1QTY2MlxcdUE2NjRcXHVBNjY2XFx1QTY2OFxcdUE2NkFcXHVBNjZDXFx1QTY4MFxcdUE2ODJcXHVBNjg0XFx1QTY4NlxcdUE2ODhcXHVBNjhBXFx1QTY4Q1xcdUE2OEVcXHVBNjkwXFx1QTY5MlxcdUE2OTRcXHVBNjk2XFx1QTY5OFxcdUE2OUFcXHVBNzIyXFx1QTcyNFxcdUE3MjZcXHVBNzI4XFx1QTcyQVxcdUE3MkNcXHVBNzJFXFx1QTczMlxcdUE3MzRcXHVBNzM2XFx1QTczOFxcdUE3M0FcXHVBNzNDXFx1QTczRVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3NDZcXHVBNzQ4XFx1QTc0QVxcdUE3NENcXHVBNzRFXFx1QTc1MFxcdUE3NTJcXHVBNzU0XFx1QTc1NlxcdUE3NThcXHVBNzVBXFx1QTc1Q1xcdUE3NUVcXHVBNzYwXFx1QTc2MlxcdUE3NjRcXHVBNzY2XFx1QTc2OFxcdUE3NkFcXHVBNzZDXFx1QTc2RVxcdUE3NzlcXHVBNzdCXFx1QTc3RFxcdUE3N0VcXHVBNzgwXFx1QTc4MlxcdUE3ODRcXHVBNzg2XFx1QTc4QlxcdUE3OERcXHVBNzkwXFx1QTc5MlxcdUE3OTZcXHVBNzk4XFx1QTc5QVxcdUE3OUNcXHVBNzlFXFx1QTdBMFxcdUE3QTJcXHVBN0E0XFx1QTdBNlxcdUE3QThcXHVBN0FBLVxcdUE3QURcXHVBN0IwLVxcdUE3QjRcXHVBN0I2XFx1RkYyMS1cXHVGRjNBXVthLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MS1cXHUwNTg3XFx1MTNGOC1cXHUxM0ZEXFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QjVcXHVBN0I3XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGNDEtXFx1RkY1QV0pL2dcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLy8gVW5kZXIgXCJhcGk6XCIgYWxsIGZ1bmN0aW9ucyBtdXN0IHRha2UgYXBpIGFzIHRoZWlyIDFzdCBwYXJhbWV0ZXJcbiAgYXBpOiB7XG4gICAgY3JlYXRlVHJhbnNhY3Rpb246IGNyZWF0ZVRyYW5zYWN0aW9uXG4gIH1cblxuICAvKipcbiAgICBAdHlwZWRlZiB7b2JqZWN0fSBoZWFkZXJzXG4gICAgQHByb3BlcnR5IHtudW1iZXJ9IHJlZl9ibG9ja19udW0gLSBMYXN0IGlycmV2ZXJzaWJsZSBibG9jayBudW1iZXIuICBUaGVcbiAgICBiaXQtd2lzZSBBTkQgb3BlcmF0aW9uIGlzIHVzZWQgdG8ga2VlcCB0aGlzIHZhbHVlIHdpdGggdGhlIHNpemUgb2YgYSBVaW50MTZcbiAgICBzaXplIChhIGJsb2NrIG51bSBpbiB0aGUgbGFzdCAyXjE2IGJsb2NrcykuICBFeGFtcGxlOlxuICAgIGBnZXRfaW5mby5sYXN0X2lycmV2ZXJzaWJsZV9ibG9ja19udW0gJiAweEZGRkZgXG4gIFxuICAgIEBwcm9wZXJ0eSB7bnVtYmVyfSByZWZfYmxvY2tfcHJlZml4IC0gZ2V0X2Jsb2NrLnJlZl9ibG9ja19wcmVmaXggLi4gVGhpcyBpc1xuICAgIGEgMzIgYml0IG51bWJlciBpZGVudGlmaWVyIChpZGVudGlmeSB0aGUgc2FtZSBibG9jayByZWZlcmVuY2VkIGluIGByZWZfYmxvY2tfbnVtYCkuXG4gIFxuICAgIEBwcm9wZXJ0eSB7c3RyaW5nfSBleHBpcmF0aW9uIC0gVGhpcyBpcyBiYXNlZCBvbiB0aGUgaGVhZCBibG9jayB0aW1lIGZyb20gdGhlXG4gICAgYmxvY2tjaGFpbi4gIEJlIGNhcmVmdWwgdG8gc3VmZml4IGEgWiBpZiByZXF1aXJlZCAoYXMgd2l0aCBGaXJlZm94IGFuZCBKYXZhU2NyaXB0KVxuICAgIHRvIGVuc3VyZSB0aGlzIGRhdGUgc3RyaW5nIGlzIGludGVycHJldGVkIGFzIFp1bHUgdGltZS5cbiAgXG4gICAgRXhhbXBsZTogYG5ldyBEYXRlKG5ldyBEYXRlKGluZm8uaGVhZF9ibG9ja190aW1lICsgJ1onKS5nZXRUaW1lKCkgKyBleHBpcmVJblNlY29uZHMgKiAxMDAwKS50b0lTT1N0cmluZygpLnNwbGl0KCcuJylbMF1gXG4gICovXG5cbiAgLyoqXG4gICAgQ29uc3VsdCB0aGUgYmxvY2tjaGFpbiBhbmQgZ2F0aGVyIGluZm9ybWF0aW9uIGZvciB1c2UgaW4gYSBuZXcgc2lnbmVkIHRyYW5zYWN0aW9uLlxuICAgIEZvciBUcmFuc2FjdGlvbiBhcyBQcm9vZiBvZiBTdGFrZSAoVGFQT1MpLCAzMiBiaXRzIG9mIGEgcmVjZW50IGJsb2NrIElkIGlzIGluY2x1ZGVkLlxuICAgIEJlY2F1c2UgYWxsIHRyYW5zYWN0aW9ucyB1c2UgVGFQT1MsIHRoaXMgc29sdmVzIHRoZSBub3RoaW5nIGF0IHN0YWtlIGF0dGFjay5cbiAgXG4gICAgVGhpcyBpcyB1c3VhbGx5IGNhbGxlZCBmb3IgZXZlcnkgdHJhbnNhY3Rpb24gb3IgbWF5YmUgY2FjaGVkIHBlciBibG9jay4gIEFsdGhvdWdoXG4gICAgbG9uZ2VyIGNhY2hpbmcgaXMgcG9zc2libGUsIGEgbG9uZ2VyIGNhY2hlIHRpbWUgaW5jcmVhc2VzIHRoZSByaXNrIG9mIGFcbiAgICB0cmFuc2FjdGlvbiByZXBsYXkgYXR0YWNrLlxuICBcbiAgICBAYXJnIHtudW1iZXJ9IGV4cGlyZUluU2Vjb25kcyAtIEhvdyBtYW55IHNlY29uZHMgdW50aWwgZXhwaXJhdGlvblxuICAgIEBhcmcge2Z1bmN0aW9uKGVycm9yLCBoZWFkZXJzKX0gY2FsbGJhY2sge0BsaW5rIGhlYWRlcnN9XG4gICAgQHNlZSB7aGVhZGVyc31cbiAgICBAZXhhbXBsZSBlb3MuY3JlYXRlVHJhbnNhY3Rpb24oNjAsIChlcnJvciwgaGVhZGVycykgPT4ge30pXG4gICovXG59O2Z1bmN0aW9uIGNyZWF0ZVRyYW5zYWN0aW9uKGFwaSkge1xuICB2YXIgZXhwaXJlSW5TZWNvbmRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA2MDtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzJdO1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYWxsYmFjayBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBhcGkuZ2V0SW5mbyhjaGVja0Vycm9yKGNhbGxiYWNrLCBmdW5jdGlvbiAoaW5mbykge1xuICAgIHZhciBjaGFpbkRhdGUgPSBuZXcgRGF0ZShpbmZvLmhlYWRfYmxvY2tfdGltZSArICdaJyk7XG5cbiAgICBhcGkuZ2V0QmxvY2soaW5mby5sYXN0X2lycmV2ZXJzaWJsZV9ibG9ja19udW0sIGNoZWNrRXJyb3IoY2FsbGJhY2ssIGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIGV4cGlyYXRpb24gPSBuZXcgRGF0ZShjaGFpbkRhdGUuZ2V0VGltZSgpICsgZXhwaXJlSW5TZWNvbmRzICogMTAwMCk7XG5cbiAgICAgIHZhciByZWZfYmxvY2tfbnVtID0gaW5mby5sYXN0X2lycmV2ZXJzaWJsZV9ibG9ja19udW0gJiAweEZGRkY7XG5cbiAgICAgIHZhciBoZWFkZXJzID0ge1xuICAgICAgICBleHBpcmF0aW9uOiBleHBpcmF0aW9uLnRvSVNPU3RyaW5nKCkuc3BsaXQoJy4nKVswXSxcbiAgICAgICAgcmVmX2Jsb2NrX251bTogcmVmX2Jsb2NrX251bSxcbiAgICAgICAgcmVmX2Jsb2NrX3ByZWZpeDogYmxvY2sucmVmX2Jsb2NrX3ByZWZpeCxcbiAgICAgICAgbWF4X25ldF91c2FnZV93b3JkczogMCxcbiAgICAgICAgbWF4X2NwdV91c2FnZV9tczogMCxcbiAgICAgICAgZGVsYXlfc2VjOiAwLFxuICAgICAgICBjb250ZXh0X2ZyZWVfYWN0aW9uczogW10sXG4gICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICBzaWduYXR1cmVzOiBbXSxcbiAgICAgICAgdHJhbnNhY3Rpb25fZXh0ZW5zaW9uczogW11cbiAgICAgIH07XG4gICAgICBjYWxsYmFjayhudWxsLCBoZWFkZXJzKTtcbiAgICB9KSk7XG4gIH0pKTtcbn1cblxudmFyIGNoZWNrRXJyb3IgPSBmdW5jdGlvbiBjaGVja0Vycm9yKHBhcmVudEVyciwgcGFycmVudFJlcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHBhcmVudEVycihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnJlbnRSZXMocmVzdWx0KTtcbiAgICB9XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZScpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmlzSXRlcmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8gPSBPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIHx8IEl0ZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShjbGFzc29mKE8pKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvcicpO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0ID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyRm4gPSBnZXQoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgcmV0dXJuIGFuT2JqZWN0KGl0ZXJGbi5jYWxsKGl0KSk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBTdHJ1Y3RzID0gcmVxdWlyZSgnLi9zdHJ1Y3RzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWJpQ2FjaGU7XG5cbmZ1bmN0aW9uIEFiaUNhY2hlKG5ldHdvcmssIGNvbmZpZykge1xuICBjb25maWcuYWJpQ2FjaGUgPSB7XG4gICAgYWJpQXN5bmM6IGFiaUFzeW5jLFxuICAgIGFiaTogYWJpXG5cbiAgICAvLyBIZWxwIChvciBcInVzYWdlXCIpIG5lZWRzIHtkZWZhdWx0czogdHJ1ZX1cbiAgfTt2YXIgYWJpQ2FjaGVDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCB7IGRlZmF1bHRzOiB0cnVlIH0sIGNvbmZpZyk7XG5cbiAgdmFyIGNhY2hlID0ge307XG5cbiAgLyoqXG4gICAgQXN5bmNocm9ub3VzbHkgZmV0Y2ggYW5kIGNhY2hlIGFuIEFCSSBmcm9tIHRoZSBibG9ja2NoYWluLlxuICAgICBAYXJnIHtzdHJpbmd9IGFjY291bnQgLSBibG9ja2NoYWluIGFjY291bnQgd2l0aCBkZXBsb3llZCBjb250cmFjdFxuICAgIEBhcmcge2Jvb2xlYW59IFtmb3JjZSA9IHRydWVdIGZhbHNlIHdoZW4gQUJJIGlzIGltbXV0YWJsZS5cbiAgKi9cbiAgZnVuY3Rpb24gYWJpQXN5bmMoYWNjb3VudCkge1xuICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgYWNjb3VudCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhY2NvdW50KSwgJ3N0cmluZycsICdhY2NvdW50IHN0cmluZyByZXF1aXJlZCcpO1xuXG4gICAgaWYgKGZvcmNlID09IGZhbHNlICYmIGNhY2hlW2FjY291bnRdICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FjaGVbYWNjb3VudF0pO1xuICAgIH1cblxuICAgIGlmIChuZXR3b3JrID09IG51bGwpIHtcbiAgICAgIHZhciBfYWJpID0gY2FjaGVbYWNjb3VudF07XG4gICAgICBhc3NlcnQoX2FiaSwgJ01pc3NpbmcgQUJJIGZvciBhY2NvdW50OiAnICsgYWNjb3VudCArICcsIHByb3ZpZGUgaHR0cEVuZHBvaW50IG9yIGFkZCB0byBhYmlDYWNoZScpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfYWJpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV0d29yay5nZXRBYmkoYWNjb3VudCkudGhlbihmdW5jdGlvbiAoY29kZSkge1xuICAgICAgYXNzZXJ0KGNvZGUuYWJpLCAnTWlzc2luZyBBQkkgZm9yIGFjY291bnQ6ICcgKyBhY2NvdW50KTtcbiAgICAgIHJldHVybiBhYmkoYWNjb3VudCwgY29kZS5hYmkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAgU3luY2hyb25vdXNseSBzZXQgb3IgZmV0Y2ggYW4gQUJJIGZyb20gbG9jYWwgY2FjaGUuXG4gICAgIEBhcmcge3N0cmluZ30gYWNjb3VudCAtIGJsb2NrY2hhaW4gYWNjb3VudCB3aXRoIGRlcGxveWVkIGNvbnRyYWN0XG4gICAgQGFyZyB7c3RyaW5nfSBbYWJpXSAtIGJsb2NrY2hhaW4gQUJJIGpzb24gZGF0YS4gIE51bGwgdG8gZmV0Y2ggb3Igbm9uLW51bGwgdG8gY2FjaGVcbiAgKi9cbiAgZnVuY3Rpb24gYWJpKGFjY291bnQsIGFiaSkge1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgYWNjb3VudCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhY2NvdW50KSwgJ3N0cmluZycsICdhY2NvdW50IHN0cmluZyByZXF1aXJlZCcpO1xuICAgIGlmIChhYmkpIHtcbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgYWJpID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFiaSksICdvYmplY3QnLCAnYWJpJyk7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGFiaSkpIHtcbiAgICAgICAgYWJpID0gSlNPTi5wYXJzZShhYmkpO1xuICAgICAgfVxuICAgICAgdmFyIGZjU2NoZW1hID0gYWJpVG9GY1NjaGVtYShhYmksIGFjY291bnQpO1xuICAgICAgdmFyIHN0cnVjdHMgPSBTdHJ1Y3RzKGFiaUNhY2hlQ29uZmlnLCBmY1NjaGVtYSk7IC8vIHJldHVybnMge3N0cnVjdHMsIHR5cGVzfVxuICAgICAgcmV0dXJuIGNhY2hlW2FjY291bnRdID0gT2JqZWN0LmFzc2lnbih7IGFiaTogYWJpLCBzY2hlbWE6IGZjU2NoZW1hIH0sIHN0cnVjdHMpO1xuICAgIH1cbiAgICB2YXIgYyA9IGNhY2hlW2FjY291bnRdO1xuICAgIGlmIChjID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWJpIFxcJycgKyBhY2NvdW50ICsgJ1xcJyBpcyBub3QgY2FjaGVkJyk7XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgcmV0dXJuIGNvbmZpZy5hYmlDYWNoZTtcbn1cblxuZnVuY3Rpb24gYWJpVG9GY1NjaGVtYShhYmksIGFjY291bnQpIHtcbiAgLy8gY3VzdG9tVHlwZXNcbiAgLy8gRm9yIEZjQnVmZmVyXG4gIHZhciBhYmlTY2hlbWEgPSB7fTtcblxuICAvLyBjb252ZXJ0IGFiaSB0eXBlcyB0byBGY2J1ZmZlciBzY2hlbWFcbiAgaWYgKGFiaS50eXBlcykge1xuICAgIC8vIGFsaWFzZXNcbiAgICBhYmkudHlwZXMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gXCJhY2NvdW50X25hbWVcIiA9IFwibmFtZVwiXG4gICAgICBhYmlTY2hlbWFbZS5uZXdfdHlwZV9uYW1lXSA9IGUudHlwZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhYmkuc3RydWN0cykge1xuICAgIC8vIHRyYW5zYWN0aW9uX2hlYWRlciA9IGZpZWxkc1thY3RvciwgcGVybWlzc2lvbl0gZXh0ZW5kcyBiYXNlIFwidHJhbnNhY3Rpb25cIlxuICAgIGFiaS5zdHJ1Y3RzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBmaWVsZHMgPSB7fTtcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlLmZpZWxkc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgZmllbGQgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIGZpZWxkc1tmaWVsZC5uYW1lXSA9IGZpZWxkLnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhYmlTY2hlbWFbZS5uYW1lXSA9IHsgYmFzZTogZS5iYXNlLCBmaWVsZHM6IGZpZWxkcyB9O1xuICAgICAgaWYgKGUuYmFzZSA9PT0gJycpIHtcbiAgICAgICAgZGVsZXRlIGFiaVNjaGVtYVtlLm5hbWVdLmJhc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWJpLmFjdGlvbnMpIHtcbiAgICAvLyBzZXRwcm9kcyA9IHNldF9wcm9kdWNlcnNcbiAgICBhYmkuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIC8vIEBleGFtcGxlIGFjdGlvbiA9IHtuYW1lOiAnc2V0cHJvZHMnLCB0eXBlOiAnc2V0X3Byb2R1Y2Vycyd9XG4gICAgICB2YXIgdHlwZSA9IGFiaVNjaGVtYVthY3Rpb24udHlwZV07XG4gICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBhYmlTY2hlbWEgdHlwZScsIGFjdGlvbi50eXBlLCBhY2NvdW50KTsgLy8sIGFiaSwgYWJpU2NoZW1hKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZS5hY3Rpb24gPSB7XG4gICAgICAgICAgbmFtZTogYWN0aW9uLm5hbWUsXG4gICAgICAgICAgYWNjb3VudDogYWNjb3VudFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKCdhYmlTY2hlbWEnLCBhYmlTY2hlbWEpO1xuICB9XG5cbiAgcmV0dXJuIGFiaVNjaGVtYTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkVG9BcnJheTIpO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpO1xuXG52YXIgX3JlZ2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2VuZXJhdG9yKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIGVjYyA9IHJlcXVpcmUoJ2Vvc2pzLWVjYycpO1xudmFyIEZjYnVmZmVyID0gcmVxdWlyZSgnZmNidWZmZXInKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZW9zanMtYXBpJyksXG4gICAgcHJvY2Vzc0FyZ3MgPSBfcmVxdWlyZS5wcm9jZXNzQXJncztcblxudmFyIFN0cnVjdHMgPSByZXF1aXJlKCcuL3N0cnVjdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB3cml0ZUFwaUdlbjtcblxudmFyIHNpZ24gPSBlY2Muc2lnbjtcblxuXG5mdW5jdGlvbiB3cml0ZUFwaUdlbihOZXR3b3JrLCBuZXR3b3JrLCBzdHJ1Y3RzLCBjb25maWcsIGFiaXMpIHtcbiAgaWYgKHR5cGVvZiBjb25maWcuY2hhaW5JZCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb25maWcuY2hhaW5JZCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIHZhciB3cml0ZUFwaSA9IFdyaXRlQXBpKE5ldHdvcmssIG5ldHdvcmssIGNvbmZpZywgc3RydWN0cy50cmFuc2FjdGlvbik7XG4gIHZhciByZXNlcnZlRnVuY3Rpb25zID0gbmV3IFNldChbJ3RyYW5zYWN0aW9uJywgJ2NvbnRyYWN0J10pO1xuXG4gIHZhciBtZXJnZSA9IHt9O1xuICAvLyBzZW5kcyB0cmFuc2FjdGlvbnMsIGNhbiBhY3QgYXMgYW4gYWN0aW9uIGNvbGxlY3Rpbmcgd3JhcHBlclxuICBtZXJnZS50cmFuc2FjdGlvbiA9IHdyaXRlQXBpLmdlblRyYW5zYWN0aW9uKHN0cnVjdHMsIG1lcmdlKTtcblxuICAvLyBJbW1lZGlhdGUgc2VuZCBvcGVyYXRpb25zIGF1dG9tYXRpY2FsbHkgY2FsbHMgbWVyZ2UudHJhbnNhY3Rpb25cbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gYWJpc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBhYmkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgZm9yICh2YXIgdHlwZSBpbiBhYmkuc2NoZW1hKSB7XG4gICAgICAgIHZhciB0eXBlU3RydWN0ID0gYWJpLnNjaGVtYVt0eXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3RydWN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIHNraXAgdHlwZXMgbGlrZTsgbmFtZSwgYWNjb3VudF9uYW1lLCBldGMuLlxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB0eXBlU3RydWN0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHR5cGVTdHJ1Y3QpLCAnb2JqZWN0JywgJ2FiaS5zY2hlbWFbdHlwZSA9ICcgKyB0eXBlICsgJ10nKTtcblxuICAgICAgICB2YXIgYWN0aW9uID0gdHlwZVN0cnVjdC5hY3Rpb247XG5cbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gQUJJIHByaXZhdGUgc3RydWN0XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzZXJ2ZUZ1bmN0aW9ucy5oYXMoYWN0aW9uLm5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uZmxpY3RpbmcgQXBpIGZ1bmN0aW9uOiAnICsgdHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHNjaGVtYUZpZWxkcyhhYmkuc2NoZW1hLCB0eXBlKTtcbiAgICAgICAgbWVyZ2VbYWN0aW9uLm5hbWVdID0gd3JpdGVBcGkuZ2VuTWV0aG9kKHR5cGUsIGRlZmluaXRpb24sIG1lcmdlLnRyYW5zYWN0aW9uLCBhY3Rpb24uYWNjb3VudCwgYWN0aW9uLm5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAgSW1tZWRhdGUgc2VuZCBjb250cmFjdCBhY3Rpb25zLlxuICAgICAgIEBleGFtcGxlIGVvcy5jb250cmFjdCgnbXljb250cmFjdCcsIFtvcHRpb25zXSwgW2NhbGxiYWNrXSlcbiAgICAgIEBleGFtcGxlIGVvcy5jb250cmFjdCgnbXljb250cmFjdCcpLnRoZW4obXljb250cmFjdCA9PiBteWNvbnRyYWN0Lm15YWN0aW9uKC4uLikpXG4gICAgKi9cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtZXJnZS5jb250cmFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb2Nlc3NBcmdzID0gcHJvY2Vzc0FyZ3MoYXJncywgWydhY2NvdW50J10sICdjb250cmFjdCcsIG9wdGlvbnNGb3JtYXR0ZXIpLFxuICAgICAgICBwYXJhbXMgPSBfcHJvY2Vzc0FyZ3MucGFyYW1zLFxuICAgICAgICBvcHRpb25zID0gX3Byb2Nlc3NBcmdzLm9wdGlvbnMsXG4gICAgICAgIHJldHVyblByb21pc2UgPSBfcHJvY2Vzc0FyZ3MucmV0dXJuUHJvbWlzZSxcbiAgICAgICAgY2FsbGJhY2sgPSBfcHJvY2Vzc0FyZ3MuY2FsbGJhY2s7XG5cbiAgICB2YXIgYWNjb3VudCA9IHBhcmFtcy5hY2NvdW50O1xuXG4gICAgLy8gc2VuZHMgdHJhbnNhY3Rpb25zIHZpYSBpdHMgb3duIHRyYW5zYWN0aW9uIGZ1bmN0aW9uXG5cbiAgICB3cml0ZUFwaS5nZW5Db250cmFjdEFjdGlvbnMoYWNjb3VudCkudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgY2FsbGJhY2sobnVsbCwgcik7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKHIpIHtcbiAgICAgIGNhbGxiYWNrKHIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJldHVyblByb21pc2U7XG4gIH07XG5cbiAgcmV0dXJuIG1lcmdlO1xufVxuXG5mdW5jdGlvbiBXcml0ZUFwaShOZXR3b3JrLCBuZXR3b3JrLCBjb25maWcsIFRyYW5zYWN0aW9uKSB7XG4gIC8qKlxuICAgIEBhcmcge2FycmF5fSBbYXJncy5jb250cmFjdHNdXG4gICAgQGFyZyB7Y2FsbGJhY2t8b2JqZWN0fSBhcmdzLnRyYW5zYWN0aW9uIHRyID0+IHt0ci50cmFuc2ZlciAuLiB9XG4gICAgQGFyZyB7b2JqZWN0fSBbYXJncy5vcHRpb25zXVxuICAgIEBhcmcge2Z1bmN0aW9ufSBbYXJncy5jYWxsYmFja11cbiAgKi9cbiAgdmFyIGdlblRyYW5zYWN0aW9uID0gZnVuY3Rpb24gZ2VuVHJhbnNhY3Rpb24oc3RydWN0cywgbWVyZ2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRyYWN0cywgb3B0aW9ucywgY2FsbGJhY2ssIGlzQ29udHJhY3RBcnJheSwgYWNjb3VudHMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yLCBfZGlkSXRlcmF0b3JFcnJvcjIsIF9pdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yMiwgX3N0ZXAyLCBhY3Rpb24sIGFiaVByb21pc2VzLCBjYWNoZWRDb2RlLCBhcmcsIGNvbnRyYWN0UHJvbWlzZXMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zLCBfZGlkSXRlcmF0b3JFcnJvcjMsIF9pdGVyYXRvckVycm9yMywgX2l0ZXJhdG9yMywgX3N0ZXAzLCBhY2NvdW50O1xuXG4gICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBjb250cmFjdHMgPSB2b2lkIDAsIG9wdGlvbnMgPSB2b2lkIDAsIGNhbGxiYWNrID0gdm9pZCAwO1xuXG5cbiAgICAgICAgICAgICAgaWYgKGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gY2FsbGJhY2sgbWF5IGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpc0NvbnRyYWN0QXJyYXkgPSBpc1N0cmluZ0FycmF5KGFyZ3NbMF0pO1xuXG4gICAgICAgICAgICAgIGlmICghaXNDb250cmFjdEFycmF5KSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb250cmFjdHMgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICBhcmdzID0gYXJncy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM5O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29udHJhY3RzID0gW2FyZ3NbMF1dO1xuICAgICAgICAgICAgICBhcmdzID0gYXJncy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM5O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgaWYgKCEoKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFyZ3NbMF0pID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGFyZ3NbMF0uYWN0aW9ucykpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gZnVsbCB0cmFuc2FjdGlvbiwgbG9va3VwIEFCSXMgdXNlZCBieSBlYWNoIGFjdGlvblxuICAgICAgICAgICAgICBhY2NvdW50cyA9IG5ldyBTZXQoKTsgLy8gbWFrZSBhIHVuaXF1ZSBsaXN0XG5cbiAgICAgICAgICAgICAgLy8gVE9ETzogQWRkIGFyZ3NbMF0uY29udGV4dF9mcmVlX2FjdGlvbnMgdG8gYWNjb3VudHMgdG9vP1xuXG4gICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE4O1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIgPSBhcmdzWzBdLmFjdGlvbnNbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgYWNjb3VudHMuYWRkKGFjdGlvbi5hY2NvdW50KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNjtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyMjtcbiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsnY2F0Y2gnXSgxOCk7XG4gICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IF9jb250ZXh0LnQwO1xuXG4gICAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjY7XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNztcblxuICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjk7XG5cbiAgICAgICAgICAgICAgaWYgKCFfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG5cbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMjkpO1xuXG4gICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDI2KTtcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgYWJpUHJvbWlzZXMgPSBbXTtcblxuICAgICAgICAgICAgICAvLyBFb3MgY29udHJhY3Qgb3BlcmF0aW9ucyBhcmUgY2FjaGVkIChlZmZpY2llbnQgYW5kIG9mZmxpbmUgdHJhbnNhY3Rpb25zKVxuXG4gICAgICAgICAgICAgIGNhY2hlZENvZGUgPSBuZXcgU2V0KFsnZW9zaW8nLCAnZW9zaW8udG9rZW4nLCAnZW9zaW8ubnVsbCddKTtcblxuICAgICAgICAgICAgICBhY2NvdW50cy5mb3JFYWNoKGZ1bmN0aW9uIChhY2NvdW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZWRDb2RlLmhhcyhhY2NvdW50KSkge1xuICAgICAgICAgICAgICAgICAgYWJpUHJvbWlzZXMucHVzaChjb25maWcuYWJpQ2FjaGUuYWJpQXN5bmMoYWNjb3VudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOTtcbiAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hd3JhcChQcm9taXNlLmFsbChhYmlQcm9taXNlcykpO1xuXG4gICAgICAgICAgICBjYXNlIDM5OlxuXG4gICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDEgJiYgKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwoYXJncy5sZW5ndGgsIDEsICd0cmFuc2FjdGlvbiBhcmdzOiBjb250cmFjdHM8c3RyaW5nfGFycmF5PiwgdHJhbnNhY3Rpb248Y2FsbGJhY2t8b2JqZWN0PiwgW29wdGlvbnNdLCBbY2FsbGJhY2tdJyk7XG4gICAgICAgICAgICAgIGFyZyA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgaWYgKCFjb250cmFjdHMpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBhc3NlcnQoIWNhbGxiYWNrLCAnY2FsbGJhY2sgd2l0aCBjb250cmFjdHMgYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKCdmdW5jdGlvbicsIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYXJnKSwgJ3Byb3ZpZGUgZnVuY3Rpb24gY2FsbGJhY2sgZm9sbG93aW5nIGNvbnRyYWN0cyBhcnJheSBwYXJhbWV0ZXInKTtcblxuICAgICAgICAgICAgICBjb250cmFjdFByb21pc2VzID0gW107XG4gICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDUwO1xuXG4gICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMyA9IGNvbnRyYWN0c1tTeW1ib2wuaXRlcmF0b3JdKCk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50ID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0dXAgd3JhcHBlciBmdW5jdGlvbnMgdG8gY29sbGVjdCBjb250cmFjdCBhcGkgY2FsbHNcbiAgICAgICAgICAgICAgICBjb250cmFjdFByb21pc2VzLnB1c2goZ2VuQ29udHJhY3RBY3Rpb25zKGFjY291bnQsIG1lcmdlLnRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTg7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU0OlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTQ7XG4gICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbJ2NhdGNoJ10oNTApO1xuICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBfY29udGV4dC50MTtcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDU4O1xuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTk7XG5cbiAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSA2MTpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDYxO1xuXG4gICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDYxKTtcblxuICAgICAgICAgICAgY2FzZSA2NTpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg1OCk7XG5cbiAgICAgICAgICAgIGNhc2UgNjY6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIFByb21pc2UuYWxsKGNvbnRyYWN0UHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKGFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VzID0ge307XG4gICAgICAgICAgICAgICAgYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtLCBpKSB7XG4gICAgICAgICAgICAgICAgICBtZXJnZXNbY29udHJhY3RzW2ldXSA9IG07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtID0gaXNDb250cmFjdEFycmF5ID8gbWVyZ2VzIDogbWVyZ2VzW2NvbnRyYWN0c1swXV07XG4gICAgICAgICAgICAgICAgLy8gY29sbGVjdCBhbmQgaW52b2tlIGFwaSBjYWxsc1xuICAgICAgICAgICAgICAgIHJldHVybiB0ck1lc3NhZ2VDb2xsZWN0b3IoYXJnLCBvcHRpb25zLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgY2FzZSA2NzpcbiAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCB0ck1lc3NhZ2VDb2xsZWN0b3IoYXJnLCBvcHRpb25zLCBtZXJnZSkpO1xuXG4gICAgICAgICAgICBjYXNlIDY5OlxuICAgICAgICAgICAgICBpZiAoISgodHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhcmcpKSA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDcxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgdHJhbnNhY3Rpb24oYXJnLCBvcHRpb25zLCBjYWxsYmFjaykpO1xuXG4gICAgICAgICAgICBjYXNlIDcxOlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IHRyYW5zYWN0aW9uIGFyZ3VtZW50IHVucmVjb2duaXplZCcsIGFyZyk7XG5cbiAgICAgICAgICAgIGNhc2UgNzI6XG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCwgdGhpcywgW1sxOCwgMjIsIDI2LCAzNF0sIFsyNywsIDI5LCAzM10sIFs1MCwgNTQsIDU4LCA2Nl0sIFs1OSwsIDYxLCA2NV1dKTtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdlbkNvbnRyYWN0QWN0aW9ucyhhY2NvdW50KSB7XG4gICAgdmFyIHRyYW5zYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgcmV0dXJuIGNvbmZpZy5hYmlDYWNoZS5hYmlBc3luYyhhY2NvdW50KS50aGVuKGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkoY2FjaGUuYWJpLmFjdGlvbnMpICYmIGNhY2hlLmFiaS5hY3Rpb25zLmxlbmd0aCwgJ05vIGFjdGlvbnMnKTtcblxuICAgICAgdmFyIGNvbnRyYWN0TWVyZ2UgPSB7fTtcbiAgICAgIGNvbnRyYWN0TWVyZ2UudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbiA/IHRyYW5zYWN0aW9uIDogZ2VuVHJhbnNhY3Rpb24oY2FjaGUuc3RydWN0cywgY29udHJhY3RNZXJnZSk7XG5cbiAgICAgIGNhY2hlLmFiaS5hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgICAgICB0eXBlID0gX3JlZi50eXBlO1xuXG4gICAgICAgIHZhciBkZWZpbml0aW9uID0gc2NoZW1hRmllbGRzKGNhY2hlLnNjaGVtYSwgdHlwZSk7XG4gICAgICAgIGNvbnRyYWN0TWVyZ2VbbmFtZV0gPSBnZW5NZXRob2QodHlwZSwgZGVmaW5pdGlvbiwgY29udHJhY3RNZXJnZS50cmFuc2FjdGlvbiwgYWNjb3VudCwgbmFtZSk7XG4gICAgICB9KTtcblxuICAgICAgY29udHJhY3RNZXJnZS5mYyA9IGNhY2hlO1xuXG4gICAgICByZXR1cm4gY29udHJhY3RNZXJnZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbk1ldGhvZCh0eXBlLCBkZWZpbml0aW9uLCB0cmFuc2FjdGlvbkFyZykge1xuICAgIHZhciBhY2NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnZW9zaW8udG9rZW4nO1xuICAgIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0eXBlO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHVzYWdlKHsgbmFtZTogbmFtZSwgdHlwZTogdHlwZSB9LCBkZWZpbml0aW9uLCBOZXR3b3JrLCBhY2NvdW50LCBjb25maWcpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTcGVjaWFsIGNhc2UgbGlrZSBtdWx0aS1hY3Rpb24gdHJhbnNhY3Rpb25zIHdoZXJlIHRoaXMgbGliIG5lZWRzXG4gICAgICAvLyB0byBiZSBzdXJlIHRoZSBicm9hZGNhc3QgaXMgb2ZmLlxuICAgICAgdmFyIG9wdGlvbk92ZXJyaWRlcyA9IHt9O1xuICAgICAgdmFyIGxhc3RBcmcgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoKHR5cGVvZiBsYXN0QXJnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGxhc3RBcmcpKSA9PT0gJ29iamVjdCcgJiYgKDAsIF90eXBlb2YzLmRlZmF1bHQpKGxhc3RBcmcuX19vcHRpb25PdmVycmlkZXMpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBwb3AoKSBmaXhlcyB0aGUgYXJncy5sZW5ndGhcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25PdmVycmlkZXMsIGFyZ3MucG9wKCkuX19vcHRpb25PdmVycmlkZXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvY2Vzc2VkQXJncyA9IHByb2Nlc3NBcmdzKGFyZ3MsIE9iamVjdC5rZXlzKGRlZmluaXRpb24pLCB0eXBlLCBvcHRpb25zRm9ybWF0dGVyKTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBwcm9jZXNzZWRBcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgcGFyYW1zID0gcHJvY2Vzc2VkQXJncy5wYXJhbXMsXG4gICAgICAgICAgcmV0dXJuUHJvbWlzZSA9IHByb2Nlc3NlZEFyZ3MucmV0dXJuUHJvbWlzZSxcbiAgICAgICAgICBjYWxsYmFjayA9IHByb2Nlc3NlZEFyZ3MuY2FsbGJhY2s7XG5cblxuICAgICAgdmFyIG9wdGlvbkRlZmF1bHRzID0geyAvLyBGcm9tIGNvbmZpZyBhbmQgY29uZmlnRGVmYXVsdHNcbiAgICAgICAgYnJvYWRjYXN0OiBjb25maWcuYnJvYWRjYXN0LFxuICAgICAgICBzaWduOiBjb25maWcuc2lnblxuXG4gICAgICAgIC8vIGludGVybmFsIG9wdGlvbnMgKGV4OiBtdWx0aS1hY3Rpb24gdHJhbnNhY3Rpb24pXG4gICAgICB9O29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25EZWZhdWx0cywgb3B0aW9ucywgb3B0aW9uT3ZlcnJpZGVzKTtcbiAgICAgIGlmIChvcHRpb25PdmVycmlkZXMubm9DYWxsYmFjayAmJiAhcmV0dXJuUHJvbWlzZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIGR1cmluZyBhIHRyYW5zYWN0aW9uIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdXRob3JpemF0aW9uID0gW107XG4gICAgICB2YXIgcHJvdmlkZWRBdXRoID0gb3B0aW9ucy5hdXRob3JpemF0aW9uID8gb3B0aW9ucy5hdXRob3JpemF0aW9uIDogY29uZmlnLmF1dGhvcml6YXRpb247XG4gICAgICB2YXIgYWRkRGVmYXVsdEF1dGhzID0gcHJvdmlkZWRBdXRoID09IG51bGw7XG5cbiAgICAgIC8vIE9mdGVuIGlmIHRoZSBmaXJzdCBmaWVsZCBpbiBhbiBhY3Rpb24gaXMgYW4gYWNjb3VudCBuYW1lIGl0IGlzXG4gICAgICAvLyBhbHNvIHRoZSByZXF1aXJlZCBhdXRob3JpemF0aW9uLlxuICAgICAgZnVuY3Rpb24gZmlyc3RBY2NvdW50KCkge1xuICAgICAgICB2YXIgZmllbGRLZXlzID0gT2JqZWN0LmtleXMoZGVmaW5pdGlvbik7XG4gICAgICAgIHZhciBmMSA9IGZpZWxkS2V5c1swXTtcblxuICAgICAgICBpZiAoZGVmaW5pdGlvbltmMV0gPT09ICdhY2NvdW50X25hbWUnKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtc1tmMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ZpZGVkQXV0aCkge1xuICAgICAgICB2YXIgYXV0aEFycmF5ID0gdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIHByb3ZpZGVkQXV0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhdXRoQXJyYXkgPSBbcHJvdmlkZWRBdXRoXTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHByb3ZpZGVkQXV0aCkpIHtcbiAgICAgICAgICBhdXRoQXJyYXkgPSBwcm92aWRlZEF1dGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0aEFycmF5KSB7XG4gICAgICAgICAgYXV0aEFycmF5LmZvckVhY2goZnVuY3Rpb24gKGF1dGgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXV0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdmFyIF9hdXRoJHNwbGl0ID0gYXV0aC5zcGxpdCgnQCcpLFxuICAgICAgICAgICAgICAgICAgX2F1dGgkc3BsaXQyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfYXV0aCRzcGxpdCwgMiksXG4gICAgICAgICAgICAgICAgICBhY3RvciA9IF9hdXRoJHNwbGl0MlswXSxcbiAgICAgICAgICAgICAgICAgIF9hdXRoJHNwbGl0MiQgPSBfYXV0aCRzcGxpdDJbMV0sXG4gICAgICAgICAgICAgICAgICBwZXJtaXNzaW9uID0gX2F1dGgkc3BsaXQyJCA9PT0gdW5kZWZpbmVkID8gJ2FjdGl2ZScgOiBfYXV0aCRzcGxpdDIkO1xuXG4gICAgICAgICAgICAgIGlmIChhY3RvciA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBhY3RvciA9IGZpcnN0QWNjb3VudCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChhY3Rvcikge1xuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb24ucHVzaCh7IGFjdG9yOiBhY3RvciwgcGVybWlzc2lvbjogcGVybWlzc2lvbiB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIGF1dGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYXV0aCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICBhdXRob3JpemF0aW9uLnB1c2goYXV0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NlcnQuZXF1YWwoYXV0aG9yaXphdGlvbi5sZW5ndGgsIGF1dGhBcnJheS5sZW5ndGgsICdpbnZhbGlkIGF1dGhvcml6YXRpb24gaW46ICcgKyBKU09OLnN0cmluZ2lmeShwcm92aWRlZEF1dGgpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyID0ge1xuICAgICAgICBhY3Rpb25zOiBbe1xuICAgICAgICAgIGFjY291bnQ6IGFjY291bnQsXG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICBhdXRob3JpemF0aW9uOiBhdXRob3JpemF0aW9uLFxuICAgICAgICAgIGRhdGE6IHBhcmFtc1xuICAgICAgICB9XVxuICAgICAgfTtcblxuICAgICAgaWYgKGFkZERlZmF1bHRBdXRocykge1xuICAgICAgICB2YXIgYWN0b3IgPSBmaXJzdEFjY291bnQoKTtcbiAgICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgICAgLy8gRGVmYXVsdCBhdXRob3JpemF0aW9uIChzaW5jZSB1c2VyIGRpZCBub3QgcHJvdmlkZSBvbmUpXG4gICAgICAgICAgdHIuYWN0aW9uc1swXS5hdXRob3JpemF0aW9uLnB1c2goe1xuICAgICAgICAgICAgYWN0b3I6IGFjdG9yLFxuICAgICAgICAgICAgcGVybWlzc2lvbjogJ2FjdGl2ZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0ci5hY3Rpb25zWzBdLmF1dGhvcml6YXRpb24uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5hY3RvciA+IGIuYWN0b3IgPyAxIDogYS5hY3RvciA8IGIuYWN0b3IgPyAtMSA6IDA7XG4gICAgICB9KTtcblxuICAgICAgLy8gbXVsdGktYWN0aW9uIHRyYW5zYWN0aW9uIHN1cHBvcnRcbiAgICAgIGlmICghb3B0aW9uT3ZlcnJpZGVzLm1lc3NhZ2VPbmx5KSB7XG4gICAgICAgIHRyYW5zYWN0aW9uQXJnKHRyLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCB0cik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXR1cm5Qcm9taXNlO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICBUcmFuc2FjdGlvbiBNZXNzYWdlIENvbGxlY3RvclxuICAgICBXcmFwIG1lcmdlLmZ1bmN0aW9ucyBhZGRpbmcgb3B0aW9uT3ZlcnJpZGVzIHRoYXQgd2lsbCBzdXNwZW5kXG4gICAgdHJhbnNhY3Rpb24gYnJvYWRjYXN0LlxuICAqL1xuICBmdW5jdGlvbiB0ck1lc3NhZ2VDb2xsZWN0b3IodHJDYWxsYmFjaykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWVyZ2VzID0gYXJndW1lbnRzWzJdO1xuXG4gICAgYXNzZXJ0LmVxdWFsKCdmdW5jdGlvbicsIHR5cGVvZiB0ckNhbGxiYWNrID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHRyQ2FsbGJhY2spLCAndHJDYWxsYmFjaycpO1xuICAgIGFzc2VydC5lcXVhbCgnb2JqZWN0JywgdHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkob3B0aW9ucyksICdvcHRpb25zJyk7XG4gICAgYXNzZXJ0LmVxdWFsKCdvYmplY3QnLCB0eXBlb2YgbWVyZ2VzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKG1lcmdlcyksICdtZXJnZXMnKTtcbiAgICBhc3NlcnQoIUFycmF5LmlzQXJyYXkobWVyZ2VzKSwgJ21lcmdlcyBzaG91bGQgbm90IGJlIGFuIGFycmF5Jyk7XG4gICAgYXNzZXJ0LmVxdWFsKCdmdW5jdGlvbicsIHR5cGVvZiB0cmFuc2FjdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh0cmFuc2FjdGlvbiksICd0cmFuc2FjdGlvbicpO1xuXG4gICAgdmFyIG1lc3NhZ2VMaXN0ID0gW107XG4gICAgdmFyIG1lc3NhZ2VDb2xsZWN0b3IgPSB7fTtcblxuICAgIHZhciB3cmFwID0gZnVuY3Rpb24gd3JhcChvcEZ1bmN0aW9uKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGwgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGJ1dCBmb3JjZS1kaXNhYmxlIGEgbG90IG9mIHN0dWZmXG4gICAgICAgIHZhciByZXQgPSBvcEZ1bmN0aW9uLmFwcGx5KHVuZGVmaW5lZCwgYXJncy5jb25jYXQoW3tcbiAgICAgICAgICBfX29wdGlvbk92ZXJyaWRlczoge1xuICAgICAgICAgICAgYnJvYWRjYXN0OiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2VPbmx5OiB0cnVlLFxuICAgICAgICAgICAgbm9DYWxsYmFjazogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfV0pKTtcbiAgICAgICAgaWYgKHJldCA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gZG91YmxlLWNoZWNrIChjb2RlIGNhbiBjaGFuZ2UpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFja3MgY2FuIG5vdCBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBtdWx0aS1hY3Rpb24gdHJhbnNhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlTGlzdC5wdXNoKHJldCk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICAvLyBtZXJnZXMgY2FuIGJlIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgKGFzIGluIHRoZSBtYWluIGVvcyBjb250cmFjdClcbiAgICAvLyBvciBhbiBvYmplY3Qgb2YgY29udHJhY3QgbmFtZXMgd2l0aCBmdW5jdGlvbnMgdW5kZXIgdGhvc2VcbiAgICBmb3IgKHZhciBrZXkgaW4gbWVyZ2VzKSB7XG4gICAgICB2YXIgdmFsdWUgPSBtZXJnZXNba2V5XTtcbiAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSBrZXkucmVwbGFjZSgvXFwuLywgJ18nKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gTmF0aXZlIG9wZXJhdGlvbnMgKGVvcyBjb250cmFjdCBmb3IgZXhhbXBsZSlcbiAgICAgICAgbWVzc2FnZUNvbGxlY3Rvclt2YXJpYWJsZU5hbWVdID0gd3JhcCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gb3RoZXIgY29udHJhY3QocykgKGN1cnJlbmN5IGNvbnRyYWN0IGZvciBleGFtcGxlKVxuICAgICAgICBpZiAobWVzc2FnZUNvbGxlY3Rvclt2YXJpYWJsZU5hbWVdID09IG51bGwpIHtcbiAgICAgICAgICBtZXNzYWdlQ29sbGVjdG9yW3ZhcmlhYmxlTmFtZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrZXkyIGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGtleTIgPT09ICd0cmFuc2FjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXNzYWdlQ29sbGVjdG9yW3ZhcmlhYmxlTmFtZV1ba2V5Ml0gPSB3cmFwKHZhbHVlW2tleTJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9taXNlQ29sbGVjdG9yID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICAvLyBjYWxsZXIgd2lsbCBsb2FkIHRoaXMgdXAgd2l0aCBhY3Rpb25zXG4gICAgICBwcm9taXNlQ29sbGVjdG9yID0gdHJDYWxsYmFjayhtZXNzYWdlQ29sbGVjdG9yKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcHJvbWlzZUNvbGxlY3RvciA9IFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb21pc2VDb2xsZWN0b3IpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKG1lc3NhZ2VMaXN0KS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZE1lc3NhZ2VMaXN0KSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSByZXNvbHZlZE1lc3NhZ2VMaXN0W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgbSA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgICAgdmFyIF9tJGFjdGlvbnMgPSAoMCwgX3NsaWNlZFRvQXJyYXkzLmRlZmF1bHQpKG0uYWN0aW9ucywgMSksXG4gICAgICAgICAgICAgICAgYWN0aW9uID0gX20kYWN0aW9uc1swXTtcblxuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlO1xuICAgICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3I0LnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJPYmplY3QgPSB7fTtcbiAgICAgICAgdHJPYmplY3QuYWN0aW9ucyA9IGFjdGlvbnM7XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbih0ck9iamVjdCwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zYWN0aW9uKGFyZywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgZGVmYXVsdEV4cGlyYXRpb24sIG9wdGlvbkRlZmF1bHQsIHJldHVyblByb21pc2UsIHN1cGVyQ2FsbGJhY2ssIHJhd1R4LCBfYXJyLCBfaSwgdHhGaWVsZCwgdHhPYmplY3QsIGJ1ZiwgdHIsIHRyYW5zYWN0aW9uSWQsIHNpZ3MsIGNoYWluSWRCdWYsIHBhY2tlZENvbnRleHRGcmVlRGF0YSwgc2lnbkJ1ZjtcblxuICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXN5bmMoZnVuY3Rpb24gdHJhbnNhY3Rpb24kKF9jb250ZXh0NCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgZGVmYXVsdEV4cGlyYXRpb24gPSBjb25maWcuZXhwaXJlSW5TZWNvbmRzID8gY29uZmlnLmV4cGlyZUluU2Vjb25kcyA6IDYwO1xuICAgICAgICAgICAgb3B0aW9uRGVmYXVsdCA9IHsgZXhwaXJlSW5TZWNvbmRzOiBkZWZhdWx0RXhwaXJhdGlvbiwgYnJvYWRjYXN0OiB0cnVlLCBzaWduOiB0cnVlIH07XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9IC8qY2xvbmUqLywgb3B0aW9uRGVmYXVsdCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJldHVyblByb21pc2UgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISgodHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhcmcpKSAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IHRyYW5zYWN0aW9uIGFyZ3VtZW50IHNob3VsZCBiZSBhbiBvYmplY3Qgb3IgZnVuY3Rpb24nKTtcblxuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZy5hY3Rpb25zKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgYWN0aW9ucyBhcnJheScpO1xuXG4gICAgICAgICAgY2FzZSA5OlxuXG4gICAgICAgICAgICBpZiAoY29uZmlnLmxvZ2dlci5sb2cgfHwgY29uZmlnLmxvZ2dlci5lcnJvcikge1xuICAgICAgICAgICAgICAvLyB3cmFwIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBsb2dnZXJcbiAgICAgICAgICAgICAgc3VwZXJDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soZXJyb3IsIHRyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yICYmIGNvbmZpZy5sb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIGNvbmZpZy5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvZ2dlci5sb2cpIHtcbiAgICAgICAgICAgICAgICAgIGNvbmZpZy5sb2dnZXIubG9nKEpTT04uc3RyaW5naWZ5KHRyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyQ2FsbGJhY2soZXJyb3IsIHRyKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJnLmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhY3Rpb24uYXV0aG9yaXphdGlvbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgYWN0aW9uLmF1dGhvcml6YXRpb24gYXJyYXknLCBhY3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCEob3B0aW9ucy5zaWduICYmIHR5cGVvZiBjb25maWcuc2lnblByb3ZpZGVyICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDEzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0aW5nIGNvbmZpZy5zaWduUHJvdmlkZXIgZnVuY3Rpb24gKGRpc2FibGUgdXNpbmcge3NpZ246IGZhbHNlfSknKTtcblxuICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICByYXdUeCA9IHtcbiAgICAgICAgICAgICAgbWF4X25ldF91c2FnZV93b3JkczogMCxcbiAgICAgICAgICAgICAgbWF4X2NwdV91c2FnZV9tczogMCxcbiAgICAgICAgICAgICAgZGVsYXlfc2VjOiAwLFxuICAgICAgICAgICAgICBjb250ZXh0X2ZyZWVfYWN0aW9uczogW10sXG4gICAgICAgICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICAgICAgICBzaWduYXR1cmVzOiBbXSxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25fZXh0ZW5zaW9uczogW11cblxuICAgICAgICAgICAgICAvLyBnbG9iYWwgdHJhbnNhY3Rpb24gaGVhZGVyc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCFjb25maWcudHJhbnNhY3Rpb25IZWFkZXJzKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISgoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY29uZmlnLnRyYW5zYWN0aW9uSGVhZGVycykgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyYXdUeCwgY29uZmlnLnRyYW5zYWN0aW9uSGVhZGVycyk7XG4gICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI1O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgaWYgKCEodHlwZW9mIGNvbmZpZy50cmFuc2FjdGlvbkhlYWRlcnMgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDIyO1xuICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hd3JhcChjb25maWcudHJhbnNhY3Rpb25IZWFkZXJzKG9wdGlvbnMuZXhwaXJlSW5TZWNvbmRzLCBjaGVja0Vycm9yKGNhbGxiYWNrLCBjb25maWcubG9nZ2VyLCBmdW5jdGlvbiBfY2FsbGVlMihoZWFkZXJzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgaGVhZGVycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShoZWFkZXJzKSwgJ29iamVjdCcsICdleHBlY3RpbmcgdHJhbnNhY3Rpb24gaGVhZGVyIG9iamVjdCcpO1xuICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmF3VHgsIGhlYWRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIG51bGwsIHRoaXMpO1xuICAgICAgICAgICAgfSkpKTtcblxuICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI1O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDI0OlxuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCAnY29uZmlnLnRyYW5zYWN0aW9uSGVhZGVycyBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uJyk7XG5cbiAgICAgICAgICBjYXNlIDI1OlxuXG4gICAgICAgICAgICAvLyBwZXIgdHJhbnNhY3Rpb24gaGVhZGVyc1xuICAgICAgICAgICAgX2FyciA9IFsnZXhwaXJhdGlvbicsICdyZWZfYmxvY2tfbnVtJywgJ3JlZl9ibG9ja19wcmVmaXgnLCAnZGVsYXlfc2VjJywgJ21heF9uZXRfdXNhZ2Vfd29yZHMnLCAnbWF4X2NwdV91c2FnZV9tcyddO1xuICAgICAgICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgdHhGaWVsZCA9IF9hcnJbX2ldO1xuXG4gICAgICAgICAgICAgIGlmIChhcmdbdHhGaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGVvcy50cmFuc2FjdGlvbignZW9zaW8nLCBlb3NpbyA9PiB7IGVvc2lvLm15YWN0aW9uKC4uKSB9LCB7ZGVsYXlfc2VjOiAzNjl9KVxuICAgICAgICAgICAgICAgIC8vIGVvcy50cmFuc2FjdGlvbih7ZGVsYXlfc2VjOiAzNjksIGFjdGlvbnM6IFsuLi5dfSlcbiAgICAgICAgICAgICAgICByYXdUeFt0eEZpZWxkXSA9IGFyZ1t0eEZpZWxkXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zW3R4RmllbGRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBlb3MudHJhbnNhY3Rpb24odHIgPT4ge3RyLnRyYW5zZmVyKC4uLil9LCB7ZGVsYXlfc2VjOiAzNjl9KVxuICAgICAgICAgICAgICAgIHJhd1R4W3R4RmllbGRdID0gb3B0aW9uc1t0eEZpZWxkXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBlb3NqcyBjYWxjdWFsdGVkIGhlYWRlcnNcblxuICAgICAgICAgICAgaWYgKCEoIC8vIG1pbmltdW0gcmVxdWlyZWQgaGVhZGVyc1xuICAgICAgICAgICAgcmF3VHguZXhwaXJhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHJhd1R4LnJlZl9ibG9ja19udW0gPT09IHVuZGVmaW5lZCB8fCByYXdUeC5yZWZfYmxvY2tfcHJlZml4ID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3NlcnQobmV0d29yaywgJ05ldHdvcmsgaXMgcmVxdWlyZWQsIHByb3ZpZGUgaHR0cEVuZHBvaW50IG9yIG93biB0cmFuc2FjdGlvbiBoZWFkZXJzJyk7XG4gICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDMxO1xuICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hd3JhcChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICBuZXR3b3JrLmNyZWF0ZVRyYW5zYWN0aW9uKG9wdGlvbnMuZXhwaXJlSW5TZWNvbmRzLCBjaGVja0Vycm9yKGNhbGxiYWNrLCBjb25maWcubG9nZ2VyLCBmdW5jdGlvbiBfY2FsbGVlMyhoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hcnIyLCBfaTIsIHR4RmllbGQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hcnIyID0gWydleHBpcmF0aW9uJywgJ3JlZl9ibG9ja19udW0nLCAncmVmX2Jsb2NrX3ByZWZpeCddO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pMiA9IDA7IF9pMiA8IF9hcnIyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHhGaWVsZCA9IF9hcnIyW19pMl07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codHhGaWVsZCwgaGVhZGVyc1t0eEZpZWxkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYXdUeFt0eEZpZWxkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3VHhbdHhGaWVsZF0gPSBoZWFkZXJzW3R4RmllbGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgbnVsbCwgdGhpcyk7XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgMzE6XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyYXdUeCcsIHJhd1R4KVxuXG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJhd1R4LmV4cGlyYXRpb24pLCAnc3RyaW5nJywgJ2V4cGVjdGluZyBleHBpcmF0aW9uOiBpc28gZGF0ZSB0aW1lIHN0cmluZycpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShyYXdUeC5yZWZfYmxvY2tfbnVtKSwgJ251bWJlcicsICdleHBlY3RpbmcgcmVmX2Jsb2NrX251bSBudW1iZXInKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbCgoMCwgX3R5cGVvZjMuZGVmYXVsdCkocmF3VHgucmVmX2Jsb2NrX3ByZWZpeCksICdudW1iZXInLCAnZXhwZWN0aW5nIHJlZl9ibG9ja19wcmVmaXggbnVtYmVyJyk7XG5cbiAgICAgICAgICAgIHJhd1R4LmNvbnRleHRfZnJlZV9hY3Rpb25zID0gYXJnLmNvbnRleHRfZnJlZV9hY3Rpb25zO1xuICAgICAgICAgICAgcmF3VHguYWN0aW9ucyA9IGFyZy5hY3Rpb25zO1xuICAgICAgICAgICAgcmF3VHgudHJhbnNhY3Rpb25fZXh0ZW5zaW9ucyA9IGFyZy50cmFuc2FjdGlvbl9leHRlbnNpb25zO1xuXG4gICAgICAgICAgICAvLyBSZXNvbHZlIHNob3J0aGFuZFxuICAgICAgICAgICAgdHhPYmplY3QgPSBUcmFuc2FjdGlvbi5mcm9tT2JqZWN0KHJhd1R4KTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0eE9iamVjdCcsIHR4T2JqZWN0KVxuXG4gICAgICAgICAgICBidWYgPSBGY2J1ZmZlci50b0J1ZmZlcihUcmFuc2FjdGlvbiwgdHhPYmplY3QpO1xuICAgICAgICAgICAgdHIgPSBUcmFuc2FjdGlvbi50b09iamVjdCh0eE9iamVjdCk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbklkID0gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGJ1ZikuZGlnZXN0KCkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICAgICAgc2lncyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaWduKSB7XG4gICAgICAgICAgICAgIGNoYWluSWRCdWYgPSBCdWZmZXIuZnJvbShjb25maWcuY2hhaW5JZCwgJ2hleCcpO1xuICAgICAgICAgICAgICBwYWNrZWRDb250ZXh0RnJlZURhdGEgPSBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheSgzMikpOyAvLyBUT0RPXG5cbiAgICAgICAgICAgICAgc2lnbkJ1ZiA9IEJ1ZmZlci5jb25jYXQoW2NoYWluSWRCdWYsIGJ1ZiwgcGFja2VkQ29udGV4dEZyZWVEYXRhXSk7XG5cblxuICAgICAgICAgICAgICBzaWdzID0gY29uZmlnLnNpZ25Qcm92aWRlcih7IHRyYW5zYWN0aW9uOiB0ciwgYnVmOiBzaWduQnVmLCBzaWduOiBzaWduLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNLZXlQcm92aWRlcjogb3B0aW9ucy5rZXlQcm92aWRlciB9KTtcblxuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2lncykpIHtcbiAgICAgICAgICAgICAgICBzaWdzID0gW3NpZ3NdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNpZ3MgY2FuIGJlIHN0cmluZ3Mgb3IgUHJvbWlzZXNcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHNpZ3MpLnRoZW4oZnVuY3Rpb24gKHNpZ3MpIHtcbiAgICAgICAgICAgICAgc2lncyA9IFtdLmNvbmNhdC5hcHBseShbXSwgc2lncyk7IC8vIGZsYXR0ZW4gYXJyYXlzIGluIGFycmF5XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpZyA9IHNpZ3NbaV07XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXplIChoZXggdG8gYmFzZTU4IGZvcm1hdCBmb3IgZXhhbXBsZSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNpZyA9PT0gJ3N0cmluZycgJiYgc2lnLmxlbmd0aCA9PT0gMTMwKSB7XG4gICAgICAgICAgICAgICAgICBzaWdzW2ldID0gZWNjLlNpZ25hdHVyZS5mcm9tKHNpZykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcGFja2VkVHIgPSB7XG4gICAgICAgICAgICAgICAgY29tcHJlc3Npb246ICdub25lJyxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHIsXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlczogc2lnc1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHZhciBtb2NrID0gY29uZmlnLm1vY2tUcmFuc2FjdGlvbnMgPyBjb25maWcubW9ja1RyYW5zYWN0aW9ucygpIDogbnVsbDtcbiAgICAgICAgICAgICAgaWYgKG1vY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFzc2VydCgvcGFzc3xmYWlsLy50ZXN0KG1vY2spLCAnbW9ja1RyYW5zYWN0aW9ucyBzaG91bGQgcmV0dXJuIGEgc3RyaW5nOiBwYXNzIG9yIGZhaWwnKTtcbiAgICAgICAgICAgICAgICBpZiAobW9jayA9PT0gJ3Bhc3MnKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uX2lkOiB0cmFuc2FjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICBtb2NrVHJhbnNhY3Rpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBwYWNrZWRUclxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb2NrID09PSAnZmFpbCcpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICdbcHVzaF90cmFuc2FjdGlvbiBtb2NrIGVycm9yXSBcXCdmYWtlIGVycm9yXFwnLCBkaWdlc3QgXFwnJyArIGJ1Zi50b1N0cmluZygnaGV4JykgKyAnXFwnJztcblxuICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmJyb2FkY2FzdCB8fCAhbmV0d29yaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uX2lkOiB0cmFuc2FjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgYnJvYWRjYXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBwYWNrZWRUclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldHdvcmsucHVzaFRyYW5zYWN0aW9uKHBhY2tlZFRyLCBmdW5jdGlvbiAoZXJyb3IsIHByb2Nlc3NlZFRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogcGFja2VkVHIsXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25faWQ6IHRyYW5zYWN0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgfSwgcHJvY2Vzc2VkVHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcubG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmxvZ2dlci5lcnJvcignW3B1c2hfdHJhbnNhY3Rpb24gZXJyb3JdIFxcJycgKyBlcnJvci5tZXNzYWdlICsgJ1xcJywgdHJhbnNhY3Rpb24gXFwnJyArIGJ1Zi50b1N0cmluZygnaGV4JykgKyAnXFwnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvZ2dlci5lcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoJ3JldHVybicsIHJldHVyblByb21pc2UpO1xuXG4gICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBudWxsLCB0aGlzKTtcbiAgfVxuXG4gIC8vIHJldHVybiBXcml0ZUFwaVxuICByZXR1cm4ge1xuICAgIGdlblRyYW5zYWN0aW9uOiBnZW5UcmFuc2FjdGlvbixcbiAgICBnZW5Db250cmFjdEFjdGlvbnM6IGdlbkNvbnRyYWN0QWN0aW9ucyxcbiAgICBnZW5NZXRob2Q6IGdlbk1ldGhvZFxuICB9O1xufVxuXG52YXIgaXNTdHJpbmdBcnJheSA9IGZ1bmN0aW9uIGlzU3RyaW5nQXJyYXkobykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShvKSAmJiBvLmxlbmd0aCA+IDAgJiYgby5maW5kSW5kZXgoZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gIT09ICdzdHJpbmcnO1xuICB9KSA9PT0gLTE7XG59O1xuXG4vLyBOb3JtYWxpemUgdGhlIGV4dHJhIG9wdGlvbmFsIG9wdGlvbnMgYXJndW1lbnRcbnZhciBvcHRpb25zRm9ybWF0dGVyID0gZnVuY3Rpb24gb3B0aW9uc0Zvcm1hdHRlcihvcHRpb24pIHtcbiAgaWYgKCh0eXBlb2Ygb3B0aW9uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9wdGlvbikpID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvcHRpb247IC8vIHtkZWJ1ZywgYnJvYWRjYXN0LCBldGN9IChldGMgbXkgb3ZlcndyaXRlIHRyIGJlbG93KVxuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBicm9hZGNhc3QgYXJndW1lbnQgYXMgYSB0cnVlIGZhbHNlIHZhbHVlLCBiYWNrLWVuZCBjbGkgd2lsbCB1c2UgdGhpcyBzaG9ydGhhbmRcbiAgICByZXR1cm4geyBicm9hZGNhc3Q6IG9wdGlvbiB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiB1c2FnZShhY3Rpb24sIGRlZmluaXRpb24sIE5ldHdvcmssIGFjY291bnQsIGNvbmZpZykge1xuICB2YXIgdXNhZ2UgPSAnJztcbiAgdmFyIG91dCA9IGZ1bmN0aW9uIG91dCgpIHtcbiAgICB2YXIgc3RyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcblxuICAgIHVzYWdlICs9IHN0ciArICdcXG4nO1xuICB9O1xuICBvdXQoJ0NPTlRSQUNUJyk7XG4gIG91dChhY2NvdW50KTtcbiAgb3V0KCk7XG5cbiAgb3V0KCdBQ1RJT04nKTtcbiAgb3V0KGFjdGlvbi5uYW1lKTtcbiAgb3V0KCk7XG5cbiAgdmFyIGNhY2hlID0gY29uZmlnLmFiaUNhY2hlLmFiaShhY2NvdW50KTtcblxuICBvdXQoJ1BBUkFNRVRFUlMnKTtcbiAgb3V0KEpTT04uc3RyaW5naWZ5KHNjaGVtYUZpZWxkcyhjYWNoZS5zY2hlbWEsIGFjdGlvbi50eXBlKSwgbnVsbCwgNCkpO1xuICBvdXQoKTtcblxuICB2YXIgc3RydWN0ID0gY2FjaGUuc3RydWN0c1thY3Rpb24udHlwZV07XG5cbiAgb3V0KCdFWEFNUExFJyk7XG4gIG91dChhY2NvdW50ICsgJy4nICsgYWN0aW9uLm5hbWUgKyAnKCcgKyBKU09OLnN0cmluZ2lmeShzdHJ1Y3QudG9PYmplY3QoKSwgbnVsbCwgNCkgKyAnKScpO1xuXG4gIHJldHVybiB1c2FnZTtcbn1cblxudmFyIGNoZWNrRXJyb3IgPSBmdW5jdGlvbiBjaGVja0Vycm9yKHBhcmVudEVyciwgbG9nZ2VyLCBwYXJyZW50UmVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgaWYgKGxvZ2dlci5lcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgfVxuICAgICAgcGFyZW50RXJyKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKHBhcnJlbnRSZXMocmVzdWx0KSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHBhcmVudEVycihlcnJvcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG4vKiogQ29sbGFwc2UgaW5oZXJpdGFuY2UgKHZpYSBcImJhc2VcIikgcHV0dGluZyBhbGwgdGhlIGZpZWxkcyBpbiBvbmUgb2JqZWN0LiAqL1xuZnVuY3Rpb24gc2NoZW1hRmllbGRzKHNjaGVtYSwgdHlwZSkge1xuICB2YXIgX3NjaGVtYSR0eXBlID0gc2NoZW1hW3R5cGVdLFxuICAgICAgYmFzZSA9IF9zY2hlbWEkdHlwZS5iYXNlLFxuICAgICAgZmllbGRzID0gX3NjaGVtYSR0eXBlLmZpZWxkcztcblxuICB2YXIgZGVmID0ge307XG4gIGlmIChiYXNlICYmIGJhc2UgIT09ICcnKSB7XG4gICAgT2JqZWN0LmFzc2lnbihkZWYsIHNjaGVtYUZpZWxkcyhzY2hlbWEsIGJhc2UpKTtcbiAgfVxuICBPYmplY3QuYXNzaWduKGRlZiwgZmllbGRzKTtcbiAgcmV0dXJuIGRlZjtcbn0iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHNjYXR0ZXI6IHtcbiAgICAgICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICAgICAgaG9zdDogJ25vZGVzLmdldC1zY2F0dGVyLmNvbScsXG4gICAgICAgICAgICBwb3J0OiA0NDMsXG4gICAgICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgICAgICBwcm90b2NvbDogJ2h0dHBzJyxcbiAgICAgICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZXMuZ2V0LXNjYXR0ZXIuY29tOjQ0MycsXG4gICAgICAgIH0sXG4gICAgICAgIGVvc2FzaWE6IHtcbiAgICAgICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICAgICAgaG9zdDogJ2FwaTEuZW9zYXNpYS5vbmUnLFxuICAgICAgICAgICAgcG9ydDogNDQzLFxuICAgICAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICAgICAgcHJvdG9jb2w6ICdodHRwcycsXG4gICAgICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaTEuZW9zYXNpYS5vbmU6NDQzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGV2OntcbiAgICAgICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICAgICAgaG9zdDogJ2Rldi50b25lb3MucHJvJyxcbiAgICAgICAgICAgIHBvcnQ6IDc3NzcsXG4gICAgICAgICAgICBjaGFpbklkOiAnY2YwNTdiYmZiNzI2NDA0NzFmZDkxMGJjYjY3NjM5YzIyZGY5ZjkyNDcwOTM2Y2RkYzFhZGUwZTJmMmU3ZGM0ZicsXG4gICAgICAgICAgICBwcm90b2NvbDogJ2h0dHAnLFxuICAgICAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cDovL2Rldi50b25lb3MucHJvOjc3NzcnLFxuICAgICAgICB9XG59OyIsImNvbnN0IEVvcyA9IHJlcXVpcmUoJ2Vvc2pzJyk7XG5cbmNvbnN0IERCID0gcmVxdWlyZSgnLi9kYicpO1xuY29uc3QgUGxheWVyID0gcmVxdWlyZSgnLi4vc3JjL3BsYXllcicpXG5cbi8qKlxuICogRXZlbnQgbmFtZXMgc3VwcG9ydGVkIGluIHNjYXR0ZXIgcGxheWVyXG4gKiBAdHlwZSB7e0VSUl9HRVRfU0NBVFRFUl9GQUlMRUQ6IHN0cmluZywgRVJSX0dFVF9JREVOVElUWV9GQUlMRUQ6IHN0cmluZ319XG4gKi9cbmNvbnN0IEVWRU5UX05BTUVTID0ge1xuICAgIEVSUl9HRVRfU0NBVFRFUl9GQUlMRUQ6IFwiRVJSX0dFVF9TQ0FUVEVSX0ZBSUxFRFwiLFxuICAgIEVSUl9HRVRfSURFTlRJVFlfRkFJTEVEOiBcIkVSUl9HRVRfSURFTlRJVFlfRkFJTEVEXCIsXG59XG5cbi8qKlxuICogUGxheWVyIG9uIGJyb3dzZXIgKG5lZWQgc2NhdHRlcilcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuY2xhc3MgU2NhdHRlclBsYXllciBleHRlbmRzIFBsYXllciB7XG5cbiAgICBjb25zdHJ1Y3RvcihuZXRDb25mKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZXZlbnRzLmVuYWJsZUV2ZW50cyhFVkVOVF9OQU1FUyk7XG5cbiAgICAgICAgdGhpcy5fbmV0d29ya3MgPSBuZXRDb25mO1xuICAgICAgICB0aGlzLl9kYiA9IG5ldyBEQih7XG4gICAgICAgICAgICBuZXR3b3JrX25hbWU6ICdkZXYnLFxuICAgICAgICAgICAgbGFuZzogJ2NoJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYGVvc3BsYXllciBjcmVhdGVkOiBcXG4ke3RoaXMubmV0TmFtZX0gXFxuJHtKU09OLnN0cmluZ2lmeSh0aGlzLm5ldENvbmYpfWApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc3RvcmFnZSBvZiBzY2F0dGVyIHBsYXllclxuICAgICAqIEByZXR1cm4ge0RCfVxuICAgICAqL1xuICAgIGdldCBzdG9yYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc3dpdGNoIHRvIGFuIG5ldHdvcmsgd2l0aCBuYW1lXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqL1xuICAgIHN3aXRjaE5ldHdvcmsoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5fbmV0d29ya3MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXQoXCJuZXR3b3JrX25hbWVcIiwga2V5KTtcbiAgICAgICAgICAgIHRoaXMuX2Vvc0NsaWVudCA9IG51bGw7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgbmV0d29yayBjaGFuZ2VkIHRvICR7dGhpcy5uZXROYW1lfS5gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYG5ldHdvcmsgJHtrZXl9IGNhbm5vdCBmaW5kLmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGQgbmV0IGNvbmZpZyB0byB0YWJsZSBhdCBydW50aW1lXG4gICAgICogQHBhcmFtIG5ldE5hbWVcbiAgICAgKiBAcGFyYW0gY29uZlxuICAgICAqL1xuICAgIHNldE5ldENvbmYobmV0TmFtZSwgY29uZikge1xuICAgICAgICB0aGlzLl9uZXR3b3Jrc1tuZXROYW1lXSA9IGNvbmY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5ldHdvcmsgbmFtZSBpbiB1c2VcbiAgICAgKi9cbiAgICBnZXQgbmV0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQoXCJuZXR3b3JrX25hbWVcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5ldHdvcmsgY29uZmlnIG9mIGN1ciBuZXROYW1lXG4gICAgICovXG4gICAgZ2V0IG5ldENvbmYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uZXR3b3Jrc1t0aGlzLm5ldE5hbWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyeSBnZXQgc2NhdHRlclxuICAgICAqIEBzZWUgaHR0cHM6Ly9nZXQtc2NhdHRlci5jb20vZG9jcy9leGFtcGxlcy1pbnRlcmFjdGlvbi1mbG93XG4gICAgICogQHJldHVybiB7U2NhdHRlcn1cbiAgICAgKi9cbiAgICBnZXQgc2NhdHRlcigpIHtcbiAgICAgICAgbGV0IHNjYXR0ZXIgPSB3aW5kb3cuc2NhdHRlcjtcbiAgICAgICAgaWYgKCFzY2F0dGVyKSB7XG4gICAgICAgICAgICBsZXQgZXJyID0gbmV3IEVycm9yKCdzY2F0dGVyIGNhbm5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdEV2ZW50KEVWRU5UX05BTUVTLkVSUl9HRVRfU0NBVFRFUl9GQUlMRUQsIGVycik7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjYXR0ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbG9naW4gLSByZXF1aXJlIGFjY291bnQgaWRlbnRpdHkgZnJvbSBzY2F0dGVyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7SWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgICBhc3luYyBsb2dpbigpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0SWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsb2dvdXRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGxvZ291dCgpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2NhdHRlci5mb3JnZXRJZGVudGl0eSh0aGlzLm5ldE5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBvciBjcmVhdGUgc2NhdHRlclxuICAgICAqIEByZXR1cm4ge2Vvc0FQSX1cbiAgICAgKi9cbiAgICBnZXQgZW9zQ2xpZW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Vvc0NsaWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZW9zQ2xpZW50ID0gdGhpcy5zY2F0dGVyLmVvcyh0aGlzLm5ldENvbmYsIEVvcywge30sIHRoaXMubmV0Q29uZi5wcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vvc0NsaWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXRJZGVudGl0eSBvZiBjdXIgc2NhdHRlciB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7SWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRJZGVudGl0eSgpIHtcbiAgICAgICAgbGV0IG9yaWdpbkNoYWluSUQgPSB0aGlzLnN0b3JhZ2UuZ2V0KFwibGF0ZXN0X2NoYWluX2lkXCIpO1xuICAgICAgICBpZiAoKCEhb3JpZ2luQ2hhaW5JRCkgJiYgdGhpcy5uZXRDb25mLmNoYWluSWQgIT09IG9yaWdpbkNoYWluSUQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBhIGNoYW5naW5nIG9mIGNoYWluX2lkIGRldGVjdGVkOiAke29yaWdpbkNoYWluSUR9IC0+ICR7dGhpcy5uZXRDb25mLmNoYWluSWR9IGApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2dvdXQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBsb2cgb3V0IGZyb20gJHtvcmlnaW5DaGFpbklEfWApO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuc2NhdHRlci5nZXRJZGVudGl0eSh7XG4gICAgICAgICAgICBhY2NvdW50czogW3RoaXMubmV0Q29uZl0sXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfR0VUX0lERU5USVRZX0ZBSUxFRCwgZXJyKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldChcImxhdGVzdF9jaGFpbl9pZFwiLCB0aGlzLm5ldENvbmYuY2hhaW5JZCk7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYXR0ZXIuaWRlbnRpdHkuYWNjb3VudHMuZmluZChhY2MgPT4gYWNjLmJsb2NrY2hhaW4gPT09ICdlb3MnKTtcbiAgICB9XG5cbiAgICBnZXQgaGVscCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmhlbHAgKyBgXG4gIFxuIyMgVXNhZ2Ugb2YgZW9zcGxheWVyIChmb3IgYnJvc3dlcilcbiAgXG4jIyMgRXZlbnRzXG5cbkVSUl9HRVRfU0NBVFRFUl9GQUlMRUQgIFxuRVJSX0dFVF9JREVOVElUWV9GQUlMRUQgIFxuXG4jIyMgQVBJc1xuXG5cXGBcXGBcXGBqc1xue3ZvaWR9IGVvc3BsYXllci5zd2l0Y2hOZXR3b3JrKHZhbCkgLy8gc3dpdGNoIG5ldHdvcmtcbnt2b2lkfSBlb3NwbGF5ZXIuc2V0TmV0Q29uZihuZXR3b3JrX25hbWUsIGNvbmYpIC8vIGFkZCBhIG5ldHdvcmsgY29uZmlnIGF0IHJ1bnRpbWUgICAgXG5cbmdldCB7U2NhdHRlcn0gZW9zcGxheWVyLnNjYXR0ZXIgLy8gZ2V0IHNjYXR0ZXIgaW5zdGFuY2VcblxuZ2V0IHtzdHJpbmd9IGVvc3BsYXllci5uZXROYW1lIC8vIGdldCBjdXJyZW50IG5ldHdvcmsgbmFtZVxuZ2V0IHtzdHJpbmd9IGVvc3BsYXllci5uZXRDb25mIC8vIGdldCBjdXJyZW50IG5ldHdvcmsgY29uZmlnXG4gICAgICAgIFxuYXN5bmMge0lkZW50aXR5fSBlb3NwbGF5ZXIubG9naW4oKSAvLyBsZXQgdXNlciBhbGxvdyB5b3UgdXNpbmcgaWRlbnRpdHlcbmFzeW5jIHt2b2lkfSBlb3NwbGF5ZXIubG9nb3V0KCkgLy8gcmV0dXJuIGJhY2sgdGhlIGlkZW50aXR5XG5cXGBcXGBcXGBcblxuIyMgSW1wb3J0ZWQgbGlic1xuXG5cXGBcXGBcXGBqc1xud2luZG93LmVvc2pzID0gRW9zOyAvKiogdGhlIGVvc2pzIGxpYiBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Vvc2pzfSAqLyAgXG53aW5kb3cuZW52ID0gZW52OyAvKioge2lzUGN9ICovICBcbndpbmRvdy5pZGIgPSBpZGI7IC8qKiBpZGIgbGliIGZvciBicm93c2VyIHN0b3JhZ2UgQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9pZGIgfSAqLyAgXG53aW5kb3cuZW9zcGxheWVyID0gbmV3IFNjYXR0ZXJQbGF5ZXIobmV0d29ya3MpOyAgXG53aW5kb3cuQmlnTnVtYmVyID0gQmlnTnVtYmVyOyAvKiogYmlnIG51bWJlciBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JpZ251bWJlci5qc30gKi9cblxcYFxcYFxcYCAgICAgICAgXG5gXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjYXR0ZXJQbGF5ZXI7IiwiJ3VzaW5nIHN0cmljdCdcblxuLyoqXG4gKiBTdG9yYWdlXG4gKi9cbmNsYXNzIERCIHtcblxuICAgIC8qKlxuICAgICAqIHRoZSBzdG9yYWdlIGxpYiBpbnRlcmFjdCB3aXRoIGxvY2FsU3RvcmFnZSBub3dcbiAgICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlcyAtIGRlZmluZSB3aGF0IHdpbGwgeW91IGdldCB3aGVuIHlvdSByZXF1aXJlIGFuIGtleSBub3QgZXhpc3RcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0VmFsdWVzKSB7XG4gICAgICAgIHRoaXMuX2RlZnVhbHRzID0gZGVmYXVsdFZhbHVlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdmFsIGJ5IGtleVxuICAgICAqIEBwYXJhbSBrZXkgLSB3aWxsIGJlIGFzc2VtYmxlZCB0byBlb3NwbGF5ZXI6OiR7a2V5fVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBsZXQgcGtleSA9IGBlb3NwbGF5ZXI6OiR7a2V5fWA7XG4gICAgICAgIGxldCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocGtleSlcbiAgICAgICAgaWYoISFpdGVtKXtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGlmKGtleSBpbiB0aGlzLl9kZWZ1YWx0cyl7XG4gICAgICAgICAgICBsZXQgdmFsID0gdGhpcy5fZGVmdWFsdHNba2V5XVxuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWwpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSB2YWxcbiAgICAgKi9cbiAgICBzZXQoa2V5LCB2YWwpe1xuICAgICAgICBsZXQgcGtleSA9IGBlb3NwbGF5ZXI6OiR7a2V5fWA7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBrZXksIHZhbCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERCIiwiY29uc3QgQXNzZXQgPSByZXF1aXJlKCcuL3V0aWxzL2Fzc2V0Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBlb3NBUElcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGFiaUJpblRvSnNvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gYWJpSnNvblRvQmluXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBiaWRuYW1lXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBidXlyYW1cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGJ1eXJhbWJ5dGVzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBjYW5jZWxkZWxheVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gY2xhaW1yZXdhcmRzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBjb250cmFjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gY3JlYXRlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBjcmVhdGVUcmFuc2FjdGlvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGVsZWdhdGVid1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGVsZXRlYXV0aFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0QWJpXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRBY2NvdW50IC0gZ2V0QWNjb3VudCh7YWNjb3VudF9uYW1lOiBbW2FjY291bnRfbmFtZV1dIH0pXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRBY3Rpb25zXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRCbG9ja1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0QmxvY2tIZWFkZXJTdGF0ZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0Q29kZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0Q29kZUhhc2hcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldENvbnRyb2xsZWRBY2NvdW50c1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0Q3VycmVuY3lCYWxhbmNlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRDdXJyZW5jeVN0YXRzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRJbmZvXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRLZXlBY2NvdW50c1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0UHJvZHVjZXJTY2hlZHVsZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0UHJvZHVjZXJzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRSYXdDb2RlQW5kQWJpXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRSZXF1aXJlZEtleXNcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldFNjaGVkdWxlZFRyYW5zYWN0aW9uc1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0VGFibGVSb3dzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRUcmFuc2FjdGlvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gaXNzdWVcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGxpbmthdXRoXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBuZXdhY2NvdW50XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBub25jZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gb25lcnJvclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gcHVzaEJsb2NrXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBwdXNoVHJhbnNhY3Rpb25cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHB1c2hUcmFuc2FjdGlvbnNcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHJlZnVuZFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gcmVncHJvZHVjZXJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHJlZ3Byb3h5XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSByZXFhdXRoXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBybXZwcm9kdWNlclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc2VsbHJhbVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc2V0YWJpXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZXRhbGltaXRzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZXRjb2RlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZXRnbGltaXRzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZXRwYXJhbXNcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHNldHByaXZcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHNldHByb2RzXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZXRyYW1cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB0cmFuc2ZlclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gdW5kZWxlZ2F0ZWJ3XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB1bmxpbmthdXRoXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB1bnJlZ3Byb2RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHVwZGF0ZWF1dGhcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHZvdGVwcm9kdWNlclxuICovXG5cbi8qKlxuICogQGludGVyZmFjZSBTY2F0dGVyXG4gKiBAcHJvcGVydHkge1Byb21pc2V9IGF1dGhlbnRpY2F0ZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZm9yZ2V0SWRlbnRpdHkgLSBhdXRoZW50aWNhdGUoKVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlIC0gZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlKGUsdCxyPVwiXCIsbj0hMSlcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldElkZW50aXR5IC0gZ2V0SWRlbnRpdHkoZT17fSl7cmV0dXJuIEUoaS5lLHtuZXR3b3JrOm0sZmllbGRzOmV9KS50aGVuKGFzeW5jIGU9PiB74oCmfVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gcmVxdWlyZVZlcnNpb24gLSDGkiByZXF1aXJlVmVyc2lvbihlKVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc3VnZ2VzdE5ldHdvcmsgLSDGkiBzdWdnZXN0TmV0d29yayhlKVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gdXNlSWRlbnRpdHlcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGVvcyAtIGNyZWF0ZSBlb3NBcGkgb2JqZWN0IDogZiBlb3Moe2Jsb2NrY2hhaW4sIGhvc3QsIHBvcnQsIGNoYWluSUR9LCBFb3MsIG9wdGlvbj17fSwgcHJvdG9jb2w9XCJodHRwXCIpXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBldGggLSB1bW1tbW0gLi4uXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElkZW50aXR5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGF1dGhvcml0eSAtIGRlZmF1bHQ6IGFjdGl2ZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJsb2NrY2hhaW4gLSBkZWZhdWx0OiBlb3NcbiAqL1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgQWNjb3VudEluZm9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhY2NvdW50X25hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb3JlX2xpcXVpZF9iYWxhbmNlIC0gYXNzZXQgZm9ybWF0LCB3aGljaCBpcyBhIHN0cmluZyBsaWtlICcxLjAwMDAgRU9TJ1xuICogQHByb3BlcnR5IHtPYmplY3QuPGF2YWlsYWJsZSxtYXgsdXNlZD59IGNwdV9saW1pdFxuICogQHByb3BlcnR5IHtPYmplY3QuPGF2YWlsYWJsZSxtYXgsdXNlZD59IG5ldF9saW1pdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJhbV9xdW90YVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJhbV91c2FnZVxuICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn1wZXJtaXNzaW9uc1xuICogQHByb3BlcnR5IHtPYmplY3QuPGNwdV93ZWlnaHQsbmV0X3dlaWdodCxvd25lcixyYW1fYnl0ZXM+fSB0b3RhbF9yZXNvdXJjZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB2b3Rlcl9pbmZvXG4gKi9cblxuLyoqXG4gKiBldmVudCBuYW1lcyBzdXBwb3J0ZWQgaW4gcGxheWVyXG4gKiBAYXV0aG9yIGtpbmdoYW5kQGZveG1haWwuY29tXG4gKiBAdHlwZSB7e0VSUl9UUkFOU0NBTF9GQUlMRUQ6IHN0cmluZ319XG4gKi9cbmNvbnN0IEVWRU5UX05BTUVTID0ge1xuICAgIEVSUl9UUkFOU0NBTF9GQUlMRUQ6IFwiRVJSX1RSQU5TQ0FMX0ZBSUxFRFwiXG59XG5cbmNvbnN0IEV2ZW50SGFuZGxlciA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnRIYW5kbGVyJylcbmNvbnN0IENoYWluSGVscGVyID0gcmVxdWlyZSgnLi9oZWxwZXJzL2NoYWluJylcbmNvbnN0IEVvc1Byb3ZpZGVyID0gcmVxdWlyZSgnLi9lb3NQcm92aWRlcicpXG5cbi8qKlxuICogUGxheWVyXG4gKi9cbmNsYXNzIFBsYXllciBleHRlbmRzIEVvc1Byb3ZpZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmV2ZW50cy5lbmFibGVFdmVudHMoRVZFTlRfTkFNRVMpO1xuICAgIH1cblxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXIoKSk7XG4gICAgfVxuXG4gICAgZ2V0IGNoYWluKCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYWluSGVscGVyKHRoaXMuZW9zQ2xpZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWNjb3VudCBpbmZvIG9mIGFueSB1c2VyLCBpZiB0aGUgYWNjb3VudCBuYW1lIG5vdCBnaXZlbiwgYWNjb3VudCBpbmZvIG9mIGN1cnJlbnQgaWRlbnRpdHkgd2lsbCByZXR1cm5cbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7QWNjb3VudEluZm99Pn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY2NvdW50SW5mbyhhY2NvdW50X25hbWUgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2hhaW4uZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lIHx8IChhd2FpdCB0aGlzLmdldElkZW50aXR5KCkpLm5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gY29kZSAtIEFjY291bnQgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0LiBUaGUgZGVmYXVsdCBjb2RlIGlzIFwiZW9zaW8udG9rZW5cIiwgd2hpY2ggaXMgdGhlIGN1cnJlbmN5IGNvZGUgb2YgZW9zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIHVzZXIncyBhY2NvdW50IG5hbWUsIG5hbWUgb2YgY3VyIGlkZW50aXR5IGJ5IGRlZmF1bHRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZ3x1bmRlZmluZWQ+fSBhc3NldCBmb3JtYXQgJzEuMDAwMCBFT1MnXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmFsYW5jZShhY2NvdW50X25hbWUgPSB1bmRlZmluZWQsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhaW4uZ2V0QmFsYW5jZShhY2NvdW50X25hbWUgfHwgKGF3YWl0IHRoaXMuZ2V0SWRlbnRpdHkoKSkubmFtZSwgY29kZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYmFsYW5jZSB2YWx1ZSBvZiBzcGVjaWZpYyBhY2NvdW50XG4gICAgICogQHBhcmFtIGNvZGUgLSBBY2NvdW50IG9mIHRoZSBjdXJyZW5jeSBjb250cmFjdC4gVGhlIGRlZmF1bHQgY29kZSBpcyBcImVvc2lvLnRva2VuXCIsIHdoaWNoIGlzIHRoZSBjdXJyZW5jeSBjb2RlIG9mIGVvc1xuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSB1c2VyJ3MgYWNjb3VudCBuYW1lLCBuYW1lIG9mIGN1ciBpZGVudGl0eSBieSBkZWZhdWx0XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBc3NldD59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmFsYW5jZUFzc2V0KGFjY291bnRfbmFtZSA9IHVuZGVmaW5lZCwgY29kZSA9IFwiZW9zaW8udG9rZW5cIikge1xuICAgICAgICBsZXQgc3RyQXNzZXQgPSBhd2FpdCB0aGlzLmdldEJhbGFuY2UoYWNjb3VudF9uYW1lLCBjb2RlKTtcbiAgICAgICAgcmV0dXJuIEFzc2V0LnBhcnNlKHN0ckFzc2V0KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyYW5zZmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCAtIGVvcyBhY2NvdW50LCBjYW4gYmUgdXNlciBvciBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWFudGl0eSAtIGVvcyBhc3NldCBmb3JtYXQsIGUucC4gXCIxLjAwMDAgRU9TXCJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVtbyAtIG1lbW9cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59IHRyYW5zYWN0aW9uRGF0YVxuICAgICAqL1xuICAgIGFzeW5jIHRyYW5zZmVyKHRhcmdldCwgcXVhbnRpdHksIG1lbW8gPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5KClcblxuICAgICAgICBjb25zdCB0cmFuc09wdGlvbnMgPSB7YXV0aG9yaXphdGlvbjogW2Ake2FjY291bnQubmFtZX1AJHthY2NvdW50LmF1dGhvcml0eX1gXX1cbiAgICAgICAgbGV0IHRyeCA9IGF3YWl0IHRoaXMuZW9zQ2xpZW50LnRyYW5zZmVyKGFjY291bnQubmFtZSwgdGFyZ2V0LCBxdWFudGl0eSwgbWVtbywgdHJhbnNPcHRpb25zKS5jYXRjaChcbiAgICAgICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdEV2ZW50KEVWRU5UX05BTUVTLkVSUl9UUkFOU0NBTF9GQUlMRUQsIGVycilcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGlmICghIXRyeCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFRyYW5zYWN0aW9uIElEOiAke3RyeC50cmFuc2FjdGlvbl9pZH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNhbGwgY29udHJhY3Qgd2l0aCB0cmFuc2ZlciAobWF0Y2ggZW9za2l0KVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdHkgLSBlb3MgYXNzZXQgZm9ybWF0LCBlLnAuIFwiMS4wMDAwIEVPU1wiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZ1bmMgLSBmdW5jdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59IHRyYW5zYWN0aW9uRGF0YVxuICAgICAqL1xuICAgIGFzeW5jIHRyYW5zY2FsKHRhcmdldCwgcXVhbnRpdHksIGZ1bmMsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNmZXIodGFyZ2V0LCBxdWFudGl0eSwgYEBbJHtmdW5jfToke2FyZ3Muam9pbignLCcpfV1gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cmFuc2NhbCB3aXRoIFwiMC4wMDAxIFNZTVwiIHRva2VuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCAtIGVvcyBhY2NvdW50LCBjYW4gYmUgdXNlciBvciBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzeW1ib2xcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnVuY1xuICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICAgKi9cbiAgICBhc3luYyB0cmFuc2dldCh0YXJnZXQsIHN5bWJvbCwgZnVuYywgLi4uYXJncykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc2NhbCh0YXJnZXQsIGAwLjAwMDEgJHtzeW1ib2x9YCwgZnVuYywgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VuZCBhY3Rpb24gdG8gYSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gYWNjb3VudCBvZiBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gZnVuY3Rpb24gbmFtZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uRGF0YSAtIGRhdGFcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fSAtIHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgYXN5bmMgY2FsbChjb2RlLCBmdW5jLCBqc29uRGF0YSkge1xuICAgICAgICBjb25zdCBhY2NvdW50ID0gYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpO1xuICAgICAgICBsZXQgdHJ4ID0gYXdhaXQgdGhpcy5jaGFpbi5jYWxsKGNvZGUsIGZ1bmMsIGpzb25EYXRhLCB7XG4gICAgICAgICAgICBhY3RvcjogYWNjb3VudC5uYW1lLFxuICAgICAgICAgICAgcGVybWlzc2lvbjogYWNjb3VudC5hdXRob3JpdHlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghIXRyeCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFRyYW5zYWN0aW9uIElEOiAke3RyeC50cmFuc2FjdGlvbl9pZH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgdHJhbnNhY3Rpb24gaW5mbywgcmV0cnkgb25jZSBwZXIgc2VjIHVudGlsIHN1Y2Nlc3NcbiAgICAgKiBAZGVwcmVjYXRlZCAtIHVzZSBlb3NwbGF5ZXIuY2hhaW4ud2FpdFR4IGluc3RlYWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHhJRFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhSb3VuZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU3Bhbk1TXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRUeCh0eElELCBtYXhSb3VuZCA9IDEyLCB0aW1lU3Bhbk1TID0gMTAwOSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jaGFpbi53YWl0VHgodHhJRCwgbWF4Um91bmQsIHRpbWVTcGFuTVMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgdGFibGVcbiAgICAgKiBAZGVwcmVjYXRlZCAtIHVzZSBlb3NwbGF5ZXIuY2hhaW4uY2hlY2tUYWJsZSBpbnN0ZWFkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lIC0gbmFtZSBvZiB0aGUgdGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhfcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59XG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tUYWJsZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBsaW1pdCA9IDEwLCBsb3dlcl9ib3VuZCA9IDAsIHVwcGVyX2JvdW5kID0gLTEsIGluZGV4X3Bvc2l0aW9uID0gMSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jaGFpbi5jaGVja1RhYmxlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGxpbWl0LCBsb3dlcl9ib3VuZCwgdXBwZXJfYm91bmQsIGluZGV4X3Bvc2l0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayByYW5nZSBpbiB0YWJsZVxuICAgICAqIEBkZXByZWNhdGVkIC0gdXNlIGVvc3BsYXllci5jaGFpbi5jaGVja1RhYmxlUmFuZ2UgaW5zdGVhZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gdGhlIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlTmFtZSAtIG5hbWUgb2YgdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBzdHJpbmd9IGZyb20gLSBzdGFydCBwb3NpdGlvbiBvciB1c2VybmFtZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhfcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn1cbiAgICAgKi9cbiAgICBhc3luYyBjaGVja1RhYmxlUmFuZ2UoY29kZSwgdGFibGVOYW1lLCBzY29wZSwgZnJvbSwgbGVuZ3RoID0gMSwgaW5kZXhfcG9zaXRpb24gPSAxKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYWluLmNoZWNrVGFibGVSYW5nZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBmcm9tLCBsZW5ndGgsIGluZGV4X3Bvc2l0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBhIGl0ZW0gaW4gYSB0YWJsZVxuICAgICAqIEBkZXByZWNhdGVkIC0gdXNlIGVvc3BsYXllci5jaGFpbi5jaGVja1RhYmxlSXRlbSBpbnN0ZWFkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleF9wb3NpdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tUYWJsZUl0ZW0oY29kZSwgdGFibGVOYW1lLCBzY29wZSwga2V5ID0gMCwgaW5kZXhfcG9zaXRpb24gPSAxKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYWluLmNoZWNrVGFibGVJdGVtKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGtleSwgaW5kZXhfcG9zaXRpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIG5hbWUgdXNpbmcgdGhlIHB1YmxpYyBrZXlcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEBwYXJhbSBwdWJLZXlcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIG5ld0FjY291bnQobmFtZSwgcHViS2V5KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLmVvc0NsaWVudC5uZXdhY2NvdW50KHtcbiAgICAgICAgICAgIGNyZWF0b3I6IChhd2FpdCB0aGlzLmdldElkZW50aXR5KCkpLm5hbWUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgb3duZXI6IHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDEsXG4gICAgICAgICAgICAgICAga2V5czogW3tcbiAgICAgICAgICAgICAgICAgICAga2V5OiBwdWJLZXksXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogMVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIGFjY291bnRzOiBbXSxcbiAgICAgICAgICAgICAgICB3YWl0czogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDEsXG4gICAgICAgICAgICAgICAga2V5czogW3tcbiAgICAgICAgICAgICAgICAgICAga2V5OiBwdWJLZXksXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogMVxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIGFjY291bnRzOiBbXSxcbiAgICAgICAgICAgICAgICB3YWl0czogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogIGdldCB2ZXJzaW9uXG4gICAgICovXG4gICAgZ2V0IHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiBcIjAuMS4yXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIGdldCBoZWxwIGluZm9cbiAgICAgKi9cbiAgICBnZXQgaGVscCgpIHtcbiAgICAgICAgbGV0IGhlbHBJbmZvID0gYFxuXFxgXFxgXFxganNcbiAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAtLS0tLSAgICAgIC0tLS0tLSAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAgICAgICAtLS0tLSAgICAgLS0tLS0gICAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAgICAgIC0tLS0tICAgLS0tLS0gICAgICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgICAgICAtLS0tLSAgLS0tLS0gICAgICAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAgICAtLS0tLS0tLS0tICAgICAgICAgICAgICAgIC0tLS0tIC0tLS0gLS0tLS0tIFxuICAgICAgICAgIC0tLS0tICAtLS0tLSAgICAgICAgICAgICAgLS0tLS0gLS0tLSAtLS0tLS1cbiAgICAgICAgIC0tLS0tICAgIC0tLS0tICAgICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgIC0tLS0tICAgICAgLS0tLS0tICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgLS0tLS0tICAgICAgIC0tLS0tLS0gICAgIC0tLS0tLSAgICAgIC0tLS0tLS1cbiAgICAgIC0tLS0tLS0tICAgICAgLS0tLS0tLS0tICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgIFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxcYFxcYFxcYFxuLS0tXG5cbiMgZW9zcGxheWVyICR7dGhpcy52ZXJzaW9ufVxuICAgICAgICBcbiMjIFVzYWdlIG9mIGVvc3BsYXllclxuXG4jIyMgRXZlbnRzXG5cbkVSUl9UUkFOU0NBTF9GQUlMRURcblxuIyMjIEFQSXNcblxuXFxgXFxgXFxganNcbmdldCB7c3RyaW5nfSBoZWxwIC8vIGdldCBoZWxwIGluZm8gb2YgdXNhZ2VcbmdldCB7c3RyaW5nfSB2ZXJzaW9uIC8vIGdldCB0aGUgdmVyc2lvbiBpbmZvXG5nZXQge0NoYWlufSBjaGFpbiAvLyBnZXQgdGhlIGNoYWluXG5cbnt2b2lkfSBlb3NwbGF5ZXIuZXZlbnQuc2V0RXZlbnQoZXZlbnQsIGZuQ2FsbGJhY2ssIGNvbnRleHQpIC8vbGlzdGVuIHRvIGEgZXZlbnRcblxuZ2V0IHtFb3N9IGVvc3BsYXllci5lb3NDbGllbnQgLy8gZ2V0IGVvcyBpbnN0YW5jZVxuYXN5bmMge0lkZW50aXR5fSBlb3NwbGF5ZXIuZ2V0SWRlbnRpdHkoKSAvLyBnZXQgaWRlbnRpdHlcblxuYXN5bmMge0FjY291bnRJbmZvfSBlb3NwbGF5ZXIuZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lID0gaWRlbnRpdHkubmFtZSkgXG4gICAgLy8gZ2V0IGFjY291bnQgaW5mbyBmb3IgYW55IHVzZXJcblxuYXN5bmMge3N0cmluZ30gZW9zcGxheWVyLmdldEJhbGFuY2UoYWNjb3VudF9uYW1lID0gdW5kZWZpbmVkLCBjb2RlID0gXCJlb3Npby50b2tlblwiKSAgXG4gICAgLy8gZ2V0IGJhbGFuY2Ugc3RyaW5nIG9mIGEgYWNjb3VudC4gZXguIFwiMS4wMDAwIEVPU1wiLCBudWxsIG1lYW5zIHRoYXQgdGhlIGFjY291bnQgZG9zZW4ndCBoYXZlIGFueSB0b2tlbixcblxuYXN5bmMge3N0cmluZ30gZW9zcGxheWVyLmdldEJhbGFuY2VBc3NldChhY2NvdW50X25hbWUgPSB1bmRlZmluZWQsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIpIFxuICAgIC8vIGdldCBiYWxhbmNlIHN0cnVjdHVyZSBvZiBhIGFjY291bnQuIGV4LiB7dmFsOjEsIHN5bTpcIkVPU1wiLCBkZWNpbWFsOjR9XG5cbmFzeW5jIHt0eH0gZW9zcGxheWVyLnRyYW5zZmVyKHRhcmdldCwgcXVhbnRpdHksIG1lbW8gPSBcIlwiKVxuICAgIC8vIHRyYW5zZmVyIHRva2VucyB0byB0YXJnZXRcblxuYXN5bmMge3R4fSBlb3NwbGF5ZXIudHJhbnNjYWwoY29kZSwgcXVhbnRpdHksIGZ1bmMsIC4uLmFyZ3MpIFxuICAgIC8vIHNlbmQgYSBhY3Rpb24gb2YgdHJhbnNjYWwgdG8gY29udHJhY3RcbiAgICBcbmFzeW5jIHt0eH0gZW9zcGxheWVyLnRyYW5zZ2V0KGNvZGUsIHN5bWJvbCwgZnVuYywgLi4uYXJncykgXG4gICAgLy8gc2VuZCBhIGFjdGlvbiBvZiB0cmFuY2FsIChxdWFudGl0eSB2YWx1ZSA9IDAuMDAwMSkgdG8gY29udHJhY3RcblxuYXN5bmMge0NvbnRyYWN0fSBlb3NwbGF5ZXIuY29udHJhY3QoY29kZSlcbiAgICAvLyBnZXQgY29udHJhY3Qgb2JqZWN0XG5cbmFzeW5jIHt0eH0gZW9zcGxheWVyLmNhbGwoY29kZSwgZnVuYywganNvbkRhdGEpXG4gICAgLy8gc2VuZCBhIGFjdGlvbiB0byBjb250cmFjdFxuXG5hc3luYyB7dGFibGV9IGVvc3BsYXllci5jaGVja1RhYmxlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGxpbWl0ID0gMTAsIGxvd2VyX2JvdW5kID0gMCwgdXBwZXJfYm91bmQgPSAtMSwgaW5kZXhfcG9zaXRpb24gPSAxKSBcbiAgICAvLyBjaGVjayBhbGwgaXRlbXMgaW4gYSB0YWJsZVxuXG5hc3luYyB7aXRlbVtdfSBlb3NwbGF5ZXIuY2hlY2tUYWJsZVJhbmdlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGZyb20sIGxlbmd0aCA9IDEsIGluZGV4X3Bvc2l0aW9uID0gMSlcbiAgICAvLyBjaGVjayBhIHJhbmdlIG9mIGl0ZW1zIGluIGEgdGFibGVcbiAgICBcbmFzeW5jIHtpdGVtfSBlb3NwbGF5ZXIuY2hlY2tUYWJsZUl0ZW0oY29kZSwgdGFibGVOYW1lLCBzY29wZSwga2V5ID0gMCwgaW5kZXhfcG9zaXRpb24gPSAxKVxuICAgIC8vIGNoZWNrIGEgc3BlY2lmaWMgaXRlbSBpbiBhIHRhYmxlIFxuXFxgXFxgXFxgXG5cbiR7dGhpcy5jaGFpbi5oZWxwfWA7XG4gICAgICAgIHJldHVybiBoZWxwSW5mbztcbiAgICB9XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllcjsiLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBBc3NldCAtIGFzc2V0IHR5cGUgb2YgZW9zXG4gKiBAYXV0aG9yIGtpbmdoYW5kQGZveG1haWwuY29tXG4gKi9cbmNsYXNzIEFzc2V0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWwsIHN5bSwgZGVjaW1hbCA9IDQpIHtcbiAgICAgICAgdGhpcy5fdmFsID0gdmFsO1xuICAgICAgICB0aGlzLl9zeW0gPSBzeW07XG4gICAgICAgIHRoaXMuX2RlY2ltYWwgPSBkZWNpbWFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB2YWx1ZVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgZ2V0IHZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgc3ltYm9sXG4gICAgICogQHJldHVybiB7Kn1cbiAgICAgKi9cbiAgICBnZXQgc3ltKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3ltO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBkZWNpbWFsXG4gICAgICogQHJldHVybiB7bnVtYmVyfCp9XG4gICAgICovXG4gICAgZ2V0IGRlY2ltYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWNpbWFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBTdHJpbmcgdmFsIHdpdGhvdXQgc3ltYm9sXG4gICAgICogQHJldHVybiB7c3RyaW5nIHwgKn1cbiAgICAgKi9cbiAgICBnZXQgdmFsU3RyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsLnRvRml4ZWQodGhpcy5kZWNpbWFsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgc3RyaW5nIHZhbCB3aXRoIHN5bWJvbCwgc3VjaCBhcyAnMS4wMDAwIEVPUydcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnZhbFN0cn0gJHt0aGlzLnN5bX1gXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgYXNzZXQgYnkgYXNzZXQgc3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgICAqIEByZXR1cm4ge0Fzc2V0fVxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZShzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgc3RyID0gc3RyLnRyaW0oKVxuICAgICAgICBsZXQgYmxhbmtQb3MgPSBzdHIuaW5kZXhPZignICcpO1xuICAgICAgICBpZiAoYmxhbmtQb3MgPCAwKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBsZXQgc3RyVmFsID0gc3RyLnNsaWNlKDAsIGJsYW5rUG9zKVxuICAgICAgICBsZXQgc3RyU3ltID0gc3RyLnNsaWNlKDEgKyBibGFua1BvcylcbiAgICAgICAgaWYgKCFzdHJWYWwgfHwgIXN0clN5bSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBkZWNpbWFsUG9zID0gc3RyLmluZGV4T2YoJy4nKTtcbiAgICAgICAgbGV0IGRlY2ltYWwgPSBkZWNpbWFsUG9zIDwgMCA/IDAgOiBibGFua1BvcyAtIGRlY2ltYWxQb3MgLSAxO1xuICAgICAgICBsZXQgdmFsID0gcGFyc2VGbG9hdChzdHJWYWwpXG5cbiAgICAgICAgcmV0dXJuIG5ldyBBc3NldCh2YWwsIHN0clN5bSwgZGVjaW1hbCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2V0IiwiJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogRXZlbnQgSGFuZGxlclxuICogQGRlc2NcbiAqIC0gb25seSBlbmFibGVkIGV2ZW50IGNhbiBiZSBlbWl0dGVkXG4gKiAtIElmIHRoZSBjYWxsYmFjayBvZiBhbiBldmVudCBpcyBub3Qgc2V0LCBhbGVydCB3aWxsIGJlIGNhbGxlZCBieSBkZWZhdWx0IG9uIHRoZSBicm93c2VyLCBhbmQgRXJyb3Igd2lsbCBiZSB0cmlnZ2VyZWQgaW4gbm9kZWpzXG4gKiBAYXV0aG9yIGtpbmdoYW5kQGZveG1haWwuY29tXG4gKi9cbmNsYXNzIEV2ZW50SGFuZGxlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdXBwb3J0ZWRFdmVudHMpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdENiID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIGxldCBzdHJUcmlnZ2VyID0gYCR7SlNPTi5zdHJpbmdpZnkodGhpcyl9IDogJHtKU09OLnN0cmluZ2lmeSh2KX1gO1xuICAgICAgICAgICAgaWYoISFhbGVydCkge1xuICAgICAgICAgICAgICAgIGFsZXJ0KHN0clRyaWdnZXIpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0clRyaWdnZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEhc3VwcG9ydGVkRXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUV2ZW50cyhzdXBwb3J0ZWRFdmVudHMpO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRNYXAgPSBBcnJheS5pc0FycmF5KHN1cHBvcnRlZEV2ZW50cykgPyB7fSA6IHN1cHBvcnRlZEV2ZW50cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGVuYWJsZSBldmVudCBuYW1lc1xuICAgICAqIEBwYXJhbSB7QXJyYXkgfCBPYmplY3R9IHN1cHBvcnRlZEV2ZW50cyAtIGtleXMgd2lsbCBiZSB1c2VkIHdoZW4gaXQncyBhbiBvYmplY3RcbiAgICAgKi9cbiAgICBlbmFibGVFdmVudHMoc3VwcG9ydGVkRXZlbnRzKSB7XG4gICAgICAgIGxldCBuZXdFdmVudEtleXMgPSBBcnJheS5pc0FycmF5KHN1cHBvcnRlZEV2ZW50cykgPyBzdXBwb3J0ZWRFdmVudHMgOiBPYmplY3Qua2V5cyhzdXBwb3J0ZWRFdmVudHMpO1xuICAgICAgICB0aGlzLl9zdXBwb3J0ZWRFdmVudHMgPSAodGhpcy5fc3VwcG9ydGVkRXZlbnRzIHx8IFtdKS5jb25jYXQobmV3RXZlbnRLZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgY2FsbGJhY2sgb2YgYW4gZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbkNhbGxiYWNrIC0gaWYgdGhlcmUgaXMgYWxyZWFkeSBhIGNhbGxiYWNrLCB0aGVuIHRoZSBuZXcgb25lIHdpbGwgY292ZXIgdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgKiBAcGFyYW0ge2FueX0gaW5zdGFuY2UgLSB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIHNldEV2ZW50KGV2ZW50LCBmbkNhbGxiYWNrLCBpbnN0YW5jZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3N1cHBvcnRlZEV2ZW50cy5maW5kKG5hbWUgPT4gbmFtZSA9PT0gZXZlbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV2ZW50IGhhbmRsZXIgOiBldmVudCAke2V2ZW50fSBhcmUgbm90IHN1cHBvcnRlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ldmVudE1hcFtldmVudF0gPSB7Y2I6IGZuQ2FsbGJhY2ssIGN0eDogY29udGV4dH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cmlnZ2VyIGFuIGV2ZW50IGJ5IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGFyZ3VtZW50c1xuICAgICAqL1xuICAgIGVtaXRFdmVudChldmVudCwgLi4uYXJncykge1xuICAgICAgICBpZiAoIXRoaXMuX3N1cHBvcnRlZEV2ZW50cy5maW5kKG5hbWUgPT4gbmFtZSA9PT0gZXZlbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV2ZW50IGhhbmRsZXIgOiBldmVudCAke2V2ZW50fSBhcmUgbm90IGZvdW5kLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGUgPSB0aGlzLl9ldmVudE1hcFtldmVudF07XG4gICAgICAgIHJldHVybiBlID8gZS5jYi5jYWxsKGUuY3R4LCAuLi5hcmdzKSA6IHRoaXMuX2RlZmF1bHRDYi5jYWxsKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEhhbmRsZXI7IiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHtmb3JNc30gPSByZXF1aXJlKFwiLi4vdXRpbHMvd2FpdFwiKVxuY29uc3QgQk4gPSByZXF1aXJlKCdiaWdudW1iZXIuanMnKS5CaWdOdW1iZXI7XG5cbi8qKlxuICogY2hhaW4gaGVscGVyLCBzdXBwb3J0ZWQgY2hhaW4gb3BlcmF0aW9uc1xuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICovXG5jbGFzcyBDaGFpbkhlbHBlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihlb3NDbGllbnQpIHtcbiAgICAgICAgdGhpcy5fZW9zID0gZW9zQ2xpZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBpbmZvIG9mIHRoZSBjaGFpbiBjb25uZWN0ZWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldEluZm8oKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5fZW9zLmdldEluZm8oe30pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgc3BlY2lmaWMgYmxvY2sgb2YgdGhlIGNoYWluXG4gICAgICogQHBhcmFtIGJsb2NrTnVtT3JJZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmxvY2soYmxvY2tOdW1PcklkKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBcImJsb2NrX251bV9vcl9pZFwiOiBibG9ja051bU9ySWRcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLl9lb3MuZ2V0QmxvY2socGFyYW1zKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvbnRyYWN0XG4gICAgICogQHBhcmFtIGNvZGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldENvbnRyYWN0KGNvZGUpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2Vvcy5jb250cmFjdChjb2RlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgYWJpIG9mIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIGNvZGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldEFiaShjb2RlKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWJpKGNvZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgZGVmaW5pdGlvbiBvZiBhIHRhYmxlIGluIHNwZWNpZmljIGNvbnRyYWN0IGFiaVxuICAgICAqIEBwYXJhbSBjb2RlXG4gICAgICogQHBhcmFtIHRhYmxlTmFtZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8VCB8IHVuZGVmaW5lZD59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGFibGVBYmkoY29kZSwgdGFibGVOYW1lKSB7XG4gICAgICAgIGxldCBhYmkgPSBhd2FpdCB0aGlzLmdldEFiaShjb2RlKTtcbiAgICAgICAgcmV0dXJuIGFiaS5hYmkudGFibGVzLmZpbmQoZGVzYyA9PiBkZXNjLm5hbWUgPT09IHRhYmxlTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWJpSnNvblRvQmluXG4gICAgICogQHBhcmFtIGNvZGVcbiAgICAgKiBAcGFyYW0gYWN0aW9uXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XG4gICAgICovXG4gICAgYXN5bmMgYWJpSnNvblRvQmluKGNvZGUsIGFjdGlvbiwgYXJncykge1xuICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgXCJjb2RlXCI6IGNvZGUsXG4gICAgICAgICAgICBcImFjdGlvblwiOiBhY3Rpb24sXG4gICAgICAgICAgICBcImFyZ3NcIjogYXJnc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2Vvcy5hYmlKc29uVG9CaW4ocGFyYW1zKSkuYmluYXJncztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWNjb3VudCBpbmZvIG9mIGFueSB1c2VyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBhY2NvdW50X25hbWUgLSBzdHJpbmcgbmFtZSBvciBpZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8e0FjY291bnRJbmZvfT59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWNjb3VudCh7YWNjb3VudF9uYW1lfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSBhY2NvdW50J3MgYWN0aW9uIGNvdW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBhY2NvdW50X25hbWUgLSBzdHJpbmcgbmFtZSBvciBpZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyPn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY3Rpb25Db3VudChhY2NvdW50X25hbWUpIHtcbiAgICAgICAgbGV0IHJlY2VudEFjdGlvbnMgPSBhd2FpdCB0aGlzLmdldFJlY2VudEFjdGlvbnMoYWNjb3VudF9uYW1lKTtcbiAgICAgICAgaWYgKCFyZWNlbnRBY3Rpb25zIHx8ICFyZWNlbnRBY3Rpb25zLmFjdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0QWN0aW9uQ291bnQgZmFpbGVkOiBjYW5ub3QgZmluZCByZWNlbnQgYWN0aW9ucyBvZiAke2FjY291bnRfbmFtZX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFjdHMgPSByZWNlbnRBY3Rpb25zLmFjdGlvbnM7XG4gICAgICAgIHJldHVybiBhY3RzLmxlbmd0aCA9PT0gMCA/IDAgOiBbYWN0cy5sZW5ndGggLSAxXS5hY2NvdW50X2FjdGlvbl9zZXE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHJlY2VudCBhY3Rpb25zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldFJlY2VudEFjdGlvbnMoYWNjb3VudF9uYW1lKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWN0aW9ucyh7YWNjb3VudF9uYW1lfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFjdGlvbnMgb2YgYW4gYWNjb3VudFxuICAgICAqIEBkZXNjIHRvIGF2b2lkIHNlYXJjaGluZyBpbiBodWdlIGFtb3VudCBhY3Rpb25zLCB0aGUgYXBwbGljYXRpb24gbGF5ZXIgc2hvdWxkIGNoZWNrIHRoZSBnZXRBY3Rpb25Db3VudCBiZWZvcmUgY2FsbGluZyB0aGkgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBhY2NvdW50X25hbWUgLSBzdHJpbmcgbmFtZSBvciBpZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFBvcyAtIHN0YXJ0IGZyb20gMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSB3aGVuIG9mZnNldCBpcyAwLCBvbmUgb2JqZWN0IHJldHVybmVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheT59IC0gW3N0YXJ0UG9zLCAuLi4sIHN0YXJ0UG9zICsgb2Zmc2V0XVxuICAgICAqL1xuICAgIGFzeW5jIGdldEFjdGlvbnMoYWNjb3VudF9uYW1lLCBzdGFydFBvcyA9IDAsIG9mZnNldCA9IDApIHtcbiAgICAgICAgbGV0IHBvcyA9IHN0YXJ0UG9zO1xuICAgICAgICBsZXQgZW5kUG9zID0gc3RhcnRQb3MgKyBvZmZzZXQ7XG4gICAgICAgIGxldCBhY3Rpb25zID0gW107XG5cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLl9lb3MuZ2V0QWN0aW9ucyh7YWNjb3VudF9uYW1lLCBwb3MsIG9mZnNldDogZW5kUG9zIC0gcG9zfSk7XG4gICAgICAgICAgICBpZiAoIXJldCB8fCAhcmV0LmFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGdldEFjdGlvbnMgZmFpbGVkOiBjYW5ub3QgZmluZCBhY3Rpb25zIG9mICR7YWNjb3VudF9uYW1lfSAocG9zOiR7cG9zfSwgb2Zmc2V0OiR7b2Zmc2V0fSlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhY3RzID0gcmV0LmFjdGlvbnM7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXRBY3Rpb25zIGZpbmQnLCBhY3RzW2FjdHMubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgICAgICBsZXQgbWF4QWN0aW9uSW5kID0gYWN0cy5sZW5ndGggPT09IDAgPyBwb3MgOiBhY3RzW2FjdHMubGVuZ3RoIC0gMV0uYWNjb3VudF9hY3Rpb25fc2VxO1xuICAgICAgICAgICAgaWYgKG1heEFjdGlvbkluZCA8PSBwb3MpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKC4uLmFjdHMpO1xuICAgICAgICAgICAgaWYgKG1heEFjdGlvbkluZCA+PSBlbmRQb3MpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9zID0gbWF4QWN0aW9uSW5kICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gY29kZSAtIEFjY291bnQgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0LiBUaGUgZGVmYXVsdCBjb2RlIGlzIFwiZW9zaW8udG9rZW5cIiwgd2hpY2ggaXMgdGhlIGN1cnJlbmN5IGNvZGUgb2YgZW9zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIHVzZXIncyBhY2NvdW50IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZ3x1bmRlZmluZWQ+fSBhc3NldCBmb3JtYXQgJzEuMDAwMCBFT1MnXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmFsYW5jZShhY2NvdW50X25hbWUsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2Vvcy5nZXRDdXJyZW5jeUJhbGFuY2UoY29kZSwgYWNjb3VudF9uYW1lKVxuICAgICAgICByZXR1cm4gcmVzdWx0WzBdID8gcmVzdWx0WzBdLnRyaW0oKSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgYSB0cmFuc2FjdGlvbiBpbmZvLCByZXRyeSBvbmNlIHBlciBzZWMgdW50aWwgc3VjY2Vzc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eElEXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFJvdW5kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTcGFuTVNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59IHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgYXN5bmMgd2FpdFR4KHR4SUQsIG1heFJvdW5kID0gMTIsIHRpbWVTcGFuTVMgPSAxMDA5KSB7IC8vIFVubWFuYWdlZCBwb2xsaW5nIHVzZXMgcHJpbWUgYXMgdGhlIGRlZmF1bHQgaW50ZXJ2YWxcbiAgICAgICAgY29uc3Qgd2FpdEZvck1zID0gKHRpbWUpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lKSk7XG4gICAgICAgIGNvbnN0IGNoZWNrVHggPSBhc3luYyAoX3R4SUQsIHJvdW5kID0gMCkgPT4geyAvLyBjYW4gb25seSB1c2UgbGFtYmRhLCBjdXogdGhpcyBpcyB1c2VkXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy5fZW9zLmdldFRyYW5zYWN0aW9uKF90eElEKTtcbiAgICAgICAgICAgICAgICBpZiAodHgpIHJldHVybiB0eDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGB3YWl0IHR4ICR7X3R4SUR9LCByZXRyeSByb3VuZDogJHtyb3VuZH0uICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocm91bmQgPj0gbWF4Um91bmQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGB3YWl0IHR4IGZhaWxlZCwgcm91bmQgb3V0LmApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB3YWl0Rm9yTXModGltZVNwYW5NUyk7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tUeChfdHhJRCwgcm91bmQgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCBjaGVja1R4KHR4SUQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNlbmQgYWN0aW9uIHRvIGEgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIGFjY291bnQgb2YgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnVuYyAtIGZ1bmN0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0ganNvbkRhdGEgLSBkYXRhXG4gICAgICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gYXV0aG9yaXphdGlvbiAtIHNob3VsZCBiZSBhbiBvYmplY3Qgd2hvIGhhcyBrZXlzIHthY3RvciwgcGVybWlzc2lvbn1cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fSAtIHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgYXN5bmMgY2FsbChjb2RlLCBmdW5jLCBqc29uRGF0YSwgLi4uYXV0aG9yaXphdGlvbikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZW9zLnRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnQ6IGNvZGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGZ1bmMsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IGF1dGhvcml6YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGpzb25EYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWxsIGl0ZW1zIGluIGEgdGFibGVcbiAgICAgKiBAZGVzYyB0aGlzIG1ldGhvZCBjYW4gYmUgdmVyeSBmYXN0IChpbmZpbml0ZWx5IGNsb3NlIHRvIG9uY2UgcnBjIHRpbWUpIHdoZW4gcHJvdmlkZSBoaW50IHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lIC0gbmFtZSBvZiB0aGUgdGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxvd2VyIC0gbG93ZXIgcG9zaXRpb24sIGNhbiBiZSBudW1iZXIgb3Igc3RyaW5nTnVtYmVyLCBjYW5ub3QgYmUgYWNjb3VudF9uYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB1cHBlciAtIGxvd2VyIHBvc2l0aW9uLCBjYW4gYmUgbnVtYmVyIG9yIHN0cmluZ051bWJlciwgY2Fubm90IGJlIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhpbnQgLSBoaW50IHRhYmxlIHRvIHNwZWVkIHVwIHNlYXJjaFxuICAgICAqIEBleGFtcGxlIGdldFRhYmxlKFwiY29udHJhY3RcIiwgXCJ0YWJsZVwiLCBcInNjb3BlXCIsIDAsIC0xLCBcIjQ2MTE2ODYwMTg0MjczODc5MDNcIiwgXCI2OTE3NTI5MDI3NjQxMDgxODU2XCIsIFwiOTIyMzM3MjAzNjg1NDc3NTgwOFwiLCBcIjEzODM1MDU4MDU1MjgyMTYzNzEyXCIpXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheT59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGFibGUoY29kZSwgdGFibGVOYW1lLCBzY29wZSwgbG93ZXIsIHVwcGVyLCAuLi5oaW50KSB7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPyBCTihsb3dlcikgOiBCTigwKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciAmJiB1cHBlciAhPT0gLTEgPyBCTih1cHBlcikgOiBCTihcIjE4NDQ2NzQ0MDczNzA5NTUxNjE1XCIpXG5cbiAgICAgICAgbGV0IHJldCA9IFtdO1xuICAgICAgICBsZXQgcG9vbCA9IFtdO1xuICAgICAgICBjb25zdCBSZXF1aXJlID0gKF9sLCBfdSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlYXJjaCAnLCBEYXRlLm5vdygpLCBfbC50b0ZpeGVkKDApLCBfdS50b0ZpeGVkKDApKTtcbiAgICAgICAgICAgIGlmIChfbC5ndGUoX3UpKSByZXR1cm47XG4gICAgICAgICAgICBsZXQgX3Byb21pc2UgPSB0aGlzLl9lb3MuZ2V0VGFibGVSb3dzKHtcbiAgICAgICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGltaXQ6IC0xLFxuICAgICAgICAgICAgICAgIGxvd2VyX2JvdW5kOiBfbC50b0ZpeGVkKDApLFxuICAgICAgICAgICAgICAgIHVwcGVyX2JvdW5kOiBfdS50b0ZpeGVkKDApLFxuICAgICAgICAgICAgfSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBfbXlJbmQgPSBwb29sLmZpbmRJbmRleCh2ID0+IHYgPT09IF9wcm9taXNlKTtcbiAgICAgICAgICAgICAgICBwb29sLnNwbGljZShfbXlJbmQsIDEpO1xuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5tb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucm93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goLi4ucmVzdWx0LnJvd3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IF9taWQgPSBfdS5taW51cyhfbCkuZGl2aWRlZEJ5KDIpLmRlY2ltYWxQbGFjZXMoMCkucGx1cyhfbCk7XG4gICAgICAgICAgICAgICAgICAgIFJlcXVpcmUoX2wsIF9taWQubWludXMoMSkpO1xuICAgICAgICAgICAgICAgICAgICBSZXF1aXJlKF9taWQsIF91KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBfbXlJbmQgPSBwb29sLmZpbmQodiA9PiB2ID09PSBfcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgcG9vbC5zcGxpY2UoX215SW5kLCAxKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcG9vbC5wdXNoKF9wcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhpbnQgfHwgaGludC5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgUmVxdWlyZShsb3dlciwgdXBwZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgWy4uLiBoaW50Lm1hcChpID0+IEJOKGkpKSwgdXBwZXJdLnJlZHVjZSgoX2wsIF9tKSA9PiB7XG4gICAgICAgICAgICAgICAgUmVxdWlyZShfbCwgX20pO1xuICAgICAgICAgICAgICAgIHJldHVybiBfbTtcbiAgICAgICAgICAgIH0sIGxvd2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChwb29sLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IGZvck1zKDUwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygnZG9uZSBzZWFyY2ggJywgRGF0ZS5ub3coKSwgbG93ZXIudG9GaXhlZCgwKSwgdXBwZXIudG9GaXhlZCgwKSk7XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgdGFibGVcbiAgICAgKiBAZGVzYyB0aGUgdGFnICdtb3JlJyBhcmUgaGFuZGxlZC4gaXQgbWVhbnMgdGhhdCB0aGUgcmVzdWx0IHdvdWxkIG5vdCBiZSB0cnVuY2F0ZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lIC0gbmFtZSBvZiB0aGUgdGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXRcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gbG93ZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gdXBwZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhfcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn1cbiAgICAgKi9cbiAgICBhc3luYyBjaGVja1RhYmxlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGxpbWl0ID0gMTAsIGxvd2VyX2JvdW5kID0gMCwgdXBwZXJfYm91bmQgPSAtMSwgaW5kZXhfcG9zaXRpb24gPSAxKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZWFyY2ggJywgRGF0ZS5ub3coKSwgbG93ZXJfYm91bmQsIHVwcGVyX2JvdW5kLCBsaW1pdCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLl9lb3MuZ2V0VGFibGVSb3dzKHtcbiAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICBjb2RlOiBjb2RlLFxuICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgdGFibGU6IHRhYmxlTmFtZSxcbiAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgbG93ZXJfYm91bmQsXG4gICAgICAgICAgICB1cHBlcl9ib3VuZCxcbiAgICAgICAgICAgIGluZGV4X3Bvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgcmV0ID0gcmVzdWx0ICYmIHJlc3VsdC5yb3dzID8gcmVzdWx0LnJvd3MgOiBbXTtcbiAgICAgICAgaWYgKHJlc3VsdC5tb3JlICYmIChsaW1pdCA8PSAwIHx8IChyZXN1bHQucm93cyAmJiByZXN1bHQucm93cy5sZW5ndGggPCBsaW1pdCkpKSB7IC8vIGRlYWwgd2l0aCAnbW9yZSdcbiAgICAgICAgICAgIGxldCBhYmkgPSBhd2FpdCB0aGlzLmdldFRhYmxlQWJpKGNvZGUsIHRhYmxlTmFtZSk7XG4gICAgICAgICAgICBsZXQga2V5ID0gYWJpLmtleV9uYW1lc1swXTtcbiAgICAgICAgICAgIGxldCBsYXJnZXN0SW5kVmFsID0gcmV0W3JldC5sZW5ndGggLSAxXVtrZXldOyAvLyB0aGUgbmV3IHN0YXJ0IGZyb20gd2hlcmUgdGhlIGxhc3Qgc2VhcmNoIGVuZC5cbiAgICAgICAgICAgIHJldHVybiByZXQuY29uY2F0KGF3YWl0IHRoaXMuY2hlY2tUYWJsZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBsaW1pdCAtIHJldC5sZW5ndGgsIEJOKGxhcmdlc3RJbmRWYWwpLnBsdXMoMSkudG9GaXhlZCgwKSwgdXBwZXJfYm91bmQsIGluZGV4X3Bvc2l0aW9uKSk7XG4gICAgICAgICAgICAvL3RvZG86IHRoZSBtZWFuaW5nIG9mICdsaW1pdCcsIHNob3VsZCBiZSBjb25zaWRlcmVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIHJhbmdlIGluIHRhYmxlXG4gICAgICogQGRlc2MgdGhlIHRhZyAnbW9yZScgYXJlIGhhbmRsZWQuIGl0IG1lYW5zIHRoYXQgdGhlIHJlc3VsdCB3b3VsZCBub3QgYmUgdHJ1bmNhdGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gdGhlIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlTmFtZSAtIG5hbWUgb2YgdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBzdHJpbmd9IGZyb20gLSBzdGFydCBwb3NpdGlvbiBvciB1c2VybmFtZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhfcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn1cbiAgICAgKi9cbiAgICBhc3luYyBjaGVja1RhYmxlUmFuZ2UoY29kZSwgdGFibGVOYW1lLCBzY29wZSwgZnJvbSwgbGVuZ3RoID0gMSwgaW5kZXhfcG9zaXRpb24gPSAxKSB7XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJhbmdlIGVycm9yOiBsZW5ndGgoJHtsZW5ndGh9KSBtdXN0IGxhcmdlciB0aGFuIDAgYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJvd3MgPSBhd2FpdCB0aGlzLmNoZWNrVGFibGUoY29kZSwgdGFibGVOYW1lLCBzY29wZSwgbGVuZ3RoLCBmcm9tLCAodHlwZW9mIGZyb20gPT09IFwibnVtYmVyXCIpID8gZnJvbSArIGxlbmd0aCA6IC0xLCBpbmRleF9wb3NpdGlvbik7XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgaXRlbSBpbiBhIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleF9wb3NpdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tUYWJsZUl0ZW0oY29kZSwgdGFibGVOYW1lLCBzY29wZSwga2V5ID0gMCkge1xuICAgICAgICBsZXQgcm93cyA9IGF3YWl0IHRoaXMuY2hlY2tUYWJsZVJhbmdlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGtleSwgMSk7XG4gICAgICAgIHJldHVybiByb3dzWzBdO1xuICAgIH1cblxuICAgIGdldCBoZWxwKCkge1xuICAgICAgICByZXR1cm4gYFxuIyMjIENoYWluIEFQSVxuXG5cXGBcXGBcXGBqc1xue09iamVjdH0gYXN5bmMgZ2V0SW5mbygpIC8vIGdldCBpbmZvIG9mIHRoZSBjaGFpbiBjb25uZWN0ZWRcbntPYmplY3R9IGFzeW5jIGdldEJsb2NrKGJsb2NrTnVtT3JJZCkgLy8gZ2V0IHNwZWNpZmljIGJsb2NrIG9mIHRoZSBjaGFpblxuXG57Q29udHJhY3R9IGFzeW5jIGdldENvbnRyYWN0KGNvZGUpIC8vIGdldCBjb250cmFjdFxue09iamVjdH0gYXN5bmMgZ2V0QWJpKGNvZGUpIC8vIGdldCBhYmkgb2YgY29udHJhY3RcbntPYmplY3R9IGFzeW5jIGdldFRhYmxlQWJpKGNvZGUsIHRhYmxlTmFtZSkgLy8gZ2V0IHRhYmxlIGFiaSBvZiBjb250cmFjdFxue09iamVjdH0gYXN5bmMgYWJpSnNvblRvQmluKGNvZGUsIGFjdGlvbiwgYXJncykgXG5cbntPYmplY3R9IGFzeW5jIGdldEFjY291bnRJbmZvKGFjY291bnRfbmFtZSkgLy8gZ2V0IGFjY291bnQgaW5mbyBvZiBhbnkgdXNlclxuXG57TnVtYmVyfSBhc3luYyBnZXRBY3Rpb25Db3VudChhY2NvdW50X25hbWUpIC8vIGdldCBhIGFjY291bnQncyBhY3Rpb24gY291bnRcbntBcnJheX0gYXN5bmMgZ2V0UmVjZW50QWN0aW9ucyhhY2NvdW50X25hbWUpIC8vIGdldCByZWNlbnQgYWN0aW9uc1xue0FycmF5fSBhc3luYyBnZXRBY3Rpb25zKGFjY291bnRfbmFtZSwgc3RhcnRQb3MgPSAwLCBvZmZzZXQgPSAwKSAvLyBnZXQgYWxsIGFjdGlvbnMgb2YgYW4gYWNjb3VudFxuXG57U3RyaW5nfSBhc3luYyBnZXRCYWxhbmNlKGFjY291bnRfbmFtZSwgY29kZSA9IFwiZW9zaW8udG9rZW5cIikgLy8gZ2V0IGJhbGFuY2Ugb2Ygc3BlY2lmaWMgYWNjb3VudFxuXG57VHh9IGFzeW5jIHdhaXRUeCh0eElELCBtYXhSb3VuZCA9IDEyLCB0aW1lU3Bhbk1TID0gMTAwOSkgLy8gY2hlY2sgYSB0cmFuc2FjdGlvbiBpbmZvLCByZXRyeSBvbmNlIHBlciBzZWMgdW50aWwgc3VjY2Vzc1xuXG57VHh9IGFzeW5jIGNhbGwoY29kZSwgZnVuYywganNvbkRhdGEsIC4uLmF1dGhvcml6YXRpb24pIC8vIHNlbmQgYWN0aW9uIHRvIGEgY29udHJhY3Rcblxue0FycmF5fSBhc3luYyBnZXRUYWJsZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBsb3dlciwgdXBwZXIsIC4uLmhpbnQpIC8vIGdldCBhbGwgaXRlbXMgaW4gYSB0YWJsZVxue0FycmF5fSBhc3luYyBjaGVja1RhYmxlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGxpbWl0ID0gMTAsIGxvd2VyX2JvdW5kID0gMCwgdXBwZXJfYm91bmQgPSAtMSwgaW5kZXhfcG9zaXRpb24gPSAxKSAvLyBjaGVjayBhIHRhYmxlXG57QXJyYXl9IGFzeW5jIGNoZWNrVGFibGVSYW5nZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBmcm9tLCBsZW5ndGggPSAxLCBpbmRleF9wb3NpdGlvbiA9IDEpIC8vIGNoZWNrIHJhbmdlIGluIHRhYmxlXG57T2JqZWN0fSBhc3luYyBjaGVja1RhYmxlSXRlbShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBrZXkgPSAwKSAvLyBjaGVjayBhIGl0ZW0gaW4gYSB0YWJsZVxuXFxgXFxgXFxgICAgXG5gXG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhaW5IZWxwZXI7IiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBmb3JNcyh0aW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBFT1NQcm92aWRlciAtIGRlZmluZWQgdGhlIE1VU1QgaW50ZXJmYWNlcyBvZiBhIHBsYXllclxuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICovXG5jbGFzcyBFT1NQcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBnZXQgb3IgY3JlYXRlIHNjYXR0ZXJcbiAgICAgKiBAcmV0dXJuIHtlb3NBUEl9XG4gICAgICovXG4gICAgZ2V0IGVvc0NsaWVudCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtZXRob2Qgbm90IHlldCBpbXBsZW1lbnRlZDogdGhpcyBpbnRlcmZhY2Ugc2hvdWxkIGJlIGltcGxlbWVudCBieSB0aGUgc3BlY2lmaWMgY2xhc3MuYClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXRJZGVudGl0eSBvZiBjdXIgc2NhdHRlciB1c2VyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7SWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRJZGVudGl0eSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtZXRob2Qgbm90IHlldCBpbXBsZW1lbnRlZDogdGhpcyBpbnRlcmZhY2Ugc2hvdWxkIGJlIGltcGxlbWVudCBieSB0aGUgc3BlY2lmaWMgY2xhc3MuYClcbiAgICAgICAgLy8gaXQgc2hvdWxkIGJlIGxpa2UgdGhhdCA6ICd7IG5hbWU6IFwibmFtZW9mdXNlclwiLCBhdXRob3JpdHk6IFwiYWN0aXZlXCIgfSdcbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFT1NQcm92aWRlcjsiXSwic291cmNlUm9vdCI6IiJ9
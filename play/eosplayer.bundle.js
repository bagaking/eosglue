!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,e){if(!w[t]||!b[t])return;for(var n in b[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(p[n]=e[n]);0==--g&&0===m&&B()}(t,n),e&&e(t,n)};var n,r=!0,i="520649e85911b8ce1d57",o=1e4,u={},a=[],s=[];function f(t){var e=k[t];if(!e)return x;var r=function(r){return e.hot.active?(k[r]?-1===k[r].parents.indexOf(t)&&k[r].parents.push(t):(a=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),a=[]),x(r)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return x[t]},set:function(e){x[t]=e}}};for(var o in x)Object.prototype.hasOwnProperty.call(x,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(t){return"ready"===l&&h("prepare"),m++,x.e(t).then(e,function(t){throw e(),t});function e(){m--,"prepare"===l&&(v[t]||A(t),0===m&&0===g&&B())}},r.t=function(t,e){return 1&e&&(t=r(t)),x.t(t,-2&e)},r}var c=[],l="idle";function h(t){l=t;for(var e=0;e<c.length;e++)c[e].call(null,t)}var d,p,y,g=0,m=0,v={},b={},w={};function _(t){return+t+""===t?+t:t}function E(t){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=t,h("check"),function(t){return t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=x.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void n(t)}e(t)}}})}(o).then(function(t){if(!t)return h("idle"),null;b={},v={},w=t.c,y=t.h,h("prepare");var e=new Promise(function(t,e){d={resolve:t,reject:e}});p={};return A(0),"prepare"===l&&0===m&&0===g&&B(),e})}function A(t){w[t]?(b[t]=!0,g++,function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=x.p+""+t+"."+i+".hot-update.js",e.appendChild(n)}(t)):v[t]=!0}function B(){h("ready");var t=d;if(d=null,t)if(r)Promise.resolve().then(function(){return C(r)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&e.push(_(n));t.resolve(e)}}function C(e){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var n,r,o,s,f;function c(t){for(var e=[t],n={},r=e.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var i=r.pop(),o=i.id,u=i.chain;if((s=k[o])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:u,moduleId:o};if(s.hot._main)return{type:"unaccepted",chain:u,moduleId:o};for(var a=0;a<s.parents.length;a++){var f=s.parents[a],c=k[f];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:u.concat([f]),moduleId:o,parentId:f};-1===e.indexOf(f)&&(c.hot._acceptedDependencies[o]?(n[f]||(n[f]=[]),d(n[f],[o])):(delete n[f],e.push(f),r.push({chain:u.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}e=e||{};var g={},m=[],v={},b=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var E in p)if(Object.prototype.hasOwnProperty.call(p,E)){var A;f=_(E);var B=!1,C=!1,F=!1,S="";switch((A=p[E]?c(f):{type:"disposed",moduleId:E}).chain&&(S="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":e.onDeclined&&e.onDeclined(A),e.ignoreDeclined||(B=new Error("Aborted because of self decline: "+A.moduleId+S));break;case"declined":e.onDeclined&&e.onDeclined(A),e.ignoreDeclined||(B=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+S));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(A),e.ignoreUnaccepted||(B=new Error("Aborted because "+f+" is not accepted"+S));break;case"accepted":e.onAccepted&&e.onAccepted(A),C=!0;break;case"disposed":e.onDisposed&&e.onDisposed(A),F=!0;break;default:throw new Error("Unexception type "+A.type)}if(B)return h("abort"),Promise.reject(B);if(C)for(f in v[f]=p[f],d(m,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,f)&&(g[f]||(g[f]=[]),d(g[f],A.outdatedDependencies[f]));F&&(d(m,[A.moduleId]),v[f]=b)}var D,T=[];for(r=0;r<m.length;r++)f=m[r],k[f]&&k[f].hot._selfAccepted&&T.push({module:f,errorHandler:k[f].hot._selfAccepted});h("dispose"),Object.keys(w).forEach(function(t){!1===w[t]&&function(t){delete installedChunks[t]}(t)});for(var O,I,M=m.slice();M.length>0;)if(f=M.pop(),s=k[f]){var j={},P=s.hot._disposeHandlers;for(o=0;o<P.length;o++)(n=P[o])(j);for(u[f]=j,s.hot.active=!1,delete k[f],delete g[f],o=0;o<s.children.length;o++){var L=k[s.children[o]];L&&((D=L.parents.indexOf(f))>=0&&L.parents.splice(D,1))}}for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(s=k[f]))for(I=g[f],o=0;o<I.length;o++)O=I[o],(D=s.children.indexOf(O))>=0&&s.children.splice(D,1);for(f in h("apply"),i=y,v)Object.prototype.hasOwnProperty.call(v,f)&&(t[f]=v[f]);var R=null;for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(s=k[f])){I=g[f];var N=[];for(r=0;r<I.length;r++)if(O=I[r],n=s.hot._acceptedDependencies[O]){if(-1!==N.indexOf(n))continue;N.push(n)}for(r=0;r<N.length;r++){n=N[r];try{n(I)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:f,dependencyId:I[r],error:t}),e.ignoreErrored||R||(R=t)}}}for(r=0;r<T.length;r++){var U=T[r];f=U.module,a=[f];try{x(f)}catch(t){if("function"==typeof U.errorHandler)try{U.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:n,originalError:t}),e.ignoreErrored||R||(R=n),R||(R=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:f,error:t}),e.ignoreErrored||R||(R=t)}}return R?(h("fail"),Promise.reject(R)):(h("idle"),new Promise(function(t){t(m)}))}var k={};function x(e){if(k[e])return k[e].exports;var r=k[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:E,apply:C,status:function(t){if(!t)return l;c.push(t)},addStatusHandler:function(t){c.push(t)},removeStatusHandler:function(t){var e=c.indexOf(t);e>=0&&c.splice(e,1)},data:u[t]};return n=void 0,e}(e),parents:(s=a,a=[],s),children:[]};return t[e].call(r.exports,r,r.exports,f(e)),r.l=!0,r.exports}x.m=t,x.c=k,x.d=function(t,e,n){x.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},x.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},x.t=function(t,e){if(1&e&&(t=x(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(x.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)x.d(n,r,function(e){return t[e]}.bind(null,r));return n},x.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return x.d(e,"a",e),e},x.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},x.p="",x.h=function(){return i},f(140)(x.s=140)}([function(t,e,n){var r=n(2),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function u(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=u),o(i,u),u.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},u.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},u.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},u.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(172),i=n(173),o=n(99);function u(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return f(this,t,e,n)}function f(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(s.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?a(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(c(e),t=a(t,e<0?0:0|d(e)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function p(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(t).length;default:if(r)return U(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=s.from(e,r)),s.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,u=1,a=t.length,s=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,a/=2,s/=2,n/=2}function f(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(i){var c=-1;for(o=n;o<a;o++)if(f(t,o)===f(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===s)return c*u}else-1!==c&&(o-=o-c),c=-1}else for(n+s>a&&(n=a-s),o=n;o>=0;o--){for(var l=!0,h=0;h<s;h++)if(f(t,o+h)!==f(e,h)){l=!1;break}if(l)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var u=0;u<r;++u){var a=parseInt(e.substr(2*u,2),16);if(isNaN(a))return u;t[n+u]=a}return u}function b(t,e,n,r){return z(U(e,t.length-n),t,n,r)}function w(t,e,n,r){return z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function _(t,e,n,r){return w(t,e,n,r)}function E(t,e,n,r){return z(q(e),t,n,r)}function A(t,e,n,r){return z(function(t,e){for(var n,r,i,o=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function B(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function C(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,u,a,s,f=t[i],c=null,l=f>239?4:f>223?3:f>191?2:1;if(i+l<=n)switch(l){case 1:f<128&&(c=f);break;case 2:128==(192&(o=t[i+1]))&&(s=(31&f)<<6|63&o)>127&&(c=s);break;case 3:o=t[i+1],u=t[i+2],128==(192&o)&&128==(192&u)&&(s=(15&f)<<12|(63&o)<<6|63&u)>2047&&(s<55296||s>57343)&&(c=s);break;case 4:o=t[i+1],u=t[i+2],a=t[i+3],128==(192&o)&&128==(192&u)&&128==(192&a)&&(s=(15&f)<<18|(63&o)<<12|(63&u)<<6|63&a)>65535&&s<1114112&&(c=s)}null===c?(c=65533,l=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=l}return function(t){var e=t.length;if(e<=k)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=k));return n}(r)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=u(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,n){return f(null,t,e,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},s.allocUnsafe=function(t){return l(null,t)},s.allocUnsafeSlow=function(t){return l(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=s.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var u=t[n];if(!s.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,i),i+=u.length}return r},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return S(this,e,n);case"utf8":case"utf-8":return C(this,e,n);case"ascii":return x(this,e,n);case"latin1":case"binary":return F(this,e,n);case"base64":return B(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,n,r,i){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,u=n-e,a=Math.min(o,u),f=this.slice(r,i),c=t.slice(e,n),l=0;l<a;++l)if(f[l]!==c[l]){o=f[l],u=c[l];break}return o<u?-1:u<o?1:0},s.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},s.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},s.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},s.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return _(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function x(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function F(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function S(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=N(t[o]);return i}function D(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function T(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,i,o){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function I(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function M(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function j(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(t,e,n,r,o){return o||j(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,o){return o||j(t,0,n,8),i.write(t,e,n,r,52,8),n+8}s.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=s.prototype;else{var i=e-t;n=new s(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},s.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},s.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},s.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},s.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},s.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},s.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},s.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);O(this,t,e,n,i-1,-i)}var o=0,u=1,a=0;for(this[e]=255&t;++o<n&&(u*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/u>>0)-a&255;return e+n},s.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);O(this,t,e,n,i-1,-i)}var o=n-1,u=1,a=0;for(this[e+o]=255&t;--o>=0&&(u*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/u>>0)-a&255;return e+n},s.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,n){return P(this,t,e,!0,n)},s.prototype.writeFloatBE=function(t,e,n){return P(this,t,e,!1,n)},s.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},s.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},s.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!s.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},s.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var u=s.isBuffer(t)?t:U(new s(t,r).toString()),a=u.length;for(o=0;o<n-e;++o)this[o+e]=u[o%a]}return this};var R=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],u=0;u<r;++u){if((n=t.charCodeAt(u))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function q(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(R,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(7))},function(t,e,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function r(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var o=n(196),u=Object.prototype.hasOwnProperty,a=Array.prototype.slice,s="foo"===function(){}.name;function f(t){return Object.prototype.toString.call(t)}function c(t){return!i(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var l=t.exports=m,h=/\s*function\s+([^\(\s]*)\s*/;function d(t){if(o.isFunction(t)){if(s)return t.name;var e=t.toString().match(h);return e&&e[1]}}function p(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function y(t){if(s||!o.isFunction(t))return o.inspect(t);var e=d(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,n,r,i){throw new l.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:i})}function m(t,e){t||g(t,!0,e,"==",l.ok)}function v(t,e,n,u){if(t===e)return!0;if(i(t)&&i(e))return 0===r(t,e);if(o.isDate(t)&&o.isDate(e))return t.getTime()===e.getTime();if(o.isRegExp(t)&&o.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(c(t)&&c(e)&&f(t)===f(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===r(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var s=(u=u||{actual:[],expected:[]}).actual.indexOf(t);return-1!==s&&s===u.expected.indexOf(e)||(u.actual.push(t),u.expected.push(e),function(t,e,n,r){if(null===t||void 0===t||null===e||void 0===e)return!1;if(o.isPrimitive(t)||o.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=b(t),u=b(e);if(i&&!u||!i&&u)return!1;if(i)return t=a.call(t),e=a.call(e),v(t,e,n);var s,f,c=E(t),l=E(e);if(c.length!==l.length)return!1;for(c.sort(),l.sort(),f=c.length-1;f>=0;f--)if(c[f]!==l[f])return!1;for(f=c.length-1;f>=0;f--)if(s=c[f],!v(t[s],e[s],n,r))return!1;return!0}(t,e,n,u))}return n?t===e:t==e}function b(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function w(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function _(t,e,n,r){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!i&&g(i,n,"Missing expected exception"+r);var u="string"==typeof r,a=!t&&o.isError(i),s=!t&&i&&!n;if((a&&u&&w(i,n)||s)&&g(i,n,"Got unwanted exception"+r),t&&i&&n&&!w(i,n)||!t&&i)throw i}l.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return p(y(t.actual),128)+" "+t.operator+" "+p(y(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,i=d(e),o=r.indexOf("\n"+i);if(o>=0){var u=r.indexOf("\n",o+1);r=r.substring(u+1)}this.stack=r}}},o.inherits(l.AssertionError,Error),l.fail=g,l.ok=m,l.equal=function(t,e,n){t!=e&&g(t,e,n,"==",l.equal)},l.notEqual=function(t,e,n){t==e&&g(t,e,n,"!=",l.notEqual)},l.deepEqual=function(t,e,n){v(t,e,!1)||g(t,e,n,"deepEqual",l.deepEqual)},l.deepStrictEqual=function(t,e,n){v(t,e,!0)||g(t,e,n,"deepStrictEqual",l.deepStrictEqual)},l.notDeepEqual=function(t,e,n){v(t,e,!1)&&g(t,e,n,"notDeepEqual",l.notDeepEqual)},l.notDeepStrictEqual=function t(e,n,r){v(e,n,!0)&&g(e,n,r,"notDeepStrictEqual",t)},l.strictEqual=function(t,e,n){t!==e&&g(t,e,n,"===",l.strictEqual)},l.notStrictEqual=function(t,e,n){t===e&&g(t,e,n,"!==",l.notStrictEqual)},l.throws=function(t,e,n){_(!0,t,e,n)},l.doesNotThrow=function(t,e,n){_(!1,t,e,n)},l.ifError=function(t){if(t)throw t};var E=Object.keys||function(t){var e=[];for(var n in t)u.call(t,n)&&e.push(n);return e}}).call(this,n(7))},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e,n){"use strict";var r=n(128),i=n(257),o=Object.prototype.toString;function u(t){return"[object Array]"===o.call(t)}function a(t){return null!==t&&"object"==typeof t}function s(t){return"[object Function]"===o.call(t)}function f(t,e){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),u(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}t.exports={isArray:u,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:i,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:s,isStream:function(t){return a(t)&&s(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],n);return e},extend:function(t,e,n){return f(e,function(e,i){t[i]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){var r=n(58)("wks"),i=n(43),o=n(10).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var s,f=[],c=!1,l=-1;function h(){c&&s&&(c=!1,s.length?f=s.concat(f):l=-1,f.length&&d())}function d(){if(!c){var t=a(h);c=!0;for(var e=f.length;e;){for(s=f,f=[];++l<e;)s&&s[l].run();l=-1,e=f.length}s=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new p(t,e)),1!==f.length||c||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(115);n(199),t.exports=r},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(0).Buffer,i=n(106).Transform,o=n(68).StringDecoder;function u(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(1)(u,i),u.prototype.update=function(t,e,n){"string"==typeof t&&(t=r.from(t,e));var i=this._update(t);return this.hashMode?this:(n&&(i=this._toString(i,n)),i)},u.prototype.setAutoPadding=function(){},u.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},u.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},u.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},u.prototype._transform=function(t,e,n){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{n(r)}},u.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},u.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},u.prototype._toString=function(t,e,n){if(this._decoder||(this._decoder=new o(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return n&&(r+=this._decoder.end()),r},t.exports=u},function(t,e,n){"use strict";var r=n(45),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=l;var o=n(33);o.inherits=n(1);var u=n(107),a=n(67);o.inherits(l,u);for(var s=i(a.prototype),f=0;f<s.length;f++){var c=s[f];l.prototype[c]||(l.prototype[c]=a.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);u.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),l.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";var r=n(46),i=n(206);t.exports={sha1:function(t,e){return r("sha1").update(t).digest(e)},sha256:function(t,e){return r("sha256").update(t).digest(e)},sha512:function(t,e){return r("sha512").update(t).digest(e)},HmacSHA256:function(t,e){return i("sha256",e).update(t).digest()},ripemd160:function(t){return r("rmd160").update(t).digest()}}},function(t,e,n){var r=n(19),i=n(42);t.exports=n(20)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(29),i=n(91),o=n(54),u=Object.defineProperty;e.f=n(20)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(41)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(150),i=n(53);t.exports=function(t){return r(i(t))}},function(t,e,n){var r,i,o;
/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */i=[n(174)],void 0===(o="function"==typeof(r=function(t){"use strict";var e=function(t,n,i){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===n&&(n=e.DEFAULT_ENDIAN),void 0===i&&(i=e.DEFAULT_NOASSERT),!i){if((t|=0)<0)throw RangeError("Illegal capacity");n=!!n,i=!!i}this.buffer=0===t?r:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=n,this.noAssert=i};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var n=e.prototype;n.__isByteBuffer__,Object.defineProperty(n,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var r=new ArrayBuffer(0),i=String.fromCharCode;function o(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function u(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+i.apply(String,t);t.length+arguments.length>1024&&(e.push(i.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function a(t,e,n,r,i){var o,u,a=8*i-r-1,s=(1<<a)-1,f=s>>1,c=-7,l=n?i-1:0,h=n?-1:1,d=t[e+l];for(l+=h,o=d&(1<<-c)-1,d>>=-c,c+=a;c>0;o=256*o+t[e+l],l+=h,c-=8);for(u=o&(1<<-c)-1,o>>=-c,c+=r;c>0;u=256*u+t[e+l],l+=h,c-=8);if(0===o)o=1-f;else{if(o===s)return u?NaN:1/0*(d?-1:1);u+=Math.pow(2,r),o-=f}return(d?-1:1)*u*Math.pow(2,o-r)}function s(t,e,n,r,i,o){var u,a,s,f=8*o-i-1,c=(1<<f)-1,l=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-u))<1&&(u--,s*=2),(e+=u+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(u++,s/=2),u+l>=c?(a=0,u=c):u+l>=1?(a=(e*s-1)*Math.pow(2,i),u+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),u=0));i>=8;t[n+d]=255&a,d+=p,a/=256,i-=8);for(u=u<<i|a,f+=i;f>0;t[n+d]=255&u,d+=p,u/=256,f-=8);t[n+d-p]|=128*y}e.accessor=function(){return Uint8Array},e.allocate=function(t,n,r){return new e(t,n,r)},e.concat=function(t,n,r,i){"boolean"!=typeof n&&"string"==typeof n||(i=r,r=n,n=void 0);for(var o,u=0,a=0,s=t.length;a<s;++a)e.isByteBuffer(t[a])||(t[a]=e.wrap(t[a],n)),(o=t[a].limit-t[a].offset)>0&&(u+=o);if(0===u)return new e(0,r,i);var f,c=new e(u,r,i);for(a=0;a<s;)(o=(f=t[a++]).limit-f.offset)<=0||(c.view.set(f.view.subarray(f.offset,f.limit),c.offset),c.offset+=o);return c.limit=c.offset,c.offset=0,c},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,r,i,o){if("string"!=typeof r&&(o=i,i=r,r=void 0),"string"==typeof t)switch(void 0===r&&(r="utf8"),r){case"base64":return e.fromBase64(t,i);case"hex":return e.fromHex(t,i);case"binary":return e.fromBinary(t,i);case"utf8":return e.fromUTF8(t,i);case"debug":return e.fromDebug(t,i);default:throw Error("Unsupported encoding: "+r)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var u;if(e.isByteBuffer(t))return(u=n.clone.call(t)).markedOffset=-1,u;if(t instanceof Uint8Array)u=new e(0,i,o),t.length>0&&(u.buffer=t.buffer,u.offset=t.byteOffset,u.limit=t.byteOffset+t.byteLength,u.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)u=new e(0,i,o),t.byteLength>0&&(u.buffer=t,u.offset=0,u.limit=t.byteLength,u.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(u=new e(t.length,i,o)).limit=t.length;for(var a=0;a<t.length;++a)u.view[a]=t[a]}return u},n.writeBitSet=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,i=e,o=t.length,u=o>>3,a=0;for(e+=this.writeVarint32(o,e);u--;)r=1&!!t[a++]|(1&!!t[a++])<<1|(1&!!t[a++])<<2|(1&!!t[a++])<<3|(1&!!t[a++])<<4|(1&!!t[a++])<<5|(1&!!t[a++])<<6|(1&!!t[a++])<<7,this.writeByte(r,e++);if(a<o){var s=0;for(r=0;a<o;)r|=(1&!!t[a++])<<s++;this.writeByte(r,e++)}return n?(this.offset=e,this):e-i},n.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var n,r=this.readVarint32(t),i=r.value,o=i>>3,u=0,a=[];for(t+=r.length;o--;)n=this.readByte(t++),a[u++]=!!(1&n),a[u++]=!!(2&n),a[u++]=!!(4&n),a[u++]=!!(8&n),a[u++]=!!(16&n),a[u++]=!!(32&n),a[u++]=!!(64&n),a[u++]=!!(128&n);if(u<i){var s=0;for(n=this.readByte(t++);u<i;)a[u++]=!!(n>>s++&1)}return e&&(this.offset=t),a},n.readBytes=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var r=this.slice(e,e+t);return n&&(this.offset+=t),r},n.writeBytes=n.append,n.writeInt8=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,n&&(this.offset+=1),this},n.writeByte=n.writeInt8,n.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=this.view[t];return 128==(128&n)&&(n=-(255-n+1)),e&&(this.offset+=1),n},n.readByte=n.readInt8,n.writeUint8=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,n&&(this.offset+=1),this},n.writeUInt8=n.writeUint8,n.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=this.view[t];return e&&(this.offset+=1),n},n.readUInt8=n.readUint8,n.writeInt16=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),n&&(this.offset+=2),this},n.writeShort=n.writeInt16,n.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t],n|=this.view[t+1]<<8):(n=this.view[t]<<8,n|=this.view[t+1]),32768==(32768&n)&&(n=-(65535-n+1)),e&&(this.offset+=2),n},n.readShort=n.readInt16,n.writeUint16=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),n&&(this.offset+=2),this},n.writeUInt16=n.writeUint16,n.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t],n|=this.view[t+1]<<8):(n=this.view[t]<<8,n|=this.view[t+1]),e&&(this.offset+=2),n},n.readUInt16=n.readUint16,n.writeInt32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),n&&(this.offset+=4),this},n.writeInt=n.writeInt32,n.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0):(n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0),n|=0,e&&(this.offset+=4),n},n.readInt=n.readInt32,n.writeUint32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),n&&(this.offset+=4),this},n.writeUInt32=n.writeUint32,n.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0):(n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0),e&&(this.offset+=4),n},n.readUInt32=n.readUint32,t&&(n.writeInt64=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=e.low,u=e.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=u>>>24&255,this.view[n+2]=u>>>16&255,this.view[n+1]=u>>>8&255,this.view[n]=255&u):(this.view[n]=u>>>24&255,this.view[n+1]=u>>>16&255,this.view[n+2]=u>>>8&255,this.view[n+3]=255&u,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeLong=n.writeInt64,n.readInt64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var o=new t(r,i,!1);return n&&(this.offset+=8),o},n.readLong=n.readInt64,n.writeUint64=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=e.low,u=e.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=u>>>24&255,this.view[n+2]=u>>>16&255,this.view[n+1]=u>>>8&255,this.view[n]=255&u):(this.view[n]=u>>>24&255,this.view[n+1]=u>>>16&255,this.view[n+2]=u>>>8&255,this.view[n+3]=255&u,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeUInt64=n.writeUint64,n.readUint64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var o=new t(r,i,!0);return n&&(this.offset+=8),o},n.readUInt64=n.readUint64),n.writeFloat32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,s(this.view,t,e,this.littleEndian,23,4),n&&(this.offset+=4),this},n.writeFloat=n.writeFloat32,n.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=a(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),n},n.readFloat=n.readFloat32,n.writeFloat64=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=8,s(this.view,t,e,this.littleEndian,52,8),n&&(this.offset+=8),this},n.writeDouble=n.writeFloat64,n.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var n=a(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),n},n.readDouble=n.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},n.writeVarint32=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,o=e.calculateVarint32(t);n+=o;var u=this.buffer.byteLength;for(n>u&&this.resize((u*=2)>n?u:n),n-=o,t>>>=0;t>=128;)i=127&t|128,this.view[n++]=i,t>>>=7;return this.view[n++]=t,r?(this.offset=n,this):o},n.writeVarint32ZigZag=function(t,n){return this.writeVarint32(e.zigZagEncode32(t),n)},n.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n,r=0,i=0;do{if(!this.noAssert&&t>this.limit){var o=Error("Truncated");throw o.truncated=!0,o}n=this.view[t++],r<5&&(i|=(127&n)<<7*r),++r}while(0!=(128&n));return i|=0,e?(this.offset=t,i):{value:i,length:r}},n.readVarint32ZigZag=function(t){var n=this.readVarint32(t);return"object"==typeof n?n.value=e.zigZagDecode32(n.value):n=e.zigZagDecode32(n),n},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var n=e.toInt()>>>0,r=e.shiftRightUnsigned(28).toInt()>>>0,i=e.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==r?n<16384?n<128?1:2:n<1<<21?3:4:r<16384?r<128?5:6:r<1<<21?7:8:i<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},n.writeVarint64=function(n,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof n)n=t.fromNumber(n);else if("string"==typeof n)n=t.fromString(n);else if(!(n&&n instanceof t))throw TypeError("Illegal value: "+n+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof n?n=t.fromNumber(n,!1):"string"==typeof n?n=t.fromString(n,!1):!1!==n.unsigned&&(n=n.toSigned());var o=e.calculateVarint64(n),u=n.toInt()>>>0,a=n.shiftRightUnsigned(28).toInt()>>>0,s=n.shiftRightUnsigned(56).toInt()>>>0;r+=o;var f=this.buffer.byteLength;switch(r>f&&this.resize((f*=2)>r?f:r),r-=o,o){case 10:this.view[r+9]=s>>>7&1;case 9:this.view[r+8]=9!==o?128|s:127&s;case 8:this.view[r+7]=8!==o?a>>>21|128:a>>>21&127;case 7:this.view[r+6]=7!==o?a>>>14|128:a>>>14&127;case 6:this.view[r+5]=6!==o?a>>>7|128:a>>>7&127;case 5:this.view[r+4]=5!==o?128|a:127&a;case 4:this.view[r+3]=4!==o?u>>>21|128:u>>>21&127;case 3:this.view[r+2]=3!==o?u>>>14|128:u>>>14&127;case 2:this.view[r+1]=2!==o?u>>>7|128:u>>>7&127;case 1:this.view[r]=1!==o?128|u:127&u}return i?(this.offset+=o,this):o},n.writeVarint64ZigZag=function(t,n){return this.writeVarint64(e.zigZagEncode64(t),n)},n.readVarint64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=e,i=0,o=0,u=0,a=0;if(a=this.view[e++],i=127&a,128&a&&(a=this.view[e++],i|=(127&a)<<7,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],i|=(127&a)<<14,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],i|=(127&a)<<21,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],o=127&a,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],o|=(127&a)<<7,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],o|=(127&a)<<14,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],o|=(127&a)<<21,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],u=127&a,(128&a||this.noAssert&&void 0===a)&&(a=this.view[e++],u|=(127&a)<<7,128&a||this.noAssert&&void 0===a))))))))))throw Error("Buffer overrun");var s=t.fromBits(i|o<<28,o>>>4|u<<24,!1);return n?(this.offset=e,s):{value:s,length:e-r}},n.readVarint64ZigZag=function(n){var r=this.readVarint64(n);return r&&r.value instanceof t?r.value=e.zigZagDecode64(r.value):r=e.zigZagDecode64(r),r}),n.writeCString=function(t,e){var n=void 0===e;n&&(e=this.offset);var r,i=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(r=0;r<i;++r)if(0===t.charCodeAt(r))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}i=c.calculateUTF16asUTF8(o(t))[1],e+=i+1;var u=this.buffer.byteLength;return e>u&&this.resize((u*=2)>e?u:e),e-=i+1,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,n?(this.offset=e,this):i},n.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n,r=t,i=-1;return c.decodeUTF8toUTF16(function(){if(0===i)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(i=this.view[t++])?null:i}.bind(this),n=u(),!0),e?(this.offset=t,n()):{string:n(),length:t-r}},n.writeIString=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,i=e;r=c.calculateUTF16asUTF8(o(t),this.noAssert)[1],e+=4+r;var u=this.buffer.byteLength;if(e>u&&this.resize((u*=2)>e?u:e),e-=4+r,this.littleEndian?(this.view[e+3]=r>>>24&255,this.view[e+2]=r>>>16&255,this.view[e+1]=r>>>8&255,this.view[e]=255&r):(this.view[e]=r>>>24&255,this.view[e+1]=r>>>16&255,this.view[e+2]=r>>>8&255,this.view[e+3]=255&r),e+=4,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),e!==i+4+r)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+r));return n?(this.offset=e,this):e-i},n.readIString=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=t,i=this.readUint32(t),o=this.readUTF8String(i,e.METRICS_BYTES,t+=4);return t+=o.length,n?(this.offset=t,o.string):{string:o.string,length:t-r}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",n.writeUTF8String=function(t,e){var n,r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i=e;n=c.calculateUTF16asUTF8(o(t))[1],e+=n;var u=this.buffer.byteLength;return e>u&&this.resize((u*=2)>e?u:e),e-=n,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),r?(this.offset=e,this):e-i},n.writeString=n.writeUTF8String,e.calculateUTF8Chars=function(t){return c.calculateUTF16asUTF8(o(t))[0]},e.calculateUTF8Bytes=function(t){return c.calculateUTF16asUTF8(o(t))[1]},e.calculateString=e.calculateUTF8Bytes,n.readUTF8String=function(t,n,r){"number"==typeof n&&(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),void 0===n&&(n=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var o,a=0,s=r;if(n===e.METRICS_CHARS){if(o=u(),c.decodeUTF8(function(){return a<t&&r<this.limit?this.view[r++]:null}.bind(this),function(t){++a,c.UTF8toUTF16(t,o)}),a!==t)throw RangeError("Illegal range: Truncated data, "+a+" == "+t);return i?(this.offset=r,o()):{string:o(),length:r-s}}if(n===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+"+t+") <= "+this.buffer.byteLength)}var f=r+t;if(c.decodeUTF8toUTF16(function(){return r<f?this.view[r++]:null}.bind(this),o=u(),this.noAssert),r!==f)throw RangeError("Illegal range: Truncated data, "+r+" == "+f);return i?(this.offset=r,o()):{string:o(),length:r-s}}throw TypeError("Unsupported metrics: "+n)},n.readString=n.readUTF8String,n.writeVString=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,u,a=n;i=c.calculateUTF16asUTF8(o(t),this.noAssert)[1],u=e.calculateVarint32(i),n+=u+i;var s=this.buffer.byteLength;if(n>s&&this.resize((s*=2)>n?s:n),n-=u+i,n+=this.writeVarint32(i,n),c.encodeUTF16toUTF8(o(t),function(t){this.view[n++]=t}.bind(this)),n!==a+i+u)throw RangeError("Illegal range: Truncated data, "+n+" == "+(n+i+u));return r?(this.offset=n,this):n-a},n.readVString=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=t,i=this.readVarint32(t),o=this.readUTF8String(i.value,e.METRICS_BYTES,t+=i.length);return t+=o.length,n?(this.offset=t,o.string):{string:o.string,length:t-r}},n.append=function(t,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,n));var o=t.limit-t.offset;if(o<=0)return this;r+=o;var u=this.buffer.byteLength;return r>u&&this.resize((u*=2)>r?u:r),r-=o,this.view.set(t.view.subarray(t.offset,t.limit),r),t.offset+=o,i&&(this.offset+=o),this},n.appendTo=function(t,e){return t.append(this,e),this},n.assert=function(t){return this.noAssert=!t,this},n.capacity=function(){return this.buffer.byteLength},n.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},n.clone=function(t){var n=new e(0,this.littleEndian,this.noAssert);return t?(n.buffer=new ArrayBuffer(this.buffer.byteLength),n.view=new Uint8Array(n.buffer)):(n.buffer=this.buffer,n.view=this.view),n.offset=this.offset,n.markedOffset=this.markedOffset,n.limit=this.limit,n},n.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var n=e-t;if(0===n)return this.buffer=r,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(n),o=new Uint8Array(i);return o.set(this.view.subarray(t,e)),this.buffer=i,this.view=o,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=n,this},n.copy=function(t,n){if(void 0===t&&(t=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(t===n)return new e(0,this.littleEndian,this.noAssert);var r=n-t,i=new e(r,this.littleEndian,this.noAssert);return i.offset=0,i.limit=r,i.markedOffset>=0&&(i.markedOffset-=t),this.copyTo(i,0,t,n),i},n.copyTo=function(t,n,r,i){var o,u;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(n=(u=void 0===n)?t.offset:0|n,r=(o=void 0===r)?this.offset:0|r,i=void 0===i?this.limit:0|i,n<0||n>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+n+" <= "+t.buffer.byteLength);if(r<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+r+" <= "+this.buffer.byteLength);var a=i-r;return 0===a?t:(t.ensureCapacity(n+a),t.view.set(this.view.subarray(r,i),n),o&&(this.offset+=a),u&&(t.offset+=a),this)},n.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},n.fill=function(t,e,n){var r=void 0===e;if(r&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(e>=n)return this;for(;e<n;)this.view[e++]=t;return r&&(this.offset=e),this},n.flip=function(){return this.limit=this.offset,this.offset=0,this},n.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},n.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},n.LE=function(t){return this.littleEndian=void 0===t||!!t,this},n.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},n.prepend=function(t,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,n));var o=t.limit-t.offset;if(o<=0)return this;var u=o-r;if(u>0){var a=new ArrayBuffer(this.buffer.byteLength+u),s=new Uint8Array(a);s.set(this.view.subarray(r,this.buffer.byteLength),o),this.buffer=a,this.view=s,this.offset+=u,this.markedOffset>=0&&(this.markedOffset+=u),this.limit+=u,r+=u}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),r-o),t.offset=t.limit,i&&(this.offset-=o),this},n.prependTo=function(t,e){return t.prepend(this,e),this},n.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},n.remaining=function(){return this.limit-this.offset},n.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},n.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),n=new Uint8Array(e);n.set(this.view),this.buffer=e,this.view=n}return this},n.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e?this:(Array.prototype.reverse.call(this.view.subarray(t,e)),this)},n.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},n.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var n=this.clone();return n.offset=t,n.limit=e,n},n.toBuffer=function(t){var e=this.offset,n=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal limit: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(!t&&0===e&&n===this.buffer.byteLength)return this.buffer;if(e===n)return r;var i=new ArrayBuffer(n-e);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(e,n),0),i},n.toArrayBuffer=n.toBuffer,n.toString=function(t,e,n){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(n=e=t="utf8"),t){case"utf8":return this.toUTF8(e,n);case"base64":return this.toBase64(e,n);case"hex":return this.toHex(e,n);case"binary":return this.toBinary(e,n);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var f=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],n=[],r=0,i=e.length;r<i;++r)n[e[r]]=r;return t.encode=function(t,n){for(var r,i;null!==(r=t());)n(e[r>>2&63]),i=(3&r)<<4,null!==(r=t())?(n(e[63&((i|=r>>4&15)|r>>4&15)]),i=(15&r)<<2,null!==(r=t())?(n(e[63&(i|r>>6&3)]),n(e[63&r])):(n(e[63&i]),n(61))):(n(e[63&i]),n(61),n(61))},t.decode=function(t,e){var r,i,o;function u(t){throw Error("Illegal character code: "+t)}for(;null!==(r=t());)if(void 0===(i=n[r])&&u(r),null!==(r=t())&&(void 0===(o=n[r])&&u(r),e(i<<2>>>0|(48&o)>>4),null!==(r=t()))){if(void 0===(i=n[r])){if(61===r)break;u(r)}if(e((15&o)<<4>>>0|(60&i)>>2),null!==(r=t())){if(void 0===(o=n[r])){if(61===r)break;u(r)}e((3&i)<<6>>>0|o)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();n.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var n;return f.encode(function(){return t<e?this.view[t++]:null}.bind(this),n=u()),n()},e.fromBase64=function(t,n){if("string"!=typeof t)throw TypeError("str");var r=new e(t.length/4*3,n),i=0;return f.decode(o(t),function(t){r.view[i++]=t}),r.limit=i,r},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},n.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var n=[],r=[];t<e;)n.push(this.view[t++]),n.length>=1024&&(r.push(String.fromCharCode.apply(String,n)),n=[]);return r.join("")+String.fromCharCode.apply(String,n)},e.fromBinary=function(t,n){if("string"!=typeof t)throw TypeError("str");for(var r,i=0,o=t.length,u=new e(o,n);i<o;){if((r=t.charCodeAt(i))>255)throw RangeError("illegal char code: "+r);u.view[i++]=r}return u.limit=o,u},n.toDebug=function(t){for(var e,n=-1,r=this.buffer.byteLength,i="",o="",u="";n<r;){if(-1!==n&&(e=this.view[n],i+=e<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(o+=e>32&&e<127?String.fromCharCode(e):".")),++n,t&&n>0&&n%16==0&&n!==r){for(;i.length<51;)i+=" ";u+=i+o+"\n",i=o=""}n===this.offset&&n===this.limit?i+=n===this.markedOffset?"!":"|":n===this.offset?i+=n===this.markedOffset?"[":"<":n===this.limit?i+=n===this.markedOffset?"]":">":i+=n===this.markedOffset?"'":t||0!==n&&n!==r?" ":""}if(t&&" "!==i){for(;i.length<51;)i+=" ";u+=i+o+"\n"}return t?u:i},e.fromDebug=function(t,n,r){for(var i,o,u=t.length,a=new e((u+1)/3|0,n,r),s=0,f=0,c=!1,l=!1,h=!1,d=!1,p=!1;s<u;){switch(i=t.charAt(s++)){case"!":if(!r){if(l||h||d){p=!0;break}l=h=d=!0}a.offset=a.markedOffset=a.limit=f,c=!1;break;case"|":if(!r){if(l||d){p=!0;break}l=d=!0}a.offset=a.limit=f,c=!1;break;case"[":if(!r){if(l||h){p=!0;break}l=h=!0}a.offset=a.markedOffset=f,c=!1;break;case"<":if(!r){if(l){p=!0;break}l=!0}a.offset=f,c=!1;break;case"]":if(!r){if(d||h){p=!0;break}d=h=!0}a.limit=a.markedOffset=f,c=!1;break;case">":if(!r){if(d){p=!0;break}d=!0}a.limit=f,c=!1;break;case"'":if(!r){if(h){p=!0;break}h=!0}a.markedOffset=f,c=!1;break;case" ":c=!1;break;default:if(!r&&c){p=!0;break}if(o=parseInt(i+t.charAt(s++),16),!r&&(isNaN(o)||o<0||o>255))throw TypeError("Illegal str: Not a debug encoded string");a.view[f++]=o,c=!0}if(p)throw TypeError("Illegal str: Invalid symbol at "+s)}if(!r){if(!l||!d)throw TypeError("Illegal str: Missing offset or limit");if(f<a.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+f+" < "+u)}return a},n.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var n,r=new Array(e-t);t<e;)(n=this.view[t++])<16?r.push("0",n.toString(16)):r.push(n.toString(16));return r.join("")},e.fromHex=function(t,n,r){if(!r){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,o=t.length,u=new e(o/2|0,n),a=0,s=0;a<o;a+=2){if(i=parseInt(t.substring(a,a+2),16),!r&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");u.view[s++]=i}return u.limit=s,u};var c=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var n=null;for("number"==typeof t&&(n=t,t=function(){return null});null!==n||null!==(n=t());)n<128?e(127&n):n<2048?(e(n>>6&31|192),e(63&n|128)):n<65536?(e(n>>12&15|224),e(n>>6&63|128),e(63&n|128)):(e(n>>18&7|240),e(n>>12&63|128),e(n>>6&63|128),e(63&n|128)),n=null},decodeUTF8:function(t,e){for(var n,r,i,o,u=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(n=t());)if(0==(128&n))e(n);else if(192==(224&n))null===(r=t())&&u([n,r]),e((31&n)<<6|63&r);else if(224==(240&n))(null===(r=t())||null===(i=t()))&&u([n,r,i]),e((15&n)<<12|(63&r)<<6|63&i);else{if(240!=(248&n))throw RangeError("Illegal starting byte: "+n);(null===(r=t())||null===(i=t())||null===(o=t()))&&u([n,r,i,o]),e((7&n)<<18|(63&r)<<12|(63&i)<<6|63&o)}},UTF16toUTF8:function(t,e){for(var n,r=null;null!==(n=null!==r?r:t());)n>=55296&&n<=57343&&null!==(r=t())&&r>=56320&&r<=57343?(e(1024*(n-55296)+r-56320+65536),r=null):e(n);null!==r&&e(r)},UTF8toUTF16:function(t,e){var n=null;for("number"==typeof t&&(n=t,t=function(){return null});null!==n||null!==(n=t());)n<=65535?e(n):(e(55296+((n-=65536)>>10)),e(n%1024+56320)),n=null},encodeUTF16toUTF8:function(e,n){t.UTF16toUTF8(e,function(e){t.encodeUTF8(e,n)})},decodeUTF8toUTF16:function(e,n){t.decodeUTF8(e,function(e){t.UTF8toUTF16(e,n)})},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,n=0;null!==(e=t());)n+=e<128?1:e<2048?2:e<65536?3:4;return n},calculateUTF16asUTF8:function(e){var n=0,r=0;return t.UTF16toUTF8(e,function(t){++n,r+=t<128?1:t<2048?2:t<65536?3:4}),[n,r]}};return t}();return n.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var n;try{c.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),n=u())}catch(n){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return n()},e.fromUTF8=function(t,n,r){if(!r&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var i=new e(c.calculateUTF16asUTF8(o(t),!0)[1],n,r),u=0;return c.encodeUTF16toUTF8(o(t),function(t){i.view[u++]=t}),i.limit=u,i},e})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(0).Buffer;function i(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var n=this._block,i=this._blockSize,o=t.length,u=this._len,a=0;a<o;){for(var s=u%i,f=Math.min(o-a,i-s),c=0;c<f;c++)n[s+c]=t[a+c];a+=f,(u+=f)%i==0&&this._update(n)}return this._len+=o,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(250),i=n(85),o=i.modules.ecc;e.Eos=i,e.Ecc=o,e.Debug=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(24);e.createLogger=function(t){return{verbose:r.Debug("verbose:"+t),info:r.Debug("info:"+t),warning:r.Debug("warning:"+t),error:r.Debug("error:"+t)}};var i=r.Debug.disable();""===i?r.Debug.enable("info:*,warning:*,error:*"):r.Debug.enable(i)},function(t,e,n){t.exports=n(280)},function(t,e){function n(t,e,n,r,i,o,u){try{var a=t[o](u),s=a.value}catch(t){return void n(t)}a.done?e(s):Promise.resolve(s).then(r,i)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise(function(i,o){var u=t.apply(e,r);function a(t){n(u,i,o,a,s,"next",t)}function s(t){n(u,i,o,a,s,"throw",t)}a(void 0)})}}},function(t,e,n){"use strict";e.__esModule=!0;var r=u(n(143)),i=u(n(160)),o="function"==typeof i.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function u(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===o(r.default)?function(t){return void 0===t?"undefined":o(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":o(t)}},function(t,e,n){var r=n(30);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports={}},function(t,e,n){(function(e){t.exports=function(t,n){for(var r=Math.min(t.length,n.length),i=new e(r),o=0;o<r;++o)i[o]=t[o]^n[o];return i}}).call(this,n(2).Buffer)},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(3),u=n(70),a=n(12),s=u.getCurveByName("secp256k1"),f=n(17),c=n(35),l=s.G,h=s.n;function d(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";if("string"==typeof t){var r=d.fromString(t,n);return o(null!=r,"Invalid public key"),r}if(e.isBuffer(t))return d.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&t.Q)return d(t.Q);function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.compressed;return t.getEncoded(e)}o.equal(void 0===t?"undefined":i(t),"object","Invalid public key"),o.equal(i(t.compressed),"boolean","Invalid public key");return{Q:t,toString:function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"EOS")+c.checkEncode(p())},toUncompressed:function(){var e=t.getEncoded(!1),n=u.Point.decodeFrom(s,e);return d.fromPoint(n)},toBuffer:p,child:function(n){console.error("Deprecated warning: PublicKey.child"),o(e.isBuffer(n),"Buffer required: offset"),o.equal(n.length,32,"offset length"),n=e.concat([p(),n]),n=f.sha256(n);var r=a.fromBuffer(n);if(r.compareTo(h)>=0)throw new Error("Child offset went out of bounds, try again");var i=l.multiply(r),u=t.add(i);if(s.isInfinity(u))throw new Error("Child offset derived to an invalid key, try again");return d.fromPoint(u)},toHex:function(){return p().toString("hex")}}}t.exports=d,d.isValid=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return d(t,e),!0}catch(t){return!1}},d.fromBinary=function(t){return d.fromBuffer(new e(t,"binary"))},d.fromBuffer=function(t){return d(u.Point.decodeFrom(s,t))},d.fromPoint=function(t){return d(t)},d.fromString=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return d.fromStringOrThrow(t,e)}catch(t){return null}},d.fromStringOrThrow=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";o.equal(void 0===t?"undefined":i(t),"string","public_key");var n=t.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===n)return new RegExp("^"+e).test(t)&&(t=t.substring(e.length)),d.fromBuffer(c.checkDecode(t));o(3===n.length,"Expecting public key like: PUB_K1_base58pubkey..");var u=r(n,3),a=u[1],s=u[2];return o.equal(a,"K1","K1 private key expected"),d.fromBuffer(c.checkDecode(s,a))},d.fromHex=function(t){return d.fromBuffer(new e(t,"hex"))},d.fromStringHex=function(t){return d.fromString(new e(t,"hex"))}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(209),o=n(3),u=n(100),a=n(17);t.exports={random32ByteBuffer:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.cpuEntropyBits,i=void 0===n?0:n,s=t.safe,h=void 0===s||s;o.equal(void 0===i?"undefined":r(i),"number","cpuEntropyBits"),o.equal(void 0===h?"undefined":r(h),"boolean","boolean"),h&&o(f>=128,"Call initialize() to add entropy");var d=[];return d.push(u(32)),d.push(e.from(l(i))),d.push(c),d.push(function(){var t=Array(u(101)).join();try{t+=(new Date).toString()+" "+window.screen.height+" "+window.screen.width+" "+window.screen.colorDepth+"  "+window.screen.availHeight+" "+window.screen.availWidth+" "+window.screen.pixelDepth+navigator.language+" "+window.location+" "+window.history.length;for(var n,r=0;r<navigator.mimeTypes.length;r++)n=navigator.mimeTypes[r],t+=n.description+" "+n.type+" "+n.suffixes+" "}catch(e){t+=a.sha256((new Date).toString())}for(var i=new e(t),o=t+=i.toString("binary")+" "+(new Date).toString(),s=Date.now();Date.now()-s<25;)o=a.sha256(o);return o}()),a.sha256(e.concat(d))},addEntropy:function(){o.equal(c.length,101,"externalEntropyArray");for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];f+=e.length;var r=!0,i=!1,u=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done);r=!0){var h=a.value,d=s++%101,p=c[d]+=h;p>9007199254740991&&(c[d]=0)}}catch(t){i=!0,u=t}finally{try{!r&&l.return&&l.return()}finally{if(i)throw u}}},cpuEntropy:l,entropyCount:function(){return f},checkDecode:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;o(null!=t,"private key expected");var r=new e(i.decode(t)),u=r.slice(-4),s=r.slice(0,-4),f=void 0;if("sha256x2"===n)f=a.sha256(a.sha256(s)).slice(0,4);else{var c=[s];n&&c.push(e.from(n)),f=a.ripemd160(e.concat(c)).slice(0,4)}if(u.toString()!==f.toString())throw new Error("Invalid checksum, "+u.toString("hex")+" != "+f.toString("hex"));return s},checkEncode:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(o(e.isBuffer(t),"expecting keyBuffer<Buffer>"),"sha256x2"===n){var r=a.sha256(a.sha256(t)).slice(0,4);return i.encode(e.concat([t,r]))}var u=[t];n&&u.push(e.from(n));var s=a.ripemd160(e.concat(u)).slice(0,4);return i.encode(e.concat([t,s]))}};var s=0,f=0,c=u(101);function l(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:128,e=[],n=null,r=0;e.length<t;){var i=h();if(null!=n){var o=i-n;if(Math.abs(o)<1){r++;continue}var u=Math.floor(d(Math.abs(o))+1);if(u<4){u<2&&r++;continue}e.push(o)}n=i}if(r>10){var a=Number(r/t*100).toFixed(2);console.warn("WARN: "+a+"% low CPU entropy re-sampled")}return e}function h(){for(var t=Date.now(),e=0,n=0;Date.now()<t+7+1;)n=Math.sin(Math.sqrt(Math.log(++e+n)));return e}var d=function(t){return Math.log(t)/Math.LN2}}).call(this,n(2).Buffer)},function(t,e){t.exports=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WALLET_SUPPORT=e.BLOCKCHAIN_SUPPORT=void 0;e.BLOCKCHAIN_SUPPORT="blockchain_support";e.WALLET_SUPPORT="wallet_support"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BlockchainsArray=e.Blockchains=void 0;var r={EOS:"eos",ETH:"eth",TRX:"trx"};e.Blockchains=r;var i=Object.keys(r).map(function(t){return{key:t,value:r[t]}});e.BlockchainsArray=i},function(t,e,n){"use strict";var r=n(171),i=n(214),o=Object.assign({},r,i);t.exports=o},function(t,e){t.exports=!0},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(0).Buffer;function i(t){r.isBuffer(t)||(t=r.from(t));for(var e=t.length/4|0,n=new Array(e),i=0;i<e;i++)n[i]=t.readUInt32BE(4*i);return n}function o(t){for(;0<t.length;t++)t[0]=0}function u(t,e,n,r,i){for(var o,u,a,s,f=n[0],c=n[1],l=n[2],h=n[3],d=t[0]^e[0],p=t[1]^e[1],y=t[2]^e[2],g=t[3]^e[3],m=4,v=1;v<i;v++)o=f[d>>>24]^c[p>>>16&255]^l[y>>>8&255]^h[255&g]^e[m++],u=f[p>>>24]^c[y>>>16&255]^l[g>>>8&255]^h[255&d]^e[m++],a=f[y>>>24]^c[g>>>16&255]^l[d>>>8&255]^h[255&p]^e[m++],s=f[g>>>24]^c[d>>>16&255]^l[p>>>8&255]^h[255&y]^e[m++],d=o,p=u,y=a,g=s;return o=(r[d>>>24]<<24|r[p>>>16&255]<<16|r[y>>>8&255]<<8|r[255&g])^e[m++],u=(r[p>>>24]<<24|r[y>>>16&255]<<16|r[g>>>8&255]<<8|r[255&d])^e[m++],a=(r[y>>>24]<<24|r[g>>>16&255]<<16|r[d>>>8&255]<<8|r[255&p])^e[m++],s=(r[g>>>24]<<24|r[d>>>16&255]<<16|r[p>>>8&255]<<8|r[255&y])^e[m++],[o>>>=0,u>>>=0,a>>>=0,s>>>=0]}var a=[0,1,2,4,8,16,32,64,128,27,54],s=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var n=[],r=[],i=[[],[],[],[]],o=[[],[],[],[]],u=0,a=0,s=0;s<256;++s){var f=a^a<<1^a<<2^a<<3^a<<4;f=f>>>8^255&f^99,n[u]=f,r[f]=u;var c=t[u],l=t[c],h=t[l],d=257*t[f]^16843008*f;i[0][u]=d<<24|d>>>8,i[1][u]=d<<16|d>>>16,i[2][u]=d<<8|d>>>24,i[3][u]=d,d=16843009*h^65537*l^257*c^16843008*u,o[0][f]=d<<24|d>>>8,o[1][f]=d<<16|d>>>16,o[2][f]=d<<8|d>>>24,o[3][f]=d,0===u?u=a=1:(u=c^t[t[t[h^c]]],a^=t[t[a]])}return{SBOX:n,INV_SBOX:r,SUB_MIX:i,INV_SUB_MIX:o}}();function f(t){this._key=i(t),this._reset()}f.blockSize=16,f.keySize=32,f.prototype.blockSize=f.blockSize,f.prototype.keySize=f.keySize,f.prototype._reset=function(){for(var t=this._key,e=t.length,n=e+6,r=4*(n+1),i=[],o=0;o<e;o++)i[o]=t[o];for(o=e;o<r;o++){var u=i[o-1];o%e==0?(u=u<<8|u>>>24,u=s.SBOX[u>>>24]<<24|s.SBOX[u>>>16&255]<<16|s.SBOX[u>>>8&255]<<8|s.SBOX[255&u],u^=a[o/e|0]<<24):e>6&&o%e==4&&(u=s.SBOX[u>>>24]<<24|s.SBOX[u>>>16&255]<<16|s.SBOX[u>>>8&255]<<8|s.SBOX[255&u]),i[o]=i[o-e]^u}for(var f=[],c=0;c<r;c++){var l=r-c,h=i[l-(c%4?0:4)];f[c]=c<4||l<=4?h:s.INV_SUB_MIX[0][s.SBOX[h>>>24]]^s.INV_SUB_MIX[1][s.SBOX[h>>>16&255]]^s.INV_SUB_MIX[2][s.SBOX[h>>>8&255]]^s.INV_SUB_MIX[3][s.SBOX[255&h]]}this._nRounds=n,this._keySchedule=i,this._invKeySchedule=f},f.prototype.encryptBlockRaw=function(t){return u(t=i(t),this._keySchedule,s.SUB_MIX,s.SBOX,this._nRounds)},f.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),n=r.allocUnsafe(16);return n.writeUInt32BE(e[0],0),n.writeUInt32BE(e[1],4),n.writeUInt32BE(e[2],8),n.writeUInt32BE(e[3],12),n},f.prototype.decryptBlock=function(t){var e=(t=i(t))[1];t[1]=t[3],t[3]=e;var n=u(t,this._invKeySchedule,s.INV_SUB_MIX,s.INV_SBOX,this._nRounds),o=r.allocUnsafe(16);return o.writeUInt32BE(n[0],0),o.writeUInt32BE(n[3],4),o.writeUInt32BE(n[2],8),o.writeUInt32BE(n[1],12),o},f.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},t.exports.AES=f},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,u,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(a-1),u=0;u<o.length;)o[u++]=arguments[u];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(11))},function(t,e,n){"use strict";var r=n(1),i=n(69),o=n(117),u=n(118),a=n(15);function s(t){a.call(this,"digest"),this._hash=t}r(s,a),s.prototype._update=function(t){this._hash.update(t)},s.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new o:new s(u(t))}},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var o=n(70),u=o.Point,a=o.getCurveByName("secp256k1"),s=n(12),f=n(3),c=n(17),l=n(34),h=n(35),d=n(46),p=n(211);a.G,a.n;function y(t){if("string"==typeof t)return y.fromString(t);if(e.isBuffer(t))return y.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&s.isBigInteger(t.d))return y(t.d);if(!s.isBigInteger(t))throw new TypeError("Invalid private key");function n(){var t=o();return t=e.concat([new e([128]),t]),h.checkEncode(t,"sha256x2")}var r=void 0;function o(){return t.toBuffer(32)}return{d:t,toWif:n,toString:function(){return n()},toPublic:function(){if(r)return r;var e=a.G.multiply(t);return r=l.fromPoint(e)},toBuffer:o,getSharedSecret:function(t){var e=(t=l(t)).toUncompressed().toBuffer(),n=u.fromAffine(a,s.fromBuffer(e.slice(1,33)),s.fromBuffer(e.slice(33,65))),r=o(),i=n.multiply(s.fromBuffer(r)).affineX.toBuffer({size:32});return c.sha512(i)},getChildKey:function(t){return y(d("sha256").update(o()).update(t).digest())}}}function g(t){f.equal(void 0===t?"undefined":i(t),"string","privateStr");var e=t.match(/^PVT_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===e){var n=h.checkDecode(t,"sha256x2"),o=n.readUInt8(0);f.equal(128,o,"Expected version 128, instead got "+o);return{privateKey:y.fromBuffer(n.slice(1)),format:"WIF",keyType:"K1"}}f(3===e.length,"Expecting private key like: PVT_K1_base58privateKey..");var u=r(e,3),a=u[1],s=u[2];return f.equal(a,"K1","K1 private key expected"),{privateKey:y.fromBuffer(h.checkDecode(s,a)),format:"PVT",keyType:a}}t.exports=y,y.fromHex=function(t){return y.fromBuffer(new e(t,"hex"))},y.fromBuffer=function(t){if(!e.isBuffer(t))throw new Error("Expecting parameter to be a Buffer type");if(33===t.length&&1===t[32]&&(t=t.slice(0,-1)),32!==t.length)throw new Error("Expecting 32 bytes, instead got "+t.length);return y(s.fromBuffer(t))},y.fromSeed=function(t){if("string"!=typeof t)throw new Error("seed must be of type string");return y.fromBuffer(c.sha256(t))},y.isWif=function(t){try{return f("WIF"===g(t).format),!0}catch(t){return!1}},y.isValid=function(t){try{return y(t),!0}catch(t){return!1}},y.fromWif=function(t){return console.log("PrivateKey.fromWif is deprecated, please use PrivateKey.fromString"),y.fromString(t)},y.fromString=function(t){return g(t).privateKey},y.randomKey=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return y.initialize().then(function(){return y.fromBuffer(h.random32ByteBuffer({cpuEntropyBits:t}))})},y.unsafeRandomKey=function(){return Promise.resolve(y.fromBuffer(h.random32ByteBuffer({safe:!1})))};var m=!1;y.initialize=p(function(){m||(function(){var t=y(c.sha256("")),e="key comparison test failed on a known private key";f.equal(t.toWif(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e),f.equal(t.toString(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e);var n=t.toPublic();f.equal(n.toString(),"EOS859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM","pubkey string comparison test failed on a known public key"),v(function(){return y.fromString(t.toWif())},"converting known wif from string"),v(function(){return y.fromString(t.toString())},"converting known pvt from string"),v(function(){return l.fromString(n.toString())},"converting known public key from string"),!0}(),h.addEntropy.apply(h,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(h.cpuEntropy())),f(h.entropyCount()>=128,"insufficient entropy"),m=!0)});var v=function(t,e){try{t()}catch(t){throw t.message=e+" ==> "+t.message,t}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};function u(t){return new Promise(function(e){setTimeout(e,t)})}Object.defineProperty(e,"__esModule",{value:!0}),e.forMs=u,e.forCondition=function(t,e){return void 0===e&&(e=100),i(this,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return t()?[2]:[4,u(e)];case 1:return n.sent(),[3,0];case 2:return[2]}})})};var a=function(t){function e(e,n){var r=t.call(this,e)||this;return r.message=e,r.ms=n,r.name="TimeoutError",r}return r(e,t),e}(Error);e.TimeoutError=a,e.timeoutPromise=function(t,e,n){return i(this,void 0,void 0,function(){var r,i;return o(this,function(o){return i=new Promise(function(e,i){r=setTimeout(function(){n&&n(t),i(new a("Timed out in "+t+" ms.",t))},t)}),[2,Promise.race([Promise.resolve(e),i]).then(function(t){return clearTimeout(r),t},function(t){throw clearTimeout(r),t})]})})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(249))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(74)),r(n(84)),r(n(298)),r(n(303)),r(n(49))},function(t,e,n){"use strict";var r=n(145)(!0);n(89)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(30);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(95),i=n(59);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(58)("keys"),i=n(43);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){var r=n(13),i=n(10),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(40)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(19).f,i=n(14),o=n(9)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){n(157);for(var r=n(10),i=n(18),o=n(31),u=n(9)("toStringTag"),a="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),s=0;s<a.length;s++){var f=a[s],c=r[f],l=c&&c.prototype;l&&!l[u]&&i(l,u,f),o[f]=o.Array}},function(t,e,n){e.f=n(9)},function(t,e,n){var r=n(10),i=n(13),o=n(40),u=n(62),a=n(19).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,u,a,s,f;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(o(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),u=(f=n.slice()).length,s=0;s<u;s++)f[s].apply(this,a);return!0},n.prototype.addListener=function(t,e){var u;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(u=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&u>0&&this._events[t].length>u&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,o,u,a;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(u=(n=this._events[t]).length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(a=u;a-- >0;)if(n[a]===e||n[a].listener&&n[a].listener===e){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){(e=t.exports=n(107)).Stream=e,e.Readable=e,e.Writable=n(67),e.Duplex=n(16),e.Transform=n(110),e.PassThrough=n(189)},function(t,e,n){"use strict";(function(e,r,i){var o=n(45);function u(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var a,s=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;v.WritableState=m;var f=n(33);f.inherits=n(1);var c={deprecate:n(188)},l=n(108),h=n(0).Buffer,d=i.Uint8Array||function(){};var p,y=n(109);function g(){}function m(t,e){a=a||n(16),t=t||{};var r=e instanceof a;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(f||0===f)?f:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===t.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(B,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),B(t,e))}(t,n,r,e,i);else{var u=E(n);u||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?s(w,t,n,u,i):w(t,n,u,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new u(this)}function v(t){if(a=a||n(16),!(p.call(v,this)||this instanceof a))return new v(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),l.call(this)}function b(t,e,n,r,i,o,u){e.writelen=r,e.writecb=u,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function w(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),B(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var a=0,s=!0;n;)i[a]=n,n.isBuf||(s=!1),n=n.next,a+=1;i.allBuffers=s,b(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new u(e),e.bufferedRequestCount=0}else{for(;n;){var f=n.chunk,c=n.encoding,l=n.callback;if(b(t,e,!1,e.objectMode?1:f.length,f,c,l),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function E(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function A(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),B(t,e)})}function B(t,e){var n=E(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(A,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}f.inherits(v,l),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===v&&(t&&t._writableState instanceof m)}})):p=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r=this._writableState,i=!1,u=!r.objectMode&&function(t){return h.isBuffer(t)||t instanceof d}(t);return u&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(n=e,e=null),u?e="buffer":e||(e=r.defaultEncoding),"function"!=typeof n&&(n=g),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(u||function(t,e,n,r){var i=!0,u=!1;return null===n?u=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(u=new TypeError("Invalid non-string/buffer chunk")),u&&(t.emit("error",u),o.nextTick(r,u),i=!1),i}(this,r,t,n))&&(r.pendingcb++,i=function(t,e,n,r,i,o){if(!n){var u=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,n));return e}(e,r,i);r!==u&&(n=!0,i="buffer",r=u)}var a=e.objectMode?1:r.length;e.length+=a;var s=e.length<e.highWaterMark;s||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,a,r,i,o);return s}(this,r,u,t,e,n)),i},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,B(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(11),n(186).setImmediate,n(7))},function(t,e,n){"use strict";var r=n(0).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=s,this.end=f,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=c,this.end=l,e=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function u(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function s(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function l(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=u(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=u(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=u(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";var r=n(1),i=n(113),o=n(0).Buffer,u=new Array(16);function a(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function s(t,e){return t<<e|t>>>32-e}function f(t,e,n,r,i,o,u){return s(t+(e&n|~e&r)+i+o|0,u)+e|0}function c(t,e,n,r,i,o,u){return s(t+(e&r|n&~r)+i+o|0,u)+e|0}function l(t,e,n,r,i,o,u){return s(t+(e^n^r)+i+o|0,u)+e|0}function h(t,e,n,r,i,o,u){return s(t+(n^(e|~r))+i+o|0,u)+e|0}r(a,i),a.prototype._update=function(){for(var t=u,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var n=this._a,r=this._b,i=this._c,o=this._d;r=h(r=h(r=h(r=h(r=l(r=l(r=l(r=l(r=c(r=c(r=c(r=c(r=f(r=f(r=f(r=f(r,i=f(i,o=f(o,n=f(n,r,i,o,t[0],3614090360,7),r,i,t[1],3905402710,12),n,r,t[2],606105819,17),o,n,t[3],3250441966,22),i=f(i,o=f(o,n=f(n,r,i,o,t[4],4118548399,7),r,i,t[5],1200080426,12),n,r,t[6],2821735955,17),o,n,t[7],4249261313,22),i=f(i,o=f(o,n=f(n,r,i,o,t[8],1770035416,7),r,i,t[9],2336552879,12),n,r,t[10],4294925233,17),o,n,t[11],2304563134,22),i=f(i,o=f(o,n=f(n,r,i,o,t[12],1804603682,7),r,i,t[13],4254626195,12),n,r,t[14],2792965006,17),o,n,t[15],1236535329,22),i=c(i,o=c(o,n=c(n,r,i,o,t[1],4129170786,5),r,i,t[6],3225465664,9),n,r,t[11],643717713,14),o,n,t[0],3921069994,20),i=c(i,o=c(o,n=c(n,r,i,o,t[5],3593408605,5),r,i,t[10],38016083,9),n,r,t[15],3634488961,14),o,n,t[4],3889429448,20),i=c(i,o=c(o,n=c(n,r,i,o,t[9],568446438,5),r,i,t[14],3275163606,9),n,r,t[3],4107603335,14),o,n,t[8],1163531501,20),i=c(i,o=c(o,n=c(n,r,i,o,t[13],2850285829,5),r,i,t[2],4243563512,9),n,r,t[7],1735328473,14),o,n,t[12],2368359562,20),i=l(i,o=l(o,n=l(n,r,i,o,t[5],4294588738,4),r,i,t[8],2272392833,11),n,r,t[11],1839030562,16),o,n,t[14],4259657740,23),i=l(i,o=l(o,n=l(n,r,i,o,t[1],2763975236,4),r,i,t[4],1272893353,11),n,r,t[7],4139469664,16),o,n,t[10],3200236656,23),i=l(i,o=l(o,n=l(n,r,i,o,t[13],681279174,4),r,i,t[0],3936430074,11),n,r,t[3],3572445317,16),o,n,t[6],76029189,23),i=l(i,o=l(o,n=l(n,r,i,o,t[9],3654602809,4),r,i,t[12],3873151461,11),n,r,t[15],530742520,16),o,n,t[2],3299628645,23),i=h(i,o=h(o,n=h(n,r,i,o,t[0],4096336452,6),r,i,t[7],1126891415,10),n,r,t[14],2878612391,15),o,n,t[5],4237533241,21),i=h(i,o=h(o,n=h(n,r,i,o,t[12],1700485571,6),r,i,t[3],2399980690,10),n,r,t[10],4293915773,15),o,n,t[1],2240044497,21),i=h(i,o=h(o,n=h(n,r,i,o,t[8],1873313359,6),r,i,t[15],4264355552,10),n,r,t[6],2734768916,15),o,n,t[13],1309151649,21),i=h(i,o=h(o,n=h(n,r,i,o,t[4],4149444226,6),r,i,t[11],3174756917,10),n,r,t[2],718787259,15),o,n,t[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+i|0,this._d=this._d+o|0},a.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=o.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=a},function(t,e,n){var r=n(114),i=n(116),o=n(200);t.exports={Curve:i,Point:r,getCurveByName:o}},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(215),o=n(220),u=n(3),a=o.create;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!==(void 0===t?"undefined":r(t)))throw new TypeError("definitions is a required parameter");if(e.customTypes)for(var n in t=Object.assign({},t),e.customTypes)delete t[n];var o=i(e),u=a(t,o),c=u.errors,l=u.structs;return{errors:c,structs:l,types:o,extend:function(e){return function t(e,n){var r=Object.assign({},e,n),i=a(r,o),u=i.structs;return{errors:i.errors,structs:u,extend:function(e){return t(r,e)},fromBuffer:s(o,u),toBuffer:f(o,u)}}(t,e)},fromBuffer:s(o,l),toBuffer:f(o,l)}};var s=function(t,n){return function(i,a){u.equal(void 0===i?"undefined":r(i),"string","typeName (type or struct name)"),"string"==typeof a&&(a=e.from(a,"hex")),u(e.isBuffer(a),"expecting buf<hex|Buffer>");var s=t[i];return s=s?s():n[i],u(s,"missing type or struct: "+i),o.fromBuffer(s,a)}},f=function(t,e){return function(n,i){u.equal(void 0===n?"undefined":r(n),"string","typeName (type or struct name)"),u(null!=i,"value is required");var a=t[n];return a=a?a():e[n],u(a,"missing type or struct: "+n),o.toBuffer(a,i)}};t.exports.fromBuffer=o.fromBuffer,t.exports.toBuffer=o.toBuffer}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=o(n(73)),i=o(n(28));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(39),a=u.Signature,s=u.PublicKey,f=n(71),c=n(22),l=n(3),h=n(126),d=n(127),p=(d.isName,d.encodeName),y=d.decodeName,g=d.DecimalPad,m=d.DecimalImply,v=d.DecimalUnimply,b=d.printAsset,w=d.parseAsset;t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],n=function(e,n){var r=t.abiCache.abi(n),i=!0,o=!1,u=void 0;try{for(var a,s=r.abi.actions[Symbol.iterator]();!(i=(a=s.next()).done);i=!0){var f=a.value;if(f.name===e){var c=r.structs[f.type];if(null!=c)return c}}}catch(t){o=!0,u=t}finally{try{!i&&s.return&&s.return()}finally{if(o)throw u}}var l=r.structs[e];if(null!=l)return l;throw new Error("Missing ABI action: "+e)},r=null==t.forceActionDataHex||t.forceActionDataHex,i=Object.assign({},D(t),T(n),O(t),I(n,r),t.override),o={name:function(){return[_]},public_key:function(){return[E(A)]},symbol:function(){return[B]},symbol_code:function(){return[C]},extended_symbol:function(){return[k]},asset:function(){return[x]},extended_asset:function(){return[F]},signature:function(){return[E(S)]}},u=Object.assign({},o,t.customTypes);(t=Object.assign({override:i},{customTypes:u},t)).sort=Object.assign({},t.sort),t.sort["action.authorization"]=!0,t.sort["signed_transaction.signature"]=!0,t.sort["authority.accounts"]=!0,t.sort["authority.keys"]=!0;var a=Object.assign({},h,e),s=f(a,t),c=s.structs,l=s.types,d=s.errors,p=s.fromBuffer,y=s.toBuffer;if(0!==d.length)throw new Error(JSON.stringify(d,null,4));return{structs:c,types:l,fromBuffer:p,toBuffer:y}};var _=function(t){return{fromByteBuffer:function(t){return y(t.readUint64(),!1)},appendByteBuffer:function(t,e){t.writeUint64(p(e,!1))},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"":e}}},E=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t,n,r){var i=e.map(function(e){return e(t,n,r)}),o=n.static_variant(i);return{fromByteBuffer:function(t){return o.fromByteBuffer(t)},appendByteBuffer:function(t,e){Array.isArray(e)||(e=[0,e]),o.appendByteBuffer(t,e)},fromObject:function(t){return Array.isArray(t)||(t=[0,t]),o.fromObject(t)[1]},toObject:function(t){return Array.isArray(t)||(t=[0,t]),o.toObject(t)[1]}}}},A=function(t){return{fromByteBuffer:function(n){var r=n.copy(n.offset,n.offset+33);n.skip(33);var i=e.from(r.toBinary(),"binary");return s.fromBuffer(i).toString(t.keyPrefix)},appendByteBuffer:function(e,n){var r=s.fromStringOrThrow(n,t.keyPrefix).toBuffer();e.append(r.toString("binary"),"binary")},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?(t.keyPrefix?t.keyPrefix:"EOS")+"6MRy..":e}}},B=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var n=e.readUint8(),r=e.toBinary(),i="",o=!0,u=!1,a=void 0;try{for(var s,f=r[Symbol.iterator]();!(o=(s=f.next()).done);o=!0){var c=s.value;if("\0"==c)break;i+=c}}catch(t){u=!0,a=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw a}}return n+","+i},appendByteBuffer:function(t,e){var n=w(e),r=n.symbol,i=n.precision;l(null!=i,"Precision unknown for symbol: "+e);var o="\0".repeat(7-r.length);t.append(String.fromCharCode(i)+r+o)},fromObject:function(t){l(null!=t,"Symbol is required: "+t);var e=w(t),n=e.symbol,r=e.precision;return null==r?n:r+","+n},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},C=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var n=e.toBinary(),r="",i=!0,o=!1,u=void 0;try{for(var a,s=n[Symbol.iterator]();!(i=(a=s.next()).done);i=!0){var f=a.value;if("\0"==f)break;r+=f}}catch(t){o=!0,u=t}finally{try{!i&&s.return&&s.return()}finally{if(o)throw u}}return""+r},appendByteBuffer:function(t,e){var n=w(e).symbol,r="\0".repeat(8-n.length);t.append(n+r)},fromObject:function(t){return l(null!=t,"Symbol is required: "+t),w(t).symbol},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},k=function(t,e,n){var o=n.symbol(t),u=n.name(t);return{fromByteBuffer:function(t){return o.fromByteBuffer(t)+"@"+u.fromByteBuffer(t)},appendByteBuffer:function(t,e){l.equal(void 0===e?"undefined":(0,i.default)(e),"string","Invalid extended symbol: "+e);var n=e.split("@"),a=(0,r.default)(n,2),s=a[0],f=a[1];l(null!=f,"Missing @contract suffix in extended symbol: "+e),o.appendByteBuffer(t,s),u.appendByteBuffer(t,f)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"SYS@contract":e}}},x=function(t,e,n){var r=e.int64(t),i=n.symbol(t);return{fromByteBuffer:function(t){var e=r.fromByteBuffer(t);l(null!=e,"amount");var n=i.fromByteBuffer(t),o=w(""+n),u=o.precision,a=o.symbol;return l(null!=u,"precision"),l(null!=a,"symbol"),v(e,u)+" "+a},appendByteBuffer:function(t,e){var n=w(e),o=n.amount,u=n.precision,a=n.symbol;l(null!=o,"amount"),l(null!=u,"precision"),l(null!=a,"symbol"),r.appendByteBuffer(t,m(o,u)),i.appendByteBuffer(t,u+","+a)},fromObject:function(t){var e=w(t),n=e.amount,r=e.precision,i=e.symbol;return l(null!=n,"amount"),l(null!=r,"precision"),l(null!=i,"symbol"),g(n,r)+" "+i},toObject:function(e){if(t.defaults&&null==e)return"0.0001 SYS";var n=w(e),r=n.amount,i=n.precision,o=n.symbol;return l(null!=r,"amount"),l(null!=i,"precision"),l(null!=o,"symbol"),g(r,i)+" "+o}}},F=function(t,e,n){var o=n.asset(t),u=n.name(t);return{fromByteBuffer:function(t){var e=o.fromByteBuffer(t),n=u.fromByteBuffer(t);return w(e+"@"+n)},appendByteBuffer:function(t,e){l.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object, got "+(void 0===e?"undefined":(0,i.default)(e)));var n=b(e),a=n.split("@"),s=(0,r.default)(a,2)[1];l.equal(void 0===s?"undefined":(0,i.default)(s),"string","Invalid extended asset: "+e),o.appendByteBuffer(t,n),u.appendByteBuffer(t,s)},fromObject:function(t){var e={};"string"==typeof t?Object.assign(e,w(t)):"object"===(void 0===t?"undefined":(0,i.default)(t))?Object.assign(e,t):l(!1,"expecting extended_asset<object|string>, got: "+(void 0===t?"undefined":(0,i.default)(t)));var n=e.amount,r=e.precision,o=e.symbol,u=e.contract;return l(null!=n,"missing amount"),l(null!=r,"missing precision"),l(null!=o,"missing symbol"),l(null!=u,"missing contract"),{amount:n,precision:r,symbol:o,contract:u}},toObject:function(e){if(t.defaults&&null==e)return{amount:"1.0000",precision:4,symbol:"SYS",contract:"eosio.token"};l.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object");var n=e.amount,r=e.precision,o=e.symbol,u=e.contract;return{amount:g(n,r),precision:r,symbol:o,contract:u}}}},S=function(t,e){var n=e.fixed_bytes65(t);return{fromByteBuffer:function(t){var e=n.fromByteBuffer(t);return a.from(e).toString()},appendByteBuffer:function(t,e){var r=a.from(e);n.appendByteBuffer(t,r.toBuffer())},fromObject:function(t){return a.from(t).toString()},toObject:function(e){return t.defaults&&null==e?"SIG_K1_bas58signature..":a.from(e).toString()}}},D=function(t){return{"authority.fromObject":function(e){if(s.fromString(e,t.keyPrefix))return{threshold:1,keys:[{key:e,weight:1}]};if("string"==typeof e){var n=e.split("@"),i=(0,r.default)(n,2),o=i[0],u=i[1];return{threshold:1,accounts:[{permission:{actor:o,permission:void 0===u?"active":u},weight:1}]}}}}},T=function(t){return{"abi_def.fromObject":function(t){if("string"==typeof t){var n=e.from(t,"hex").toString();return 0===n.length&&(n=e.from(t).toString()),JSON.parse(n)}return e.isBuffer(t)?JSON.parse(t.toString()):null},"setabi.abi.appendByteBuffer":function(n){n.fields;var r=n.object,o=n.b,u=t("abi_def","eosio"),a=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);e.isBuffer(r.abi)?a.append(r.abi):"object"==(0,i.default)(r.abi)&&u.appendByteBuffer(a,r.abi),o.writeVarint32(a.offset),o.append(a.copy(0,a.offset),"binary")}}},O=function(t){return{"setcode.code.fromObject":function(n){var r=n.object,i=n.result;try{var o=r.code.toString();if(/^\s*\(module/.test(o)){var u=t.binaryen;l(null!=u,'required: config.binaryen = require("binaryen")'),t.debug&&console.log("Assembling WASM..");var a=e.from(u.parseText(o).emitBinary());i.code=a}else i.code=r.code}catch(t){throw console.error(t,r.code),t}}}},I=function(t,n){return{"action.data.fromByteBuffer":function(n){var r=n.fields,i=n.object,o=n.b,u=n.config,a=""==(i.name||"")?r.data:t(i.name,i.account);if(a)o.readVarint32(),i.data=a.fromByteBuffer(o,u);else{var s=o.readVarint32(),f=o.copy(o.offset,o.offset+s);o.skip(s),i.data=e.from(f.toBinary(),"binary")}},"action.data.appendByteBuffer":function(n){var r=n.fields,i=n.object,o=n.b,u=""==(i.name||"")?r.data:t(i.name,i.account);if(u){var a=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);u.appendByteBuffer(a,i.data),o.writeVarint32(a.offset),o.append(a.copy(0,a.offset),"binary")}else{var s="string"==typeof i.data?e.from(i.data,"hex"):i.data;if(!e.isBuffer(s))throw new TypeError("Unknown struct '"+i.name+"' for contract '"+i.account+"', locate this struct or provide serialized action.data");o.writeVarint32(s.length),o.append(s.toString("binary"),"binary")}},"action.data.fromObject":function(n){var r=n.fields,o=n.object,u=n.result,a=o.data,s=o.name,c=""==(s||"")?r.data:t(s,o.account);if(c)if("object"===(void 0===a?"undefined":(0,i.default)(a)))u.data=c.fromObject(a);else{if("string"!=typeof a)throw new TypeError("Expecting hex string or object in action.data");var l=e.from(a,"hex");u.data=f.fromBuffer(c,l)}else u.data=a},"action.data.toObject":function(r){var i=r.fields,o=r.object,u=r.result,a=r.config,s=o||{},f=s.data,l=s.name,h=""==(l||"")?i.data:t(l,o.account);if(h){if(n){var d=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);return f&&h.appendByteBuffer(d,f),void(u.data=d.copy(0,d.offset).toString("hex"))}u.data=h.toObject(f,a)}else u.data=e.isBuffer(f)?f.toString("hex"):f}}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";e.__esModule=!0;var r=o(n(236)),i=o(n(239));function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(){return function(t,e){if(Array.isArray(t))return t;if((0,r.default)(Object(t)))return function(t,e){var n=[],r=!0,o=!1,u=void 0;try{for(var a,s=(0,i.default)(t);!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,u=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw u}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(75),a=n(25),s=n(254),f=n(275),c=n(134),l=n(278),h=a.createLogger("chain"),d=n(279),p={ERR_TRANSFER_FAILED:"ERR_TRANSFER_FAILED",ERR_TRANSCAL_FAILED:"ERR_TRANSCAL_FAILED",ERR_TRANSEND_FAILED:"ERR_TRANSEND_FAILED"},y=function(t){function e(){var e=t.call(this)||this;return e._events=new l.default,e.events.enableEvents(p),e}return r(e,t),Object.defineProperty(e.prototype,"events",{get:function(){return this._events||(this._events=new l.default)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"chain",{get:function(){return new s.default(this.eosClient)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kh",{get:function(){return new f.default(this.chain)},enumerable:!0,configurable:!0}),e.prototype.getAccountInfo=function(t){return i(this,void 0,void 0,function(){var e,n,r;return o(this,function(i){switch(i.label){case 0:return n=(e=this.chain).getAccountInfo,(r=t)?[3,2]:[4,this.getIdentity()];case 1:r=i.sent().name,i.label=2;case 2:return[4,n.apply(e,[r])];case 3:return[2,i.sent()]}})})},e.prototype.getBalance=function(t,e,n){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var r,i,u;return o(this,function(o){switch(o.label){case 0:return i=(r=this.chain).getBalance,(u=t)?[3,2]:[4,this.getIdentity()];case 1:u=o.sent().name,o.label=2;case 2:return[2,i.apply(r,[u,e,n])]}})})},e.prototype.getBalances=function(t,e){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var n,r,i;return o(this,function(o){switch(o.label){case 0:return r=(n=this.chain).getBalances,(i=t)?[3,2]:[4,this.getIdentity()];case 1:i=o.sent().name,o.label=2;case 2:return[2,r.apply(n,[i,e])]}})})},e.prototype.getBalanceAsset=function(t,e){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var n;return o(this,function(r){switch(r.label){case 0:return[4,this.getBalance(t,e)];case 1:return n=r.sent(),[2,u.default.parse(n)]}})})},e.prototype.transfer=function(t,e,n,r){return void 0===n&&(n=""),i(this,void 0,void 0,function(){var i,u,a=this;return o(this,function(o){switch(o.label){case 0:return u=(i=this.chain).transfer,[4,this.getIdentity()];case 1:return[4,u.apply(i,[o.sent(),t,e,n,function(t){return a.events.emitEvent(p.ERR_TRANSFER_FAILED,t)},r])];case 2:return[2,o.sent()]}})})},e.prototype.transcal=function(t,e,n){for(var r=[],u=3;u<arguments.length;u++)r[u-3]=arguments[u];return i(this,void 0,void 0,function(){var i,u,a=this;return o(this,function(o){switch(o.label){case 0:return u=(i=this.kh).transcal,[4,this.getIdentity()];case 1:return[4,u.apply(i,[o.sent(),t,e,n,r,function(t){return a.events.emitEvent(p.ERR_TRANSCAL_FAILED,t)}])];case 2:return[2,o.sent()]}})})},e.prototype.call=function(t,e,n){return i(this,void 0,void 0,function(){var r,i;return o(this,function(o){switch(o.label){case 0:return[4,this.getIdentity()];case 1:return r=o.sent(),[4,this.chain.call(t,e,n,{actor:r.name,permission:r.authority})];case 2:return(i=o.sent())&&h.info("call operation dealed, txID: "+i.transaction_id),[2,i]}})})},e.prototype.newAccount=function(t,e,n){return i(this,void 0,void 0,function(){var r;return o(this,function(i){switch(i.label){case 0:if(!e)throw new Error("newAccount : active key error ");return n||(n=e),[4,this.getIdentity()];case 1:if(r=i.sent(),!this.eosClient)throw new Error("eosClient is not exist");return[4,this.eosClient.transaction(function(i){i.newaccount({creator:r.name,name:t,owner:n,active:e}),i.buyrambytes({payer:r.name,receiver:t,bytes:8192}),i.delegatebw({from:r.name,receiver:t,stake_net_quantity:"1.0000 EOS",stake_cpu_quantity:"1.0000 EOS",transfer:0})})];case 2:return[2,i.sent()]}})})},e.prototype.version=function(){return d.name+" # "+d.version},e.prototype.help=function(){return"\n```js\n      =============================================================\n\n               -----      ------        ------      -------\n              -----     -----          ------      -------\n             -----   -----            ------      -------\n            -----  -----             ------      -------\n           ----------                ----- ---- ------\n          -----  -----              ----- ---- ------\n         -----    -----           ------      -------\n        -----      ------        ------      -------\n       ------       -------     ------      -------\n      --------      ---------  ------      -------\n\n===========================================================\n```\n---\n\n# eosplayer "+this.version()+'\n\n## Usage of eosplayer\n\n### Events\n\n`ERR_TRANSFER_FAILED`\n`ERR_TRANSCAL_FAILED`\n`ERR_TRANSEND_FAILED`\n\n### APIs\n\n```js\n{String} get help // get help info of usage\n{String} get version // get the version info\n{ChainHelper} get chain // get the chain helper\n{KhHelper} get kh // get the kh contract helper\n\n{Void} eosplayer.event.setEvent(event, fnCallback, context) //listen to a event\n\n{Eos} get eosplayer.eosClient // get eos instance\n{Identity} async eosplayer.getIdentity() // get identity\n\n{AccountInfo} async eosplayer.getAccountInfo(account_name = identity.name)\n    // get account info for any user\n\n{String} async eosplayer.getBalance(account_name = undefined, code = "eosio.token", symbolName = undefined)\n    // get balance string of a account. ex. "1.0000 EOS", null means that the account dosen\'t have any token,\n\n{Array.<String>} async getBalances(account_name = undefined, code = "eosio.token")\n    // get balances\n\n{String} async eosplayer.getBalanceAsset(account_name = undefined, code = "eosio.token")\n    // get balance structure of a account. ex. {val:1, sym:"EOS", decimal:4}\n\n{Tx} async eosplayer.transfer(target, quantity, memo = "")\n    // transfer tokens to target\n\n{Tx} async eosplayer.transcal(code, quantity, func, ...args)\n    // send a action of transcal to contract\n\n{Tx} async eosplayer.call(code, func, jsonData)\n    // send a action to contract\n\n{Tx} async eosplayer.newAccount(name, activeKey, ownerKey)\n    // create a account with public key\n```\n\n'+s.default.help()},e}(c.default);e.Player=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n){void 0===n&&(n=4),this._val=t,this._sym=e,this._decimal=n}return Object.defineProperty(t.prototype,"val",{get:function(){return this._val},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sym",{get:function(){return this._sym},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"decimal",{get:function(){return this._decimal},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valStr",{get:function(){return this._val.toFixed(this.decimal)},enumerable:!0,configurable:!0}),t.prototype.toString=function(){return this.valStr+" "+this.sym},t.parse=function(e){if(!e)return null;var n=(e=e.trim()).indexOf(" ");if(n<0)return null;var r=e.slice(0,n),i=e.slice(1+n);if(!r||!i)return null;var o=e.indexOf("."),u=o<0?0:n-o-1;return new t(parseFloat(r),i,u)},t}();e.default=r},function(t,e,n){"use strict";(function(e){var r=n(6),i=n(259),o={"Content-Type":"application/x-www-form-urlencoded"};function u(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=n(129):void 0!==e&&(t=n(129)),t}(),transformRequest:[function(t,e){return i(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(u(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(u(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(t){a.headers[t]={}}),r.forEach(["post","put","patch"],function(t){a.headers[t]=r.merge(o)}),t.exports=a}).call(this,n(11))},function(t,e,n){"use strict";var r=n(36),i=n(8);Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"SocketService",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(e,"Plugin",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(e,"Blockchains",{enumerable:!0,get:function(){return d.Blockchains}}),Object.defineProperty(e,"Network",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(e,"WalletInterface",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(e,"WALLET_METHODS",{enumerable:!0,get:function(){return y.WALLET_METHODS}}),e.PluginTypes=e.default=e.EVENTS=void 0;var o=i(n(26)),u=i(n(27)),a=i(n(4)),s=i(n(5)),f=i(n(282)),c=i(n(78)),l=i(n(79)),h=r(n(37));e.PluginTypes=h;var d=n(38),p=i(n(292)),y=r(n(137)),g=i(n(293)),m=i(n(296)),v=i(n(136)),b={Disconnected:"dced",LoggedOut:"logout"};e.EVENTS=b;c.default;var w=[],_={},E=function(){function t(){(0,a.default)(this,t),this.identity=null,this.network=null,f.default.loadPlugin(new g.default(this,_)),f.default.loadPlugin(new m.default(this,_))}return(0,s.default)(t,[{key:"loadPlugin",value:function(t){if(!t.isValid())throw new Error("".concat(t.name," doesn't seem to be a valid ScatterJS plugin."));f.default.loadPlugin(t),t.type===h.BLOCKCHAIN_SUPPORT&&(this[t.name]=t.signatureProvider(function(){if(!_.get().identity)throw new Error("No Identity")},function(){return _.get().identity}),this[t.name+"Hook"]=t.hookProvider,w.push(t.setSocketService)),t.type===h.WALLET_SUPPORT&&t.init(this,_,w)}},{key:"connect",value:function(){var t=(0,u.default)(o.default.mark(function t(e,n){var r;return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n||(n={}),this.network=n.hasOwnProperty("network")?n.network:null,r=f.default.wallets(),t.next=5,Promise.race(r.map(function(t){return t.connect(e,n).then((0,u.default)(o.default.mark(function e(){return o.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("function"!=typeof t.runBeforeInterfacing){e.next=3;break}return e.next=3,t.runBeforeInterfacing();case 3:if(new y.default(t.name,t.methods(),_.get()),"function"!=typeof t.runAfterInterfacing){e.next=7;break}return e.next=7,t.runAfterInterfacing();case 7:return y.default.bindBasics(_.get()),e.abrupt("return",!0);case 9:case"end":return e.stop()}},e,this)})))}).concat(new Promise(function(t){return setTimeout(function(){return t(!1)},n.initTimeout||5e3)})));case 5:return t.abrupt("return",t.sent);case 6:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),t}(),A=new Proxy(new(function(){function t(e){(0,a.default)(this,t),this.scatter=e}return(0,s.default)(t,[{key:"plugins",value:function(){var t=this;if(!this.scatter.isExtension){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];n.map(function(e){return t.scatter.loadPlugin(e)})}}},{key:"connect",value:function(){var t;return(t=this.scatter).connect.apply(t,arguments)}},{key:"catchAll",value:function(){}}]),t}())(new E),{get:function(t,e){return void 0===t[e]?t.scatter[e]:t[e]}});_.set=function(t){return A.scatter=t},_.get=function(){return A.scatter},"undefined"!=typeof window&&(window.ScatterJS=A),A.Plugin=l.default,A.PluginTypes=h,A.Blockchains=d.Blockchains,A.Network=p.default,A.Token=v.default,A.SocketService=c.default,A.EVENTS=b,A.WalletInterface=y.default,A.WALLET_METHODS=y.WALLET_METHODS;var B=A;e.default=B},function(t,e,n){"use strict";var r=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i,o=r(n(26)),u=r(n(135)),a=r(n(283)),s=r(n(27)),f=r(n(4)),c=r(n(5)),l=r(n(287)),h=r(n(288)),d=r(n(46)),p=r(n(291)),y=null,g=!1,m=!1,v=[],b=function(t){return(0,d.default)("sha256").update(t).digest("hex")},w=function(){var t=new Uint8Array(24);return(0,h.default)(t),t.join("")},_=function(){var t;return"www."===(t="undefined"==typeof location?i:location.hasOwnProperty("hostname")&&location.hostname.length&&"localhost"!==location.hostname?location.hostname:i).substr(0,4)&&(t=t.replace("www.","")),t},E=l.default.getAppKey();E||(E="appkey:"+w());var A=function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;null===t&&null===e?y.send("40/scatter"):y.send("42/scatter,"+JSON.stringify([t,e]))},B=null,C=function(){var t=!!(0<arguments.length&&void 0!==arguments[0])&&arguments[0];return new Promise(function(e,n){B={resolve:e,reject:n},A("pair",{data:{appkey:E,origin:_(),passthrough:t},plugin:i})})},k={},x=function(){function t(){(0,f.default)(this,t)}return(0,c.default)(t,null,[{key:"init",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:6e4;i=t,this.timeout=e}},{key:"getOrigin",value:function(){return _()}},{key:"addEventHandler",value:function(t,e){e||(e="app"),k[e]=t}},{key:"removeEventHandler",value:function(t){t||(t="app"),delete k[t]}},{key:"link",value:function(){var t=this;return Promise.race([new Promise(function(e){return setTimeout(function(){g||(e(!1),y&&(y.disconnect(),y=null))},t.timeout)}),new Promise(function(){var t=(0,s.default)(o.default.mark(function t(e){var n,r;return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n=function(){y.onmessage=function(i){if(-1===i.data.indexOf("42/scatter"))return!1;var o=JSON.parse(i.data.replace("42/scatter,","")),u=(0,a.default)(o,2),s=u[0],f=u[1];return"paired"===s?t(f):"rekey"===s?e():"api"===s?n(f):"event"===s?r(f):void 0};var t=function(t){if(m=t){var e=l.default.getAppKey(),n=-1<E.indexOf("appkey:")?b(E):E;e&&e===n||(l.default.setAppKey(n),E=l.default.getAppKey())}B.resolve(t)},e=function(){E="appkey:"+w(),A("rekeyed",{data:{appkey:E,origin:_()},plugin:i})},n=function(t){var e=v.find(function(e){return e.id===t.id});e&&(v=v.filter(function(e){return e.id!==t.id}),"object"===(0,u.default)(t.result)&&null!==t.result&&t.result.hasOwnProperty("isError")?e.reject(t.result):e.resolve(t.result))},r=function(t){var e=t.event,n=t.payload;Object.keys(k).length&&Object.keys(k).map(function(t){k[t](e,n)})}},r=function(){var t,i=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;o||(t=new Promise(function(t){return o=t}));var u=i?"local.get-scatter.com:50006":"127.0.0.1:50005",a="".concat(i?"wss://":"ws://").concat(u).concat("/socket.io/?EIO=3&transport=websocket"),s=new p.default(a);return s.onerror=function(){i?r(!1,o):(e(!1),o(!1))},s.onopen=function(){y=s,A(),clearTimeout(null),g=!0,C(!0).then(function(){e(!0),o(!0)}),n()},t},t.next=4,r();case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}())])}},{key:"isConnected",value:function(){return g}},{key:"isPaired",value:function(){return m}},{key:"disconnect",value:function(){return y&&y.close(),!0}},{key:"removeAppKeys",value:function(){l.default.removeAppKey(),l.default.removeNonce()}},{key:"sendApiRequest",value:function(t){return new Promise(function(e,n){return"identityFromPermissions"!==t.type||m?void C().then(function(){if(!m)return n({code:"not_paired",message:"The user did not allow this app to connect to their Scatter"});t.id=w(),t.appkey=E,t.nonce=l.default.getNonce()||0;var r=w();t.nextNonce=b(r),l.default.setNonce(r),t.hasOwnProperty("payload")&&!t.payload.hasOwnProperty("origin")&&(t.payload.origin=_()),v.push(Object.assign(t,{resolve:e,reject:n})),A("api",{data:t,plugin:i})}):e(!1)})}}]),t}();e.default=x},function(t,e,n){"use strict";var r=n(36),i=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=i(n(4)),u=i(n(5)),a=r(n(37)),s=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"";(0,o.default)(this,t),this.name=e,this.type=n}return(0,u.default)(t,[{key:"isSignatureProvider",value:function(){return this.type===a.BLOCKCHAIN_SUPPORT}},{key:"isValid",value:function(){return Object.keys(a).map(function(t){return a[t]}).includes(this.type)}}],[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(e){return Object.assign(t.placeholder(),e)}}]),t}();e.default=s},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){var r=n(135),i=n(294);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?i(t):e}},function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},function(t,e,n){var r=n(295);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o={node:{chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",mockTransactions:function(){return null},expireInSeconds:60,broadcast:!0,debug:!1,sign:!0},urls:["https://mars.fn.eosbixin.com","https://eos.eoscafeblock.com","https://api.eosdublin.io"]},u=function(t){function e(e){var n=t.call(this)||this;n._urls=[],n._nodeConfigs=[];var r=e.node,u=e.urls;return n._conf=i({},o.node,r),n._urls=u,n._nodeConfigs=n._urls.map(function(t){var e={chainId:""};for(var r in n._conf)n._conf.hasOwnProperty(r)&&(e[r]=n._conf[r]);return e.httpEndpoint=t,e}),n}return r(e,t),e}(n(74).Player);e.MultiSourcePlayer=u},function(t,e,n){"use strict";var r=o(n(88)),i=o(n(28));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(39),a=n(71),s=n(123),f=n(3),c=n(72),l=n(244),h=n(245),d=n(127),p=n(126),y=n(246),g=n(247),m=n(248),v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={httpEndpoint:"http://127.0.0.1:8888",debug:!1,verbose:!1,broadcast:!0,logger:{log:function(){var e;return t.verbose?(e=console).log.apply(e,arguments):null},error:function(){var e;return t.verbose?(e=console).error.apply(e,arguments):null}},sign:!0};function n(t,e){Object.keys(e).forEach(function(n){void 0===t[n]&&(t[n]=e[n])})}return n(t,e),n(t.logger,e.logger),function(t){var e=null!=t.httpEndpoint?s(t):null;t.network=e;var n=[],r=l(e,t);n.push(r.abi("eosio.null",m)),n.push(r.abi("eosio.token",y)),n.push(r.abi("eosio",g)),t.chainId||(t.chainId="cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f");e&&function(t,e,n){t.getInfo({}).then(function(t){t.chain_id!==e&&n.log&&n.log("chainId mismatch, signatures will not match transaction authority. expected "+e+" !== actual "+t.chain_id)}).catch(function(t){n.error&&n.error("Warning, unable to validate chainId: "+t.message)})}(e,t.chainId,t.logger);if(null!=t.mockTransactions){if("string"==typeof t.mockTransactions){var o=t.mockTransactions;t.mockTransactions=function(){return o}}f.equal((0,i.default)(t.mockTransactions),"function","config.mockTransactions")}var u=c(t),a=u.structs,p=u.types,v=u.fromBuffer,w=u.toBuffer,_=function(t,e,n,r){var i=t.network,o=Object.assign({},i),u=h(e,i,n,t,r);return function(t,e,n){for(var r in t)if(e[r])throw new TypeError(n+": "+r)}(o,u,"Conflicting methods in EosApi and Transaction Api"),Object.assign(o,u),o}(t,s,a,n);Object.assign(_,{config:function(t){var e=new Set(["httpEndpoint","abiCache","chainId","expireInSeconds"]),n=new Set(["verbose","debug","broadcast","logger","sign"]),r={};return Object.keys(t).forEach(function(i){Object.defineProperty(r,i,{set:function(e){if(!n.has(i))throw new Error("Access denied");t[i]=e},get:function(){if(e.has(i)||n.has(i))return t[i];throw new Error("Access denied")}})}),r}(t),fc:{structs:a,types:p,fromBuffer:v,toBuffer:w,abiCache:r},modules:{format:d}}),t.signProvider||(t.signProvider=b(_,t));return _}(t)};t.exports=v,Object.assign(v,{version:"16.0.0",modules:{format:d,api:s,ecc:u,json:{api:s.api,schema:p},Fcbuffer:a},Testnet:function(t){return console.error("deprecated, change Eos.Testnet(..) to just Eos(..)"),v(t)},Localnet:function(t){return console.error("deprecated, change Eos.Localnet(..) to just Eos(..)"),v(t)}});var b=function(t,e){return function(n){var i,o,a,s,c,l,h,d,p,y,g,m,v,b,w,_,E,A,B,C=n.sign,k=n.buf,x=n.transaction,F=n.optionsKeyProvider;return r.default.async(function(n){for(;;)switch(n.prev=n.next){case 0:if(i=F||e.keyProvider){n.next=3;break}throw new TypeError("This transaction requires a keyProvider for signing");case 3:return o=i,"function"==typeof i&&(o=i({transaction:x})),n.next=7,r.default.awrap(Promise.resolve(o));case 7:if(o=n.sent,Array.isArray(o)||(o=[o]),(o=o.map(function(t){try{return{private:u.PrivateKey(t).toString()}}catch(e){return{public:u.PublicKey(t).toString()}}f(!1,"expecting public or private keys from keyProvider")})).length){n.next=12;break}throw new Error("missing key, check your keyProvider");case 12:if(1!==o.length||!o[0].private){n.next=15;break}return a=o[0].private,n.abrupt("return",C(k,a));case 15:if(null!=e.httpEndpoint){n.next=37;break}for(s=[],c=!0,l=!1,h=void 0,n.prev=20,d=o[Symbol.iterator]();!(c=(p=d.next()).done);c=!0)y=p.value,s.push(C(k,y.private));n.next=28;break;case 24:n.prev=24,n.t0=n.catch(20),l=!0,h=n.t0;case 28:n.prev=28,n.prev=29,!c&&d.return&&d.return();case 31:if(n.prev=31,!l){n.next=34;break}throw h;case 34:return n.finish(31);case 35:return n.finish(28);case 36:return n.abrupt("return",s);case 37:for(g=new Map,m=!0,v=!1,b=void 0,n.prev=41,w=o[Symbol.iterator]();!(m=(_=w.next()).done);m=!0)E=_.value,A=null!=E.private,null!=E.public,A?g.set(u.privateToPublic(E.private),E.private):g.set(E.public,null);n.next=49;break;case 45:n.prev=45,n.t1=n.catch(41),v=!0,b=n.t1;case 49:n.prev=49,n.prev=50,!m&&w.return&&w.return();case 52:if(n.prev=52,!v){n.next=55;break}throw b;case 55:return n.finish(52);case 56:return n.finish(49);case 57:return B=Array.from(g.keys()),n.abrupt("return",t.getRequiredKeys(x,B).then(function(t){var e=t.required_keys;if(!e.length)throw new Error("missing required keys for "+JSON.stringify(x));var n=[],r=[],o=!0,a=!1,s=void 0;try{for(var c,l=e[Symbol.iterator]();!(o=(c=l.next()).done);o=!0){var h=c.value;h=u.PublicKey(h).toString();var d=g.get(h);d?n.push(d):r.push(h)}}catch(t){a=!0,s=t}finally{try{!o&&l.return&&l.return()}finally{if(a)throw s}}0!==r.length&&(f("function"==typeof i,"keyProvider function is needed for private key lookup"),i({pubkeys:r}).forEach(function(t){n.push(t)}));var p=[],y=!0,m=!1,v=void 0;try{for(var b,w=n[Symbol.iterator]();!(y=(b=w.next()).done);y=!0){var _=b.value;p.push(C(k,_))}}catch(t){m=!0,v=t}finally{try{!y&&w.return&&w.return()}finally{if(m)throw v}}return p}));case 59:case"end":return n.stop()}},null,this,[[20,24,28,36],[29,,31,35],[41,45,49,57],[50,,52,56]])}}},function(t,e,n){var r;!function(i){"use strict";var o,u=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,a=Math.ceil,s=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",l=1e14,h=14,d=9007199254740991,p=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,g=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function v(t){for(var e,n,r=1,i=t.length,o=t[0]+"";r<i;){for(e=t[r++]+"",n=h-e.length;n--;e="0"+e);o+=e}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function b(t,e){var n,r,i=t.c,o=e.c,u=t.s,a=e.s,s=t.e,f=e.e;if(!u||!a)return null;if(n=i&&!i[0],r=o&&!o[0],n||r)return n?r?0:-a:u;if(u!=a)return u;if(n=u<0,r=s==f,!i||!o)return r?0:!i^n?1:-1;if(!r)return s>f^n?1:-1;for(a=(s=i.length)<(f=o.length)?s:f,u=0;u<a;u++)if(i[u]!=o[u])return i[u]>o[u]^n?1:-1;return s==f?0:s>f^n?1:-1}function w(t,e,n,r){if(t<e||t>n||t!==(t<0?a(t):s(t)))throw Error(f+(r||"Argument")+("number"==typeof t?t<e||t>n?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function _(t){var e=t.c.length-1;return m(t.e/h)==e&&t.c[e]%2!=0}function E(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function A(t,e,n){var r,i;if(e<0){for(i=n+".";++e;i+=n);t=i+t}else if(++e>(r=t.length)){for(i=n,e-=r;--e;i+=n);t+=i}else e<r&&(t=t.slice(0,e)+"."+t.slice(e));return t}(o=function t(e){var n,r,i,o=P.prototype={constructor:P,toString:null,valueOf:null},B=new P(1),C=20,k=4,x=-7,F=21,S=-1e7,D=1e7,T=!1,O=1,I=0,M={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},j="0123456789abcdefghijklmnopqrstuvwxyz";function P(t,e){var n,o,a,f,l,p,y,g,m=this;if(!(m instanceof P))return new P(t,e);if(null==e){if(t instanceof P)return m.s=t.s,m.e=t.e,void(m.c=(t=t.c)?t.slice():t);if((p="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,l=t;l>=10;l/=10,f++);return m.e=f,void(m.c=[t])}g=String(t)}else{if(g=String(t),!u.test(g))return i(m,g,p);m.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(f=g.indexOf("."))>-1&&(g=g.replace(".","")),(l=g.search(/e/i))>0?(f<0&&(f=l),f+=+g.slice(l+1),g=g.substring(0,l)):f<0&&(f=g.length)}else{if(w(e,2,j.length,"Base"),g=String(t),10==e)return U(m=new P(t instanceof P?t:g),C+m.e+1,k);if(p="number"==typeof t){if(0*t!=0)return i(m,g,p,e);if(m.s=1/t<0?(g=g.slice(1),-1):1,P.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(c+t);p=!1}else m.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(n=j.slice(0,e),f=l=0,y=g.length;l<y;l++)if(n.indexOf(o=g.charAt(l))<0){if("."==o){if(l>f){f=y;continue}}else if(!a&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){a=!0,l=-1,f=0;continue}return i(m,String(t),p,e)}(f=(g=r(g,e,10,m.s)).indexOf("."))>-1?g=g.replace(".",""):f=g.length}for(l=0;48===g.charCodeAt(l);l++);for(y=g.length;48===g.charCodeAt(--y););if(g=g.slice(l,++y)){if(y-=l,p&&P.DEBUG&&y>15&&(t>d||t!==s(t)))throw Error(c+m.s*t);if((f=f-l-1)>D)m.c=m.e=null;else if(f<S)m.c=[m.e=0];else{if(m.e=f,m.c=[],l=(f+1)%h,f<0&&(l+=h),l<y){for(l&&m.c.push(+g.slice(0,l)),y-=h;l<y;)m.c.push(+g.slice(l,l+=h));g=g.slice(l),l=h-g.length}else l-=y;for(;l--;g+="0");m.c.push(+g)}}else m.c=[m.e=0]}function L(t,e,n,r){var i,o,u,a,s;if(null==n?n=k:w(n,0,8),!t.c)return t.toString();if(i=t.c[0],u=t.e,null==e)s=v(t.c),s=1==r||2==r&&u<=x?E(s,u):A(s,u,"0");else if(o=(t=U(new P(t),e,n)).e,a=(s=v(t.c)).length,1==r||2==r&&(e<=o||o<=x)){for(;a<e;s+="0",a++);s=E(s,o)}else if(e-=u,s=A(s,o,"0"),o+1>a){if(--e>0)for(s+=".";e--;s+="0");}else if((e+=o-a)>0)for(o+1==a&&(s+=".");e--;s+="0");return t.s<0&&i?"-"+s:s}function R(t,e){for(var n,r=1,i=new P(t[0]);r<t.length;r++){if(!(n=new P(t[r])).s){i=n;break}e.call(i,n)&&(i=n)}return i}function N(t,e,n){for(var r=1,i=e.length;!e[--i];e.pop());for(i=e[0];i>=10;i/=10,r++);return(n=r+n*h-1)>D?t.c=t.e=null:n<S?t.c=[t.e=0]:(t.e=n,t.c=e),t}function U(t,e,n,r){var i,o,u,f,c,d,y,g=t.c,m=p;if(g){t:{for(i=1,f=g[0];f>=10;f/=10,i++);if((o=e-i)<0)o+=h,u=e,y=(c=g[d=0])/m[i-u-1]%10|0;else if((d=a((o+1)/h))>=g.length){if(!r)break t;for(;g.length<=d;g.push(0));c=y=0,i=1,u=(o%=h)-h+1}else{for(c=f=g[d],i=1;f>=10;f/=10,i++);y=(u=(o%=h)-h+i)<0?0:c/m[i-u-1]%10|0}if(r=r||e<0||null!=g[d+1]||(u<0?c:c%m[i-u-1]),r=n<4?(y||r)&&(0==n||n==(t.s<0?3:2)):y>5||5==y&&(4==n||r||6==n&&(o>0?u>0?c/m[i-u]:0:g[d-1])%10&1||n==(t.s<0?8:7)),e<1||!g[0])return g.length=0,r?(e-=t.e+1,g[0]=m[(h-e%h)%h],t.e=-e||0):g[0]=t.e=0,t;if(0==o?(g.length=d,f=1,d--):(g.length=d+1,f=m[h-o],g[d]=u>0?s(c/m[i-u]%m[u])*f:0),r)for(;;){if(0==d){for(o=1,u=g[0];u>=10;u/=10,o++);for(u=g[0]+=f,f=1;u>=10;u/=10,f++);o!=f&&(t.e++,g[0]==l&&(g[0]=1));break}if(g[d]+=f,g[d]!=l)break;g[d--]=0,f=1}for(o=g.length;0===g[--o];g.pop());}t.e>D?t.c=t.e=null:t.e<S&&(t.c=[t.e=0])}return t}function q(t){var e,n=t.e;return null===n?t.toString():(e=v(t.c),e=n<=x||n>=F?E(e,n):A(e,n,"0"),t.s<0?"-"+e:e)}return P.clone=t,P.ROUND_UP=0,P.ROUND_DOWN=1,P.ROUND_CEIL=2,P.ROUND_FLOOR=3,P.ROUND_HALF_UP=4,P.ROUND_HALF_DOWN=5,P.ROUND_HALF_EVEN=6,P.ROUND_HALF_CEIL=7,P.ROUND_HALF_FLOOR=8,P.EUCLID=9,P.config=P.set=function(t){var e,n;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(w(n=t[e],0,g,e),C=n),t.hasOwnProperty(e="ROUNDING_MODE")&&(w(n=t[e],0,8,e),k=n),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((n=t[e])&&n.pop?(w(n[0],-g,0,e),w(n[1],0,g,e),x=n[0],F=n[1]):(w(n,-g,g,e),x=-(F=n<0?-n:n))),t.hasOwnProperty(e="RANGE"))if((n=t[e])&&n.pop)w(n[0],-g,-1,e),w(n[1],1,g,e),S=n[0],D=n[1];else{if(w(n,-g,g,e),!n)throw Error(f+e+" cannot be zero: "+n);S=-(D=n<0?-n:n)}if(t.hasOwnProperty(e="CRYPTO")){if((n=t[e])!==!!n)throw Error(f+e+" not true or false: "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw T=!n,Error(f+"crypto unavailable");T=n}else T=n}if(t.hasOwnProperty(e="MODULO_MODE")&&(w(n=t[e],0,9,e),O=n),t.hasOwnProperty(e="POW_PRECISION")&&(w(n=t[e],0,g,e),I=n),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(n=t[e]))throw Error(f+e+" not an object: "+n);M=n}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(n=t[e])||/^.$|[+-.\s]|(.).*\1/.test(n))throw Error(f+e+" invalid: "+n);j=n}}return{DECIMAL_PLACES:C,ROUNDING_MODE:k,EXPONENTIAL_AT:[x,F],RANGE:[S,D],CRYPTO:T,MODULO_MODE:O,POW_PRECISION:I,FORMAT:M,ALPHABET:j}},P.isBigNumber=function(t){return t instanceof P||t&&!0===t._isBigNumber||!1},P.maximum=P.max=function(){return R(arguments,o.lt)},P.minimum=P.min=function(){return R(arguments,o.gt)},P.random=function(){var t=9007199254740992*Math.random()&2097151?function(){return s(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var n,r,i,o,u,c=0,l=[],d=new P(B);if(null==e?e=C:w(e,0,g),o=a(e/h),T)if(crypto.getRandomValues){for(n=crypto.getRandomValues(new Uint32Array(o*=2));c<o;)(u=131072*n[c]+(n[c+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),n[c]=r[0],n[c+1]=r[1]):(l.push(u%1e14),c+=2);c=o/2}else{if(!crypto.randomBytes)throw T=!1,Error(f+"crypto unavailable");for(n=crypto.randomBytes(o*=7);c<o;)(u=281474976710656*(31&n[c])+1099511627776*n[c+1]+4294967296*n[c+2]+16777216*n[c+3]+(n[c+4]<<16)+(n[c+5]<<8)+n[c+6])>=9e15?crypto.randomBytes(7).copy(n,c):(l.push(u%1e14),c+=7);c=o/7}if(!T)for(;c<o;)(u=t())<9e15&&(l[c++]=u%1e14);for(o=l[--c],e%=h,o&&e&&(u=p[h-e],l[c]=s(o/u)*u);0===l[c];l.pop(),c--);if(c<0)l=[i=0];else{for(i=-1;0===l[0];l.splice(0,1),i-=h);for(c=1,u=l[0];u>=10;u/=10,c++);c<h&&(i-=h-c)}return d.e=i,d.c=l,d}}(),P.sum=function(){for(var t=1,e=arguments,n=new P(e[0]);t<e.length;)n=n.plus(e[t++]);return n},r=function(){function t(t,e,n,r){for(var i,o,u=[0],a=0,s=t.length;a<s;){for(o=u.length;o--;u[o]*=e);for(u[0]+=r.indexOf(t.charAt(a++)),i=0;i<u.length;i++)u[i]>n-1&&(null==u[i+1]&&(u[i+1]=0),u[i+1]+=u[i]/n|0,u[i]%=n)}return u.reverse()}return function(e,r,i,o,u){var a,s,f,c,l,h,d,p,y=e.indexOf("."),g=C,m=k;for(y>=0&&(c=I,I=0,e=e.replace(".",""),h=(p=new P(r)).pow(e.length-y),I=c,p.c=t(A(v(h.c),h.e,"0"),10,i,"0123456789"),p.e=p.c.length),f=c=(d=t(e,r,i,u?(a=j,"0123456789"):(a="0123456789",j))).length;0==d[--c];d.pop());if(!d[0])return a.charAt(0);if(y<0?--f:(h.c=d,h.e=f,h.s=o,d=(h=n(h,p,g,m,i)).c,l=h.r,f=h.e),y=d[s=f+g+1],c=i/2,l=l||s<0||null!=d[s+1],l=m<4?(null!=y||l)&&(0==m||m==(h.s<0?3:2)):y>c||y==c&&(4==m||l||6==m&&1&d[s-1]||m==(h.s<0?8:7)),s<1||!d[0])e=l?A(a.charAt(1),-g,a.charAt(0)):a.charAt(0);else{if(d.length=s,l)for(--i;++d[--s]>i;)d[s]=0,s||(++f,d=[1].concat(d));for(c=d.length;!d[--c];);for(y=0,e="";y<=c;e+=a.charAt(d[y++]));e=A(e,f,a.charAt(0))}return e}}(),n=function(){function t(t,e,n){var r,i,o,u,a=0,s=t.length,f=e%y,c=e/y|0;for(t=t.slice();s--;)a=((i=f*(o=t[s]%y)+(r=c*o+(u=t[s]/y|0)*f)%y*y+a)/n|0)+(r/y|0)+c*u,t[s]=i%n;return a&&(t=[a].concat(t)),t}function e(t,e,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(t[i]!=e[i]){o=t[i]>e[i]?1:-1;break}return o}function n(t,e,n,r){for(var i=0;n--;)t[n]-=i,i=t[n]<e[n]?1:0,t[n]=i*r+t[n]-e[n];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(r,i,o,u,a){var f,c,d,p,y,g,v,b,w,_,E,A,B,C,k,x,F,S=r.s==i.s?1:-1,D=r.c,T=i.c;if(!(D&&D[0]&&T&&T[0]))return new P(r.s&&i.s&&(D?!T||D[0]!=T[0]:T)?D&&0==D[0]||!T?0*S:S/0:NaN);for(w=(b=new P(S)).c=[],S=o+(c=r.e-i.e)+1,a||(a=l,c=m(r.e/h)-m(i.e/h),S=S/h|0),d=0;T[d]==(D[d]||0);d++);if(T[d]>(D[d]||0)&&c--,S<0)w.push(1),p=!0;else{for(C=D.length,x=T.length,d=0,S+=2,(y=s(a/(T[0]+1)))>1&&(T=t(T,y,a),D=t(D,y,a),x=T.length,C=D.length),B=x,E=(_=D.slice(0,x)).length;E<x;_[E++]=0);F=T.slice(),F=[0].concat(F),k=T[0],T[1]>=a/2&&k++;do{if(y=0,(f=e(T,_,x,E))<0){if(A=_[0],x!=E&&(A=A*a+(_[1]||0)),(y=s(A/k))>1)for(y>=a&&(y=a-1),v=(g=t(T,y,a)).length,E=_.length;1==e(g,_,v,E);)y--,n(g,x<v?F:T,v,a),v=g.length,f=1;else 0==y&&(f=y=1),v=(g=T.slice()).length;if(v<E&&(g=[0].concat(g)),n(_,g,E,a),E=_.length,-1==f)for(;e(T,_,x,E)<1;)y++,n(_,x<E?F:T,E,a),E=_.length}else 0===f&&(y++,_=[0]);w[d++]=y,_[0]?_[E++]=D[B]||0:(_=[D[B]],E=1)}while((B++<C||null!=_[0])&&S--);p=null!=_[0],w[0]||w.splice(0,1)}if(a==l){for(d=1,S=w[0];S>=10;S/=10,d++);U(b,o+(b.e=d+c*h-1)+1,u,p)}else b.e=c,b.r=+p;return b}}(),i=function(){var t=/^(-?)0([xbo])(?=\w[\w.]*$)/i,e=/^([^.]+)\.$/,n=/^\.([^.]+)$/,r=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(o,u,a,s){var c,l=a?u:u.replace(i,"");if(r.test(l))o.s=isNaN(l)?null:l<0?-1:1,o.c=o.e=null;else{if(!a&&(l=l.replace(t,function(t,e,n){return c="x"==(n=n.toLowerCase())?16:"b"==n?2:8,s&&s!=c?t:e}),s&&(c=s,l=l.replace(e,"$1").replace(n,"0.$1")),u!=l))return new P(l,c);if(P.DEBUG)throw Error(f+"Not a"+(s?" base "+s:"")+" number: "+u);o.c=o.e=o.s=null}}}(),o.absoluteValue=o.abs=function(){var t=new P(this);return t.s<0&&(t.s=1),t},o.comparedTo=function(t,e){return b(this,new P(t,e))},o.decimalPlaces=o.dp=function(t,e){var n,r,i,o=this;if(null!=t)return w(t,0,g),null==e?e=k:w(e,0,8),U(new P(o),t+o.e+1,e);if(!(n=o.c))return null;if(r=((i=n.length-1)-m(this.e/h))*h,i=n[i])for(;i%10==0;i/=10,r--);return r<0&&(r=0),r},o.dividedBy=o.div=function(t,e){return n(this,new P(t,e),C,k)},o.dividedToIntegerBy=o.idiv=function(t,e){return n(this,new P(t,e),0,1)},o.exponentiatedBy=o.pow=function(t,e){var n,r,i,o,u,c,l,d,p=this;if((t=new P(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+q(t));if(null!=e&&(e=new P(e)),u=t.e>14,!p.c||!p.c[0]||1==p.c[0]&&!p.e&&1==p.c.length||!t.c||!t.c[0])return d=new P(Math.pow(+q(p),u?2-_(t):+q(t))),e?d.mod(e):d;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new P(NaN);(r=!c&&p.isInteger()&&e.isInteger())&&(p=p.mod(e))}else{if(t.e>9&&(p.e>0||p.e<-1||(0==p.e?p.c[0]>1||u&&p.c[1]>=24e7:p.c[0]<8e13||u&&p.c[0]<=9999975e7)))return o=p.s<0&&_(t)?-0:0,p.e>-1&&(o=1/o),new P(c?1/o:o);I&&(o=a(I/h+2))}for(u?(n=new P(.5),c&&(t.s=1),l=_(t)):l=(i=Math.abs(+q(t)))%2,d=new P(B);;){if(l){if(!(d=d.times(p)).c)break;o?d.c.length>o&&(d.c.length=o):r&&(d=d.mod(e))}if(i){if(0===(i=s(i/2)))break;l=i%2}else if(U(t=t.times(n),t.e+1,1),t.e>14)l=_(t);else{if(0==(i=+q(t)))break;l=i%2}p=p.times(p),o?p.c&&p.c.length>o&&(p.c.length=o):r&&(p=p.mod(e))}return r?d:(c&&(d=B.div(d)),e?d.mod(e):o?U(d,I,k,void 0):d)},o.integerValue=function(t){var e=new P(this);return null==t?t=k:w(t,0,8),U(e,e.e+1,t)},o.isEqualTo=o.eq=function(t,e){return 0===b(this,new P(t,e))},o.isFinite=function(){return!!this.c},o.isGreaterThan=o.gt=function(t,e){return b(this,new P(t,e))>0},o.isGreaterThanOrEqualTo=o.gte=function(t,e){return 1===(e=b(this,new P(t,e)))||0===e},o.isInteger=function(){return!!this.c&&m(this.e/h)>this.c.length-2},o.isLessThan=o.lt=function(t,e){return b(this,new P(t,e))<0},o.isLessThanOrEqualTo=o.lte=function(t,e){return-1===(e=b(this,new P(t,e)))||0===e},o.isNaN=function(){return!this.s},o.isNegative=function(){return this.s<0},o.isPositive=function(){return this.s>0},o.isZero=function(){return!!this.c&&0==this.c[0]},o.minus=function(t,e){var n,r,i,o,u=this,a=u.s;if(e=(t=new P(t,e)).s,!a||!e)return new P(NaN);if(a!=e)return t.s=-e,u.plus(t);var s=u.e/h,f=t.e/h,c=u.c,d=t.c;if(!s||!f){if(!c||!d)return c?(t.s=-e,t):new P(d?u:NaN);if(!c[0]||!d[0])return d[0]?(t.s=-e,t):new P(c[0]?u:3==k?-0:0)}if(s=m(s),f=m(f),c=c.slice(),a=s-f){for((o=a<0)?(a=-a,i=c):(f=s,i=d),i.reverse(),e=a;e--;i.push(0));i.reverse()}else for(r=(o=(a=c.length)<(e=d.length))?a:e,a=e=0;e<r;e++)if(c[e]!=d[e]){o=c[e]<d[e];break}if(o&&(i=c,c=d,d=i,t.s=-t.s),(e=(r=d.length)-(n=c.length))>0)for(;e--;c[n++]=0);for(e=l-1;r>a;){if(c[--r]<d[r]){for(n=r;n&&!c[--n];c[n]=e);--c[n],c[r]+=l}c[r]-=d[r]}for(;0==c[0];c.splice(0,1),--f);return c[0]?N(t,c,f):(t.s=3==k?-1:1,t.c=[t.e=0],t)},o.modulo=o.mod=function(t,e){var r,i,o=this;return t=new P(t,e),!o.c||!t.s||t.c&&!t.c[0]?new P(NaN):!t.c||o.c&&!o.c[0]?new P(o):(9==O?(i=t.s,t.s=1,r=n(o,t,0,3),t.s=i,r.s*=i):r=n(o,t,0,O),(t=o.minus(r.times(t))).c[0]||1!=O||(t.s=o.s),t)},o.multipliedBy=o.times=function(t,e){var n,r,i,o,u,a,s,f,c,d,p,g,v,b,w,_=this,E=_.c,A=(t=new P(t,e)).c;if(!(E&&A&&E[0]&&A[0]))return!_.s||!t.s||E&&!E[0]&&!A||A&&!A[0]&&!E?t.c=t.e=t.s=null:(t.s*=_.s,E&&A?(t.c=[0],t.e=0):t.c=t.e=null),t;for(r=m(_.e/h)+m(t.e/h),t.s*=_.s,(s=E.length)<(d=A.length)&&(v=E,E=A,A=v,i=s,s=d,d=i),i=s+d,v=[];i--;v.push(0));for(b=l,w=y,i=d;--i>=0;){for(n=0,p=A[i]%w,g=A[i]/w|0,o=i+(u=s);o>i;)n=((f=p*(f=E[--u]%w)+(a=g*f+(c=E[u]/w|0)*p)%w*w+v[o]+n)/b|0)+(a/w|0)+g*c,v[o--]=f%b;v[o]=n}return n?++r:v.splice(0,1),N(t,v,r)},o.negated=function(){var t=new P(this);return t.s=-t.s||null,t},o.plus=function(t,e){var n,r=this,i=r.s;if(e=(t=new P(t,e)).s,!i||!e)return new P(NaN);if(i!=e)return t.s=-e,r.minus(t);var o=r.e/h,u=t.e/h,a=r.c,s=t.c;if(!o||!u){if(!a||!s)return new P(i/0);if(!a[0]||!s[0])return s[0]?t:new P(a[0]?r:0*i)}if(o=m(o),u=m(u),a=a.slice(),i=o-u){for(i>0?(u=o,n=s):(i=-i,n=a),n.reverse();i--;n.push(0));n.reverse()}for((i=a.length)-(e=s.length)<0&&(n=s,s=a,a=n,e=i),i=0;e;)i=(a[--e]=a[e]+s[e]+i)/l|0,a[e]=l===a[e]?0:a[e]%l;return i&&(a=[i].concat(a),++u),N(t,a,u)},o.precision=o.sd=function(t,e){var n,r,i,o=this;if(null!=t&&t!==!!t)return w(t,1,g),null==e?e=k:w(e,0,8),U(new P(o),t,e);if(!(n=o.c))return null;if(r=(i=n.length-1)*h+1,i=n[i]){for(;i%10==0;i/=10,r--);for(i=n[0];i>=10;i/=10,r++);}return t&&o.e+1>r&&(r=o.e+1),r},o.shiftedBy=function(t){return w(t,-d,d),this.times("1e"+t)},o.squareRoot=o.sqrt=function(){var t,e,r,i,o,u=this,a=u.c,s=u.s,f=u.e,c=C+4,l=new P("0.5");if(1!==s||!a||!a[0])return new P(!s||s<0&&(!a||a[0])?NaN:a?u:1/0);if(0==(s=Math.sqrt(+q(u)))||s==1/0?(((e=v(a)).length+f)%2==0&&(e+="0"),s=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),r=new P(e=s==1/0?"1e"+f:(e=s.toExponential()).slice(0,e.indexOf("e")+1)+f)):r=new P(s+""),r.c[0])for((s=(f=r.e)+c)<3&&(s=0);;)if(o=r,r=l.times(o.plus(n(u,o,c,1))),v(o.c).slice(0,s)===(e=v(r.c)).slice(0,s)){if(r.e<f&&--s,"9999"!=(e=e.slice(s-3,s+1))&&(i||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(U(r,r.e+C+2,1),t=!r.times(r).eq(u));break}if(!i&&(U(o,o.e+C+2,0),o.times(o).eq(u))){r=o;break}c+=4,s+=4,i=1}return U(r,r.e+C+1,k,t)},o.toExponential=function(t,e){return null!=t&&(w(t,0,g),t++),L(this,t,e,1)},o.toFixed=function(t,e){return null!=t&&(w(t,0,g),t=t+this.e+1),L(this,t,e)},o.toFormat=function(t,e,n){var r,i=this;if(null==n)null!=t&&e&&"object"==typeof e?(n=e,e=null):t&&"object"==typeof t?(n=t,t=e=null):n=M;else if("object"!=typeof n)throw Error(f+"Argument not an object: "+n);if(r=i.toFixed(t,e),i.c){var o,u=r.split("."),a=+n.groupSize,s=+n.secondaryGroupSize,c=n.groupSeparator||"",l=u[0],h=u[1],d=i.s<0,p=d?l.slice(1):l,y=p.length;if(s&&(o=a,a=s,s=o,y-=o),a>0&&y>0){for(o=y%a||a,l=p.substr(0,o);o<y;o+=a)l+=c+p.substr(o,a);s>0&&(l+=c+p.slice(o)),d&&(l="-"+l)}r=h?l+(n.decimalSeparator||"")+((s=+n.fractionGroupSize)?h.replace(new RegExp("\\d{"+s+"}\\B","g"),"$&"+(n.fractionGroupSeparator||"")):h):l}return(n.prefix||"")+r+(n.suffix||"")},o.toFraction=function(t){var e,r,i,o,u,a,s,c,l,d,y,g,m=this,b=m.c;if(null!=t&&(!(s=new P(t)).isInteger()&&(s.c||1!==s.s)||s.lt(B)))throw Error(f+"Argument "+(s.isInteger()?"out of range: ":"not an integer: ")+q(s));if(!b)return new P(m);for(e=new P(B),l=r=new P(B),i=c=new P(B),g=v(b),u=e.e=g.length-m.e-1,e.c[0]=p[(a=u%h)<0?h+a:a],t=!t||s.comparedTo(e)>0?u>0?e:l:s,a=D,D=1/0,s=new P(g),c.c[0]=0;d=n(s,e,0,1),1!=(o=r.plus(d.times(i))).comparedTo(t);)r=i,i=o,l=c.plus(d.times(o=l)),c=o,e=s.minus(d.times(o=e)),s=o;return o=n(t.minus(r),i,0,1),c=c.plus(o.times(l)),r=r.plus(o.times(i)),c.s=l.s=m.s,y=n(l,i,u*=2,k).minus(m).abs().comparedTo(n(c,r,u,k).minus(m).abs())<1?[l,i]:[c,r],D=a,y},o.toNumber=function(){return+q(this)},o.toPrecision=function(t,e){return null!=t&&w(t,1,g),L(this,t,e,2)},o.toString=function(t){var e,n=this,i=n.s,o=n.e;return null===o?i?(e="Infinity",i<0&&(e="-"+e)):e="NaN":(e=v(n.c),null==t?e=o<=x||o>=F?E(e,o):A(e,o,"0"):(w(t,2,j.length,"Base"),e=r(A(e,o,"0"),10,t,i,!0)),i<0&&n.c[0]&&(e="-"+e)),e},o.valueOf=o.toJSON=function(){return q(this)},o._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(o[Symbol.toStringTag]="BigNumber",o[Symbol.for("nodejs.util.inspect.custom")]=o.valueOf),null!=e&&P.set(e),P}()).default=o.BigNumber=o,void 0===(r=function(){return o}.call(e,n,e,t))||(t.exports=r)}()},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(24),a=n(253),s=n(74),f=n(48),c=n(25),l=n(77),h=n(297);l.default.plugins(new h.default);var d=c.createLogger("scatterPlayer"),p={ERR_GET_SCATTER_FAILED:"ERR_GET_SCATTER_FAILED",ERR_GET_IDENTITY_FAILED:"ERR_GET_IDENTITY_FAILED",ERR_LOGOUT_FAILED:"ERR_LOGOUT_FAILED",ERR_CONF_NOT_FOUND:"ERR_CONF_NOT_FOUND"},y=function(t){function e(e){var n=t.call(this)||this;return n._networks=e,n.identityReceiver=[],n.storage=new a.default({network_name:"dev",lang:"ch"}),n.events.enableEvents(p),d.info("eos player created: \n"+n.netName+" \n"+JSON.stringify(n.netConf,null,2)),n}return r(e,t),e.prototype.switchNetwork=function(t){t in this._networks?(this.storage.set("network_name",t),this._eosClient=void 0,d.info("network changed to "+this.netName+" "+this.netConf+".")):d.warning("network "+t+" cannot find.")},e.prototype.setNetConf=function(t,e){this._networks[t]=e},Object.defineProperty(e.prototype,"netName",{get:function(){return this.storage.get("network_name")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"netConf",{get:function(){var t=this._networks[this.netName];return t||this.events.emitEvent(p.ERR_CONF_NOT_FOUND,new Error("cannot find config of "+this.netName)),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scatter",{get:function(){var t=window.scatter;if(!t){var e=new Error("scatter cannot found");this.events.emitEvent(p.ERR_GET_SCATTER_FAILED,e)}return t},enumerable:!0,configurable:!0}),e.prototype.getScatterAsync=function(t){return void 0===t&&(t=100),i(this,void 0,void 0,function(){var e,n;return o(this,function(r){switch(r.label){case 0:return window.scatter||!t--?[3,3]:(d.verbose("get scatter failed, retry :",t),e=window,[4,this.getPCScatter()]);case 1:return e.scatter=r.sent(),[4,f.forMs(100)];case 2:return r.sent(),[3,0];case 3:return window.scatter||(n=new Error("scatter cannot found"),this.events.emitEvent(p.ERR_GET_SCATTER_FAILED,n)),[2,window.scatter]}})})},e.prototype.getPCScatter=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,new Promise(function(t){l.default.scatter.connect("CryptoThrone").then(function(e){if(!e)return!1;t(l.default.scatter)})})]})})},e.prototype.login=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this.getIdentity()]})})},e.prototype.logout=function(){return i(this,void 0,void 0,function(){var t,e;return o(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,this.getScatterAsync()];case 1:return[4,n.sent().forgetIdentity()];case 2:return t=n.sent(),d.info("log out from "+this.storage.get("latest_chain_id")),[2,t];case 3:return e=n.sent(),this.events.emitEvent(p.ERR_LOGOUT_FAILED,e),[3,4];case 4:return[2]}})})},Object.defineProperty(e.prototype,"eosClient",{get:function(){if(!this._eosClient){var t=this.netConf;console.log("this.scatter",this.scatter),console.log("this.scatter.eos",this.scatter.eos);var e=t.httpEndpoint.indexOf(":"),n=t.httpEndpoint.indexOf(":",e+1),r=t.httpEndpoint.substr(0,e),i=n<0?t.httpEndpoint.substr(e+3):t.httpEndpoint.substr(e+3,n-e-3),o=n<0?"https"===r?"443":"80":t.httpEndpoint.substr(n+1);console.log("protocol",r,i,o),t.host=i,t.port=o,console.log("conf",t),this._eosClient=this.scatter.eos(t,u.Eos,{},r)}if(!this._eosClient)throw new Error("cannot create _eosClient");return this._eosClient},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return i(this,void 0,void 0,function(){function t(t){i=t}var e,n,r,i,u=this;return o(this,function(o){switch(o.label){case 0:return[4,this.getScatterAsync()];case 1:return e=o.sent(),n=this.storage.get("latest_chain_id"),r=this.netConf.chainId,n&&r!==n?(d.info("a changing of chain_id detected: "+n+" -> "+r+" "),[4,this.logout()]):[3,3];case 2:o.sent(),o.label=3;case 3:return this.storage.set("latest_chain_id",r),this.identityReceiver.push(t),this.identityReceiver.length<=1&&e.getIdentity({accounts:[this.netConf]}).then(function(){u.identityReceiver.forEach(function(t){return t(e.identity?e.identity.accounts.find(function(t){return"eos"===t.blockchain}):void 0)}),u.identityReceiver=[]}).catch(function(t){u.identityReceiver.forEach(function(e){return e(t)}),u.identityReceiver=[]}),[4,f.forCondition(function(){return!!i})];case 4:if(o.sent(),i instanceof Error||i.isError)throw this.events.emitEvent(p.ERR_GET_IDENTITY_FAILED,i),i;return[2,i]}})})},e.prototype.sign=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return i(this,void 0,void 0,function(){var n,r,i,u,a,s,f,c,l,h,p,y=this;return o(this,function(g){switch(g.label){case 0:return[4,this.getIdentity()];case 1:return n=g.sent(),r=n.name,[4,this.getAccountInfo(r)];case 2:if(!(i=g.sent().permissions))return d.warning("permissions of account "+r+" are not found."),[2];u=i.find(function(t){return t.perm_name===n.authority}),d.info("perm : "+JSON.stringify(u)),a=u.required_auth,s=a.accounts,f=a.keys,c=f||[],l=function(t){var n,i;return o(this,function(o){switch(o.label){case 0:if(!(n=e[t]))throw new Error("Sign Plugin Error : cannot parse the "+t+"'th plugin");return[4,Promise.all(s.map(function(t){return t.permission.actor+"@"+t.permission.permission}).map(function(t){return n.signKeyProvider[t]}).filter(function(t){return t}).map(function(t){return Promise.resolve(t(r,y.chain))}))];case 1:return i=o.sent(),c=c.concat(i.map(function(t){return{key:t}})),[2]}})},p=0,g.label=3;case 3:return e&&p<e.length?[5,l(p)]:[3,6];case 4:g.sent(),g.label=5;case 5:return p++,[3,3];case 6:h="",p=0,g.label=7;case 7:if(!(p<c.length))return[3,12];g.label=8;case 8:return g.trys.push([8,10,,11]),d.info("try sign ("+JSON.stringify(c[p])+") : "+t),[4,this.scatter.getArbitrarySignature(c[p].key,t)];case 9:return h=g.sent(),[3,12];case 10:return g.sent(),d.warning("try pub key failed "+c[p]),[3,11];case 11:return p++,[3,7];case 12:return[2,h]}})})},e.prototype.help=function(){return t.prototype.help.call(this)+"\n\n## Usage of eosplayer (for broswer)\n\n### Events\n\nERR_GET_SCATTER_FAILED\nERR_GET_IDENTITY_FAILED\nERR_LOGOUT_FAILED\n\n### APIs\n\n```js\n{void} eosplayer.switchNetwork(val) // switch network\n{void} eosplayer.setNetConf(network_name, conf) // add a network config at runtime\n\nget {Scatter} eosplayer.scatter // get scatter instance\nget {Scatter} async getScatterAsync(maxTry = 100) // get scatter instance\n\nget {string} eosplayer.netName // get current network name\nget {string} eosplayer.netConf // get current network config\n\nasync {Identity} eosplayer.login() // let user allow you using identity\nasync {void} eosplayer.logout() // return back the identity\n\nasync {string} sign(message) // sign a message with current identity\n```\n\n## Imported libs\n\n```js\nwindow.eosjs = Eos; /** the eosjs lib @see {@url https://www.npmjs.com/package/eosjs} */\nwindow.env = env; /** {isPc} */\nwindow.idb = idb; /** idb lib for browser storage @see {@url https://www.npmjs.com/package/idb } */\nwindow.BigNumber = BigNumber; /** big number @see {@url https://www.npmjs.com/package/bignumber.js} */\n\nwindow.kh.eos.Player\nwindow.kh.eos.ScatterPlayer\nwindow.eosplayer = new ScatterPlayer(networks);\n```\n"},e}(s.Player);e.ScatterPlayer=y},function(t,e,n){t.exports=n(141)},function(t,e,n){"use strict";var r=n(40),i=n(90),o=n(93),u=n(18),a=n(31),s=n(148),f=n(60),c=n(155),l=n(9)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,p,y,g,m){s(n,e,p);var v,b,w,_=function(t){if(!h&&t in C)return C[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},E=e+" Iterator",A="values"==y,B=!1,C=t.prototype,k=C[l]||C["@@iterator"]||y&&C[y],x=k||_(y),F=y?A?_("entries"):x:void 0,S="Array"==e&&C.entries||k;if(S&&(w=c(S.call(new t)))!==Object.prototype&&w.next&&(f(w,E,!0),r||"function"==typeof w[l]||u(w,l,d)),A&&k&&"values"!==k.name&&(B=!0,x=function(){return k.call(this)}),r&&!m||!h&&!B&&C[l]||u(C,l,x),a[e]=x,a[E]=d,y)if(v={values:A?x:_("values"),keys:g?x:_("keys"),entries:F},m)for(b in v)b in C||o(C,b,v[b]);else i(i.P+i.F*(h||B),e,v);return v}},function(t,e,n){var r=n(10),i=n(13),o=n(146),u=n(18),a=n(14),s=function(t,e,n){var f,c,l,h=t&s.F,d=t&s.G,p=t&s.S,y=t&s.P,g=t&s.B,m=t&s.W,v=d?i:i[e]||(i[e]={}),b=v.prototype,w=d?r:p?r[e]:(r[e]||{}).prototype;for(f in d&&(n=e),n)(c=!h&&w&&void 0!==w[f])&&a(v,f)||(l=c?w[f]:n[f],v[f]=d&&"function"!=typeof w[f]?n[f]:g&&c?o(l,r):m&&w[f]==l?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(l):y&&"function"==typeof l?o(Function.call,l):l,y&&((v.virtual||(v.virtual={}))[f]=l,t&s.R&&b&&!b[f]&&u(b,f,l)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e,n){t.exports=!n(20)&&!n(41)(function(){return 7!=Object.defineProperty(n(92)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(30),i=n(10).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){t.exports=n(18)},function(t,e,n){var r=n(29),i=n(149),o=n(59),u=n(57)("IE_PROTO"),a=function(){},s=function(){var t,e=n(92)("iframe"),r=o.length;for(e.style.display="none",n(154).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;r--;)delete s.prototype[o[r]];return s()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[u]=t):n=s(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(14),i=n(21),o=n(151)(!1),u=n(57)("IE_PROTO");t.exports=function(t,e){var n,a=i(t),s=0,f=[];for(n in a)n!=u&&r(a,n)&&f.push(n);for(;e.length>s;)r(a,n=e[s++])&&(~o(f,n)||f.push(n));return f}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(95),i=n(59).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";(function(e){var r=n(100),i=n(22),o=n(175),u=n(3),a=n(34),s=n(47),f=n(17),c=i.Long;function l(t,n,r,c,l){if(!(t=s(t)))throw new TypeError("private_key is required");if(!(n=a(n)))throw new TypeError("public_key is required");if(!(r=d(r)))throw new TypeError("nonce is required");if(!e.isBuffer(c)){if("string"!=typeof c)throw new TypeError("message should be buffer or string");c=new e(c,"binary")}if(l&&"number"!=typeof l)throw new TypeError("checksum should be a number");var h=t.getSharedSecret(n),y=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);y.writeUint64(r),y.append(h.toString("binary"),"binary"),y=new e(y.copy(0,y.offset).toBinary(),"binary");var g=f.sha512(y),m=g.slice(32,48),v=g.slice(0,32),b=f.sha256(g);if(b=b.slice(0,4),b=i.fromBinary(b.toString("binary"),i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN).readUint32(),l){if(b!==l)throw new Error("Invalid key");c=function(t,n,r){u(t,"Missing cipher text"),t=p(t);var i=o.createDecipheriv("aes-256-cbc",n,r);return t=e.concat([i.update(t),i.final()])}(c,v,m)}else c=function(t,n,r){u(t,"Missing plain text"),t=p(t);var i=o.createCipheriv("aes-256-cbc",n,r);return t=e.concat([i.update(t),i.final()])}(c,v,m);return{nonce:r,message:c,checksum:b}}t.exports={encrypt:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){if(null===h){var t=new Uint8Array(r(2));h=parseInt(t[0]<<8|t[1],10)}var e=c.fromNumber(Date.now()),n=++h%65535;return(e=e.shiftLeft(16).or(c.fromNumber(n))).toString()}();return l(t,e,i,n)},decrypt:function(t,e,n,r,i){return l(t,e,n,r,i).message}};var h=null,d=function(t){return t?c.isLong(t)?t:c.fromString(t):t},p=function(t){return t?e.isBuffer(t)?t:new e(t,"binary"):t}}).call(this,n(2).Buffer)},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";(function(e,r){var i=n(0).Buffer,o=e.crypto||e.msCrypto;o&&o.getRandomValues?t.exports=function(t,n){if(t>65536)throw new Error("requested too many random bytes");var u=new e.Uint8Array(t);t>0&&o.getRandomValues(u);var a=i.from(u.buffer);if("function"==typeof n)return r.nextTick(function(){n(null,a)});return a}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,n(7),n(11))},function(t,e,n){var r={ECB:n(177),CBC:n(178),CFB:n(179),CFB8:n(180),CFB1:n(181),OFB:n(182),CTR:n(102),GCM:n(102)},i=n(104);for(var o in i)i[o].module=r[i[o].mode];t.exports=i},function(t,e,n){var r=n(32),i=n(0).Buffer,o=n(103);function u(t){var e=t._cipher.encryptBlockRaw(t._prev);return o(t._prev),e}e.encrypt=function(t,e){var n=Math.ceil(e.length/16),o=t._cache.length;t._cache=i.concat([t._cache,i.allocUnsafe(16*n)]);for(var a=0;a<n;a++){var s=u(t),f=o+16*a;t._cache.writeUInt32BE(s[0],f+0),t._cache.writeUInt32BE(s[1],f+4),t._cache.writeUInt32BE(s[2],f+8),t._cache.writeUInt32BE(s[3],f+12)}var c=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),r(e,c)}},function(t,e){t.exports=function(t){for(var e,n=t.length;n--;){if(255!==(e=t.readUInt8(n))){e++,t.writeUInt8(e,n);break}t.writeUInt8(0,n)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,n){var r=n(44),i=n(0).Buffer,o=n(15),u=n(1),a=n(194),s=n(32),f=n(103);function c(t,e,n,u){o.call(this);var s=i.alloc(4,0);this._cipher=new r.AES(e);var c=this._cipher.encryptBlock(s);this._ghash=new a(c),n=function(t,e,n){if(12===e.length)return t._finID=i.concat([e,i.from([0,0,0,1])]),i.concat([e,i.from([0,0,0,2])]);var r=new a(n),o=e.length,u=o%16;r.update(e),u&&(u=16-u,r.update(i.alloc(u,0))),r.update(i.alloc(8,0));var s=8*o,c=i.alloc(8);c.writeUIntBE(s,0,8),r.update(c),t._finID=r.state;var l=i.from(t._finID);return f(l),l}(this,n,c),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=u,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}u(c,o),c.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=i.alloc(e,0),this._ghash.update(e))}this._called=!0;var n=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(n),this._len+=t.length,n},c.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=s(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var n=0;t.length!==e.length&&n++;for(var r=Math.min(t.length,e.length),i=0;i<r;++i)n+=t[i]^e[i];return n}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},c.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},c.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},c.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=c},function(t,e,n){t.exports=i;var r=n(65).EventEmitter;function i(){r.call(this)}n(1)(i,r),i.Readable=n(66),i.Writable=n(190),i.Duplex=n(191),i.Transform=n(192),i.PassThrough=n(193),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",s));var u=!1;function a(){u||(u=!0,t.end())}function s(){u||(u=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(c(),0===r.listenerCount(this,"error"))throw t}function c(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",a),n.removeListener("close",s),n.removeListener("error",f),t.removeListener("error",f),n.removeListener("end",c),n.removeListener("close",c),t.removeListener("close",c)}return n.on("error",f),t.on("error",f),n.on("end",c),n.on("close",c),t.on("close",c),t.emit("pipe",n),t}},function(t,e,n){"use strict";(function(e,r){var i=n(45);t.exports=b;var o,u=n(99);b.ReadableState=v;n(65).EventEmitter;var a=function(t,e){return t.listeners(e).length},s=n(108),f=n(0).Buffer,c=e.Uint8Array||function(){};var l=n(33);l.inherits=n(1);var h=n(183),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,y=n(184),g=n(109);l.inherits(b,s);var m=["error","close","destroy","pause","resume"];function v(t,e){o=o||n(16),t=t||{};var r=e instanceof o;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,u=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(u||0===u)?u:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(68).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function b(t){if(o=o||n(16),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),s.call(this)}function w(t,e,n,r,i){var o,u=t._readableState;null===e?(u.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,B(t)}(t,u)):(i||(o=function(t,e){var n;(function(t){return f.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(u,e)),o?t.emit("error",o):u.objectMode||e&&e.length>0?("string"==typeof e||u.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),r?u.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,u,e,!0):u.ended?t.emit("error",new Error("stream.push() after EOF")):(u.reading=!1,u.decoder&&!n?(e=u.decoder.write(e),u.objectMode||0!==e.length?_(t,u,e,!1):k(t,u)):_(t,u,e,!1))):r||(u.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(u)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&B(t)),k(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=f.from(t,e),e=""),n=!0),w(this,t,e,!1,n)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return p||(p=n(68).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var E=8388608;function A(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=E?t=E:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function B(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(C,t):C(t))}function C(t){d("emit readable"),t.emit("readable"),D(t)}function k(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(x,t,e))}function x(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function F(t){d("readable nexttick read 0"),t.read(0)}function S(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),D(t),e.flowing&&!e.reading&&t.read(0)}function D(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function T(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,u=t>o.length?o.length:t;if(u===o.length?i+=o:i+=o.slice(0,t),0===(t-=u)){u===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(u));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=f.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,u=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,u),0===(t-=u)){u===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(u));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function O(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(I,e,t))}function I(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function M(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}b.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?O(this):B(this),null;if(0===(t=A(t,e))&&e.ended)return 0===e.length&&O(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=A(n,e))),null===(r=t>0?T(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&O(this)),null!==r&&this.emit("data",r),r},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var s=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?c:b;function f(e,r){d("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),t.removeListener("close",m),t.removeListener("finish",v),t.removeListener("drain",l),t.removeListener("error",g),t.removeListener("unpipe",f),n.removeListener("end",c),n.removeListener("end",b),n.removeListener("data",y),h=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}function c(){d("onend"),t.end()}o.endEmitted?i.nextTick(s):n.once("end",s),t.on("unpipe",f);var l=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,D(t))}}(n);t.on("drain",l);var h=!1;var p=!1;function y(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==M(o.pipes,t))&&!h&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function g(e){d("onerror",e),b(),t.removeListener("error",g),0===a(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",v),b()}function v(){d("onfinish"),t.removeListener("close",m),b()}function b(){d("unpipe"),n.unpipe(t)}return n.on("data",y),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?u(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",g),t.once("close",m),t.once("finish",v),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var u=M(e.pipes,t);return-1===u?this:(e.pipes.splice(u,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},b.prototype.on=function(t,e){var n=s.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&B(this):i.nextTick(F,this))}return n},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(S,t,e))}(this,t)),this},b.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),!n.objectMode||null!==i&&void 0!==i)&&((n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=T}).call(this,n(7),n(11))},function(t,e,n){t.exports=n(65).EventEmitter},function(t,e,n){"use strict";var r=n(45);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return o||u?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=o;var r=n(16),i=n(33);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",u)}function u(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){a(t,e,n)}):a(this,null,null)}function a(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(1),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){var r=n(44),i=n(0).Buffer,o=n(15);function u(t,e,n,u){o.call(this),this._cipher=new r.AES(e),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=u,this._mode=t}n(1)(u,o),u.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},u.prototype._final=function(){this._cipher.scrub()},t.exports=u},function(t,e,n){var r=n(0).Buffer,i=n(69);t.exports=function(t,e,n,o){if(r.isBuffer(t)||(t=r.from(t,"binary")),e&&(r.isBuffer(e)||(e=r.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var u=n/8,a=r.alloc(u),s=r.alloc(o||0),f=r.alloc(0);u>0||o>0;){var c=new i;c.update(f),c.update(t),e&&c.update(e),f=c.digest();var l=0;if(u>0){var h=a.length-u;l=Math.min(u,f.length),f.copy(a,h,0,l),u-=l}if(l<f.length&&o>0){var d=s.length-o,p=Math.min(o,f.length-l);f.copy(s,d,l,l+p),o-=p}}return f.fill(0),{key:a,iv:s}}},function(t,e,n){"use strict";var r=n(0).Buffer,i=n(106).Transform;function o(t){i.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(1)(o,i),o.prototype._transform=function(t,e,n){var r=null;try{this.update(t,e)}catch(t){r=t}n(r)},o.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},o.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var n=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)n[o++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)n[this._blockOffset++]=t[i++];for(var u=0,a=8*t.length;a>0;++u)this._length[u]+=a,(a=this._length[u]/4294967296|0)>0&&(this._length[u]-=4294967296*a);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return e},o.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=o},function(t,e,n){var r=n(3),i=n(0).Buffer,o=n(12),u=o.valueOf(3);function a(t,e,n,i){r.notStrictEqual(i,void 0,"Missing Z coordinate"),this.curve=t,this.x=e,this.y=n,this.z=i,this._zInv=null,this.compressed=!0}Object.defineProperty(a.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(a.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(a.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),a.fromAffine=function(t,e,n){return new a(t,e,n,o.ONE)},a.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},a.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new a(this.curve,this.x,t,this.z)},a.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var e=this.x,n=this.y,r=t.x,i=t.y.multiply(this.z).subtract(n.multiply(t.z)).mod(this.curve.p),o=r.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p);if(0===o.signum())return 0===i.signum()?this.twice():this.curve.infinity;var s=o.square(),f=s.multiply(o),c=e.multiply(s),l=i.square().multiply(this.z),h=l.subtract(c.shiftLeft(1)).multiply(t.z).subtract(f).multiply(o).mod(this.curve.p),d=c.multiply(u).multiply(i).subtract(n.multiply(f)).subtract(l.multiply(i)).multiply(t.z).add(i.multiply(f)).mod(this.curve.p),p=f.multiply(this.z).multiply(t.z).mod(this.curve.p);return new a(this.curve,h,d,p)},a.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,e=this.y,n=e.multiply(this.z).mod(this.curve.p),r=n.multiply(e).mod(this.curve.p),i=this.curve.a,o=t.square().multiply(u);0!==i.signum()&&(o=o.add(this.z.square().multiply(i)));var s=(o=o.mod(this.curve.p)).square().subtract(t.shiftLeft(3).multiply(r)).shiftLeft(1).multiply(n).mod(this.curve.p),f=o.multiply(u).multiply(t).subtract(r.shiftLeft(1)).shiftLeft(2).multiply(r).subtract(o.pow(3)).mod(this.curve.p),c=n.pow(3).shiftLeft(3).mod(this.curve.p);return new a(this.curve,s,f,c)},a.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var e=t,n=e.multiply(u),r=this.negate(),i=this,o=n.bitLength()-2;o>0;--o){var a=n.testBit(o),s=e.testBit(o);i=i.twice(),a!==s&&(i=i.add(a?this:r))}return i},a.prototype.multiplyTwo=function(t,e,n){for(var r=Math.max(t.bitLength(),n.bitLength())-1,i=this.curve.infinity,o=this.add(e);r>=0;){var u=t.testBit(r),a=n.testBit(r);i=i.twice(),u?i=a?i.add(o):i.add(this):a&&(i=i.add(e)),--r}return i},a.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return i.alloc(1,0);var e,n=this.affineX,r=this.affineY,o=this.curve.pLength;return t?(e=i.allocUnsafe(1+o)).writeUInt8(r.isEven()?2:3,0):((e=i.allocUnsafe(1+o+o)).writeUInt8(4,0),r.toBuffer(o).copy(e,1+o)),n.toBuffer(o).copy(e,1),e},a.decodeFrom=function(t,e){var n,i=e.readUInt8(0),u=4!==i,s=Math.floor((t.p.bitLength()+7)/8),f=o.fromBuffer(e.slice(1,1+s));if(u){r.equal(e.length,s+1,"Invalid sequence length"),r(2===i||3===i,"Invalid sequence tag");var c=3===i;n=t.pointFromX(c,f)}else{r.equal(e.length,1+s+s,"Invalid sequence length");var l=o.fromBuffer(e.slice(1+s));n=a.fromAffine(t,f,l)}return n.compressed=u,n},a.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},t.exports=a},function(t,e,n){function r(t,e,n){if(!(this instanceof r))return new r(t,e,n);null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}var i=r.prototype;i.__bigi=n(198).version,r.isBigInteger=function(t,e){return t&&t.__bigi&&(!e||t.__bigi===i.__bigi)},r.prototype.am=function(t,e,n,r,i,o){for(;--o>=0;){var u=e*this[t++]+n[r]+i;i=Math.floor(u/67108864),n[r++]=67108863&u}return i},r.prototype.DB=26,r.prototype.DM=67108863;var o=r.prototype.DV=1<<26;r.prototype.FV=Math.pow(2,52),r.prototype.F1=26,r.prototype.F2=0;var u,a,s="0123456789abcdefghijklmnopqrstuvwxyz",f=new Array;for(u="0".charCodeAt(0),a=0;a<=9;++a)f[u++]=a;for(u="a".charCodeAt(0),a=10;a<36;++a)f[u++]=a;for(u="A".charCodeAt(0),a=10;a<36;++a)f[u++]=a;function c(t){return s.charAt(t)}function l(t,e){var n=f[t.charCodeAt(e)];return null==n?-1:n}function h(t){var e=new r;return e.fromInt(t),e}function d(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}function p(t){this.m=t}function y(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function m(t,e){return t|e}function v(t,e){return t^e}function b(t,e){return t&~e}function w(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function _(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function E(){}function A(t){return t}function B(t){this.r2=new r,this.q3=new r,r.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}p.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},p.prototype.revert=function(t){return t},p.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},p.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},p.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},y.prototype.convert=function(t){var e=new r;return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(r.ZERO)>0&&this.m.subTo(e,e),e},y.prototype.revert=function(t){var e=new r;return t.copyTo(e),this.reduce(e),e},y.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],r=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},y.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},y.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},i.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},i.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+o:this.t=0},i.fromString=function(t,e){var n;if(16==e)n=4;else if(8==e)n=3;else if(256==e)n=8;else if(2==e)n=1;else if(32==e)n=5;else{if(4!=e)return void this.fromRadix(t,e);n=2}this.t=0,this.s=0;for(var i=t.length,o=!1,u=0;--i>=0;){var a=8==n?255&t[i]:l(t,i);a<0?"-"==t.charAt(i)&&(o=!0):(o=!1,0==u?this[this.t++]=a:u+n>this.DB?(this[this.t-1]|=(a&(1<<this.DB-u)-1)<<u,this[this.t++]=a>>this.DB-u):this[this.t-1]|=a<<u,(u+=n)>=this.DB&&(u-=this.DB))}8==n&&0!=(128&t[0])&&(this.s=-1,u>0&&(this[this.t-1]|=(1<<this.DB-u)-1<<u)),this.clamp(),o&&r.ZERO.subTo(this,this)},i.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},i.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},i.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},i.lShiftTo=function(t,e){var n,r=t%this.DB,i=this.DB-r,o=(1<<i)-1,u=Math.floor(t/this.DB),a=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)e[n+u+1]=this[n]>>i|a,a=(this[n]&o)<<r;for(n=u-1;n>=0;--n)e[n]=0;e[u]=a,e.t=this.t+u+1,e.s=this.s,e.clamp()},i.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var r=t%this.DB,i=this.DB-r,o=(1<<r)-1;e[0]=this[n]>>r;for(var u=n+1;u<this.t;++u)e[u-n-1]|=(this[u]&o)<<i,e[u-n]=this[u]>>r;r>0&&(e[this.t-n-1]|=(this.s&o)<<i),e.t=this.t-n,e.clamp()}},i.subTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]-t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r-=t[n],e[n++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[n++]=this.DV+r:r>0&&(e[n++]=r),e.t=n,e.clamp()},i.multiplyTo=function(t,e){var n=this.abs(),i=t.abs(),o=n.t;for(e.t=o+i.t;--o>=0;)e[o]=0;for(o=0;o<i.t;++o)e[o+n.t]=n.am(0,i[o],e,o,0,n.t);e.s=0,e.clamp(),this.s!=t.s&&r.ZERO.subTo(e,e)},i.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var r=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,r,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},i.divRemTo=function(t,e,n){var i=t.abs();if(!(i.t<=0)){var o=this.abs();if(o.t<i.t)return null!=e&&e.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=new r);var u=new r,a=this.s,s=t.s,f=this.DB-d(i[i.t-1]);f>0?(i.lShiftTo(f,u),o.lShiftTo(f,n)):(i.copyTo(u),o.copyTo(n));var c=u.t,l=u[c-1];if(0!=l){var h=l*(1<<this.F1)+(c>1?u[c-2]>>this.F2:0),p=this.FV/h,y=(1<<this.F1)/h,g=1<<this.F2,m=n.t,v=m-c,b=null==e?new r:e;for(u.dlShiftTo(v,b),n.compareTo(b)>=0&&(n[n.t++]=1,n.subTo(b,n)),r.ONE.dlShiftTo(c,b),b.subTo(u,u);u.t<c;)u[u.t++]=0;for(;--v>=0;){var w=n[--m]==l?this.DM:Math.floor(n[m]*p+(n[m-1]+g)*y);if((n[m]+=u.am(0,w,n,v,0,c))<w)for(u.dlShiftTo(v,b),n.subTo(b,n);n[m]<--w;)n.subTo(b,n)}null!=e&&(n.drShiftTo(c,e),a!=s&&r.ZERO.subTo(e,e)),n.t=c,n.clamp(),f>0&&n.rShiftTo(f,n),a<0&&r.ZERO.subTo(n,n)}}},i.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},i.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},i.exp=function(t,e){if(t>4294967295||t<1)return r.ONE;var n=new r,i=new r,o=e.convert(this),u=d(t)-1;for(o.copyTo(n);--u>=0;)if(e.sqrTo(n,i),(t&1<<u)>0)e.mulTo(i,o,n);else{var a=n;n=i,i=a}return e.revert(n)},i.toString=function(t){var e;if(this.s<0)return"-"+this.negate().toString(t);if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,r=(1<<e)-1,i=!1,o="",u=this.t,a=this.DB-u*this.DB%e;if(u-- >0)for(a<this.DB&&(n=this[u]>>a)>0&&(i=!0,o=c(n));u>=0;)a<e?(n=(this[u]&(1<<a)-1)<<e-a,n|=this[--u]>>(a+=this.DB-e)):(n=this[u]>>(a-=e)&r,a<=0&&(a+=this.DB,--u)),n>0&&(i=!0),i&&(o+=c(n));return i?o:"0"},i.negate=function(){var t=new r;return r.ZERO.subTo(this,t),t},i.abs=function(){return this.s<0?this.negate():this},i.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},i.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+d(this[this.t-1]^this.s&this.DM)},i.byteLength=function(){return this.bitLength()>>3},i.mod=function(t){var e=new r;return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(r.ZERO)>0&&t.subTo(e,e),e},i.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new p(e):new y(e),this.exp(t,n)},E.prototype.convert=A,E.prototype.revert=A,E.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},E.prototype.sqrTo=function(t,e){t.squareTo(e)},B.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=new r;return t.copyTo(e),this.reduce(e),e},B.prototype.revert=function(t){return t},B.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},B.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},B.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],k=(1<<26)/C[C.length-1];i.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},i.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=h(n),o=new r,u=new r,a="";for(this.divRemTo(i,o,u);o.signum()>0;)a=(n+u.intValue()).toString(t).substr(1)+a,o.divRemTo(i,o,u);return u.intValue().toString(t)+a},i.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var n=this.chunkSize(e),i=Math.pow(e,n),o=!1,u=0,a=0,s=0;s<t.length;++s){var f=l(t,s);f<0?"-"==t.charAt(s)&&0==this.signum()&&(o=!0):(a=e*a+f,++u>=n&&(this.dMultiply(i),this.dAddOffset(a,0),u=0,a=0))}u>0&&(this.dMultiply(Math.pow(e,u)),this.dAddOffset(a,0)),o&&r.ZERO.subTo(this,this)},i.fromNumber=function(t,e,n){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,n),this.testBit(t-1)||this.bitwiseTo(r.ONE.shiftLeft(t-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(r.ONE.shiftLeft(t-1),this);else{var i=new Array,o=7&t;i.length=1+(t>>3),e.nextBytes(i),o>0?i[0]&=(1<<o)-1:i[0]=0,this.fromString(i,256)}},i.bitwiseTo=function(t,e,n){var r,i,o=Math.min(t.t,this.t);for(r=0;r<o;++r)n[r]=e(this[r],t[r]);if(t.t<this.t){for(i=t.s&this.DM,r=o;r<this.t;++r)n[r]=e(this[r],i);n.t=this.t}else{for(i=this.s&this.DM,r=o;r<t.t;++r)n[r]=e(i,t[r]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},i.changeBit=function(t,e){var n=r.ONE.shiftLeft(t);return this.bitwiseTo(n,e,n),n},i.addTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]+t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r+=t[n],e[n++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[n++]=r:r<-1&&(e[n++]=this.DV+r),e.t=n,e.clamp()},i.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},i.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},i.multiplyLowerTo=function(t,e,n){var r,i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(r=n.t-this.t;i<r;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(r=Math.min(t.t,e);i<r;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},i.multiplyUpperTo=function(t,e,n){--e;var r=n.t=this.t+t.t-e;for(n.s=0;--r>=0;)n[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)n[this.t+r-e]=this.am(e-r,t[r],n,0,0,this.t+r-e);n.clamp(),n.drShiftTo(1,n)},i.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var r=this.t-1;r>=0;--r)n=(e*n+this[r])%t;return n},i.millerRabin=function(t){var e=this.subtract(r.ONE),n=e.getLowestSetBit();if(n<=0)return!1;var i=e.shiftRight(n);(t=t+1>>1)>C.length&&(t=C.length);for(var o=new r(null),u=[],a=0;a<t;++a){for(;f=C[Math.floor(Math.random()*C.length)],-1!=u.indexOf(f););u.push(f),o.fromInt(f);var s=o.modPow(i,this);if(0!=s.compareTo(r.ONE)&&0!=s.compareTo(e)){for(var f=1;f++<n&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(r.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},i.clone=function(){var t=new r;return this.copyTo(t),t},i.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},i.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},i.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},i.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},i.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var n,r=this.DB-t*this.DB%8,i=0;if(t-- >0)for(r<this.DB&&(n=this[t]>>r)!=(this.s&this.DM)>>r&&(e[i++]=n|this.s<<this.DB-r);t>=0;)r<8?(n=(this[t]&(1<<r)-1)<<8-r,n|=this[--t]>>(r+=this.DB-8)):(n=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&n)&&(n|=-256),0===i&&(128&this.s)!=(128&n)&&++i,(i>0||n!=this.s)&&(e[i++]=n);return e},i.equals=function(t){return 0==this.compareTo(t)},i.min=function(t){return this.compareTo(t)<0?this:t},i.max=function(t){return this.compareTo(t)>0?this:t},i.and=function(t){var e=new r;return this.bitwiseTo(t,g,e),e},i.or=function(t){var e=new r;return this.bitwiseTo(t,m,e),e},i.xor=function(t){var e=new r;return this.bitwiseTo(t,v,e),e},i.andNot=function(t){var e=new r;return this.bitwiseTo(t,b,e),e},i.not=function(){for(var t=new r,e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},i.shiftLeft=function(t){var e=new r;return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},i.shiftRight=function(t){var e=new r;return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},i.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+w(this[t]);return this.s<0?this.t*this.DB:-1},i.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=_(this[n]^e);return t},i.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},i.setBit=function(t){return this.changeBit(t,m)},i.clearBit=function(t){return this.changeBit(t,b)},i.flipBit=function(t){return this.changeBit(t,v)},i.add=function(t){var e=new r;return this.addTo(t,e),e},i.subtract=function(t){var e=new r;return this.subTo(t,e),e},i.multiply=function(t){var e=new r;return this.multiplyTo(t,e),e},i.divide=function(t){var e=new r;return this.divRemTo(t,e,null),e},i.remainder=function(t){var e=new r;return this.divRemTo(t,null,e),e},i.divideAndRemainder=function(t){var e=new r,n=new r;return this.divRemTo(t,e,n),new Array(e,n)},i.modPow=function(t,e){var n,i,o=t.bitLength(),u=h(1);if(o<=0)return u;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new p(e):e.isEven()?new B(e):new y(e);var a=new Array,s=3,f=n-1,c=(1<<n)-1;if(a[1]=i.convert(this),n>1){var l=new r;for(i.sqrTo(a[1],l);s<=c;)a[s]=new r,i.mulTo(l,a[s-2],a[s]),s+=2}var g,m,v=t.t-1,b=!0,w=new r;for(o=d(t[v])-1;v>=0;){for(o>=f?g=t[v]>>o-f&c:(g=(t[v]&(1<<o+1)-1)<<f-o,v>0&&(g|=t[v-1]>>this.DB+o-f)),s=n;0==(1&g);)g>>=1,--s;if((o-=s)<0&&(o+=this.DB,--v),b)a[g].copyTo(u),b=!1;else{for(;s>1;)i.sqrTo(u,w),i.sqrTo(w,u),s-=2;s>0?i.sqrTo(u,w):(m=u,u=w,w=m),i.mulTo(w,a[g],u)}for(;v>=0&&0==(t[v]&1<<o);)i.sqrTo(u,w),m=u,u=w,w=m,--o<0&&(o=this.DB-1,--v)}return i.revert(u)},i.modInverse=function(t){var e=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&e||0==t.signum())return r.ZERO;for(var n=t.clone(),i=this.clone(),o=h(1),u=h(0),a=h(0),s=h(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),e?(o.isEven()&&u.isEven()||(o.addTo(this,o),u.subTo(t,u)),o.rShiftTo(1,o)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);for(;i.isEven();)i.rShiftTo(1,i),e?(a.isEven()&&s.isEven()||(a.addTo(this,a),s.subTo(t,s)),a.rShiftTo(1,a)):s.isEven()||s.subTo(t,s),s.rShiftTo(1,s);n.compareTo(i)>=0?(n.subTo(i,n),e&&o.subTo(a,o),u.subTo(s,u)):(i.subTo(n,i),e&&a.subTo(o,a),s.subTo(u,s))}if(0!=i.compareTo(r.ONE))return r.ZERO;for(;s.compareTo(t)>=0;)s.subTo(t,s);for(;s.signum()<0;)s.addTo(t,s);return s},i.pow=function(t){return this.exp(t,new E)},i.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var r=e;e=n,n=r}var i=e.getLowestSetBit(),o=n.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),n.rShiftTo(o,n));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return o>0&&n.lShiftTo(o,n),n},i.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(n[0]==C[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<C.length;){for(var r=C[e],i=e+1;i<C.length&&r<k;)r*=C[i++];for(r=n.modInt(r);e<i;)if(r%C[e++]==0)return!1}return n.millerRabin(t)},i.square=function(){var t=new r;return this.squareTo(t),t},r.ZERO=h(0),r.ONE=h(1),r.valueOf=h,t.exports=r},function(t,e,n){var r=n(3),i=n(12),o=n(114);function u(t,e,n,r,u,a,s){this.p=t,this.a=e,this.b=n,this.G=o.fromAffine(this,r,u),this.n=a,this.h=s,this.infinity=new o(this,null,null,i.ZERO),this.pOverFour=t.add(i.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}u.prototype.pointFromX=function(t,e){var n=e.pow(3).add(this.a.multiply(e)).add(this.b).mod(this.p).modPow(this.pOverFour,this.p),r=n;return n.isEven()^!t&&(r=this.p.subtract(r)),o.fromAffine(this,e,r)},u.prototype.isInfinity=function(t){return t===this.infinity||0===t.z.signum()&&0!==t.y.signum()},u.prototype.isOnCurve=function(t){if(this.isInfinity(t))return!0;var e=t.affineX,n=t.affineY,r=this.a,i=this.b,o=this.p;if(e.signum()<0||e.compareTo(o)>=0)return!1;if(n.signum()<0||n.compareTo(o)>=0)return!1;var u=n.square().mod(o),a=e.pow(3).add(r.multiply(e)).add(i).mod(o);return u.equals(a)},u.prototype.validate=function(t){r(!this.isInfinity(t),"Point is at infinity"),r(this.isOnCurve(t),"Point is not on the curve");var e=t.multiply(this.n);return r(this.isInfinity(e),"Point is not a scalar multiple of G"),!0},t.exports=u},function(t,e,n){"use strict";var r=n(2).Buffer,i=n(1),o=n(113),u=new Array(16),a=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],s=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],f=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],c=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],l=[0,1518500249,1859775393,2400959708,2840853838],h=[1352829926,1548603684,1836072691,2053994217,0];function d(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(t,e){return t<<e|t>>>32-e}function y(t,e,n,r,i,o,u,a){return p(t+(e^n^r)+o+u|0,a)+i|0}function g(t,e,n,r,i,o,u,a){return p(t+(e&n|~e&r)+o+u|0,a)+i|0}function m(t,e,n,r,i,o,u,a){return p(t+((e|~n)^r)+o+u|0,a)+i|0}function v(t,e,n,r,i,o,u,a){return p(t+(e&r|n&~r)+o+u|0,a)+i|0}function b(t,e,n,r,i,o,u,a){return p(t+(e^(n|~r))+o+u|0,a)+i|0}i(d,o),d.prototype._update=function(){for(var t=u,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,d=0|this._e,w=0|this._a,_=0|this._b,E=0|this._c,A=0|this._d,B=0|this._e,C=0;C<80;C+=1){var k,x;C<16?(k=y(n,r,i,o,d,t[a[C]],l[0],f[C]),x=b(w,_,E,A,B,t[s[C]],h[0],c[C])):C<32?(k=g(n,r,i,o,d,t[a[C]],l[1],f[C]),x=v(w,_,E,A,B,t[s[C]],h[1],c[C])):C<48?(k=m(n,r,i,o,d,t[a[C]],l[2],f[C]),x=m(w,_,E,A,B,t[s[C]],h[2],c[C])):C<64?(k=v(n,r,i,o,d,t[a[C]],l[3],f[C]),x=g(w,_,E,A,B,t[s[C]],h[3],c[C])):(k=b(n,r,i,o,d,t[a[C]],l[4],f[C]),x=y(w,_,E,A,B,t[s[C]],h[4],c[C])),n=d,d=o,o=p(i,10),i=r,r=k,w=B,B=A,A=p(E,10),E=_,_=x}var F=this._b+i+A|0;this._b=this._c+o+B|0,this._c=this._d+d+w|0,this._d=this._e+n+_|0,this._e=this._a+r+E|0,this._a=F},d.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=d},function(t,e,n){(e=t.exports=function(t){t=t.toLowerCase();var n=e[t];if(!n)throw new Error(t+" is not supported (we accept pull requests)");return new n}).sha=n(202),e.sha1=n(203),e.sha224=n(204),e.sha256=n(119),e.sha384=n(205),e.sha512=n(120)},function(t,e,n){var r=n(1),i=n(23),o=n(0).Buffer,u=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],a=new Array(64);function s(){this.init(),this._w=a,i.call(this,64,56)}function f(t,e,n){return n^t&(e^n)}function c(t,e,n){return t&e|n&(t|e)}function l(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function h(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function d(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function p(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}r(s,i),s.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},s.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,a=0|this._e,s=0|this._f,y=0|this._g,g=0|this._h,m=0;m<16;++m)e[m]=t.readInt32BE(4*m);for(;m<64;++m)e[m]=p(e[m-2])+e[m-7]+d(e[m-15])+e[m-16]|0;for(var v=0;v<64;++v){var b=g+h(a)+f(a,s,y)+u[v]+e[v]|0,w=l(n)+c(n,r,i)|0;g=y,y=s,s=a,a=o+b|0,o=i,i=r,r=n,n=b+w|0}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=a+this._e|0,this._f=s+this._f|0,this._g=y+this._g|0,this._h=g+this._h|0},s.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=s},function(t,e,n){var r=n(1),i=n(23),o=n(0).Buffer,u=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],a=new Array(160);function s(){this.init(),this._w=a,i.call(this,128,112)}function f(t,e,n){return n^t&(e^n)}function c(t,e,n){return t&e|n&(t|e)}function l(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function h(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function m(t,e){return t>>>0<e>>>0?1:0}r(s,i),s.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},s.prototype._update=function(t){for(var e=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,o=0|this._dh,a=0|this._eh,s=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,_=0|this._bl,E=0|this._cl,A=0|this._dl,B=0|this._el,C=0|this._fl,k=0|this._gl,x=0|this._hl,F=0;F<32;F+=2)e[F]=t.readInt32BE(4*F),e[F+1]=t.readInt32BE(4*F+4);for(;F<160;F+=2){var S=e[F-30],D=e[F-30+1],T=d(S,D),O=p(D,S),I=y(S=e[F-4],D=e[F-4+1]),M=g(D,S),j=e[F-14],P=e[F-14+1],L=e[F-32],R=e[F-32+1],N=O+P|0,U=T+j+m(N,O)|0;U=(U=U+I+m(N=N+M|0,M)|0)+L+m(N=N+R|0,R)|0,e[F]=U,e[F+1]=N}for(var q=0;q<160;q+=2){U=e[q],N=e[q+1];var z=c(n,r,i),H=c(w,_,E),V=l(n,w),G=l(w,n),W=h(a,B),K=h(B,a),Z=u[q],Y=u[q+1],X=f(a,s,v),J=f(B,C,k),$=x+K|0,Q=b+W+m($,x)|0;Q=(Q=(Q=Q+X+m($=$+J|0,J)|0)+Z+m($=$+Y|0,Y)|0)+U+m($=$+N|0,N)|0;var tt=G+H|0,et=V+z+m(tt,G)|0;b=v,x=k,v=s,k=C,s=a,C=B,a=o+Q+m(B=A+$|0,A)|0,o=i,A=E,i=r,E=_,r=n,_=w,n=Q+et+m(w=$+tt|0,$)|0}this._al=this._al+w|0,this._bl=this._bl+_|0,this._cl=this._cl+E|0,this._dl=this._dl+A|0,this._el=this._el+B|0,this._fl=this._fl+C|0,this._gl=this._gl+k|0,this._hl=this._hl+x|0,this._ah=this._ah+n+m(this._al,w)|0,this._bh=this._bh+r+m(this._bl,_)|0,this._ch=this._ch+i+m(this._cl,E)|0,this._dh=this._dh+o+m(this._dl,A)|0,this._eh=this._eh+a+m(this._el,B)|0,this._fh=this._fh+s+m(this._fl,C)|0,this._gh=this._gh+v+m(this._gl,k)|0,this._hh=this._hh+b+m(this._hl,x)|0},s.prototype._hash=function(){var t=o.allocUnsafe(64);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=s},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(212),u=n(17),a=n(70).getCurveByName("secp256k1"),s=n(3),f=n(12),c=n(35),l=n(34),h=n(47);function d(t,n,r){function i(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),s(e.isBuffer(t),"data is a required String or Buffer"),h(t=u.sha256(t),n)}function h(r,i){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof r&&(r=e.from(r,u)),32!==r.length||!e.isBuffer(r))throw new Error("dataSha256: 32 bytes required");var f=l(i);return s(f,"pubkey required"),o.verify(a,r,{r:t,s:n},f.Q)}function d(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),s(e.isBuffer(t),"data is a required String or Buffer"),p(t=u.sha256(t))}function p(i){var u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";if("string"==typeof i&&(i=e.from(i,u)),32!==i.length||!e.isBuffer(i))throw new Error("dataSha256: 32 byte String or buffer requred");var s=f.fromBuffer(i),c=r;c-=27,c&=3;var h=o.recoverPubKey(a,s,{r:t,s:n,i:r},c);return l.fromPoint(h)}function y(){var i;return(i=new e(65)).writeUInt8(r,0),t.toBuffer(32).copy(i,1),n.toBuffer(32).copy(i,33),i}s.equal(null!=t,!0,"Missing parameter"),s.equal(null!=n,!0,"Missing parameter"),s.equal(null!=r,!0,"Missing parameter");var g=void 0;return{r:t,s:n,i:r,toBuffer:y,verify:i,verifyHash:h,verifyHex:function(t,n){return console.log('Deprecated: use verify(data, pubkey, "hex")'),i(e.from(t,"hex"),n)},recover:d,recoverHash:p,toHex:function(){return y().toString("hex")},toString:function(){return g||(g="SIG_K1_"+c.checkEncode(y(),"K1"))},verifyBuffer:function(){return console.log("Deprecated: use signature.verify instead (same arguments)"),i.apply(void 0,arguments)},recoverPublicKey:function(){return console.log("Deprecated: use signature.recover instead (same arguments)"),d.apply(void 0,arguments)},recoverPublicKeyFromBuffer:function(){return console.log("Deprecated: use signature.recoverHash instead (same arguments)"),p.apply(void 0,arguments)}}}t.exports=d,d.sign=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),s(e.isBuffer(t),"data is a required String or Buffer"),t=u.sha256(t),d.signHash(t,n)},d.signHash=function(t,n){var r,i,u,c,l,p,y,g=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof t&&(t=e.from(t,g)),32!==t.length||!e.isBuffer(t))throw new Error("dataSha256: 32 byte buffer requred");for(n=h(n),s(n,"privateKey required"),c=null,y=0,i=f.fromBuffer(t);;){if(p=(r=(u=o.sign(a,t,n.d,y++)).toDER())[5+(l=r[3])],32===l&&32===p){c=o.calcPubKeyRecoveryParam(a,i,u,n.toPublic().Q),c+=4,c+=27;break}y%10==0&&console.log("WARN: "+y+" attempts to find canonical signature")}return d(u.r,u.s,c)},d.fromBuffer=function(t){var n;return s(e.isBuffer(t),"Buffer is required"),s.equal(t.length,65,"Invalid signature length"),n=t.readUInt8(0),s.equal(n-27,n-27&7,"Invalid signature parameter"),d(f.fromBuffer(t.slice(1,33)),f.fromBuffer(t.slice(33)),n)},d.fromHex=function(t){return d.fromBuffer(e.from(t,"hex"))},d.fromString=function(t){try{return d.fromStringOrThrow(t)}catch(t){return null}},d.fromStringOrThrow=function(t){s.equal(void 0===t?"undefined":i(t),"string","signature");var e=t.match(/^SIG_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);s(null!=e&&3===e.length,"Expecting signature like: SIG_K1_base58signature..");var n=r(e,3),o=n[1],u=n[2];return s.equal(o,"K1","K1 signature expected"),d.fromBuffer(c.checkDecode(u,o))},d.from=function(t){var n=t?t.r&&t.s&&t.i?t:"string"==typeof t&&130===t.length?d.fromHex(t):"string"==typeof t&&130!==t.length?d.fromStringOrThrow(t):e.isBuffer(t)?d.fromBuffer(t):null:t;if(!n)throw new TypeError("signature should be a hex string or buffer");return n}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){function n(t){var e=t.toString().match(/function (.*?)\(/);return e?e[1]:null}t.exports=function(t,r){switch(t){case"Array":if(Array.isArray(r))return;break;case"Boolean":if("boolean"==typeof r)return;break;case"Buffer":if(e.isBuffer(r))return;break;case"Number":if("number"==typeof r)return;break;case"String":if("string"==typeof r)return;break;default:if(n(r.constructor)===n(t))return}throw new TypeError("Expected "+(n(t)||t)+", got "+r)}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(222),i=n(225),o=n(124),u=function(t){return i("v1",r,t)};Object.assign(u,{processArgs:o,api:r,Testnet:function(t){return console.error("deprecated, change EosApi.Testnet(..) to just EosApi(..)"),u(t)},Localnet:function(t){return console.error("deprecated, change EosApi.Localnet(..) to just EosApi(..)"),u(t)}}),t.exports=u},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"method",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o={},u={},a=e.length,s=void 0;"function"==typeof t[t.length-1]&&(s=t[t.length-1],t=t.slice(0,t.length-1));var f=void 0,c=void 0;s?f=function(t,e){t?s(t):s(null,e)}:c=new Promise(function(t,e){f=function(n,r){n?e(n):t(r)}});"function"==typeof i&&t.length>0&&("object"===r(t[0])&&2===t.length||t.length===a+1)&&null!=(u=i(t[t.length-1]))&&(t=t.slice(0,t.length-1));if(1===t.length&&"object"===r(t[0]))o=t[0];else{if(t.length>a)throw new TypeError(n+" is expecting "+a+" parameters but "+t.length+" where provided");var l=0,h=!0,d=!1,p=void 0;try{for(var y,g=e[Symbol.iterator]();!(h=(y=g.next()).done);h=!0){var m=y.value;o[m]=t[l],l++}}catch(t){d=!0,p=t}finally{try{!h&&g.return&&g.return()}finally{if(d)throw p}}}return{params:o,options:u,callback:f,returnPromise:c}}},function(t,e,n){var r=n(56),i=n(9)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){"use strict";var r=Object.assign({},n(243));t.exports=r},function(t,e,n){"use strict";var r=o(n(73)),i=o(n(28));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(3),a=n(22).Long;t.exports={ULong:s,isName:function(t,e){try{return l(t),!0}catch(t){return e&&e(t),!1}},encodeName:l,decodeName:h,encodeNameHex:function(t){return a.fromString(l(t),!0).toString(16)},decodeNameHex:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return h(a.fromString(t,!0,16).toString(),e)},DecimalString:d,DecimalPad:p,DecimalImply:function(t,e){return p(t,e).replace(".","")},DecimalUnimply:function(t,e){u(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var n=/^-/.test(t);n&&(t=t.substring(1));u(/^\d+$/.test(t),"invalid whole number "+t),u(null!=e,"precision required"),u(e>=0&&e<=18,"Precision should be 18 characters or less");var r=e-t.length;r>0&&(t=""+"0".repeat(r)+t);var i=t.length-e;return t=t.slice(0,i)+"."+t.slice(i),(n?"-":"")+p(t,e)},printAsset:y,parseAsset:function(t){var e=t.split(" "),n=(0,r.default)(e,1)[0].match(/^(-?[0-9]+(\.[0-9]+)?)( |$)/),i=n?n[1]:null,o=t.match(/(^| )([0-9]+),([A-Z]+)(@|$)/),a=o?Number(o[2]):null,s=i?(i.split(".")[1]||"").length:null,f=null!=a?a:s,c=t.match(/(^| |,)([A-Z]+)(@|$)/),l=c?c[2]:null,h=t.split("@"),d=(0,r.default)(h,2)[1],p=void 0===d?"":d,g=/^[a-z0-5]+(\.[a-z0-5]+)*$/.test(p)?p:null,m=y({amount:i,precision:f,symbol:l,contract:g});u.equal(t,m,"Invalid asset string: "+t+" !== "+m),null!=f&&u(f>=0&&f<=18,"Precision should be 18 characters or less");null!=l&&u(l.length<=7,"Asset symbol is 7 characters or less");null!=g&&u(g.length<=12,"Contract is 12 characters or less");return{amount:i,precision:f,symbol:l,contract:g}}};function s(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;if("number"==typeof t){if(t>Number.MAX_SAFE_INTEGER)throw new TypeError("value parameter overflow");t=a.fromString(String(t),e,n)}else if("string"==typeof t)t=a.fromString(t,e,n);else if(!a.isLong(t))throw new TypeError("value parameter is a requied Long, Number or String");return t}var f=".12345abcdefghijklmnopqrstuvwxyz",c=function(t){var e=f.indexOf(t);if(-1===e)throw new TypeError("Invalid character: '"+t+"'");return e};function l(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("string"!=typeof t)throw new TypeError("name parameter is a required string");if(t.length>12)throw new TypeError("A name can be up to 12 characters long");for(var n="",r=0;r<=12;r++){var i=r<t.length?c(t[r]):0,o=r<12?5:4,u=Number(i).toString(2);if(u.length>o)throw new TypeError("Invalid name "+t);n+=u="0".repeat(o-u.length)+u}var s=a.fromString(n,!0,2),f="",l=e?s.toBytesLE():s.toBytesBE(),h=!0,d=!1,p=void 0;try{for(var y,g=l[Symbol.iterator]();!(h=(y=g.next()).done);h=!0){var m=y.value,v=Number(m).toString(16);f+=(1===v.length?"0":"")+v}}catch(t){d=!0,p=t}finally{try{!h&&g.return&&g.return()}finally{if(d)throw p}}return a.fromString(f,!0,16).toString().toString()}function h(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t=s(t);var n="",r=e?t.toBytesLE():t.toBytesBE(),i=!0,o=!1,u=void 0;try{for(var c,l=r[Symbol.iterator]();!(i=(c=l.next()).done);i=!0){var h=c.value,d=Number(h).toString(16);n+=(1===d.length?"0":"")+d}}catch(t){o=!0,u=t}finally{try{!i&&l.return&&l.return()}finally{if(o)throw u}}n+="0".repeat(16-n.length);for(var p=a.fromNumber(31,!0),y=a.fromNumber(15,!0),g="",m=a.fromString(n,!0,16),v=0;v<=12;v++){g=f[m.and(0===v?y:p)]+g,m=m.shiftRight(0===v?4:5)}return g=g.replace(/\.+$/,"")}function d(t){u(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var e=/^-/.test(t);e&&(t=t.substring(1)),"."===t[0]&&(t="0"+t);var n=t.split(".");return u(n.length<=2,"invalid decimal "+t),u(/^\d+(,?\d)*\d*$/.test(n[0]),"invalid decimal "+t),2===n.length&&(u(/^\d*$/.test(n[1]),"invalid decimal "+t),n[1]=n[1].replace(/0+$/,""),""===n[1]&&n.pop()),n[0]=n[0].replace(/^0*/,""),""===n[0]&&(n[0]="0"),(e?"-":"")+n.join(".")}function p(t,e){var n=d(t);if(null==e)return n;u(e>=0&&e<=18,"Precision should be 18 characters or less");var r=n.split(".");if(0===e&&1===r.length)return r[0];if(1===r.length)return r[0]+"."+"0".repeat(e);var i=e-r[1].length;return u(i>=0,"decimal '"+n+"' exceeds precision "+e),r[0]+"."+r[1]+"0".repeat(i)}function y(t){var e=t.amount,n=t.precision,r=t.symbol,o=t.contract;u.equal(void 0===r?"undefined":(0,i.default)(r),"string","symbol is a required string"),null!=e&&null!=n&&(e=p(e,n));var a=function(t,e){return null==t?"":null==e?"":t+e};return null!=e?a(e," ")+r+a("@",o):a(n,",")+r+a("@",o)}},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(6),i=n(260),o=n(262),u=n(263),a=n(264),s=n(130),f="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(265);t.exports=function(t){return new Promise(function(e,c){var l=t.data,h=t.headers;r.isFormData(l)&&delete h["Content-Type"];var d=new XMLHttpRequest,p="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(t.url)||(d=new window.XDomainRequest,p="onload",y=!0,d.onprogress=function(){},d.ontimeout=function(){}),t.auth){var g=t.auth.username||"",m=t.auth.password||"";h.Authorization="Basic "+f(g+":"+m)}if(d.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d[p]=function(){if(d&&(4===d.readyState||y)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:t,request:d};i(e,c,r),d=null}},d.onerror=function(){c(s("Network Error",t,null,d)),d=null},d.ontimeout=function(){c(s("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(266),b=(t.withCredentials||a(t.url))&&t.xsrfCookieName?v.read(t.xsrfCookieName):void 0;b&&(h[t.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(h,function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete h[e]:d.setRequestHeader(e,t)}),t.withCredentials&&(d.withCredentials=!0),t.responseType)try{d.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){d&&(d.abort(),c(t),d=null)}),void 0===l&&(l=null),d.send(l)})}},function(t,e,n){"use strict";var r=n(261);t.exports=function(t,e,n,i,o){var u=new Error(t);return r(u,e,n,i,o)}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.memo=function(){return this.serialize()},e.prototype.parseMemo=function(t){return this.parse(t)},e.parse=function(t){return new e("").parseMemo(t)},e}(n(276).OneLineCall);e.TranscalPayload=i},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(24),u=Symbol("sym::EosClient"),a=Symbol("sym::GetIdentity"),s=function(){function t(){this.field={}}return Object.defineProperty(t.prototype,"eosClient",{get:function(){if(this.field[u])return this.field[u];throw new Error("method not yet implemented: this interface should be implement by the specific class.")},enumerable:!0,configurable:!0}),t.prototype.getIdentity=function(){return r(this,void 0,void 0,function(){return i(this,function(t){if(this.field[a])return[2,this.field[a]];throw new Error("method not yet implemented: this interface should be implement by the specific class.")})})},t.prototype.getAuth=function(){return r(this,void 0,void 0,function(){var t;return i(this,function(e){switch(e.label){case 0:return[4,this.getIdentity()];case 1:return[2,{authorization:[(t=e.sent()).name+"@"+t.authority]}]}})})},t.prototype.initFromConf=function(t,e){if(t){var n=o.Eos(t);this.field[u]=function(){return n}}e&&(this.field[a]=e)},t}();e.default=s},function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(e){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=r=function(t){return n(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":n(t)},r(e)}t.exports=r},function(t,e,n){"use strict";var r=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(4)),o=r(n(5)),u=n(38),a=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:u.Blockchains.EOS,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null;(0,i.default)(this,t),this.blockchain=e,this.contract=n,this.symbol=r,this.name=o||r,this.decimals=a}return(0,o.default)(t,null,[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(t){return Object.assign(this.placeholder(),t)}}]),t}();e.default=a},function(t,e,n){"use strict";var r=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.WALLET_METHODS=void 0;var i,o=r(n(4)),u=r(n(5)),a=r(n(80)),s={disconnect:"disconnect",isConnected:"isConnected",isPaired:"isPaired",addEventHandler:"addEventHandler",removeEventHandler:"removeEventHandler",listen:"listen",getVersion:"getVersion",getIdentity:"getIdentity",getIdentityFromPermissions:"getIdentityFromPermissions",forgetIdentity:"forgetIdentity",updateIdentity:"updateIdentity",authenticate:"authenticate",getArbitrarySignature:"getArbitrarySignature",getPublicKey:"getPublicKey",linkAccount:"linkAccount",hasAccountFor:"hasAccountFor",suggestNetwork:"suggestNetwork",requestTransfer:"requestTransfer",requestSignature:"requestSignature",createTransaction:"createTransaction",addToken:"addToken"};e.WALLET_METHODS=s;var f=(i={},(0,a.default)(i,s.getIdentity,"login"),(0,a.default)(i,s.forgetIdentity,"logout"),(0,a.default)(i,s.getIdentityFromPermissions,"checkLogin"),i),c=function(){function t(e,n,r){(0,o.default)(this,t);var i=function(t){return function(){throw new Error("".concat(e," does not support the ").concat(t," method."))}};Object.keys(s).map(function(t){return function(t,e){void 0===r[e]&&(r[e]=t||i(e)),f[e]&&void 0===r[f[e]]&&(r[f[e]]=r[e]?r[e]:i(e))}(n[t],t)})}return(0,u.default)(t,null,[{key:"bindBasics",value:function(t){t.account=function(e){return t.identity&&t.identity.accounts?t.identity.accounts.find(function(t){return t.blockchain===e}):void 0}}}]),t}();e.default=c},function(t,e,n){"use strict";!function(){function e(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function n(t,n,r){var i,o=new Promise(function(o,u){e(i=t[n].apply(t,r)).then(o,u)});return o.request=i,o}function r(t,e,n){n.forEach(function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})})}function i(t,e,r,i){i.forEach(function(i){i in r.prototype&&(t.prototype[i]=function(){return n(this[e],i,arguments)})})}function o(t,e,n,r){r.forEach(function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})})}function u(t,e,r,i){i.forEach(function(i){i in r.prototype&&(t.prototype[i]=function(){return function(t,e,r){var i=n(t,e,r);return i.then(function(t){if(t)return new s(t,i.request)})}(this[e],i,arguments)})})}function a(t){this._index=t}function s(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}})}function l(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new c(n)}function h(t){this._db=t}r(a,"_index",["name","keyPath","multiEntry","unique"]),i(a,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(a,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(s,"_cursor",["direction","key","primaryKey","value"]),i(s,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(s.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(t){if(t)return new s(t,n._request)})})})}),f.prototype.createIndex=function(){return new a(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new a(this._store.index.apply(this._store,arguments))},r(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(f,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},r(c,"_tx",["objectStoreNames","mode"]),o(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},r(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["deleteObjectStore","close"]),h.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},r(h,"_db",["name","version","objectStoreNames"]),o(h,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[f,a].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e=function(t){return Array.prototype.slice.call(t)}(arguments),n=e[e.length-1],r=this._store||this._index,i=r[t].apply(r,e.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[a,f].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise(function(i){n.iterateCursor(t,function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)})})})});var d={open:function(t,e,r){var i=n(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){r&&r(new l(o.result,t.oldVersion,o.transaction))}),i.then(function(t){return new h(t)})},delete:function(t){return n(indexedDB,"deleteDatabase",[t])}};t.exports=d,t.exports.default=t.exports}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(304))},function(t,e,n){"use strict";n.r(e);var r=n(4),i=n.n(r),o=n(5),u=n.n(o),a=n(138),s=n.n(a),f=n(85),c=n.n(f),l=n(39),h=n.n(l),d=n(86),p=n.n(d),y=n(49),g=n(87),m=n(50),v=n(139);console.log("eosplayer >>> configs loaded."),console.log(":",y.eosNodeConfigs),window.env=function(){function t(){i()(this,t)}return u()(t,null,[{key:"isPc",get:function(){return!/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)}}]),t}(),window.eosjs=c.a,window.eosjs_ecc=h.a,window.BigNumber=p.a,window.idb=s.a,window.eosplayer=new g.ScatterPlayer(y.eosNodeConfigs),window.kh||(window.kh={}),console.log("eosplayer >>> scatter player created."),window.kh.eos={Player:m.Player,ScatterPlayer:g.ScatterPlayer,SignPlayer:m.SignPlayer,ReadingPlayer:m.ReadingPlayer,Plugins:{mykey:new v.MykeyPlugin}},console.log("eosplayer >>> plugins loaded.",window.kh.eos.Plugins)},function(t,e,n){var r=function(){return this}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(142),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag",f="object"==typeof t,c=e.regeneratorRuntime;if(c)f&&(t.exports=c);else{(c=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",d="executing",p="completed",y={},g={};g[u]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(T([])));v&&v!==r&&i.call(v,u)&&(g=v);var b=B.prototype=E.prototype=Object.create(g);A.prototype=b.constructor=B,B.constructor=A,B[s]=A.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,B):(t.__proto__=B,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},C(k.prototype),k.prototype[a]=function(){return this},c.AsyncIterator=k,c.async=function(t,e,n,r){var i=new k(w(t,e,n,r));return c.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[s]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=T,D.prototype={constructor:D,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return a.type="throw",a.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var s=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(s&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(s){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;S(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}}}function w(t,e,n,r){var i=e&&e.prototype instanceof E?e:E,o=Object.create(i.prototype),u=new D(r||[]);return o._invoke=function(t,e,n){var r=l;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return O()}for(n.method=i,n.arg=o;;){var u=n.delegate;if(u){var a=x(u,n);if(a){if(a===y)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var s=_(t,e,n);if("normal"===s.type){if(r=n.done?p:h,s.arg===y)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=p,n.method="throw",n.arg=s.arg)}}}(t,n,u),o}function _(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function A(){}function B(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function k(t){var e;this._invoke=function(n,r){function o(){return new Promise(function(e,o){!function e(n,r,o,u){var a=_(t[n],t,r);if("throw"!==a.type){var s=a.arg,f=s.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(f).then(function(t){s.value=t,o(s)},u)}u(a.arg)}(n,r,e,o)})}return e=e?e.then(o,o):o()}}function x(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,x(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=_(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function F(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function D(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(F,this),this.reset(!0)}function T(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,n){t.exports={default:n(144),__esModule:!0}},function(t,e,n){n(51),n(61),t.exports=n(62).f("iterator")},function(t,e,n){var r=n(52),i=n(53);t.exports=function(t){return function(e,n){var o,u,a=String(i(e)),s=r(n),f=a.length;return s<0||s>=f?t?"":void 0:(o=a.charCodeAt(s))<55296||o>56319||s+1===f||(u=a.charCodeAt(s+1))<56320||u>57343?t?a.charAt(s):o:t?a.slice(s,s+2):u-56320+(o-55296<<10)+65536}}},function(t,e,n){var r=n(147);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(94),i=n(42),o=n(60),u={};n(18)(u,n(9)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(19),i=n(29),o=n(55);t.exports=n(20)?Object.defineProperties:function(t,e){i(t);for(var n,u=o(e),a=u.length,s=0;a>s;)r.f(t,n=u[s++],e[n]);return t}},function(t,e,n){var r=n(56);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(21),i=n(152),o=n(153);t.exports=function(t){return function(e,n,u){var a,s=r(e),f=i(s.length),c=o(u,f);if(t&&n!=n){for(;f>c;)if((a=s[c++])!=a)return!0}else for(;f>c;c++)if((t||c in s)&&s[c]===n)return t||c||0;return!t&&-1}}},function(t,e,n){var r=n(52),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(52),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(10).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(14),i=n(156),o=n(57)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(53);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(158),i=n(159),o=n(31),u=n(21);t.exports=n(89)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){t.exports={default:n(161),__esModule:!0}},function(t,e,n){n(162),n(168),n(169),n(170),t.exports=n(13).Symbol},function(t,e,n){"use strict";var r=n(10),i=n(14),o=n(20),u=n(90),a=n(93),s=n(163).KEY,f=n(41),c=n(58),l=n(60),h=n(43),d=n(9),p=n(62),y=n(63),g=n(164),m=n(165),v=n(29),b=n(30),w=n(21),_=n(54),E=n(42),A=n(94),B=n(166),C=n(167),k=n(19),x=n(55),F=C.f,S=k.f,D=B.f,T=r.Symbol,O=r.JSON,I=O&&O.stringify,M=d("_hidden"),j=d("toPrimitive"),P={}.propertyIsEnumerable,L=c("symbol-registry"),R=c("symbols"),N=c("op-symbols"),U=Object.prototype,q="function"==typeof T,z=r.QObject,H=!z||!z.prototype||!z.prototype.findChild,V=o&&f(function(){return 7!=A(S({},"a",{get:function(){return S(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=F(U,e);r&&delete U[e],S(t,e,n),r&&t!==U&&S(U,e,r)}:S,G=function(t){var e=R[t]=A(T.prototype);return e._k=t,e},W=q&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},K=function(t,e,n){return t===U&&K(N,e,n),v(t),e=_(e,!0),v(n),i(R,e)?(n.enumerable?(i(t,M)&&t[M][e]&&(t[M][e]=!1),n=A(n,{enumerable:E(0,!1)})):(i(t,M)||S(t,M,E(1,{})),t[M][e]=!0),V(t,e,n)):S(t,e,n)},Z=function(t,e){v(t);for(var n,r=g(e=w(e)),i=0,o=r.length;o>i;)K(t,n=r[i++],e[n]);return t},Y=function(t){var e=P.call(this,t=_(t,!0));return!(this===U&&i(R,t)&&!i(N,t))&&(!(e||!i(this,t)||!i(R,t)||i(this,M)&&this[M][t])||e)},X=function(t,e){if(t=w(t),e=_(e,!0),t!==U||!i(R,e)||i(N,e)){var n=F(t,e);return!n||!i(R,e)||i(t,M)&&t[M][e]||(n.enumerable=!0),n}},J=function(t){for(var e,n=D(w(t)),r=[],o=0;n.length>o;)i(R,e=n[o++])||e==M||e==s||r.push(e);return r},$=function(t){for(var e,n=t===U,r=D(n?N:w(t)),o=[],u=0;r.length>u;)!i(R,e=r[u++])||n&&!i(U,e)||o.push(R[e]);return o};q||(a((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(N,n),i(this,M)&&i(this[M],t)&&(this[M][t]=!1),V(this,t,E(1,n))};return o&&H&&V(U,t,{configurable:!0,set:e}),G(t)}).prototype,"toString",function(){return this._k}),C.f=X,k.f=K,n(97).f=B.f=J,n(64).f=Y,n(96).f=$,o&&!n(40)&&a(U,"propertyIsEnumerable",Y,!0),p.f=function(t){return G(d(t))}),u(u.G+u.W+u.F*!q,{Symbol:T});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)d(Q[tt++]);for(var et=x(d.store),nt=0;et.length>nt;)y(et[nt++]);u(u.S+u.F*!q,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=T(t)},keyFor:function(t){if(!W(t))throw TypeError(t+" is not a symbol!");for(var e in L)if(L[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),u(u.S+u.F*!q,"Object",{create:function(t,e){return void 0===e?A(t):Z(A(t),e)},defineProperty:K,defineProperties:Z,getOwnPropertyDescriptor:X,getOwnPropertyNames:J,getOwnPropertySymbols:$}),O&&u(u.S+u.F*(!q||f(function(){var t=T();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!W(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!W(e))return e}),r[1]=e,I.apply(O,r)}}),T.prototype[j]||n(18)(T.prototype,j,T.prototype.valueOf),l(T,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e,n){var r=n(43)("meta"),i=n(30),o=n(14),u=n(19).f,a=0,s=Object.isExtensible||function(){return!0},f=!n(41)(function(){return s(Object.preventExtensions({}))}),c=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!s(t))return"F";if(!e)return"E";c(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!s(t))return!0;if(!e)return!1;c(t)}return t[r].w},onFreeze:function(t){return f&&l.NEED&&s(t)&&!o(t,r)&&c(t),t}}},function(t,e,n){var r=n(55),i=n(96),o=n(64);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var u,a=n(t),s=o.f,f=0;a.length>f;)s.call(t,u=a[f++])&&e.push(u);return e}},function(t,e,n){var r=n(56);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(21),i=n(97).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,e,n){var r=n(64),i=n(42),o=n(21),u=n(54),a=n(14),s=n(91),f=Object.getOwnPropertyDescriptor;e.f=n(20)?f:function(t,e){if(t=o(t),e=u(e,!0),s)try{return f(t,e)}catch(t){}if(a(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(63)("asyncIterator")},function(t,e,n){n(63)("observable")},function(t,e,n){"use strict";n(98);var r=n(47),i=n(34),o=n(121),u=(n(35),n(17)),a={initialize:r.initialize,unsafeRandomKey:function(){return r.unsafeRandomKey().then(function(t){return t.toString()})},randomKey:function(t){return r.randomKey(t).then(function(t){return t.toString()})},seedPrivate:function(t){return r.fromSeed(t).toString()},privateToPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return r(t).toPublic().toString(e)},isValidPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return i.isValid(t,e)},isValidPrivate:function(t){return r.isValid(t)},sign:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===n)throw new TypeError("API changed, use signHash(..) instead");return!1===n&&console.log("Warning: ecc.sign hashData parameter was removed"),o.sign(t,e,n).toString()},signHash:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return o.signHash(t,e,n).toString()},verify:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"utf8";if(!0===r)throw new TypeError("API changed, use verifyHash(..) instead");return!1===r&&console.log("Warning: ecc.verify hashData parameter was removed"),(t=o.from(t)).verify(e,n,r)},verifyHash:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"hex";return(t=o.from(t)).verifyHash(e,n,r)},recover:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===n)throw new TypeError("API changed, use recoverHash(signature, data) instead");return!1===n&&console.log("Warning: ecc.recover hashData parameter was removed"),(t=o.from(t)).recover(e,n).toString()},recoverHash:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return(t=o.from(t)).recoverHash(e,n).toString()},sha256:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";return u.sha256(t,e)}};t.exports=a},function(t,e,n){"use strict";e.byteLength=function(t){var e=f(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=f(t),r=n[0],u=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,u)),s=0,c=u>0?r-4:r,l=0;l<c;l+=4)e=i[t.charCodeAt(l)]<<18|i[t.charCodeAt(l+1)]<<12|i[t.charCodeAt(l+2)]<<6|i[t.charCodeAt(l+3)],a[s++]=e>>16&255,a[s++]=e>>8&255,a[s++]=255&e;2===u&&(e=i[t.charCodeAt(l)]<<2|i[t.charCodeAt(l+1)]>>4,a[s++]=255&e);1===u&&(e=i[t.charCodeAt(l)]<<10|i[t.charCodeAt(l+1)]<<4|i[t.charCodeAt(l+2)]>>2,a[s++]=e>>8&255,a[s++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],u=0,a=n-i;u<a;u+=16383)o.push(l(t,u,u+16383>a?a:u+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=u.length;a<s;++a)r[a]=u[a],i[u.charCodeAt(a)]=a;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function l(t,e,n){for(var r,i=[],o=e;o<n;o+=3)r=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(c(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,u,a=8*i-r-1,s=(1<<a)-1,f=s>>1,c=-7,l=n?i-1:0,h=n?-1:1,d=t[e+l];for(l+=h,o=d&(1<<-c)-1,d>>=-c,c+=a;c>0;o=256*o+t[e+l],l+=h,c-=8);for(u=o&(1<<-c)-1,o>>=-c,c+=r;c>0;u=256*u+t[e+l],l+=h,c-=8);if(0===o)o=1-f;else{if(o===s)return u?NaN:1/0*(d?-1:1);u+=Math.pow(2,r),o-=f}return(d?-1:1)*u*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var u,a,s,f=8*o-i-1,c=(1<<f)-1,l=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-u))<1&&(u--,s*=2),(e+=u+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(u++,s/=2),u+l>=c?(a=0,u=c):u+l>=1?(a=(e*s-1)*Math.pow(2,i),u+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),u=0));i>=8;t[n+d]=255&a,d+=p,a/=256,i-=8);for(u=u<<i|a,f+=i;f>0;t[n+d]=255&u,d+=p,u/=256,f-=8);t[n+d-p]|=128*y}},function(t,e,n){var r,i,o;
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";function t(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var n={},r={};function i(t,e){var i,o,a;return e?(a=0<=(t>>>=0)&&t<256)&&(o=r[t])?o:(i=u(t,(0|t)<0?-1:0,!0),a&&(r[t]=i),i):(a=-128<=(t|=0)&&t<128)&&(o=n[t])?o:(i=u(t,t<0?-1:0,!1),a&&(n[t]=i),i)}function o(t,e){if(isNaN(t)||!isFinite(t))return e?y:p;if(e){if(t<0)return y;if(t>=l)return w}else{if(t<=-h)return _;if(t+1>=h)return b}return t<0?o(-t,e).neg():u(t%c|0,t/c|0,e)}function u(e,n,r){return new t(e,n,r)}t.fromInt=i,t.fromNumber=o,t.fromBits=u;var a=Math.pow;function s(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return p;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return s(t.substring(1),e,n).neg();for(var i=o(a(n,8)),u=p,f=0;f<t.length;f+=8){var c=Math.min(8,t.length-f),l=parseInt(t.substring(f,f+c),n);if(c<8){var h=o(a(n,c));u=u.mul(h).add(o(l))}else u=(u=u.mul(i)).add(o(l))}return u.unsigned=e,u}function f(e){return e instanceof t?e:"number"==typeof e?o(e):"string"==typeof e?s(e):u(e.low,e.high,e.unsigned)}t.fromString=s,t.fromValue=f;var c=4294967296,l=c*c,h=l/2,d=i(1<<24),p=i(0);t.ZERO=p;var y=i(0,!0);t.UZERO=y;var g=i(1);t.ONE=g;var m=i(1,!0);t.UONE=m;var v=i(-1);t.NEG_ONE=v;var b=u(-1,2147483647,!1);t.MAX_VALUE=b;var w=u(-1,-1,!0);t.MAX_UNSIGNED_VALUE=w;var _=u(0,-2147483648,!1);t.MIN_VALUE=_;var E=t.prototype;return E.toInt=function(){return this.unsigned?this.low>>>0:this.low},E.toNumber=function(){return this.unsigned?(this.high>>>0)*c+(this.low>>>0):this.high*c+(this.low>>>0)},E.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(_)){var e=o(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=o(a(t,6),this.unsigned),u=this,s="";;){var f=u.div(i),c=(u.sub(f.mul(i)).toInt()>>>0).toString(t);if((u=f).isZero())return c+s;for(;c.length<6;)c="0"+c;s=""+c+s}},E.getHighBits=function(){return this.high},E.getHighBitsUnsigned=function(){return this.high>>>0},E.getLowBits=function(){return this.low},E.getLowBitsUnsigned=function(){return this.low>>>0},E.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},E.isZero=function(){return 0===this.high&&0===this.low},E.isNegative=function(){return!this.unsigned&&this.high<0},E.isPositive=function(){return this.unsigned||this.high>=0},E.isOdd=function(){return 1==(1&this.low)},E.isEven=function(){return 0==(1&this.low)},E.equals=function(t){return e(t)||(t=f(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},E.eq=E.equals,E.notEquals=function(t){return!this.eq(t)},E.neq=E.notEquals,E.lessThan=function(t){return this.comp(t)<0},E.lt=E.lessThan,E.lessThanOrEqual=function(t){return this.comp(t)<=0},E.lte=E.lessThanOrEqual,E.greaterThan=function(t){return this.comp(t)>0},E.gt=E.greaterThan,E.greaterThanOrEqual=function(t){return this.comp(t)>=0},E.gte=E.greaterThanOrEqual,E.compare=function(t){if(e(t)||(t=f(t)),this.eq(t))return 0;var n=this.isNegative(),r=t.isNegative();return n&&!r?-1:!n&&r?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},E.comp=E.compare,E.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(g)},E.neg=E.negate,E.add=function(t){e(t)||(t=f(t));var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,o=65535&this.low,a=t.high>>>16,s=65535&t.high,c=t.low>>>16,l=0,h=0,d=0,p=0;return d+=(p+=o+(65535&t.low))>>>16,h+=(d+=i+c)>>>16,l+=(h+=r+s)>>>16,l+=n+a,u((d&=65535)<<16|(p&=65535),(l&=65535)<<16|(h&=65535),this.unsigned)},E.subtract=function(t){return e(t)||(t=f(t)),this.add(t.neg())},E.sub=E.subtract,E.multiply=function(t){if(this.isZero())return p;if(e(t)||(t=f(t)),t.isZero())return p;if(this.eq(_))return t.isOdd()?_:p;if(t.eq(_))return this.isOdd()?_:p;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(d)&&t.lt(d))return o(this.toNumber()*t.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,a=65535&this.low,s=t.high>>>16,c=65535&t.high,l=t.low>>>16,h=65535&t.low,y=0,g=0,m=0,v=0;return m+=(v+=a*h)>>>16,g+=(m+=i*h)>>>16,m&=65535,g+=(m+=a*l)>>>16,y+=(g+=r*h)>>>16,g&=65535,y+=(g+=i*l)>>>16,g&=65535,y+=(g+=a*c)>>>16,y+=n*h+r*l+i*c+a*s,u((m&=65535)<<16|(v&=65535),(y&=65535)<<16|(g&=65535),this.unsigned)},E.mul=E.multiply,E.divide=function(t){if(e(t)||(t=f(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?y:p;var n,r,i;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return m;i=y}else{if(this.eq(_))return t.eq(g)||t.eq(v)?_:t.eq(_)?g:(n=this.shr(1).div(t).shl(1)).eq(p)?t.isNegative()?g:v:(r=this.sub(t.mul(n)),i=n.add(r.div(t)));if(t.eq(_))return this.unsigned?y:p;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();i=p}for(r=this;r.gte(t);){n=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(n)/Math.LN2),s=u<=48?1:a(2,u-48),c=o(n),l=c.mul(t);l.isNegative()||l.gt(r);)l=(c=o(n-=s,this.unsigned)).mul(t);c.isZero()&&(c=g),i=i.add(c),r=r.sub(l)}return i},E.div=E.divide,E.modulo=function(t){return e(t)||(t=f(t)),this.sub(this.div(t).mul(t))},E.mod=E.modulo,E.not=function(){return u(~this.low,~this.high,this.unsigned)},E.and=function(t){return e(t)||(t=f(t)),u(this.low&t.low,this.high&t.high,this.unsigned)},E.or=function(t){return e(t)||(t=f(t)),u(this.low|t.low,this.high|t.high,this.unsigned)},E.xor=function(t){return e(t)||(t=f(t)),u(this.low^t.low,this.high^t.high,this.unsigned)},E.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):u(0,this.low<<t-32,this.unsigned)},E.shl=E.shiftLeft,E.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):u(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},E.shr=E.shiftRight,E.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var n=this.high;return t<32?u(this.low>>>t|n<<32-t,n>>>t,this.unsigned):u(32===t?n:n>>>t-32,0,this.unsigned)},E.shru=E.shiftRightUnsigned,E.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},E.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},E.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},E.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},E.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(176),i=n(195),o=n(104);e.createCipher=e.Cipher=r.createCipher,e.createCipheriv=e.Cipheriv=r.createCipheriv,e.createDecipher=e.Decipher=i.createDecipher,e.createDecipheriv=e.Decipheriv=i.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(o)}},function(t,e,n){var r=n(101),i=n(105),o=n(0).Buffer,u=n(111),a=n(15),s=n(44),f=n(112);function c(t,e,n){a.call(this),this._cache=new h,this._cipher=new s.AES(e),this._prev=o.from(n),this._mode=t,this._autopadding=!0}n(1)(c,a),c.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get();)n=this._mode.encrypt(this,e),r.push(n);return o.concat(r)};var l=o.alloc(16,16);function h(){this.cache=o.allocUnsafe(0)}function d(t,e,n){var a=r[t.toLowerCase()];if(!a)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=o.from(e)),e.length!==a.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof n&&(n=o.from(n)),"GCM"!==a.mode&&n.length!==a.iv)throw new TypeError("invalid iv length "+n.length);return"stream"===a.type?new u(a.module,e,n):"auth"===a.type?new i(a.module,e,n):new c(a.module,e,n)}c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(l))throw this._cipher.scrub(),new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},h.prototype.add=function(t){this.cache=o.concat([this.cache,t])},h.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},h.prototype.flush=function(){for(var t=16-this.cache.length,e=o.allocUnsafe(t),n=-1;++n<t;)e.writeUInt8(t,n);return o.concat([this.cache,e])},e.createCipheriv=d,e.createCipher=function(t,e){var n=r[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var i=f(e,!1,n.key,n.iv);return d(t,i.key,i.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,n){var r=n(32);e.encrypt=function(t,e){var n=r(e,t._prev);return t._prev=t._cipher.encryptBlock(n),t._prev},e.decrypt=function(t,e){var n=t._prev;t._prev=e;var i=t._cipher.decryptBlock(e);return r(i,n)}},function(t,e,n){var r=n(0).Buffer,i=n(32);function o(t,e,n){var o=e.length,u=i(e,t._cache);return t._cache=t._cache.slice(o),t._prev=r.concat([t._prev,n?e:u]),u}e.encrypt=function(t,e,n){for(var i,u=r.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=r.allocUnsafe(0)),!(t._cache.length<=e.length)){u=r.concat([u,o(t,e,n)]);break}i=t._cache.length,u=r.concat([u,o(t,e.slice(0,i),n)]),e=e.slice(i)}return u}},function(t,e,n){var r=n(0).Buffer;function i(t,e,n){var i=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=r.concat([t._prev.slice(1),r.from([n?e:i])]),i}e.encrypt=function(t,e,n){for(var o=e.length,u=r.allocUnsafe(o),a=-1;++a<o;)u[a]=i(t,e[a],n);return u}},function(t,e,n){var r=n(0).Buffer;function i(t,e,n){for(var r,i,u,a=-1,s=0;++a<8;)r=t._cipher.encryptBlock(t._prev),i=e&1<<7-a?128:0,s+=(128&(u=r[0]^i))>>a%8,t._prev=o(t._prev,n?i:u);return s}function o(t,e){var n=t.length,i=-1,o=r.allocUnsafe(t.length);for(t=r.concat([t,r.from([e])]);++i<n;)o[i]=t[i]<<1|t[i+1]>>7;return o}e.encrypt=function(t,e,n){for(var o=e.length,u=r.allocUnsafe(o),a=-1;++a<o;)u[a]=i(t,e[a],n);return u}},function(t,e,n){(function(t){var r=n(32);function i(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,n){for(;e._cache.length<n.length;)e._cache=t.concat([e._cache,i(e)]);var o=e._cache.slice(0,n.length);return e._cache=e._cache.slice(n.length),r(n,o)}}).call(this,n(2).Buffer)},function(t,e){},function(t,e,n){"use strict";var r=n(0).Buffer,i=n(185);function o(t,e,n){t.copy(e,n)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e=r.allocUnsafe(t>>>0),n=this.head,i=0;n;)o(n.data,e,i),i+=n.data.length,n=n.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(187),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(7))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},u=!1,a=t.document,s=Object.getPrototypeOf&&Object.getPrototypeOf(t);s=s&&s.setTimeout?s:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&c(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},r=function(e){t.port2.postMessage(e)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var t=a.documentElement;r=function(e){var n=a.createElement("script");n.onreadystatechange=function(){c(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(c,0,t)},s.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var u={callback:t,args:e};return o[i]=u,r(i),i++},s.clearImmediate=f}function f(t){delete o[t]}function c(t){if(u)setTimeout(c,0,t);else{var e=o[t];if(e){u=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{f(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(7),n(11))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(7))},function(t,e,n){"use strict";t.exports=o;var r=n(110),i=n(33);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(1),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(67)},function(t,e,n){t.exports=n(16)},function(t,e,n){t.exports=n(66).Transform},function(t,e,n){t.exports=n(66).PassThrough},function(t,e,n){var r=n(0).Buffer,i=r.alloc(16,0);function o(t){var e=r.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function u(t){this.h=t,this.state=r.alloc(16,0),this.cache=r.allocUnsafe(0)}u.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},u.prototype._multiply=function(){for(var t,e,n=function(t){return[t.readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)]}(this.h),r=[0,0,0,0],i=-1;++i<128;){for(0!=(this.state[~~(i/8)]&1<<7-i%8)&&(r[0]^=n[0],r[1]^=n[1],r[2]^=n[2],r[3]^=n[3]),e=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,e&&(n[0]=n[0]^225<<24)}this.state=o(r)},u.prototype.update=function(t){var e;for(this.cache=r.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},u.prototype.final=function(t,e){return this.cache.length&&this.ghash(r.concat([this.cache,i],16)),this.ghash(o([0,t,0,e])),this.state},t.exports=u},function(t,e,n){var r=n(105),i=n(0).Buffer,o=n(101),u=n(111),a=n(15),s=n(44),f=n(112);function c(t,e,n){a.call(this),this._cache=new l,this._last=void 0,this._cipher=new s.AES(e),this._prev=i.from(n),this._mode=t,this._autopadding=!0}function l(){this.cache=i.allocUnsafe(0)}function h(t,e,n){var a=o[t.toLowerCase()];if(!a)throw new TypeError("invalid suite type");if("string"==typeof n&&(n=i.from(n)),"GCM"!==a.mode&&n.length!==a.iv)throw new TypeError("invalid iv length "+n.length);if("string"==typeof e&&(e=i.from(e)),e.length!==a.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===a.type?new u(a.module,e,n,!0):"auth"===a.type?new r(a.module,e,n,!0):new c(a.module,e,n)}n(1)(c,a),c.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get(this._autopadding);)n=this._mode.decrypt(this,e),r.push(n);return i.concat(r)},c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var n=-1;for(;++n<e;)if(t[n+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},l.prototype.add=function(t){this.cache=i.concat([this.cache,t])},l.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},l.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var n=o[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var r=f(e,!1,n.key,n.iv);return h(t,r.key,r.iv)},e.createDecipheriv=h},function(t,e,n){(function(t,r){var i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(a(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,u=String(t).replace(i,function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),s=r[n];n<o;s=r[++n])y(s)||!w(s)?u+=" "+s:u+=" "+a(s);return u},e.deprecate=function(n,i){if(v(t.process))return function(){return e.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}};var o,u={};function a(t,n){var r={seen:[],stylize:f};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=s),c(r,t,r.depth)}function s(t,e){var n=a.styles[e];return n?"["+a.colors[n][0]+"m"+t+"["+a.colors[n][1]+"m":t}function f(t,e){return t}function c(t,n,r){if(t.customInspect&&n&&A(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=c(t,i,r)),i}var o=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(g(e))return t.stylize(""+e,"number");if(p(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,n);if(o)return o;var u=Object.keys(n),a=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),E(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return l(n);if(0===u.length){if(A(n)){var s=n.name?": "+n.name:"";return t.stylize("[Function"+s+"]","special")}if(b(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(_(n))return t.stylize(Date.prototype.toString.call(n),"date");if(E(n))return l(n)}var f,w="",B=!1,C=["{","}"];(d(n)&&(B=!0,C=["[","]"]),A(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(w=" "+RegExp.prototype.toString.call(n)),_(n)&&(w=" "+Date.prototype.toUTCString.call(n)),E(n)&&(w=" "+l(n)),0!==u.length||B&&0!=n.length?r<0?b(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),f=B?function(t,e,n,r,i){for(var o=[],u=0,a=e.length;u<a;++u)x(e,String(u))?o.push(h(t,e,n,r,String(u),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(h(t,e,n,r,i,!0))}),o}(t,n,r,a,u):u.map(function(e){return h(t,n,r,a,e,B)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(f,w,C)):C[0]+w+C[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function h(t,e,n,r,i,o){var u,a,s;if((s=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=s.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):s.set&&(a=t.stylize("[Setter]","special")),x(r,i)||(u="["+i+"]"),a||(t.seen.indexOf(s.value)<0?(a=y(n)?c(t,s.value,null):c(t,s.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n")):a=t.stylize("[Circular]","special")),v(u)){if(o&&i.match(/^\d+$/))return a;(u=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+a}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function y(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function v(t){return void 0===t}function b(t){return w(t)&&"[object RegExp]"===B(t)}function w(t){return"object"==typeof t&&null!==t}function _(t){return w(t)&&"[object Date]"===B(t)}function E(t){return w(t)&&("[object Error]"===B(t)||t instanceof Error)}function A(t){return"function"==typeof t}function B(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(v(o)&&(o=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!u[t])if(new RegExp("\\b"+t+"\\b","i").test(o)){var n=r.pid;u[t]=function(){var r=e.format.apply(e,arguments);console.error("%s %d: %s",t,n,r)}}else u[t]=function(){};return u[t]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=b,e.isObject=w,e.isDate=_,e.isError=E,e.isFunction=A,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(197);var k=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function x(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),k[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=n(1),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}}).call(this,n(7),n(11))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t){t.exports={name:"bigi",version:"1.4.2",description:"Big integers.",keywords:["cryptography","math","bitcoin","arbitrary","precision","arithmetic","big","integer","int","number","biginteger","bigint","bignumber","decimal","float"],devDependencies:{coveralls:"^2.11.2",istanbul:"^0.3.5",jshint:"^2.5.1",mocha:"^2.1.0",mochify:"^2.1.0"},repository:{url:"https://github.com/cryptocoinjs/bigi",type:"git"},main:"./lib/index.js",scripts:{"browser-test":"./node_modules/.bin/mochify --wd -R spec",test:"./node_modules/.bin/_mocha -- test/*.js",jshint:"./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",unit:"./node_modules/.bin/mocha",coverage:"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",coveralls:"npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"},dependencies:{},testling:{files:"test/*.js",harness:"mocha",browsers:["ie/9..latest","firefox/latest","chrome/latest","safari/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]}}},function(t,e,n){(function(t){var e=n(3),r=n(115);r.fromByteArrayUnsigned=function(t){return 128&t[0]?new r([0].concat(t)):new r(t)},r.prototype.toByteArrayUnsigned=function(){var t=this.toByteArray();return 0===t[0]?t.slice(1):t},r.fromDERInteger=function(t){return new r(t)},r.prototype.toDERInteger=r.prototype.toByteArray,r.fromBuffer=function(t){if(128&t[0]){var e=Array.prototype.slice.call(t);return new r([0].concat(e))}return new r(t)},r.fromHex=function(t){return""===t?r.ZERO:(e.equal(t,t.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),e.equal(t.length%2,0,"Incomplete hex"),new r(t,16))},r.prototype.toBuffer=function(e){for(var n=this.toByteArrayUnsigned(),r=[],i=e-n.length;r.length<i;)r.push(0);return new t(r.concat(n))},r.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")}}).call(this,n(2).Buffer)},function(t,e,n){var r=n(12),i=n(201),o=n(116);t.exports=function(t){var e=i[t];if(!e)return null;var n=new r(e.p,16),u=new r(e.a,16),a=new r(e.b,16),s=new r(e.n,16),f=new r(e.h,16),c=new r(e.Gx,16),l=new r(e.Gy,16);return new o(n,u,a,c,l,s,f)}},function(t){t.exports={secp128r1:{p:"fffffffdffffffffffffffffffffffff",a:"fffffffdfffffffffffffffffffffffc",b:"e87579c11079f43dd824993c2cee5ed3",n:"fffffffe0000000075a30d1b9038a115",h:"01",Gx:"161ff7528b899b2d0c28607ca52c5b86",Gy:"cf5ac8395bafeb13c02da292dded7a83"},secp160k1:{p:"fffffffffffffffffffffffffffffffeffffac73",a:"00",b:"07",n:"0100000000000000000001b8fa16dfab9aca16b6b3",h:"01",Gx:"3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",Gy:"938cf935318fdced6bc28286531733c3f03c4fee"},secp160r1:{p:"ffffffffffffffffffffffffffffffff7fffffff",a:"ffffffffffffffffffffffffffffffff7ffffffc",b:"1c97befc54bd7a8b65acf89f81d4d4adc565fa45",n:"0100000000000000000001f4c8f927aed3ca752257",h:"01",Gx:"4a96b5688ef573284664698968c38bb913cbfc82",Gy:"23a628553168947d59dcc912042351377ac5fb32"},secp192k1:{p:"fffffffffffffffffffffffffffffffffffffffeffffee37",a:"00",b:"03",n:"fffffffffffffffffffffffe26f2fc170f69466a74defd8d",h:"01",Gx:"db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",Gy:"9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"},secp192r1:{p:"fffffffffffffffffffffffffffffffeffffffffffffffff",a:"fffffffffffffffffffffffffffffffefffffffffffffffc",b:"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",n:"ffffffffffffffffffffffff99def836146bc9b1b4d22831",h:"01",Gx:"188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",Gy:"07192b95ffc8da78631011ed6b24cdd573f977a11e794811"},secp256k1:{p:"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",a:"00",b:"07",n:"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",h:"01",Gx:"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",Gy:"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"},secp256r1:{p:"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",a:"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",b:"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",n:"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",h:"01",Gx:"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",Gy:"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"}}},function(t,e,n){var r=n(1),i=n(23),o=n(0).Buffer,u=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function s(){this.init(),this._w=a,i.call(this,64,56)}function f(t){return t<<5|t>>>27}function c(t){return t<<30|t>>>2}function l(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(s,i),s.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},s.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,a=0|this._e,s=0;s<16;++s)e[s]=t.readInt32BE(4*s);for(;s<80;++s)e[s]=e[s-3]^e[s-8]^e[s-14]^e[s-16];for(var h=0;h<80;++h){var d=~~(h/20),p=f(n)+l(d,r,i,o)+a+e[h]+u[d]|0;a=o,o=i,i=c(r),r=n,n=p}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=a+this._e|0},s.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=s},function(t,e,n){var r=n(1),i=n(23),o=n(0).Buffer,u=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function s(){this.init(),this._w=a,i.call(this,64,56)}function f(t){return t<<1|t>>>31}function c(t){return t<<5|t>>>27}function l(t){return t<<30|t>>>2}function h(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(s,i),s.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},s.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,a=0|this._e,s=0;s<16;++s)e[s]=t.readInt32BE(4*s);for(;s<80;++s)e[s]=f(e[s-3]^e[s-8]^e[s-14]^e[s-16]);for(var d=0;d<80;++d){var p=~~(d/20),y=c(n)+h(p,r,i,o)+a+e[d]+u[p]|0;a=o,o=i,i=l(r),r=n,n=y}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=a+this._e|0},s.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=s},function(t,e,n){var r=n(1),i=n(119),o=n(23),u=n(0).Buffer,a=new Array(64);function s(){this.init(),this._w=a,o.call(this,64,56)}r(s,i),s.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},s.prototype._hash=function(){var t=u.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=s},function(t,e,n){var r=n(1),i=n(120),o=n(23),u=n(0).Buffer,a=new Array(160);function s(){this.init(),this._w=a,o.call(this,128,112)}r(s,i),s.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},s.prototype._hash=function(){var t=u.allocUnsafe(48);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=s},function(t,e,n){"use strict";var r=n(1),i=n(207),o=n(15),u=n(0).Buffer,a=n(208),s=n(117),f=n(118),c=u.alloc(128);function l(t,e){o.call(this,"digest"),"string"==typeof e&&(e=u.from(e));var n="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>n)?e=("rmd160"===t?new s:f(t)).update(e).digest():e.length<n&&(e=u.concat([e,c],n));for(var r=this._ipad=u.allocUnsafe(n),i=this._opad=u.allocUnsafe(n),a=0;a<n;a++)r[a]=54^e[a],i[a]=92^e[a];this._hash="rmd160"===t?new s:f(t),this._hash.update(r)}r(l,o),l.prototype._update=function(t){this._hash.update(t)},l.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new s:f(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new l("rmd160",e):"md5"===t?new i(a,e):new l(t,e)}},function(t,e,n){"use strict";var r=n(1),i=n(0).Buffer,o=n(15),u=i.alloc(128),a=64;function s(t,e){o.call(this,"digest"),"string"==typeof e&&(e=i.from(e)),this._alg=t,this._key=e,e.length>a?e=t(e):e.length<a&&(e=i.concat([e,u],a));for(var n=this._ipad=i.allocUnsafe(a),r=this._opad=i.allocUnsafe(a),s=0;s<a;s++)n[s]=54^e[s],r[s]=92^e[s];this._hash=[n]}r(s,o),s.prototype._update=function(t){this._hash.push(t)},s.prototype._final=function(){var t=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,t]))},t.exports=s},function(t,e,n){var r=n(69);t.exports=function(t){return(new r).update(t).digest()}},function(t,e,n){var r=n(210);t.exports=r("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},function(t,e,n){var r=n(0).Buffer;t.exports=function(t){for(var e={},n=t.length,i=t.charAt(0),o=0;o<t.length;o++){var u=t.charAt(o);if(void 0!==e[u])throw new TypeError(u+" is ambiguous");e[u]=o}function a(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return r.allocUnsafe(0);for(var o=[0],u=0;u<t.length;u++){var a=e[t[u]];if(void 0===a)return;for(var s=0,f=a;s<o.length;++s)f+=o[s]*n,o[s]=255&f,f>>=8;for(;f>0;)o.push(255&f),f>>=8}for(var c=0;t[c]===i&&c<t.length-1;++c)o.push(0);return r.from(o.reverse())}return{encode:function(e){if(0===e.length)return"";for(var r=[0],o=0;o<e.length;++o){for(var u=0,a=e[o];u<r.length;++u)a+=r[u]<<8,r[u]=a%n,a=a/n|0;for(;a>0;)r.push(a%n),a=a/n|0}for(var s="",f=0;0===e[f]&&f<e.length-1;++f)s+=i;for(var c=r.length-1;c>=0;--c)s+=t[r[c]];return s},decodeUnsafe:a,decode:function(t){var e=a(t);if(e)return e;throw new Error("Non-base"+n+" character")}}}},function(t,e,n){"use strict";t.exports=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return new Promise(function(e,r){setTimeout(function(){try{e(t.apply(void 0,n))}catch(t){r(t)}})})}}},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(17),o=n(122),u=n(12),a=n(213);function s(t,n,a,s,f){o("Buffer",n),o(u,a),f&&(n=i.sha256(e.concat([n,new e(f)]))),r.equal(n.length,32,"Hash must be 256 bit");var c=a.toBuffer(32),l=new e(32),h=new e(32);h.fill(1),l.fill(0),l=i.HmacSHA256(e.concat([h,new e([0]),c,n]),l),h=i.HmacSHA256(h,l),l=i.HmacSHA256(e.concat([h,new e([1]),c,n]),l),h=i.HmacSHA256(h,l),h=i.HmacSHA256(h,l);for(var d=u.fromBuffer(h);d.signum()<=0||d.compareTo(t.n)>=0||!s(d);)l=i.HmacSHA256(e.concat([h,new e([0])]),l),h=i.HmacSHA256(h,l),h=i.HmacSHA256(h,l),d=u.fromBuffer(h);return d}function f(t,e,n,r){var i=t.n,o=t.G,u=n.r,a=n.s;if(u.signum()<=0||u.compareTo(i)>=0)return!1;if(a.signum()<=0||a.compareTo(i)>=0)return!1;var s=a.modInverse(i),f=e.multiply(s).mod(i),c=u.multiply(s).mod(i),l=o.multiplyTwo(f,r,c);return!t.isInfinity(l)&&l.affineX.mod(i).equals(u)}function c(t,e,n,i){r.strictEqual(3&i,i,"Recovery param is more than two bits");var o=t.n,u=t.G,a=n.r,s=n.s;r(a.signum()>0&&a.compareTo(o)<0,"Invalid r value"),r(s.signum()>0&&s.compareTo(o)<0,"Invalid s value");var f=1&i,c=i>>1?a.add(o):a,l=t.pointFromX(f,c),h=l.multiply(o);r(t.isInfinity(h),"nR is not a valid curve point");var d=e.negate().mod(o),p=a.modInverse(o),y=l.multiplyTwo(s,u,d).multiply(p);return t.validate(y),y}t.exports={calcPubKeyRecoveryParam:function(t,e,n,r){for(var i=0;i<4;i++)if(c(t,e,n,i).equals(r))return i;throw new Error("Unable to find valid recovery factor")},deterministicGenerateK:s,recoverPubKey:c,sign:function(t,e,n,r){var i,o,f=u.fromBuffer(e),c=t.n,l=t.G,h=(s(t,e,n,function(e){var r=l.multiply(e);return!t.isInfinity(r)&&0!==(i=r.affineX.mod(c)).signum()&&0!==(o=e.modInverse(c).multiply(f.add(n.multiply(i))).mod(c)).signum()},r),c.shiftRight(1));return o.compareTo(h)>0&&(o=c.subtract(o)),a(i,o)},verify:function(t,e,n,r){return f(t,u.fromBuffer(e),n,r)},verifyRaw:f}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(122),o=n(12);function u(t,n){function r(){var r=t.toDERInteger(),i=n.toDERInteger(),o=[];return o.push(2,r.length),(o=o.concat(r)).push(2,i.length),(o=o.concat(i)).unshift(48,o.length),new e(o)}return i(o,t),i(o,n),{r:t,s:n,toCompact:function(r,i){i&&(r+=4),r+=27;var o=new e(65);return o.writeUInt8(r,0),t.toBuffer(32).copy(o,1),n.toBuffer(32).copy(o,33),o},toDER:r,toScriptSignature:function(t){var n=new e(1);return n.writeUInt8(t,0),e.concat([r(),n])}}}u.parseCompact=function(t){r.equal(t.length,65,"Invalid signature length");var e=t.readUInt8(0)-27;return r.equal(e,7&e,"Invalid signature parameter"),{compressed:!!(4&e),i:e&=3,signature:u(o.fromBuffer(t.slice(1,33)),o.fromBuffer(t.slice(33)))}},u.fromDER=function(t){r.equal(t.readUInt8(0),48,"Not a DER sequence"),r.equal(t.readUInt8(1),t.length-2,"Invalid sequence length"),r.equal(t.readUInt8(2),2,"Expected a DER integer");var e=t.readUInt8(3);r(e>0,"R length is zero");var n=4+e;r.equal(t.readUInt8(n),2,"Expected a DER integer (2)");var i=t.readUInt8(n+1);r(i>0,"S length is zero");var a=t.slice(4,n),s=t.slice(n+2);n+=2+i,e>1&&0===a.readUInt8(0)&&r(128&a.readUInt8(1),"R value excessively padded"),i>1&&0===s.readUInt8(0)&&r(128&s.readUInt8(1),"S value excessively padded"),r.equal(n,t.length,"Invalid DER encoding");var f=o.fromDERInteger(a),c=o.fromDERInteger(s);return r(f.signum()>=0,"R value is negative"),r(c.signum()>=0,"S value is negative"),u(f,c)},u.parseScriptSignature=function(t){var e=t.readUInt8(t.length-1),n=-129&e;return r(n>0&&n<4,"Invalid hashType"),{signature:u.fromDER(t.slice(0,-1)),hashType:e}},t.exports=u}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(98),i=n(47),o=n(34),u=n(121),a=n(35);t.exports={Aes:r,PrivateKey:i,PublicKey:o,Signature:u,key_utils:a}},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var o=n(216),u=n(22).Long,a=n(3),s={bytes:function(){return[v]},string:function(){return[b]},vector:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return[l,{type:t,sorted:e}]},optional:function(t){return[h,{type:t}]},time:function(){return[w]},map:function(t){return[f,{annotation:t}]},static_variant:function(t){return[c,{types:t}]},fixed_string16:function(){return[b,{maxLen:16}]},fixed_string32:function(){return[b,{maxLen:32}]},fixed_bytes16:function(){return[v,{len:16}]},fixed_bytes20:function(){return[v,{len:20}]},fixed_bytes28:function(){return[v,{len:28}]},fixed_bytes32:function(){return[v,{len:32}]},fixed_bytes33:function(){return[v,{len:33}]},fixed_bytes64:function(){return[v,{len:64}]},fixed_bytes65:function(){return[v,{len:65}]},uint8:function(){return[p,{bits:8}]},uint16:function(){return[p,{bits:16}]},uint32:function(){return[p,{bits:32}]},uint64:function(){return[p,{bits:64}]},uint128:function(){return[y,{bits:128}]},uint224:function(){return[y,{bits:224}]},uint256:function(){return[y,{bits:256}]},uint512:function(){return[y,{bits:512}]},varuint32:function(){return[p,{bits:32,variable:!0}]},int8:function(){return[p,{signed:!0,bits:8}]},int16:function(){return[p,{signed:!0,bits:16}]},int32:function(){return[p,{signed:!0,bits:32}]},int64:function(){return[p,{signed:!0,bits:64}]},int128:function(){return[y,{signed:!0,bits:128}]},int224:function(){return[y,{signed:!0,bits:224}]},int256:function(){return[y,{signed:!0,bits:256}]},int512:function(){return[y,{signed:!0,bits:512}]},varint32:function(){return[p,{signed:!0,bits:32,variable:!0}]},float32:function(){return[m,{bits:32}]},float64:function(){return[m,{bits:64}]}};t.exports=function(t){t=Object.assign({defaults:!1,debug:!1,customTypes:{}},t);var e=Object.assign({},s,t.customTypes),n=function(n){return function(r,o){return r[o]=function(){for(var u=arguments.length,a=Array(u),f=0;f<u;f++)a[f]=arguments[f];return function(t,e,n,r,o,u){var a=(r?o[t]:s[t]).apply(void 0,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(n)),f=i(a,2),c=f[0],l=f[1],h=void 0===l?{}:l,d=Object.assign(h,e);d.typeName=t;var p=c(d,r,u);return p.typeName=t,p}(o,t,a,n,e,r)},r}},r=Object.keys(s).reduce(n(),{}),o=Object.keys(t.customTypes||{}).reduce(n(r),{});return Object.assign({},r,o,{config:t})};var f=function(t){var e=i(t.annotation,2),n=e[0],r=e[1];if(!C(n))throw new TypeError("map<type1, > unknown");if(!C(r))throw new TypeError("map<, type2> unknown");return{fromByteBuffer:function(e){for(var i=e.readVarint32(),o={},u=0;u<i;u++)o[n.fromByteBuffer(e)]=r.fromByteBuffer(e);return t.debug&&console.log("0x"+i.toString(16),"(map.fromByteBuffer length)",o),o},appendByteBuffer:function(e,i){_(i,t);var o=Object.keys(i);e.writeVarint32(o.length),t.debug&&console.log("0x"+o.length.toString(16),"(map.appendByteBuffer length)",o);var u=!0,a=!1,s=void 0;try{for(var f,c=o[Symbol.iterator]();!(u=(f=c.next()).done);u=!0){var l=f.value,h=i[l];n.appendByteBuffer(e,l),r.appendByteBuffer(e,h)}}catch(t){a=!0,s=t}finally{try{!u&&c.return&&c.return()}finally{if(a)throw s}}},fromObject:function(e){_(e,t);var i={};for(var o in e)i[n.fromObject(o)]=r.fromObject(e[o]);return i},toObject:function(e){if(t.defaults&&null==e)return function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},n.toObject(null),r.toObject(null));_(e,t);var i={};for(var o in e)i[n.toObject(o)]=r.toObject(e[o]);return i}}},c=function(t){var e=t.types;return{fromByteBuffer:function(n){var r=n.readVarint32(),i=e[r];return t.debug&&console.error("static_variant id "+r+" (0x"+r.toString(16)+")"),a(i,"static_variant invalid type position "+r),[r,i.fromByteBuffer(n)]},appendByteBuffer:function(t,n){a(Array.isArray(n)&&2===n.length,"Required tuple");var r=n[0],i=e[r];a(i,"type "+r),t.writeVarint32(r),i.appendByteBuffer(t,n[1])},fromObject:function(t){a(Array.isArray(t)&&2===t.length,"Required tuple");var n=t[0],r=e[n];return a(r,"type "+n),[n,r.fromObject(t[1])]},toObject:function(n){if(t.defaults&&null==n)return[0,e[0].toObject(null,debug)];a(Array.isArray(n)&&2===n.length,"Required tuple");var r=n[0],i=e[r];return a(i,"type "+r),[r,i.toObject(n[1])]}}},l=function(t){var e=t.type,n=t.sorted;if(!C(e))throw new TypeError("vector type should be a serializer");return{fromByteBuffer:function(n){var r=n.readVarint32();t.debug&&console.log("fromByteBuffer vector length",r,"(0x"+r.toString(16)+")");for(var i=[],o=0;o<r;o++)i.push(e.fromByteBuffer(n));return i},appendByteBuffer:function(r,i){null==i&&(i=[]),_(i,t),r.writeVarint32(i.length),!0===n&&(i=k(e,Object.assign([],i))),t.debug&&console.log("0x"+i.length.toString(16),"(vector.appendByteBuffer length)",i);var o=!0,u=!1,a=void 0;try{for(var s,f=i[Symbol.iterator]();!(o=(s=f.next()).done);o=!0){var c=s.value;e.appendByteBuffer(r,c)}}catch(t){u=!0,a=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw a}}},fromObject:function(r){null==r&&(r=[]),_(r,t);var i=[],o=!0,u=!1,a=void 0;try{for(var s,f=r[Symbol.iterator]();!(o=(s=f.next()).done);o=!0){var c=s.value;i.push(e.fromObject(c))}}catch(t){u=!0,a=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw a}}return!0===n&&(i=k(e,Object.assign([],i))),i},toObject:function(r){if(t.defaults&&null==r)return[e.toObject(r)];null==r&&(r=[]),_(r,t),!0===n&&(r=k(e,Object.assign([],r)));var i=[],o=!0,u=!1,a=void 0;try{for(var s,f=r[Symbol.iterator]();!(o=(s=f.next()).done);o=!0){var c=s.value;i.push(e.toObject(c))}}catch(t){u=!0,a=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw a}}return i}}},h=function(t){var e=t.type;if(!C(e))throw new TypeError("optional parameter should be a serializer");return{fromByteBuffer:function(t){return 1!==t.readUint8()?null:e.fromByteBuffer(t)},appendByteBuffer:function(t,n){null!=n?(t.writeUint8(1),e.appendByteBuffer(t,n)):t.writeUint8(0)},fromObject:function(t){return null==t?null:e.fromObject(t)},toObject:function(n){return null!=n||t.defaults?e.toObject(n):null}}},d=function(t){var e=t.signed,n=void 0!==e&&e,r=t.bits;return t.variable?"Varint"+r+(n?"ZigZag":""):(n?"Int":"Uint")+r},p=function(t){return{fromByteBuffer:function(e){var n=e["read"+d(t)]();return u.isLong(n)?n.toString():n},appendByteBuffer:function(e,n){e["write"+d(t)](n)},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),u.isLong(e)?e.toString():e)}}},y=function(t){var n=t.signed,r=void 0!==n&&n,i=t.bits,u=i/8;return{fromByteBuffer:function(n){var a=n.copy(n.offset,n.offset+u);n.skip(u);var s=new o(a.toHex(),"hex"),f=s.toArrayLike(e,"le",u);s=new o(f.toString("hex"),"hex"),r&&(s=s.fromTwos(i));var c=s.toString();return B(c,t),i>53?c:s.toNumber()},appendByteBuffer:function(n,a){B(a,t);var s=new o(a);r&&(s=s.toTwos(i));var f=s.toArrayLike(e,"le",u);n.append(f.toString("binary"),"binary")},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),e)}}},g=n(219),m=function(t){var n=t.bits,r=32===n?"Float":64===n?"Double":null;a(r,"unsupported float bit size: "+n);var i=n/8;return{fromByteBuffer:function(t){var n=t.copy(t.offset,t.offset+i);t.skip(i);var o=e.from(n.toBinary(),"binary");return g["read"+r+"LE"](o)},appendByteBuffer:function(t,e){var n=[];g["write"+r+"LE"](n,e),t.append(n)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?0:e}}},v=function(t){return{fromByteBuffer:function(n){var r=t.len,i=void 0;if(null==r){var o=n.readVarint32();i=n.copy(n.offset,n.offset+o),n.skip(o)}else i=n.copy(n.offset,n.offset+r),n.skip(r);return e.from(i.toBinary(),"binary")},appendByteBuffer:function(e,n){null==t.len&&e.writeVarint32(n.length),e.append(n.toString("binary"),"binary")},fromObject:function(n){return"string"==typeof n?n=e.from(n,"hex"):n instanceof Array?n=e.from(n):n instanceof Uint8Array&&(n=e.from(n)),_(n,t),n},toObject:function(e){var n=t.defaults,r=t.len;return n&&null==e?Array(r?r+1:1).join("00"):(_(e,t),e.toString("hex"))},compare:function(t,n){return e.compare(t,n)}}},b=function(t){return{fromByteBuffer:function(t){return t.readVString()},appendByteBuffer:function(e,n){_(n,t),e.writeVString(n.toString())},fromObject:function(e){return _(e,t),e},toObject:function(e){return t.defaults&&null==e?"":(_(e,t),e)}}},w=function(t){return{fromByteBuffer:function(t){return t.readUint32()},appendByteBuffer:function(e,n){_(n,t),e.writeUint32(n)},fromObject:function(e){if(_(e,t),"number"==typeof e)return e;if(e.getTime)return Math.floor(e.getTime()/1e3);if("string"!=typeof e)throw new Error("Unknown date type: "+e);return"string"!=typeof e||/Z$/.test(e)||(e+="Z"),Math.floor(new Date(e).getTime()/1e3)},toObject:function(e){if(t.defaults&&null==e)return new Date(0).toISOString().split(".")[0];_(e,t),B(e,x(t,{bits:32}));var n=parseInt(e);return new Date(1e3*n).toISOString().split(".")[0]}}},_=function(t,e){if(F(t))throw new Error("Required "+e.typeName);if(null!=e.len){if(null==t.length)throw new Error('len validation requries a "length" property');var n=e.len;if(t.length!==n)throw new Error(e.typeName+" length "+t.length+" does not equal "+n)}if(null!=e.maxLen){var r=e.maxLen;if(null==t.length)throw new Error('maxLen validation requries a "length" property');if(t.length>r)throw new Error(e.typeName+" length "+t.length+" exceeds maxLen "+r)}},E=new o,A=new o("1");function B(t,e){if(F(t))throw new Error("Required "+e.typeName);var n=e.signed,r=void 0!==n&&n,i=e.bits,u=void 0===i?54:i;if(t=String(t).trim(),r&&!/^-?[0-9]+$/.test(t)||!r&&!/^[0-9]+$/.test(t))throw new Error("Number format "+e.typeName+" "+t);var a=r?D(u):S(u),s=r?T(u):E,f=new o(t);if(f.cmp(s)<0||f.cmp(a)>0)throw new Error("Overflow "+e.typeName+" "+t+", max "+a.toString()+", min "+s.toString()+", signed "+r+", bits "+u)}var C=function(t){return"object"===(void 0===t?"undefined":r(t))&&"function"==typeof t.fromByteBuffer&&"function"==typeof t.appendByteBuffer&&"function"==typeof t.fromObject&&"function"==typeof t.toObject},k=function(t,e){return t.compare?e.sort(t.compare):e.sort()},x=function(){return Object.assign.apply(Object,arguments)},F=function(t){return null==t},S=function(t){return new o(1).ishln(t).isub(A)},D=function(t){return new o(1).ishln(t-1).isub(A)},T=function(t){return new o(1).ishln(t-1).ineg()}}).call(this,n(2).Buffer)},function(t,e,n){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}function o(t,e,n){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(n=e,e=10),this._init(t||0,e||10,n||"be"))}var u;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{u=n(218).Buffer}catch(t){}function a(t,e,n){for(var r=0,i=Math.min(t.length,n),o=e;o<i;o++){var u=t.charCodeAt(o)-48;r<<=4,r|=u>=49&&u<=54?u-49+10:u>=17&&u<=22?u-17+10:15&u}return r}function s(t,e,n,r){for(var i=0,o=Math.min(t.length,n),u=e;u<o;u++){var a=t.charCodeAt(u)-48;i*=r,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,n){if("number"==typeof t)return this._initNumber(t,e,n);if("object"==typeof t)return this._initArray(t,e,n);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initNumber=function(t,e,n){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initArray=function(t,e,n){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,u,a=0;if("be"===n)for(i=t.length-1,o=0;i>=0;i-=3)u=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=u<<a&67108863,this.words[o+1]=u>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===n)for(i=0,o=0;i<t.length;i+=3)u=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=u<<a&67108863,this.words[o+1]=u>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var r,i,o=0;for(n=t.length-6,r=0;n>=e;n-=6)i=a(t,n,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);n+6!==e&&(i=a(t,e,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,n){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var o=t.length-n,u=o%r,a=Math.min(o,o-u)+n,f=0,c=n;c<a;c+=r)f=s(t,c,c+r,e),this.imuln(i),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==u){var l=1;for(f=s(t,c,t.length,e),c=0;c<u;c++)l*=e;this.imuln(l),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function h(t,e,n){n.negative=e.negative^t.negative;var r=t.length+e.length|0;n.length=r,r=r-1|0;var i=0|t.words[0],o=0|e.words[0],u=i*o,a=67108863&u,s=u/67108864|0;n.words[0]=a;for(var f=1;f<r;f++){for(var c=s>>>26,l=67108863&s,h=Math.min(f,e.length-1),d=Math.max(0,f-t.length+1);d<=h;d++){var p=f-d|0;c+=(u=(i=0|t.words[p])*(o=0|e.words[d])+l)/67108864|0,l=67108863&u}n.words[f]=0|l,s=0|c}return 0!==s?n.words[f]=0|s:n.length--,n.strip()}o.prototype.toString=function(t,e){var n;if(t=t||10,e=0|e||1,16===t||"hex"===t){n="";for(var i=0,o=0,u=0;u<this.length;u++){var a=this.words[u],s=(16777215&(a<<i|o)).toString(16);n=0!==(o=a>>>24-i&16777215)||u!==this.length-1?f[6-s.length]+s+n:s+n,(i+=2)>=26&&(i-=26,u--)}for(0!==o&&(n=o.toString(16)+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(t===(0|t)&&t>=2&&t<=36){var h=c[t],d=l[t];n="";var p=this.clone();for(p.negative=0;!p.isZero();){var y=p.modn(d).toString(t);n=(p=p.idivn(d)).isZero()?y+n:f[h-y.length]+y+n}for(this.isZero()&&(n="0"+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==u),this.toArrayLike(u,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,n){var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var u,a,s="le"===e,f=new t(o),c=this.clone();if(s){for(a=0;!c.isZero();a++)u=c.andln(255),c.iushrn(8),f[a]=u;for(;a<o;a++)f[a]=0}else{for(a=0;a<o-i;a++)f[a]=0;for(a=0;!c.isZero();a++)u=c.andln(255),c.iushrn(8),f[o-a-1]=u}return f},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,n=0;return e>=4096&&(n+=13,e>>>=13),e>=64&&(n+=7,e>>>=7),e>=8&&(n+=4,e>>>=4),e>=2&&(n+=2,e>>>=2),n+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,n=0;return 0==(8191&e)&&(n+=13,e>>>=13),0==(127&e)&&(n+=7,e>>>=7),0==(15&e)&&(n+=4,e>>>=4),0==(3&e)&&(n+=2,e>>>=2),0==(1&e)&&n++,n},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var n=this._zeroBits(this.words[e]);if(t+=n,26!==n)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var n=0;n<e.length;n++)this.words[n]=this.words[n]&t.words[n];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,n;this.length>t.length?(e=this,n=t):(e=t,n=this);for(var r=0;r<n.length;r++)this.words[r]=e.words[r]^n.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),n=t%26;this._expand(e),n>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var n=t/26|0,i=t%26;return this._expand(n+1),this.words[n]=e?this.words[n]|1<<i:this.words[n]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,n,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(n=this,r=t):(n=t,r=this);for(var i=0,o=0;o<r.length;o++)e=(0|n.words[o])+(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<n.length;o++)e=(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=n.length,0!==i)this.words[this.length]=i,this.length++;else if(n!==this)for(;o<n.length;o++)this.words[o]=n.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var n,r,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(n=this,r=t):(n=t,r=this);for(var o=0,u=0;u<r.length;u++)o=(e=(0|n.words[u])-(0|r.words[u])+o)>>26,this.words[u]=67108863&e;for(;0!==o&&u<n.length;u++)o=(e=(0|n.words[u])+o)>>26,this.words[u]=67108863&e;if(0===o&&u<n.length&&n!==this)for(;u<n.length;u++)this.words[u]=n.words[u];return this.length=Math.max(this.length,u),n!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var d=function(t,e,n){var r,i,o,u=t.words,a=e.words,s=n.words,f=0,c=0|u[0],l=8191&c,h=c>>>13,d=0|u[1],p=8191&d,y=d>>>13,g=0|u[2],m=8191&g,v=g>>>13,b=0|u[3],w=8191&b,_=b>>>13,E=0|u[4],A=8191&E,B=E>>>13,C=0|u[5],k=8191&C,x=C>>>13,F=0|u[6],S=8191&F,D=F>>>13,T=0|u[7],O=8191&T,I=T>>>13,M=0|u[8],j=8191&M,P=M>>>13,L=0|u[9],R=8191&L,N=L>>>13,U=0|a[0],q=8191&U,z=U>>>13,H=0|a[1],V=8191&H,G=H>>>13,W=0|a[2],K=8191&W,Z=W>>>13,Y=0|a[3],X=8191&Y,J=Y>>>13,$=0|a[4],Q=8191&$,tt=$>>>13,et=0|a[5],nt=8191&et,rt=et>>>13,it=0|a[6],ot=8191&it,ut=it>>>13,at=0|a[7],st=8191&at,ft=at>>>13,ct=0|a[8],lt=8191&ct,ht=ct>>>13,dt=0|a[9],pt=8191&dt,yt=dt>>>13;n.negative=t.negative^e.negative,n.length=19;var gt=(f+(r=Math.imul(l,q))|0)+((8191&(i=(i=Math.imul(l,z))+Math.imul(h,q)|0))<<13)|0;f=((o=Math.imul(h,z))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(p,q),i=(i=Math.imul(p,z))+Math.imul(y,q)|0,o=Math.imul(y,z);var mt=(f+(r=r+Math.imul(l,V)|0)|0)+((8191&(i=(i=i+Math.imul(l,G)|0)+Math.imul(h,V)|0))<<13)|0;f=((o=o+Math.imul(h,G)|0)+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,r=Math.imul(m,q),i=(i=Math.imul(m,z))+Math.imul(v,q)|0,o=Math.imul(v,z),r=r+Math.imul(p,V)|0,i=(i=i+Math.imul(p,G)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,G)|0;var vt=(f+(r=r+Math.imul(l,K)|0)|0)+((8191&(i=(i=i+Math.imul(l,Z)|0)+Math.imul(h,K)|0))<<13)|0;f=((o=o+Math.imul(h,Z)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(w,q),i=(i=Math.imul(w,z))+Math.imul(_,q)|0,o=Math.imul(_,z),r=r+Math.imul(m,V)|0,i=(i=i+Math.imul(m,G)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,G)|0,r=r+Math.imul(p,K)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(y,K)|0,o=o+Math.imul(y,Z)|0;var bt=(f+(r=r+Math.imul(l,X)|0)|0)+((8191&(i=(i=i+Math.imul(l,J)|0)+Math.imul(h,X)|0))<<13)|0;f=((o=o+Math.imul(h,J)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(A,q),i=(i=Math.imul(A,z))+Math.imul(B,q)|0,o=Math.imul(B,z),r=r+Math.imul(w,V)|0,i=(i=i+Math.imul(w,G)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,G)|0,r=r+Math.imul(m,K)|0,i=(i=i+Math.imul(m,Z)|0)+Math.imul(v,K)|0,o=o+Math.imul(v,Z)|0,r=r+Math.imul(p,X)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,J)|0;var wt=(f+(r=r+Math.imul(l,Q)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(h,Q)|0))<<13)|0;f=((o=o+Math.imul(h,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(k,q),i=(i=Math.imul(k,z))+Math.imul(x,q)|0,o=Math.imul(x,z),r=r+Math.imul(A,V)|0,i=(i=i+Math.imul(A,G)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,G)|0,r=r+Math.imul(w,K)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(_,K)|0,o=o+Math.imul(_,Z)|0,r=r+Math.imul(m,X)|0,i=(i=i+Math.imul(m,J)|0)+Math.imul(v,X)|0,o=o+Math.imul(v,J)|0,r=r+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0;var _t=(f+(r=r+Math.imul(l,nt)|0)|0)+((8191&(i=(i=i+Math.imul(l,rt)|0)+Math.imul(h,nt)|0))<<13)|0;f=((o=o+Math.imul(h,rt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(S,q),i=(i=Math.imul(S,z))+Math.imul(D,q)|0,o=Math.imul(D,z),r=r+Math.imul(k,V)|0,i=(i=i+Math.imul(k,G)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,G)|0,r=r+Math.imul(A,K)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(B,K)|0,o=o+Math.imul(B,Z)|0,r=r+Math.imul(w,X)|0,i=(i=i+Math.imul(w,J)|0)+Math.imul(_,X)|0,o=o+Math.imul(_,J)|0,r=r+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,tt)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,tt)|0,r=r+Math.imul(p,nt)|0,i=(i=i+Math.imul(p,rt)|0)+Math.imul(y,nt)|0,o=o+Math.imul(y,rt)|0;var Et=(f+(r=r+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,ut)|0)+Math.imul(h,ot)|0))<<13)|0;f=((o=o+Math.imul(h,ut)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(O,q),i=(i=Math.imul(O,z))+Math.imul(I,q)|0,o=Math.imul(I,z),r=r+Math.imul(S,V)|0,i=(i=i+Math.imul(S,G)|0)+Math.imul(D,V)|0,o=o+Math.imul(D,G)|0,r=r+Math.imul(k,K)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(x,K)|0,o=o+Math.imul(x,Z)|0,r=r+Math.imul(A,X)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(B,X)|0,o=o+Math.imul(B,J)|0,r=r+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,r=r+Math.imul(m,nt)|0,i=(i=i+Math.imul(m,rt)|0)+Math.imul(v,nt)|0,o=o+Math.imul(v,rt)|0,r=r+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,ut)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,ut)|0;var At=(f+(r=r+Math.imul(l,st)|0)|0)+((8191&(i=(i=i+Math.imul(l,ft)|0)+Math.imul(h,st)|0))<<13)|0;f=((o=o+Math.imul(h,ft)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(j,q),i=(i=Math.imul(j,z))+Math.imul(P,q)|0,o=Math.imul(P,z),r=r+Math.imul(O,V)|0,i=(i=i+Math.imul(O,G)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,G)|0,r=r+Math.imul(S,K)|0,i=(i=i+Math.imul(S,Z)|0)+Math.imul(D,K)|0,o=o+Math.imul(D,Z)|0,r=r+Math.imul(k,X)|0,i=(i=i+Math.imul(k,J)|0)+Math.imul(x,X)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,r=r+Math.imul(w,nt)|0,i=(i=i+Math.imul(w,rt)|0)+Math.imul(_,nt)|0,o=o+Math.imul(_,rt)|0,r=r+Math.imul(m,ot)|0,i=(i=i+Math.imul(m,ut)|0)+Math.imul(v,ot)|0,o=o+Math.imul(v,ut)|0,r=r+Math.imul(p,st)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(y,st)|0,o=o+Math.imul(y,ft)|0;var Bt=(f+(r=r+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,ht)|0)+Math.imul(h,lt)|0))<<13)|0;f=((o=o+Math.imul(h,ht)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(R,q),i=(i=Math.imul(R,z))+Math.imul(N,q)|0,o=Math.imul(N,z),r=r+Math.imul(j,V)|0,i=(i=i+Math.imul(j,G)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,G)|0,r=r+Math.imul(O,K)|0,i=(i=i+Math.imul(O,Z)|0)+Math.imul(I,K)|0,o=o+Math.imul(I,Z)|0,r=r+Math.imul(S,X)|0,i=(i=i+Math.imul(S,J)|0)+Math.imul(D,X)|0,o=o+Math.imul(D,J)|0,r=r+Math.imul(k,Q)|0,i=(i=i+Math.imul(k,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(A,nt)|0,i=(i=i+Math.imul(A,rt)|0)+Math.imul(B,nt)|0,o=o+Math.imul(B,rt)|0,r=r+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,ut)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,ut)|0,r=r+Math.imul(m,st)|0,i=(i=i+Math.imul(m,ft)|0)+Math.imul(v,st)|0,o=o+Math.imul(v,ft)|0,r=r+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,ht)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,ht)|0;var Ct=(f+(r=r+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,yt)|0)+Math.imul(h,pt)|0))<<13)|0;f=((o=o+Math.imul(h,yt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(R,V),i=(i=Math.imul(R,G))+Math.imul(N,V)|0,o=Math.imul(N,G),r=r+Math.imul(j,K)|0,i=(i=i+Math.imul(j,Z)|0)+Math.imul(P,K)|0,o=o+Math.imul(P,Z)|0,r=r+Math.imul(O,X)|0,i=(i=i+Math.imul(O,J)|0)+Math.imul(I,X)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(D,Q)|0,o=o+Math.imul(D,tt)|0,r=r+Math.imul(k,nt)|0,i=(i=i+Math.imul(k,rt)|0)+Math.imul(x,nt)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,ut)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,ut)|0,r=r+Math.imul(w,st)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(_,st)|0,o=o+Math.imul(_,ft)|0,r=r+Math.imul(m,lt)|0,i=(i=i+Math.imul(m,ht)|0)+Math.imul(v,lt)|0,o=o+Math.imul(v,ht)|0;var kt=(f+(r=r+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,yt)|0)+Math.imul(y,pt)|0))<<13)|0;f=((o=o+Math.imul(y,yt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(R,K),i=(i=Math.imul(R,Z))+Math.imul(N,K)|0,o=Math.imul(N,Z),r=r+Math.imul(j,X)|0,i=(i=i+Math.imul(j,J)|0)+Math.imul(P,X)|0,o=o+Math.imul(P,J)|0,r=r+Math.imul(O,Q)|0,i=(i=i+Math.imul(O,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(S,nt)|0,i=(i=i+Math.imul(S,rt)|0)+Math.imul(D,nt)|0,o=o+Math.imul(D,rt)|0,r=r+Math.imul(k,ot)|0,i=(i=i+Math.imul(k,ut)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(A,st)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(B,st)|0,o=o+Math.imul(B,ft)|0,r=r+Math.imul(w,lt)|0,i=(i=i+Math.imul(w,ht)|0)+Math.imul(_,lt)|0,o=o+Math.imul(_,ht)|0;var xt=(f+(r=r+Math.imul(m,pt)|0)|0)+((8191&(i=(i=i+Math.imul(m,yt)|0)+Math.imul(v,pt)|0))<<13)|0;f=((o=o+Math.imul(v,yt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(R,X),i=(i=Math.imul(R,J))+Math.imul(N,X)|0,o=Math.imul(N,J),r=r+Math.imul(j,Q)|0,i=(i=i+Math.imul(j,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,r=r+Math.imul(O,nt)|0,i=(i=i+Math.imul(O,rt)|0)+Math.imul(I,nt)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(S,ot)|0,i=(i=i+Math.imul(S,ut)|0)+Math.imul(D,ot)|0,o=o+Math.imul(D,ut)|0,r=r+Math.imul(k,st)|0,i=(i=i+Math.imul(k,ft)|0)+Math.imul(x,st)|0,o=o+Math.imul(x,ft)|0,r=r+Math.imul(A,lt)|0,i=(i=i+Math.imul(A,ht)|0)+Math.imul(B,lt)|0,o=o+Math.imul(B,ht)|0;var Ft=(f+(r=r+Math.imul(w,pt)|0)|0)+((8191&(i=(i=i+Math.imul(w,yt)|0)+Math.imul(_,pt)|0))<<13)|0;f=((o=o+Math.imul(_,yt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,r=Math.imul(R,Q),i=(i=Math.imul(R,tt))+Math.imul(N,Q)|0,o=Math.imul(N,tt),r=r+Math.imul(j,nt)|0,i=(i=i+Math.imul(j,rt)|0)+Math.imul(P,nt)|0,o=o+Math.imul(P,rt)|0,r=r+Math.imul(O,ot)|0,i=(i=i+Math.imul(O,ut)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(S,st)|0,i=(i=i+Math.imul(S,ft)|0)+Math.imul(D,st)|0,o=o+Math.imul(D,ft)|0,r=r+Math.imul(k,lt)|0,i=(i=i+Math.imul(k,ht)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,ht)|0;var St=(f+(r=r+Math.imul(A,pt)|0)|0)+((8191&(i=(i=i+Math.imul(A,yt)|0)+Math.imul(B,pt)|0))<<13)|0;f=((o=o+Math.imul(B,yt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(R,nt),i=(i=Math.imul(R,rt))+Math.imul(N,nt)|0,o=Math.imul(N,rt),r=r+Math.imul(j,ot)|0,i=(i=i+Math.imul(j,ut)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,ut)|0,r=r+Math.imul(O,st)|0,i=(i=i+Math.imul(O,ft)|0)+Math.imul(I,st)|0,o=o+Math.imul(I,ft)|0,r=r+Math.imul(S,lt)|0,i=(i=i+Math.imul(S,ht)|0)+Math.imul(D,lt)|0,o=o+Math.imul(D,ht)|0;var Dt=(f+(r=r+Math.imul(k,pt)|0)|0)+((8191&(i=(i=i+Math.imul(k,yt)|0)+Math.imul(x,pt)|0))<<13)|0;f=((o=o+Math.imul(x,yt)|0)+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,r=Math.imul(R,ot),i=(i=Math.imul(R,ut))+Math.imul(N,ot)|0,o=Math.imul(N,ut),r=r+Math.imul(j,st)|0,i=(i=i+Math.imul(j,ft)|0)+Math.imul(P,st)|0,o=o+Math.imul(P,ft)|0,r=r+Math.imul(O,lt)|0,i=(i=i+Math.imul(O,ht)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,ht)|0;var Tt=(f+(r=r+Math.imul(S,pt)|0)|0)+((8191&(i=(i=i+Math.imul(S,yt)|0)+Math.imul(D,pt)|0))<<13)|0;f=((o=o+Math.imul(D,yt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(R,st),i=(i=Math.imul(R,ft))+Math.imul(N,st)|0,o=Math.imul(N,ft),r=r+Math.imul(j,lt)|0,i=(i=i+Math.imul(j,ht)|0)+Math.imul(P,lt)|0,o=o+Math.imul(P,ht)|0;var Ot=(f+(r=r+Math.imul(O,pt)|0)|0)+((8191&(i=(i=i+Math.imul(O,yt)|0)+Math.imul(I,pt)|0))<<13)|0;f=((o=o+Math.imul(I,yt)|0)+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,r=Math.imul(R,lt),i=(i=Math.imul(R,ht))+Math.imul(N,lt)|0,o=Math.imul(N,ht);var It=(f+(r=r+Math.imul(j,pt)|0)|0)+((8191&(i=(i=i+Math.imul(j,yt)|0)+Math.imul(P,pt)|0))<<13)|0;f=((o=o+Math.imul(P,yt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var Mt=(f+(r=Math.imul(R,pt))|0)+((8191&(i=(i=Math.imul(R,yt))+Math.imul(N,pt)|0))<<13)|0;return f=((o=Math.imul(N,yt))+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,s[0]=gt,s[1]=mt,s[2]=vt,s[3]=bt,s[4]=wt,s[5]=_t,s[6]=Et,s[7]=At,s[8]=Bt,s[9]=Ct,s[10]=kt,s[11]=xt,s[12]=Ft,s[13]=St,s[14]=Dt,s[15]=Tt,s[16]=Ot,s[17]=It,s[18]=Mt,0!==f&&(s[19]=f,n.length++),n};function p(t,e,n){return(new y).mulp(t,e,n)}function y(t,e){this.x=t,this.y=e}Math.imul||(d=h),o.prototype.mulTo=function(t,e){var n=this.length+t.length;return 10===this.length&&10===t.length?d(this,t,e):n<63?h(this,t,e):n<1024?function(t,e,n){n.negative=e.negative^t.negative,n.length=t.length+e.length;for(var r=0,i=0,o=0;o<n.length-1;o++){var u=i;i=0;for(var a=67108863&r,s=Math.min(o,e.length-1),f=Math.max(0,o-t.length+1);f<=s;f++){var c=o-f,l=(0|t.words[c])*(0|e.words[f]),h=67108863&l;a=67108863&(h=h+a|0),i+=(u=(u=u+(l/67108864|0)|0)+(h>>>26)|0)>>>26,u&=67108863}n.words[o]=a,r=u,u=i}return 0!==r?n.words[o]=r:n.length--,n.strip()}(this,t,e):p(this,t,e)},y.prototype.makeRBT=function(t){for(var e=new Array(t),n=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,n,t);return e},y.prototype.revBin=function(t,e,n){if(0===t||t===n-1)return t;for(var r=0,i=0;i<e;i++)r|=(1&t)<<e-i-1,t>>=1;return r},y.prototype.permute=function(t,e,n,r,i,o){for(var u=0;u<o;u++)r[u]=e[t[u]],i[u]=n[t[u]]},y.prototype.transform=function(t,e,n,r,i,o){this.permute(o,t,e,n,r,i);for(var u=1;u<i;u<<=1)for(var a=u<<1,s=Math.cos(2*Math.PI/a),f=Math.sin(2*Math.PI/a),c=0;c<i;c+=a)for(var l=s,h=f,d=0;d<u;d++){var p=n[c+d],y=r[c+d],g=n[c+d+u],m=r[c+d+u],v=l*g-h*m;m=l*m+h*g,g=v,n[c+d]=p+g,r[c+d]=y+m,n[c+d+u]=p-g,r[c+d+u]=y-m,d!==a&&(v=s*l-f*h,h=s*h+f*l,l=v)}},y.prototype.guessLen13b=function(t,e){var n=1|Math.max(e,t),r=1&n,i=0;for(n=n/2|0;n;n>>>=1)i++;return 1<<i+1+r},y.prototype.conjugate=function(t,e,n){if(!(n<=1))for(var r=0;r<n/2;r++){var i=t[r];t[r]=t[n-r-1],t[n-r-1]=i,i=e[r],e[r]=-e[n-r-1],e[n-r-1]=-i}},y.prototype.normalize13b=function(t,e){for(var n=0,r=0;r<e/2;r++){var i=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+n;t[r]=67108863&i,n=i<67108864?0:i/67108864|0}return t},y.prototype.convert13b=function(t,e,n,i){for(var o=0,u=0;u<e;u++)o+=0|t[u],n[2*u]=8191&o,o>>>=13,n[2*u+1]=8191&o,o>>>=13;for(u=2*e;u<i;++u)n[u]=0;r(0===o),r(0==(-8192&o))},y.prototype.stub=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=0;return e},y.prototype.mulp=function(t,e,n){var r=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(r),o=this.stub(r),u=new Array(r),a=new Array(r),s=new Array(r),f=new Array(r),c=new Array(r),l=new Array(r),h=n.words;h.length=r,this.convert13b(t.words,t.length,u,r),this.convert13b(e.words,e.length,f,r),this.transform(u,o,a,s,r,i),this.transform(f,o,c,l,r,i);for(var d=0;d<r;d++){var p=a[d]*c[d]-s[d]*l[d];s[d]=a[d]*l[d]+s[d]*c[d],a[d]=p}return this.conjugate(a,s,r),this.transform(a,s,h,o,r,i),this.conjugate(h,o,r),this.normalize13b(h,r),n.negative=t.negative^e.negative,n.length=t.length+e.length,n.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,n=0;n<this.length;n++){var i=(0|this.words[n])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[n]=67108863&o}return 0!==e&&(this.words[n]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),n=0;n<e.length;n++){var r=n/26|0,i=n%26;e[n]=(t.words[r]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var n=this,r=0;r<e.length&&0===e[r];r++,n=n.sqr());if(++r<e.length)for(var i=n.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(n=n.mul(i));return n},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,n=t%26,i=(t-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var u=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,s=(0|this.words[e])-a<<n;this.words[e]=s|u,u=a>>>26-n}u&&(this.words[e]=u,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,n){var i;r("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,u=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,s=n;if(i-=u,i=Math.max(0,i),s){for(var f=0;f<u;f++)s.words[f]=this.words[f];s.length=u}if(0===u);else if(this.length>u)for(this.length-=u,f=0;f<this.length;f++)this.words[f]=this.words[f+u];else this.words[0]=0,this.length=1;var c=0;for(f=this.length-1;f>=0&&(0!==c||f>=i);f--){var l=0|this.words[f];this.words[f]=c<<26-o|l>>>o,c=l&a}return s&&0!==c&&(s.words[s.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,n){return r(0===this.negative),this.iushrn(t,e,n)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26,i=1<<e;return!(this.length<=n)&&!!(this.words[n]&i)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==e&&n++,this.length=Math.min(n,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,n){var i,o,u=t.length+n;this._expand(u);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+n])+a;var s=(0|t.words[i])*e;a=((o-=67108863&s)>>26)-(s/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)a=(o=(0|this.words[i+n])+a)>>26,this.words[i+n]=67108863&o;if(0===a)return this.strip();for(r(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var n=(this.length,t.length),r=this.clone(),i=t,u=0|i.words[i.length-1];0!==(n=26-this._countBits(u))&&(i=i.ushln(n),r.iushln(n),u=0|i.words[i.length-1]);var a,s=r.length-i.length;if("mod"!==e){(a=new o(null)).length=s+1,a.words=new Array(a.length);for(var f=0;f<a.length;f++)a.words[f]=0}var c=r.clone()._ishlnsubmul(i,1,s);0===c.negative&&(r=c,a&&(a.words[s]=1));for(var l=s-1;l>=0;l--){var h=67108864*(0|r.words[i.length+l])+(0|r.words[i.length+l-1]);for(h=Math.min(h/u|0,67108863),r._ishlnsubmul(i,h,l);0!==r.negative;)h--,r.negative=0,r._ishlnsubmul(i,1,l),r.isZero()||(r.negative^=1);a&&(a.words[l]=h)}return a&&a.strip(),r.strip(),"div"!==e&&0!==n&&r.iushrn(n),{div:a||null,mod:r}},o.prototype.divmod=function(t,e,n){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(u=a.mod.neg(),n&&0!==u.negative&&u.iadd(t)),{div:i,mod:u}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(u=a.mod.neg(),n&&0!==u.negative&&u.isub(t)),{div:a.div,mod:u}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,u,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var n=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),i=t.andln(1),o=n.cmp(r);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,n=0,i=this.length-1;i>=0;i--)n=(e*n+(0|this.words[i]))%t;return n},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var i=(0|this.words[n])+67108864*e;this.words[n]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),u=new o(0),a=new o(0),s=new o(1),f=0;e.isEven()&&n.isEven();)e.iushrn(1),n.iushrn(1),++f;for(var c=n.clone(),l=e.clone();!e.isZero();){for(var h=0,d=1;0==(e.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(e.iushrn(h);h-- >0;)(i.isOdd()||u.isOdd())&&(i.iadd(c),u.isub(l)),i.iushrn(1),u.iushrn(1);for(var p=0,y=1;0==(n.words[0]&y)&&p<26;++p,y<<=1);if(p>0)for(n.iushrn(p);p-- >0;)(a.isOdd()||s.isOdd())&&(a.iadd(c),s.isub(l)),a.iushrn(1),s.iushrn(1);e.cmp(n)>=0?(e.isub(n),i.isub(a),u.isub(s)):(n.isub(e),a.isub(i),s.isub(u))}return{a:a,b:s,gcd:n.iushln(f)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,u=new o(1),a=new o(0),s=n.clone();e.cmpn(1)>0&&n.cmpn(1)>0;){for(var f=0,c=1;0==(e.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(e.iushrn(f);f-- >0;)u.isOdd()&&u.iadd(s),u.iushrn(1);for(var l=0,h=1;0==(n.words[0]&h)&&l<26;++l,h<<=1);if(l>0)for(n.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(s),a.iushrn(1);e.cmp(n)>=0?(e.isub(n),u.isub(a)):(n.isub(e),a.isub(u))}return(i=0===e.cmpn(1)?u:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),n=t.clone();e.negative=0,n.negative=0;for(var r=0;e.isEven()&&n.isEven();r++)e.iushrn(1),n.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;n.isEven();)n.iushrn(1);var i=e.cmp(n);if(i<0){var o=e;e=n,n=o}else if(0===i||0===n.cmpn(1))break;e.isub(n)}return n.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,n=(t-e)/26,i=1<<e;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,u=n;0!==o&&u<this.length;u++){var a=0|this.words[u];o=(a+=o)>>>26,a&=67108863,this.words[u]=a}return 0!==o&&(this.words[u]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,n=t<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)e=1;else{n&&(t=-t),r(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],i=0|t.words[n];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new E(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function m(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function E(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function A(t){E.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},m.prototype.ireduce=function(t){var e,n=t;do{this.split(n,this.tmp),e=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):n.strip(),n},m.prototype.split=function(t,e){t.iushrn(this.n,0,e)},m.prototype.imulK=function(t){return t.imul(this.k)},i(v,m),v.prototype.split=function(t,e){for(var n=Math.min(t.length,9),r=0;r<n;r++)e.words[r]=t.words[r];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(e.words[e.length++]=4194303&i,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|i>>>22,i=o}i>>>=22,t.words[r-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,n=0;n<t.length;n++){var r=0|t.words[n];e+=977*r,t.words[n]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,m),i(w,m),i(_,m),_.prototype.imulK=function(t){for(var e=0,n=0;n<t.length;n++){var r=19*(0|t.words[n])+e,i=67108863&r;r>>>=26,t.words[n]=i,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return g[t]=e,e},E.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},E.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},E.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},E.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},E.prototype.add=function(t,e){this._verify2(t,e);var n=t.add(e);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},E.prototype.iadd=function(t,e){this._verify2(t,e);var n=t.iadd(e);return n.cmp(this.m)>=0&&n.isub(this.m),n},E.prototype.sub=function(t,e){this._verify2(t,e);var n=t.sub(e);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},E.prototype.isub=function(t,e){this._verify2(t,e);var n=t.isub(e);return n.cmpn(0)<0&&n.iadd(this.m),n},E.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},E.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},E.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},E.prototype.isqr=function(t){return this.imul(t,t.clone())},E.prototype.sqr=function(t){return this.mul(t,t)},E.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var n=this.m.add(new o(1)).iushrn(2);return this.pow(t,n)}for(var i=this.m.subn(1),u=0;!i.isZero()&&0===i.andln(1);)u++,i.iushrn(1);r(!i.isZero());var a=new o(1).toRed(this),s=a.redNeg(),f=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,f).cmp(s);)c.redIAdd(s);for(var l=this.pow(c,i),h=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=u;0!==d.cmp(a);){for(var y=d,g=0;0!==y.cmp(a);g++)y=y.redSqr();r(g<p);var m=this.pow(l,new o(1).iushln(p-g-1));h=h.redMul(m),l=m.redSqr(),d=d.redMul(l),p=g}return h},E.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},E.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var n=new Array(16);n[0]=new o(1).toRed(this),n[1]=t;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],t);var i=n[0],u=0,a=0,s=e.bitLength()%26;for(0===s&&(s=26),r=e.length-1;r>=0;r--){for(var f=e.words[r],c=s-1;c>=0;c--){var l=f>>c&1;i!==n[0]&&(i=this.sqr(i)),0!==l||0!==u?(u<<=1,u|=l,(4===++a||0===r&&0===c)&&(i=this.mul(i,n[u]),a=0,u=0)):a=0}s=26}return i},E.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},E.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new A(t)},i(A,E),A.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},A.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},A.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var n=t.imul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},A.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var n=t.mul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),u=i;return i.cmp(this.m)>=0?u=i.isub(this.m):i.cmpn(0)<0&&(u=i.iadd(this.m)),u._forceRed(this)},A.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,n(217)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){},function(t,e,n){"use strict";(function(e){var n,r,i,o,u,a,s,f,c=!1;function l(t,e,n){var r=t[e++],i=t[e++],o=t[e++],u=t[e];return"bige"===n?256*(256*(256*r+i)+o)+u:256*(256*(256*u+o)+i)+r}function h(t,e,n,r){var i=e>>>24&255,o=e>>16&255,u=e>>8&255,a=255&e;"bige"===r?(t[n++]=i,t[n++]=o,t[n++]=u,t[n]=a):(t[n++]=a,t[n++]=u,t[n++]=o,t[n]=i)}function d(t,e,n,r,i){"bige"===i?(h(t,e,r,i),h(t,n,r+4,i)):(h(t,n,r,i),h(t,e,r+4,i))}"function"==typeof Float32Array&&function(){var t=new Float32Array(1),e=new Uint8Array(t.buffer);t[0]=-1,c=0===e[3],n=function(n,r){return(r=r||0)<0||r+4>n.length?0:(e[0]=n[r++],e[1]=n[r++],e[2]=n[r++],e[3]=n[r],t[0])},i=function(n,r){return(r=r||0)<0||r+4>n.length?0:(e[3]=n[r++],e[2]=n[r++],e[1]=n[r++],e[0]=n[r],t[0])},r=function(n,r,i){i=i||0,t[0]=r,n[i++]=e[0],n[i++]=e[1],n[i++]=e[2],n[i]=e[3]},o=function(n,r,i){i=i||0,t[0]=r,n[i++]=e[3],n[i++]=e[2],n[i++]=e[1],n[i]=e[0]}}(),"function"==typeof Float64Array&&function(){var t=new Float64Array(1),e=new Uint8Array(t.buffer);u=function(n,r){return(r=r||0)<0||r+8>n.length?0:(e[0]=n[r+0],e[1]=n[r+1],e[2]=n[r+2],e[3]=n[r+3],e[4]=n[r+4],e[5]=n[r+5],e[6]=n[r+6],e[7]=n[r+7],t[0])},s=function(n,r){return(r=r||0)<0||r+8>n.length?0:(e[7]=n[r+0],e[6]=n[r+1],e[5]=n[r+2],e[4]=n[r+3],e[3]=n[r+4],e[2]=n[r+5],e[1]=n[r+6],e[0]=n[r+7],t[0])},a=function(n,r,i){i=i||0,t[0]=r,n[i+0]=e[0],n[i+1]=e[1],n[i+2]=e[2],n[i+3]=e[3],n[i+4]=e[4],n[i+5]=e[5],n[i+6]=e[6],n[i+7]=e[7]},f=function(n,r,i){i=i||0,t[0]=r,n[i+0]=e[7],n[i+1]=e[6],n[i+2]=e[5],n[i+3]=e[4],n[i+4]=e[3],n[i+5]=e[2],n[i+6]=e[1],n[i+7]=e[0]}}();for(var p=new Array,y=0;y<1200;y++)p[y]=Math.pow(2,y);var g=new Array;for(y=0;y<1200;y++)g[y]=Math.pow(2,-y);function m(t){return t>=0?p[t]:g[-t]}var v=4294967296,b=2.220446049250313e-16;m(-1023);function w(t,e,n){var r,i,o=l(t,e,n),u=l(t,e+4,n);"bige"===n?(r=o,i=u):(r=u,i=o);var a=(1048575&r)*v+i,s=(2146435072&r)>>>20;return(r>>31||1)*(0===s?a?a*m(-1074):0:s<2047?a>=0?(1+a*b)*m(s-1023):0:a?NaN:1/0)}var _=Math.pow(2,-23),E=Math.pow(2,-127);function A(t,e,n){var r=l(t,e,n),i=8388607&r,o=(2139095040&r)>>>23;return(r>>31||1)*(0===o?i?i*_*2*E:0:o<255?(1+i*_)*m(o-127):i?NaN:1/0)}var B={exp:0,mant:0};function C(t){var e=0;return t>=2?(t*=m(-(e=x(1,t))))>=2&&(t/=2,e+=1):t<1&&((e=x(t,2))<=1023?t*=m(e):(t*=m(e-100),t*=m(100)),e=-e),B.exp=e,B.mant=t,B}var k=Math.pow(2,192);function x(t,e){for(var n=0;t*k<e;)t*=k,n+=192;for(;0x10000000000000000*t<e;)t*=0x10000000000000000,n+=64;for(;65536*t<e;)t*=65536,n+=16;for(;64*t<e;)t*=64,n+=6;for(;2*t<e;)t*=2,n+=1;return n}function F(t,e){return(t*=e)-Math.floor(t)!=.5||1&t?t+.5:t}function S(t,e,n,r){var i,o=0;e<0&&(o=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=127,i.exp<=0?i.exp<=-25?(i.mant=0,i.exp=0):(i.mant=F(i.mant,m(22+i.exp)),i.exp=0,i.mant>=8388608&&(i.mant-=8388608,i.exp+=1)):(i.mant=F(i.mant-1,8388608),i.mant>=8388608&&(i.mant-=8388608,i.exp+=1),i.exp>254&&(i.mant=0,i.exp=255)),h(t,o|i.exp<<23|i.mant,n,r)):h(t,0===e?1/e<0?2147483648:0:e===1/0?2139095040|o:2143289344,n,r)}new e(8);var D=Math.pow(2,52);function T(t,e,n,r){var i,o,u,a=0;e<0&&(a=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=1023,i.exp<=0?(i.mant*=m(51+i.exp),i.exp=0):i.mant=(i.mant-1)*D,d(t,o=a|i.exp<<20|i.mant/4294967296,u=i.mant>>>0,n,r)):(0===e?(o=1/e<0?2147483648:0,u=0):e===1/0?(o=a+2146435072,u=0):(o=2146959360,u=0),d(t,o,u,n,r))}(function e(){var p=t.exports||this;p.readWord=l,p.writeWord=h,p.writeDoubleWord=d,p.readFloat=A,p.writeFloat=S,p.readDouble=w,p.writeDouble=T,p._useFloatArray=function(t){p._usingFloatArray=t,t?("full"==t&&(p.readFloatLE=c?i:n),p.writeFloatLE=c?o:r,"full"==t&&(p.readFloatBE=c?n:i),p.writeFloatBE=c?r:o,p.readDoubleLE=c?s:u,p.writeDoubleLE=c?f:a,p.readDoubleBE=c?u:s,p.writeDoubleBE=c?a:f):(p._usingFloatArray="",p.readFloatLE=function(t,e){return p.readFloat(t,e||0,"le")},p.writeFloatLE=function(t,e,n){p.writeFloat(t,e,n||0,"le")},p.readFloatBE=function(t,e){return p.readFloat(t,e||0,"bige")},p.writeFloatBE=function(t,e,n){p.writeFloat(t,e,n||0,"bige")},p.readDoubleLE=function(t,e){return p.readDouble(t,e||0,"le")},p.writeDoubleLE=function(t,e,n){p.writeDouble(t,e,n||0,"le")},p.readDoubleBE=function(t,e){return p.readDouble(t,e||0,"bige")},p.writeDoubleBE=function(t,e,n){p.writeDouble(t,e,n||0,"bige")})},p._getBigeCpu=function(){return c},p._setBigeCpu=function(t){c=t},p._useFloatArray(!1),p._useFloatArray(n&&u&&"fastest"),e.prototype=p}).call(this)}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(22),o=n(221);t.exports={create:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.config,i=[];n.sort||(n.sort={});for(var s in t){var f=t[s],c=f.base,l=f.fields,h=void 0===f?"undefined":r(f);if("object"===h){if(!c&&!l){i.push("Expecting "+s+".fields or "+s+".base");continue}if(c&&"string"!=typeof c&&i.push("Expecting string "+s+".base"),l)if("object"!==(void 0===l?"undefined":r(l)))i.push("Expecting object "+s+".fields");else for(var d in l)"string"!=typeof l[d]&&i.push("Expecting string in "+s+".fields."+d)}else if("string"!==h){i.push("Expecting object or string under "+s+", instead got "+(void 0===f?"undefined":r(f)));continue}}var p={};for(var y in t){var g=t[y];"object"===(void 0===g?"undefined":r(g))&&(p[y]=o(y,n))}for(var m in t){var v=t[m];if("string"==typeof v){var b=e[v];if(b)e[m]=b;else{var w=C(m,v);w?p[m]=w:i.push("Unrecognized type or struct "+m+"."+v)}}}for(var _ in t){var E=p[_];if(E){var A=t[_];if("object"===(void 0===A?"undefined":r(A))&&A.base){var c=A.base,B=p[c];if(!B){i.push("Missing "+c+" in "+_+".base");continue}E.add("",a(B))}}}function C(t,r,o,a){var s=u(r);if(!s)return null;var f=s.name,c=s.annotation,l=s.arrayType,h=void 0;if(c){var d=e[f];if(null==d)return i.push("Missing "+f+" in "+r),null;var y=[],g=!0,m=!1,v=void 0;try{for(var b,w=c[Symbol.iterator]();!(g=(b=w.next()).done);g=!0){var _=b.value,E=C(t,_,null,a);if(!E)return i.push("Missing "+_+" in "+r),null;y.push(E)}}catch(t){m=!0,v=t}finally{try{!g&&w.return&&w.return()}finally{if(m)throw v}}h=d(y)}else if(null==l){var A=p[f];if(A)return A;var B=e[f];if(!B)return null;h=B(o)}else if(""===l){var k=C(t,s.name,null,a);if(!k)return null;var x=n.sort[t+"."+a]||!1;h=e.vector(k,x)}else if(l.length>0){var F=C(t,s.arrayType,null,a);if(!F)return i.push("Missing "+s.arrayType+" in "+r),null;var S=C(t,s.name,F,a);if(!S)return i.push("Missing "+s.name+" in "+r),null;h=S}return s.optional?e.optional(h):h}for(var k in t){var x=p[k];if(x){var F=t[k];if(F.fields){var l=F.fields;for(var S in l){var D=l[S],T=C(k,D,null,S);T?x.add(S,T):i.push("Missing "+D+" in "+k+".fields."+S)}}}}if(i.length)return{errors:i};return{errors:i,structs:p}},toBuffer:function(t,n){var r=t.fromObject(n);return e.from(function(t,e){var n=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);return t.appendByteBuffer(n,e),n.copy(0,n.offset)}(t,r).toBinary(),"binary")},fromBuffer:function(t,e){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=i.fromBinary(e.toString("binary"),i.LITTLE_ENDIAN),o=t.fromByteBuffer(r);return n?t.toObject(o):o}};var u=function(t){if(!t||"string"!=typeof t)return null;var e=(t=t.trim()).match(/<(.*)>/);if(e){var n=e?e[1].replace(/ /g,"").split(","):null;return{name:t=t.replace(e[0],"").trim(),annotation:n}}var r=t.match(/\[(.*)\]/),i=r?r[1].trim():null;r&&(t=t.replace(r[0],"").trim());var o=!1;return/\?$/.test(t)&&(t=t.substring(0,t.length-1),o=!0),{name:t,arrayType:i,optional:o}},a=function(t){return{fromByteBuffer:function(e){return t.fromByteBuffer(e)},appendByteBuffer:function(e,n){t.appendByteBuffer(e,n)},fromObject:function(e){return t.fromObject(e)},toObject:function(e){return t.toObject(e)}}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(22);t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{debug:!1};e=Object.assign({override:{}},e);var n={},i=void 0,o=void 0;return{compare:function(t,e){var n=t[o],r=e[o];return i&&i.compare?i.compare(n,r):n>r?1:n<r?-1:0},add:function(t,e){n[t]=e,null==i&&(i=e,o=t)},fields:n,fromByteBuffer:function(r){var i={},o=null;try{for(o in n){var u=n[o];try{var a=r.offset;if(""===o)i=u.fromByteBuffer(r,e);else{var s=e.override[t+"."+o+".fromByteBuffer"];s?s({fields:n,object:i,b:r,config:e}):i[o]=u.fromByteBuffer(r,e)}if(e.debug)if(u.struct)console.error(u.struct);else{var f=void 0;try{f=u.toObject(""===o?i:i[o],e)}catch(t){f=""}var c=r.copy(a,r.offset);console.error("fromByteBuffer",t+"."+o,"'"+f+"'",c.toHex())}}catch(e){throw console.error(e+" in "+t+"."+o),r.printDebug(),e}}}catch(e){throw e.message+=" in "+t+"."+o,e}return i},appendByteBuffer:function(r,i){var o=null;try{for(o in n){var u=n[o];if(""===o)u.appendByteBuffer(r,i);else{var a=e.override[t+"."+o+".appendByteBuffer"];a?a({fields:n,object:i,b:r}):u.appendByteBuffer(r,i[o])}}}catch(e){try{e.message+=" "+t+"."+o+" = "+JSON.stringify(i[o])}catch(n){e.message+=" "+t+"."+o+" = "+i[o]}throw e}},fromObject:function(r){var i=e.override[t+".fromObject"];if(i){var o=i(r);if(null!=o)return o}var u={},a=null;try{for(a in n){var s=n[a];if(""===a){var f=s.fromObject(r);Object.assign(u,f)}else{var c=e.override[t+"."+a+".fromObject"];if(c)c({fields:n,object:r,result:u});else{var l=r[a],h=s.fromObject(l);u[a]=h}}}}catch(e){throw e.message+=" "+t+"."+a,e}return u},toObject:function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.override[t+".toObject"];if(o){var u=o(i);if(null!=u)return u}var a={},s=null;try{for(s in n){var f=n[s],c=e.override[t+"."+s+".toObject"];if(c)c({fields:n,object:i,result:a,config:e});else if(""===s){var l=f.toObject(i,e);Object.assign(a,l)}else{var h=f.toObject(i?i[s]:null,e);a[s]=h}if(e.debug)try{var d=new r(r.DEFAULT_CAPACITY,r.LITTLE_ENDIAN);if(null!=i){var p=i[s];if(p){var y=e.override[t+"."+s+".appendByteBuffer"];c&&y?y({fields:n,object:i,b:d}):f.appendByteBuffer(d,p)}}d=d.copy(0,d.offset),console.error("toObject",t+"."+s,"'"+a[s]+"'",d.toHex())}catch(e){e.message=t+"."+s+" "+e.message,console.error(e)}}}catch(e){throw e.message+=" "+t+"."+s,e}return a}}}},function(t,e,n){"use strict";t.exports={chain:n(223),history:n(224)}},function(t){t.exports={get_info:{brief:"Return general network information.",params:null,results:"string"},get_account:{brief:"Fetch a blockchain account",params:{account_name:"name"},results:"string"},get_code:{brief:"Fetch smart contract code",params:{account_name:"name",code_as_wasm:{type:"bool",default:!1}},results:{account_name:"name",wast:"string",wasm:"string",code_hash:"sha256",abi:"optional<abi_def>"}},get_code_hash:{brief:"",params:{account_name:"name"},results:{account_name:"name",code_hash:"sha256"}},get_abi:{params:{account_name:"name"},results:{account_name:"name",abi:"abi_def?"}},get_raw_code_and_abi:{params:{account_name:"name"},results:{account_name:"name",wasm:"bytes",abi:"abi_def?"}},abi_json_to_bin:{brief:"Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",params:{code:"name",action:"name",args:"bytes"},results:{binargs:"bytes"}},abi_bin_to_json:{brief:"Convert bin hex back into Abi json definition.",params:{code:"name",action:"name",binargs:"bytes"},results:{args:"bytes"}},get_required_keys:{params:{transaction:"transaction",available_keys:"set[public_key]"},results:"Set[public_key]"},get_block:{brief:"Fetch a block from the blockchain.",params:{block_num_or_id:"string"},results:"variant",errors:{"unknown block":null}},get_block_header_state:{brief:"Fetch the minimum state necessary to validate transaction headers.",params:{block_num_or_id:"string"},results:"string",errors:{block_id_type_exception:"Invalid block ID",unknown_block_exception:"Could not find reversible block"}},get_table_rows:{brief:"Fetch smart contract data from an account.",params:{json:{type:"bool",default:!1},code:"name",scope:"string",table:"name",table_key:"string",lower_bound:{type:"string",default:"0"},upper_bound:{type:"string",default:"-1"},limit:{type:"uint32",default:"10"},key_type:{type:"string",doc:"The key type of --index, primary only supports (i64), all others support (i64, i128, i256, float64, float128). Special type 'name' indicates an account name."},index_position:{type:"string",doc:"1 - primary (first), 2 - secondary index (in order defined by multi_index), 3 - third index, etc"}},results:{rows:{type:"vector",doc:"One row per item, either encoded as hex String or JSON object"},more:{type:"bool",doc:"True if last element in data is not the end and sizeof data() < limit"}}},get_currency_balance:{params:{code:"name",account:"name",symbol:"optional<string>"},results:"asset[]"},get_currency_stats:{params:{code:"name",symbol:"string"},results:{supply:"asset",max_supply:"asset",issuer:"account_name"}},get_producers:{brief:"Fetch smart contract data from producer.",params:{json:{type:"bool",default:!1},lower_bound:"string",limit:{type:"uint32",default:"50"}},results:{rows:{type:"vector",doc:"one row per item, either encoded as hex String or JSON object"},total_producer_vote_weight:{type:"double",doc:"total vote"},more:{type:"string",doc:"fill lower_bound with this value to fetch more rows"}}},get_producer_schedule:{brief:"",params:{},results:{vector:"proposed"}},get_scheduled_transactions:{brief:"",params:{json:{type:"bool",default:!1},lower_bound:{type:"string",doc:"timestamp OR transaction ID"},limit:{type:"uint32",default:"50"}},results:{vector:"transactions",more:{type:"string",doc:"fill lower_bound with this to fetch next set of transactions"}}},push_block:{brief:"Append a block to the chain database.",params:{block:"signed_block"},results:null},push_transaction:{brief:"Attempts to push the transaction into the pending queue.",params:{signed_transaction:"signed_transaction"},results:{transaction_id:"fixed_bytes32",processed:"bytes"}},push_transactions:{brief:"Attempts to push transactions into the pending queue.",params:{"signed_transaction[]":"signed_transaction"},results:"vector[push_transaction.results]"}}},function(t){t.exports={get_actions:{params:{account_name:"account_name",pos:{type:"int32?",doc:"An absolute sequence positon -1 is the end/last action"},offset:{type:"int32?",doc:"The number of actions relative to pos, negative numbers return [pos-offset,pos), positive numbers return [pos,pos+offset)"}},results:{actions:"ordered_action_result[]",last_irreversible_block:"uint32",time_limit_exceeded_error:"bool?"},structs:[{name:"ordered_action_result",fields:{global_action_seq:"uint64",account_action_seq:"int32",block_num:"uint32",block_time:"block_timestamp_type",action_trace:"variant"}}]},get_transaction:{brief:"Retrieve a transaction from the blockchain.",params:{id:"transaction_id_type",block_num_hint:{type:"uint32?",default:0,doc:"A non-zero block number allows shorter transaction IDs (8 hex, 4 bytes)"}},results:{id:"transaction_id_type",trx:"variant",block_time:"block_timestamp_type",block_num:"uint32",last_irreversible_block:"uint32",traces:"variant[]"}},get_key_accounts:{params:{public_key:"public_key_type"},results:{account_names:"account_name[]"}},get_controlled_accounts:{params:{controlling_account:"account_name"},results:{controlled_accounts:"account_name[]"}}}},function(t,e,n){"use strict";n(226);var r=n(228),i=n(235),o=n(124);function u(t,e,n,r){var i=r.logger;return function(){for(var u=arguments.length,a=Array(u),s=0;s<u;s++)a[s]=arguments[s];if(0!==a.length){var f=o(a,Object.keys(n.params||[]),t,function(t){if("boolean"==typeof t)return{broadcast:t}}),c=f.params,l=(f.options,f.returnPromise),h=f.callback,d=JSON.stringify(c);i.log&&i.log("api >","post","\t",e,d);var p={body:d,method:"POST"};return Object.assign(p,r.fetchConfiguration),fetch(e,p).then(function(t){return t.status>=200&&t.status<300?t.json():t.text().then(function(e){var n=new Error(e);throw n.status=t.status,n.statusText=t.statusText,n})}).then(function(t){i.log&&i.log("api <","response","\t",e,JSON.stringify(t));try{h(null,t)}catch(t){i.error&&i.error("api <","result callback",":",t)}}).catch(function(t){var n="";try{n=JSON.parse(t.message).error.details[0]}catch(t){}i.error&&(i.error("api <","error","\t",n,e,d),i.error(t));try{h(t)}catch(t){i.error&&i.error("api <","error callback",":",t)}}),l}console.log(function(t,e){var n="",r=function(t){n+=t+"\n"};r("USAGE"),r(t+" - "+e.brief),r("\nPARAMETERS"),e.params?r(JSON.stringify(e.params,null,2)):r("none");r("\nRETURNS"),e.results?r(""+JSON.stringify(e.results,null,2)):r("no data");if(r("\nERRORS"),e.errors)for(var i in e.errors){var o=e.errors[i];r(i+(o?" - "+o:""))}else r("nothing special");return n}(t,n))}}t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={httpEndpoint:"http://127.0.0.1:8888",verbose:!1,logger:{log:function(){var t;return n.verbose?(t=console).log.apply(t,arguments):null},error:function(){var t;return n.verbose?(t=console).error.apply(t,arguments):null}}};function a(t,e){Object.keys(e).forEach(function(n){void 0===t[n]&&(t[n]=e[n])})}a(n,o),a(n.logger,o.logger);var s={},f=n.httpEndpoint;for(var c in e)for(var l in e[c]){var h=r(l),d=f+"/"+t+"/"+c+"/"+l;s[h]=u(h,d,e[c][l],n)}var p=function(t){s[t]=function(){for(var e,n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=i.api)[t].apply(e,[s].concat(r))}};for(var y in i.api)p(y);return s}},function(t,e,n){n(227),t.exports=self.fetch.bind(self)},function(t,e,n){"use strict";n.r(e),n.d(e,"Headers",function(){return f}),n.d(e,"Request",function(){return g}),n.d(e,"Response",function(){return v}),n.d(e,"DOMException",function(){return w}),n.d(e,"fetch",function(){return _});var r={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(r.arrayBuffer)var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],o=ArrayBuffer.isView||function(t){return t&&i.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function a(t){return"string"!=typeof t&&(t=String(t)),t}function s(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r.iterable&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function c(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function l(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function h(t){var e=new FileReader,n=l(e);return e.readAsArrayBuffer(t),n}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function p(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:r.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:r.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():r.arrayBuffer&&r.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||o(t))?this._bodyArrayBuffer=d(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?c(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=l(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=u(t),e=a(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},f.prototype.delete=function(t){delete this.map[u(t)]},f.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},f.prototype.set=function(t,e){this.map[u(t)]=a(e)},f.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},f.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),s(t)},f.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),s(t)},f.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),s(t)},r.iterable&&(f.prototype[Symbol.iterator]=f.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(t,e){var n=(e=e||{}).body;if(t instanceof g){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=function(t){var e=t.toUpperCase();return y.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function m(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function v(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},p.call(g.prototype),p.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];v.redirect=function(t,e){if(-1===b.indexOf(e))throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function _(t,e){return new Promise(function(n,i){var o=new g(t,e);if(o.signal&&o.signal.aborted)return i(new w("Aborted","AbortError"));var u=new XMLHttpRequest;function a(){u.abort()}u.onload=function(){var t={status:u.status,statusText:u.statusText,headers:function(t){var e=new f;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(u.getAllResponseHeaders()||"")};t.url="responseURL"in u?u.responseURL:t.headers.get("X-Request-URL");var e="response"in u?u.response:u.responseText;n(new v(e,t))},u.onerror=function(){i(new TypeError("Network request failed"))},u.ontimeout=function(){i(new TypeError("Network request failed"))},u.onabort=function(){i(new w("Aborted","AbortError"))},u.open(o.method,o.url,!0),"include"===o.credentials?u.withCredentials=!0:"omit"===o.credentials&&(u.withCredentials=!1),"responseType"in u&&r.blob&&(u.responseType="blob"),o.headers.forEach(function(t,e){u.setRequestHeader(e,t)}),o.signal&&(o.signal.addEventListener("abort",a),u.onreadystatechange=function(){4===u.readyState&&o.signal.removeEventListener("abort",a)}),u.send(void 0===o._bodyInit?null:o._bodyInit)})}_.polyfill=!0,self.fetch||(self.fetch=_,self.Headers=f,self.Request=g,self.Response=v)},function(t,e,n){var r=n(229),i=n(230);t.exports=function(t,e,n){var o=i(t,e);return n||(o=o.replace(/ (?=\d)/g,"_")),o.replace(/ (.)/g,function(t,n){return r(n,e)})}},function(t,e){var n={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{"i̇":"I","j̇":"J","į̇":"Į","i̇̀":"Ì","i̇́":"Í","i̇̃":"Ĩ"}}};t.exports=function(t,e){var r=n[e];return t=null==t?"":String(t),r&&(t=t.replace(r.regexp,function(t){return r.map[t]})),t.toUpperCase()}},function(t,e,n){var r=n(231),i=n(232),o=n(233),u=n(234);t.exports=function(t,e,n){if(null==t)return"";return n="string"!=typeof n?" ":n,t=String(t).replace(o,"$1 $2").replace(u,"$1 $2").replace(i,function(t,e,r){return 0===e||e===r.length-t.length?"":n}),r(t,e)}},function(t,e){var n={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"İ":"i",I:"ı","İ":"i"}},az:{regexp:/[\u0130]/g,map:{"İ":"i",I:"ı","İ":"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇","Į":"į̇","Ì":"i̇̀","Í":"i̇́","Ĩ":"i̇̃"}}};t.exports=function(t,e){var r=n[e];return t=null==t?"":String(t),r&&(t=t.replace(r.regexp,function(t){return r.map[t]})),t.toLowerCase()}},function(t,e){t.exports=/[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g},function(t,e){t.exports=/([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g},function(t,e){t.exports=/([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g},function(t,e,n){"use strict";t.exports={api:{createTransaction:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:60,n=arguments[2];if(!n)throw new TypeError("callback parameter is required");t.getInfo(r(n,function(i){var o=new Date(i.head_block_time+"Z");t.getBlock(i.last_irreversible_block_num,r(n,function(t){var r=new Date(o.getTime()+1e3*e),u=65535&i.last_irreversible_block_num,a={expiration:r.toISOString().split(".")[0],ref_block_num:u,ref_block_prefix:t.ref_block_prefix,max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]};n(null,a)}))}))}}};var r=function(t,e){return function(n,r){n?t(n):e(r)}}},function(t,e,n){t.exports={default:n(237),__esModule:!0}},function(t,e,n){n(61),n(51),t.exports=n(238)},function(t,e,n){var r=n(125),i=n(9)("iterator"),o=n(31);t.exports=n(13).isIterable=function(t){var e=Object(t);return void 0!==e[i]||"@@iterator"in e||o.hasOwnProperty(r(e))}},function(t,e,n){t.exports={default:n(240),__esModule:!0}},function(t,e,n){n(61),n(51),t.exports=n(241)},function(t,e,n){var r=n(29),i=n(242);t.exports=n(13).getIterator=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return r(e.call(t))}},function(t,e,n){var r=n(125),i=n(9)("iterator"),o=n(31);t.exports=n(13).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t){t.exports={name:"uint64",checksum160:"fixed_bytes20",checksum256:"fixed_bytes32",checksum512:"fixed_bytes64",signature:"fixed_bytes65",public_key:"fixed_bytes33",message_type:"fixed_string16",symbol:"uint64",symbol_code:"uint64",field_name:"string",account_name:"name",permission_name:"name",type_name:"string",token_name:"name",table_name:"name",scope_name:"name",action_name:"name",time_point:"int64",time_point_sec:"time",timestamp:"uint32",block_timestamp_type:"timestamp",block_id:"fixed_bytes32",checksum_type:"fixed_bytes32",checksum256_type:"fixed_bytes32",checksum512_type:"fixed_bytes64",checksum160_type:"fixed_bytes20",sha256:"fixed_bytes32",sha512:"fixed_bytes64",sha160:"fixed_bytes20",weight_type:"uint16",block_num_type:"uint32",share_type:"int64",digest_type:"checksum_type",context_free_type:"bytes",unsigned_int:"varuint32",bool:"uint8",extensions_type:{base:"",fields:{type:"uint16",data:"bytes"}},transaction_header:{base:"",fields:{expiration:"time",ref_block_num:"uint16",ref_block_prefix:"uint32",max_net_usage_words:"unsigned_int",max_cpu_usage_ms:"uint8",delay_sec:"unsigned_int"}},transaction:{base:"transaction_header",fields:{context_free_actions:"action[]",actions:"action[]",transaction_extensions:"extensions_type[]"}},signed_transaction:{base:"transaction",fields:{signatures:"signature[]",context_free_data:"bytes[]"}},fields:"field_def[]",field_def:{fields:{name:"field_name",type:"type_name"}},asset:{fields:{amount:"share_type",sym:"symbol"}},producer_key:{fields:{producer_name:"account_name",block_signing_key:"public_key"}},producer_schedule:{fields:{version:"uint32",producers:"producer_key[]"}},chain_config:{fields:{target_block_size:"uint32",max_block_size:"uint32",target_block_acts_per_scope:"uint32",max_block_acts_per_scope:"uint32",target_block_acts:"uint32",max_block_acts:"uint32",real_threads:"uint64",max_storage_size:"uint64",max_transaction_lifetime:"uint32",max_authority_depth:"uint16",max_transaction_exec_time:"uint32",max_inline_depth:"uint16",max_inline_action_size:"uint32",max_generated_transaction_size:"uint32"}},type_def:{base:"",fields:{new_type_name:"type_name",type:"type_name"}},struct_def:{base:"",fields:{name:"type_name",base:"type_name",fields:"field_def[]"}},clause_pair:{base:"",fields:{id:"string",body:"string"}},error_message:{base:"",fields:{error_code:"uint64",error_msg:"string"}},abi_def:{base:"",fields:{version:"string",types:"type_def[]",structs:"struct_def[]",actions:"action_def[]",tables:"table_def[]",ricardian_clauses:"clause_pair[]",error_messages:"error_message[]",abi_extensions:"extensions_type[]"}},table_def:{base:"",fields:{name:"table_name",index_type:"type_name",key_names:"field_name[]",key_types:"type_name[]",type:"type_name"}},permission_level:{base:"",fields:{actor:"account_name",permission:"permission_name"}},action:{base:"",fields:{account:"account_name",name:"action_name",authorization:"permission_level[]",data:"bytes"}},action_def:{base:"",fields:{name:"action_name",type:"type_name",ricardian_contract:"string"}},block_header:{base:"",fields:{previous:"checksum256",timestamp:"timestamp",transaction_mroot:"checksum256",action_mroot:"checksum256",block_mroot:"checksum256",producer:"account_name",schedule_version:"uint32",new_producers:"producer_schedule?"}},packed_transaction:{fields:{signatures:"signature[]",compression:"uint8",packed_context_free_data:"bytes",packed_trx:"bytes"}}}},function(t,e,n){"use strict";(function(e){var r=function(t){return t&&t.__esModule?t:{default:t}}(n(28));var i=n(3),o=n(72);t.exports=function(t,n){n.abiCache={abiAsync:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(i.equal(void 0===e?"undefined":(0,r.default)(e),"string","account string required"),0==n&&null!=a[e])return Promise.resolve(a[e]);if(null==t){var o=a[e];return i(o,"Missing ABI for account: "+e+", provide httpEndpoint or add to abiCache"),Promise.resolve(o)}return t.getAbi(e).then(function(t){return i(t.abi,"Missing ABI for account: "+e),s(e,t.abi)})},abi:s};var u=Object.assign({},{defaults:!0},n),a={};function s(t,n){if(i.equal(void 0===t?"undefined":(0,r.default)(t),"string","account string required"),n){i.equal(void 0===n?"undefined":(0,r.default)(n),"object","abi"),e.isBuffer(n)&&(n=JSON.parse(n));var s=function(t,e){var n={};t.types&&t.types.forEach(function(t){n[t.new_type_name]=t.type});t.structs&&t.structs.forEach(function(t){var e={},r=!0,i=!1,o=void 0;try{for(var u,a=t.fields[Symbol.iterator]();!(r=(u=a.next()).done);r=!0){var s=u.value;e[s.name]=s.type}}catch(t){i=!0,o=t}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}n[t.name]={base:t.base,fields:e},""===t.base&&delete n[t.name].base});t.actions&&t.actions.forEach(function(t){var r=n[t.type];r?r.action={name:t.name,account:e}:console.error("Missing abiSchema type",t.type,e)});return n}(n,t),f=o(u,s);return a[t]=Object.assign({abi:n,schema:s},f)}var c=a[t];if(null==c)throw new Error("Abi '"+t+"' is not cached");return c}return n.abiCache}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=u(n(73)),i=u(n(88)),o=u(n(28));function u(t){return t&&t.__esModule?t:{default:t}}var a=n(3),s=n(39),f=n(71),c=n(46),l=n(123).processArgs;n(72);t.exports=function(t,n,u,m,v){if("string"!=typeof m.chainId)throw new TypeError("config.chainId is required");var b=function(t,n,u,m){var v=function(t,e){return function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var s,f,c,l,h,p,y,g,m,v,w,A,B,C,k,x,F,S,D,T,O;return i.default.async(function(t){for(;;)switch(t.prev=t.next){case 0:if(s=void 0,f=void 0,c=void 0,null==n[n.length-1]&&(n=n.slice(0,n.length-1)),!(l=d(n[0]))){t.next=8;break}s=n[0],n=n.slice(1),t.next=39;break;case 8:if("string"!=typeof n[0]){t.next=13;break}s=[n[0]],n=n.slice(1),t.next=39;break;case 13:if("object"!==(0,o.default)(n[0])||!Array.isArray(n[0].actions)){t.next=39;break}for(h=new Set,p=!0,y=!1,g=void 0,t.prev=18,m=n[0].actions[Symbol.iterator]();!(p=(v=m.next()).done);p=!0)w=v.value,h.add(w.account);t.next=26;break;case 22:t.prev=22,t.t0=t.catch(18),y=!0,g=t.t0;case 26:t.prev=26,t.prev=27,!p&&m.return&&m.return();case 29:if(t.prev=29,!y){t.next=32;break}throw g;case 32:return t.finish(29);case 33:return t.finish(26);case 34:return A=[],B=new Set(["eosio","eosio.token","eosio.null"]),h.forEach(function(t){B.has(t)||A.push(u.abiCache.abiAsync(t))}),t.next=39,i.default.awrap(Promise.all(A));case 39:if(n.length>1&&"function"==typeof n[n.length-1]&&(c=n.pop()),n.length>1&&"object"===(0,o.default)(n[n.length-1])&&(f=n.pop()),a.equal(n.length,1,"transaction args: contracts<string|array>, transaction<callback|object>, [options], [callback]"),C=n[0],!s){t.next=67;break}for(a(!c,"callback with contracts are not supported"),a.equal("function",void 0===C?"undefined":(0,o.default)(C),"provide function callback following contracts array parameter"),k=[],x=!0,F=!1,S=void 0,t.prev=50,D=s[Symbol.iterator]();!(x=(T=D.next()).done);x=!0)O=T.value,k.push(b(O,e.transaction));t.next=58;break;case 54:t.prev=54,t.t1=t.catch(50),F=!0,S=t.t1;case 58:t.prev=58,t.prev=59,!x&&D.return&&D.return();case 61:if(t.prev=61,!F){t.next=64;break}throw S;case 64:return t.finish(61);case 65:return t.finish(58);case 66:return t.abrupt("return",Promise.all(k).then(function(t){var e={};t.forEach(function(t,n){e[s[n]]=t});var n=l?e:e[s[0]];return _(C,f,n)}));case 67:if("function"!=typeof C){t.next=69;break}return t.abrupt("return",_(C,f,e));case 69:if("object"!==(void 0===C?"undefined":(0,o.default)(C))){t.next=71;break}return t.abrupt("return",E(C,f,c));case 71:throw new Error("first transaction argument unrecognized",C);case 72:case"end":return t.stop()}},null,this,[[18,22,26,34],[27,,29,33],[50,54,58,66],[59,,61,65]])}};function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return u.abiCache.abiAsync(t).then(function(n){a(Array.isArray(n.abi.actions)&&n.abi.actions.length,"No actions");var r={};return r.transaction=e||v(n.structs,r),n.abi.actions.forEach(function(e){var i=e.name,o=e.type,u=g(n.schema,o);r[i]=w(o,u,r.transaction,t,i)}),r.fc=n,r})}function w(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"eosio.token",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:t;return function(){for(var f=arguments.length,c=Array(f),h=0;h<f;h++)c[h]=arguments[h];if(0!==c.length){var d={},y=c[c.length-1];"object"===(void 0===y?"undefined":(0,o.default)(y))&&"object"===(0,o.default)(y.__optionOverrides)&&Object.assign(d,c.pop().__optionOverrides);var m=l(c,Object.keys(e),t,p),v=m.options,b=m.params,w=m.returnPromise,_=m.callback,E={broadcast:u.broadcast,sign:u.sign};if(v=Object.assign({},E,v,d),d.noCallback&&!w)throw new Error("Callback during a transaction are not supported");var A=[],B=v.authorization?v.authorization:u.authorization,C=null==B;if(B){var k=void 0;"string"==typeof B?k=[B]:Array.isArray(B)&&(k=B),k&&k.forEach(function(t){if("string"==typeof t){var e=t.split("@"),n=(0,r.default)(e,2),i=n[0],u=n[1],a=void 0===u?"active":u;""===i&&(i=S()),i&&A.push({actor:i,permission:a})}else"object"===(void 0===t?"undefined":(0,o.default)(t))&&A.push(t)}),a.equal(A.length,k.length,"invalid authorization in: "+JSON.stringify(B))}var x={actions:[{account:i,name:s,authorization:A,data:b}]};if(C){var F=S();F&&x.actions[0].authorization.push({actor:F,permission:"active"})}return x.actions[0].authorization.sort(function(t,e){return t.actor>e.actor?1:t.actor<e.actor?-1:0}),d.messageOnly?_(null,x):n(x,v,_),w}function S(){var t=Object.keys(e),n=t[0];if("account_name"===e[n])return b[n]}console.log(function(t,e,n,r,i){var o="",u=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";o+=t+"\n"};u("CONTRACT"),u(r),u(),u("ACTION"),u(t.name),u();var a=i.abiCache.abi(r);u("PARAMETERS"),u(JSON.stringify(g(a.schema,t.type),null,4)),u();var s=a.structs[t.type];return u("EXAMPLE"),u(r+"."+t.name+"("+JSON.stringify(s.toObject(),null,4)+")"),o}({name:s,type:t},0,0,i,u))}}function _(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];a.equal("function",void 0===t?"undefined":(0,o.default)(t),"trCallback"),a.equal("object",void 0===e?"undefined":(0,o.default)(e),"options"),a.equal("object",void 0===n?"undefined":(0,o.default)(n),"merges"),a(!Array.isArray(n),"merges should not be an array"),a.equal("function",(0,o.default)(E),"transaction");var i=[],u={},s=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=t.apply(void 0,n.concat([{__optionOverrides:{broadcast:!1,messageOnly:!0,noCallback:!0}}]));if(null==o)throw new Error("Callbacks can not be used when creating a multi-action transaction");i.push(o)}};for(var f in n){var c=n[f],l=f.replace(/\./,"_");if("function"==typeof c)u[l]=s(c);else if("object"===(void 0===c?"undefined":(0,o.default)(c)))for(var h in null==u[l]&&(u[l]={}),c)"transaction"!==h&&(u[l][h]=s(c[h]))}var d=void 0;try{d=t(u)}catch(t){d=Promise.reject(t)}return Promise.resolve(d).then(function(){return Promise.all(i).then(function(t){var n=[],i=!0,o=!1,u=void 0;try{for(var a,s=t[Symbol.iterator]();!(i=(a=s.next()).done);i=!0){var f=a.value,c=(0,r.default)(f.actions,1),l=c[0];n.push(l)}}catch(t){o=!0,u=t}finally{try{!i&&s.return&&s.return()}finally{if(o)throw u}}var h={};return h.actions=n,E(h,e)})})}function E(t,r,l){var d,p,g,v,b,w,_,E,A,B,C,k,x,F,S,D;return i.default.async(function(T){for(;;)switch(T.prev=T.next){case 0:if(d=u.expireInSeconds?u.expireInSeconds:60,p={expireInSeconds:d,broadcast:!0,sign:!0},r=Object.assign({},p,r),g=void 0,"function"!=typeof l&&(g=new Promise(function(t,e){l=function(n,r){n?e(n):t(r)}})),"object"===(void 0===t?"undefined":(0,o.default)(t))){T.next=7;break}throw new TypeError("First transaction argument should be an object or function");case 7:if(Array.isArray(t.actions)){T.next=9;break}throw new TypeError("Expecting actions array");case 9:if((u.logger.log||u.logger.error)&&(v=l,l=function(t,e){t&&u.logger.error&&u.logger.error(t),u.logger.log&&u.logger.log(JSON.stringify(e)),v(t,e)}),t.actions.forEach(function(t){if(!Array.isArray(t.authorization))throw new TypeError("Expecting action.authorization array",t)}),!r.sign||"function"==typeof u.signProvider){T.next=13;break}throw new TypeError("Expecting config.signProvider function (disable using {sign: false})");case 13:if(b={max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]},!u.transactionHeaders){T.next=25;break}if("object"!==(0,o.default)(u.transactionHeaders)){T.next=19;break}Object.assign(b,u.transactionHeaders),T.next=25;break;case 19:if("function"!=typeof u.transactionHeaders){T.next=24;break}return T.next=22,i.default.awrap(u.transactionHeaders(r.expireInSeconds,y(l,u.logger,function(t){return i.default.async(function(e){for(;;)switch(e.prev=e.next){case 0:a.equal(void 0===t?"undefined":(0,o.default)(t),"object","expecting transaction header object"),Object.assign(b,t);case 2:case"end":return e.stop()}},null,this)})));case 22:T.next=25;break;case 24:a(!1,"config.transactionHeaders should be an object or function");case 25:for(w=["expiration","ref_block_num","ref_block_prefix","delay_sec","max_net_usage_words","max_cpu_usage_ms"],_=0;_<w.length;_++)E=w[_],void 0!==t[E]?b[E]=t[E]:void 0!==r[E]&&(b[E]=r[E]);if(void 0!==b.expiration&&void 0!==b.ref_block_num&&void 0!==b.ref_block_prefix){T.next=31;break}return a(n,"Network is required, provide httpEndpoint or own transaction headers"),T.next=31,i.default.awrap(new Promise(function(t){n.createTransaction(r.expireInSeconds,y(l,u.logger,function(e){var n,r,o;return i.default.async(function(i){for(;;)switch(i.prev=i.next){case 0:for(n=["expiration","ref_block_num","ref_block_prefix"],r=0;r<n.length;r++)o=n[r],void 0===b[o]&&(b[o]=e[o]);t();case 3:case"end":return i.stop()}},null,this)}))}));case 31:return a.equal((0,o.default)(b.expiration),"string","expecting expiration: iso date time string"),a.equal((0,o.default)(b.ref_block_num),"number","expecting ref_block_num number"),a.equal((0,o.default)(b.ref_block_prefix),"number","expecting ref_block_prefix number"),b.context_free_actions=t.context_free_actions,b.actions=t.actions,b.transaction_extensions=t.transaction_extensions,A=m.fromObject(b),B=f.toBuffer(m,A),C=m.toObject(A),k=c("sha256").update(B).digest().toString("hex"),x=[],r.sign&&(F=e.from(u.chainId,"hex"),S=e.from(new Uint8Array(32)),D=e.concat([F,B,S]),x=u.signProvider({transaction:C,buf:D,sign:h,optionsKeyProvider:r.keyProvider}),Array.isArray(x)||(x=[x])),Promise.all(x).then(function(t){t=[].concat.apply([],t);for(var e=0;e<t.length;e++){var i=t[e];"string"==typeof i&&130===i.length&&(t[e]=s.Signature.from(i).toString())}var o={compression:"none",transaction:C,signatures:t},f=u.mockTransactions?u.mockTransactions():null;if(null==f)r.broadcast&&n?n.pushTransaction(o,function(t,e){t?(u.logger.error&&u.logger.error("[push_transaction error] '"+t.message+"', transaction '"+B.toString("hex")+"'"),l(t.message)):l(null,Object.assign({broadcast:!0,transaction:o,transaction_id:k},e))}):l(null,{transaction_id:k,broadcast:!1,transaction:o});else if(a(/pass|fail/.test(f),"mockTransactions should return a string: pass or fail"),"pass"===f&&l(null,{transaction_id:k,mockTransaction:!0,broadcast:!1,transaction:o}),"fail"===f){var c="[push_transaction mock error] 'fake error', digest '"+B.toString("hex")+"'";u.logger.error&&u.logger.error(c),l(c)}}).catch(function(t){u.logger.error&&u.logger.error(t),l(t)}),T.abrupt("return",g);case 45:case"end":return T.stop()}},null,this)}return{genTransaction:v,genContractActions:b,genMethod:w}}(0,n,m,u.transaction),w=new Set(["transaction","contract"]),_={};_.transaction=b.genTransaction(u,_);var E=!0,A=!1,B=void 0;try{for(var C,k=v[Symbol.iterator]();!(E=(C=k.next()).done);E=!0){var x=C.value;for(var F in x.schema){var S=x.schema[F];if("string"!=typeof S){a.equal(void 0===S?"undefined":(0,o.default)(S),"object","abi.schema[type = "+F+"]");var D=S.action;if(void 0!==D){if(w.has(D.name))throw new TypeError("Conflicting Api function: "+F);var T=g(x.schema,F);_[D.name]=b.genMethod(F,T,_.transaction,D.account,D.name)}}}}}catch(t){A=!0,B=t}finally{try{!E&&k.return&&k.return()}finally{if(A)throw B}}return _.contract=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=l(e,["account"],"contract",p),i=r.params,o=(r.options,r.returnPromise),u=r.callback,a=i.account;return b.genContractActions(a).then(function(t){u(null,t)}).catch(function(t){u(t)}),o},_};var h=s.sign;var d=function(t){return Array.isArray(t)&&t.length>0&&-1===t.findIndex(function(t){return"string"!=typeof t})},p=function(t){return"object"===(void 0===t?"undefined":(0,o.default)(t))?t:"boolean"==typeof t?{broadcast:t}:void 0};var y=function(t,e,n){return function(r,i){r?(e.error&&e.error("error",r),t(r)):Promise.resolve(n(i)).catch(function(e){t(e)})}};function g(t,e){var n=t[e],r=n.base,i=n.fields,o={};return r&&""!==r&&Object.assign(o,g(t,r)),Object.assign(o,i),o}}).call(this,n(2).Buffer)},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"}],structs:[{name:"transfer",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"create",base:"",fields:[{name:"issuer",type:"account_name"},{name:"maximum_supply",type:"asset"}]},{name:"issue",base:"",fields:[{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"account",base:"",fields:[{name:"balance",type:"asset"}]},{name:"currency_stats",base:"",fields:[{name:"supply",type:"asset"},{name:"max_supply",type:"asset"},{name:"issuer",type:"account_name"}]}],actions:[{name:"transfer",type:"transfer",ricardian_contract:""},{name:"issue",type:"issue",ricardian_contract:""},{name:"create",type:"create",ricardian_contract:""}],tables:[{name:"accounts",type:"account",index_type:"i64",key_names:["currency"],key_types:["uint64"]},{name:"stat",type:"currency_stats",index_type:"i64",key_names:["currency"],key_types:["uint64"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"},{new_type_name:"permission_name",type:"name"},{new_type_name:"action_name",type:"name"},{new_type_name:"transaction_id_type",type:"checksum256"},{new_type_name:"weight_type",type:"uint16"}],____comment:"eosio.bios structs: set_account_limits, setpriv, set_global_limits, producer_key, set_producers, require_auth are provided so abi available for deserialization in future.",structs:[{name:"permission_level",base:"",fields:[{name:"actor",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"key_weight",base:"",fields:[{name:"key",type:"public_key"},{name:"weight",type:"weight_type"}]},{name:"bidname",base:"",fields:[{name:"bidder",type:"account_name"},{name:"newname",type:"account_name"},{name:"bid",type:"asset"}]},{name:"permission_level_weight",base:"",fields:[{name:"permission",type:"permission_level"},{name:"weight",type:"weight_type"}]},{name:"wait_weight",base:"",fields:[{name:"wait_sec",type:"uint32"},{name:"weight",type:"weight_type"}]},{name:"authority",base:"",fields:[{name:"threshold",type:"uint32"},{name:"keys",type:"key_weight[]"},{name:"accounts",type:"permission_level_weight[]"},{name:"waits",type:"wait_weight[]"}]},{name:"newaccount",base:"",fields:[{name:"creator",type:"account_name"},{name:"name",type:"account_name"},{name:"owner",type:"authority"},{name:"active",type:"authority"}]},{name:"setcode",base:"",fields:[{name:"account",type:"account_name"},{name:"vmtype",type:"uint8"},{name:"vmversion",type:"uint8"},{name:"code",type:"bytes"}]},{name:"setabi",base:"",fields:[{name:"account",type:"account_name"},{name:"abi",type:"bytes"}]},{name:"updateauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"},{name:"parent",type:"permission_name"},{name:"auth",type:"authority"}]},{name:"deleteauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"linkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"},{name:"requirement",type:"permission_name"}]},{name:"unlinkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"}]},{name:"canceldelay",base:"",fields:[{name:"canceling_auth",type:"permission_level"},{name:"trx_id",type:"transaction_id_type"}]},{name:"onerror",base:"",fields:[{name:"sender_id",type:"uint128"},{name:"sent_trx",type:"bytes"}]},{name:"buyrambytes",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"bytes",type:"uint32"}]},{name:"sellram",base:"",fields:[{name:"account",type:"account_name"},{name:"bytes",type:"uint64"}]},{name:"buyram",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"quant",type:"asset"}]},{name:"delegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"stake_net_quantity",type:"asset"},{name:"stake_cpu_quantity",type:"asset"},{name:"transfer",type:"bool"}]},{name:"undelegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"unstake_net_quantity",type:"asset"},{name:"unstake_cpu_quantity",type:"asset"}]},{name:"refund",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"delegated_bandwidth",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"}]},{name:"user_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"total_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"refund_request",base:"",fields:[{name:"owner",type:"account_name"},{name:"request_time",type:"time_point_sec"},{name:"net_amount",type:"asset"},{name:"cpu_amount",type:"asset"}]},{name:"blockchain_parameters",base:"",fields:[{name:"max_block_net_usage",type:"uint64"},{name:"target_block_net_usage_pct",type:"uint32"},{name:"max_transaction_net_usage",type:"uint32"},{name:"base_per_transaction_net_usage",type:"uint32"},{name:"net_usage_leeway",type:"uint32"},{name:"context_free_discount_net_usage_num",type:"uint32"},{name:"context_free_discount_net_usage_den",type:"uint32"},{name:"max_block_cpu_usage",type:"uint32"},{name:"target_block_cpu_usage_pct",type:"uint32"},{name:"max_transaction_cpu_usage",type:"uint32"},{name:"min_transaction_cpu_usage",type:"uint32"},{name:"max_transaction_lifetime",type:"uint32"},{name:"deferred_trx_expiration_window",type:"uint32"},{name:"max_transaction_delay",type:"uint32"},{name:"max_inline_action_size",type:"uint32"},{name:"max_inline_action_depth",type:"uint16"},{name:"max_authority_depth",type:"uint16"}]},{name:"eosio_global_state",base:"blockchain_parameters",fields:[{name:"max_ram_size",type:"uint64"},{name:"total_ram_bytes_reserved",type:"uint64"},{name:"total_ram_stake",type:"int64"},{name:"last_producer_schedule_update",type:"block_timestamp_type"},{name:"last_pervote_bucket_fill",type:"uint64"},{name:"pervote_bucket",type:"int64"},{name:"perblock_bucket",type:"int64"},{name:"total_unpaid_blocks",type:"uint32"},{name:"total_activated_stake",type:"int64"},{name:"thresh_activated_stake_time",type:"uint64"},{name:"last_producer_schedule_size",type:"uint16"},{name:"total_producer_vote_weight",type:"float64"},{name:"last_name_close",type:"block_timestamp_type"}]},{name:"producer_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"total_votes",type:"float64"},{name:"producer_key",type:"public_key"},{name:"is_active",type:"bool"},{name:"url",type:"string"},{name:"unpaid_blocks",type:"uint32"},{name:"last_claim_time",type:"uint64"},{name:"location",type:"uint16"}]},{name:"regproducer",base:"",fields:[{name:"producer",type:"account_name"},{name:"producer_key",type:"public_key"},{name:"url",type:"string"},{name:"location",type:"uint16"}]},{name:"unregprod",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"setram",base:"",fields:[{name:"max_ram_size",type:"uint64"}]},{name:"regproxy",base:"",fields:[{name:"proxy",type:"account_name"},{name:"isproxy",type:"bool"}]},{name:"voteproducer",base:"",fields:[{name:"voter",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"}]},{name:"voter_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"},{name:"staked",type:"int64"},{name:"last_vote_weight",type:"float64"},{name:"proxied_vote_weight",type:"float64"},{name:"is_proxy",type:"bool"}]},{name:"claimrewards",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"setpriv",base:"",fields:[{name:"account",type:"account_name"},{name:"is_priv",type:"int8"}]},{name:"rmvproducer",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"set_account_limits",base:"",fields:[{name:"account",type:"account_name"},{name:"ram_bytes",type:"int64"},{name:"net_weight",type:"int64"},{name:"cpu_weight",type:"int64"}]},{name:"set_global_limits",base:"",fields:[{name:"cpu_usec_per_period",type:"int64"}]},{name:"producer_key",base:"",fields:[{name:"producer_name",type:"account_name"},{name:"block_signing_key",type:"public_key"}]},{name:"set_producers",base:"",fields:[{name:"schedule",type:"producer_key[]"}]},{name:"require_auth",base:"",fields:[{name:"from",type:"account_name"}]},{name:"setparams",base:"",fields:[{name:"params",type:"blockchain_parameters"}]},{name:"connector",base:"",fields:[{name:"balance",type:"asset"},{name:"weight",type:"float64"}]},{name:"exchange_state",base:"",fields:[{name:"supply",type:"asset"},{name:"base",type:"connector"},{name:"quote",type:"connector"}]},{name:"namebid_info",base:"",fields:[{name:"newname",type:"account_name"},{name:"high_bidder",type:"account_name"},{name:"high_bid",type:"int64"},{name:"last_bid_time",type:"uint64"}]}],actions:[{name:"newaccount",type:"newaccount",ricardian_contract:""},{name:"setcode",type:"setcode",ricardian_contract:""},{name:"setabi",type:"setabi",ricardian_contract:""},{name:"updateauth",type:"updateauth",ricardian_contract:""},{name:"deleteauth",type:"deleteauth",ricardian_contract:""},{name:"linkauth",type:"linkauth",ricardian_contract:""},{name:"unlinkauth",type:"unlinkauth",ricardian_contract:""},{name:"canceldelay",type:"canceldelay",ricardian_contract:""},{name:"onerror",type:"onerror",ricardian_contract:""},{name:"buyrambytes",type:"buyrambytes",ricardian_contract:""},{name:"buyram",type:"buyram",ricardian_contract:""},{name:"sellram",type:"sellram",ricardian_contract:""},{name:"delegatebw",type:"delegatebw",ricardian_contract:""},{name:"undelegatebw",type:"undelegatebw",ricardian_contract:""},{name:"refund",type:"refund",ricardian_contract:""},{name:"regproducer",type:"regproducer",ricardian_contract:""},{name:"setram",type:"setram",ricardian_contract:""},{name:"bidname",type:"bidname",ricardian_contract:""},{name:"unregprod",type:"unregprod",ricardian_contract:""},{name:"regproxy",type:"regproxy",ricardian_contract:""},{name:"voteproducer",type:"voteproducer",ricardian_contract:""},{name:"claimrewards",type:"claimrewards",ricardian_contract:""},{name:"setpriv",type:"setpriv",ricardian_contract:""},{name:"rmvproducer",type:"rmvproducer",ricardian_contract:""},{name:"setalimits",type:"set_account_limits",ricardian_contract:""},{name:"setglimits",type:"set_global_limits",ricardian_contract:""},{name:"setprods",type:"set_producers",ricardian_contract:""},{name:"reqauth",type:"require_auth",ricardian_contract:""},{name:"setparams",type:"setparams",ricardian_contract:""}],tables:[{name:"producers",type:"producer_info",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"global",type:"eosio_global_state",index_type:"i64",key_names:[],key_types:[]},{name:"voters",type:"voter_info",index_type:"i64",key_names:["owner"],key_types:["account_name"]},{name:"userres",type:"user_resources",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"delband",type:"delegated_bandwidth",index_type:"i64",key_names:["to"],key_types:["uint64"]},{name:"rammarket",type:"exchange_state",index_type:"i64",key_names:["supply"],key_types:["uint64"]},{name:"refunds",type:"refund_request",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"namebids",type:"namebid_info",index_type:"i64",key_names:["newname"],key_types:["account_name"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[],structs:[{name:"nonce",base:"",fields:[{name:"value",type:"string"}]}],actions:[{name:"nonce",type:"nonce",ricardian_contract:""}],tables:[],ricardian_clauses:[],abi_extensions:[]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.eosNodeConfigs={scatter:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://nodes.get-scatter.com:443"},acroeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api2.acroeos.one"},alohaeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"http://api.main.alohaeos.com"},atticlab:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosbp.atticlab.net"},genereos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.genereos.io"},blockmatrix:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosapi.blockmatrix.network"},chainrift:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eospublic.chainrift.com"},eosio:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosio.cr"},cryptolions:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.cryptolions.io"},cypherglass:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.cypherglass.com"},eos42:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://nodes.eos42.io"},eosamsterdam:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eosamsterdam.net"},eosasia:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api1.eosasia.one"},eosauthority:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://publicapi-mainnet.eosauthority.com"},eosbean:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosbean.com"},eosbeijing:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosbeijing.one"},eosbixin:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mars.fn.eosbixin.com"},eoscafeblock:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.eoscafeblock.com"},eoscanada:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eoscanada.com"},eoscannon:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eoscannon.io"},eoscleaner:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoscleaner.com"},eosdac:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eu.eosdac.io"},eosdublin:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosdublin.io"},eoseoul:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoseoul.io"},eosfengwo:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosfengwo.com"},eosflare:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node.eosflare.io"},genesis_mining:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.genesis-mining.com"},eosdetroit:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosdetroit.io"},meet:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.meet.one"},eosgravity:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api-mainnet.eosgravity.com"},eoslaomao:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoslaomao.com"},eosmetal:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api3.eosmetal.io"},minergate:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eos.minergate.com"},minergate_bp:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.eos.minergate.com"},eosn:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosn.io"},eosnewyork:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosnewyork.io"},eosnodeone:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.main-net.eosnodeone.io"},eospacex:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api-mainnet.eospacex.com"},nodepacific:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosapi.nodepacific.com"},eosrio:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosrio.io"},eossweden:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eossweden.se"},eostitan:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eostitan.com"},eostribe:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eostribe.io"},eosvolga:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.eosvolga.one"},eosweb:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://apinode.eosweb.net"},eosys:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://rpc.eosys.io"},franceos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.franceos.fr"},eosblockbuster:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://full.eosblockbuster.com"},jeda:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.jeda.one"},oraclechain:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.oraclechain.io"},sheos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.sheos.org"},eosgeneva:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosgeneva.io"},greymass:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.greymass.com"},zbeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node1.zbeos.com"},zeroxeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node1.zeroxeos.com"},eosnode:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://proxy.eosnode.tools"},dfuse:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eos.dfuse.io"},dev:{blockchain:"eos",chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",httpEndpoint:"http://dev.toneos.pro:7777"},kylin:{blockchain:"eos",chainId:"5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191",httpEndpoint:"https://api-kylin.eosasia.one"}}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&"%c"===t&&(i=++r)}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(251)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(11))},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function u(...t){if(!u.enabled)return;const e=u,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const o=r.formatters[i];if("function"==typeof o){const r=t[a];n=o.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return u.namespace=t,u.enabled=r.enabled(t),u.useColors=r.useColors(),u.color=e(t),u.destroy=i,u.extend=o,"function"==typeof r.init&&r.init(u),r.instances.push(u),u}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){return r(this.namespace+(void 0===e?":":e)+t)}function u(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(u),...r.skips.map(u).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(252),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,u=7*o,a=365.25*o;function s(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var f=typeof t;if("string"===f&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var s=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"weeks":case"week":case"w":return s*u;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*i;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(t);if("number"===f&&!1===isNaN(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return s(t,e,o,"day");if(e>=i)return s(t,e,i,"hour");if(e>=r)return s(t,e,r,"minute");if(e>=n)return s(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){"use strict";"using strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.defaultConfigs=t}return t.prototype.get=function(t){var e="eosplayer::"+t,n=localStorage.getItem(e);if(n)return n;if(t in this.defaultConfigs){var r=this.defaultConfigs[t];return this.set(t,r),r}},t.prototype.set=function(t,e){var n="eosplayer::"+t;localStorage.setItem(n,e)},t}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(255),u=n(86),a=n(48),s=n(25),f=n(24),c=n(274),l=s.createLogger("chain"),h=new c.CQueue(1e3,!0),d=function(){function t(t){this._eos=t}return Object.defineProperty(t.prototype,"storyBoard",{get:function(){return h},enumerable:!0,configurable:!0}),t.prototype.getInfo=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this._eos.getInfo({})];case 1:return[2,t.sent()]}})})},t.prototype.getBlock=function(t){return r(this,void 0,void 0,function(){var e;return i(this,function(n){switch(n.label){case 0:return e={block_num_or_id:t},[4,this._eos.getBlock(e)];case 1:return[2,n.sent()]}})})},t.prototype.getContract=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.contract(t)];case 1:return[2,e.sent()]}})})},t.prototype.getAbi=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getAbi(t)];case 1:return[2,e.sent()]}})})},t.prototype.getTableAbi=function(t,e){return r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.getAbi(t)];case 1:return[2,n.sent().abi.tables.find(function(t){return t.name===e})]}})})},t.prototype.abiJsonToBin=function(t,e,n){return r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return r={code:t,action:e,args:n},[4,this._eos.abiJsonToBin(r)];case 1:return[2,i.sent().binargs]}})})},t.prototype.getAccountInfo=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getAccount({account_name:t})];case 1:return[2,e.sent()]}})})},t.prototype.getPubKey=function(t,e){return void 0===e&&(e="active"),r(this,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:return[4,this.getPubKeys(t,e)];case 1:return!(n=r.sent())||n.length<=0?(l.warning("cannot find public key for "+t+"@"+e),[2]):[4,this.getPubKeys(t,e)];case 2:return[2,r.sent()[0].key]}})})},t.prototype.getPubKeys=function(t,e){return void 0===e&&(e="active"),r(this,void 0,void 0,function(){var n,r;return i(this,function(i){switch(i.label){case 0:return[4,this.getAccountInfo(t)];case 1:if(n=i.sent(),!(r=n.permissions.find(function(t){return t.perm_name===e})))throw new Error("cannot find the permission of "+t);return[2,r.required_auth.keys]}})})},t.prototype.recoverSign=function(t,e){return f.Ecc.recover(t,e)},t.prototype.validateSign=function(t,e,n,o){void 0===o&&(o="active");for(var u=[],a=4;a<arguments.length;a++)u[a-4]=arguments[a];return r(this,void 0,void 0,function(){var r,a,s,f,c,h,d,p,y,g,m,v,b,w;return i(this,function(i){switch(i.label){case 0:return r=this.recoverSign(t,e),[4,this.getAccountInfo(n)];case 1:if(!(a=i.sent().permissions))return l.warning("permissions of account_name "+n+" are not found."),[2];if(s=a.find(function(t){return t.perm_name===o}),!a)return l.warning("permission "+o+" account_name "+n+" are not found."),[2];if(f=s.required_auth,c=f.accounts,h=f.keys,d=h.find(function(t){return t.key===r}))return[2,d.key];if(!u||u.length<=0)return[2];p=c.map(function(t){return t.permission.actor+"@"+t.permission.permission}),l.verbose("try match",c,p,u),y=0,i.label=2;case 2:if(!(y<u.length))return[3,8];g=u[y],m=0,i.label=3;case 3:return m<p.length?(v=p[m],b=g.validatorProvider[v],(w=b)?[4,Promise.resolve(b(n,r,this))]:[3,5]):[3,7];case 4:w=i.sent(),i.label=5;case 5:if(w)return[2,r];i.label=6;case 6:return m++,[3,3];case 7:return y++,[3,2];case 8:return[2]}})})},t.prototype.getActionCount=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getActionMaxSeq(t)];case 1:return[2,e.sent()+1]}})})},t.prototype.getActionMaxSeq=function(t){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return[4,this.getRecentActions(t)];case 1:if(!(e=r.sent())||!e.actions)throw new Error("getActionCount failed: cannot find recent actions of "+t+")");return[2,0===(n=e.actions).length?-1:n[n.length-1].account_action_seq]}})})},t.prototype.getRecentActions=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getActions({account_name:t})];case 1:return[2,e.sent()]}})})},t.prototype.getActions=function(t,e,n,o){return void 0===e&&(e=0),void 0===n&&(n=0),void 0===o&&(o=6e4),r(this,void 0,void 0,function(){var r,u,s,f,c,h,d;return i(this,function(i){switch(i.label){case 0:r=e,u=e+n,s=[],l.verbose("getActions start",e,u,"current:",s.length),i.label=1;case 1:0,f=void 0,i.label=2;case 2:return i.trys.push([2,4,,5]),[4,a.timeoutPromise(o,this._eos.getActions({account_name:t,pos:r,offset:u-r}))];case 3:return f=i.sent(),[3,5];case 4:return c=i.sent(),l.warning(c),[3,1];case 5:if(!f||!f.actions)throw new Error("getActions failed: cannot find actions of "+t+" (pos:"+r+", offset:"+n+")");return h=f.actions,l.verbose("getActions find",h[h.length-1]),(d=0===h.length?r-1:h[h.length-1].account_action_seq)<r?[3,6]:(s.push.apply(s,h),d>=u?[3,6]:(r=d+1,[3,1]));case 6:return[2,s]}})})},t.prototype.getAllActionsBatch=function(t,e,n,o,u){return void 0===n&&(n=0),void 0===o&&(o=100),void 0===u&&(u=10),r(this,void 0,void 0,function(){var a,s,f,c,h,d,p,y,g=this;return i(this,function(m){switch(m.label){case 0:if(a=o-1,!e)return[2,!1];s=function(e){return r(g,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:0,r.label=1;case 1:return r.trys.push([1,3,,4]),l.verbose("search Start : at:"+Date.now()+" pos:"+e+" offset:"+a),[4,this.getActions(t,e,a)];case 2:return[2,r.sent()];case 3:return n=r.sent(),l.error("error : ",n),[3,4];case 4:return[3,0];case 5:return[2]}})})},f=[],l.info("===> start search actions of "+t+" from "+n+", concurrent : "+u+", count : "+o+", once : "+u*o),c=Date.now(),h=0,m.label=1;case 1:return f.push(n+h*o),h%u!=0?[3,3]:(d=Date.now(),l.verbose("===> deal batch "+h+" : "+f+" at "+c),[4,Promise.all(f.map(s))]);case 2:if(p=m.sent(),p.filter(function(t){return t.length>0}).length<=0)return[3,4];if(l.verbose("===> deal batch "+h+" done ("+(Date.now()-d)+")"),y=p.filter(function(t){return t.length>0}).reduce(function(t,n){return t&&e(n),t&&n.length>=o},!0),l.verbose("===> send batch "+h+" done ("+(Date.now()-d)+")"),!y)return[3,4];f=[],m.label=3;case 3:return h++,[3,1];case 4:return l.info("getAllActions : all scaned ("+(Date.now()-c)+")"),[2,!0]}})})},t.prototype.getBalance=function(t,e,n){return void 0===e&&(e="eosio.token"),r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return[4,this.getBalances(t,e)];case 1:return r=i.sent(),n?[2,r.find(function(t){return t.endsWith(n)})||null]:(l.warning("Symbol of the token has not been specified, the first item will return. all:",r),[2,r[0]||null])}})})},t.prototype.getBalances=function(t,e){return void 0===e&&(e="eosio.token"),r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this._eos.getCurrencyBalance(e,t)];case 1:return[2,(n.sent()||[]).map(function(t){return t.trim()})]}})})},t.prototype.transfer=function(t,e,n,o,u,a){return void 0===o&&(o=""),r(this,void 0,void 0,function(){var r,s,f,c;return i(this,function(i){switch(i.label){case 0:r={from:t.name,to:e,quantity:n,memo:o},s={actor:t.name,permission:t.authority},i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.call(a||"eosio.token","transfer",r,s).catch(u||l.error)];case 2:return f=i.sent(),[3,4];case 3:return c=i.sent(),u(c),[3,4];case 4:return f&&l.info("Transfer dealed, txID: "+f.transaction_id),[2,f]}})})},t.prototype.waitTx=function(t,e,n){return void 0===e&&(e=12),void 0===n&&(n=1009),r(this,void 0,void 0,function(){var o,u=this;return i(this,function(s){switch(s.label){case 0:return[4,(o=function(t,s){return void 0===s&&(s=0),r(u,void 0,void 0,function(){var r,u;return i(this,function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this._eos.getTransaction(t)];case 1:return(r=i.sent())?[2,r]:[3,3];case 2:return u=i.sent(),l.verbose("wait tx "+t+", retry round: "+s+". "+u.message),[3,3];case 3:return s>=e?(l.error("wait tx failed, round out."),[2,null]):[4,a.forMs(n)];case 4:return i.sent(),[2,o(t,s+1)]}})})})(t)];case 1:return[2,s.sent()]}})})},t.prototype.call=function(t,e,n){for(var o=[],u=3;u<arguments.length;u++)o[u-3]=arguments[u];return r(this,void 0,void 0,function(){var r,u;return i(this,function(i){switch(i.label){case 0:return r={actions:[{account:t,name:e,data:n,authorization:o}]},[4,this._eos.transaction(r).catch(function(t){throw t})];case 1:return u=i.sent(),this.storyBoard.push(r),l.info("CALL","code",t,"func",e,"jsonData",n,"authorization",o,"history",this.storyBoard.toArray()),[2,u]}})})},t.prototype.getTableAll=function(t,e,n,o,s){for(var f=[],c=5;c<arguments.length;c++)f[c-5]=arguments[c];return r(this,void 0,void 0,function(){var r,c,h,d,p,y=this;return i(this,function(i){switch(i.label){case 0:r=o?new u.BigNumber(o):new u.BigNumber(0),c=s&&-1!==s?new u.BigNumber(s):new u.BigNumber("18446744073709551615"),h=[],d=[],p=function(r,i){if(l.verbose("search ",Date.now(),r.toFixed(0),i.toFixed(0)),!r.gte(i)){var o=y._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:-1,lower_bound:r.toFixed(0),upper_bound:i.toFixed(0)}).then(function(t){var e=d.findIndex(function(t){return t===o});if(d.splice(e,1),t)if(t.more){var n=i.minus(r).dividedBy(2).decimalPlaces(0).plus(r);p(r,n.minus(1)),p(n,i)}else t.rows&&h.push.apply(h,t.rows)}).catch(function(t){var e=d.find(function(t){return t===o});throw d.splice(e,1),t});d.push(o)}},!f||f.length<=0?p(r,c):f.map(function(t){return new u.BigNumber(t)}).concat([c]).reduce(function(t,e){return p(t,e),e},r),i.label=1;case 1:return d.length>0?[4,a.forMs(50)]:[3,3];case 2:return i.sent(),[3,1];case 3:return l.verbose("done search ",Date.now(),r.toFixed(0),c.toFixed(0)),[2,h]}})})},t.prototype.checkTable=function(t,e,n,o,u,a,s){return void 0===o&&(o=10),void 0===u&&(u=0),void 0===a&&(a=-1),void 0===s&&(s=1),r(this,void 0,void 0,function(){var r,f;return i(this,function(i){switch(i.label){case 0:return l.verbose("search ",Date.now(),u,a,o),[4,this._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:o,lower_bound:u,upper_bound:a,index_position:s})];case 1:return r=i.sent(),f=r&&r.rows?r.rows:[],r.more&&(o<=0||r.rows&&r.rows.length<o)&&l.warning("'more' detected, and this method didn't deal with the tag 'more'. if you want to get all results, using checkTableMore and provide the primary key. "),[2,f]}})})},t.prototype.checkTableMore=function(t,e,n,o,u,a,s,f){return void 0===u&&(u=9999999),void 0===a&&(a=0),void 0===s&&(s=-1),void 0===f&&(f=1),r(this,void 0,void 0,function(){var r,c,h,d,p,y;return i(this,function(i){switch(i.label){case 0:return l.verbose("search ",t,e,Date.now()),[4,this._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:u,lower_bound:a,upper_bound:s,index_position:f})];case 1:return r=i.sent(),c=r&&r.rows?r.rows:[],l.verbose("part size "+c.length+"."),r.more&&(u<=0||r.rows&&r.rows.length<u)?(h=c[0][o],d=c[c.length-1][o],h&&d?[3,3]:[4,this.getAbi(t)]):[3,5];case 2:throw p=i.sent(),l.error("searching more error with primary key : "+o+". please check\nlast data: "+c[c.length-1]+" \nabi "+JSON.stringify(p)),new Error("check more error with primary key : "+o);case 3:return l.info("'more' detected: start searching results from "+d+"."),[4,this.checkTableMore(t,e,n,o,u-c.length+1,d,s,f)];case 4:return y=i.sent(),[2,c.concat(y.splice(1))];case 5:return[2,c]}})})},t.prototype.checkTableRange=function(t,e,n,o,a,s){return void 0===a&&(a=1),void 0===s&&(s=1),r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:if(a<0)throw new Error("range error: length("+a+") must larger than 0 ");return[4,this.checkTable(t,e,n,a,o,"number"==typeof o?o+a:new u.BigNumber(f.Eos.modules.format.encodeName(o,!1)).plus(a).toString(),s)];case 1:return[2,r.sent()]}})})},t.prototype.checkTableItem=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.checkTableRange(t,e,n,o,1)];case 1:return[2,r.sent()[0]]}})})},t.prototype.updateAuth=function(t,e,n,o,u,a,s){return void 0===s&&(s=1),r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._eos.updateauth({account_name:t,permission:e,parent:n,auth:{threshold:o,keys:u,accounts:a,waits:s}})];case 1:return[2,r.sent()]}})})},t.getTableByScope=function(t,e,n,u,a,s){return void 0===s&&(s=1e3),r(this,void 0,void 0,function(){var r,f,c,l,h;return i(this,function(i){switch(i.label){case 0:r="/v1/chain/get_table_by_scope",f={code:e,table:n,lower_bound:u,upper_bound:a,limit:s},c=o.default.create({baseURL:t,headers:{post:{"Content-Type":"application/json"}}}),l=[],i.label=1;case 1:return[4,c.post(r,f)];case 2:return h=i.sent(),l.push(h.data),""===h.data.more?[3,3]:[3,1];case 3:return[2,l]}})})},t.help=function(){return'\n### Chain API\n\n```js\n{Object} async getInfo() // get info of the chain connected\n{Object} async getBlock(blockNumOrId) // get specific block of the chain\n\n\n{Contract} async getContract(code) // get contract\n{Object} async getAbi(code) // get abi of contract\n{Object} async getTableAbi(code, tableName) // get table abi of contract\n{Object} async abiJsonToBin(code, action, args)\n\n{Object} async getAccountInfo(account_name) // get account info of any user\n{string} async getPubKey(account_name, authority = "active") // get the first public key of an account\n{Array} async getPubKeys(account_name, authority = "active") // get public keys of an account\n{string} async recoverSign(signature, message) // recover sign and to the public key\n{string} async validateSign (signature, message, account, authority = \'active\', accountsPermisionPlugins)\n// validate if signed data is signed by a account. it returns the matched public key\n\n{Number} async getActionCount(account_name) // get a account\'s action count\n{Number} async getActionMaxSeq(account_name) // get a account\'s max action seq\n{Array} async getRecentActions(account_name) // get recent actions\n{Array} async getActions(account_name, startPos = 0, offset = 0) // get all actions of an account\n{Array} async getAllActionsBatch (account_name, cbReceive, startPos = 0, count = 100, concurrent = 10) // get all actions in bulk\n\n{String} async getBalance(account_name, code = "eosio.token", symbolName = undefined) // get balance of specific account\n{Array.<String>} async getBalances(account_name, code = "eosio.token") // get all balance of specific account\n{Tx} async transfer(account, target, quantity, memo = "", cbError) // the format of account should be {name, authority}\n\n{Tx} async waitTx(txID, maxRound = 12, timeSpanMS = 1009) // check a transaction info, retry once per sec until success\n\n{Tx} async call(code, func, jsonData, ...authorization) // send action to a contract\n\n{Array} async getTableAll(code, tableName, scope, lowerNum, upperNum, ...hint) // get all items in a table\n{Array} async checkTable(code, tableName, scope, limit = 10, lower_bound = 0, upper_bound = -1, index_position = 1) // check a table\n{Array} async checkTableMore(code, tableName, scope, primaryKey, limit = 9999999, lower_bound = 0, upper_bound = -1, index_position = 1)\n{Array} async checkTableRange(code, tableName, scope, from, length = 1, index_position = 1) // check range in table\n{Object} async checkTableItem(code, tableName, scope, key = 0) // check a item in a table\n\n{Object} async updateAuth(account, permission, parent, threshold, keys, accounts, waits) // update auth\n```\n'},t}();e.default=d},function(t,e,n){t.exports=n(256)},function(t,e,n){"use strict";var r=n(6),i=n(128),o=n(258),u=n(76);function a(t){var e=new o(t),n=i(o.prototype.request,e);return r.extend(n,o.prototype,e),r.extend(n,e),n}var s=a(u);s.Axios=o,s.create=function(t){return a(r.merge(u,t))},s.Cancel=n(132),s.CancelToken=n(272),s.isCancel=n(131),s.all=function(t){return Promise.all(t)},s.spread=n(273),t.exports=s,t.exports.default=s},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(76),i=n(6),o=n(267),u=n(268);function a(t){this.defaults=t,this.interceptors={request:new o,response:new o}}a.prototype.request=function(t){"string"==typeof t&&(t=i.merge({url:arguments[0]},arguments[1])),(t=i.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[u,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},i.forEach(["delete","get","head","options"],function(t){a.prototype[t]=function(e,n){return this.request(i.merge(n||{},{method:t,url:e}))}}),i.forEach(["post","put","patch"],function(t){a.prototype[t]=function(e,n,r){return this.request(i.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=a},function(t,e,n){"use strict";var r=n(6);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(130);t.exports=function(t,e,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i){return t.config=e,n&&(t.code=n),t.request=r,t.response=i,t}},function(t,e,n){"use strict";var r=n(6);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(r.isURLSearchParams(e))o=e.toString();else{var u=[];r.forEach(e,function(t,e){null!==t&&void 0!==t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(i(e)+"="+i(t))}))}),o=u.join("&")}return o&&(t+=(-1===t.indexOf("?")?"?":"&")+o),t}},function(t,e,n){"use strict";var r=n(6),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,o,u={};return t?(r.forEach(t.split("\n"),function(t){if(o=t.indexOf(":"),e=r.trim(t.substr(0,o)).toLowerCase(),n=r.trim(t.substr(o+1)),e){if(u[e]&&i.indexOf(e)>=0)return;u[e]="set-cookie"===e?(u[e]?u[e]:[]).concat([n]):u[e]?u[e]+", "+n:n}}),u):u}},function(t,e,n){"use strict";var r=n(6);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=i(window.location.href),function(e){var n=r.isString(e)?i(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,o=String(t),u="",a=0,s=r;o.charAt(0|a)||(s="=",a%1);u+=s.charAt(63&e>>8-a%1*8)){if((n=o.charCodeAt(a+=.75))>255)throw new i;e=e<<8|n}return u}},function(t,e,n){"use strict";var r=n(6);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,i,o,u){var a=[];a.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r=n(6);function i(){this.handlers=[]}i.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=i},function(t,e,n){"use strict";var r=n(6),i=n(269),o=n(131),u=n(76),a=n(270),s=n(271);function f(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return f(t),t.baseURL&&!a(t.url)&&(t.url=s(t.baseURL,t.url)),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||u.adapter)(t).then(function(e){return f(t),e.data=i(e.data,e.headers,t.transformResponse),e},function(e){return o(e)||(f(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(6);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(132);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i(function(e){t=e}),cancel:t}},t.exports=i},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){void 0===t&&(t=1e3),void 0===e&&(e=!1),this.maxSize=t,this.overflow=e,this.vernierStart=0,this.vernierEnd=0,this.body=[]}return Object.defineProperty(t.prototype,"preferHead",{get:function(){return this.full?this.vernierEnd-this.maxSize:this.vernierStart},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"preferTail",{get:function(){return this.vernierEnd-1},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"head",{get:function(){return this.preferHead%this.maxSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tail",{get:function(){return this.preferTail%this.maxSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.vernierEnd-this.vernierStart},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"full",{get:function(){return this.length>=this.maxSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"empty",{get:function(){return this.length<=0},enumerable:!0,configurable:!0}),t.prototype.push=function(t){return!(this.full&&!this.overflow)&&(this.vernierEnd++,this.body[this.tail]=t,!0)},t.prototype.shift=function(){return!this.empty&&(this.full&&(this.vernierStart=this.preferHead),this.vernierStart++,!0)},t.prototype.front=function(){if(this.empty)return this.body[this.head]},t.prototype.rear=function(){if(this.empty)return this.body[this.tail]},t.prototype.toArray=function(){var t=this.head,e=this.tail;return t<=e?this.body.slice(t,e+1):t>e?this.body.slice(t,this.body.length).concat(this.body.slice(0,e+1)):void 0},t}();e.CQueue=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(133),u=n(277),a=function(){function t(t){this._chain=t}return t.prototype.transcal=function(t,e,n,o,u,a,s){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._chain.transfer(t,e,n,"@["+o+":"+u.join(",")+"]",a,s)];case 1:return[2,r.sent()]}})})},t.prototype.transend=function(t,e,n,o,u,a){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.transcal(t,e,"0.0001 "+n,o,u,a)];case 1:return[2,r.sent()]}})})},t.prototype.res=function(t,e){return new u.default(this._chain,t,e)},t.prototype.checkResOf=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.res(t,n).checkAsset(e)];case 1:return[2,r.sent()]}})})},t.prototype.checkResInfo=function(t,e){return r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.res(t,e).checkInfo()];case 1:return[2,n.sent()]}})})},t.prototype.parseTranscalPayload=function(t){return o.TranscalPayload.parse(t)},t.prototype.assembleTranscalPayload=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return(new(o.TranscalPayload.bind.apply(o.TranscalPayload,[void 0,t].concat(e)))).memo()},t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];this.func=t,this.args=[],this.args=e}return t.prototype.serialize=function(){return"@["+this.func+":"+this.args.join(",")+"]"},t.prototype.parse=function(t){var e=t[0];if(t.length<4)throw new Error("parse transcal error: the input is too short.");if("["!==t[1]||"]"===t[2])throw new Error("parse transcal error: formation error.");if("@"!==e&&"#"!==e)throw new Error("parse transcal error: type mark must be @ or #.");var n=t.indexOf(":"),r=t.indexOf("]");if(r<0)throw new Error("parse transcal error: cannot find end mark ']'.");if(n<0)return this.func=t.substr(2,r-2),this.args=[],this;this.func=t.substr(2,n-2);for(var i=n+1,o=i,u=[];;){if((i=t.indexOf(",",i))>=r||i<0){u.push(t.substr(o,r-o));break}u.push(t.substr(o,i-o)),o=++i}return this.args=u,this},t.parse=function(e){return new t("").parse(e)},t}();e.OneLineCall=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(75),u=function(){function t(t,e,n,r){void 0===r&&(r={name:null,authority:null}),this._chain=t,this._code=e,this._symStr=n,this._admin=r}return Object.defineProperty(t.prototype,"admin",{get:function(){return this._admin&&this._admin.name&&this._admin.authority?this._admin:null},enumerable:!0,configurable:!0}),t.prototype.resContract=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this._chain.getContract(this._code)];case 1:return[2,t.sent()]}})})},t.prototype.checkAsset=function(t){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return n=(e=o.default).parse,[4,this._chain.checkTableItem(this._code,"res.accounts",t,this._symStr)];case 1:return[2,n.apply(e,[r.sent()])]}})})},t.prototype.checkInfo=function(){return r(this,void 0,void 0,function(){var t,e;return i(this,function(n){switch(n.label){case 0:return e=(t=o.default).parse,[4,this._chain.checkTableItem(this._code,"res.info",this._code,this._symStr)];case 1:return[2,e.apply(t,[n.sent()])]}})})},t.prototype.issue=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().resissue({user:t,quantity:e,memo:n})];case 2:return[2,r.sent()]}})})},t.prototype.burn=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().resburn({user:t,quantity:e,memo:n})];case 2:return[2,r.sent()]}})})},t.prototype.take=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().restake({from:t,to:e,quantity:n,memo:o})];case 2:return[2,r.sent()]}})})},t.prototype.change=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().change({user:t,from:e,to:n,memo:o})];case 2:return[2,r.sent()]}})})},t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this._eventMap={},this._supportedEvents=[],this._defaultCb=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t.forEach(function(t){throw t instanceof Error?t:new Error(t)})},t&&(this.enableEvents(t),this._eventMap=Array.isArray(t)?{}:t)}return t.prototype.enableEvents=function(t){var e=Array.isArray(t)?t:Object.keys(t);this._supportedEvents=(this._supportedEvents||[]).concat(e)},t.prototype.setEvent=function(t,e,n){if(!this._supportedEvents.find(function(e){return e===t}))throw new Error("event handler : event "+t+" are not supported.");return this._eventMap[t]={cb:e,ctx:n},this},t.prototype.emitEvent=function(t){for(var e,n,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];if(!this._supportedEvents.find(function(e){return e===t}))throw new Error("event handler : event "+t+" are not found.");var o=this._eventMap[t];return o?(e=o.cb).call.apply(e,[o.ctx].concat(r)):(n=this._defaultCb).call.apply(n,[t].concat(r))},t}();e.default=r},function(t){t.exports={name:"eosplayer",version:"0.5.11",description:"eosplayer is the glue layer of eosjs, which is packaged based on eosjs and provides better usability for the application layer. It can be used on browsers already installed scatter or in Dapp wallets.",main:"build/lib/index.js",bin:{eosplayer:"bin/index.js"},types:"build/lib/index.d.js",repository:"git@github.com:bagaking/eosplayer.git",author:"bagaking <zfaustk@qq.com>",license:"Apache License 2.0",keywords:["eos","tonarts","contract","eosjs","scatter","blockchain"],scripts:{dev:"webpack-dev-server --config webpack.debug.js --open","build:web":"rimraf ./build/web/ &&webpack --config webpack.prod.js -p --display-error-details","build:play":"webpack --config webpack.debug.js -p --display-error-details","build:lib":"rimraf ./build/lib/ && npx tsc && cp LICENSE ./build/lib && cp README.md ./build/lib && node ./scripts/copyPackage.js",build:"npm run lint:fix && npm run build:web && npm run build:lib && npm run build:play","build:graph":"depcruise --exclude '^node_modules' --output-type dot src | dot -T svg > dependency.svg","lint:fix":"npx tslint --fix --project .",test:"./node_modules/.bin/mocha test/*test.js --reporter spec",doc:"jsdoc -c .jsdocrc",update_version:"node ./scripts/prepublish.js",prepublishOnly:"npm run build"},homepage:"https://github.com/bagaking/eosglue#readme",dependencies:{"@babel/polyfill":"^7.2.5","@babel/runtime":"^7.2.0","@khgame/one-line-call":"^0.1.1",axios:"^0.18.0","bignumber.js":"^8.0.1",debug:"^4.1.0",eosjs:"^16.0.9",fetch:"^1.1.0",idb:"^2.1.3","scatterjs-core":"^2.7.17","scatterjs-plugin-eosjs":"^1.5.1",yargs:"^13.2.2"},devDependencies:{"@babel/cli":"^7.2.3","@babel/core":"^7.2.2","@babel/plugin-proposal-object-rest-spread":"^7.2.0","@babel/plugin-transform-async-to-generator":"^7.2.0","@babel/plugin-transform-runtime":"^7.2.0","@babel/preset-env":"^7.2.3","babel-loader":"^8.0.5","compression-webpack-plugin":"^2.0.0","dependency-cruiser":"^4.13.3",docdash:"^1.0.0",eslint:"^5.12.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","fs-extra":"^7.0.1",hserve:"^0.0.1-beta.14",rimraf:"^2.6.3","ts-loader":"^5.3.3",tslint:"^5.12.1",typescript:"^3.3.3","uglifyjs-webpack-plugin":"^2.1.1",webpack:"^4.19.0","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.14"},files:["build","bin"]}},function(t,e,n){var r=function(){return this||"object"==typeof self&&self}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(281),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag",f="object"==typeof t,c=e.regeneratorRuntime;if(c)f&&(t.exports=c);else{(c=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",d="executing",p="completed",y={},g={};g[u]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(T([])));v&&v!==r&&i.call(v,u)&&(g=v);var b=B.prototype=E.prototype=Object.create(g);A.prototype=b.constructor=B,B.constructor=A,B[s]=A.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,B):(t.__proto__=B,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},C(k.prototype),k.prototype[a]=function(){return this},c.AsyncIterator=k,c.async=function(t,e,n,r){var i=new k(w(t,e,n,r));return c.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[s]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=T,D.prototype={constructor:D,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return a.type="throw",a.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var s=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(s&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(s){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;S(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}}}function w(t,e,n,r){var i=e&&e.prototype instanceof E?e:E,o=Object.create(i.prototype),u=new D(r||[]);return o._invoke=function(t,e,n){var r=l;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return O()}for(n.method=i,n.arg=o;;){var u=n.delegate;if(u){var a=x(u,n);if(a){if(a===y)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var s=_(t,e,n);if("normal"===s.type){if(r=n.done?p:h,s.arg===y)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=p,n.method="throw",n.arg=s.arg)}}}(t,n,u),o}function _(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function A(){}function B(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function k(t){var e;this._invoke=function(n,r){function o(){return new Promise(function(e,o){!function e(n,r,o,u){var a=_(t[n],t,r);if("throw"!==a.type){var s=a.arg,f=s.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(f).then(function(t){s.value=t,o(s)},function(t){return e("throw",t,o,u)})}u(a.arg)}(n,r,e,o)})}return e=e?e.then(o,o):o()}}function x(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,x(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=_(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function F(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function D(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(F,this),this.reset(!0)}function T(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,e,n){"use strict";var r=n(36),i=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=i(n(26)),u=i(n(27)),a=i(n(4)),s=i(n(5)),f=r(n(37)),c=new(function(){function t(){(0,a.default)(this,t),this.plugins=[]}return(0,s.default)(t,[{key:"loadPlugin",value:function(t){this.plugin(t.name)||this.plugins.push(t)}},{key:"wallets",value:function(){return this.plugins.filter(function(t){return t.type===f.WALLET_SUPPORT})}},{key:"signatureProviders",value:function(){return this.plugins.filter(function(t){return t.type===f.BLOCKCHAIN_SUPPORT})}},{key:"supportedBlockchains",value:function(){return this.signatureProviders().map(function(){return name})}},{key:"plugin",value:function(t){return this.plugins.find(function(e){return e.name===t})}},{key:"endorsedNetworks",value:function(){var t=(0,u.default)(o.default.mark(function t(){return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all(this.signatureProviders().map(function(){var t=(0,u.default)(o.default.mark(function t(e){return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.getEndorsedNetwork();case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),t}());e.default=c},function(t,e,n){var r=n(284),i=n(285),o=n(286);t.exports=function(t,e){return r(t)||i(t,e)||o()}},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e,n){"use strict";var r=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(4)),o=r(n(5)),u={},a=function(){return"undefined"==typeof window?{localStorage:{setItem:function(t,e){return u[t]=e},getItem:function(t){return u[t]||null},removeItem:function(t){return delete u[t]}}}:window},s=function(){function t(){(0,i.default)(this,t)}return(0,o.default)(t,null,[{key:"setAppKey",value:function(t){a().localStorage.setItem("appkey",t)}},{key:"getAppKey",value:function(){return a().localStorage.getItem("appkey")}},{key:"removeAppKey",value:function(){return a().localStorage.removeItem("appkey")}},{key:"setNonce",value:function(t){a().localStorage.setItem("nonce",t)}},{key:"getNonce",value:function(){return a().localStorage.getItem("nonce")}},{key:"removeNonce",value:function(){return a().localStorage.removeItem("nonce")}}]),t}();e.default=s},function(t,e,n){var r=n(289),i=n(290);t.exports=function(t){if(r.crypto&&r.crypto.getRandomValues)return r.crypto.getRandomValues(t);if("object"==typeof r.msCrypto&&"function"==typeof r.msCrypto.getRandomValues)return r.msCrypto.getRandomValues(t);if(i.randomBytes){if(!(t instanceof Uint8Array))throw new TypeError("expected Uint8Array");if(t.length>65536){var e=new Error;throw e.code=22,e.message="Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length ("+t.length+") exceeds the number of bytes of entropy available via this API (65536).",e.name="QuotaExceededError",e}var n=i.randomBytes(t.length);return t.set(n),t}throw new Error("No secure random number generator available.")}},function(t,e,n){(function(e){var n;n="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},t.exports=n}).call(this,n(7))},function(t,e){},function(t,e,n){(function(e){var n=null;"undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof MozWebSocket?n=MozWebSocket:void 0!==e?n=e.WebSocket||e.MozWebSocket:"undefined"!=typeof window?n=window.WebSocket||window.MozWebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),t.exports=n}).call(this,n(7))},function(t,e,n){"use strict";var r=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(4)),o=r(n(5)),u=n(38),a=r(n(136)),s=function(){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"https",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:u.Blockchains.EOS,s=5<arguments.length&&void 0!==arguments[5]?arguments[5]:"";(0,i.default)(this,t),this.name=e,this.protocol=n,this.host=r,this.port=o,this.blockchain=a,this.chainId=s.toString(),this.token=null}return(0,o.default)(t,[{key:"fullhost",value:function(){return"".concat(this.protocol,"://").concat(this.host).concat(this.port?":":"").concat(this.port)}},{key:"unique",value:function(){return("".concat(this.blockchain,":")+(this.chainId.length?"chain:".concat(this.chainId):"".concat(this.host,":").concat(this.port))).toLowerCase()}}],[{key:"placeholder",value:function(){return new t}},{key:"fromJson",value:function(e){var n=Object.assign(t.placeholder(),e);return n.chainId=n.chainId?n.chainId.toString():"",n.token=e.hasOwnProperty("token")&&e.token?a.default.fromJson(e.token):null,n}}]),t}();e.default=s},function(t,e,n){"use strict";var r=n(36),i=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=i(n(80)),u=i(n(26)),a=i(n(27)),s=i(n(4)),f=i(n(5)),c=i(n(81)),l=i(n(82)),h=i(n(83)),d=i(n(79)),p=n(38),y=r(n(37)),g=i(n(78)),m=n(77),v=function(t){function e(t,n){var r;return(0,s.default)(this,e),(r=(0,c.default)(this,(0,l.default)(e).call(this,p.Blockchains.EOS,y.WALLET_SUPPORT))).name="ScatterSockets",r.context=t,r.holderFns=n,r}return(0,h.default)(e,t),(0,f.default)(e,[{key:"connect",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new Promise(function(r){if(!t||!t.length)throw new Error("You must specify a name for this connection");n=Object.assign({initTimeout:1e4,linkTimeout:3e4},n),g.default.init(t,n.linkTimeout),g.default.link().then(function(){var t=(0,a.default)(u.default.mark(function t(n){return u.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return",!1);case 2:return e.holderFns.get().isExtension=!1,e.holderFns.get().wallet||(e.holderFns.get().wallet=e.name),t.abrupt("return",r(!0));case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}())})}},{key:"runAfterInterfacing",value:function(){var t=(0,a.default)(u.default.mark(function t(){var e=this;return u.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.holderFns.get().addEventHandler(function(t,n){return e.eventHandler(t,n)},"internal"),t.next=3,this.holderFns.get().getIdentityFromPermissions();case 3:return this.holderFns.get().identity=t.sent,t.abrupt("return",!0);case 5:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){var t,e=this,n=function(t,n){return(t||n)&&(e.holderFns.get().identity=t),n||t};return t={},(0,o.default)(t,m.WALLET_METHODS.disconnect,function(){return g.default.disconnect()}),(0,o.default)(t,m.WALLET_METHODS.isConnected,function(){return g.default.isConnected()}),(0,o.default)(t,m.WALLET_METHODS.isPaired,function(){return g.default.isPaired()}),(0,o.default)(t,m.WALLET_METHODS.addEventHandler,function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return g.default.addEventHandler(t,e)}),(0,o.default)(t,m.WALLET_METHODS.removeEventHandler,function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return g.default.removeEventHandler(t)}),(0,o.default)(t,m.WALLET_METHODS.listen,function(t){return g.default.addEventHandler(t)}),(0,o.default)(t,m.WALLET_METHODS.getVersion,function(){return g.default.sendApiRequest({type:"getVersion",payload:{}})}),(0,o.default)(t,m.WALLET_METHODS.getIdentity,function(t){return g.default.sendApiRequest({type:"getOrRequestIdentity",payload:{fields:t||{accounts:[e.holderFns.get().network]}}}).then(n)}),(0,o.default)(t,m.WALLET_METHODS.getIdentityFromPermissions,function(){return g.default.sendApiRequest({type:"identityFromPermissions",payload:{}}).then(n)}),(0,o.default)(t,m.WALLET_METHODS.forgetIdentity,function(){return g.default.sendApiRequest({type:"forgetIdentity",payload:{}}).then(function(t){return n(null,t)})}),(0,o.default)(t,m.WALLET_METHODS.updateIdentity,function(t){var e=t.name,r=t.kyc;return g.default.sendApiRequest({type:"updateIdentity",payload:{name:e,kyc:r}}).then(function(t){return t?n(t):null})}),(0,o.default)(t,m.WALLET_METHODS.authenticate,function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return g.default.sendApiRequest({type:"authenticate",payload:{nonce:t,data:e,publicKey:n}})}),(0,o.default)(t,m.WALLET_METHODS.getArbitrarySignature,function(t,e){return g.default.sendApiRequest({type:"requestArbitrarySignature",payload:{publicKey:t,data:e}})}),(0,o.default)(t,m.WALLET_METHODS.getPublicKey,function(t){return g.default.sendApiRequest({type:"getPublicKey",payload:{blockchain:t}})}),(0,o.default)(t,m.WALLET_METHODS.linkAccount,function(t,n){return g.default.sendApiRequest({type:"linkAccount",payload:{account:t,network:n||e.holderFns.get().network}})}),(0,o.default)(t,m.WALLET_METHODS.hasAccountFor,function(t){return g.default.sendApiRequest({type:"hasAccountFor",payload:{network:t||e.holderFns.get().network}})}),(0,o.default)(t,m.WALLET_METHODS.suggestNetwork,function(t){return g.default.sendApiRequest({type:"requestAddNetwork",payload:{network:t||e.holderFns.get().network}})}),(0,o.default)(t,m.WALLET_METHODS.requestTransfer,function(t,n,r){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};return g.default.sendApiRequest({type:"requestTransfer",payload:{network:t||e.holderFns.get().network,to:n,amount:r,options:i}})}),(0,o.default)(t,m.WALLET_METHODS.requestSignature,function(t){return g.default.sendApiRequest({type:"requestSignature",payload:t})}),(0,o.default)(t,m.WALLET_METHODS.createTransaction,function(t,n,r,i){return g.default.sendApiRequest({type:"createTransaction",payload:{blockchain:t,actions:n,account:r,network:i||e.holderFns.get().network}})}),(0,o.default)(t,m.WALLET_METHODS.addToken,function(t,n){return g.default.sendApiRequest({type:"addToken",payload:{token:t,network:n||e.holderFns.get().network}})}),t}},{key:"eventHandler",value:function(){var t=(0,a.default)(u.default.mark(function t(e){return u.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=e,t.next=t.t0===m.EVENTS.Disconnected?3:t.t0===m.EVENTS.LoggedOut?5:9;break;case 3:return this.holderFns.get().identity=null,t.abrupt("break",9);case 5:return t.next=7,this.holderFns.get().getIdentityFromPermissions();case 7:return this.holderFns.get().identity=t.sent,t.abrupt("break",9);case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),e}(d.default);e.default=v},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e){function n(e,r){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,r)}t.exports=n},function(t,e,n){"use strict";var r=n(36),i=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=i(n(80)),u=i(n(4)),a=i(n(5)),s=i(n(81)),f=i(n(82)),c=i(n(83)),l=i(n(26)),h=i(n(27)),d=r(n(37)),p=i(n(79)),y=n(38),g=r(n(137)),m=(i(n(78)),!1);"undefined"!=typeof window&&"undefined"!=typeof document&&(void 0===window.scatter?document.addEventListener("scatterLoaded",function(){return m=!0}):m=!0);var v=function(){var t=(0,h.default)(l.default.mark(function t(){var e,n,r=arguments;return l.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=0<r.length&&void 0!==r[0]?r[0]:null,n=1<r.length&&void 0!==r[1]?r[1]:0,t.abrupt("return",new Promise(function(t){return e||(e=t),m?e(!0):5<n?e(!1):void setTimeout(function(){return v(e,n+1)},100)}));case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}(),b=function(t){function e(t,n){var r;return(0,u.default)(this,e),(r=(0,s.default)(this,(0,f.default)(e).call(this,y.Blockchains.EOS,d.WALLET_SUPPORT))).name="ScatterExtension",r.context=t,r.holderFns=n,r}return(0,c.default)(e,t),(0,a.default)(e,[{key:"connect",value:function(){var t=(0,h.default)(l.default.mark(function t(){var e=this;return l.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise(function(){var t=(0,h.default)(l.default.mark(function t(n){return l.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,v();case 2:t.sent&&(!e.holderFns.get().wallet&&(e.holderFns.get().wallet=e.name),n(!0));case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()));case 1:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"runBeforeInterfacing",value:function(){var t=(0,h.default)(l.default.mark(function t(){var e,n,r,i,o=this;return l.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return(e=this.context.network)&&(n=window.scatter.getIdentity.bind(window.scatter),r=window.scatter.useIdentity.bind(window.scatter),window.scatter.getIdentity=function(t){return n(t||{accounts:[e]}).then(function(t){return o.holderFns.get().identity=t,r(t),t})},i=window.scatter.suggestNetwork.bind(window.scatter),window.scatter.suggestNetwork=function(t){return i(t||e)}),this.holderFns.get().wallet===this.name&&(window.scatter.wallet=this.name),this.holderFns.set(window.scatter),this.context=this.holderFns.get(),t.abrupt("return",!0);case 6:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"runAfterInterfacing",value:function(){var t=(0,h.default)(l.default.mark(function t(){return l.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.context.isExtension=!0,this.context.connect=this.connect,t.abrupt("return",!0);case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){return(0,o.default)({},g.WALLET_METHODS.getIdentity,function(){console.log("getid")})}}]),e}(p.default);e.default=b},function(t,e,n){"use strict";var r=n(8);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(26)),o=r(n(27)),u=r(n(4)),a=r(n(5)),s=r(n(81)),f=r(n(82)),c=r(n(83)),l=n(77),h=l.SocketService,d=function(t,e){return new Proxy(t,e)},p=function(t){function e(){return(0,u.default)(this,e),(0,s.default)(this,(0,f.default)(e).call(this,l.Blockchains.EOS,l.PluginTypes.BLOCKCHAIN_SUPPORT))}return(0,c.default)(e,t),(0,a.default)(e,[{key:"setSocketService",value:function(t){h=t}},{key:"hookProvider",value:function(t){return function(e){return new Promise(function(n,r){var i=Object.assign(e,{blockchain:l.Blockchains.EOS,network:t,requiredFields:{}});h.sendApiRequest({type:"requestSignature",payload:i}).then(function(t){return n(t.signatures)}).catch(function(t){return r(t)})})}}},{key:"signatureProvider",value:function(){var t=0>=arguments.length?void 0:arguments[0];return function(e,n){var r,u=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},a=(e=l.Network.fromJson(e)).hasOwnProperty("chainId")&&e.chainId.length?e.chainId:u.chainId,s=function(){var t=(0,o.default)(i.default.mark(function t(e){return i.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",r(e));case 1:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}();return d(n({httpEndpoint:e.fullhost(),chainId:a,signProvider:s}),{get:function(n,u){if("function"!=typeof n[u])return n[u];var a=null;return function(){for(var s=arguments.length,f=Array(s),c=0;c<s;c++)f[c]=arguments[c];if(f.find(function(t){return t.hasOwnProperty("keyProvider")}))throw Error.usedKeyProvider();return r=function(){var n=(0,o.default)(i.default.mark(function n(r){var o,u,s,c;return i.default.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t(),o=f.find(function(t){return t.hasOwnProperty("requiredFields")})||{requiredFields:{}},u=Object.assign(r,{blockchain:l.Blockchains.EOS,network:e,requiredFields:o.requiredFields}),n.next=5,h.sendApiRequest({type:"requestSignature",payload:u});case 5:if(s=n.sent){n.next=8;break}return n.abrupt("return",null);case 8:if(!s.hasOwnProperty("signatures")){n.next=13;break}return a=s.returnedFields,(c=f.find(function(t){return t.hasOwnProperty("signProvider")}))&&s.signatures.push(c.signProvider(r.buf,r.sign)),n.abrupt("return",s.signatures);case 13:return n.abrupt("return",s);case 14:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}(),new Promise(function(t,e){n[u].apply(n,f).then(function(e){return e.hasOwnProperty("fc")?void t(d(e,{get:function(t,e){return"then"===e?t[e]:function(){for(var n=arguments.length,r=Array(n),u=0;u<n;u++)r[u]=arguments[u];return new Promise(function(){var n=(0,o.default)(i.default.mark(function n(o,u){return i.default.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:t[e].apply(t,r).then(function(t){o(Object.assign(t,{returnedFields:a}))}).catch(u);case 1:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}())}}})):t(Object.assign(e,{returnedFields:a}))}).catch(e)})}}})}}}]),e}(l.Plugin);e.default=p,"undefined"!=typeof window&&(window.ScatterEOS=p)},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(299)),r(n(300))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(24),a=n(84),s=n(25),f=n(48),c=s.createLogger("readingPlayer"),l={account:{name:"eosio",authority:"active"}},h=function(t){function e(e){var n=t.call(this,e)||this;return n._head_block_num=0,n._head_retry_count=0,n._eosNodes=[],n._identity=l.account,n._head_block_num=0,n._head_retry_count=0,c.info("[EosReading] ==> Create reading nodes \nCONFIGS:",JSON.stringify(n._nodeConfigs)),n._eosNodes=n._nodeConfigs.map(function(t){var e=u.Eos(t);return e.__conf=t,e}),n}return r(e,t),Object.defineProperty(e.prototype,"eosClient",{get:function(){if(!this._eosNodes||this._eosNodes.length<=0)throw new Error("EosUtil : No Avaliable Nodes.");return this._eosNodes[0]},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this._identity]})})},e.prototype.checkNodes=function(t,e,n){return void 0===t&&(t=15e3),void 0===e&&(e=4),void 0===n&&(n=1e3),i(this,void 0,void 0,function(){var r,i,u,a,s,c;return o(this,function(o){switch(o.label){case 0:return[4,f.forMs(t)];case 1:o.sent(),console.log("[EosReading] ==> Start Checking Nodes ",this.eosClient.__conf.httpEndpoint,"AT",Date.now()),o.label=2;case 2:0,o.label=3;case 3:return o.trys.push([3,9,,17]),[4,this.eosClient.getInfo({})];case 4:if(r=o.sent(),this._head_retry_count=0,r.head_block_num>this._head_block_num&&(this._head_block_num=r.head_block_num,console.log("[EosReading] ==> | Info : new head block num",this._head_block_num,"| Node: ",this.eosClient.__conf.httpEndpoint)),0===(i=Math.floor(Math.random()*this._eosNodes.length)))return[3,19];o.label=5;case 5:return o.trys.push([5,7,,8]),console.log("[EosReading] ==> | Info : try pick another node by block height | Node: ",this._eosNodes[i].__conf.httpEndpoint),[4,this._eosNodes[i].getInfo({})];case 6:return(u=o.sent()).head_block_num-this._head_block_num>n?(c=this._eosNodes[0],this._eosNodes[0]=this._eosNodes[i],this._eosNodes[i]=c,console.log("[EosReading] ==> | Info : new node selected (by head block) | OLD: ",c.__conf.httpEndpoint,"| NEW:",this.eosClient.__conf.httpEndpoint)):console.log("[EosReading] ==> | Info : no needs to switch node for block height | ",u.head_block_num,"-",this._head_block_num,"<",n),[3,8];case 7:return o.sent(),[3,19];case 8:return[3,17];case 9:return o.sent(),this._head_retry_count<e?(console.log("[EosReading] ==> | Error : Current node error | RETRY :",this._head_retry_count,"| NODE: ",this._eosNodes[0].__conf.httpEndpoint),this._head_retry_count+=1,[3,16]):[3,10];case 10:console.log("[EosReading] ==> | Error : Current node error | RETRY : Failed | Node:",this._eosNodes[0].__conf.httpEndpoint),a=1,o.label=11;case 11:if(!(a<this._eosNodes.length))return[3,16];o.label=12;case 12:return o.trys.push([12,14,,15]),[4,this._eosNodes[a].getInfo({})];case 13:return(s=o.sent()).head_block_num>=this._head_block_num?(c=this._eosNodes[0],this._eosNodes[0]=this._eosNodes[a],this._eosNodes[a]=c,console.log("[EosReading] ==> Info : new node selected | OLD: ",c.__conf.httpEndpoint,"| NEW:",this.eosClient.__conf.httpEndpoint),[3,16]):(console.log("[EosReading] ==> Info : test node passed | Node: ",this._eosNodes[a].__conf.httpEndpoint,"Test: ",s.head_block_num,"<",this._head_block_num),[3,15]);case 14:return o.sent(),console.log("[EosReading] ==> Warning : test node error | Node: ",this._eosNodes[a].__conf.httpEndpoint),[3,15];case 15:return a++,[3,11];case 16:return[3,17];case 17:return[4,f.forMs(2e3)];case 18:return o.sent(),[3,2];case 19:return[3,0];case 20:return[2]}})})},e}(a.MultiSourcePlayer);e.ReadingPlayer=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(301))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},u=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(84),s=n(24),f=n(25),c=n(48),l=n(302),h=f.createLogger("signPlayer"),d={account:{name:"eosio",authority:"active"},options:{maxFailureRate:.499,failureRateThreshold:.1,maxContinuousFailure:3,cleaningTimeInterval:12e4,revivalTimeInterval:6e5,responseIntervalThreshold:1e3,responseIntervalDecline:100,maxCallPromiseExceedTime:18e4}},p=function(t){function e(e){var n=t.call(this,e)||this;n._concurrentCount=0;var r=e.account,o=e.options;return n._identity=i({},d.account,r),n._options=i({},d.options,o),n._nodeStates=new l.NodeStatMgr(n._nodeConfigs,n._options),n}return r(e,t),Object.defineProperty(e.prototype,"eosClient",{get:function(){this._nodeStates.setTheBestNodeToCurrent();var t=this._nodeStates.getCurNodeConf();return new s.Eos(t)},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return o(this,void 0,void 0,function(){return u(this,function(t){if(!this._identity)throw new Error("identity has not been set");return[2,this._identity]})})},e.prototype.setIdentity=function(t){this._identity=t},e.prototype.lockChain=function(){return this.chain},e.prototype.dynamicCall=function(t,e,n,r){return o(this,void 0,void 0,function(){var i,o,a,s,f,l,h;return u(this,function(u){switch(u.label){case 0:this._concurrentCount+=1,i=this.lockChain(),o=(new Date).getTime(),a=this._nodeStates.getCurNodeConf().httpEndpoint||"",s=r||{actor:this._identity.name,permission:this._identity.authority},this.log("START",a,t,e,n,s,this._nodeStates.getCurNodeStat(),"Concurrent count => "+this._concurrentCount+" "),u.label=1;case 1:return u.trys.push([1,3,,4]),[4,c.timeoutPromise(this._options.maxCallPromiseExceedTime||5e4,i.call(t,e,n,s)).catch(function(t){throw t})];case 2:return f=u.sent(),h=this._nodeStates.markSendSuccess(o),this.log("SUCCESS",a,t,e,n,s,h),this._concurrentCount-=1,[2,f];case 3:throw l=u.sent(),h=this._nodeStates.markSendFailed(o),this.log("FAILED",a,t,e,n,s,h,"ERROR => "+(l&&l.message?l.message:l)),this._concurrentCount-=1,l;case 4:return[2]}})})},e.prototype.log=function(t,e,n,r,i,o,u){for(var a=[],s=7;s<arguments.length;s++)a[s-7]=arguments[s];h.info.apply(h,["[signPlayer] Call chain [[ "+e+" ]] "+n+"."+r+"("+JSON.stringify(i)+") by "+o.actor+"@"+o.permission+" [[["+t+"]]] :\nNode status => "+JSON.stringify(u)+"\n"].concat(a))},e}(a.MultiSourcePlayer);e.SignPlayer=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(25).createLogger("signPlayer:nodeStat"),i=function(){return function(){this.error_counts=0,this.total_counts=1,this.continuous_failure=0,this.enabled=!0,this.response_interval=0,this.revival_time=(new Date).getTime(),this.cleaning_time=(new Date).getTime(),this.record_total_counts=0,this.record_total_success=0,this.record_total_fuse=0,this.record_total_failed=0}}();e.NodeStat=i;var o=function(){function t(t,e){this._nodeConfigs=t,this._options=e,this._nodeStatus=[],this._currentNodeIndex=0,this.initNodeStatus()}return t.prototype.initNodeStatus=function(){for(var t=0;t<this._nodeConfigs.length;t++)this._nodeStatus.push(new i);this.setTheBestNodeToCurrent()},t.prototype.setTheBestNodeToCurrent=function(){for(var t=Math.floor(Math.random()*this._nodeStatus.length),e=(new Date).getTime(),n=0;n!==this._nodeStatus.length;n++){var i=this.tryClean(n),o=i.error_counts/i.total_counts,u=e>=i.revival_time;if(i.enabled&&(o>=(this._options.maxFailureRate||.5)||i.continuous_failure>=(this._options.maxContinuousFailure||5))&&(i.enabled=!1,i.revival_time=e+(this._options.revivalTimeInterval||6e5),i.error_counts=0,i.total_counts=1,i.continuous_failure=0,i.record_total_fuse=(i.record_total_fuse||0)+1,r.info("[eos_call_util] fuse "+this._nodeConfigs[n].httpEndpoint)),i.enabled||u){var a=this._nodeStatus[t],s=a.error_counts/a.total_counts;(a.continuous_failure>i.continuous_failure||s>o+(this._options.failureRateThreshold||.1)||a.response_interval>i.response_interval+(this._options.responseIntervalThreshold||1e3))&&(t=n)}}this._currentNodeIndex=t},t.prototype.getNodeConf=function(t){return this._nodeConfigs[t]},t.prototype.getNodeStat=function(t){return this._nodeStatus[t]},t.prototype.tryClean=function(t){var e=this.getNodeStat(t),n=(new Date).getTime();return e.cleaning_time>n?e:(r.verbose("execute clean ",e),e.error_counts=Math.max(0,e.error_counts-1),e.total_counts=Math.max(1,e.total_counts-1),e.continuous_failure=Math.max(0,e.continuous_failure-1),e.response_interval=Math.max(0,e.response_interval-(this._options.responseIntervalDecline||1e3)),e.cleaning_time=n+(this._options.cleaningTimeInterval||6e4),e)},t.prototype.getCurNodeConf=function(){return this.getNodeConf(this._currentNodeIndex)},t.prototype.getCurNodeStat=function(){return this.getNodeStat(this._currentNodeIndex)},t.prototype.markSendSuccess=function(t){var e=this.getCurNodeStat(),n=(new Date).getTime(),i=n-t;return e.response_interval=(e.response_interval+i)/2,e.continuous_failure=0,e.enabled=!0,e.cleaning_time=n+(this._options.cleaningTimeInterval||18e4),e.total_counts+=1,e.record_total_success=(e.record_total_success||0)+1,e.record_total_counts=(e.record_total_counts||0)+1,r.verbose("send succeed > ",e.continuous_failure,e.error_counts,e.total_counts),e},t.prototype.markSendFailed=function(t){var e=this.getCurNodeStat();return e.error_counts+=1,e.continuous_failure+=1,e.revival_time=t+(this._options.revivalTimeInterval||18e4),e.total_counts+=1,e.record_total_failed=(e.record_total_failed||0)+1,e.record_total_counts=(e.record_total_counts||0)+1,r.verbose("send failed > ",e.continuous_failure,e.error_counts,e.total_counts),e},t}();e.NodeStatMgr=o},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(75)),r(n(133)),r(n(134))},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,a)}s((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){void 0===t&&(t={mgrcontract:"mykeymanager"}),this.config=t}return t.prototype.getSignKey=function(t,e){return r(this,void 0,void 0,function(){var n,r,o;return i(this,function(i){switch(i.label){case 0:return n="keydata",r=3,[4,e.getTableAll(this.config.mgrcontract,n,t,r,r+1)];case 1:return(o=i.sent())?[2,o[0].key.pubkey]:[2,""]}})})},Object.defineProperty(t.prototype,"perm",{get:function(){return this.config.mgrcontract+"@active"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"signKeyProvider",{get:function(){var t,e=this;return(t={})[this.perm]=function(t,n){return r(e,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getSignKey(t,n)];case 1:return[2,e.sent()]}})})},t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"validatorProvider",{get:function(){var t,e=this;return(t={})[this.perm]=function(t,n,o){return r(e,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getSignKey(t,o)];case 1:return[2,e.sent()===n]}})})},t},enumerable:!0,configurable:!0}),t}();e.MykeyPlugin=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
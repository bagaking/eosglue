!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=103)}([function(t,e,r){var n=r(2),i=n.Buffer;function u(t,e){for(var r in t)e[r]=t[r]}function o(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(u(n,e),e.Buffer=o),u(i,o),o.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},o.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},o.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},o.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(136),i=r(137),u=r(72);function o(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,r){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,r)}function f(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=l(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!a.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=s(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(a.isBuffer(e)){var r=0|p(e.length);return 0===(t=s(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?s(t,0):l(t,e);if("Buffer"===e.type&&u(e.data))return l(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=s(t,e<0?0:0|p(e)),!a.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=s(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return P(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return P(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function g(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var u,o=1,s=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,s/=2,a/=2,r/=2}function f(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var c=-1;for(u=r;u<s;u++)if(f(t,u)===f(e,-1===c?0:u-c)){if(-1===c&&(c=u),u-c+1===a)return c*o}else-1!==c&&(u-=u-c),c=-1}else for(r+a>s&&(r=s-a),u=r;u>=0;u--){for(var h=!0,l=0;l<a;l++)if(f(t,u+l)!==f(e,l)){h=!1;break}if(h)return u}return-1}function v(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var u=e.length;if(u%2!=0)throw new TypeError("Invalid hex string");n>u/2&&(n=u/2);for(var o=0;o<n;++o){var s=parseInt(e.substr(2*o,2),16);if(isNaN(s))return o;t[r+o]=s}return o}function b(t,e,r,n){return z(P(e,t.length-r),t,r,n)}function w(t,e,r,n){return z(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function E(t,e,r,n){return w(t,e,r,n)}function _(t,e,r,n){return z(q(e),t,r,n)}function A(t,e,r,n){return z(function(t,e){for(var r,n,i,u=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,i=r%256,u.push(i),u.push(n);return u}(e,t.length-r),t,r,n)}function B(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function C(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var u,o,s,a,f=t[i],c=null,h=f>239?4:f>223?3:f>191?2:1;if(i+h<=r)switch(h){case 1:f<128&&(c=f);break;case 2:128==(192&(u=t[i+1]))&&(a=(31&f)<<6|63&u)>127&&(c=a);break;case 3:u=t[i+1],o=t[i+2],128==(192&u)&&128==(192&o)&&(a=(15&f)<<12|(63&u)<<6|63&o)>2047&&(a<55296||a>57343)&&(c=a);break;case 4:u=t[i+1],o=t[i+2],s=t[i+3],128==(192&u)&&128==(192&o)&&128==(192&s)&&(a=(15&f)<<18|(63&u)<<12|(63&o)<<6|63&s)>65535&&a<1114112&&(c=a)}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=h}return function(t){var e=t.length;if(e<=F)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=F));return r}(n)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,r){return f(null,t,e,r)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,r){return function(t,e,r,n){return c(e),e<=0?s(t,e):void 0!==r?"string"==typeof n?s(t,e).fill(r,n):s(t,e).fill(r):s(t,e)}(null,t,e,r)},a.allocUnsafe=function(t){return h(null,t)},a.allocUnsafeSlow=function(t){return h(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,u=Math.min(r,n);i<u;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!u(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=a.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(!a.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},a.byteLength=d,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):function(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return S(this,e,r);case"utf8":case"utf-8":return C(this,e,r);case"ascii":return D(this,e,r);case"latin1":case"binary":return x(this,e,r);case"base64":return B(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,r,n,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(e>>>=0,r>>>=0,n>>>=0,i>>>=0,this===t)return 0;for(var u=i-n,o=r-e,s=Math.min(u,o),f=this.slice(n,i),c=t.slice(e,r),h=0;h<s;++h)if(f[h]!==c[h]){u=f[h],o=c[h];break}return u<o?-1:o<u?1:0},a.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},a.prototype.indexOf=function(t,e,r){return g(this,t,e,r,!0)},a.prototype.lastIndexOf=function(t,e,r){return g(this,t,e,r,!1)},a.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var u=!1;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return b(this,t,e,r);case"ascii":return w(this,t,e,r);case"latin1":case"binary":return E(this,t,e,r);case"base64":return _(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(u)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),u=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var F=4096;function D(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function S(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",u=e;u<r;++u)i+=U(t[u]);return i}function T(t,e,r){for(var n=t.slice(e,r),i="",u=0;u<n.length;u+=2)i+=String.fromCharCode(n[u]+256*n[u+1]);return i}function k(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function M(t,e,r,n,i,u){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<u)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function I(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,u=Math.min(t.length-r,2);i<u;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function O(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,u=Math.min(t.length-r,4);i<u;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function L(t,e,r,n,i,u){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function R(t,e,r,n,u){return u||L(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function j(t,e,r,n,u){return u||L(t,0,r,8),i.write(t,e,r,n,52,8),r+8}a.prototype.slice=function(t,e){var r,n=this.length;if(t=~~t,e=void 0===e?n:~~e,t<0?(t+=n)<0&&(t=0):t>n&&(t=n),e<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;r=new a(i,void 0);for(var u=0;u<i;++u)r[u]=this[u+t]}return r},a.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=this[t],i=1,u=0;++u<e&&(i*=256);)n+=this[t+u]*i;return n},a.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},a.prototype.readUInt8=function(t,e){return e||k(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||k(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||k(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=this[t],i=1,u=0;++u<e&&(i*=256);)n+=this[t+u]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||k(t,e,this.length);for(var n=e,i=1,u=this[t+--n];n>0&&(i*=256);)u+=this[t+--n]*i;return u>=(i*=128)&&(u-=Math.pow(2,8*e)),u},a.prototype.readInt8=function(t,e){return e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||k(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt16BE=function(t,e){e||k(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt32LE=function(t,e){return e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||k(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||k(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||k(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||k(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||M(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,u=0;for(this[e]=255&t;++u<r&&(i*=256);)this[e+u]=t/i&255;return e+r},a.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||M(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,u=1;for(this[e+i]=255&t;--i>=0&&(u*=256);)this[e+i]=t/u&255;return e+r},a.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):O(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);M(this,t,e,r,i-1,-i)}var u=0,o=1,s=0;for(this[e]=255&t;++u<r&&(o*=256);)t<0&&0===s&&0!==this[e+u-1]&&(s=1),this[e+u]=(t/o>>0)-s&255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);M(this,t,e,r,i-1,-i)}var u=r-1,o=1,s=0;for(this[e+u]=255&t;--u>=0&&(o*=256);)t<0&&0===s&&0!==this[e+u+1]&&(s=1),this[e+u]=(t/o>>0)-s&255;return e+r},a.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):I(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):I(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):O(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||M(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,r){return R(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return R(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return j(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return j(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,u=n-r;if(this===t&&r<e&&e<n)for(i=u-1;i>=0;--i)t[i+e]=this[i+r];else if(u<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<u;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+u),e);return u},a.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!a.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var u;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(u=e;u<r;++u)this[u]=t;else{var o=a.isBuffer(t)?t:P(new a(t,n).toString()),s=o.length;for(u=0;u<r-e;++u)this[u+e]=o[u%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function P(t,e){var r;e=e||1/0;for(var n=t.length,i=null,u=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&u.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&u.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&u.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&u.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;u.push(r)}else if(r<2048){if((e-=2)<0)break;u.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;u.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;u.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return u}function q(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(5))},function(t,e,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function n(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,i=0,u=Math.min(r,n);i<u;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var u=r(160),o=Object.prototype.hasOwnProperty,s=Array.prototype.slice,a="foo"===function(){}.name;function f(t){return Object.prototype.toString.call(t)}function c(t){return!i(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var h=t.exports=m,l=/\s*function\s+([^\(\s]*)\s*/;function p(t){if(u.isFunction(t)){if(a)return t.name;var e=t.toString().match(l);return e&&e[1]}}function d(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function y(t){if(a||!u.isFunction(t))return u.inspect(t);var e=p(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,r,n,i){throw new h.AssertionError({message:r,actual:t,expected:e,operator:n,stackStartFunction:i})}function m(t,e){t||g(t,!0,e,"==",h.ok)}function v(t,e,r,o){if(t===e)return!0;if(i(t)&&i(e))return 0===n(t,e);if(u.isDate(t)&&u.isDate(e))return t.getTime()===e.getTime();if(u.isRegExp(t)&&u.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(c(t)&&c(e)&&f(t)===f(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===n(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var a=(o=o||{actual:[],expected:[]}).actual.indexOf(t);return-1!==a&&a===o.expected.indexOf(e)||(o.actual.push(t),o.expected.push(e),function(t,e,r,n){if(null===t||void 0===t||null===e||void 0===e)return!1;if(u.isPrimitive(t)||u.isPrimitive(e))return t===e;if(r&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=b(t),o=b(e);if(i&&!o||!i&&o)return!1;if(i)return t=s.call(t),e=s.call(e),v(t,e,r);var a,f,c=_(t),h=_(e);if(c.length!==h.length)return!1;for(c.sort(),h.sort(),f=c.length-1;f>=0;f--)if(c[f]!==h[f])return!1;for(f=c.length-1;f>=0;f--)if(a=c[f],!v(t[a],e[a],r,n))return!1;return!0}(t,e,r,o))}return r?t===e:t==e}function b(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function w(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function E(t,e,r,n){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),t&&!i&&g(i,r,"Missing expected exception"+n);var o="string"==typeof n,s=!t&&u.isError(i),a=!t&&i&&!r;if((s&&o&&w(i,r)||a)&&g(i,r,"Got unwanted exception"+n),t&&i&&r&&!w(i,r)||!t&&i)throw i}h.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return d(y(t.actual),128)+" "+t.operator+" "+d(y(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var r=new Error;if(r.stack){var n=r.stack,i=p(e),u=n.indexOf("\n"+i);if(u>=0){var o=n.indexOf("\n",u+1);n=n.substring(o+1)}this.stack=n}}},u.inherits(h.AssertionError,Error),h.fail=g,h.ok=m,h.equal=function(t,e,r){t!=e&&g(t,e,r,"==",h.equal)},h.notEqual=function(t,e,r){t==e&&g(t,e,r,"!=",h.notEqual)},h.deepEqual=function(t,e,r){v(t,e,!1)||g(t,e,r,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(t,e,r){v(t,e,!0)||g(t,e,r,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(t,e,r){v(t,e,!1)&&g(t,e,r,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function t(e,r,n){v(e,r,!0)&&g(e,r,n,"notDeepStrictEqual",t)},h.strictEqual=function(t,e,r){t!==e&&g(t,e,r,"===",h.strictEqual)},h.notStrictEqual=function(t,e,r){t===e&&g(t,e,r,"!==",h.notStrictEqual)},h.throws=function(t,e,r){E(!0,t,e,r)},h.doesNotThrow=function(t,e,r){E(!1,t,e,r)},h.ifError=function(t){if(t)throw t};var _=Object.keys||function(t){var e=[];for(var r in t)o.call(t,r)&&e.push(r);return e}}).call(this,r(5))},function(t,e,r){var n=r(43)("wks"),i=r(31),u=r(6).Symbol,o="function"==typeof u;(t.exports=function(t){return n[t]||(n[t]=o&&u[t]||(o?u:i)("Symbol."+t))}).store=n},function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e,r){var n=r(88);r(163),t.exports=n},function(t,e){var r=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(0).Buffer,i=r(79).Transform,u=r(54).StringDecoder;function o(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(1)(o,i),o.prototype.update=function(t,e,r){"string"==typeof t&&(t=n.from(t,e));var i=this._update(t);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},o.prototype.setAutoPadding=function(){},o.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},o.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},o.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},o.prototype._transform=function(t,e,r){var n;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){n=t}finally{r(n)}},o.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},o.prototype._finalOrDigest=function(t){var e=this.__final()||n.alloc(0);return t&&(e=this._toString(e,t,!0)),e},o.prototype._toString=function(t,e,r){if(this._decoder||(this._decoder=new u(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var n=this._decoder.write(t);return r&&(n+=this._decoder.end()),n},t.exports=o},function(t,e,r){"use strict";var n=r(33),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=h;var u=r(25);u.inherits=r(1);var o=r(80),s=r(53);u.inherits(h,o);for(var a=i(s.prototype),f=0;f<a.length;f++){var c=a[f];h.prototype[c]||(h.prototype[c]=s.prototype[c])}function h(t){if(!(this instanceof h))return new h(t);o.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||n.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),n.nextTick(e,t)}},function(t,e,r){"use strict";var n=r(57),i=r(170);t.exports={sha1:function(t,e){return n("sha1").update(t).digest(e)},sha256:function(t,e){return n("sha256").update(t).digest(e)},sha512:function(t,e){return n("sha512").update(t).digest(e)},HmacSHA256:function(t,e){return i("sha256",e).update(t).digest()},ripemd160:function(t){return n("rmd160").update(t).digest()}}},function(t,e,r){var n=r(14),i=r(30);t.exports=r(15)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(21),i=r(64),u=r(39),o=Object.defineProperty;e.f=r(15)?Object.defineProperty:function(t,e,r){if(n(t),e=u(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){t.exports=!r(29)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(114),i=r(38);t.exports=function(t){return n(i(t))}},function(t,e){var r,n,i=t.exports={};function u(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===u||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:u}catch(t){r=u}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var a,f=[],c=!1,h=-1;function l(){c&&a&&(c=!1,a.length?f=a.concat(f):h=-1,f.length&&p())}function p(){if(!c){var t=s(l);c=!0;for(var e=f.length;e;){for(a=f,f=[];++h<e;)a&&a[h].run();h=-1,e=f.length}a=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];f.push(new d(t,e)),1!==f.length||c||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){var n,i,u;
/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */i=[r(138)],void 0===(u="function"==typeof(n=function(t){"use strict";var e=function(t,r,i){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===r&&(r=e.DEFAULT_ENDIAN),void 0===i&&(i=e.DEFAULT_NOASSERT),!i){if((t|=0)<0)throw RangeError("Illegal capacity");r=!!r,i=!!i}this.buffer=0===t?n:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=r,this.noAssert=i};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var r=e.prototype;r.__isByteBuffer__,Object.defineProperty(r,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var n=new ArrayBuffer(0),i=String.fromCharCode;function u(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function o(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+i.apply(String,t);t.length+arguments.length>1024&&(e.push(i.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function s(t,e,r,n,i){var u,o,s=8*i-n-1,a=(1<<s)-1,f=a>>1,c=-7,h=r?i-1:0,l=r?-1:1,p=t[e+h];for(h+=l,u=p&(1<<-c)-1,p>>=-c,c+=s;c>0;u=256*u+t[e+h],h+=l,c-=8);for(o=u&(1<<-c)-1,u>>=-c,c+=n;c>0;o=256*o+t[e+h],h+=l,c-=8);if(0===u)u=1-f;else{if(u===a)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),u-=f}return(p?-1:1)*o*Math.pow(2,u-n)}function a(t,e,r,n,i,u){var o,s,a,f=8*u-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:u-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-o))<1&&(o--,a*=2),(e+=o+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(o++,a/=2),o+h>=c?(s=0,o=c):o+h>=1?(s=(e*a-1)*Math.pow(2,i),o+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;t[r+p]=255&s,p+=d,s/=256,i-=8);for(o=o<<i|s,f+=i;f>0;t[r+p]=255&o,p+=d,o/=256,f-=8);t[r+p-d]|=128*y}e.accessor=function(){return Uint8Array},e.allocate=function(t,r,n){return new e(t,r,n)},e.concat=function(t,r,n,i){"boolean"!=typeof r&&"string"==typeof r||(i=n,n=r,r=void 0);for(var u,o=0,s=0,a=t.length;s<a;++s)e.isByteBuffer(t[s])||(t[s]=e.wrap(t[s],r)),(u=t[s].limit-t[s].offset)>0&&(o+=u);if(0===o)return new e(0,n,i);var f,c=new e(o,n,i);for(s=0;s<a;)(u=(f=t[s++]).limit-f.offset)<=0||(c.view.set(f.view.subarray(f.offset,f.limit),c.offset),c.offset+=u);return c.limit=c.offset,c.offset=0,c},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,n,i,u){if("string"!=typeof n&&(u=i,i=n,n=void 0),"string"==typeof t)switch(void 0===n&&(n="utf8"),n){case"base64":return e.fromBase64(t,i);case"hex":return e.fromHex(t,i);case"binary":return e.fromBinary(t,i);case"utf8":return e.fromUTF8(t,i);case"debug":return e.fromDebug(t,i);default:throw Error("Unsupported encoding: "+n)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var o;if(e.isByteBuffer(t))return(o=r.clone.call(t)).markedOffset=-1,o;if(t instanceof Uint8Array)o=new e(0,i,u),t.length>0&&(o.buffer=t.buffer,o.offset=t.byteOffset,o.limit=t.byteOffset+t.byteLength,o.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)o=new e(0,i,u),t.byteLength>0&&(o.buffer=t,o.offset=0,o.limit=t.byteLength,o.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(o=new e(t.length,i,u)).limit=t.length;for(var s=0;s<t.length;++s)o.view[s]=t[s]}return o},r.writeBitSet=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n,i=e,u=t.length,o=u>>3,s=0;for(e+=this.writeVarint32(u,e);o--;)n=1&!!t[s++]|(1&!!t[s++])<<1|(1&!!t[s++])<<2|(1&!!t[s++])<<3|(1&!!t[s++])<<4|(1&!!t[s++])<<5|(1&!!t[s++])<<6|(1&!!t[s++])<<7,this.writeByte(n,e++);if(s<u){var a=0;for(n=0;s<u;)n|=(1&!!t[s++])<<a++;this.writeByte(n,e++)}return r?(this.offset=e,this):e-i},r.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var r,n=this.readVarint32(t),i=n.value,u=i>>3,o=0,s=[];for(t+=n.length;u--;)r=this.readByte(t++),s[o++]=!!(1&r),s[o++]=!!(2&r),s[o++]=!!(4&r),s[o++]=!!(8&r),s[o++]=!!(16&r),s[o++]=!!(32&r),s[o++]=!!(64&r),s[o++]=!!(128&r);if(o<i){var a=0;for(r=this.readByte(t++);o<i;)s[o++]=!!(r>>a++&1)}return e&&(this.offset=t),s},r.readBytes=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var n=this.slice(e,e+t);return r&&(this.offset+=t),n},r.writeBytes=r.append,r.writeInt8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeByte=r.writeInt8,r.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return 128==(128&r)&&(r=-(255-r+1)),e&&(this.offset+=1),r},r.readByte=r.readInt8,r.writeUint8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeUInt8=r.writeUint8,r.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return e&&(this.offset+=1),r},r.readUInt8=r.readUint8,r.writeInt16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeShort=r.writeInt16,r.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),32768==(32768&r)&&(r=-(65535-r+1)),e&&(this.offset+=2),r},r.readShort=r.readInt16,r.writeUint16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeUInt16=r.writeUint16,r.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),e&&(this.offset+=2),r},r.readUInt16=r.readUint16,r.writeInt32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeInt=r.writeInt32,r.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),r|=0,e&&(this.offset+=4),r},r.readInt=r.readInt32,r.writeUint32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeUInt32=r.writeUint32,r.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),e&&(this.offset+=4),r},r.readUInt32=r.readUint32,t&&(r.writeInt64=function(e,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var i=this.buffer.byteLength;r>i&&this.resize((i*=2)>r?i:r),r-=8;var u=e.low,o=e.high;return this.littleEndian?(this.view[r+3]=u>>>24&255,this.view[r+2]=u>>>16&255,this.view[r+1]=u>>>8&255,this.view[r]=255&u,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=u>>>24&255,this.view[r+1]=u>>>16&255,this.view[r+2]=u>>>8&255,this.view[r+3]=255&u),n&&(this.offset+=8),this},r.writeLong=r.writeInt64,r.readInt64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var n=0,i=0;this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0);var u=new t(n,i,!1);return r&&(this.offset+=8),u},r.readLong=r.readInt64,r.writeUint64=function(e,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var i=this.buffer.byteLength;r>i&&this.resize((i*=2)>r?i:r),r-=8;var u=e.low,o=e.high;return this.littleEndian?(this.view[r+3]=u>>>24&255,this.view[r+2]=u>>>16&255,this.view[r+1]=u>>>8&255,this.view[r]=255&u,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=u>>>24&255,this.view[r+1]=u>>>16&255,this.view[r+2]=u>>>8&255,this.view[r+3]=255&u),n&&(this.offset+=8),this},r.writeUInt64=r.writeUint64,r.readUint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var n=0,i=0;this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0);var u=new t(n,i,!0);return r&&(this.offset+=8),u},r.readUInt64=r.readUint64),r.writeFloat32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=4,a(this.view,t,e,this.littleEndian,23,4),r&&(this.offset+=4),this},r.writeFloat=r.writeFloat32,r.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=s(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),r},r.readFloat=r.readFloat32,r.writeFloat64=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var n=this.buffer.byteLength;return e>n&&this.resize((n*=2)>e?n:e),e-=8,a(this.view,t,e,this.littleEndian,52,8),r&&(this.offset+=8),this},r.writeDouble=r.writeFloat64,r.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var r=s(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),r},r.readDouble=r.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},r.writeVarint32=function(t,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var i,u=e.calculateVarint32(t);r+=u;var o=this.buffer.byteLength;for(r>o&&this.resize((o*=2)>r?o:r),r-=u,t>>>=0;t>=128;)i=127&t|128,this.view[r++]=i,t>>>=7;return this.view[r++]=t,n?(this.offset=r,this):u},r.writeVarint32ZigZag=function(t,r){return this.writeVarint32(e.zigZagEncode32(t),r)},r.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,n=0,i=0;do{if(!this.noAssert&&t>this.limit){var u=Error("Truncated");throw u.truncated=!0,u}r=this.view[t++],n<5&&(i|=(127&r)<<7*n),++n}while(0!=(128&r));return i|=0,e?(this.offset=t,i):{value:i,length:n}},r.readVarint32ZigZag=function(t){var r=this.readVarint32(t);return"object"==typeof r?r.value=e.zigZagDecode32(r.value):r=e.zigZagDecode32(r),r},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var r=e.toInt()>>>0,n=e.shiftRightUnsigned(28).toInt()>>>0,i=e.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==n?r<16384?r<128?1:2:r<1<<21?3:4:n<16384?n<128?5:6:n<1<<21?7:8:i<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},r.writeVarint64=function(r,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"==typeof r)r=t.fromNumber(r);else if("string"==typeof r)r=t.fromString(r);else if(!(r&&r instanceof t))throw TypeError("Illegal value: "+r+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof r?r=t.fromNumber(r,!1):"string"==typeof r?r=t.fromString(r,!1):!1!==r.unsigned&&(r=r.toSigned());var u=e.calculateVarint64(r),o=r.toInt()>>>0,s=r.shiftRightUnsigned(28).toInt()>>>0,a=r.shiftRightUnsigned(56).toInt()>>>0;n+=u;var f=this.buffer.byteLength;switch(n>f&&this.resize((f*=2)>n?f:n),n-=u,u){case 10:this.view[n+9]=a>>>7&1;case 9:this.view[n+8]=9!==u?128|a:127&a;case 8:this.view[n+7]=8!==u?s>>>21|128:s>>>21&127;case 7:this.view[n+6]=7!==u?s>>>14|128:s>>>14&127;case 6:this.view[n+5]=6!==u?s>>>7|128:s>>>7&127;case 5:this.view[n+4]=5!==u?128|s:127&s;case 4:this.view[n+3]=4!==u?o>>>21|128:o>>>21&127;case 3:this.view[n+2]=3!==u?o>>>14|128:o>>>14&127;case 2:this.view[n+1]=2!==u?o>>>7|128:o>>>7&127;case 1:this.view[n]=1!==u?128|o:127&o}return i?(this.offset+=u,this):u},r.writeVarint64ZigZag=function(t,r){return this.writeVarint64(e.zigZagEncode64(t),r)},r.readVarint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=e,i=0,u=0,o=0,s=0;if(s=this.view[e++],i=127&s,128&s&&(s=this.view[e++],i|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<7,128&s||this.noAssert&&void 0===s))))))))))throw Error("Buffer overrun");var a=t.fromBits(i|u<<28,u>>>4|o<<24,!1);return r?(this.offset=e,a):{value:a,length:e-n}},r.readVarint64ZigZag=function(r){var n=this.readVarint64(r);return n&&n.value instanceof t?n.value=e.zigZagDecode64(n.value):n=e.zigZagDecode64(n),n}),r.writeCString=function(t,e){var r=void 0===e;r&&(e=this.offset);var n,i=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(n=0;n<i;++n)if(0===t.charCodeAt(n))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}i=c.calculateUTF16asUTF8(u(t))[1],e+=i+1;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=i+1,c.encodeUTF16toUTF8(u(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,r?(this.offset=e,this):i},r.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,n=t,i=-1;return c.decodeUTF8toUTF16(function(){if(0===i)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(i=this.view[t++])?null:i}.bind(this),r=o(),!0),e?(this.offset=t,r()):{string:r(),length:t-n}},r.writeIString=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n,i=e;n=c.calculateUTF16asUTF8(u(t),this.noAssert)[1],e+=4+n;var o=this.buffer.byteLength;if(e>o&&this.resize((o*=2)>e?o:e),e-=4+n,this.littleEndian?(this.view[e+3]=n>>>24&255,this.view[e+2]=n>>>16&255,this.view[e+1]=n>>>8&255,this.view[e]=255&n):(this.view[e]=n>>>24&255,this.view[e+1]=n>>>16&255,this.view[e+2]=n>>>8&255,this.view[e+3]=255&n),e+=4,c.encodeUTF16toUTF8(u(t),function(t){this.view[e++]=t}.bind(this)),e!==i+4+n)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+n));return r?(this.offset=e,this):e-i},r.readIString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=t,i=this.readUint32(t),u=this.readUTF8String(i,e.METRICS_BYTES,t+=4);return t+=u.length,r?(this.offset=t,u.string):{string:u.string,length:t-n}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",r.writeUTF8String=function(t,e){var r,n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i=e;r=c.calculateUTF16asUTF8(u(t))[1],e+=r;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=r,c.encodeUTF16toUTF8(u(t),function(t){this.view[e++]=t}.bind(this)),n?(this.offset=e,this):e-i},r.writeString=r.writeUTF8String,e.calculateUTF8Chars=function(t){return c.calculateUTF16asUTF8(u(t))[0]},e.calculateUTF8Bytes=function(t){return c.calculateUTF16asUTF8(u(t))[1]},e.calculateString=e.calculateUTF8Bytes,r.readUTF8String=function(t,r,n){"number"==typeof r&&(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),void 0===r&&(r=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var u,s=0,a=n;if(r===e.METRICS_CHARS){if(u=o(),c.decodeUTF8(function(){return s<t&&n<this.limit?this.view[n++]:null}.bind(this),function(t){++s,c.UTF8toUTF16(t,u)}),s!==t)throw RangeError("Illegal range: Truncated data, "+s+" == "+t);return i?(this.offset=n,u()):{string:u(),length:n-a}}if(r===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+"+t+") <= "+this.buffer.byteLength)}var f=n+t;if(c.decodeUTF8toUTF16(function(){return n<f?this.view[n++]:null}.bind(this),u=o(),this.noAssert),n!==f)throw RangeError("Illegal range: Truncated data, "+n+" == "+f);return i?(this.offset=n,u()):{string:u(),length:n-a}}throw TypeError("Unsupported metrics: "+r)},r.readString=r.readUTF8String,r.writeVString=function(t,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var i,o,s=r;i=c.calculateUTF16asUTF8(u(t),this.noAssert)[1],o=e.calculateVarint32(i),r+=o+i;var a=this.buffer.byteLength;if(r>a&&this.resize((a*=2)>r?a:r),r-=o+i,r+=this.writeVarint32(i,r),c.encodeUTF16toUTF8(u(t),function(t){this.view[r++]=t}.bind(this)),r!==s+i+o)throw RangeError("Illegal range: Truncated data, "+r+" == "+(r+i+o));return n?(this.offset=r,this):r-s},r.readVString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=t,i=this.readVarint32(t),u=this.readUTF8String(i.value,e.METRICS_BYTES,t+=i.length);return t+=u.length,r?(this.offset=t,u.string):{string:u.string,length:t-n}},r.append=function(t,r,n){"number"!=typeof r&&"string"==typeof r||(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var u=t.limit-t.offset;if(u<=0)return this;n+=u;var o=this.buffer.byteLength;return n>o&&this.resize((o*=2)>n?o:n),n-=u,this.view.set(t.view.subarray(t.offset,t.limit),n),t.offset+=u,i&&(this.offset+=u),this},r.appendTo=function(t,e){return t.append(this,e),this},r.assert=function(t){return this.noAssert=!t,this},r.capacity=function(){return this.buffer.byteLength},r.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},r.clone=function(t){var r=new e(0,this.littleEndian,this.noAssert);return t?(r.buffer=new ArrayBuffer(this.buffer.byteLength),r.view=new Uint8Array(r.buffer)):(r.buffer=this.buffer,r.view=this.view),r.offset=this.offset,r.markedOffset=this.markedOffset,r.limit=this.limit,r},r.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var r=e-t;if(0===r)return this.buffer=n,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(r),u=new Uint8Array(i);return u.set(this.view.subarray(t,e)),this.buffer=i,this.view=u,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=r,this},r.copy=function(t,r){if(void 0===t&&(t=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,t<0||t>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+r+" <= "+this.buffer.byteLength)}if(t===r)return new e(0,this.littleEndian,this.noAssert);var n=r-t,i=new e(n,this.littleEndian,this.noAssert);return i.offset=0,i.limit=n,i.markedOffset>=0&&(i.markedOffset-=t),this.copyTo(i,0,t,r),i},r.copyTo=function(t,r,n,i){var u,o;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(r=(o=void 0===r)?t.offset:0|r,n=(u=void 0===n)?this.offset:0|n,i=void 0===i?this.limit:0|i,r<0||r>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+r+" <= "+t.buffer.byteLength);if(n<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+n+" <= "+this.buffer.byteLength);var s=i-n;return 0===s?t:(t.ensureCapacity(r+s),t.view.set(this.view.subarray(n,i),r),u&&(this.offset+=s),o&&(t.offset+=s),this)},r.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},r.fill=function(t,e,r){var n=void 0===e;if(n&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(e>=r)return this;for(;e<r;)this.view[e++]=t;return n&&(this.offset=e),this},r.flip=function(){return this.limit=this.offset,this.offset=0,this},r.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},r.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},r.LE=function(t){return this.littleEndian=void 0===t||!!t,this},r.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},r.prepend=function(t,r,n){"number"!=typeof r&&"string"==typeof r||(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var u=t.limit-t.offset;if(u<=0)return this;var o=u-n;if(o>0){var s=new ArrayBuffer(this.buffer.byteLength+o),a=new Uint8Array(s);a.set(this.view.subarray(n,this.buffer.byteLength),u),this.buffer=s,this.view=a,this.offset+=o,this.markedOffset>=0&&(this.markedOffset+=o),this.limit+=o,n+=o}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),n-u),t.offset=t.limit,i&&(this.offset-=u),this},r.prependTo=function(t,e){return t.prepend(this,e),this},r.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},r.remaining=function(){return this.limit-this.offset},r.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},r.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),r=new Uint8Array(e);r.set(this.view),this.buffer=e,this.view=r}return this},r.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e?this:(Array.prototype.reverse.call(this.view.subarray(t,e)),this)},r.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},r.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r=this.clone();return r.offset=t,r.limit=e,r},r.toBuffer=function(t){var e=this.offset,r=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal limit: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(!t&&0===e&&r===this.buffer.byteLength)return this.buffer;if(e===r)return n;var i=new ArrayBuffer(r-e);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(e,r),0),i},r.toArrayBuffer=r.toBuffer,r.toString=function(t,e,r){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(r=e=t="utf8"),t){case"utf8":return this.toUTF8(e,r);case"base64":return this.toBase64(e,r);case"hex":return this.toHex(e,r);case"binary":return this.toBinary(e,r);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var f=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],r=[],n=0,i=e.length;n<i;++n)r[e[n]]=n;return t.encode=function(t,r){for(var n,i;null!==(n=t());)r(e[n>>2&63]),i=(3&n)<<4,null!==(n=t())?(r(e[63&((i|=n>>4&15)|n>>4&15)]),i=(15&n)<<2,null!==(n=t())?(r(e[63&(i|n>>6&3)]),r(e[63&n])):(r(e[63&i]),r(61))):(r(e[63&i]),r(61),r(61))},t.decode=function(t,e){var n,i,u;function o(t){throw Error("Illegal character code: "+t)}for(;null!==(n=t());)if(void 0===(i=r[n])&&o(n),null!==(n=t())&&(void 0===(u=r[n])&&o(n),e(i<<2>>>0|(48&u)>>4),null!==(n=t()))){if(void 0===(i=r[n])){if(61===n)break;o(n)}if(e((15&u)<<4>>>0|(60&i)>>2),null!==(n=t())){if(void 0===(u=r[n])){if(61===n)break;o(n)}e((3&i)<<6>>>0|u)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();r.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var r;return f.encode(function(){return t<e?this.view[t++]:null}.bind(this),r=o()),r()},e.fromBase64=function(t,r){if("string"!=typeof t)throw TypeError("str");var n=new e(t.length/4*3,r),i=0;return f.decode(u(t),function(t){n.view[i++]=t}),n.limit=i,n},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},r.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var r=[],n=[];t<e;)r.push(this.view[t++]),r.length>=1024&&(n.push(String.fromCharCode.apply(String,r)),r=[]);return n.join("")+String.fromCharCode.apply(String,r)},e.fromBinary=function(t,r){if("string"!=typeof t)throw TypeError("str");for(var n,i=0,u=t.length,o=new e(u,r);i<u;){if((n=t.charCodeAt(i))>255)throw RangeError("illegal char code: "+n);o.view[i++]=n}return o.limit=u,o},r.toDebug=function(t){for(var e,r=-1,n=this.buffer.byteLength,i="",u="",o="";r<n;){if(-1!==r&&(e=this.view[r],i+=e<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(u+=e>32&&e<127?String.fromCharCode(e):".")),++r,t&&r>0&&r%16==0&&r!==n){for(;i.length<51;)i+=" ";o+=i+u+"\n",i=u=""}r===this.offset&&r===this.limit?i+=r===this.markedOffset?"!":"|":r===this.offset?i+=r===this.markedOffset?"[":"<":r===this.limit?i+=r===this.markedOffset?"]":">":i+=r===this.markedOffset?"'":t||0!==r&&r!==n?" ":""}if(t&&" "!==i){for(;i.length<51;)i+=" ";o+=i+u+"\n"}return t?o:i},e.fromDebug=function(t,r,n){for(var i,u,o=t.length,s=new e((o+1)/3|0,r,n),a=0,f=0,c=!1,h=!1,l=!1,p=!1,d=!1;a<o;){switch(i=t.charAt(a++)){case"!":if(!n){if(h||l||p){d=!0;break}h=l=p=!0}s.offset=s.markedOffset=s.limit=f,c=!1;break;case"|":if(!n){if(h||p){d=!0;break}h=p=!0}s.offset=s.limit=f,c=!1;break;case"[":if(!n){if(h||l){d=!0;break}h=l=!0}s.offset=s.markedOffset=f,c=!1;break;case"<":if(!n){if(h){d=!0;break}h=!0}s.offset=f,c=!1;break;case"]":if(!n){if(p||l){d=!0;break}p=l=!0}s.limit=s.markedOffset=f,c=!1;break;case">":if(!n){if(p){d=!0;break}p=!0}s.limit=f,c=!1;break;case"'":if(!n){if(l){d=!0;break}l=!0}s.markedOffset=f,c=!1;break;case" ":c=!1;break;default:if(!n&&c){d=!0;break}if(u=parseInt(i+t.charAt(a++),16),!n&&(isNaN(u)||u<0||u>255))throw TypeError("Illegal str: Not a debug encoded string");s.view[f++]=u,c=!0}if(d)throw TypeError("Illegal str: Invalid symbol at "+a)}if(!n){if(!h||!p)throw TypeError("Illegal str: Missing offset or limit");if(f<s.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+f+" < "+o)}return s},r.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var r,n=new Array(e-t);t<e;)(r=this.view[t++])<16?n.push("0",r.toString(16)):n.push(r.toString(16));return n.join("")},e.fromHex=function(t,r,n){if(!n){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,u=t.length,o=new e(u/2|0,r),s=0,a=0;s<u;s+=2){if(i=parseInt(t.substring(s,s+2),16),!n&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");o.view[a++]=i}return o.limit=a,o};var c=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<128?e(127&r):r<2048?(e(r>>6&31|192),e(63&r|128)):r<65536?(e(r>>12&15|224),e(r>>6&63|128),e(63&r|128)):(e(r>>18&7|240),e(r>>12&63|128),e(r>>6&63|128),e(63&r|128)),r=null},decodeUTF8:function(t,e){for(var r,n,i,u,o=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(r=t());)if(0==(128&r))e(r);else if(192==(224&r))null===(n=t())&&o([r,n]),e((31&r)<<6|63&n);else if(224==(240&r))(null===(n=t())||null===(i=t()))&&o([r,n,i]),e((15&r)<<12|(63&n)<<6|63&i);else{if(240!=(248&r))throw RangeError("Illegal starting byte: "+r);(null===(n=t())||null===(i=t())||null===(u=t()))&&o([r,n,i,u]),e((7&r)<<18|(63&n)<<12|(63&i)<<6|63&u)}},UTF16toUTF8:function(t,e){for(var r,n=null;null!==(r=null!==n?n:t());)r>=55296&&r<=57343&&null!==(n=t())&&n>=56320&&n<=57343?(e(1024*(r-55296)+n-56320+65536),n=null):e(r);null!==n&&e(n)},UTF8toUTF16:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<=65535?e(r):(e(55296+((r-=65536)>>10)),e(r%1024+56320)),r=null},encodeUTF16toUTF8:function(e,r){t.UTF16toUTF8(e,function(e){t.encodeUTF8(e,r)})},decodeUTF8toUTF16:function(e,r){t.decodeUTF8(e,function(e){t.UTF8toUTF16(e,r)})},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,r=0;null!==(e=t());)r+=e<128?1:e<2048?2:e<65536?3:4;return r},calculateUTF16asUTF8:function(e){var r=0,n=0;return t.UTF16toUTF8(e,function(t){++r,n+=t<128?1:t<2048?2:t<65536?3:4}),[r,n]}};return t}();return r.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r;try{c.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),r=o())}catch(r){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return r()},e.fromUTF8=function(t,r,n){if(!n&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var i=new e(c.calculateUTF16asUTF8(u(t),!0)[1],r,n),o=0;return c.encodeUTF16toUTF8(u(t),function(t){i.view[o++]=t}),i.limit=o,i},e})?n.apply(e,i):n)||(t.exports=u)},function(t,e,r){var n=r(0).Buffer;function i(t,e){this._block=n.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=n.from(t,e));for(var r=this._block,i=this._blockSize,u=t.length,o=this._len,s=0;s<u;){for(var a=o%i,f=Math.min(u-s,i-a),c=0;c<f;c++)r[a+c]=t[s+c];s+=f,(o+=f)%i==0&&this._update(r)}return this._len+=u,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,i=(r-n)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var u=this._hash();return t?u.toString(t):u},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},function(t,e,r){"use strict";e.__esModule=!0;var n=o(r(107)),i=o(r(124)),u="function"==typeof i.default&&"symbol"==typeof n.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function o(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===u(n.default)?function(t){return void 0===t?"undefined":u(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":u(t)}},function(t,e,r){var n=r(22);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports={}},function(t,e,r){(function(e){t.exports=function(t,r){for(var n=Math.min(t.length,r.length),i=new e(n),u=0;u<n;++u)i[u]=t[u]^r[u];return i}}).call(this,r(2).Buffer)},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=r(3),o=r(56),s=r(7),a=o.getCurveByName("secp256k1"),f=r(12),c=r(27),h=a.G,l=a.n;function p(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";if("string"==typeof t){var n=p.fromString(t,r);return u(null!=n,"Invalid public key"),n}if(e.isBuffer(t))return p.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&t.Q)return p(t.Q);function d(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.compressed;return t.getEncoded(e)}u.equal(void 0===t?"undefined":i(t),"object","Invalid public key"),u.equal(i(t.compressed),"boolean","Invalid public key");return{Q:t,toString:function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"EOS")+c.checkEncode(d())},toUncompressed:function(){var e=t.getEncoded(!1),r=o.Point.decodeFrom(a,e);return p.fromPoint(r)},toBuffer:d,child:function(r){console.error("Deprecated warning: PublicKey.child"),u(e.isBuffer(r),"Buffer required: offset"),u.equal(r.length,32,"offset length"),r=e.concat([d(),r]),r=f.sha256(r);var n=s.fromBuffer(r);if(n.compareTo(l)>=0)throw new Error("Child offset went out of bounds, try again");var i=h.multiply(n),o=t.add(i);if(a.isInfinity(o))throw new Error("Child offset derived to an invalid key, try again");return p.fromPoint(o)},toHex:function(){return d().toString("hex")}}}t.exports=p,p.isValid=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p(t,e),!0}catch(t){return!1}},p.fromBinary=function(t){return p.fromBuffer(new e(t,"binary"))},p.fromBuffer=function(t){return p(o.Point.decodeFrom(a,t))},p.fromPoint=function(t){return p(t)},p.fromString=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p.fromStringOrThrow(t,e)}catch(t){return null}},p.fromStringOrThrow=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";u.equal(void 0===t?"undefined":i(t),"string","public_key");var r=t.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===r)return new RegExp("^"+e).test(t)&&(t=t.substring(e.length)),p.fromBuffer(c.checkDecode(t));u(3===r.length,"Expecting public key like: PUB_K1_base58pubkey..");var o=n(r,3),s=o[1],a=o[2];return u.equal(s,"K1","K1 private key expected"),p.fromBuffer(c.checkDecode(a,s))},p.fromHex=function(t){return p.fromBuffer(new e(t,"hex"))},p.fromStringHex=function(t){return p.fromString(new e(t,"hex"))}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(173),u=r(3),o=r(73),s=r(12);t.exports={random32ByteBuffer:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.cpuEntropyBits,i=void 0===r?0:r,a=t.safe,l=void 0===a||a;u.equal(void 0===i?"undefined":n(i),"number","cpuEntropyBits"),u.equal(void 0===l?"undefined":n(l),"boolean","boolean"),l&&u(f>=128,"Call initialize() to add entropy");var p=[];return p.push(o(32)),p.push(e.from(h(i))),p.push(c),p.push(function(){var t=Array(o(101)).join();try{t+=(new Date).toString()+" "+window.screen.height+" "+window.screen.width+" "+window.screen.colorDepth+"  "+window.screen.availHeight+" "+window.screen.availWidth+" "+window.screen.pixelDepth+navigator.language+" "+window.location+" "+window.history.length;for(var r,n=0;n<navigator.mimeTypes.length;n++)r=navigator.mimeTypes[n],t+=r.description+" "+r.type+" "+r.suffixes+" "}catch(e){t+=s.sha256((new Date).toString())}for(var i=new e(t),u=t+=i.toString("binary")+" "+(new Date).toString(),a=Date.now();Date.now()-a<25;)u=s.sha256(u);return u}()),s.sha256(e.concat(p))},addEntropy:function(){u.equal(c.length,101,"externalEntropyArray");for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];f+=e.length;var n=!0,i=!1,o=void 0;try{for(var s,h=e[Symbol.iterator]();!(n=(s=h.next()).done);n=!0){var l=s.value,p=a++%101,d=c[p]+=l;d>9007199254740991&&(c[p]=0)}}catch(t){i=!0,o=t}finally{try{!n&&h.return&&h.return()}finally{if(i)throw o}}},cpuEntropy:h,entropyCount:function(){return f},checkDecode:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;u(null!=t,"private key expected");var n=new e(i.decode(t)),o=n.slice(-4),a=n.slice(0,-4),f=void 0;if("sha256x2"===r)f=s.sha256(s.sha256(a)).slice(0,4);else{var c=[a];r&&c.push(e.from(r)),f=s.ripemd160(e.concat(c)).slice(0,4)}if(o.toString()!==f.toString())throw new Error("Invalid checksum, "+o.toString("hex")+" != "+f.toString("hex"));return a},checkEncode:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(u(e.isBuffer(t),"expecting keyBuffer<Buffer>"),"sha256x2"===r){var n=s.sha256(s.sha256(t)).slice(0,4);return i.encode(e.concat([t,n]))}var o=[t];r&&o.push(e.from(r));var a=s.ripemd160(e.concat(o)).slice(0,4);return i.encode(e.concat([t,a]))}};var a=0,f=0,c=o(101);function h(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:128,e=[],r=null,n=0;e.length<t;){var i=l();if(null!=r){var u=i-r;if(Math.abs(u)<1){n++;continue}var o=Math.floor(p(Math.abs(u))+1);if(o<4){o<2&&n++;continue}e.push(u)}r=i}if(n>10){var s=Number(n/t*100).toFixed(2);console.warn("WARN: "+s+"% low CPU entropy re-sampled")}return e}function l(){for(var t=Date.now(),e=0,r=0;Date.now()<t+7+1;)r=Math.sin(Math.sqrt(Math.log(++e+r)));return e}var p=function(t){return Math.log(t)/Math.LN2}}).call(this,r(2).Buffer)},function(t,e){t.exports=!0},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(0).Buffer;function i(t){n.isBuffer(t)||(t=n.from(t));for(var e=t.length/4|0,r=new Array(e),i=0;i<e;i++)r[i]=t.readUInt32BE(4*i);return r}function u(t){for(;0<t.length;t++)t[0]=0}function o(t,e,r,n,i){for(var u,o,s,a,f=r[0],c=r[1],h=r[2],l=r[3],p=t[0]^e[0],d=t[1]^e[1],y=t[2]^e[2],g=t[3]^e[3],m=4,v=1;v<i;v++)u=f[p>>>24]^c[d>>>16&255]^h[y>>>8&255]^l[255&g]^e[m++],o=f[d>>>24]^c[y>>>16&255]^h[g>>>8&255]^l[255&p]^e[m++],s=f[y>>>24]^c[g>>>16&255]^h[p>>>8&255]^l[255&d]^e[m++],a=f[g>>>24]^c[p>>>16&255]^h[d>>>8&255]^l[255&y]^e[m++],p=u,d=o,y=s,g=a;return u=(n[p>>>24]<<24|n[d>>>16&255]<<16|n[y>>>8&255]<<8|n[255&g])^e[m++],o=(n[d>>>24]<<24|n[y>>>16&255]<<16|n[g>>>8&255]<<8|n[255&p])^e[m++],s=(n[y>>>24]<<24|n[g>>>16&255]<<16|n[p>>>8&255]<<8|n[255&d])^e[m++],a=(n[g>>>24]<<24|n[p>>>16&255]<<16|n[d>>>8&255]<<8|n[255&y])^e[m++],[u>>>=0,o>>>=0,s>>>=0,a>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],a=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var r=[],n=[],i=[[],[],[],[]],u=[[],[],[],[]],o=0,s=0,a=0;a<256;++a){var f=s^s<<1^s<<2^s<<3^s<<4;f=f>>>8^255&f^99,r[o]=f,n[f]=o;var c=t[o],h=t[c],l=t[h],p=257*t[f]^16843008*f;i[0][o]=p<<24|p>>>8,i[1][o]=p<<16|p>>>16,i[2][o]=p<<8|p>>>24,i[3][o]=p,p=16843009*l^65537*h^257*c^16843008*o,u[0][f]=p<<24|p>>>8,u[1][f]=p<<16|p>>>16,u[2][f]=p<<8|p>>>24,u[3][f]=p,0===o?o=s=1:(o=c^t[t[t[l^c]]],s^=t[t[s]])}return{SBOX:r,INV_SBOX:n,SUB_MIX:i,INV_SUB_MIX:u}}();function f(t){this._key=i(t),this._reset()}f.blockSize=16,f.keySize=32,f.prototype.blockSize=f.blockSize,f.prototype.keySize=f.keySize,f.prototype._reset=function(){for(var t=this._key,e=t.length,r=e+6,n=4*(r+1),i=[],u=0;u<e;u++)i[u]=t[u];for(u=e;u<n;u++){var o=i[u-1];u%e==0?(o=o<<8|o>>>24,o=a.SBOX[o>>>24]<<24|a.SBOX[o>>>16&255]<<16|a.SBOX[o>>>8&255]<<8|a.SBOX[255&o],o^=s[u/e|0]<<24):e>6&&u%e==4&&(o=a.SBOX[o>>>24]<<24|a.SBOX[o>>>16&255]<<16|a.SBOX[o>>>8&255]<<8|a.SBOX[255&o]),i[u]=i[u-e]^o}for(var f=[],c=0;c<n;c++){var h=n-c,l=i[h-(c%4?0:4)];f[c]=c<4||h<=4?l:a.INV_SUB_MIX[0][a.SBOX[l>>>24]]^a.INV_SUB_MIX[1][a.SBOX[l>>>16&255]]^a.INV_SUB_MIX[2][a.SBOX[l>>>8&255]]^a.INV_SUB_MIX[3][a.SBOX[255&l]]}this._nRounds=r,this._keySchedule=i,this._invKeySchedule=f},f.prototype.encryptBlockRaw=function(t){return o(t=i(t),this._keySchedule,a.SUB_MIX,a.SBOX,this._nRounds)},f.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),r=n.allocUnsafe(16);return r.writeUInt32BE(e[0],0),r.writeUInt32BE(e[1],4),r.writeUInt32BE(e[2],8),r.writeUInt32BE(e[3],12),r},f.prototype.decryptBlock=function(t){var e=(t=i(t))[1];t[1]=t[3],t[3]=e;var r=o(t,this._invKeySchedule,a.INV_SUB_MIX,a.INV_SBOX,this._nRounds),u=n.allocUnsafe(16);return u.writeUInt32BE(r[0],0),u.writeUInt32BE(r[3],4),u.writeUInt32BE(r[2],8),u.writeUInt32BE(r[1],12),u},f.prototype.scrub=function(){u(this._keySchedule),u(this._invKeySchedule),u(this._key)},t.exports.AES=f},function(t,e,r){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var u,o,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,r)});case 3:return e.nextTick(function(){t.call(null,r,n)});case 4:return e.nextTick(function(){t.call(null,r,n,i)});default:for(u=new Array(s-1),o=0;o<u.length;)u[o++]=arguments[o];return e.nextTick(function(){t.apply(null,u)})}}}:t.exports=e}).call(this,r(17))},function(t,e,r){"use strict";(function(e){var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var u=r(56),o=u.Point,s=u.getCurveByName("secp256k1"),a=r(7),f=r(3),c=r(12),h=r(26),l=r(27),p=r(57),d=r(175);s.G,s.n;function y(t){if("string"==typeof t)return y.fromString(t);if(e.isBuffer(t))return y.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&a.isBigInteger(t.d))return y(t.d);if(!a.isBigInteger(t))throw new TypeError("Invalid private key");function r(){var t=u();return t=e.concat([new e([128]),t]),l.checkEncode(t,"sha256x2")}var n=void 0;function u(){return t.toBuffer(32)}return{d:t,toWif:r,toString:function(){return r()},toPublic:function(){if(n)return n;var e=s.G.multiply(t);return n=h.fromPoint(e)},toBuffer:u,getSharedSecret:function(t){var e=(t=h(t)).toUncompressed().toBuffer(),r=o.fromAffine(s,a.fromBuffer(e.slice(1,33)),a.fromBuffer(e.slice(33,65))),n=u(),i=r.multiply(a.fromBuffer(n)).affineX.toBuffer({size:32});return c.sha512(i)},getChildKey:function(t){return y(p("sha256").update(u()).update(t).digest())}}}function g(t){f.equal(void 0===t?"undefined":i(t),"string","privateStr");var e=t.match(/^PVT_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===e){var r=l.checkDecode(t,"sha256x2"),u=r.readUInt8(0);f.equal(128,u,"Expected version 128, instead got "+u);return{privateKey:y.fromBuffer(r.slice(1)),format:"WIF",keyType:"K1"}}f(3===e.length,"Expecting private key like: PVT_K1_base58privateKey..");var o=n(e,3),s=o[1],a=o[2];return f.equal(s,"K1","K1 private key expected"),{privateKey:y.fromBuffer(l.checkDecode(a,s)),format:"PVT",keyType:s}}t.exports=y,y.fromHex=function(t){return y.fromBuffer(new e(t,"hex"))},y.fromBuffer=function(t){if(!e.isBuffer(t))throw new Error("Expecting parameter to be a Buffer type");if(33===t.length&&1===t[32]&&(t=t.slice(0,-1)),32!==t.length)throw new Error("Expecting 32 bytes, instead got "+t.length);return y(a.fromBuffer(t))},y.fromSeed=function(t){if("string"!=typeof t)throw new Error("seed must be of type string");return y.fromBuffer(c.sha256(t))},y.isWif=function(t){try{return f("WIF"===g(t).format),!0}catch(t){return!1}},y.isValid=function(t){try{return y(t),!0}catch(t){return!1}},y.fromWif=function(t){return console.log("PrivateKey.fromWif is deprecated, please use PrivateKey.fromString"),y.fromString(t)},y.fromString=function(t){return g(t).privateKey},y.randomKey=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return y.initialize().then(function(){return y.fromBuffer(l.random32ByteBuffer({cpuEntropyBits:t}))})},y.unsafeRandomKey=function(){return Promise.resolve(y.fromBuffer(l.random32ByteBuffer({safe:!1})))};var m=!1;y.initialize=d(function(){m||(function(){var t=y(c.sha256("")),e="key comparison test failed on a known private key";f.equal(t.toWif(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e),f.equal(t.toString(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e);var r=t.toPublic();f.equal(r.toString(),"EOS859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM","pubkey string comparison test failed on a known public key"),v(function(){return y.fromString(t.toWif())},"converting known wif from string"),v(function(){return y.fromString(t.toString())},"converting known pvt from string"),v(function(){return h.fromString(r.toString())},"converting known public key from string"),!0}(),l.addEntropy.apply(l,function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}(l.cpuEntropy())),f(l.entropyCount()>=128,"insufficient entropy"),m=!0)});var v=function(t,e){try{t()}catch(t){throw t.message=e+" ==> "+t.message,t}}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=u(r(61)),i=u(r(20));function u(t){return t&&t.__esModule?t:{default:t}}var o=r(50),s=r(58),a=r(96),f=r(3),c=r(59),h=r(208),l=r(209),p=r(100),d=r(99),y=r(210),g=r(211),m=r(212),v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={httpEndpoint:"http://127.0.0.1:8888",debug:!1,verbose:!1,broadcast:!0,logger:{log:function(){var e;return t.verbose?(e=console).log.apply(e,arguments):null},error:function(){var e;return t.verbose?(e=console).error.apply(e,arguments):null}},sign:!0};function r(t,e){Object.keys(e).forEach(function(r){void 0===t[r]&&(t[r]=e[r])})}return r(t,e),r(t.logger,e.logger),function(t){var e=null!=t.httpEndpoint?a(t):null;t.network=e;var r=[],n=h(e,t);r.push(n.abi("eosio.null",m)),r.push(n.abi("eosio.token",y)),r.push(n.abi("eosio",g)),t.chainId||(t.chainId="cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f");e&&function(t,e,r){t.getInfo({}).then(function(t){t.chain_id!==e&&r.log&&r.log("chainId mismatch, signatures will not match transaction authority. expected "+e+" !== actual "+t.chain_id)}).catch(function(t){r.error&&r.error("Warning, unable to validate chainId: "+t.message)})}(e,t.chainId,t.logger);if(null!=t.mockTransactions){if("string"==typeof t.mockTransactions){var u=t.mockTransactions;t.mockTransactions=function(){return u}}f.equal((0,i.default)(t.mockTransactions),"function","config.mockTransactions")}var o=c(t),s=o.structs,d=o.types,v=o.fromBuffer,w=o.toBuffer,E=function(t,e,r,n){var i=t.network,u=Object.assign({},i),o=l(e,i,r,t,n);return function(t,e,r){for(var n in t)if(e[n])throw new TypeError(r+": "+n)}(u,o,"Conflicting methods in EosApi and Transaction Api"),Object.assign(u,o),u}(t,a,s,r);Object.assign(E,{config:function(t){var e=new Set(["httpEndpoint","abiCache","chainId","expireInSeconds"]),r=new Set(["verbose","debug","broadcast","logger","sign"]),n={};return Object.keys(t).forEach(function(i){Object.defineProperty(n,i,{set:function(e){if(!r.has(i))throw new Error("Access denied");t[i]=e},get:function(){if(e.has(i)||r.has(i))return t[i];throw new Error("Access denied")}})}),n}(t),fc:{structs:s,types:d,fromBuffer:v,toBuffer:w,abiCache:n},modules:{format:p}}),t.signProvider||(t.signProvider=b(E,t));return E}(t)};t.exports=v,Object.assign(v,{version:"16.0.0",modules:{format:p,api:a,ecc:o,json:{api:a.api,schema:d},Fcbuffer:s},Testnet:function(t){return console.error("deprecated, change Eos.Testnet(..) to just Eos(..)"),v(t)},Localnet:function(t){return console.error("deprecated, change Eos.Localnet(..) to just Eos(..)"),v(t)}});var b=function(t,e){return function(r){var i,u,s,a,c,h,l,p,d,y,g,m,v,b,w,E,_,A,B,C=r.sign,F=r.buf,D=r.transaction,x=r.optionsKeyProvider;return n.default.async(function(r){for(;;)switch(r.prev=r.next){case 0:if(i=x||e.keyProvider){r.next=3;break}throw new TypeError("This transaction requires a keyProvider for signing");case 3:return u=i,"function"==typeof i&&(u=i({transaction:D})),r.next=7,n.default.awrap(Promise.resolve(u));case 7:if(u=r.sent,Array.isArray(u)||(u=[u]),(u=u.map(function(t){try{return{private:o.PrivateKey(t).toString()}}catch(e){return{public:o.PublicKey(t).toString()}}f(!1,"expecting public or private keys from keyProvider")})).length){r.next=12;break}throw new Error("missing key, check your keyProvider");case 12:if(1!==u.length||!u[0].private){r.next=15;break}return s=u[0].private,r.abrupt("return",C(F,s));case 15:if(null!=e.httpEndpoint){r.next=37;break}for(a=[],c=!0,h=!1,l=void 0,r.prev=20,p=u[Symbol.iterator]();!(c=(d=p.next()).done);c=!0)y=d.value,a.push(C(F,y.private));r.next=28;break;case 24:r.prev=24,r.t0=r.catch(20),h=!0,l=r.t0;case 28:r.prev=28,r.prev=29,!c&&p.return&&p.return();case 31:if(r.prev=31,!h){r.next=34;break}throw l;case 34:return r.finish(31);case 35:return r.finish(28);case 36:return r.abrupt("return",a);case 37:for(g=new Map,m=!0,v=!1,b=void 0,r.prev=41,w=u[Symbol.iterator]();!(m=(E=w.next()).done);m=!0)_=E.value,A=null!=_.private,null!=_.public,A?g.set(o.privateToPublic(_.private),_.private):g.set(_.public,null);r.next=49;break;case 45:r.prev=45,r.t1=r.catch(41),v=!0,b=r.t1;case 49:r.prev=49,r.prev=50,!m&&w.return&&w.return();case 52:if(r.prev=52,!v){r.next=55;break}throw b;case 55:return r.finish(52);case 56:return r.finish(49);case 57:return B=Array.from(g.keys()),r.abrupt("return",t.getRequiredKeys(D,B).then(function(t){var e=t.required_keys;if(!e.length)throw new Error("missing required keys for "+JSON.stringify(D));var r=[],n=[],u=!0,s=!1,a=void 0;try{for(var c,h=e[Symbol.iterator]();!(u=(c=h.next()).done);u=!0){var l=c.value;l=o.PublicKey(l).toString();var p=g.get(l);p?r.push(p):n.push(l)}}catch(t){s=!0,a=t}finally{try{!u&&h.return&&h.return()}finally{if(s)throw a}}0!==n.length&&(f("function"==typeof i,"keyProvider function is needed for private key lookup"),i({pubkeys:n}).forEach(function(t){r.push(t)}));var d=[],y=!0,m=!1,v=void 0;try{for(var b,w=r[Symbol.iterator]();!(y=(b=w.next()).done);y=!0){var E=b.value;d.push(C(F,E))}}catch(t){m=!0,v=t}finally{try{!y&&w.return&&w.return()}finally{if(m)throw v}}return d}));case 59:case"end":return r.stop()}},null,this,[[20,24,28,36],[29,,31,35],[41,45,49,57],[50,,52,56]])}}},function(t,e,r){"use strict";var n=r(109)(!0);r(62)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(22);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n=r(68),i=r(44);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n=r(43)("keys"),i=r(31);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e,r){var n=r(8),i=r(6),u=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return u[t]||(u[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(28)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(14).f,i=r(9),u=r(4)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,u)&&n(t,u,{configurable:!0,value:e})}},function(t,e,r){r(121);for(var n=r(6),i=r(13),u=r(23),o=r(4)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),a=0;a<s.length;a++){var f=s[a],c=n[f],h=c&&c.prototype;h&&!h[o]&&i(h,o,f),u[f]=u.Array}},function(t,e,r){e.f=r(4)},function(t,e,r){var n=r(6),i=r(8),u=r(28),o=r(47),s=r(14).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=u?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(135),i=r(178),u=Object.assign({},n,i);t.exports=u},function(t,e){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function u(t){return void 0===t}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},r.prototype.emit=function(t){var e,r,o,s,a,f;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(u(r=this._events[t]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),o=(f=r.slice()).length,a=0;a<o;a++)f[a].apply(this,s);return!0},r.prototype.addListener=function(t,e){var o;if(!n(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,n(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(o=u(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[t].length>o&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(t,e){if(!n(e))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(t,i),r||(r=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},r.prototype.removeListener=function(t,e){var r,u,o,s;if(!n(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(o=(r=this._events[t]).length,u=-1,r===e||n(r.listener)&&r.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(r)){for(s=o;s-- >0;)if(r[s]===e||r[s].listener&&r[s].listener===e){u=s;break}if(u<0)return this;1===r.length?(r.length=0,delete this._events[t]):r.splice(u,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},r.prototype.removeAllListeners=function(t){var e,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[t]))this.removeListener(t,r);else if(r)for(;r.length;)this.removeListener(t,r[r.length-1]);return delete this._events[t],this},r.prototype.listeners=function(t){return this._events&&this._events[t]?n(this._events[t])?[this._events[t]]:this._events[t].slice():[]},r.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(n(e))return 1;if(e)return e.length}return 0},r.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,r){(e=t.exports=r(80)).Stream=e,e.Readable=e,e.Writable=r(53),e.Duplex=r(11),e.Transform=r(83),e.PassThrough=r(153)},function(t,e,r){"use strict";(function(e,n,i){var u=r(33);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;t.entry=null;for(;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var s,a=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:u.nextTick;v.WritableState=m;var f=r(25);f.inherits=r(1);var c={deprecate:r(152)},h=r(81),l=r(0).Buffer,p=i.Uint8Array||function(){};var d,y=r(82);function g(){}function m(t,e){s=s||r(11),t=t||{};var n=e instanceof s;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(f||0===f)?f:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(u.nextTick(i,n),u.nextTick(B,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),B(t,e))}(t,r,n,e,i);else{var o=_(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||E(t,r),n?a(w,t,r,o,i):w(t,r,o,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function v(t){if(s=s||r(11),!(d.call(v,this)||this instanceof s))return new v(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function b(t,e,r,n,i,u,o){e.writelen=n,e.writecb=o,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,u,e.onwrite),e.sync=!1}function w(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),B(t,e)}function E(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),u=e.corkedRequestsFree;u.entry=r;for(var s=0,a=!0;r;)i[s]=r,r.isBuf||(a=!1),r=r.next,s+=1;i.allBuffers=a,b(t,e,!0,e.length,i,"",u.finish),e.pendingcb++,e.lastBufferedRequest=null,u.next?(e.corkedRequestsFree=u.next,u.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;r;){var f=r.chunk,c=r.encoding,h=r.callback;if(b(t,e,!1,e.objectMode?1:f.length,f,c,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function _(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function A(t,e){t._final(function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),B(t,e)})}function B(t,e){var r=_(e);return r&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,u.nextTick(A,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}f.inherits(v,h),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===v&&(t&&t._writableState instanceof m)}})):d=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,r){var n=this._writableState,i=!1,o=!n.objectMode&&function(t){return l.isBuffer(t)||t instanceof p}(t);return o&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(r=e,e=null),o?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=g),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),u.nextTick(e,r)}(this,r):(o||function(t,e,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(t.emit("error",o),u.nextTick(n,o),i=!1),i}(this,n,t,r))&&(n.pendingcb++,i=function(t,e,r,n,i,u){if(!r){var o=function(t,e,r){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,r));return e}(e,n,i);n!==o&&(r=!0,i="buffer",n=o)}var s=e.objectMode?1:n.length;e.length+=s;var a=e.length<e.highWaterMark;a||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:u,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,s,n,i,u);return a}(this,n,o,t,e,r)),i},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||E(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!==t&&void 0!==t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,B(t,e),r&&(e.finished?u.nextTick(r):t.once("finish",r));e.ended=!0,t.writable=!1}(this,n,r)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,r(17),r(150).setImmediate,r(5))},function(t,e,r){"use strict";var n=r(0).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function u(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=a,this.end=f,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=l,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function o(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function a(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function c(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function l(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=u,u.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},u.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},u.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=o(e[n]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=o(e[n]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=o(e[n]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},u.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,r){"use strict";var n=r(1),i=r(86),u=r(0).Buffer,o=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function a(t,e){return t<<e|t>>>32-e}function f(t,e,r,n,i,u,o){return a(t+(e&r|~e&n)+i+u|0,o)+e|0}function c(t,e,r,n,i,u,o){return a(t+(e&n|r&~n)+i+u|0,o)+e|0}function h(t,e,r,n,i,u,o){return a(t+(e^r^n)+i+u|0,o)+e|0}function l(t,e,r,n,i,u,o){return a(t+(r^(e|~n))+i+u|0,o)+e|0}n(s,i),s.prototype._update=function(){for(var t=o,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var r=this._a,n=this._b,i=this._c,u=this._d;n=l(n=l(n=l(n=l(n=h(n=h(n=h(n=h(n=c(n=c(n=c(n=c(n=f(n=f(n=f(n=f(n,i=f(i,u=f(u,r=f(r,n,i,u,t[0],3614090360,7),n,i,t[1],3905402710,12),r,n,t[2],606105819,17),u,r,t[3],3250441966,22),i=f(i,u=f(u,r=f(r,n,i,u,t[4],4118548399,7),n,i,t[5],1200080426,12),r,n,t[6],2821735955,17),u,r,t[7],4249261313,22),i=f(i,u=f(u,r=f(r,n,i,u,t[8],1770035416,7),n,i,t[9],2336552879,12),r,n,t[10],4294925233,17),u,r,t[11],2304563134,22),i=f(i,u=f(u,r=f(r,n,i,u,t[12],1804603682,7),n,i,t[13],4254626195,12),r,n,t[14],2792965006,17),u,r,t[15],1236535329,22),i=c(i,u=c(u,r=c(r,n,i,u,t[1],4129170786,5),n,i,t[6],3225465664,9),r,n,t[11],643717713,14),u,r,t[0],3921069994,20),i=c(i,u=c(u,r=c(r,n,i,u,t[5],3593408605,5),n,i,t[10],38016083,9),r,n,t[15],3634488961,14),u,r,t[4],3889429448,20),i=c(i,u=c(u,r=c(r,n,i,u,t[9],568446438,5),n,i,t[14],3275163606,9),r,n,t[3],4107603335,14),u,r,t[8],1163531501,20),i=c(i,u=c(u,r=c(r,n,i,u,t[13],2850285829,5),n,i,t[2],4243563512,9),r,n,t[7],1735328473,14),u,r,t[12],2368359562,20),i=h(i,u=h(u,r=h(r,n,i,u,t[5],4294588738,4),n,i,t[8],2272392833,11),r,n,t[11],1839030562,16),u,r,t[14],4259657740,23),i=h(i,u=h(u,r=h(r,n,i,u,t[1],2763975236,4),n,i,t[4],1272893353,11),r,n,t[7],4139469664,16),u,r,t[10],3200236656,23),i=h(i,u=h(u,r=h(r,n,i,u,t[13],681279174,4),n,i,t[0],3936430074,11),r,n,t[3],3572445317,16),u,r,t[6],76029189,23),i=h(i,u=h(u,r=h(r,n,i,u,t[9],3654602809,4),n,i,t[12],3873151461,11),r,n,t[15],530742520,16),u,r,t[2],3299628645,23),i=l(i,u=l(u,r=l(r,n,i,u,t[0],4096336452,6),n,i,t[7],1126891415,10),r,n,t[14],2878612391,15),u,r,t[5],4237533241,21),i=l(i,u=l(u,r=l(r,n,i,u,t[12],1700485571,6),n,i,t[3],2399980690,10),r,n,t[10],4293915773,15),u,r,t[1],2240044497,21),i=l(i,u=l(u,r=l(r,n,i,u,t[8],1873313359,6),n,i,t[15],4264355552,10),r,n,t[6],2734768916,15),u,r,t[13],1309151649,21),i=l(i,u=l(u,r=l(r,n,i,u,t[4],4149444226,6),n,i,t[11],3174756917,10),r,n,t[2],718787259,15),u,r,t[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+n|0,this._c=this._c+i|0,this._d=this._d+u|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=u.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=s},function(t,e,r){var n=r(87),i=r(89),u=r(164);t.exports={Curve:i,Point:n,getCurveByName:u}},function(t,e,r){"use strict";var n=r(1),i=r(55),u=r(90),o=r(91),s=r(10);function a(t){s.call(this,"digest"),this._hash=t}n(a,s),a.prototype._update=function(t){this._hash.update(t)},a.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new u:new a(o(t))}},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(179),u=r(184),o=r(3),s=u.create;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!==(void 0===t?"undefined":n(t)))throw new TypeError("definitions is a required parameter");if(e.customTypes)for(var r in t=Object.assign({},t),e.customTypes)delete t[r];var u=i(e),o=s(t,u),c=o.errors,h=o.structs;return{errors:c,structs:h,types:u,extend:function(e){return function t(e,r){var n=Object.assign({},e,r),i=s(n,u),o=i.structs;return{errors:i.errors,structs:o,extend:function(e){return t(n,e)},fromBuffer:a(u,o),toBuffer:f(u,o)}}(t,e)},fromBuffer:a(u,h),toBuffer:f(u,h)}};var a=function(t,r){return function(i,s){o.equal(void 0===i?"undefined":n(i),"string","typeName (type or struct name)"),"string"==typeof s&&(s=e.from(s,"hex")),o(e.isBuffer(s),"expecting buf<hex|Buffer>");var a=t[i];return a=a?a():r[i],o(a,"missing type or struct: "+i),u.fromBuffer(a,s)}},f=function(t,e){return function(r,i){o.equal(void 0===r?"undefined":n(r),"string","typeName (type or struct name)"),o(null!=i,"value is required");var s=t[r];return s=s?s():e[r],o(s,"missing type or struct: "+r),u.toBuffer(s,i)}};t.exports.fromBuffer=u.fromBuffer,t.exports.toBuffer=u.toBuffer}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=u(r(60)),i=u(r(20));function u(t){return t&&t.__esModule?t:{default:t}}var o=r(50),s=o.Signature,a=o.PublicKey,f=r(58),c=r(18),h=r(3),l=r(99),p=r(100),d=(p.isName,p.encodeName),y=p.decodeName,g=p.DecimalPad,m=p.DecimalImply,v=p.DecimalUnimply,b=p.printAsset,w=p.parseAsset;t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],r=function(e,r){var n=t.abiCache.abi(r),i=!0,u=!1,o=void 0;try{for(var s,a=n.abi.actions[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if(f.name===e){var c=n.structs[f.type];if(null!=c)return c}}}catch(t){u=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(u)throw o}}var h=n.structs[e];if(null!=h)return h;throw new Error("Missing ABI action: "+e)},n=null==t.forceActionDataHex||t.forceActionDataHex,i=Object.assign({},T(t),k(r),M(t),I(r,n),t.override),u={name:function(){return[E]},public_key:function(){return[_(A)]},symbol:function(){return[B]},symbol_code:function(){return[C]},extended_symbol:function(){return[F]},asset:function(){return[D]},extended_asset:function(){return[x]},signature:function(){return[_(S)]}},o=Object.assign({},u,t.customTypes);(t=Object.assign({override:i},{customTypes:o},t)).sort=Object.assign({},t.sort),t.sort["action.authorization"]=!0,t.sort["signed_transaction.signature"]=!0,t.sort["authority.accounts"]=!0,t.sort["authority.keys"]=!0;var s=Object.assign({},l,e),a=f(s,t),c=a.structs,h=a.types,p=a.errors,d=a.fromBuffer,y=a.toBuffer;if(0!==p.length)throw new Error(JSON.stringify(p,null,4));return{structs:c,types:h,fromBuffer:d,toBuffer:y}};var E=function(t){return{fromByteBuffer:function(t){return y(t.readUint64(),!1)},appendByteBuffer:function(t,e){t.writeUint64(d(e,!1))},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"":e}}},_=function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t,r,n){var i=e.map(function(e){return e(t,r,n)}),u=r.static_variant(i);return{fromByteBuffer:function(t){return u.fromByteBuffer(t)},appendByteBuffer:function(t,e){Array.isArray(e)||(e=[0,e]),u.appendByteBuffer(t,e)},fromObject:function(t){return Array.isArray(t)||(t=[0,t]),u.fromObject(t)[1]},toObject:function(t){return Array.isArray(t)||(t=[0,t]),u.toObject(t)[1]}}}},A=function(t){return{fromByteBuffer:function(r){var n=r.copy(r.offset,r.offset+33);r.skip(33);var i=e.from(n.toBinary(),"binary");return a.fromBuffer(i).toString(t.keyPrefix)},appendByteBuffer:function(e,r){var n=a.fromStringOrThrow(r,t.keyPrefix).toBuffer();e.append(n.toString("binary"),"binary")},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?(t.keyPrefix?t.keyPrefix:"EOS")+"6MRy..":e}}},B=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var r=e.readUint8(),n=e.toBinary(),i="",u=!0,o=!1,s=void 0;try{for(var a,f=n[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;if("\0"==c)break;i+=c}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}return r+","+i},appendByteBuffer:function(t,e){var r=w(e),n=r.symbol,i=r.precision;h(null!=i,"Precision unknown for symbol: "+e);var u="\0".repeat(7-n.length);t.append(String.fromCharCode(i)+n+u)},fromObject:function(t){h(null!=t,"Symbol is required: "+t);var e=w(t),r=e.symbol,n=e.precision;return null==n?r:n+","+r},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},C=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var r=e.toBinary(),n="",i=!0,u=!1,o=void 0;try{for(var s,a=r[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if("\0"==f)break;n+=f}}catch(t){u=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(u)throw o}}return""+n},appendByteBuffer:function(t,e){var r=w(e).symbol,n="\0".repeat(8-r.length);t.append(r+n)},fromObject:function(t){return h(null!=t,"Symbol is required: "+t),w(t).symbol},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},F=function(t,e,r){var u=r.symbol(t),o=r.name(t);return{fromByteBuffer:function(t){return u.fromByteBuffer(t)+"@"+o.fromByteBuffer(t)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"string","Invalid extended symbol: "+e);var r=e.split("@"),s=(0,n.default)(r,2),a=s[0],f=s[1];h(null!=f,"Missing @contract suffix in extended symbol: "+e),u.appendByteBuffer(t,a),o.appendByteBuffer(t,f)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"SYS@contract":e}}},D=function(t,e,r){var n=e.int64(t),i=r.symbol(t);return{fromByteBuffer:function(t){var e=n.fromByteBuffer(t);h(null!=e,"amount");var r=i.fromByteBuffer(t),u=w(""+r),o=u.precision,s=u.symbol;return h(null!=o,"precision"),h(null!=s,"symbol"),v(e,o)+" "+s},appendByteBuffer:function(t,e){var r=w(e),u=r.amount,o=r.precision,s=r.symbol;h(null!=u,"amount"),h(null!=o,"precision"),h(null!=s,"symbol"),n.appendByteBuffer(t,m(u,o)),i.appendByteBuffer(t,o+","+s)},fromObject:function(t){var e=w(t),r=e.amount,n=e.precision,i=e.symbol;return h(null!=r,"amount"),h(null!=n,"precision"),h(null!=i,"symbol"),g(r,n)+" "+i},toObject:function(e){if(t.defaults&&null==e)return"0.0001 SYS";var r=w(e),n=r.amount,i=r.precision,u=r.symbol;return h(null!=n,"amount"),h(null!=i,"precision"),h(null!=u,"symbol"),g(n,i)+" "+u}}},x=function(t,e,r){var u=r.asset(t),o=r.name(t);return{fromByteBuffer:function(t){var e=u.fromByteBuffer(t),r=o.fromByteBuffer(t);return w(e+"@"+r)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object, got "+(void 0===e?"undefined":(0,i.default)(e)));var r=b(e),s=r.split("@"),a=(0,n.default)(s,2)[1];h.equal(void 0===a?"undefined":(0,i.default)(a),"string","Invalid extended asset: "+e),u.appendByteBuffer(t,r),o.appendByteBuffer(t,a)},fromObject:function(t){var e={};"string"==typeof t?Object.assign(e,w(t)):"object"===(void 0===t?"undefined":(0,i.default)(t))?Object.assign(e,t):h(!1,"expecting extended_asset<object|string>, got: "+(void 0===t?"undefined":(0,i.default)(t)));var r=e.amount,n=e.precision,u=e.symbol,o=e.contract;return h(null!=r,"missing amount"),h(null!=n,"missing precision"),h(null!=u,"missing symbol"),h(null!=o,"missing contract"),{amount:r,precision:n,symbol:u,contract:o}},toObject:function(e){if(t.defaults&&null==e)return{amount:"1.0000",precision:4,symbol:"SYS",contract:"eosio.token"};h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object");var r=e.amount,n=e.precision,u=e.symbol,o=e.contract;return{amount:g(r,n),precision:n,symbol:u,contract:o}}}},S=function(t,e){var r=e.fixed_bytes65(t);return{fromByteBuffer:function(t){var e=r.fromByteBuffer(t);return s.from(e).toString()},appendByteBuffer:function(t,e){var n=s.from(e);r.appendByteBuffer(t,n.toBuffer())},fromObject:function(t){return s.from(t).toString()},toObject:function(e){return t.defaults&&null==e?"SIG_K1_bas58signature..":s.from(e).toString()}}},T=function(t){return{"authority.fromObject":function(e){if(a.fromString(e,t.keyPrefix))return{threshold:1,keys:[{key:e,weight:1}]};if("string"==typeof e){var r=e.split("@"),i=(0,n.default)(r,2),u=i[0],o=i[1];return{threshold:1,accounts:[{permission:{actor:u,permission:void 0===o?"active":o},weight:1}]}}}}},k=function(t){return{"abi_def.fromObject":function(t){if("string"==typeof t){var r=e.from(t,"hex").toString();return 0===r.length&&(r=e.from(t).toString()),JSON.parse(r)}return e.isBuffer(t)?JSON.parse(t.toString()):null},"setabi.abi.appendByteBuffer":function(r){r.fields;var n=r.object,u=r.b,o=t("abi_def","eosio"),s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);e.isBuffer(n.abi)?s.append(n.abi):"object"==(0,i.default)(n.abi)&&o.appendByteBuffer(s,n.abi),u.writeVarint32(s.offset),u.append(s.copy(0,s.offset),"binary")}}},M=function(t){return{"setcode.code.fromObject":function(r){var n=r.object,i=r.result;try{var u=n.code.toString();if(/^\s*\(module/.test(u)){var o=t.binaryen;h(null!=o,'required: config.binaryen = require("binaryen")'),t.debug&&console.log("Assembling WASM..");var s=e.from(o.parseText(u).emitBinary());i.code=s}else i.code=n.code}catch(t){throw console.error(t,n.code),t}}}},I=function(t,r){return{"action.data.fromByteBuffer":function(r){var n=r.fields,i=r.object,u=r.b,o=r.config,s=""==(i.name||"")?n.data:t(i.name,i.account);if(s)u.readVarint32(),i.data=s.fromByteBuffer(u,o);else{var a=u.readVarint32(),f=u.copy(u.offset,u.offset+a);u.skip(a),i.data=e.from(f.toBinary(),"binary")}},"action.data.appendByteBuffer":function(r){var n=r.fields,i=r.object,u=r.b,o=""==(i.name||"")?n.data:t(i.name,i.account);if(o){var s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);o.appendByteBuffer(s,i.data),u.writeVarint32(s.offset),u.append(s.copy(0,s.offset),"binary")}else{var a="string"==typeof i.data?e.from(i.data,"hex"):i.data;if(!e.isBuffer(a))throw new TypeError("Unknown struct '"+i.name+"' for contract '"+i.account+"', locate this struct or provide serialized action.data");u.writeVarint32(a.length),u.append(a.toString("binary"),"binary")}},"action.data.fromObject":function(r){var n=r.fields,u=r.object,o=r.result,s=u.data,a=u.name,c=""==(a||"")?n.data:t(a,u.account);if(c)if("object"===(void 0===s?"undefined":(0,i.default)(s)))o.data=c.fromObject(s);else{if("string"!=typeof s)throw new TypeError("Expecting hex string or object in action.data");var h=e.from(s,"hex");o.data=f.fromBuffer(c,h)}else o.data=s},"action.data.toObject":function(n){var i=n.fields,u=n.object,o=n.result,s=n.config,a=u||{},f=a.data,h=a.name,l=""==(h||"")?i.data:t(h,u.account);if(l){if(r){var p=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);return f&&l.appendByteBuffer(p,f),void(o.data=p.copy(0,p.offset).toString("hex"))}o.data=l.toObject(f,s)}else o.data=e.isBuffer(f)?f.toString("hex"):f}}}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";e.__esModule=!0;var n=u(r(200)),i=u(r(203));function u(t){return t&&t.__esModule?t:{default:t}}e.default=function(){return function(t,e){if(Array.isArray(t))return t;if((0,n.default)(Object(t)))return function(t,e){var r=[],n=!0,u=!1,o=void 0;try{for(var s,a=(0,i.default)(t);!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){u=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(u)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(t,e,r){t.exports=r(105)},function(t,e,r){"use strict";var n=r(28),i=r(63),u=r(66),o=r(13),s=r(23),a=r(112),f=r(45),c=r(119),h=r(4)("iterator"),l=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,y,g,m){a(r,e,d);var v,b,w,E=function(t){if(!l&&t in C)return C[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},_=e+" Iterator",A="values"==y,B=!1,C=t.prototype,F=C[h]||C["@@iterator"]||y&&C[y],D=F||E(y),x=y?A?E("entries"):D:void 0,S="Array"==e&&C.entries||F;if(S&&(w=c(S.call(new t)))!==Object.prototype&&w.next&&(f(w,_,!0),n||"function"==typeof w[h]||o(w,h,p)),A&&F&&"values"!==F.name&&(B=!0,D=function(){return F.call(this)}),n&&!m||!l&&!B&&C[h]||o(C,h,D),s[e]=D,s[_]=p,y)if(v={values:A?D:E("values"),keys:g?D:E("keys"),entries:x},m)for(b in v)b in C||u(C,b,v[b]);else i(i.P+i.F*(l||B),e,v);return v}},function(t,e,r){var n=r(6),i=r(8),u=r(110),o=r(13),s=r(9),a=function(t,e,r){var f,c,h,l=t&a.F,p=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=t&a.W,v=p?i:i[e]||(i[e]={}),b=v.prototype,w=p?n:d?n[e]:(n[e]||{}).prototype;for(f in p&&(r=e),r)(c=!l&&w&&void 0!==w[f])&&s(v,f)||(h=c?w[f]:r[f],v[f]=p&&"function"!=typeof w[f]?r[f]:g&&c?u(h,n):m&&w[f]==h?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(h):y&&"function"==typeof h?u(Function.call,h):h,y&&((v.virtual||(v.virtual={}))[f]=h,t&a.R&&b&&!b[f]&&o(b,f,h)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,r){t.exports=!r(15)&&!r(29)(function(){return 7!=Object.defineProperty(r(65)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(22),i=r(6).document,u=n(i)&&n(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,e,r){t.exports=r(13)},function(t,e,r){var n=r(21),i=r(113),u=r(44),o=r(42)("IE_PROTO"),s=function(){},a=function(){var t,e=r(65)("iframe"),n=u.length;for(e.style.display="none",r(118).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;n--;)delete a.prototype[u[n]];return a()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=a(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(9),i=r(16),u=r(115)(!1),o=r(42)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),a=0,f=[];for(r in s)r!=o&&n(s,r)&&f.push(r);for(;e.length>a;)n(s,r=e[a++])&&(~u(f,r)||f.push(r));return f}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(68),i=r(44).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){"use strict";(function(e){var n=r(73),i=r(18),u=r(139),o=r(3),s=r(26),a=r(34),f=r(12),c=i.Long;function h(t,r,n,c,h){if(!(t=a(t)))throw new TypeError("private_key is required");if(!(r=s(r)))throw new TypeError("public_key is required");if(!(n=p(n)))throw new TypeError("nonce is required");if(!e.isBuffer(c)){if("string"!=typeof c)throw new TypeError("message should be buffer or string");c=new e(c,"binary")}if(h&&"number"!=typeof h)throw new TypeError("checksum should be a number");var l=t.getSharedSecret(r),y=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);y.writeUint64(n),y.append(l.toString("binary"),"binary"),y=new e(y.copy(0,y.offset).toBinary(),"binary");var g=f.sha512(y),m=g.slice(32,48),v=g.slice(0,32),b=f.sha256(g);if(b=b.slice(0,4),b=i.fromBinary(b.toString("binary"),i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN).readUint32(),h){if(b!==h)throw new Error("Invalid key");c=function(t,r,n){o(t,"Missing cipher text"),t=d(t);var i=u.createDecipheriv("aes-256-cbc",r,n);return t=e.concat([i.update(t),i.final()])}(c,v,m)}else c=function(t,r,n){o(t,"Missing plain text"),t=d(t);var i=u.createCipheriv("aes-256-cbc",r,n);return t=e.concat([i.update(t),i.final()])}(c,v,m);return{nonce:n,message:c,checksum:b}}t.exports={encrypt:function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){if(null===l){var t=new Uint8Array(n(2));l=parseInt(t[0]<<8|t[1],10)}var e=c.fromNumber(Date.now()),r=++l%65535;return(e=e.shiftLeft(16).or(c.fromNumber(r))).toString()}();return h(t,e,i,r)},decrypt:function(t,e,r,n,i){return h(t,e,r,n,i).message}};var l=null,p=function(t){return t?c.isLong(t)?t:c.fromString(t):t},d=function(t){return t?e.isBuffer(t)?t:new e(t,"binary"):t}}).call(this,r(2).Buffer)},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(e,n){var i=r(0).Buffer,u=e.crypto||e.msCrypto;u&&u.getRandomValues?t.exports=function(t,r){if(t>65536)throw new Error("requested too many random bytes");var o=new e.Uint8Array(t);t>0&&u.getRandomValues(o);var s=i.from(o.buffer);if("function"==typeof r)return n.nextTick(function(){r(null,s)});return s}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(5),r(17))},function(t,e,r){var n={ECB:r(141),CBC:r(142),CFB:r(143),CFB8:r(144),CFB1:r(145),OFB:r(146),CTR:r(75),GCM:r(75)},i=r(77);for(var u in i)i[u].module=n[i[u].mode];t.exports=i},function(t,e,r){var n=r(24),i=r(0).Buffer,u=r(76);function o(t){var e=t._cipher.encryptBlockRaw(t._prev);return u(t._prev),e}e.encrypt=function(t,e){var r=Math.ceil(e.length/16),u=t._cache.length;t._cache=i.concat([t._cache,i.allocUnsafe(16*r)]);for(var s=0;s<r;s++){var a=o(t),f=u+16*s;t._cache.writeUInt32BE(a[0],f+0),t._cache.writeUInt32BE(a[1],f+4),t._cache.writeUInt32BE(a[2],f+8),t._cache.writeUInt32BE(a[3],f+12)}var c=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),n(e,c)}},function(t,e){t.exports=function(t){for(var e,r=t.length;r--;){if(255!==(e=t.readUInt8(r))){e++,t.writeUInt8(e,r);break}t.writeUInt8(0,r)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,r){var n=r(32),i=r(0).Buffer,u=r(10),o=r(1),s=r(158),a=r(24),f=r(76);function c(t,e,r,o){u.call(this);var a=i.alloc(4,0);this._cipher=new n.AES(e);var c=this._cipher.encryptBlock(a);this._ghash=new s(c),r=function(t,e,r){if(12===e.length)return t._finID=i.concat([e,i.from([0,0,0,1])]),i.concat([e,i.from([0,0,0,2])]);var n=new s(r),u=e.length,o=u%16;n.update(e),o&&(o=16-o,n.update(i.alloc(o,0))),n.update(i.alloc(8,0));var a=8*u,c=i.alloc(8);c.writeUIntBE(a,0,8),n.update(c),t._finID=n.state;var h=i.from(t._finID);return f(h),h}(this,r,c),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}o(c,u),c.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=i.alloc(e,0),this._ghash.update(e))}this._called=!0;var r=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(r),this._len+=t.length,r},c.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=a(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var r=0;t.length!==e.length&&r++;for(var n=Math.min(t.length,e.length),i=0;i<n;++i)r+=t[i]^e[i];return r}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},c.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},c.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},c.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=c},function(t,e,r){t.exports=i;var n=r(51).EventEmitter;function i(){n.call(this)}r(1)(i,n),i.Readable=r(52),i.Writable=r(154),i.Duplex=r(155),i.Transform=r(156),i.PassThrough=r(157),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function u(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",u),t._isStdio||e&&!1===e.end||(r.on("end",s),r.on("close",a));var o=!1;function s(){o||(o=!0,t.end())}function a(){o||(o=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(c(),0===n.listenerCount(this,"error"))throw t}function c(){r.removeListener("data",i),t.removeListener("drain",u),r.removeListener("end",s),r.removeListener("close",a),r.removeListener("error",f),t.removeListener("error",f),r.removeListener("end",c),r.removeListener("close",c),t.removeListener("close",c)}return r.on("error",f),t.on("error",f),r.on("end",c),r.on("close",c),t.on("close",c),t.emit("pipe",r),t}},function(t,e,r){"use strict";(function(e,n){var i=r(33);t.exports=b;var u,o=r(72);b.ReadableState=v;r(51).EventEmitter;var s=function(t,e){return t.listeners(e).length},a=r(81),f=r(0).Buffer,c=e.Uint8Array||function(){};var h=r(25);h.inherits=r(1);var l=r(147),p=void 0;p=l&&l.debuglog?l.debuglog("stream"):function(){};var d,y=r(148),g=r(82);h.inherits(b,a);var m=["error","close","destroy","pause","resume"];function v(t,e){u=u||r(11),t=t||{};var n=e instanceof u;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=r(54).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function b(t){if(u=u||r(11),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function w(t,e,r,n,i){var u,o=t._readableState;null===e?(o.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,B(t)}(t,o)):(i||(u=function(t,e){var r;(function(t){return f.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));return r}(o,e)),u?t.emit("error",u):o.objectMode||e&&e.length>0?("string"==typeof e||o.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),n?o.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):E(t,o,e,!0):o.ended?t.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!r?(e=o.decoder.write(e),o.objectMode||0!==e.length?E(t,o,e,!1):F(t,o)):E(t,o,e,!1))):n||(o.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(o)}function E(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&B(t)),F(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=f.from(t,e),e=""),r=!0),w(this,t,e,!1,r)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return d||(d=r(54).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var _=8388608;function A(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=_?t=_:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function B(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(C,t):C(t))}function C(t){p("emit readable"),t.emit("readable"),T(t)}function F(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(D,t,e))}function D(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function x(t){p("readable nexttick read 0"),t.read(0)}function S(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),T(t),e.flowing&&!e.reading&&t.read(0)}function T(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function k(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;t-=i.length;for(;r=r.next;){var u=r.data,o=t>u.length?u.length:t;if(o===u.length?i+=u:i+=u.slice(0,t),0===(t-=o)){o===u.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=u.slice(o));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=f.allocUnsafe(t),n=e.head,i=1;n.data.copy(r),t-=n.data.length;for(;n=n.next;){var u=n.data,o=t>u.length?u.length:t;if(u.copy(r,r.length-t,0,o),0===(t-=o)){o===u.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=u.slice(o));break}++i}return e.length-=i,r}(t,e);return n}(t,e.buffer,e.decoder),r);var r}function M(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(I,e,t))}function I(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function O(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}b.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?M(this):B(this),null;if(0===(t=A(t,e))&&e.ended)return 0===e.length&&M(this),null;var n,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=A(r,e))),null===(n=t>0?k(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&M(this)),null!==n&&this.emit("data",n),n},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var r=this,u=this._readableState;switch(u.pipesCount){case 0:u.pipes=t;break;case 1:u.pipes=[u.pipes,t];break;default:u.pipes.push(t)}u.pipesCount+=1,p("pipe count=%d opts=%j",u.pipesCount,e);var a=(!e||!1!==e.end)&&t!==n.stdout&&t!==n.stderr?c:b;function f(e,n){p("onunpipe"),e===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,p("cleanup"),t.removeListener("close",m),t.removeListener("finish",v),t.removeListener("drain",h),t.removeListener("error",g),t.removeListener("unpipe",f),r.removeListener("end",c),r.removeListener("end",b),r.removeListener("data",y),l=!0,!u.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function c(){p("onend"),t.end()}u.endEmitted?i.nextTick(a):r.once("end",a),t.on("unpipe",f);var h=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,T(t))}}(r);t.on("drain",h);var l=!1;var d=!1;function y(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===u.pipesCount&&u.pipes===t||u.pipesCount>1&&-1!==O(u.pipes,t))&&!l&&(p("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,d=!0),r.pause())}function g(e){p("onerror",e),b(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",v),b()}function v(){p("onfinish"),t.removeListener("close",m),b()}function b(){p("unpipe"),r.unpipe(t)}return r.on("data",y),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?o(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",g),t.once("close",m),t.once("finish",v),t.emit("pipe",r),u.flowing||(p("pipe resume"),r.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r),this);if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var u=0;u<i;u++)n[u].emit("unpipe",this,r);return this}var o=O(e.pipes,t);return-1===o?this:(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r),this)},b.prototype.on=function(t,e){var r=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&B(this):i.nextTick(x,this))}return r},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(S,t,e))}(this,t)),this},b.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",function(){if(p("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(p("wrapped data"),r.decoder&&(i=r.decoder.write(i)),!r.objectMode||null!==i&&void 0!==i)&&((r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var u=0;u<m.length;u++)t.on(m[u],this.emit.bind(this,m[u]));return this._read=function(e){p("wrapped _read",e),n&&(n=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=k}).call(this,r(5),r(17))},function(t,e,r){t.exports=r(51).EventEmitter},function(t,e,r){"use strict";var n=r(33);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,u=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return u||o?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(n.nextTick(i,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,r){"use strict";t.exports=u;var n=r(11),i=r(25);function u(t){if(!(this instanceof u))return new u(t);n.call(this,t),this._transformState={afterTransform:function(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",o)}function o(){var t=this;"function"==typeof this._flush?this._flush(function(e,r){s(t,e,r)}):s(this,null,null)}function s(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(1),i.inherits(u,n),u.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},u.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},u.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},u.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},u.prototype._destroy=function(t,e){var r=this;n.prototype._destroy.call(this,t,function(t){e(t),r.emit("close")})}},function(t,e,r){var n=r(32),i=r(0).Buffer,u=r(10);function o(t,e,r,o){u.call(this),this._cipher=new n.AES(e),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._mode=t}r(1)(o,u),o.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},o.prototype._final=function(){this._cipher.scrub()},t.exports=o},function(t,e,r){var n=r(0).Buffer,i=r(55);t.exports=function(t,e,r,u){if(n.isBuffer(t)||(t=n.from(t,"binary")),e&&(n.isBuffer(e)||(e=n.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var o=r/8,s=n.alloc(o),a=n.alloc(u||0),f=n.alloc(0);o>0||u>0;){var c=new i;c.update(f),c.update(t),e&&c.update(e),f=c.digest();var h=0;if(o>0){var l=s.length-o;h=Math.min(o,f.length),f.copy(s,l,0,h),o-=h}if(h<f.length&&u>0){var p=a.length-u,d=Math.min(u,f.length-h);f.copy(a,p,h,h+d),u-=d}}return f.fill(0),{key:s,iv:a}}},function(t,e,r){"use strict";var n=r(0).Buffer,i=r(79).Transform;function u(t){i.call(this),this._block=n.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(1)(u,i),u.prototype._transform=function(t,e,r){var n=null;try{this.update(t,e)}catch(t){n=t}r(n)},u.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},u.prototype.update=function(t,e){if(function(t,e){if(!n.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(t)||(t=n.from(t,e));for(var r=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var u=this._blockOffset;u<this._blockSize;)r[u++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)r[this._blockOffset++]=t[i++];for(var o=0,s=8*t.length;s>0;++o)this._length[o]+=s,(s=this._length[o]/4294967296|0)>0&&(this._length[o]-=4294967296*s);return this},u.prototype._update=function(){throw new Error("_update is not implemented")},u.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return e},u.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=u},function(t,e,r){var n=r(3),i=r(0).Buffer,u=r(7),o=u.valueOf(3);function s(t,e,r,i){n.notStrictEqual(i,void 0,"Missing Z coordinate"),this.curve=t,this.x=e,this.y=r,this.z=i,this._zInv=null,this.compressed=!0}Object.defineProperty(s.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(s.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(s.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),s.fromAffine=function(t,e,r){return new s(t,e,r,u.ONE)},s.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},s.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new s(this.curve,this.x,t,this.z)},s.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var e=this.x,r=this.y,n=t.x,i=t.y.multiply(this.z).subtract(r.multiply(t.z)).mod(this.curve.p),u=n.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p);if(0===u.signum())return 0===i.signum()?this.twice():this.curve.infinity;var a=u.square(),f=a.multiply(u),c=e.multiply(a),h=i.square().multiply(this.z),l=h.subtract(c.shiftLeft(1)).multiply(t.z).subtract(f).multiply(u).mod(this.curve.p),p=c.multiply(o).multiply(i).subtract(r.multiply(f)).subtract(h.multiply(i)).multiply(t.z).add(i.multiply(f)).mod(this.curve.p),d=f.multiply(this.z).multiply(t.z).mod(this.curve.p);return new s(this.curve,l,p,d)},s.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,e=this.y,r=e.multiply(this.z).mod(this.curve.p),n=r.multiply(e).mod(this.curve.p),i=this.curve.a,u=t.square().multiply(o);0!==i.signum()&&(u=u.add(this.z.square().multiply(i)));var a=(u=u.mod(this.curve.p)).square().subtract(t.shiftLeft(3).multiply(n)).shiftLeft(1).multiply(r).mod(this.curve.p),f=u.multiply(o).multiply(t).subtract(n.shiftLeft(1)).shiftLeft(2).multiply(n).subtract(u.pow(3)).mod(this.curve.p),c=r.pow(3).shiftLeft(3).mod(this.curve.p);return new s(this.curve,a,f,c)},s.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var e=t,r=e.multiply(o),n=this.negate(),i=this,u=r.bitLength()-2;u>0;--u){var s=r.testBit(u),a=e.testBit(u);i=i.twice(),s!==a&&(i=i.add(s?this:n))}return i},s.prototype.multiplyTwo=function(t,e,r){for(var n=Math.max(t.bitLength(),r.bitLength())-1,i=this.curve.infinity,u=this.add(e);n>=0;){var o=t.testBit(n),s=r.testBit(n);i=i.twice(),o?i=s?i.add(u):i.add(this):s&&(i=i.add(e)),--n}return i},s.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return i.alloc(1,0);var e,r=this.affineX,n=this.affineY,u=this.curve.pLength;return t?(e=i.allocUnsafe(1+u)).writeUInt8(n.isEven()?2:3,0):((e=i.allocUnsafe(1+u+u)).writeUInt8(4,0),n.toBuffer(u).copy(e,1+u)),r.toBuffer(u).copy(e,1),e},s.decodeFrom=function(t,e){var r,i=e.readUInt8(0),o=4!==i,a=Math.floor((t.p.bitLength()+7)/8),f=u.fromBuffer(e.slice(1,1+a));if(o){n.equal(e.length,a+1,"Invalid sequence length"),n(2===i||3===i,"Invalid sequence tag");var c=3===i;r=t.pointFromX(c,f)}else{n.equal(e.length,1+a+a,"Invalid sequence length");var h=u.fromBuffer(e.slice(1+a));r=s.fromAffine(t,f,h)}return r.compressed=o,r},s.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},t.exports=s},function(t,e,r){function n(t,e,r){if(!(this instanceof n))return new n(t,e,r);null!=t&&("number"==typeof t?this.fromNumber(t,e,r):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}var i=n.prototype;i.__bigi=r(162).version,n.isBigInteger=function(t,e){return t&&t.__bigi&&(!e||t.__bigi===i.__bigi)},n.prototype.am=function(t,e,r,n,i,u){for(;--u>=0;){var o=e*this[t++]+r[n]+i;i=Math.floor(o/67108864),r[n++]=67108863&o}return i},n.prototype.DB=26,n.prototype.DM=67108863;var u=n.prototype.DV=1<<26;n.prototype.FV=Math.pow(2,52),n.prototype.F1=26,n.prototype.F2=0;var o,s,a="0123456789abcdefghijklmnopqrstuvwxyz",f=new Array;for(o="0".charCodeAt(0),s=0;s<=9;++s)f[o++]=s;for(o="a".charCodeAt(0),s=10;s<36;++s)f[o++]=s;for(o="A".charCodeAt(0),s=10;s<36;++s)f[o++]=s;function c(t){return a.charAt(t)}function h(t,e){var r=f[t.charCodeAt(e)];return null==r?-1:r}function l(t){var e=new n;return e.fromInt(t),e}function p(t){var e,r=1;return 0!=(e=t>>>16)&&(t=e,r+=16),0!=(e=t>>8)&&(t=e,r+=8),0!=(e=t>>4)&&(t=e,r+=4),0!=(e=t>>2)&&(t=e,r+=2),0!=(e=t>>1)&&(t=e,r+=1),r}function d(t){this.m=t}function y(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function m(t,e){return t|e}function v(t,e){return t^e}function b(t,e){return t&~e}function w(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function E(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function _(){}function A(t){return t}function B(t){this.r2=new n,this.q3=new n,n.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}d.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},d.prototype.revert=function(t){return t},d.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},d.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r)},d.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},y.prototype.convert=function(t){var e=new n;return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(n.ZERO)>0&&this.m.subTo(e,e),e},y.prototype.revert=function(t){var e=new n;return t.copyTo(e),this.reduce(e),e},y.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=32767&t[e],n=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[r=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},y.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r)},y.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},i.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},i.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+u:this.t=0},i.fromString=function(t,e){var r;if(16==e)r=4;else if(8==e)r=3;else if(256==e)r=8;else if(2==e)r=1;else if(32==e)r=5;else{if(4!=e)return void this.fromRadix(t,e);r=2}this.t=0,this.s=0;for(var i=t.length,u=!1,o=0;--i>=0;){var s=8==r?255&t[i]:h(t,i);s<0?"-"==t.charAt(i)&&(u=!0):(u=!1,0==o?this[this.t++]=s:o+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),u&&n.ZERO.subTo(this,this)},i.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},i.dlShiftTo=function(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s},i.drShiftTo=function(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s},i.lShiftTo=function(t,e){var r,n=t%this.DB,i=this.DB-n,u=(1<<i)-1,o=Math.floor(t/this.DB),s=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)e[r+o+1]=this[r]>>i|s,s=(this[r]&u)<<n;for(r=o-1;r>=0;--r)e[r]=0;e[o]=s,e.t=this.t+o+1,e.s=this.s,e.clamp()},i.rShiftTo=function(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t)e.t=0;else{var n=t%this.DB,i=this.DB-n,u=(1<<n)-1;e[0]=this[r]>>n;for(var o=r+1;o<this.t;++o)e[o-r-1]|=(this[o]&u)<<i,e[o-r]=this[o]>>n;n>0&&(e[this.t-r-1]|=(this.s&u)<<i),e.t=this.t-r,e.clamp()}},i.subTo=function(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]-t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n-=t[r],e[r++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[r++]=this.DV+n:n>0&&(e[r++]=n),e.t=r,e.clamp()},i.multiplyTo=function(t,e){var r=this.abs(),i=t.abs(),u=r.t;for(e.t=u+i.t;--u>=0;)e[u]=0;for(u=0;u<i.t;++u)e[u+r.t]=r.am(0,i[u],e,u,0,r.t);e.s=0,e.clamp(),this.s!=t.s&&n.ZERO.subTo(e,e)},i.squareTo=function(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var n=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,n,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp()},i.divRemTo=function(t,e,r){var i=t.abs();if(!(i.t<=0)){var u=this.abs();if(u.t<i.t)return null!=e&&e.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=new n);var o=new n,s=this.s,a=t.s,f=this.DB-p(i[i.t-1]);f>0?(i.lShiftTo(f,o),u.lShiftTo(f,r)):(i.copyTo(o),u.copyTo(r));var c=o.t,h=o[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),d=this.FV/l,y=(1<<this.F1)/l,g=1<<this.F2,m=r.t,v=m-c,b=null==e?new n:e;for(o.dlShiftTo(v,b),r.compareTo(b)>=0&&(r[r.t++]=1,r.subTo(b,r)),n.ONE.dlShiftTo(c,b),b.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var w=r[--m]==h?this.DM:Math.floor(r[m]*d+(r[m-1]+g)*y);if((r[m]+=o.am(0,w,r,v,0,c))<w)for(o.dlShiftTo(v,b),r.subTo(b,r);r[m]<--w;)r.subTo(b,r)}null!=e&&(r.drShiftTo(c,e),s!=a&&n.ZERO.subTo(e,e)),r.t=c,r.clamp(),f>0&&r.rShiftTo(f,r),s<0&&n.ZERO.subTo(r,r)}}},i.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},i.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},i.exp=function(t,e){if(t>4294967295||t<1)return n.ONE;var r=new n,i=new n,u=e.convert(this),o=p(t)-1;for(u.copyTo(r);--o>=0;)if(e.sqrTo(r,i),(t&1<<o)>0)e.mulTo(i,u,r);else{var s=r;r=i,i=s}return e.revert(r)},i.toString=function(t){var e;if(this.s<0)return"-"+this.negate().toString(t);if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var r,n=(1<<e)-1,i=!1,u="",o=this.t,s=this.DB-o*this.DB%e;if(o-- >0)for(s<this.DB&&(r=this[o]>>s)>0&&(i=!0,u=c(r));o>=0;)s<e?(r=(this[o]&(1<<s)-1)<<e-s,r|=this[--o]>>(s+=this.DB-e)):(r=this[o]>>(s-=e)&n,s<=0&&(s+=this.DB,--o)),r>0&&(i=!0),i&&(u+=c(r));return i?u:"0"},i.negate=function(){var t=new n;return n.ZERO.subTo(this,t),t},i.abs=function(){return this.s<0?this.negate():this},i.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var r=this.t;if(0!=(e=r-t.t))return this.s<0?-e:e;for(;--r>=0;)if(0!=(e=this[r]-t[r]))return e;return 0},i.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+p(this[this.t-1]^this.s&this.DM)},i.byteLength=function(){return this.bitLength()>>3},i.mod=function(t){var e=new n;return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(n.ZERO)>0&&t.subTo(e,e),e},i.modPowInt=function(t,e){var r;return r=t<256||e.isEven()?new d(e):new y(e),this.exp(t,r)},_.prototype.convert=A,_.prototype.revert=A,_.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r)},_.prototype.sqrTo=function(t,e){t.squareTo(e)},B.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=new n;return t.copyTo(e),this.reduce(e),e},B.prototype.revert=function(t){return t},B.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},B.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r)},B.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],F=(1<<26)/C[C.length-1];i.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},i.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),r=Math.pow(t,e),i=l(r),u=new n,o=new n,s="";for(this.divRemTo(i,u,o);u.signum()>0;)s=(r+o.intValue()).toString(t).substr(1)+s,u.divRemTo(i,u,o);return o.intValue().toString(t)+s},i.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var r=this.chunkSize(e),i=Math.pow(e,r),u=!1,o=0,s=0,a=0;a<t.length;++a){var f=h(t,a);f<0?"-"==t.charAt(a)&&0==this.signum()&&(u=!0):(s=e*s+f,++o>=r&&(this.dMultiply(i),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),u&&n.ZERO.subTo(this,this)},i.fromNumber=function(t,e,r){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(n.ONE.shiftLeft(t-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(n.ONE.shiftLeft(t-1),this);else{var i=new Array,u=7&t;i.length=1+(t>>3),e.nextBytes(i),u>0?i[0]&=(1<<u)-1:i[0]=0,this.fromString(i,256)}},i.bitwiseTo=function(t,e,r){var n,i,u=Math.min(t.t,this.t);for(n=0;n<u;++n)r[n]=e(this[n],t[n]);if(t.t<this.t){for(i=t.s&this.DM,n=u;n<this.t;++n)r[n]=e(this[n],i);r.t=this.t}else{for(i=this.s&this.DM,n=u;n<t.t;++n)r[n]=e(i,t[n]);r.t=t.t}r.s=e(this.s,t.s),r.clamp()},i.changeBit=function(t,e){var r=n.ONE.shiftLeft(t);return this.bitwiseTo(r,e,r),r},i.addTo=function(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]+t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n+=t[r],e[r++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[r++]=n:n<-1&&(e[r++]=this.DV+n),e.t=r,e.clamp()},i.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},i.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},i.multiplyLowerTo=function(t,e,r){var n,i=Math.min(this.t+t.t,e);for(r.s=0,r.t=i;i>0;)r[--i]=0;for(n=r.t-this.t;i<n;++i)r[i+this.t]=this.am(0,t[i],r,i,0,this.t);for(n=Math.min(t.t,e);i<n;++i)this.am(0,t[i],r,i,0,e-i);r.clamp()},i.multiplyUpperTo=function(t,e,r){--e;var n=r.t=this.t+t.t-e;for(r.s=0;--n>=0;)r[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)r[this.t+n-e]=this.am(e-n,t[n],r,0,0,this.t+n-e);r.clamp(),r.drShiftTo(1,r)},i.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(0==e)r=this[0]%t;else for(var n=this.t-1;n>=0;--n)r=(e*r+this[n])%t;return r},i.millerRabin=function(t){var e=this.subtract(n.ONE),r=e.getLowestSetBit();if(r<=0)return!1;var i=e.shiftRight(r);(t=t+1>>1)>C.length&&(t=C.length);for(var u=new n(null),o=[],s=0;s<t;++s){for(;f=C[Math.floor(Math.random()*C.length)],-1!=o.indexOf(f););o.push(f),u.fromInt(f);var a=u.modPow(i,this);if(0!=a.compareTo(n.ONE)&&0!=a.compareTo(e)){for(var f=1;f++<r&&0!=a.compareTo(e);)if(0==(a=a.modPowInt(2,this)).compareTo(n.ONE))return!1;if(0!=a.compareTo(e))return!1}}return!0},i.clone=function(){var t=new n;return this.copyTo(t),t},i.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},i.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},i.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},i.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},i.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var r,n=this.DB-t*this.DB%8,i=0;if(t-- >0)for(n<this.DB&&(r=this[t]>>n)!=(this.s&this.DM)>>n&&(e[i++]=r|this.s<<this.DB-n);t>=0;)n<8?(r=(this[t]&(1<<n)-1)<<8-n,r|=this[--t]>>(n+=this.DB-8)):(r=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&r)&&(r|=-256),0===i&&(128&this.s)!=(128&r)&&++i,(i>0||r!=this.s)&&(e[i++]=r);return e},i.equals=function(t){return 0==this.compareTo(t)},i.min=function(t){return this.compareTo(t)<0?this:t},i.max=function(t){return this.compareTo(t)>0?this:t},i.and=function(t){var e=new n;return this.bitwiseTo(t,g,e),e},i.or=function(t){var e=new n;return this.bitwiseTo(t,m,e),e},i.xor=function(t){var e=new n;return this.bitwiseTo(t,v,e),e},i.andNot=function(t){var e=new n;return this.bitwiseTo(t,b,e),e},i.not=function(){for(var t=new n,e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},i.shiftLeft=function(t){var e=new n;return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},i.shiftRight=function(t){var e=new n;return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},i.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+w(this[t]);return this.s<0?this.t*this.DB:-1},i.bitCount=function(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=E(this[r]^e);return t},i.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},i.setBit=function(t){return this.changeBit(t,m)},i.clearBit=function(t){return this.changeBit(t,b)},i.flipBit=function(t){return this.changeBit(t,v)},i.add=function(t){var e=new n;return this.addTo(t,e),e},i.subtract=function(t){var e=new n;return this.subTo(t,e),e},i.multiply=function(t){var e=new n;return this.multiplyTo(t,e),e},i.divide=function(t){var e=new n;return this.divRemTo(t,e,null),e},i.remainder=function(t){var e=new n;return this.divRemTo(t,null,e),e},i.divideAndRemainder=function(t){var e=new n,r=new n;return this.divRemTo(t,e,r),new Array(e,r)},i.modPow=function(t,e){var r,i,u=t.bitLength(),o=l(1);if(u<=0)return o;r=u<18?1:u<48?3:u<144?4:u<768?5:6,i=u<8?new d(e):e.isEven()?new B(e):new y(e);var s=new Array,a=3,f=r-1,c=(1<<r)-1;if(s[1]=i.convert(this),r>1){var h=new n;for(i.sqrTo(s[1],h);a<=c;)s[a]=new n,i.mulTo(h,s[a-2],s[a]),a+=2}var g,m,v=t.t-1,b=!0,w=new n;for(u=p(t[v])-1;v>=0;){for(u>=f?g=t[v]>>u-f&c:(g=(t[v]&(1<<u+1)-1)<<f-u,v>0&&(g|=t[v-1]>>this.DB+u-f)),a=r;0==(1&g);)g>>=1,--a;if((u-=a)<0&&(u+=this.DB,--v),b)s[g].copyTo(o),b=!1;else{for(;a>1;)i.sqrTo(o,w),i.sqrTo(w,o),a-=2;a>0?i.sqrTo(o,w):(m=o,o=w,w=m),i.mulTo(w,s[g],o)}for(;v>=0&&0==(t[v]&1<<u);)i.sqrTo(o,w),m=o,o=w,w=m,--u<0&&(u=this.DB-1,--v)}return i.revert(o)},i.modInverse=function(t){var e=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&e||0==t.signum())return n.ZERO;for(var r=t.clone(),i=this.clone(),u=l(1),o=l(0),s=l(0),a=l(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),e?(u.isEven()&&o.isEven()||(u.addTo(this,u),o.subTo(t,o)),u.rShiftTo(1,u)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;i.isEven();)i.rShiftTo(1,i),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);r.compareTo(i)>=0?(r.subTo(i,r),e&&u.subTo(s,u),o.subTo(a,o)):(i.subTo(r,i),e&&s.subTo(u,s),a.subTo(o,a))}if(0!=i.compareTo(n.ONE))return n.ZERO;for(;a.compareTo(t)>=0;)a.subTo(t,a);for(;a.signum()<0;)a.addTo(t,a);return a},i.pow=function(t){return this.exp(t,new _)},i.gcd=function(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var n=e;e=r,r=n}var i=e.getLowestSetBit(),u=r.getLowestSetBit();if(u<0)return e;for(i<u&&(u=i),u>0&&(e.rShiftTo(u,e),r.rShiftTo(u,r));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return u>0&&r.lShiftTo(u,r),r},i.isProbablePrime=function(t){var e,r=this.abs();if(1==r.t&&r[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(r[0]==C[e])return!0;return!1}if(r.isEven())return!1;for(e=1;e<C.length;){for(var n=C[e],i=e+1;i<C.length&&n<F;)n*=C[i++];for(n=r.modInt(n);e<i;)if(n%C[e++]==0)return!1}return r.millerRabin(t)},i.square=function(){var t=new n;return this.squareTo(t),t},n.ZERO=l(0),n.ONE=l(1),n.valueOf=l,t.exports=n},function(t,e,r){var n=r(3),i=r(7),u=r(87);function o(t,e,r,n,o,s,a){this.p=t,this.a=e,this.b=r,this.G=u.fromAffine(this,n,o),this.n=s,this.h=a,this.infinity=new u(this,null,null,i.ZERO),this.pOverFour=t.add(i.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}o.prototype.pointFromX=function(t,e){var r=e.pow(3).add(this.a.multiply(e)).add(this.b).mod(this.p).modPow(this.pOverFour,this.p),n=r;return r.isEven()^!t&&(n=this.p.subtract(n)),u.fromAffine(this,e,n)},o.prototype.isInfinity=function(t){return t===this.infinity||0===t.z.signum()&&0!==t.y.signum()},o.prototype.isOnCurve=function(t){if(this.isInfinity(t))return!0;var e=t.affineX,r=t.affineY,n=this.a,i=this.b,u=this.p;if(e.signum()<0||e.compareTo(u)>=0)return!1;if(r.signum()<0||r.compareTo(u)>=0)return!1;var o=r.square().mod(u),s=e.pow(3).add(n.multiply(e)).add(i).mod(u);return o.equals(s)},o.prototype.validate=function(t){n(!this.isInfinity(t),"Point is at infinity"),n(this.isOnCurve(t),"Point is not on the curve");var e=t.multiply(this.n);return n(this.isInfinity(e),"Point is not a scalar multiple of G"),!0},t.exports=o},function(t,e,r){"use strict";var n=r(2).Buffer,i=r(1),u=r(86),o=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],a=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],f=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],c=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function p(){u.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function d(t,e){return t<<e|t>>>32-e}function y(t,e,r,n,i,u,o,s){return d(t+(e^r^n)+u+o|0,s)+i|0}function g(t,e,r,n,i,u,o,s){return d(t+(e&r|~e&n)+u+o|0,s)+i|0}function m(t,e,r,n,i,u,o,s){return d(t+((e|~r)^n)+u+o|0,s)+i|0}function v(t,e,r,n,i,u,o,s){return d(t+(e&n|r&~n)+u+o|0,s)+i|0}function b(t,e,r,n,i,u,o,s){return d(t+(e^(r|~n))+u+o|0,s)+i|0}i(p,u),p.prototype._update=function(){for(var t=o,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,p=0|this._e,w=0|this._a,E=0|this._b,_=0|this._c,A=0|this._d,B=0|this._e,C=0;C<80;C+=1){var F,D;C<16?(F=y(r,n,i,u,p,t[s[C]],h[0],f[C]),D=b(w,E,_,A,B,t[a[C]],l[0],c[C])):C<32?(F=g(r,n,i,u,p,t[s[C]],h[1],f[C]),D=v(w,E,_,A,B,t[a[C]],l[1],c[C])):C<48?(F=m(r,n,i,u,p,t[s[C]],h[2],f[C]),D=m(w,E,_,A,B,t[a[C]],l[2],c[C])):C<64?(F=v(r,n,i,u,p,t[s[C]],h[3],f[C]),D=g(w,E,_,A,B,t[a[C]],l[3],c[C])):(F=b(r,n,i,u,p,t[s[C]],h[4],f[C]),D=y(w,E,_,A,B,t[a[C]],l[4],c[C])),r=p,p=u,u=d(i,10),i=n,n=F,w=B,B=A,A=d(_,10),_=E,E=D}var x=this._b+i+A|0;this._b=this._c+u+B|0,this._c=this._d+p+w|0,this._d=this._e+r+E|0,this._e=this._a+n+_|0,this._a=x},p.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=n.alloc?n.alloc(20):new n(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=p},function(t,e,r){(e=t.exports=function(t){t=t.toLowerCase();var r=e[t];if(!r)throw new Error(t+" is not supported (we accept pull requests)");return new r}).sha=r(166),e.sha1=r(167),e.sha224=r(168),e.sha256=r(92),e.sha384=r(169),e.sha512=r(93)},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t,e,r){return r^t&(e^r)}function c(t,e,r){return t&e|r&(t|e)}function h(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function l(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function p(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function d(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}n(a,i),a.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,s=0|this._e,a=0|this._f,y=0|this._g,g=0|this._h,m=0;m<16;++m)e[m]=t.readInt32BE(4*m);for(;m<64;++m)e[m]=d(e[m-2])+e[m-7]+p(e[m-15])+e[m-16]|0;for(var v=0;v<64;++v){var b=g+l(s)+f(s,a,y)+o[v]+e[v]|0,w=h(r)+c(r,n,i)|0;g=y,y=a,a=s,s=u+b|0,u=i,i=n,n=r,r=b+w|0}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=u+this._d|0,this._e=s+this._e|0,this._f=a+this._f|0,this._g=y+this._g|0,this._h=g+this._h|0},a.prototype._hash=function(){var t=u.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=a},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function a(){this.init(),this._w=s,i.call(this,128,112)}function f(t,e,r){return r^t&(e^r)}function c(t,e,r){return t&e|r&(t|e)}function h(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function l(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function m(t,e){return t>>>0<e>>>0?1:0}n(a,i),a.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._ah,n=0|this._bh,i=0|this._ch,u=0|this._dh,s=0|this._eh,a=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,E=0|this._bl,_=0|this._cl,A=0|this._dl,B=0|this._el,C=0|this._fl,F=0|this._gl,D=0|this._hl,x=0;x<32;x+=2)e[x]=t.readInt32BE(4*x),e[x+1]=t.readInt32BE(4*x+4);for(;x<160;x+=2){var S=e[x-30],T=e[x-30+1],k=p(S,T),M=d(T,S),I=y(S=e[x-4],T=e[x-4+1]),O=g(T,S),L=e[x-14],R=e[x-14+1],j=e[x-32],N=e[x-32+1],U=M+R|0,P=k+L+m(U,M)|0;P=(P=P+I+m(U=U+O|0,O)|0)+j+m(U=U+N|0,N)|0,e[x]=P,e[x+1]=U}for(var q=0;q<160;q+=2){P=e[q],U=e[q+1];var z=c(r,n,i),V=c(w,E,_),H=h(r,w),Z=h(w,r),G=l(s,B),Y=l(B,s),K=o[q],$=o[q+1],W=f(s,a,v),X=f(B,C,F),J=D+Y|0,Q=b+G+m(J,D)|0;Q=(Q=(Q=Q+W+m(J=J+X|0,X)|0)+K+m(J=J+$|0,$)|0)+P+m(J=J+U|0,U)|0;var tt=Z+V|0,et=H+z+m(tt,Z)|0;b=v,D=F,v=a,F=C,a=s,C=B,s=u+Q+m(B=A+J|0,A)|0,u=i,A=_,i=n,_=E,n=r,E=w,r=Q+et+m(w=J+tt|0,J)|0}this._al=this._al+w|0,this._bl=this._bl+E|0,this._cl=this._cl+_|0,this._dl=this._dl+A|0,this._el=this._el+B|0,this._fl=this._fl+C|0,this._gl=this._gl+F|0,this._hl=this._hl+D|0,this._ah=this._ah+r+m(this._al,w)|0,this._bh=this._bh+n+m(this._bl,E)|0,this._ch=this._ch+i+m(this._cl,_)|0,this._dh=this._dh+u+m(this._dl,A)|0,this._eh=this._eh+s+m(this._el,B)|0,this._fh=this._fh+a+m(this._fl,C)|0,this._gh=this._gh+v+m(this._gl,F)|0,this._hh=this._hh+b+m(this._hl,D)|0},a.prototype._hash=function(){var t=u.allocUnsafe(64);function e(e,r,n){t.writeInt32BE(e,n),t.writeInt32BE(r,n+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=a},function(t,e,r){"use strict";(function(e){var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=r(176),o=r(12),s=r(56).getCurveByName("secp256k1"),a=r(3),f=r(7),c=r(27),h=r(26),l=r(34);function p(t,r,n){function i(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),a(e.isBuffer(t),"data is a required String or Buffer"),l(t=o.sha256(t),r)}function l(n,i){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof n&&(n=e.from(n,o)),32!==n.length||!e.isBuffer(n))throw new Error("dataSha256: 32 bytes required");var f=h(i);return a(f,"pubkey required"),u.verify(s,n,{r:t,s:r},f.Q)}function p(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),a(e.isBuffer(t),"data is a required String or Buffer"),d(t=o.sha256(t))}function d(i){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";if("string"==typeof i&&(i=e.from(i,o)),32!==i.length||!e.isBuffer(i))throw new Error("dataSha256: 32 byte String or buffer requred");var a=f.fromBuffer(i),c=n;c-=27,c&=3;var l=u.recoverPubKey(s,a,{r:t,s:r,i:n},c);return h.fromPoint(l)}function y(){var i;return(i=new e(65)).writeUInt8(n,0),t.toBuffer(32).copy(i,1),r.toBuffer(32).copy(i,33),i}a.equal(null!=t,!0,"Missing parameter"),a.equal(null!=r,!0,"Missing parameter"),a.equal(null!=n,!0,"Missing parameter");var g=void 0;return{r:t,s:r,i:n,toBuffer:y,verify:i,verifyHash:l,verifyHex:function(t,r){return console.log('Deprecated: use verify(data, pubkey, "hex")'),i(e.from(t,"hex"),r)},recover:p,recoverHash:d,toHex:function(){return y().toString("hex")},toString:function(){return g||(g="SIG_K1_"+c.checkEncode(y(),"K1"))},verifyBuffer:function(){return console.log("Deprecated: use signature.verify instead (same arguments)"),i.apply(void 0,arguments)},recoverPublicKey:function(){return console.log("Deprecated: use signature.recover instead (same arguments)"),p.apply(void 0,arguments)},recoverPublicKeyFromBuffer:function(){return console.log("Deprecated: use signature.recoverHash instead (same arguments)"),d.apply(void 0,arguments)}}}t.exports=p,p.sign=function(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),a(e.isBuffer(t),"data is a required String or Buffer"),t=o.sha256(t),p.signHash(t,r)},p.signHash=function(t,r){var n,i,o,c,h,d,y,g=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof t&&(t=e.from(t,g)),32!==t.length||!e.isBuffer(t))throw new Error("dataSha256: 32 byte buffer requred");for(r=l(r),a(r,"privateKey required"),c=null,y=0,i=f.fromBuffer(t);;){if(d=(n=(o=u.sign(s,t,r.d,y++)).toDER())[5+(h=n[3])],32===h&&32===d){c=u.calcPubKeyRecoveryParam(s,i,o,r.toPublic().Q),c+=4,c+=27;break}y%10==0&&console.log("WARN: "+y+" attempts to find canonical signature")}return p(o.r,o.s,c)},p.fromBuffer=function(t){var r;return a(e.isBuffer(t),"Buffer is required"),a.equal(t.length,65,"Invalid signature length"),r=t.readUInt8(0),a.equal(r-27,r-27&7,"Invalid signature parameter"),p(f.fromBuffer(t.slice(1,33)),f.fromBuffer(t.slice(33)),r)},p.fromHex=function(t){return p.fromBuffer(e.from(t,"hex"))},p.fromString=function(t){try{return p.fromStringOrThrow(t)}catch(t){return null}},p.fromStringOrThrow=function(t){a.equal(void 0===t?"undefined":i(t),"string","signature");var e=t.match(/^SIG_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);a(null!=e&&3===e.length,"Expecting signature like: SIG_K1_base58signature..");var r=n(e,3),u=r[1],o=r[2];return a.equal(u,"K1","K1 signature expected"),p.fromBuffer(c.checkDecode(o,u))},p.from=function(t){var r=t?t.r&&t.s&&t.i?t:"string"==typeof t&&130===t.length?p.fromHex(t):"string"==typeof t&&130!==t.length?p.fromStringOrThrow(t):e.isBuffer(t)?p.fromBuffer(t):null:t;if(!r)throw new TypeError("signature should be a hex string or buffer");return r}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){function r(t){var e=t.toString().match(/function (.*?)\(/);return e?e[1]:null}t.exports=function(t,n){switch(t){case"Array":if(Array.isArray(n))return;break;case"Boolean":if("boolean"==typeof n)return;break;case"Buffer":if(e.isBuffer(n))return;break;case"Number":if("number"==typeof n)return;break;case"String":if("string"==typeof n)return;break;default:if(r(n.constructor)===r(t))return}throw new TypeError("Expected "+(r(t)||t)+", got "+n)}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(186),i=r(189),u=r(97),o=function(t){return i("v1",n,t)};Object.assign(o,{processArgs:u,api:n,Testnet:function(t){return console.error("deprecated, change EosApi.Testnet(..) to just EosApi(..)"),o(t)},Localnet:function(t){return console.error("deprecated, change EosApi.Localnet(..) to just EosApi(..)"),o(t)}}),t.exports=o},function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"method",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,u={},o={},s=e.length,a=void 0;"function"==typeof t[t.length-1]&&(a=t[t.length-1],t=t.slice(0,t.length-1));var f=void 0,c=void 0;a?f=function(t,e){t?a(t):a(null,e)}:c=new Promise(function(t,e){f=function(r,n){r?e(r):t(n)}});"function"==typeof i&&t.length>0&&("object"===n(t[0])&&2===t.length||t.length===s+1)&&null!=(o=i(t[t.length-1]))&&(t=t.slice(0,t.length-1));if(1===t.length&&"object"===n(t[0]))u=t[0];else{if(t.length>s)throw new TypeError(r+" is expecting "+s+" parameters but "+t.length+" where provided");var h=0,l=!0,p=!1,d=void 0;try{for(var y,g=e[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value;u[m]=t[h],h++}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}}return{params:u,options:o,callback:f,returnPromise:c}}},function(t,e,r){var n=r(41),i=r(4)("toStringTag"),u="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:u?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){"use strict";var n=Object.assign({},r(207));t.exports=n},function(t,e,r){"use strict";var n=u(r(60)),i=u(r(20));function u(t){return t&&t.__esModule?t:{default:t}}var o=r(3),s=r(18).Long;t.exports={ULong:a,isName:function(t,e){try{return h(t),!0}catch(t){return e&&e(t),!1}},encodeName:h,decodeName:l,encodeNameHex:function(t){return s.fromString(h(t),!0).toString(16)},decodeNameHex:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return l(s.fromString(t,!0,16).toString(),e)},DecimalString:p,DecimalPad:d,DecimalImply:function(t,e){return d(t,e).replace(".","")},DecimalUnimply:function(t,e){o(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var r=/^-/.test(t);r&&(t=t.substring(1));o(/^\d+$/.test(t),"invalid whole number "+t),o(null!=e,"precision required"),o(e>=0&&e<=18,"Precision should be 18 characters or less");var n=e-t.length;n>0&&(t=""+"0".repeat(n)+t);var i=t.length-e;return t=t.slice(0,i)+"."+t.slice(i),(r?"-":"")+d(t,e)},printAsset:y,parseAsset:function(t){var e=t.split(" "),r=(0,n.default)(e,1)[0].match(/^(-?[0-9]+(\.[0-9]+)?)( |$)/),i=r?r[1]:null,u=t.match(/(^| )([0-9]+),([A-Z]+)(@|$)/),s=u?Number(u[2]):null,a=i?(i.split(".")[1]||"").length:null,f=null!=s?s:a,c=t.match(/(^| |,)([A-Z]+)(@|$)/),h=c?c[2]:null,l=t.split("@"),p=(0,n.default)(l,2)[1],d=void 0===p?"":p,g=/^[a-z0-5]+(\.[a-z0-5]+)*$/.test(d)?d:null,m=y({amount:i,precision:f,symbol:h,contract:g});o.equal(t,m,"Invalid asset string: "+t+" !== "+m),null!=f&&o(f>=0&&f<=18,"Precision should be 18 characters or less");null!=h&&o(h.length<=7,"Asset symbol is 7 characters or less");null!=g&&o(g.length<=12,"Contract is 12 characters or less");return{amount:i,precision:f,symbol:h,contract:g}}};function a(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;if("number"==typeof t){if(t>Number.MAX_SAFE_INTEGER)throw new TypeError("value parameter overflow");t=s.fromString(String(t),e,r)}else if("string"==typeof t)t=s.fromString(t,e,r);else if(!s.isLong(t))throw new TypeError("value parameter is a requied Long, Number or String");return t}var f=".12345abcdefghijklmnopqrstuvwxyz",c=function(t){var e=f.indexOf(t);if(-1===e)throw new TypeError("Invalid character: '"+t+"'");return e};function h(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("string"!=typeof t)throw new TypeError("name parameter is a required string");if(t.length>12)throw new TypeError("A name can be up to 12 characters long");for(var r="",n=0;n<=12;n++){var i=n<t.length?c(t[n]):0,u=n<12?5:4,o=Number(i).toString(2);if(o.length>u)throw new TypeError("Invalid name "+t);r+=o="0".repeat(u-o.length)+o}var a=s.fromString(r,!0,2),f="",h=e?a.toBytesLE():a.toBytesBE(),l=!0,p=!1,d=void 0;try{for(var y,g=h[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value,v=Number(m).toString(16);f+=(1===v.length?"0":"")+v}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}return s.fromString(f,!0,16).toString().toString()}function l(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t=a(t);var r="",n=e?t.toBytesLE():t.toBytesBE(),i=!0,u=!1,o=void 0;try{for(var c,h=n[Symbol.iterator]();!(i=(c=h.next()).done);i=!0){var l=c.value,p=Number(l).toString(16);r+=(1===p.length?"0":"")+p}}catch(t){u=!0,o=t}finally{try{!i&&h.return&&h.return()}finally{if(u)throw o}}r+="0".repeat(16-r.length);for(var d=s.fromNumber(31,!0),y=s.fromNumber(15,!0),g="",m=s.fromString(r,!0,16),v=0;v<=12;v++){g=f[m.and(0===v?y:d)]+g,m=m.shiftRight(0===v?4:5)}return g=g.replace(/\.+$/,"")}function p(t){o(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var e=/^-/.test(t);e&&(t=t.substring(1)),"."===t[0]&&(t="0"+t);var r=t.split(".");return o(r.length<=2,"invalid decimal "+t),o(/^\d+(,?\d)*\d*$/.test(r[0]),"invalid decimal "+t),2===r.length&&(o(/^\d*$/.test(r[1]),"invalid decimal "+t),r[1]=r[1].replace(/0+$/,""),""===r[1]&&r.pop()),r[0]=r[0].replace(/^0*/,""),""===r[0]&&(r[0]="0"),(e?"-":"")+r.join(".")}function d(t,e){var r=p(t);if(null==e)return r;o(e>=0&&e<=18,"Precision should be 18 characters or less");var n=r.split(".");if(0===e&&1===n.length)return n[0];if(1===n.length)return n[0]+"."+"0".repeat(e);var i=e-n[1].length;return o(i>=0,"decimal '"+r+"' exceeds precision "+e),n[0]+"."+n[1]+"0".repeat(i)}function y(t){var e=t.amount,r=t.precision,n=t.symbol,u=t.contract;o.equal(void 0===n?"undefined":(0,i.default)(n),"string","symbol is a required string"),null!=e&&null!=r&&(e=d(e,r));var s=function(t,e){return null==t?"":null==e?"":t+e};return null!=e?s(e," ")+n+s("@",u):s(r,",")+n+s("@",u)}},function(t,e,r){var n;!function(i){"use strict";var u,o=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,s=Math.ceil,a=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",h=1e14,l=14,p=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,g=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function v(t){for(var e,r,n=1,i=t.length,u=t[0]+"";n<i;){for(e=t[n++]+"",r=l-e.length;r--;e="0"+e);u+=e}for(i=u.length;48===u.charCodeAt(--i););return u.slice(0,i+1||1)}function b(t,e){var r,n,i=t.c,u=e.c,o=t.s,s=e.s,a=t.e,f=e.e;if(!o||!s)return null;if(r=i&&!i[0],n=u&&!u[0],r||n)return r?n?0:-s:o;if(o!=s)return o;if(r=o<0,n=a==f,!i||!u)return n?0:!i^r?1:-1;if(!n)return a>f^r?1:-1;for(s=(a=i.length)<(f=u.length)?a:f,o=0;o<s;o++)if(i[o]!=u[o])return i[o]>u[o]^r?1:-1;return a==f?0:a>f^r?1:-1}function w(t,e,r,n){if(t<e||t>r||t!==(t<0?s(t):a(t)))throw Error(f+(n||"Argument")+("number"==typeof t?t<e||t>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function E(t){var e=t.c.length-1;return m(t.e/l)==e&&t.c[e]%2!=0}function _(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function A(t,e,r){var n,i;if(e<0){for(i=r+".";++e;i+=r);t=i+t}else if(++e>(n=t.length)){for(i=r,e-=n;--e;i+=r);t+=i}else e<n&&(t=t.slice(0,e)+"."+t.slice(e));return t}(u=function t(e){var r,n,i,u=R.prototype={constructor:R,toString:null,valueOf:null},B=new R(1),C=20,F=4,D=-7,x=21,S=-1e7,T=1e7,k=!1,M=1,I=0,O={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},L="0123456789abcdefghijklmnopqrstuvwxyz";function R(t,e){var r,u,s,f,h,d,y,g,m=this;if(!(m instanceof R))return new R(t,e);if(null==e){if(t instanceof R)return m.s=t.s,m.e=t.e,void(m.c=(t=t.c)?t.slice():t);if((d="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,h=t;h>=10;h/=10,f++);return m.e=f,void(m.c=[t])}g=String(t)}else{if(g=String(t),!o.test(g))return i(m,g,d);m.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(f=g.indexOf("."))>-1&&(g=g.replace(".","")),(h=g.search(/e/i))>0?(f<0&&(f=h),f+=+g.slice(h+1),g=g.substring(0,h)):f<0&&(f=g.length)}else{if(w(e,2,L.length,"Base"),g=String(t),10==e)return P(m=new R(t instanceof R?t:g),C+m.e+1,F);if(d="number"==typeof t){if(0*t!=0)return i(m,g,d,e);if(m.s=1/t<0?(g=g.slice(1),-1):1,R.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(c+t);d=!1}else m.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(r=L.slice(0,e),f=h=0,y=g.length;h<y;h++)if(r.indexOf(u=g.charAt(h))<0){if("."==u){if(h>f){f=y;continue}}else if(!s&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){s=!0,h=-1,f=0;continue}return i(m,String(t),d,e)}(f=(g=n(g,e,10,m.s)).indexOf("."))>-1?g=g.replace(".",""):f=g.length}for(h=0;48===g.charCodeAt(h);h++);for(y=g.length;48===g.charCodeAt(--y););if(g=g.slice(h,++y)){if(y-=h,d&&R.DEBUG&&y>15&&(t>p||t!==a(t)))throw Error(c+m.s*t);if((f=f-h-1)>T)m.c=m.e=null;else if(f<S)m.c=[m.e=0];else{if(m.e=f,m.c=[],h=(f+1)%l,f<0&&(h+=l),h<y){for(h&&m.c.push(+g.slice(0,h)),y-=l;h<y;)m.c.push(+g.slice(h,h+=l));g=g.slice(h),h=l-g.length}else h-=y;for(;h--;g+="0");m.c.push(+g)}}else m.c=[m.e=0]}function j(t,e,r,n){var i,u,o,s,a;if(null==r?r=F:w(r,0,8),!t.c)return t.toString();if(i=t.c[0],o=t.e,null==e)a=v(t.c),a=1==n||2==n&&o<=D?_(a,o):A(a,o,"0");else if(u=(t=P(new R(t),e,r)).e,s=(a=v(t.c)).length,1==n||2==n&&(e<=u||u<=D)){for(;s<e;a+="0",s++);a=_(a,u)}else if(e-=o,a=A(a,u,"0"),u+1>s){if(--e>0)for(a+=".";e--;a+="0");}else if((e+=u-s)>0)for(u+1==s&&(a+=".");e--;a+="0");return t.s<0&&i?"-"+a:a}function N(t,e){for(var r,n=1,i=new R(t[0]);n<t.length;n++){if(!(r=new R(t[n])).s){i=r;break}e.call(i,r)&&(i=r)}return i}function U(t,e,r){for(var n=1,i=e.length;!e[--i];e.pop());for(i=e[0];i>=10;i/=10,n++);return(r=n+r*l-1)>T?t.c=t.e=null:r<S?t.c=[t.e=0]:(t.e=r,t.c=e),t}function P(t,e,r,n){var i,u,o,f,c,p,y,g=t.c,m=d;if(g){t:{for(i=1,f=g[0];f>=10;f/=10,i++);if((u=e-i)<0)u+=l,o=e,y=(c=g[p=0])/m[i-o-1]%10|0;else if((p=s((u+1)/l))>=g.length){if(!n)break t;for(;g.length<=p;g.push(0));c=y=0,i=1,o=(u%=l)-l+1}else{for(c=f=g[p],i=1;f>=10;f/=10,i++);y=(o=(u%=l)-l+i)<0?0:c/m[i-o-1]%10|0}if(n=n||e<0||null!=g[p+1]||(o<0?c:c%m[i-o-1]),n=r<4?(y||n)&&(0==r||r==(t.s<0?3:2)):y>5||5==y&&(4==r||n||6==r&&(u>0?o>0?c/m[i-o]:0:g[p-1])%10&1||r==(t.s<0?8:7)),e<1||!g[0])return g.length=0,n?(e-=t.e+1,g[0]=m[(l-e%l)%l],t.e=-e||0):g[0]=t.e=0,t;if(0==u?(g.length=p,f=1,p--):(g.length=p+1,f=m[l-u],g[p]=o>0?a(c/m[i-o]%m[o])*f:0),n)for(;;){if(0==p){for(u=1,o=g[0];o>=10;o/=10,u++);for(o=g[0]+=f,f=1;o>=10;o/=10,f++);u!=f&&(t.e++,g[0]==h&&(g[0]=1));break}if(g[p]+=f,g[p]!=h)break;g[p--]=0,f=1}for(u=g.length;0===g[--u];g.pop());}t.e>T?t.c=t.e=null:t.e<S&&(t.c=[t.e=0])}return t}function q(t){var e,r=t.e;return null===r?t.toString():(e=v(t.c),e=r<=D||r>=x?_(e,r):A(e,r,"0"),t.s<0?"-"+e:e)}return R.clone=t,R.ROUND_UP=0,R.ROUND_DOWN=1,R.ROUND_CEIL=2,R.ROUND_FLOOR=3,R.ROUND_HALF_UP=4,R.ROUND_HALF_DOWN=5,R.ROUND_HALF_EVEN=6,R.ROUND_HALF_CEIL=7,R.ROUND_HALF_FLOOR=8,R.EUCLID=9,R.config=R.set=function(t){var e,r;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(w(r=t[e],0,g,e),C=r),t.hasOwnProperty(e="ROUNDING_MODE")&&(w(r=t[e],0,8,e),F=r),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((r=t[e])&&r.pop?(w(r[0],-g,0,e),w(r[1],0,g,e),D=r[0],x=r[1]):(w(r,-g,g,e),D=-(x=r<0?-r:r))),t.hasOwnProperty(e="RANGE"))if((r=t[e])&&r.pop)w(r[0],-g,-1,e),w(r[1],1,g,e),S=r[0],T=r[1];else{if(w(r,-g,g,e),!r)throw Error(f+e+" cannot be zero: "+r);S=-(T=r<0?-r:r)}if(t.hasOwnProperty(e="CRYPTO")){if((r=t[e])!==!!r)throw Error(f+e+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw k=!r,Error(f+"crypto unavailable");k=r}else k=r}if(t.hasOwnProperty(e="MODULO_MODE")&&(w(r=t[e],0,9,e),M=r),t.hasOwnProperty(e="POW_PRECISION")&&(w(r=t[e],0,g,e),I=r),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(r=t[e]))throw Error(f+e+" not an object: "+r);O=r}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(r=t[e])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(f+e+" invalid: "+r);L=r}}return{DECIMAL_PLACES:C,ROUNDING_MODE:F,EXPONENTIAL_AT:[D,x],RANGE:[S,T],CRYPTO:k,MODULO_MODE:M,POW_PRECISION:I,FORMAT:O,ALPHABET:L}},R.isBigNumber=function(t){return t instanceof R||t&&!0===t._isBigNumber||!1},R.maximum=R.max=function(){return N(arguments,u.lt)},R.minimum=R.min=function(){return N(arguments,u.gt)},R.random=function(){var t=9007199254740992*Math.random()&2097151?function(){return a(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var r,n,i,u,o,c=0,h=[],p=new R(B);if(null==e?e=C:w(e,0,g),u=s(e/l),k)if(crypto.getRandomValues){for(r=crypto.getRandomValues(new Uint32Array(u*=2));c<u;)(o=131072*r[c]+(r[c+1]>>>11))>=9e15?(n=crypto.getRandomValues(new Uint32Array(2)),r[c]=n[0],r[c+1]=n[1]):(h.push(o%1e14),c+=2);c=u/2}else{if(!crypto.randomBytes)throw k=!1,Error(f+"crypto unavailable");for(r=crypto.randomBytes(u*=7);c<u;)(o=281474976710656*(31&r[c])+1099511627776*r[c+1]+4294967296*r[c+2]+16777216*r[c+3]+(r[c+4]<<16)+(r[c+5]<<8)+r[c+6])>=9e15?crypto.randomBytes(7).copy(r,c):(h.push(o%1e14),c+=7);c=u/7}if(!k)for(;c<u;)(o=t())<9e15&&(h[c++]=o%1e14);for(u=h[--c],e%=l,u&&e&&(o=d[l-e],h[c]=a(u/o)*o);0===h[c];h.pop(),c--);if(c<0)h=[i=0];else{for(i=-1;0===h[0];h.splice(0,1),i-=l);for(c=1,o=h[0];o>=10;o/=10,c++);c<l&&(i-=l-c)}return p.e=i,p.c=h,p}}(),R.sum=function(){for(var t=1,e=arguments,r=new R(e[0]);t<e.length;)r=r.plus(e[t++]);return r},n=function(){function t(t,e,r,n){for(var i,u,o=[0],s=0,a=t.length;s<a;){for(u=o.length;u--;o[u]*=e);for(o[0]+=n.indexOf(t.charAt(s++)),i=0;i<o.length;i++)o[i]>r-1&&(null==o[i+1]&&(o[i+1]=0),o[i+1]+=o[i]/r|0,o[i]%=r)}return o.reverse()}return function(e,n,i,u,o){var s,a,f,c,h,l,p,d,y=e.indexOf("."),g=C,m=F;for(y>=0&&(c=I,I=0,e=e.replace(".",""),l=(d=new R(n)).pow(e.length-y),I=c,d.c=t(A(v(l.c),l.e,"0"),10,i,"0123456789"),d.e=d.c.length),f=c=(p=t(e,n,i,o?(s=L,"0123456789"):(s="0123456789",L))).length;0==p[--c];p.pop());if(!p[0])return s.charAt(0);if(y<0?--f:(l.c=p,l.e=f,l.s=u,p=(l=r(l,d,g,m,i)).c,h=l.r,f=l.e),y=p[a=f+g+1],c=i/2,h=h||a<0||null!=p[a+1],h=m<4?(null!=y||h)&&(0==m||m==(l.s<0?3:2)):y>c||y==c&&(4==m||h||6==m&&1&p[a-1]||m==(l.s<0?8:7)),a<1||!p[0])e=h?A(s.charAt(1),-g,s.charAt(0)):s.charAt(0);else{if(p.length=a,h)for(--i;++p[--a]>i;)p[a]=0,a||(++f,p=[1].concat(p));for(c=p.length;!p[--c];);for(y=0,e="";y<=c;e+=s.charAt(p[y++]));e=A(e,f,s.charAt(0))}return e}}(),r=function(){function t(t,e,r){var n,i,u,o,s=0,a=t.length,f=e%y,c=e/y|0;for(t=t.slice();a--;)s=((i=f*(u=t[a]%y)+(n=c*u+(o=t[a]/y|0)*f)%y*y+s)/r|0)+(n/y|0)+c*o,t[a]=i%r;return s&&(t=[s].concat(t)),t}function e(t,e,r,n){var i,u;if(r!=n)u=r>n?1:-1;else for(i=u=0;i<r;i++)if(t[i]!=e[i]){u=t[i]>e[i]?1:-1;break}return u}function r(t,e,r,n){for(var i=0;r--;)t[r]-=i,i=t[r]<e[r]?1:0,t[r]=i*n+t[r]-e[r];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(n,i,u,o,s){var f,c,p,d,y,g,v,b,w,E,_,A,B,C,F,D,x,S=n.s==i.s?1:-1,T=n.c,k=i.c;if(!(T&&T[0]&&k&&k[0]))return new R(n.s&&i.s&&(T?!k||T[0]!=k[0]:k)?T&&0==T[0]||!k?0*S:S/0:NaN);for(w=(b=new R(S)).c=[],S=u+(c=n.e-i.e)+1,s||(s=h,c=m(n.e/l)-m(i.e/l),S=S/l|0),p=0;k[p]==(T[p]||0);p++);if(k[p]>(T[p]||0)&&c--,S<0)w.push(1),d=!0;else{for(C=T.length,D=k.length,p=0,S+=2,(y=a(s/(k[0]+1)))>1&&(k=t(k,y,s),T=t(T,y,s),D=k.length,C=T.length),B=D,_=(E=T.slice(0,D)).length;_<D;E[_++]=0);x=k.slice(),x=[0].concat(x),F=k[0],k[1]>=s/2&&F++;do{if(y=0,(f=e(k,E,D,_))<0){if(A=E[0],D!=_&&(A=A*s+(E[1]||0)),(y=a(A/F))>1)for(y>=s&&(y=s-1),v=(g=t(k,y,s)).length,_=E.length;1==e(g,E,v,_);)y--,r(g,D<v?x:k,v,s),v=g.length,f=1;else 0==y&&(f=y=1),v=(g=k.slice()).length;if(v<_&&(g=[0].concat(g)),r(E,g,_,s),_=E.length,-1==f)for(;e(k,E,D,_)<1;)y++,r(E,D<_?x:k,_,s),_=E.length}else 0===f&&(y++,E=[0]);w[p++]=y,E[0]?E[_++]=T[B]||0:(E=[T[B]],_=1)}while((B++<C||null!=E[0])&&S--);d=null!=E[0],w[0]||w.splice(0,1)}if(s==h){for(p=1,S=w[0];S>=10;S/=10,p++);P(b,u+(b.e=p+c*l-1)+1,o,d)}else b.e=c,b.r=+d;return b}}(),i=function(){var t=/^(-?)0([xbo])(?=\w[\w.]*$)/i,e=/^([^.]+)\.$/,r=/^\.([^.]+)$/,n=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(u,o,s,a){var c,h=s?o:o.replace(i,"");if(n.test(h))u.s=isNaN(h)?null:h<0?-1:1,u.c=u.e=null;else{if(!s&&(h=h.replace(t,function(t,e,r){return c="x"==(r=r.toLowerCase())?16:"b"==r?2:8,a&&a!=c?t:e}),a&&(c=a,h=h.replace(e,"$1").replace(r,"0.$1")),o!=h))return new R(h,c);if(R.DEBUG)throw Error(f+"Not a"+(a?" base "+a:"")+" number: "+o);u.c=u.e=u.s=null}}}(),u.absoluteValue=u.abs=function(){var t=new R(this);return t.s<0&&(t.s=1),t},u.comparedTo=function(t,e){return b(this,new R(t,e))},u.decimalPlaces=u.dp=function(t,e){var r,n,i,u=this;if(null!=t)return w(t,0,g),null==e?e=F:w(e,0,8),P(new R(u),t+u.e+1,e);if(!(r=u.c))return null;if(n=((i=r.length-1)-m(this.e/l))*l,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},u.dividedBy=u.div=function(t,e){return r(this,new R(t,e),C,F)},u.dividedToIntegerBy=u.idiv=function(t,e){return r(this,new R(t,e),0,1)},u.exponentiatedBy=u.pow=function(t,e){var r,n,i,u,o,c,h,p,d=this;if((t=new R(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+q(t));if(null!=e&&(e=new R(e)),o=t.e>14,!d.c||!d.c[0]||1==d.c[0]&&!d.e&&1==d.c.length||!t.c||!t.c[0])return p=new R(Math.pow(+q(d),o?2-E(t):+q(t))),e?p.mod(e):p;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new R(NaN);(n=!c&&d.isInteger()&&e.isInteger())&&(d=d.mod(e))}else{if(t.e>9&&(d.e>0||d.e<-1||(0==d.e?d.c[0]>1||o&&d.c[1]>=24e7:d.c[0]<8e13||o&&d.c[0]<=9999975e7)))return u=d.s<0&&E(t)?-0:0,d.e>-1&&(u=1/u),new R(c?1/u:u);I&&(u=s(I/l+2))}for(o?(r=new R(.5),c&&(t.s=1),h=E(t)):h=(i=Math.abs(+q(t)))%2,p=new R(B);;){if(h){if(!(p=p.times(d)).c)break;u?p.c.length>u&&(p.c.length=u):n&&(p=p.mod(e))}if(i){if(0===(i=a(i/2)))break;h=i%2}else if(P(t=t.times(r),t.e+1,1),t.e>14)h=E(t);else{if(0==(i=+q(t)))break;h=i%2}d=d.times(d),u?d.c&&d.c.length>u&&(d.c.length=u):n&&(d=d.mod(e))}return n?p:(c&&(p=B.div(p)),e?p.mod(e):u?P(p,I,F,void 0):p)},u.integerValue=function(t){var e=new R(this);return null==t?t=F:w(t,0,8),P(e,e.e+1,t)},u.isEqualTo=u.eq=function(t,e){return 0===b(this,new R(t,e))},u.isFinite=function(){return!!this.c},u.isGreaterThan=u.gt=function(t,e){return b(this,new R(t,e))>0},u.isGreaterThanOrEqualTo=u.gte=function(t,e){return 1===(e=b(this,new R(t,e)))||0===e},u.isInteger=function(){return!!this.c&&m(this.e/l)>this.c.length-2},u.isLessThan=u.lt=function(t,e){return b(this,new R(t,e))<0},u.isLessThanOrEqualTo=u.lte=function(t,e){return-1===(e=b(this,new R(t,e)))||0===e},u.isNaN=function(){return!this.s},u.isNegative=function(){return this.s<0},u.isPositive=function(){return this.s>0},u.isZero=function(){return!!this.c&&0==this.c[0]},u.minus=function(t,e){var r,n,i,u,o=this,s=o.s;if(e=(t=new R(t,e)).s,!s||!e)return new R(NaN);if(s!=e)return t.s=-e,o.plus(t);var a=o.e/l,f=t.e/l,c=o.c,p=t.c;if(!a||!f){if(!c||!p)return c?(t.s=-e,t):new R(p?o:NaN);if(!c[0]||!p[0])return p[0]?(t.s=-e,t):new R(c[0]?o:3==F?-0:0)}if(a=m(a),f=m(f),c=c.slice(),s=a-f){for((u=s<0)?(s=-s,i=c):(f=a,i=p),i.reverse(),e=s;e--;i.push(0));i.reverse()}else for(n=(u=(s=c.length)<(e=p.length))?s:e,s=e=0;e<n;e++)if(c[e]!=p[e]){u=c[e]<p[e];break}if(u&&(i=c,c=p,p=i,t.s=-t.s),(e=(n=p.length)-(r=c.length))>0)for(;e--;c[r++]=0);for(e=h-1;n>s;){if(c[--n]<p[n]){for(r=n;r&&!c[--r];c[r]=e);--c[r],c[n]+=h}c[n]-=p[n]}for(;0==c[0];c.splice(0,1),--f);return c[0]?U(t,c,f):(t.s=3==F?-1:1,t.c=[t.e=0],t)},u.modulo=u.mod=function(t,e){var n,i,u=this;return t=new R(t,e),!u.c||!t.s||t.c&&!t.c[0]?new R(NaN):!t.c||u.c&&!u.c[0]?new R(u):(9==M?(i=t.s,t.s=1,n=r(u,t,0,3),t.s=i,n.s*=i):n=r(u,t,0,M),(t=u.minus(n.times(t))).c[0]||1!=M||(t.s=u.s),t)},u.multipliedBy=u.times=function(t,e){var r,n,i,u,o,s,a,f,c,p,d,g,v,b,w,E=this,_=E.c,A=(t=new R(t,e)).c;if(!(_&&A&&_[0]&&A[0]))return!E.s||!t.s||_&&!_[0]&&!A||A&&!A[0]&&!_?t.c=t.e=t.s=null:(t.s*=E.s,_&&A?(t.c=[0],t.e=0):t.c=t.e=null),t;for(n=m(E.e/l)+m(t.e/l),t.s*=E.s,(a=_.length)<(p=A.length)&&(v=_,_=A,A=v,i=a,a=p,p=i),i=a+p,v=[];i--;v.push(0));for(b=h,w=y,i=p;--i>=0;){for(r=0,d=A[i]%w,g=A[i]/w|0,u=i+(o=a);u>i;)r=((f=d*(f=_[--o]%w)+(s=g*f+(c=_[o]/w|0)*d)%w*w+v[u]+r)/b|0)+(s/w|0)+g*c,v[u--]=f%b;v[u]=r}return r?++n:v.splice(0,1),U(t,v,n)},u.negated=function(){var t=new R(this);return t.s=-t.s||null,t},u.plus=function(t,e){var r,n=this,i=n.s;if(e=(t=new R(t,e)).s,!i||!e)return new R(NaN);if(i!=e)return t.s=-e,n.minus(t);var u=n.e/l,o=t.e/l,s=n.c,a=t.c;if(!u||!o){if(!s||!a)return new R(i/0);if(!s[0]||!a[0])return a[0]?t:new R(s[0]?n:0*i)}if(u=m(u),o=m(o),s=s.slice(),i=u-o){for(i>0?(o=u,r=a):(i=-i,r=s),r.reverse();i--;r.push(0));r.reverse()}for((i=s.length)-(e=a.length)<0&&(r=a,a=s,s=r,e=i),i=0;e;)i=(s[--e]=s[e]+a[e]+i)/h|0,s[e]=h===s[e]?0:s[e]%h;return i&&(s=[i].concat(s),++o),U(t,s,o)},u.precision=u.sd=function(t,e){var r,n,i,u=this;if(null!=t&&t!==!!t)return w(t,1,g),null==e?e=F:w(e,0,8),P(new R(u),t,e);if(!(r=u.c))return null;if(n=(i=r.length-1)*l+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];i>=10;i/=10,n++);}return t&&u.e+1>n&&(n=u.e+1),n},u.shiftedBy=function(t){return w(t,-p,p),this.times("1e"+t)},u.squareRoot=u.sqrt=function(){var t,e,n,i,u,o=this,s=o.c,a=o.s,f=o.e,c=C+4,h=new R("0.5");if(1!==a||!s||!s[0])return new R(!a||a<0&&(!s||s[0])?NaN:s?o:1/0);if(0==(a=Math.sqrt(+q(o)))||a==1/0?(((e=v(s)).length+f)%2==0&&(e+="0"),a=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),n=new R(e=a==1/0?"1e"+f:(e=a.toExponential()).slice(0,e.indexOf("e")+1)+f)):n=new R(a+""),n.c[0])for((a=(f=n.e)+c)<3&&(a=0);;)if(u=n,n=h.times(u.plus(r(o,u,c,1))),v(u.c).slice(0,a)===(e=v(n.c)).slice(0,a)){if(n.e<f&&--a,"9999"!=(e=e.slice(a-3,a+1))&&(i||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(P(n,n.e+C+2,1),t=!n.times(n).eq(o));break}if(!i&&(P(u,u.e+C+2,0),u.times(u).eq(o))){n=u;break}c+=4,a+=4,i=1}return P(n,n.e+C+1,F,t)},u.toExponential=function(t,e){return null!=t&&(w(t,0,g),t++),j(this,t,e,1)},u.toFixed=function(t,e){return null!=t&&(w(t,0,g),t=t+this.e+1),j(this,t,e)},u.toFormat=function(t,e,r){var n,i=this;if(null==r)null!=t&&e&&"object"==typeof e?(r=e,e=null):t&&"object"==typeof t?(r=t,t=e=null):r=O;else if("object"!=typeof r)throw Error(f+"Argument not an object: "+r);if(n=i.toFixed(t,e),i.c){var u,o=n.split("."),s=+r.groupSize,a=+r.secondaryGroupSize,c=r.groupSeparator||"",h=o[0],l=o[1],p=i.s<0,d=p?h.slice(1):h,y=d.length;if(a&&(u=s,s=a,a=u,y-=u),s>0&&y>0){for(u=y%s||s,h=d.substr(0,u);u<y;u+=s)h+=c+d.substr(u,s);a>0&&(h+=c+d.slice(u)),p&&(h="-"+h)}n=l?h+(r.decimalSeparator||"")+((a=+r.fractionGroupSize)?l.replace(new RegExp("\\d{"+a+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):l):h}return(r.prefix||"")+n+(r.suffix||"")},u.toFraction=function(t){var e,n,i,u,o,s,a,c,h,p,y,g,m=this,b=m.c;if(null!=t&&(!(a=new R(t)).isInteger()&&(a.c||1!==a.s)||a.lt(B)))throw Error(f+"Argument "+(a.isInteger()?"out of range: ":"not an integer: ")+q(a));if(!b)return new R(m);for(e=new R(B),h=n=new R(B),i=c=new R(B),g=v(b),o=e.e=g.length-m.e-1,e.c[0]=d[(s=o%l)<0?l+s:s],t=!t||a.comparedTo(e)>0?o>0?e:h:a,s=T,T=1/0,a=new R(g),c.c[0]=0;p=r(a,e,0,1),1!=(u=n.plus(p.times(i))).comparedTo(t);)n=i,i=u,h=c.plus(p.times(u=h)),c=u,e=a.minus(p.times(u=e)),a=u;return u=r(t.minus(n),i,0,1),c=c.plus(u.times(h)),n=n.plus(u.times(i)),c.s=h.s=m.s,y=r(h,i,o*=2,F).minus(m).abs().comparedTo(r(c,n,o,F).minus(m).abs())<1?[h,i]:[c,n],T=s,y},u.toNumber=function(){return+q(this)},u.toPrecision=function(t,e){return null!=t&&w(t,1,g),j(this,t,e,2)},u.toString=function(t){var e,r=this,i=r.s,u=r.e;return null===u?i?(e="Infinity",i<0&&(e="-"+e)):e="NaN":(e=v(r.c),null==t?e=u<=D||u>=x?_(e,u):A(e,u,"0"):(w(t,2,L.length,"Base"),e=n(A(e,u,"0"),10,t,i,!0)),i<0&&r.c[0]&&(e="-"+e)),e},u.valueOf=u.toJSON=function(){return q(this)},u._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(u[Symbol.toStringTag]="BigNumber",u[Symbol.for("nodejs.util.inspect.custom")]=u.valueOf),null!=e&&R.set(e),R}()).default=u.BigNumber=u,void 0===(n=function(){return u}.call(e,r,e,t))||(t.exports=n)}()},function(t,e){t.exports={forMs:t=>new Promise(e=>{setTimeout(e,t)})}},function(t,e,r){const n=r(104),i=r(35),{BigNumber:u}=r(101),o=r(213),s=r(214);window.env=class{static get isPc(){return!/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)}},window.eosjs=i,window.BigNumber=u,window.idb=n,window.eosplayer=new s(o)},function(t,e,r){"use strict";!function(){function e(t){return new Promise(function(e,r){t.onsuccess=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function r(t,r,n){var i,u=new Promise(function(u,o){e(i=t[r].apply(t,n)).then(u,o)});return u.request=i,u}function n(t,e,r){r.forEach(function(r){Object.defineProperty(t.prototype,r,{get:function(){return this[e][r]},set:function(t){this[e][r]=t}})})}function i(t,e,n,i){i.forEach(function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})})}function u(t,e,r,n){n.forEach(function(n){n in r.prototype&&(t.prototype[n]=function(){return this[e][n].apply(this[e],arguments)})})}function o(t,e,n,i){i.forEach(function(i){i in n.prototype&&(t.prototype[i]=function(){return function(t,e,n){var i=r(t,e,n);return i.then(function(t){if(t)return new a(t,i.request)})}(this[e],i,arguments)})})}function s(t){this._index=t}function a(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,r){t.oncomplete=function(){e()},t.onerror=function(){r(t.error)},t.onabort=function(){r(t.error)}})}function h(t,e,r){this._db=t,this.oldVersion=e,this.transaction=new c(r)}function l(t){this._db=t}n(s,"_index",["name","keyPath","multiEntry","unique"]),i(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(a,"_cursor",["direction","key","primaryKey","value"]),i(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(a.prototype[t]=function(){var r=this,n=arguments;return Promise.resolve().then(function(){return r._cursor[t].apply(r._cursor,n),e(r._request).then(function(t){if(t)return new a(t,r._request)})})})}),f.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},n(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),u(f,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},n(c,"_tx",["objectStoreNames","mode"]),u(c,"_tx",IDBTransaction,["abort"]),h.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},n(h,"_db",["name","version","objectStoreNames"]),u(h,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},n(l,"_db",["name","version","objectStoreNames"]),u(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[f,s].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e=function(t){return Array.prototype.slice.call(t)}(arguments),r=e[e.length-1],n=this._store||this._index,i=n[t].apply(n,e.slice(0,-1));i.onsuccess=function(){r(i.result)}})})}),[s,f].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var r=this,n=[];return new Promise(function(i){r.iterateCursor(t,function(t){t?(n.push(t.value),void 0===e||n.length!=e?t.continue():i(n)):i(n)})})})});var p={open:function(t,e,n){var i=r(indexedDB,"open",[t,e]),u=i.request;return u&&(u.onupgradeneeded=function(t){n&&n(new h(u.result,t.oldVersion,u.transaction))}),i.then(function(t){return new l(t)})},delete:function(t){return r(indexedDB,"deleteDatabase",[t])}};t.exports=p,t.exports.default=t.exports}()},function(t,e,r){var n=function(){return this}()||Function("return this")(),i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,u=i&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=r(106),i)n.regeneratorRuntime=u;else try{delete n.regeneratorRuntime}catch(t){n.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,u="function"==typeof Symbol?Symbol:{},o=u.iterator||"@@iterator",s=u.asyncIterator||"@@asyncIterator",a=u.toStringTag||"@@toStringTag",f="object"==typeof t,c=e.regeneratorRuntime;if(c)f&&(t.exports=c);else{(c=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var h="suspendedStart",l="suspendedYield",p="executing",d="completed",y={},g={};g[o]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(k([])));v&&v!==n&&i.call(v,o)&&(g=v);var b=B.prototype=_.prototype=Object.create(g);A.prototype=b.constructor=B,B.constructor=A,B[a]=A.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,B):(t.__proto__=B,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},C(F.prototype),F.prototype[s]=function(){return this},c.AsyncIterator=F,c.async=function(t,e,r,n){var i=new F(w(t,e,r,n));return c.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[a]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},c.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return s.type="throw",s.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var u=this.tryEntries.length-1;u>=0;--u){var o=this.tryEntries[u],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=i.call(o,"catchLoc"),f=i.call(o,"finallyLoc");if(a&&f){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var u=n;break}}u&&("break"===t||"continue"===t)&&u.tryLoc<=e&&e<=u.finallyLoc&&(u=null);var o=u?u.completion:{};return o.type=t,o.arg=e,u?(this.method="next",this.next=u.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),S(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;S(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:k(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),y}}}function w(t,e,r,n){var i=e&&e.prototype instanceof _?e:_,u=Object.create(i.prototype),o=new T(n||[]);return u._invoke=function(t,e,r){var n=h;return function(i,u){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw u;return M()}for(r.method=i,r.arg=u;;){var o=r.delegate;if(o){var s=D(o,r);if(s){if(s===y)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var a=E(t,e,r);if("normal"===a.type){if(n=r.done?d:l,a.arg===y)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(n=d,r.method="throw",r.arg=a.arg)}}}(t,r,o),u}function E(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function _(){}function A(){}function B(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function F(t){var e;this._invoke=function(r,n){function u(){return new Promise(function(e,u){!function e(r,n,u,o){var s=E(t[r],t,n);if("throw"!==s.type){var a=s.arg,f=a.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,u,o)},function(t){e("throw",t,u,o)}):Promise.resolve(f).then(function(t){a.value=t,u(a)},o)}o(s.arg)}(r,n,e,u)})}return e=e?e.then(u,u):u()}}function D(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,D(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=E(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var u=i.arg;return u?u.done?(e[t.resultName]=u.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,y):u:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function k(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,u=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return u.next=u}}return{next:M}}function M(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){t.exports={default:r(108),__esModule:!0}},function(t,e,r){r(36),r(46),t.exports=r(47).f("iterator")},function(t,e,r){var n=r(37),i=r(38);t.exports=function(t){return function(e,r){var u,o,s=String(i(e)),a=n(r),f=s.length;return a<0||a>=f?t?"":void 0:(u=s.charCodeAt(a))<55296||u>56319||a+1===f||(o=s.charCodeAt(a+1))<56320||o>57343?t?s.charAt(a):u:t?s.slice(a,a+2):o-56320+(u-55296<<10)+65536}}},function(t,e,r){var n=r(111);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){"use strict";var n=r(67),i=r(30),u=r(45),o={};r(13)(o,r(4)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),u(t,e+" Iterator")}},function(t,e,r){var n=r(14),i=r(21),u=r(40);t.exports=r(15)?Object.defineProperties:function(t,e){i(t);for(var r,o=u(e),s=o.length,a=0;s>a;)n.f(t,r=o[a++],e[r]);return t}},function(t,e,r){var n=r(41);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e,r){var n=r(16),i=r(116),u=r(117);t.exports=function(t){return function(e,r,o){var s,a=n(e),f=i(a.length),c=u(o,f);if(t&&r!=r){for(;f>c;)if((s=a[c++])!=s)return!0}else for(;f>c;c++)if((t||c in a)&&a[c]===r)return t||c||0;return!t&&-1}}},function(t,e,r){var n=r(37),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){var n=r(37),i=Math.max,u=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):u(t,e)}},function(t,e,r){var n=r(6).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(9),i=r(120),u=r(42)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e,r){var n=r(38);t.exports=function(t){return Object(n(t))}},function(t,e,r){"use strict";var n=r(122),i=r(123),u=r(23),o=r(16);t.exports=r(62)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),u.Arguments=u.Array,n("keys"),n("values"),n("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){t.exports={default:r(125),__esModule:!0}},function(t,e,r){r(126),r(132),r(133),r(134),t.exports=r(8).Symbol},function(t,e,r){"use strict";var n=r(6),i=r(9),u=r(15),o=r(63),s=r(66),a=r(127).KEY,f=r(29),c=r(43),h=r(45),l=r(31),p=r(4),d=r(47),y=r(48),g=r(128),m=r(129),v=r(21),b=r(22),w=r(16),E=r(39),_=r(30),A=r(67),B=r(130),C=r(131),F=r(14),D=r(40),x=C.f,S=F.f,T=B.f,k=n.Symbol,M=n.JSON,I=M&&M.stringify,O=p("_hidden"),L=p("toPrimitive"),R={}.propertyIsEnumerable,j=c("symbol-registry"),N=c("symbols"),U=c("op-symbols"),P=Object.prototype,q="function"==typeof k,z=n.QObject,V=!z||!z.prototype||!z.prototype.findChild,H=u&&f(function(){return 7!=A(S({},"a",{get:function(){return S(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=x(P,e);n&&delete P[e],S(t,e,r),n&&t!==P&&S(P,e,n)}:S,Z=function(t){var e=N[t]=A(k.prototype);return e._k=t,e},G=q&&"symbol"==typeof k.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof k},Y=function(t,e,r){return t===P&&Y(U,e,r),v(t),e=E(e,!0),v(r),i(N,e)?(r.enumerable?(i(t,O)&&t[O][e]&&(t[O][e]=!1),r=A(r,{enumerable:_(0,!1)})):(i(t,O)||S(t,O,_(1,{})),t[O][e]=!0),H(t,e,r)):S(t,e,r)},K=function(t,e){v(t);for(var r,n=g(e=w(e)),i=0,u=n.length;u>i;)Y(t,r=n[i++],e[r]);return t},$=function(t){var e=R.call(this,t=E(t,!0));return!(this===P&&i(N,t)&&!i(U,t))&&(!(e||!i(this,t)||!i(N,t)||i(this,O)&&this[O][t])||e)},W=function(t,e){if(t=w(t),e=E(e,!0),t!==P||!i(N,e)||i(U,e)){var r=x(t,e);return!r||!i(N,e)||i(t,O)&&t[O][e]||(r.enumerable=!0),r}},X=function(t){for(var e,r=T(w(t)),n=[],u=0;r.length>u;)i(N,e=r[u++])||e==O||e==a||n.push(e);return n},J=function(t){for(var e,r=t===P,n=T(r?U:w(t)),u=[],o=0;n.length>o;)!i(N,e=n[o++])||r&&!i(P,e)||u.push(N[e]);return u};q||(s((k=function(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var t=l(arguments.length>0?arguments[0]:void 0),e=function(r){this===P&&e.call(U,r),i(this,O)&&i(this[O],t)&&(this[O][t]=!1),H(this,t,_(1,r))};return u&&V&&H(P,t,{configurable:!0,set:e}),Z(t)}).prototype,"toString",function(){return this._k}),C.f=W,F.f=Y,r(70).f=B.f=X,r(49).f=$,r(69).f=J,u&&!r(28)&&s(P,"propertyIsEnumerable",$,!0),d.f=function(t){return Z(p(t))}),o(o.G+o.W+o.F*!q,{Symbol:k});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var et=D(p.store),rt=0;et.length>rt;)y(et[rt++]);o(o.S+o.F*!q,"Symbol",{for:function(t){return i(j,t+="")?j[t]:j[t]=k(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in j)if(j[e]===t)return e},useSetter:function(){V=!0},useSimple:function(){V=!1}}),o(o.S+o.F*!q,"Object",{create:function(t,e){return void 0===e?A(t):K(A(t),e)},defineProperty:Y,defineProperties:K,getOwnPropertyDescriptor:W,getOwnPropertyNames:X,getOwnPropertySymbols:J}),M&&o(o.S+o.F*(!q||f(function(){var t=k();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!G(t))return m(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!G(e))return e}),n[1]=e,I.apply(M,n)}}),k.prototype[L]||r(13)(k.prototype,L,k.prototype.valueOf),h(k,"Symbol"),h(Math,"Math",!0),h(n.JSON,"JSON",!0)},function(t,e,r){var n=r(31)("meta"),i=r(22),u=r(9),o=r(14).f,s=0,a=Object.isExtensible||function(){return!0},f=!r(29)(function(){return a(Object.preventExtensions({}))}),c=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,n)){if(!a(t))return"F";if(!e)return"E";c(t)}return t[n].i},getWeak:function(t,e){if(!u(t,n)){if(!a(t))return!0;if(!e)return!1;c(t)}return t[n].w},onFreeze:function(t){return f&&h.NEED&&a(t)&&!u(t,n)&&c(t),t}}},function(t,e,r){var n=r(40),i=r(69),u=r(49);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),a=u.f,f=0;s.length>f;)a.call(t,o=s[f++])&&e.push(o);return e}},function(t,e,r){var n=r(41);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(16),i=r(70).f,u={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==u.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){var n=r(49),i=r(30),u=r(16),o=r(39),s=r(9),a=r(64),f=Object.getOwnPropertyDescriptor;e.f=r(15)?f:function(t,e){if(t=u(t),e=o(e,!0),a)try{return f(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e){},function(t,e,r){r(48)("asyncIterator")},function(t,e,r){r(48)("observable")},function(t,e,r){"use strict";r(71);var n=r(34),i=r(26),u=r(94),o=(r(27),r(12)),s={initialize:n.initialize,unsafeRandomKey:function(){return n.unsafeRandomKey().then(function(t){return t.toString()})},randomKey:function(t){return n.randomKey(t).then(function(t){return t.toString()})},seedPrivate:function(t){return n.fromSeed(t).toString()},privateToPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return n(t).toPublic().toString(e)},isValidPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return i.isValid(t,e)},isValidPrivate:function(t){return n.isValid(t)},sign:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===r)throw new TypeError("API changed, use signHash(..) instead");return!1===r&&console.log("Warning: ecc.sign hashData parameter was removed"),u.sign(t,e,r).toString()},signHash:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return u.signHash(t,e,r).toString()},verify:function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"utf8";if(!0===n)throw new TypeError("API changed, use verifyHash(..) instead");return!1===n&&console.log("Warning: ecc.verify hashData parameter was removed"),(t=u.from(t)).verify(e,r,n)},verifyHash:function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"hex";return(t=u.from(t)).verifyHash(e,r,n)},recover:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===r)throw new TypeError("API changed, use recoverHash(signature, data) instead");return!1===r&&console.log("Warning: ecc.recover hashData parameter was removed"),(t=u.from(t)).recover(e,r).toString()},recoverHash:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return(t=u.from(t)).recoverHash(e,r).toString()},sha256:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";return o.sha256(t,e)}};t.exports=s},function(t,e,r){"use strict";e.byteLength=function(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){for(var e,r=f(t),n=r[0],o=r[1],s=new u(function(t,e,r){return 3*(e+r)/4-r}(0,n,o)),a=0,c=o>0?n-4:n,h=0;h<c;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],s[a++]=e>>16&255,s[a++]=e>>8&255,s[a++]=255&e;2===o&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,s[a++]=255&e);1===o&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,s[a++]=e>>8&255,s[a++]=255&e);return s},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,u=[],o=0,s=r-i;o<s;o+=16383)u.push(h(t,o,o+16383>s?s:o+16383));1===i?(e=t[r-1],u.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],u.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return u.join("")};for(var n=[],i=[],u="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)n[s]=o[s],i[o.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t){return n[t>>18&63]+n[t>>12&63]+n[t>>6&63]+n[63&t]}function h(t,e,r){for(var n,i=[],u=e;u<r;u+=3)n=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),i.push(c(n));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var u,o,s=8*i-n-1,a=(1<<s)-1,f=a>>1,c=-7,h=r?i-1:0,l=r?-1:1,p=t[e+h];for(h+=l,u=p&(1<<-c)-1,p>>=-c,c+=s;c>0;u=256*u+t[e+h],h+=l,c-=8);for(o=u&(1<<-c)-1,u>>=-c,c+=n;c>0;o=256*o+t[e+h],h+=l,c-=8);if(0===u)u=1-f;else{if(u===a)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),u-=f}return(p?-1:1)*o*Math.pow(2,u-n)},e.write=function(t,e,r,n,i,u){var o,s,a,f=8*u-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:u-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-o))<1&&(o--,a*=2),(e+=o+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(o++,a/=2),o+h>=c?(s=0,o=c):o+h>=1?(s=(e*a-1)*Math.pow(2,i),o+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;t[r+p]=255&s,p+=d,s/=256,i-=8);for(o=o<<i|s,f+=i;f>0;t[r+p]=255&o,p+=d,o/=256,f-=8);t[r+p-d]|=128*y}},function(t,e,r){var n,i,u;
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */i=[],void 0===(u="function"==typeof(n=function(){"use strict";function t(t,e,r){this.low=0|t,this.high=0|e,this.unsigned=!!r}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var r={},n={};function i(t,e){var i,u,s;return e?(s=0<=(t>>>=0)&&t<256)&&(u=n[t])?u:(i=o(t,(0|t)<0?-1:0,!0),s&&(n[t]=i),i):(s=-128<=(t|=0)&&t<128)&&(u=r[t])?u:(i=o(t,t<0?-1:0,!1),s&&(r[t]=i),i)}function u(t,e){if(isNaN(t)||!isFinite(t))return e?y:d;if(e){if(t<0)return y;if(t>=h)return w}else{if(t<=-l)return E;if(t+1>=l)return b}return t<0?u(-t,e).neg():o(t%c|0,t/c|0,e)}function o(e,r,n){return new t(e,r,n)}t.fromInt=i,t.fromNumber=u,t.fromBits=o;var s=Math.pow;function a(t,e,r){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return d;if("number"==typeof e?(r=e,e=!1):e=!!e,(r=r||10)<2||36<r)throw RangeError("radix");var n;if((n=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return a(t.substring(1),e,r).neg();for(var i=u(s(r,8)),o=d,f=0;f<t.length;f+=8){var c=Math.min(8,t.length-f),h=parseInt(t.substring(f,f+c),r);if(c<8){var l=u(s(r,c));o=o.mul(l).add(u(h))}else o=(o=o.mul(i)).add(u(h))}return o.unsigned=e,o}function f(e){return e instanceof t?e:"number"==typeof e?u(e):"string"==typeof e?a(e):o(e.low,e.high,e.unsigned)}t.fromString=a,t.fromValue=f;var c=4294967296,h=c*c,l=h/2,p=i(1<<24),d=i(0);t.ZERO=d;var y=i(0,!0);t.UZERO=y;var g=i(1);t.ONE=g;var m=i(1,!0);t.UONE=m;var v=i(-1);t.NEG_ONE=v;var b=o(-1,2147483647,!1);t.MAX_VALUE=b;var w=o(-1,-1,!0);t.MAX_UNSIGNED_VALUE=w;var E=o(0,-2147483648,!1);t.MIN_VALUE=E;var _=t.prototype;return _.toInt=function(){return this.unsigned?this.low>>>0:this.low},_.toNumber=function(){return this.unsigned?(this.high>>>0)*c+(this.low>>>0):this.high*c+(this.low>>>0)},_.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var e=u(t),r=this.div(e),n=r.mul(e).sub(this);return r.toString(t)+n.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=u(s(t,6),this.unsigned),o=this,a="";;){var f=o.div(i),c=(o.sub(f.mul(i)).toInt()>>>0).toString(t);if((o=f).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},_.getHighBits=function(){return this.high},_.getHighBitsUnsigned=function(){return this.high>>>0},_.getLowBits=function(){return this.low},_.getLowBitsUnsigned=function(){return this.low>>>0},_.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},_.isZero=function(){return 0===this.high&&0===this.low},_.isNegative=function(){return!this.unsigned&&this.high<0},_.isPositive=function(){return this.unsigned||this.high>=0},_.isOdd=function(){return 1==(1&this.low)},_.isEven=function(){return 0==(1&this.low)},_.equals=function(t){return e(t)||(t=f(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},_.eq=_.equals,_.notEquals=function(t){return!this.eq(t)},_.neq=_.notEquals,_.lessThan=function(t){return this.comp(t)<0},_.lt=_.lessThan,_.lessThanOrEqual=function(t){return this.comp(t)<=0},_.lte=_.lessThanOrEqual,_.greaterThan=function(t){return this.comp(t)>0},_.gt=_.greaterThan,_.greaterThanOrEqual=function(t){return this.comp(t)>=0},_.gte=_.greaterThanOrEqual,_.compare=function(t){if(e(t)||(t=f(t)),this.eq(t))return 0;var r=this.isNegative(),n=t.isNegative();return r&&!n?-1:!r&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},_.comp=_.compare,_.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(g)},_.neg=_.negate,_.add=function(t){e(t)||(t=f(t));var r=this.high>>>16,n=65535&this.high,i=this.low>>>16,u=65535&this.low,s=t.high>>>16,a=65535&t.high,c=t.low>>>16,h=0,l=0,p=0,d=0;return p+=(d+=u+(65535&t.low))>>>16,l+=(p+=i+c)>>>16,h+=(l+=n+a)>>>16,h+=r+s,o((p&=65535)<<16|(d&=65535),(h&=65535)<<16|(l&=65535),this.unsigned)},_.subtract=function(t){return e(t)||(t=f(t)),this.add(t.neg())},_.sub=_.subtract,_.multiply=function(t){if(this.isZero())return d;if(e(t)||(t=f(t)),t.isZero())return d;if(this.eq(E))return t.isOdd()?E:d;if(t.eq(E))return this.isOdd()?E:d;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(p)&&t.lt(p))return u(this.toNumber()*t.toNumber(),this.unsigned);var r=this.high>>>16,n=65535&this.high,i=this.low>>>16,s=65535&this.low,a=t.high>>>16,c=65535&t.high,h=t.low>>>16,l=65535&t.low,y=0,g=0,m=0,v=0;return m+=(v+=s*l)>>>16,g+=(m+=i*l)>>>16,m&=65535,g+=(m+=s*h)>>>16,y+=(g+=n*l)>>>16,g&=65535,y+=(g+=i*h)>>>16,g&=65535,y+=(g+=s*c)>>>16,y+=r*l+n*h+i*c+s*a,o((m&=65535)<<16|(v&=65535),(y&=65535)<<16|(g&=65535),this.unsigned)},_.mul=_.multiply,_.divide=function(t){if(e(t)||(t=f(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?y:d;var r,n,i;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return m;i=y}else{if(this.eq(E))return t.eq(g)||t.eq(v)?E:t.eq(E)?g:(r=this.shr(1).div(t).shl(1)).eq(d)?t.isNegative()?g:v:(n=this.sub(t.mul(r)),i=r.add(n.div(t)));if(t.eq(E))return this.unsigned?y:d;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();i=d}for(n=this;n.gte(t);){r=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var o=Math.ceil(Math.log(r)/Math.LN2),a=o<=48?1:s(2,o-48),c=u(r),h=c.mul(t);h.isNegative()||h.gt(n);)h=(c=u(r-=a,this.unsigned)).mul(t);c.isZero()&&(c=g),i=i.add(c),n=n.sub(h)}return i},_.div=_.divide,_.modulo=function(t){return e(t)||(t=f(t)),this.sub(this.div(t).mul(t))},_.mod=_.modulo,_.not=function(){return o(~this.low,~this.high,this.unsigned)},_.and=function(t){return e(t)||(t=f(t)),o(this.low&t.low,this.high&t.high,this.unsigned)},_.or=function(t){return e(t)||(t=f(t)),o(this.low|t.low,this.high|t.high,this.unsigned)},_.xor=function(t){return e(t)||(t=f(t)),o(this.low^t.low,this.high^t.high,this.unsigned)},_.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):o(0,this.low<<t-32,this.unsigned)},_.shl=_.shiftLeft,_.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):o(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},_.shr=_.shiftRight,_.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var r=this.high;return t<32?o(this.low>>>t|r<<32-t,r>>>t,this.unsigned):o(32===t?r:r>>>t-32,0,this.unsigned)},_.shru=_.shiftRightUnsigned,_.toSigned=function(){return this.unsigned?o(this.low,this.high,!1):this},_.toUnsigned=function(){return this.unsigned?this:o(this.low,this.high,!0)},_.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},_.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},_.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?n.apply(e,i):n)||(t.exports=u)},function(t,e,r){var n=r(140),i=r(159),u=r(77);e.createCipher=e.Cipher=n.createCipher,e.createCipheriv=e.Cipheriv=n.createCipheriv,e.createDecipher=e.Decipher=i.createDecipher,e.createDecipheriv=e.Decipheriv=i.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(u)}},function(t,e,r){var n=r(74),i=r(78),u=r(0).Buffer,o=r(84),s=r(10),a=r(32),f=r(85);function c(t,e,r){s.call(this),this._cache=new l,this._cipher=new a.AES(e),this._prev=u.from(r),this._mode=t,this._autopadding=!0}r(1)(c,s),c.prototype._update=function(t){var e,r;this._cache.add(t);for(var n=[];e=this._cache.get();)r=this._mode.encrypt(this,e),n.push(r);return u.concat(n)};var h=u.alloc(16,16);function l(){this.cache=u.allocUnsafe(0)}function p(t,e,r){var s=n[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=u.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof r&&(r=u.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===s.type?new o(s.module,e,r):"auth"===s.type?new i(s.module,e,r):new c(s.module,e,r)}c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},l.prototype.add=function(t){this.cache=u.concat([this.cache,t])},l.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},l.prototype.flush=function(){for(var t=16-this.cache.length,e=u.allocUnsafe(t),r=-1;++r<t;)e.writeUInt8(t,r);return u.concat([this.cache,e])},e.createCipheriv=p,e.createCipher=function(t,e){var r=n[t.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=f(e,!1,r.key,r.iv);return p(t,i.key,i.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,r){var n=r(24);e.encrypt=function(t,e){var r=n(e,t._prev);return t._prev=t._cipher.encryptBlock(r),t._prev},e.decrypt=function(t,e){var r=t._prev;t._prev=e;var i=t._cipher.decryptBlock(e);return n(i,r)}},function(t,e,r){var n=r(0).Buffer,i=r(24);function u(t,e,r){var u=e.length,o=i(e,t._cache);return t._cache=t._cache.slice(u),t._prev=n.concat([t._prev,r?e:o]),o}e.encrypt=function(t,e,r){for(var i,o=n.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=n.allocUnsafe(0)),!(t._cache.length<=e.length)){o=n.concat([o,u(t,e,r)]);break}i=t._cache.length,o=n.concat([o,u(t,e.slice(0,i),r)]),e=e.slice(i)}return o}},function(t,e,r){var n=r(0).Buffer;function i(t,e,r){var i=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=n.concat([t._prev.slice(1),n.from([r?e:i])]),i}e.encrypt=function(t,e,r){for(var u=e.length,o=n.allocUnsafe(u),s=-1;++s<u;)o[s]=i(t,e[s],r);return o}},function(t,e,r){var n=r(0).Buffer;function i(t,e,r){for(var n,i,o,s=-1,a=0;++s<8;)n=t._cipher.encryptBlock(t._prev),i=e&1<<7-s?128:0,a+=(128&(o=n[0]^i))>>s%8,t._prev=u(t._prev,r?i:o);return a}function u(t,e){var r=t.length,i=-1,u=n.allocUnsafe(t.length);for(t=n.concat([t,n.from([e])]);++i<r;)u[i]=t[i]<<1|t[i+1]>>7;return u}e.encrypt=function(t,e,r){for(var u=e.length,o=n.allocUnsafe(u),s=-1;++s<u;)o[s]=i(t,e[s],r);return o}},function(t,e,r){(function(t){var n=r(24);function i(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,r){for(;e._cache.length<r.length;)e._cache=t.concat([e._cache,i(e)]);var u=e._cache.slice(0,r.length);return e._cache=e._cache.slice(r.length),n(r,u)}}).call(this,r(2).Buffer)},function(t,e){},function(t,e,r){"use strict";var n=r(0).Buffer,i=r(149);function u(t,e,r){t.copy(e,r)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var e=n.allocUnsafe(t>>>0),r=this.head,i=0;r;)u(r.data,e,i),i+=r.data.length,r=r.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,r){(function(t){var n=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function u(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new u(i.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new u(i.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},r(151),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(5))},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,i=1,u={},o=!1,s=t.document,a=Object.getPrototypeOf&&Object.getPrototypeOf(t);a=a&&a.setTimeout?a:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?function(){var e="setImmediate$"+Math.random()+"$",r=function(r){r.source===t&&"string"==typeof r.data&&0===r.data.indexOf(e)&&c(+r.data.slice(e.length))};t.addEventListener?t.addEventListener("message",r,!1):t.attachEvent("onmessage",r),n=function(r){t.postMessage(e+r,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},n=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;n=function(e){var r=s.createElement("script");r.onreadystatechange=function(){c(e),r.onreadystatechange=null,t.removeChild(r),r=null},t.appendChild(r)}}():n=function(t){setTimeout(c,0,t)},a.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var o={callback:t,args:e};return u[i]=o,n(i),i++},a.clearImmediate=f}function f(t){delete u[t]}function c(t){if(o)setTimeout(c,0,t);else{var e=u[t];if(e){o=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(r,n)}}(e)}finally{f(t),o=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(5),r(17))},function(t,e,r){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this,r(5))},function(t,e,r){"use strict";t.exports=u;var n=r(83),i=r(25);function u(t){if(!(this instanceof u))return new u(t);n.call(this,t)}i.inherits=r(1),i.inherits(u,n),u.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){t.exports=r(53)},function(t,e,r){t.exports=r(11)},function(t,e,r){t.exports=r(52).Transform},function(t,e,r){t.exports=r(52).PassThrough},function(t,e,r){var n=r(0).Buffer,i=n.alloc(16,0);function u(t){var e=n.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function o(t){this.h=t,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}o.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},o.prototype._multiply=function(){for(var t,e,r=function(t){return[t.readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)]}(this.h),n=[0,0,0,0],i=-1;++i<128;){for(0!=(this.state[~~(i/8)]&1<<7-i%8)&&(n[0]^=r[0],n[1]^=r[1],n[2]^=r[2],n[3]^=r[3]),e=0!=(1&r[3]),t=3;t>0;t--)r[t]=r[t]>>>1|(1&r[t-1])<<31;r[0]=r[0]>>>1,e&&(r[0]=r[0]^225<<24)}this.state=u(n)},o.prototype.update=function(t){var e;for(this.cache=n.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},o.prototype.final=function(t,e){return this.cache.length&&this.ghash(n.concat([this.cache,i],16)),this.ghash(u([0,t,0,e])),this.state},t.exports=o},function(t,e,r){var n=r(78),i=r(0).Buffer,u=r(74),o=r(84),s=r(10),a=r(32),f=r(85);function c(t,e,r){s.call(this),this._cache=new h,this._last=void 0,this._cipher=new a.AES(e),this._prev=i.from(r),this._mode=t,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function l(t,e,r){var s=u[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=i.from(r)),"GCM"!==s.mode&&r.length!==s.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof e&&(e=i.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===s.type?new o(s.module,e,r,!0):"auth"===s.type?new n(s.module,e,r,!0):new c(s.module,e,r)}r(1)(c,s),c.prototype._update=function(t){var e,r;this._cache.add(t);for(var n=[];e=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,e),n.push(r);return i.concat(n)},c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<e;)if(t[r+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},h.prototype.add=function(t){this.cache=i.concat([this.cache,t])},h.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var r=u[t.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=f(e,!1,r.key,r.iv);return l(t,n.key,n.iv)},e.createDecipheriv=l},function(t,e,r){(function(t,n){var i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(s(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,u=n.length,o=String(t).replace(i,function(t){if("%%"===t)return"%";if(r>=u)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}}),a=n[r];r<u;a=n[++r])y(a)||!w(a)?o+=" "+a:o+=" "+s(a);return o},e.deprecate=function(r,i){if(v(t.process))return function(){return e.deprecate(r,i).apply(this,arguments)};if(!0===n.noDeprecation)return r;var u=!1;return function(){if(!u){if(n.throwDeprecation)throw new Error(i);n.traceDeprecation?console.trace(i):console.error(i),u=!0}return r.apply(this,arguments)}};var u,o={};function s(t,r){var n={seen:[],stylize:f};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),d(r)?n.showHidden=r:r&&e._extend(n,r),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=a),c(n,t,n.depth)}function a(t,e){var r=s.styles[e];return r?"["+s.colors[r][0]+"m"+t+"["+s.colors[r][1]+"m":t}function f(t,e){return t}function c(t,r,n){if(t.customInspect&&r&&A(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,t);return m(i)||(i=c(t,i,n)),i}var u=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(m(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}if(g(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,r);if(u)return u;var o=Object.keys(r),s=function(t){var e={};return t.forEach(function(t,r){e[t]=!0}),e}(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(r)),_(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return h(r);if(0===o.length){if(A(r)){var a=r.name?": "+r.name:"";return t.stylize("[Function"+a+"]","special")}if(b(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(E(r))return t.stylize(Date.prototype.toString.call(r),"date");if(_(r))return h(r)}var f,w="",B=!1,C=["{","}"];(p(r)&&(B=!0,C=["[","]"]),A(r))&&(w=" [Function"+(r.name?": "+r.name:"")+"]");return b(r)&&(w=" "+RegExp.prototype.toString.call(r)),E(r)&&(w=" "+Date.prototype.toUTCString.call(r)),_(r)&&(w=" "+h(r)),0!==o.length||B&&0!=r.length?n<0?b(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),f=B?function(t,e,r,n,i){for(var u=[],o=0,s=e.length;o<s;++o)D(e,String(o))?u.push(l(t,e,r,n,String(o),!0)):u.push("");return i.forEach(function(i){i.match(/^\d+$/)||u.push(l(t,e,r,n,i,!0))}),u}(t,r,n,s,o):o.map(function(e){return l(t,r,n,s,e,B)}),t.seen.pop(),function(t,e,r){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1];return r[0]+e+" "+t.join(", ")+" "+r[1]}(f,w,C)):C[0]+w+C[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function l(t,e,r,n,i,u){var o,s,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special")),D(n,i)||(o="["+i+"]"),s||(t.seen.indexOf(a.value)<0?(s=y(r)?c(t,a.value,null):c(t,a.value,r-1)).indexOf("\n")>-1&&(s=u?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n")):s=t.stylize("[Circular]","special")),v(o)){if(u&&i.match(/^\d+$/))return s;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=t.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=t.stylize(o,"string"))}return o+": "+s}function p(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function v(t){return void 0===t}function b(t){return w(t)&&"[object RegExp]"===B(t)}function w(t){return"object"==typeof t&&null!==t}function E(t){return w(t)&&"[object Date]"===B(t)}function _(t){return w(t)&&("[object Error]"===B(t)||t instanceof Error)}function A(t){return"function"==typeof t}function B(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(v(u)&&(u=n.env.NODE_DEBUG||""),t=t.toUpperCase(),!o[t])if(new RegExp("\\b"+t+"\\b","i").test(u)){var r=n.pid;o[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else o[t]=function(){};return o[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=p,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=b,e.isObject=w,e.isDate=E,e.isError=_,e.isFunction=A,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(161);var F=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function D(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),F[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=r(1),e._extend=function(t,e){if(!e||!w(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t}}).call(this,r(5),r(17))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t){t.exports={name:"bigi",version:"1.4.2",description:"Big integers.",keywords:["cryptography","math","bitcoin","arbitrary","precision","arithmetic","big","integer","int","number","biginteger","bigint","bignumber","decimal","float"],devDependencies:{coveralls:"^2.11.2",istanbul:"^0.3.5",jshint:"^2.5.1",mocha:"^2.1.0",mochify:"^2.1.0"},repository:{url:"https://github.com/cryptocoinjs/bigi",type:"git"},main:"./lib/index.js",scripts:{"browser-test":"./node_modules/.bin/mochify --wd -R spec",test:"./node_modules/.bin/_mocha -- test/*.js",jshint:"./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",unit:"./node_modules/.bin/mocha",coverage:"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",coveralls:"npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"},dependencies:{},testling:{files:"test/*.js",harness:"mocha",browsers:["ie/9..latest","firefox/latest","chrome/latest","safari/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]}}},function(t,e,r){(function(t){var e=r(3),n=r(88);n.fromByteArrayUnsigned=function(t){return 128&t[0]?new n([0].concat(t)):new n(t)},n.prototype.toByteArrayUnsigned=function(){var t=this.toByteArray();return 0===t[0]?t.slice(1):t},n.fromDERInteger=function(t){return new n(t)},n.prototype.toDERInteger=n.prototype.toByteArray,n.fromBuffer=function(t){if(128&t[0]){var e=Array.prototype.slice.call(t);return new n([0].concat(e))}return new n(t)},n.fromHex=function(t){return""===t?n.ZERO:(e.equal(t,t.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),e.equal(t.length%2,0,"Incomplete hex"),new n(t,16))},n.prototype.toBuffer=function(e){for(var r=this.toByteArrayUnsigned(),n=[],i=e-r.length;n.length<i;)n.push(0);return new t(n.concat(r))},n.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")}}).call(this,r(2).Buffer)},function(t,e,r){var n=r(7),i=r(165),u=r(89);t.exports=function(t){var e=i[t];if(!e)return null;var r=new n(e.p,16),o=new n(e.a,16),s=new n(e.b,16),a=new n(e.n,16),f=new n(e.h,16),c=new n(e.Gx,16),h=new n(e.Gy,16);return new u(r,o,s,c,h,a,f)}},function(t){t.exports={secp128r1:{p:"fffffffdffffffffffffffffffffffff",a:"fffffffdfffffffffffffffffffffffc",b:"e87579c11079f43dd824993c2cee5ed3",n:"fffffffe0000000075a30d1b9038a115",h:"01",Gx:"161ff7528b899b2d0c28607ca52c5b86",Gy:"cf5ac8395bafeb13c02da292dded7a83"},secp160k1:{p:"fffffffffffffffffffffffffffffffeffffac73",a:"00",b:"07",n:"0100000000000000000001b8fa16dfab9aca16b6b3",h:"01",Gx:"3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",Gy:"938cf935318fdced6bc28286531733c3f03c4fee"},secp160r1:{p:"ffffffffffffffffffffffffffffffff7fffffff",a:"ffffffffffffffffffffffffffffffff7ffffffc",b:"1c97befc54bd7a8b65acf89f81d4d4adc565fa45",n:"0100000000000000000001f4c8f927aed3ca752257",h:"01",Gx:"4a96b5688ef573284664698968c38bb913cbfc82",Gy:"23a628553168947d59dcc912042351377ac5fb32"},secp192k1:{p:"fffffffffffffffffffffffffffffffffffffffeffffee37",a:"00",b:"03",n:"fffffffffffffffffffffffe26f2fc170f69466a74defd8d",h:"01",Gx:"db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",Gy:"9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"},secp192r1:{p:"fffffffffffffffffffffffffffffffeffffffffffffffff",a:"fffffffffffffffffffffffffffffffefffffffffffffffc",b:"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",n:"ffffffffffffffffffffffff99def836146bc9b1b4d22831",h:"01",Gx:"188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",Gy:"07192b95ffc8da78631011ed6b24cdd573f977a11e794811"},secp256k1:{p:"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",a:"00",b:"07",n:"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",h:"01",Gx:"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",Gy:"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"},secp256r1:{p:"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",a:"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",b:"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",n:"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",h:"01",Gx:"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",Gy:"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"}}},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<5|t>>>27}function c(t){return t<<30|t>>>2}function h(t,e,r,n){return 0===t?e&r|~e&n:2===t?e&r|e&n|r&n:e^r^n}n(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=e[a-3]^e[a-8]^e[a-14]^e[a-16];for(var l=0;l<80;++l){var p=~~(l/20),d=f(r)+h(p,n,i,u)+s+e[l]+o[p]|0;s=u,u=i,i=c(n),n=r,r=d}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=u+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=u.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,r){var n=r(1),i=r(19),u=r(0).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<1|t>>>31}function c(t){return t<<5|t>>>27}function h(t){return t<<30|t>>>2}function l(t,e,r,n){return 0===t?e&r|~e&n:2===t?e&r|e&n|r&n:e^r^n}n(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,r=0|this._a,n=0|this._b,i=0|this._c,u=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=f(e[a-3]^e[a-8]^e[a-14]^e[a-16]);for(var p=0;p<80;++p){var d=~~(p/20),y=c(r)+l(d,n,i,u)+s+e[p]+o[d]|0;s=u,u=i,i=h(n),n=r,r=y}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=u+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=u.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,r){var n=r(1),i=r(92),u=r(19),o=r(0).Buffer,s=new Array(64);function a(){this.init(),this._w=s,u.call(this,64,56)}n(a,i),a.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},a.prototype._hash=function(){var t=o.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=a},function(t,e,r){var n=r(1),i=r(93),u=r(19),o=r(0).Buffer,s=new Array(160);function a(){this.init(),this._w=s,u.call(this,128,112)}n(a,i),a.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},a.prototype._hash=function(){var t=o.allocUnsafe(48);function e(e,r,n){t.writeInt32BE(e,n),t.writeInt32BE(r,n+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=a},function(t,e,r){"use strict";var n=r(1),i=r(171),u=r(10),o=r(0).Buffer,s=r(172),a=r(90),f=r(91),c=o.alloc(128);function h(t,e){u.call(this,"digest"),"string"==typeof e&&(e=o.from(e));var r="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>r)?e=("rmd160"===t?new a:f(t)).update(e).digest():e.length<r&&(e=o.concat([e,c],r));for(var n=this._ipad=o.allocUnsafe(r),i=this._opad=o.allocUnsafe(r),s=0;s<r;s++)n[s]=54^e[s],i[s]=92^e[s];this._hash="rmd160"===t?new a:f(t),this._hash.update(n)}n(h,u),h.prototype._update=function(t){this._hash.update(t)},h.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new a:f(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new h("rmd160",e):"md5"===t?new i(s,e):new h(t,e)}},function(t,e,r){"use strict";var n=r(1),i=r(0).Buffer,u=r(10),o=i.alloc(128),s=64;function a(t,e){u.call(this,"digest"),"string"==typeof e&&(e=i.from(e)),this._alg=t,this._key=e,e.length>s?e=t(e):e.length<s&&(e=i.concat([e,o],s));for(var r=this._ipad=i.allocUnsafe(s),n=this._opad=i.allocUnsafe(s),a=0;a<s;a++)r[a]=54^e[a],n[a]=92^e[a];this._hash=[r]}n(a,u),a.prototype._update=function(t){this._hash.push(t)},a.prototype._final=function(){var t=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,t]))},t.exports=a},function(t,e,r){var n=r(55);t.exports=function(t){return(new n).update(t).digest()}},function(t,e,r){var n=r(174);t.exports=n("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},function(t,e,r){var n=r(0).Buffer;t.exports=function(t){for(var e={},r=t.length,i=t.charAt(0),u=0;u<t.length;u++){var o=t.charAt(u);if(void 0!==e[o])throw new TypeError(o+" is ambiguous");e[o]=u}function s(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return n.allocUnsafe(0);for(var u=[0],o=0;o<t.length;o++){var s=e[t[o]];if(void 0===s)return;for(var a=0,f=s;a<u.length;++a)f+=u[a]*r,u[a]=255&f,f>>=8;for(;f>0;)u.push(255&f),f>>=8}for(var c=0;t[c]===i&&c<t.length-1;++c)u.push(0);return n.from(u.reverse())}return{encode:function(e){if(0===e.length)return"";for(var n=[0],u=0;u<e.length;++u){for(var o=0,s=e[u];o<n.length;++o)s+=n[o]<<8,n[o]=s%r,s=s/r|0;for(;s>0;)n.push(s%r),s=s/r|0}for(var a="",f=0;0===e[f]&&f<e.length-1;++f)a+=i;for(var c=n.length-1;c>=0;--c)a+=t[n[c]];return a},decodeUnsafe:s,decode:function(t){var e=s(t);if(e)return e;throw new Error("Non-base"+r+" character")}}}},function(t,e,r){"use strict";t.exports=function(t){return function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];return new Promise(function(e,n){setTimeout(function(){try{e(t.apply(void 0,r))}catch(t){n(t)}})})}}},function(t,e,r){"use strict";(function(e){var n=r(3),i=r(12),u=r(95),o=r(7),s=r(177);function a(t,r,s,a,f){u("Buffer",r),u(o,s),f&&(r=i.sha256(e.concat([r,new e(f)]))),n.equal(r.length,32,"Hash must be 256 bit");var c=s.toBuffer(32),h=new e(32),l=new e(32);l.fill(1),h.fill(0),h=i.HmacSHA256(e.concat([l,new e([0]),c,r]),h),l=i.HmacSHA256(l,h),h=i.HmacSHA256(e.concat([l,new e([1]),c,r]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h);for(var p=o.fromBuffer(l);p.signum()<=0||p.compareTo(t.n)>=0||!a(p);)h=i.HmacSHA256(e.concat([l,new e([0])]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h),p=o.fromBuffer(l);return p}function f(t,e,r,n){var i=t.n,u=t.G,o=r.r,s=r.s;if(o.signum()<=0||o.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var a=s.modInverse(i),f=e.multiply(a).mod(i),c=o.multiply(a).mod(i),h=u.multiplyTwo(f,n,c);return!t.isInfinity(h)&&h.affineX.mod(i).equals(o)}function c(t,e,r,i){n.strictEqual(3&i,i,"Recovery param is more than two bits");var u=t.n,o=t.G,s=r.r,a=r.s;n(s.signum()>0&&s.compareTo(u)<0,"Invalid r value"),n(a.signum()>0&&a.compareTo(u)<0,"Invalid s value");var f=1&i,c=i>>1?s.add(u):s,h=t.pointFromX(f,c),l=h.multiply(u);n(t.isInfinity(l),"nR is not a valid curve point");var p=e.negate().mod(u),d=s.modInverse(u),y=h.multiplyTwo(a,o,p).multiply(d);return t.validate(y),y}t.exports={calcPubKeyRecoveryParam:function(t,e,r,n){for(var i=0;i<4;i++)if(c(t,e,r,i).equals(n))return i;throw new Error("Unable to find valid recovery factor")},deterministicGenerateK:a,recoverPubKey:c,sign:function(t,e,r,n){var i,u,f=o.fromBuffer(e),c=t.n,h=t.G,l=(a(t,e,r,function(e){var n=h.multiply(e);return!t.isInfinity(n)&&0!==(i=n.affineX.mod(c)).signum()&&0!==(u=e.modInverse(c).multiply(f.add(r.multiply(i))).mod(c)).signum()},n),c.shiftRight(1));return u.compareTo(l)>0&&(u=c.subtract(u)),s(i,u)},verify:function(t,e,r,n){return f(t,o.fromBuffer(e),r,n)},verifyRaw:f}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=r(3),i=r(95),u=r(7);function o(t,r){function n(){var n=t.toDERInteger(),i=r.toDERInteger(),u=[];return u.push(2,n.length),(u=u.concat(n)).push(2,i.length),(u=u.concat(i)).unshift(48,u.length),new e(u)}return i(u,t),i(u,r),{r:t,s:r,toCompact:function(n,i){i&&(n+=4),n+=27;var u=new e(65);return u.writeUInt8(n,0),t.toBuffer(32).copy(u,1),r.toBuffer(32).copy(u,33),u},toDER:n,toScriptSignature:function(t){var r=new e(1);return r.writeUInt8(t,0),e.concat([n(),r])}}}o.parseCompact=function(t){n.equal(t.length,65,"Invalid signature length");var e=t.readUInt8(0)-27;return n.equal(e,7&e,"Invalid signature parameter"),{compressed:!!(4&e),i:e&=3,signature:o(u.fromBuffer(t.slice(1,33)),u.fromBuffer(t.slice(33)))}},o.fromDER=function(t){n.equal(t.readUInt8(0),48,"Not a DER sequence"),n.equal(t.readUInt8(1),t.length-2,"Invalid sequence length"),n.equal(t.readUInt8(2),2,"Expected a DER integer");var e=t.readUInt8(3);n(e>0,"R length is zero");var r=4+e;n.equal(t.readUInt8(r),2,"Expected a DER integer (2)");var i=t.readUInt8(r+1);n(i>0,"S length is zero");var s=t.slice(4,r),a=t.slice(r+2);r+=2+i,e>1&&0===s.readUInt8(0)&&n(128&s.readUInt8(1),"R value excessively padded"),i>1&&0===a.readUInt8(0)&&n(128&a.readUInt8(1),"S value excessively padded"),n.equal(r,t.length,"Invalid DER encoding");var f=u.fromDERInteger(s),c=u.fromDERInteger(a);return n(f.signum()>=0,"R value is negative"),n(c.signum()>=0,"S value is negative"),o(f,c)},o.parseScriptSignature=function(t){var e=t.readUInt8(t.length-1),r=-129&e;return n(r>0&&r<4,"Invalid hashType"),{signature:o.fromDER(t.slice(0,-1)),hashType:e}},t.exports=o}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(71),i=r(34),u=r(26),o=r(94),s=r(27);t.exports={Aes:n,PrivateKey:i,PublicKey:u,Signature:o,key_utils:s}},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,u=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var u=r(180),o=r(18).Long,s=r(3),a={bytes:function(){return[v]},string:function(){return[b]},vector:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return[h,{type:t,sorted:e}]},optional:function(t){return[l,{type:t}]},time:function(){return[w]},map:function(t){return[f,{annotation:t}]},static_variant:function(t){return[c,{types:t}]},fixed_string16:function(){return[b,{maxLen:16}]},fixed_string32:function(){return[b,{maxLen:32}]},fixed_bytes16:function(){return[v,{len:16}]},fixed_bytes20:function(){return[v,{len:20}]},fixed_bytes28:function(){return[v,{len:28}]},fixed_bytes32:function(){return[v,{len:32}]},fixed_bytes33:function(){return[v,{len:33}]},fixed_bytes64:function(){return[v,{len:64}]},fixed_bytes65:function(){return[v,{len:65}]},uint8:function(){return[d,{bits:8}]},uint16:function(){return[d,{bits:16}]},uint32:function(){return[d,{bits:32}]},uint64:function(){return[d,{bits:64}]},uint128:function(){return[y,{bits:128}]},uint224:function(){return[y,{bits:224}]},uint256:function(){return[y,{bits:256}]},uint512:function(){return[y,{bits:512}]},varuint32:function(){return[d,{bits:32,variable:!0}]},int8:function(){return[d,{signed:!0,bits:8}]},int16:function(){return[d,{signed:!0,bits:16}]},int32:function(){return[d,{signed:!0,bits:32}]},int64:function(){return[d,{signed:!0,bits:64}]},int128:function(){return[y,{signed:!0,bits:128}]},int224:function(){return[y,{signed:!0,bits:224}]},int256:function(){return[y,{signed:!0,bits:256}]},int512:function(){return[y,{signed:!0,bits:512}]},varint32:function(){return[d,{signed:!0,bits:32,variable:!0}]},float32:function(){return[m,{bits:32}]},float64:function(){return[m,{bits:64}]}};t.exports=function(t){t=Object.assign({defaults:!1,debug:!1,customTypes:{}},t);var e=Object.assign({},a,t.customTypes),r=function(r){return function(n,u){return n[u]=function(){for(var o=arguments.length,s=Array(o),f=0;f<o;f++)s[f]=arguments[f];return function(t,e,r,n,u,o){var s=(n?u[t]:a[t]).apply(void 0,function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}(r)),f=i(s,2),c=f[0],h=f[1],l=void 0===h?{}:h,p=Object.assign(l,e);p.typeName=t;var d=c(p,n,o);return d.typeName=t,d}(u,t,s,r,e,n)},n}},n=Object.keys(a).reduce(r(),{}),u=Object.keys(t.customTypes||{}).reduce(r(n),{});return Object.assign({},n,u,{config:t})};var f=function(t){var e=i(t.annotation,2),r=e[0],n=e[1];if(!C(r))throw new TypeError("map<type1, > unknown");if(!C(n))throw new TypeError("map<, type2> unknown");return{fromByteBuffer:function(e){for(var i=e.readVarint32(),u={},o=0;o<i;o++)u[r.fromByteBuffer(e)]=n.fromByteBuffer(e);return t.debug&&console.log("0x"+i.toString(16),"(map.fromByteBuffer length)",u),u},appendByteBuffer:function(e,i){E(i,t);var u=Object.keys(i);e.writeVarint32(u.length),t.debug&&console.log("0x"+u.length.toString(16),"(map.appendByteBuffer length)",u);var o=!0,s=!1,a=void 0;try{for(var f,c=u[Symbol.iterator]();!(o=(f=c.next()).done);o=!0){var h=f.value,l=i[h];r.appendByteBuffer(e,h),n.appendByteBuffer(e,l)}}catch(t){s=!0,a=t}finally{try{!o&&c.return&&c.return()}finally{if(s)throw a}}},fromObject:function(e){E(e,t);var i={};for(var u in e)i[r.fromObject(u)]=n.fromObject(e[u]);return i},toObject:function(e){if(t.defaults&&null==e)return function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}({},r.toObject(null),n.toObject(null));E(e,t);var i={};for(var u in e)i[r.toObject(u)]=n.toObject(e[u]);return i}}},c=function(t){var e=t.types;return{fromByteBuffer:function(r){var n=r.readVarint32(),i=e[n];return t.debug&&console.error("static_variant id "+n+" (0x"+n.toString(16)+")"),s(i,"static_variant invalid type position "+n),[n,i.fromByteBuffer(r)]},appendByteBuffer:function(t,r){s(Array.isArray(r)&&2===r.length,"Required tuple");var n=r[0],i=e[n];s(i,"type "+n),t.writeVarint32(n),i.appendByteBuffer(t,r[1])},fromObject:function(t){s(Array.isArray(t)&&2===t.length,"Required tuple");var r=t[0],n=e[r];return s(n,"type "+r),[r,n.fromObject(t[1])]},toObject:function(r){if(t.defaults&&null==r)return[0,e[0].toObject(null,debug)];s(Array.isArray(r)&&2===r.length,"Required tuple");var n=r[0],i=e[n];return s(i,"type "+n),[n,i.toObject(r[1])]}}},h=function(t){var e=t.type,r=t.sorted;if(!C(e))throw new TypeError("vector type should be a serializer");return{fromByteBuffer:function(r){var n=r.readVarint32();t.debug&&console.log("fromByteBuffer vector length",n,"(0x"+n.toString(16)+")");for(var i=[],u=0;u<n;u++)i.push(e.fromByteBuffer(r));return i},appendByteBuffer:function(n,i){null==i&&(i=[]),E(i,t),n.writeVarint32(i.length),!0===r&&(i=F(e,Object.assign([],i))),t.debug&&console.log("0x"+i.length.toString(16),"(vector.appendByteBuffer length)",i);var u=!0,o=!1,s=void 0;try{for(var a,f=i[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;e.appendByteBuffer(n,c)}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}},fromObject:function(n){null==n&&(n=[]),E(n,t);var i=[],u=!0,o=!1,s=void 0;try{for(var a,f=n[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;i.push(e.fromObject(c))}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}return!0===r&&(i=F(e,Object.assign([],i))),i},toObject:function(n){if(t.defaults&&null==n)return[e.toObject(n)];null==n&&(n=[]),E(n,t),!0===r&&(n=F(e,Object.assign([],n)));var i=[],u=!0,o=!1,s=void 0;try{for(var a,f=n[Symbol.iterator]();!(u=(a=f.next()).done);u=!0){var c=a.value;i.push(e.toObject(c))}}catch(t){o=!0,s=t}finally{try{!u&&f.return&&f.return()}finally{if(o)throw s}}return i}}},l=function(t){var e=t.type;if(!C(e))throw new TypeError("optional parameter should be a serializer");return{fromByteBuffer:function(t){return 1!==t.readUint8()?null:e.fromByteBuffer(t)},appendByteBuffer:function(t,r){null!=r?(t.writeUint8(1),e.appendByteBuffer(t,r)):t.writeUint8(0)},fromObject:function(t){return null==t?null:e.fromObject(t)},toObject:function(r){return null!=r||t.defaults?e.toObject(r):null}}},p=function(t){var e=t.signed,r=void 0!==e&&e,n=t.bits;return t.variable?"Varint"+n+(r?"ZigZag":""):(r?"Int":"Uint")+n},d=function(t){return{fromByteBuffer:function(e){var r=e["read"+p(t)]();return o.isLong(r)?r.toString():r},appendByteBuffer:function(e,r){e["write"+p(t)](r)},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),o.isLong(e)?e.toString():e)}}},y=function(t){var r=t.signed,n=void 0!==r&&r,i=t.bits,o=i/8;return{fromByteBuffer:function(r){var s=r.copy(r.offset,r.offset+o);r.skip(o);var a=new u(s.toHex(),"hex"),f=a.toArrayLike(e,"le",o);a=new u(f.toString("hex"),"hex"),n&&(a=a.fromTwos(i));var c=a.toString();return B(c,t),i>53?c:a.toNumber()},appendByteBuffer:function(r,s){B(s,t);var a=new u(s);n&&(a=a.toTwos(i));var f=a.toArrayLike(e,"le",o);r.append(f.toString("binary"),"binary")},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),e)}}},g=r(183),m=function(t){var r=t.bits,n=32===r?"Float":64===r?"Double":null;s(n,"unsupported float bit size: "+r);var i=r/8;return{fromByteBuffer:function(t){var r=t.copy(t.offset,t.offset+i);t.skip(i);var u=e.from(r.toBinary(),"binary");return g["read"+n+"LE"](u)},appendByteBuffer:function(t,e){var r=[];g["write"+n+"LE"](r,e),t.append(r)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?0:e}}},v=function(t){return{fromByteBuffer:function(r){var n=t.len,i=void 0;if(null==n){var u=r.readVarint32();i=r.copy(r.offset,r.offset+u),r.skip(u)}else i=r.copy(r.offset,r.offset+n),r.skip(n);return e.from(i.toBinary(),"binary")},appendByteBuffer:function(e,r){null==t.len&&e.writeVarint32(r.length),e.append(r.toString("binary"),"binary")},fromObject:function(r){return"string"==typeof r?r=e.from(r,"hex"):r instanceof Array?r=e.from(r):r instanceof Uint8Array&&(r=e.from(r)),E(r,t),r},toObject:function(e){var r=t.defaults,n=t.len;return r&&null==e?Array(n?n+1:1).join("00"):(E(e,t),e.toString("hex"))},compare:function(t,r){return e.compare(t,r)}}},b=function(t){return{fromByteBuffer:function(t){return t.readVString()},appendByteBuffer:function(e,r){E(r,t),e.writeVString(r.toString())},fromObject:function(e){return E(e,t),e},toObject:function(e){return t.defaults&&null==e?"":(E(e,t),e)}}},w=function(t){return{fromByteBuffer:function(t){return t.readUint32()},appendByteBuffer:function(e,r){E(r,t),e.writeUint32(r)},fromObject:function(e){if(E(e,t),"number"==typeof e)return e;if(e.getTime)return Math.floor(e.getTime()/1e3);if("string"!=typeof e)throw new Error("Unknown date type: "+e);return"string"!=typeof e||/Z$/.test(e)||(e+="Z"),Math.floor(new Date(e).getTime()/1e3)},toObject:function(e){if(t.defaults&&null==e)return new Date(0).toISOString().split(".")[0];E(e,t),B(e,D(t,{bits:32}));var r=parseInt(e);return new Date(1e3*r).toISOString().split(".")[0]}}},E=function(t,e){if(x(t))throw new Error("Required "+e.typeName);if(null!=e.len){if(null==t.length)throw new Error('len validation requries a "length" property');var r=e.len;if(t.length!==r)throw new Error(e.typeName+" length "+t.length+" does not equal "+r)}if(null!=e.maxLen){var n=e.maxLen;if(null==t.length)throw new Error('maxLen validation requries a "length" property');if(t.length>n)throw new Error(e.typeName+" length "+t.length+" exceeds maxLen "+n)}},_=new u,A=new u("1");function B(t,e){if(x(t))throw new Error("Required "+e.typeName);var r=e.signed,n=void 0!==r&&r,i=e.bits,o=void 0===i?54:i;if(t=String(t).trim(),n&&!/^-?[0-9]+$/.test(t)||!n&&!/^[0-9]+$/.test(t))throw new Error("Number format "+e.typeName+" "+t);var s=n?T(o):S(o),a=n?k(o):_,f=new u(t);if(f.cmp(a)<0||f.cmp(s)>0)throw new Error("Overflow "+e.typeName+" "+t+", max "+s.toString()+", min "+a.toString()+", signed "+n+", bits "+o)}var C=function(t){return"object"===(void 0===t?"undefined":n(t))&&"function"==typeof t.fromByteBuffer&&"function"==typeof t.appendByteBuffer&&"function"==typeof t.fromObject&&"function"==typeof t.toObject},F=function(t,e){return t.compare?e.sort(t.compare):e.sort()},D=function(){return Object.assign.apply(Object,arguments)},x=function(t){return null==t},S=function(t){return new u(1).ishln(t).isub(A)},T=function(t){return new u(1).ishln(t-1).isub(A)},k=function(t){return new u(1).ishln(t-1).ineg()}}).call(this,r(2).Buffer)},function(t,e,r){(function(t){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function u(t,e,r){if(u.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"==typeof t?t.exports=u:e.BN=u,u.BN=u,u.wordSize=26;try{o=r(182).Buffer}catch(t){}function s(t,e,r){for(var n=0,i=Math.min(t.length,r),u=e;u<i;u++){var o=t.charCodeAt(u)-48;n<<=4,n|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return n}function a(t,e,r,n){for(var i=0,u=Math.min(t.length,r),o=e;o<u;o++){var s=t.charCodeAt(o)-48;i*=n,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}u.isBN=function(t){return t instanceof u||null!==t&&"object"==typeof t&&t.constructor.wordSize===u.wordSize&&Array.isArray(t.words)},u.max=function(t,e){return t.cmp(e)>0?t:e},u.min=function(t,e){return t.cmp(e)<0?t:e},u.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),e,r)},u.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},u.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var u,o,s=0;if("be"===r)for(i=t.length-1,u=0;i>=0;i-=3)o=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[u]|=o<<s&67108863,this.words[u+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,u++);else if("le"===r)for(i=0,u=0;i<t.length;i+=3)o=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[u]|=o<<s&67108863,this.words[u+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,u++);return this.strip()},u.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,u=0;for(r=t.length-6,n=0;r>=e;r-=6)i=s(t,r,r+6),this.words[n]|=i<<u&67108863,this.words[n+1]|=i>>>26-u&4194303,(u+=24)>=26&&(u-=26,n++);r+6!==e&&(i=s(t,e,r+6),this.words[n]|=i<<u&67108863,this.words[n+1]|=i>>>26-u&4194303),this.strip()},u.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var u=t.length-r,o=u%n,s=Math.min(u,u-o)+r,f=0,c=r;c<s;c+=n)f=a(t,c,c+n,e),this.imuln(i),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==o){var h=1;for(f=a(t,c,t.length,e),c=0;c<o;c++)h*=e;this.imuln(h),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}},u.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},u.prototype.clone=function(){var t=new u(null);return this.copy(t),t},u.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},u.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},u.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},u.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function l(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],u=0|e.words[0],o=i*u,s=67108863&o,a=o/67108864|0;r.words[0]=s;for(var f=1;f<n;f++){for(var c=a>>>26,h=67108863&a,l=Math.min(f,e.length-1),p=Math.max(0,f-t.length+1);p<=l;p++){var d=f-p|0;c+=(o=(i=0|t.words[d])*(u=0|e.words[p])+h)/67108864|0,h=67108863&o}r.words[f]=0|h,a=0|c}return 0!==a?r.words[f]=0|a:r.length--,r.strip()}u.prototype.toString=function(t,e){var r;if(t=t||10,e=0|e||1,16===t||"hex"===t){r="";for(var i=0,u=0,o=0;o<this.length;o++){var s=this.words[o],a=(16777215&(s<<i|u)).toString(16);r=0!==(u=s>>>24-i&16777215)||o!==this.length-1?f[6-a.length]+a+r:a+r,(i+=2)>=26&&(i-=26,o--)}for(0!==u&&(r=u.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var l=c[t],p=h[t];r="";var d=this.clone();for(d.negative=0;!d.isZero();){var y=d.modn(p).toString(t);r=(d=d.idivn(p)).isZero()?y+r:f[l-y.length]+y+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},u.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},u.prototype.toJSON=function(){return this.toString(16)},u.prototype.toBuffer=function(t,e){return n(void 0!==o),this.toArrayLike(o,t,e)},u.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},u.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),u=r||Math.max(1,i);n(i<=u,"byte array longer than desired length"),n(u>0,"Requested array length <= 0"),this.strip();var o,s,a="le"===e,f=new t(u),c=this.clone();if(a){for(s=0;!c.isZero();s++)o=c.andln(255),c.iushrn(8),f[s]=o;for(;s<u;s++)f[s]=0}else{for(s=0;s<u-i;s++)f[s]=0;for(s=0;!c.isZero();s++)o=c.andln(255),c.iushrn(8),f[u-s-1]=o}return f},Math.clz32?u.prototype._countBits=function(t){return 32-Math.clz32(t)}:u.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},u.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},u.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},u.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},u.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},u.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},u.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},u.prototype.isNeg=function(){return 0!==this.negative},u.prototype.neg=function(){return this.clone().ineg()},u.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},u.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},u.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},u.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},u.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},u.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},u.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},u.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},u.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},u.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},u.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},u.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},u.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},u.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},u.prototype.notn=function(t){return this.clone().inotn(t)},u.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},u.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,u=0;u<n.length;u++)e=(0|r.words[u])+(0|n.words[u])+i,this.words[u]=67108863&e,i=e>>>26;for(;0!==i&&u<r.length;u++)e=(0|r.words[u])+i,this.words[u]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;u<r.length;u++)this.words[u]=r.words[u];return this},u.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},u.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var u=0,o=0;o<n.length;o++)u=(e=(0|r.words[o])-(0|n.words[o])+u)>>26,this.words[o]=67108863&e;for(;0!==u&&o<r.length;o++)u=(e=(0|r.words[o])+u)>>26,this.words[o]=67108863&e;if(0===u&&o<r.length&&r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this.length=Math.max(this.length,o),r!==this&&(this.negative=1),this.strip()},u.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var n,i,u,o=t.words,s=e.words,a=r.words,f=0,c=0|o[0],h=8191&c,l=c>>>13,p=0|o[1],d=8191&p,y=p>>>13,g=0|o[2],m=8191&g,v=g>>>13,b=0|o[3],w=8191&b,E=b>>>13,_=0|o[4],A=8191&_,B=_>>>13,C=0|o[5],F=8191&C,D=C>>>13,x=0|o[6],S=8191&x,T=x>>>13,k=0|o[7],M=8191&k,I=k>>>13,O=0|o[8],L=8191&O,R=O>>>13,j=0|o[9],N=8191&j,U=j>>>13,P=0|s[0],q=8191&P,z=P>>>13,V=0|s[1],H=8191&V,Z=V>>>13,G=0|s[2],Y=8191&G,K=G>>>13,$=0|s[3],W=8191&$,X=$>>>13,J=0|s[4],Q=8191&J,tt=J>>>13,et=0|s[5],rt=8191&et,nt=et>>>13,it=0|s[6],ut=8191&it,ot=it>>>13,st=0|s[7],at=8191&st,ft=st>>>13,ct=0|s[8],ht=8191&ct,lt=ct>>>13,pt=0|s[9],dt=8191&pt,yt=pt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(f+(n=Math.imul(h,q))|0)+((8191&(i=(i=Math.imul(h,z))+Math.imul(l,q)|0))<<13)|0;f=((u=Math.imul(l,z))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(d,q),i=(i=Math.imul(d,z))+Math.imul(y,q)|0,u=Math.imul(y,z);var mt=(f+(n=n+Math.imul(h,H)|0)|0)+((8191&(i=(i=i+Math.imul(h,Z)|0)+Math.imul(l,H)|0))<<13)|0;f=((u=u+Math.imul(l,Z)|0)+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,n=Math.imul(m,q),i=(i=Math.imul(m,z))+Math.imul(v,q)|0,u=Math.imul(v,z),n=n+Math.imul(d,H)|0,i=(i=i+Math.imul(d,Z)|0)+Math.imul(y,H)|0,u=u+Math.imul(y,Z)|0;var vt=(f+(n=n+Math.imul(h,Y)|0)|0)+((8191&(i=(i=i+Math.imul(h,K)|0)+Math.imul(l,Y)|0))<<13)|0;f=((u=u+Math.imul(l,K)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(w,q),i=(i=Math.imul(w,z))+Math.imul(E,q)|0,u=Math.imul(E,z),n=n+Math.imul(m,H)|0,i=(i=i+Math.imul(m,Z)|0)+Math.imul(v,H)|0,u=u+Math.imul(v,Z)|0,n=n+Math.imul(d,Y)|0,i=(i=i+Math.imul(d,K)|0)+Math.imul(y,Y)|0,u=u+Math.imul(y,K)|0;var bt=(f+(n=n+Math.imul(h,W)|0)|0)+((8191&(i=(i=i+Math.imul(h,X)|0)+Math.imul(l,W)|0))<<13)|0;f=((u=u+Math.imul(l,X)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(A,q),i=(i=Math.imul(A,z))+Math.imul(B,q)|0,u=Math.imul(B,z),n=n+Math.imul(w,H)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(E,H)|0,u=u+Math.imul(E,Z)|0,n=n+Math.imul(m,Y)|0,i=(i=i+Math.imul(m,K)|0)+Math.imul(v,Y)|0,u=u+Math.imul(v,K)|0,n=n+Math.imul(d,W)|0,i=(i=i+Math.imul(d,X)|0)+Math.imul(y,W)|0,u=u+Math.imul(y,X)|0;var wt=(f+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,tt)|0)+Math.imul(l,Q)|0))<<13)|0;f=((u=u+Math.imul(l,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(F,q),i=(i=Math.imul(F,z))+Math.imul(D,q)|0,u=Math.imul(D,z),n=n+Math.imul(A,H)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(B,H)|0,u=u+Math.imul(B,Z)|0,n=n+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(E,Y)|0,u=u+Math.imul(E,K)|0,n=n+Math.imul(m,W)|0,i=(i=i+Math.imul(m,X)|0)+Math.imul(v,W)|0,u=u+Math.imul(v,X)|0,n=n+Math.imul(d,Q)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(y,Q)|0,u=u+Math.imul(y,tt)|0;var Et=(f+(n=n+Math.imul(h,rt)|0)|0)+((8191&(i=(i=i+Math.imul(h,nt)|0)+Math.imul(l,rt)|0))<<13)|0;f=((u=u+Math.imul(l,nt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(S,q),i=(i=Math.imul(S,z))+Math.imul(T,q)|0,u=Math.imul(T,z),n=n+Math.imul(F,H)|0,i=(i=i+Math.imul(F,Z)|0)+Math.imul(D,H)|0,u=u+Math.imul(D,Z)|0,n=n+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,K)|0)+Math.imul(B,Y)|0,u=u+Math.imul(B,K)|0,n=n+Math.imul(w,W)|0,i=(i=i+Math.imul(w,X)|0)+Math.imul(E,W)|0,u=u+Math.imul(E,X)|0,n=n+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,tt)|0)+Math.imul(v,Q)|0,u=u+Math.imul(v,tt)|0,n=n+Math.imul(d,rt)|0,i=(i=i+Math.imul(d,nt)|0)+Math.imul(y,rt)|0,u=u+Math.imul(y,nt)|0;var _t=(f+(n=n+Math.imul(h,ut)|0)|0)+((8191&(i=(i=i+Math.imul(h,ot)|0)+Math.imul(l,ut)|0))<<13)|0;f=((u=u+Math.imul(l,ot)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(M,q),i=(i=Math.imul(M,z))+Math.imul(I,q)|0,u=Math.imul(I,z),n=n+Math.imul(S,H)|0,i=(i=i+Math.imul(S,Z)|0)+Math.imul(T,H)|0,u=u+Math.imul(T,Z)|0,n=n+Math.imul(F,Y)|0,i=(i=i+Math.imul(F,K)|0)+Math.imul(D,Y)|0,u=u+Math.imul(D,K)|0,n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,X)|0)+Math.imul(B,W)|0,u=u+Math.imul(B,X)|0,n=n+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(E,Q)|0,u=u+Math.imul(E,tt)|0,n=n+Math.imul(m,rt)|0,i=(i=i+Math.imul(m,nt)|0)+Math.imul(v,rt)|0,u=u+Math.imul(v,nt)|0,n=n+Math.imul(d,ut)|0,i=(i=i+Math.imul(d,ot)|0)+Math.imul(y,ut)|0,u=u+Math.imul(y,ot)|0;var At=(f+(n=n+Math.imul(h,at)|0)|0)+((8191&(i=(i=i+Math.imul(h,ft)|0)+Math.imul(l,at)|0))<<13)|0;f=((u=u+Math.imul(l,ft)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(L,q),i=(i=Math.imul(L,z))+Math.imul(R,q)|0,u=Math.imul(R,z),n=n+Math.imul(M,H)|0,i=(i=i+Math.imul(M,Z)|0)+Math.imul(I,H)|0,u=u+Math.imul(I,Z)|0,n=n+Math.imul(S,Y)|0,i=(i=i+Math.imul(S,K)|0)+Math.imul(T,Y)|0,u=u+Math.imul(T,K)|0,n=n+Math.imul(F,W)|0,i=(i=i+Math.imul(F,X)|0)+Math.imul(D,W)|0,u=u+Math.imul(D,X)|0,n=n+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(B,Q)|0,u=u+Math.imul(B,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(E,rt)|0,u=u+Math.imul(E,nt)|0,n=n+Math.imul(m,ut)|0,i=(i=i+Math.imul(m,ot)|0)+Math.imul(v,ut)|0,u=u+Math.imul(v,ot)|0,n=n+Math.imul(d,at)|0,i=(i=i+Math.imul(d,ft)|0)+Math.imul(y,at)|0,u=u+Math.imul(y,ft)|0;var Bt=(f+(n=n+Math.imul(h,ht)|0)|0)+((8191&(i=(i=i+Math.imul(h,lt)|0)+Math.imul(l,ht)|0))<<13)|0;f=((u=u+Math.imul(l,lt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(N,q),i=(i=Math.imul(N,z))+Math.imul(U,q)|0,u=Math.imul(U,z),n=n+Math.imul(L,H)|0,i=(i=i+Math.imul(L,Z)|0)+Math.imul(R,H)|0,u=u+Math.imul(R,Z)|0,n=n+Math.imul(M,Y)|0,i=(i=i+Math.imul(M,K)|0)+Math.imul(I,Y)|0,u=u+Math.imul(I,K)|0,n=n+Math.imul(S,W)|0,i=(i=i+Math.imul(S,X)|0)+Math.imul(T,W)|0,u=u+Math.imul(T,X)|0,n=n+Math.imul(F,Q)|0,i=(i=i+Math.imul(F,tt)|0)+Math.imul(D,Q)|0,u=u+Math.imul(D,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(B,rt)|0,u=u+Math.imul(B,nt)|0,n=n+Math.imul(w,ut)|0,i=(i=i+Math.imul(w,ot)|0)+Math.imul(E,ut)|0,u=u+Math.imul(E,ot)|0,n=n+Math.imul(m,at)|0,i=(i=i+Math.imul(m,ft)|0)+Math.imul(v,at)|0,u=u+Math.imul(v,ft)|0,n=n+Math.imul(d,ht)|0,i=(i=i+Math.imul(d,lt)|0)+Math.imul(y,ht)|0,u=u+Math.imul(y,lt)|0;var Ct=(f+(n=n+Math.imul(h,dt)|0)|0)+((8191&(i=(i=i+Math.imul(h,yt)|0)+Math.imul(l,dt)|0))<<13)|0;f=((u=u+Math.imul(l,yt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(N,H),i=(i=Math.imul(N,Z))+Math.imul(U,H)|0,u=Math.imul(U,Z),n=n+Math.imul(L,Y)|0,i=(i=i+Math.imul(L,K)|0)+Math.imul(R,Y)|0,u=u+Math.imul(R,K)|0,n=n+Math.imul(M,W)|0,i=(i=i+Math.imul(M,X)|0)+Math.imul(I,W)|0,u=u+Math.imul(I,X)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,tt)|0)+Math.imul(T,Q)|0,u=u+Math.imul(T,tt)|0,n=n+Math.imul(F,rt)|0,i=(i=i+Math.imul(F,nt)|0)+Math.imul(D,rt)|0,u=u+Math.imul(D,nt)|0,n=n+Math.imul(A,ut)|0,i=(i=i+Math.imul(A,ot)|0)+Math.imul(B,ut)|0,u=u+Math.imul(B,ot)|0,n=n+Math.imul(w,at)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(E,at)|0,u=u+Math.imul(E,ft)|0,n=n+Math.imul(m,ht)|0,i=(i=i+Math.imul(m,lt)|0)+Math.imul(v,ht)|0,u=u+Math.imul(v,lt)|0;var Ft=(f+(n=n+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,yt)|0)+Math.imul(y,dt)|0))<<13)|0;f=((u=u+Math.imul(y,yt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,n=Math.imul(N,Y),i=(i=Math.imul(N,K))+Math.imul(U,Y)|0,u=Math.imul(U,K),n=n+Math.imul(L,W)|0,i=(i=i+Math.imul(L,X)|0)+Math.imul(R,W)|0,u=u+Math.imul(R,X)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(I,Q)|0,u=u+Math.imul(I,tt)|0,n=n+Math.imul(S,rt)|0,i=(i=i+Math.imul(S,nt)|0)+Math.imul(T,rt)|0,u=u+Math.imul(T,nt)|0,n=n+Math.imul(F,ut)|0,i=(i=i+Math.imul(F,ot)|0)+Math.imul(D,ut)|0,u=u+Math.imul(D,ot)|0,n=n+Math.imul(A,at)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(B,at)|0,u=u+Math.imul(B,ft)|0,n=n+Math.imul(w,ht)|0,i=(i=i+Math.imul(w,lt)|0)+Math.imul(E,ht)|0,u=u+Math.imul(E,lt)|0;var Dt=(f+(n=n+Math.imul(m,dt)|0)|0)+((8191&(i=(i=i+Math.imul(m,yt)|0)+Math.imul(v,dt)|0))<<13)|0;f=((u=u+Math.imul(v,yt)|0)+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,n=Math.imul(N,W),i=(i=Math.imul(N,X))+Math.imul(U,W)|0,u=Math.imul(U,X),n=n+Math.imul(L,Q)|0,i=(i=i+Math.imul(L,tt)|0)+Math.imul(R,Q)|0,u=u+Math.imul(R,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(I,rt)|0,u=u+Math.imul(I,nt)|0,n=n+Math.imul(S,ut)|0,i=(i=i+Math.imul(S,ot)|0)+Math.imul(T,ut)|0,u=u+Math.imul(T,ot)|0,n=n+Math.imul(F,at)|0,i=(i=i+Math.imul(F,ft)|0)+Math.imul(D,at)|0,u=u+Math.imul(D,ft)|0,n=n+Math.imul(A,ht)|0,i=(i=i+Math.imul(A,lt)|0)+Math.imul(B,ht)|0,u=u+Math.imul(B,lt)|0;var xt=(f+(n=n+Math.imul(w,dt)|0)|0)+((8191&(i=(i=i+Math.imul(w,yt)|0)+Math.imul(E,dt)|0))<<13)|0;f=((u=u+Math.imul(E,yt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(N,Q),i=(i=Math.imul(N,tt))+Math.imul(U,Q)|0,u=Math.imul(U,tt),n=n+Math.imul(L,rt)|0,i=(i=i+Math.imul(L,nt)|0)+Math.imul(R,rt)|0,u=u+Math.imul(R,nt)|0,n=n+Math.imul(M,ut)|0,i=(i=i+Math.imul(M,ot)|0)+Math.imul(I,ut)|0,u=u+Math.imul(I,ot)|0,n=n+Math.imul(S,at)|0,i=(i=i+Math.imul(S,ft)|0)+Math.imul(T,at)|0,u=u+Math.imul(T,ft)|0,n=n+Math.imul(F,ht)|0,i=(i=i+Math.imul(F,lt)|0)+Math.imul(D,ht)|0,u=u+Math.imul(D,lt)|0;var St=(f+(n=n+Math.imul(A,dt)|0)|0)+((8191&(i=(i=i+Math.imul(A,yt)|0)+Math.imul(B,dt)|0))<<13)|0;f=((u=u+Math.imul(B,yt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(N,rt),i=(i=Math.imul(N,nt))+Math.imul(U,rt)|0,u=Math.imul(U,nt),n=n+Math.imul(L,ut)|0,i=(i=i+Math.imul(L,ot)|0)+Math.imul(R,ut)|0,u=u+Math.imul(R,ot)|0,n=n+Math.imul(M,at)|0,i=(i=i+Math.imul(M,ft)|0)+Math.imul(I,at)|0,u=u+Math.imul(I,ft)|0,n=n+Math.imul(S,ht)|0,i=(i=i+Math.imul(S,lt)|0)+Math.imul(T,ht)|0,u=u+Math.imul(T,lt)|0;var Tt=(f+(n=n+Math.imul(F,dt)|0)|0)+((8191&(i=(i=i+Math.imul(F,yt)|0)+Math.imul(D,dt)|0))<<13)|0;f=((u=u+Math.imul(D,yt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(N,ut),i=(i=Math.imul(N,ot))+Math.imul(U,ut)|0,u=Math.imul(U,ot),n=n+Math.imul(L,at)|0,i=(i=i+Math.imul(L,ft)|0)+Math.imul(R,at)|0,u=u+Math.imul(R,ft)|0,n=n+Math.imul(M,ht)|0,i=(i=i+Math.imul(M,lt)|0)+Math.imul(I,ht)|0,u=u+Math.imul(I,lt)|0;var kt=(f+(n=n+Math.imul(S,dt)|0)|0)+((8191&(i=(i=i+Math.imul(S,yt)|0)+Math.imul(T,dt)|0))<<13)|0;f=((u=u+Math.imul(T,yt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(N,at),i=(i=Math.imul(N,ft))+Math.imul(U,at)|0,u=Math.imul(U,ft),n=n+Math.imul(L,ht)|0,i=(i=i+Math.imul(L,lt)|0)+Math.imul(R,ht)|0,u=u+Math.imul(R,lt)|0;var Mt=(f+(n=n+Math.imul(M,dt)|0)|0)+((8191&(i=(i=i+Math.imul(M,yt)|0)+Math.imul(I,dt)|0))<<13)|0;f=((u=u+Math.imul(I,yt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(N,ht),i=(i=Math.imul(N,lt))+Math.imul(U,ht)|0,u=Math.imul(U,lt);var It=(f+(n=n+Math.imul(L,dt)|0)|0)+((8191&(i=(i=i+Math.imul(L,yt)|0)+Math.imul(R,dt)|0))<<13)|0;f=((u=u+Math.imul(R,yt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863;var Ot=(f+(n=Math.imul(N,dt))|0)+((8191&(i=(i=Math.imul(N,yt))+Math.imul(U,dt)|0))<<13)|0;return f=((u=Math.imul(U,yt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,a[0]=gt,a[1]=mt,a[2]=vt,a[3]=bt,a[4]=wt,a[5]=Et,a[6]=_t,a[7]=At,a[8]=Bt,a[9]=Ct,a[10]=Ft,a[11]=Dt,a[12]=xt,a[13]=St,a[14]=Tt,a[15]=kt,a[16]=Mt,a[17]=It,a[18]=Ot,0!==f&&(a[19]=f,r.length++),r};function d(t,e,r){return(new y).mulp(t,e,r)}function y(t,e){this.x=t,this.y=e}Math.imul||(p=l),u.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):r<63?l(this,t,e):r<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,u=0;u<r.length-1;u++){var o=i;i=0;for(var s=67108863&n,a=Math.min(u,e.length-1),f=Math.max(0,u-t.length+1);f<=a;f++){var c=u-f,h=(0|t.words[c])*(0|e.words[f]),l=67108863&h;s=67108863&(l=l+s|0),i+=(o=(o=o+(h/67108864|0)|0)+(l>>>26)|0)>>>26,o&=67108863}r.words[u]=s,n=o,o=i}return 0!==n?r.words[u]=n:r.length--,r.strip()}(this,t,e):d(this,t,e)},y.prototype.makeRBT=function(t){for(var e=new Array(t),r=u.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},y.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},y.prototype.permute=function(t,e,r,n,i,u){for(var o=0;o<u;o++)n[o]=e[t[o]],i[o]=r[t[o]]},y.prototype.transform=function(t,e,r,n,i,u){this.permute(u,t,e,r,n,i);for(var o=1;o<i;o<<=1)for(var s=o<<1,a=Math.cos(2*Math.PI/s),f=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var h=a,l=f,p=0;p<o;p++){var d=r[c+p],y=n[c+p],g=r[c+p+o],m=n[c+p+o],v=h*g-l*m;m=h*m+l*g,g=v,r[c+p]=d+g,n[c+p]=y+m,r[c+p+o]=d-g,n[c+p+o]=y-m,p!==s&&(v=a*h-f*l,l=a*l+f*h,h=v)}},y.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},y.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},y.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},y.prototype.convert13b=function(t,e,r,i){for(var u=0,o=0;o<e;o++)u+=0|t[o],r[2*o]=8191&u,u>>>=13,r[2*o+1]=8191&u,u>>>=13;for(o=2*e;o<i;++o)r[o]=0;n(0===u),n(0==(-8192&u))},y.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},y.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),u=this.stub(n),o=new Array(n),s=new Array(n),a=new Array(n),f=new Array(n),c=new Array(n),h=new Array(n),l=r.words;l.length=n,this.convert13b(t.words,t.length,o,n),this.convert13b(e.words,e.length,f,n),this.transform(o,u,s,a,n,i),this.transform(f,u,c,h,n,i);for(var p=0;p<n;p++){var d=s[p]*c[p]-a[p]*h[p];a[p]=s[p]*h[p]+a[p]*c[p],s[p]=d}return this.conjugate(s,a,n),this.transform(s,a,l,u,n,i),this.conjugate(l,u,n),this.normalize13b(l,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},u.prototype.mul=function(t){var e=new u(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},u.prototype.mulf=function(t){var e=new u(null);return e.words=new Array(this.length+t.length),d(this,t,e)},u.prototype.imul=function(t){return this.clone().mulTo(t,this)},u.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,u=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=u>>>26,this.words[r]=67108863&u}return 0!==e&&(this.words[r]=e,this.length++),this},u.prototype.muln=function(t){return this.clone().imuln(t)},u.prototype.sqr=function(){return this.mul(this)},u.prototype.isqr=function(){return this.imul(this.clone())},u.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new u(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},u.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,u=67108863>>>26-r<<26-r;if(0!==r){var o=0;for(e=0;e<this.length;e++){var s=this.words[e]&u,a=(0|this.words[e])-s<<r;this.words[e]=a|o,o=s>>>26-r}o&&(this.words[e]=o,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},u.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},u.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var u=t%26,o=Math.min((t-u)/26,this.length),s=67108863^67108863>>>u<<u,a=r;if(i-=o,i=Math.max(0,i),a){for(var f=0;f<o;f++)a.words[f]=this.words[f];a.length=o}if(0===o);else if(this.length>o)for(this.length-=o,f=0;f<this.length;f++)this.words[f]=this.words[f+o];else this.words[0]=0,this.length=1;var c=0;for(f=this.length-1;f>=0&&(0!==c||f>=i);f--){var h=0|this.words[f];this.words[f]=c<<26-u|h>>>u,c=h&s}return a&&0!==c&&(a.words[a.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},u.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},u.prototype.shln=function(t){return this.clone().ishln(t)},u.prototype.ushln=function(t){return this.clone().iushln(t)},u.prototype.shrn=function(t){return this.clone().ishrn(t)},u.prototype.ushrn=function(t){return this.clone().iushrn(t)},u.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r)&&!!(this.words[r]&i)},u.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},u.prototype.maskn=function(t){return this.clone().imaskn(t)},u.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},u.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},u.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},u.prototype.addn=function(t){return this.clone().iaddn(t)},u.prototype.subn=function(t){return this.clone().isubn(t)},u.prototype.iabs=function(){return this.negative=0,this},u.prototype.abs=function(){return this.clone().iabs()},u.prototype._ishlnsubmul=function(t,e,r){var i,u,o=t.length+r;this._expand(o);var s=0;for(i=0;i<t.length;i++){u=(0|this.words[i+r])+s;var a=(0|t.words[i])*e;s=((u-=67108863&a)>>26)-(a/67108864|0),this.words[i+r]=67108863&u}for(;i<this.length-r;i++)s=(u=(0|this.words[i+r])+s)>>26,this.words[i+r]=67108863&u;if(0===s)return this.strip();for(n(-1===s),s=0,i=0;i<this.length;i++)s=(u=-(0|this.words[i])+s)>>26,this.words[i]=67108863&u;return this.negative=1,this.strip()},u.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,o=0|i.words[i.length-1];0!==(r=26-this._countBits(o))&&(i=i.ushln(r),n.iushln(r),o=0|i.words[i.length-1]);var s,a=n.length-i.length;if("mod"!==e){(s=new u(null)).length=a+1,s.words=new Array(s.length);for(var f=0;f<s.length;f++)s.words[f]=0}var c=n.clone()._ishlnsubmul(i,1,a);0===c.negative&&(n=c,s&&(s.words[a]=1));for(var h=a-1;h>=0;h--){var l=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(l=Math.min(l/o|0,67108863),n._ishlnsubmul(i,l,h);0!==n.negative;)l--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1);s&&(s.words[h]=l)}return s&&s.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:s||null,mod:n}},u.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new u(0),mod:new u(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(o=s.mod.neg(),r&&0!==o.negative&&o.iadd(t)),{div:i,mod:o}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(o=s.mod.neg(),r&&0!==o.negative&&o.isub(t)),{div:s.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new u(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new u(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new u(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,o,s},u.prototype.div=function(t){return this.divmod(t,"div",!1).div},u.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},u.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},u.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),u=r.cmp(n);return u<0||1===i&&0===u?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},u.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},u.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},u.prototype.divn=function(t){return this.clone().idivn(t)},u.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new u(1),o=new u(0),s=new u(0),a=new u(1),f=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++f;for(var c=r.clone(),h=e.clone();!e.isZero();){for(var l=0,p=1;0==(e.words[0]&p)&&l<26;++l,p<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(c),o.isub(h)),i.iushrn(1),o.iushrn(1);for(var d=0,y=1;0==(r.words[0]&y)&&d<26;++d,y<<=1);if(d>0)for(r.iushrn(d);d-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(h)),s.iushrn(1),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(s),o.isub(a)):(r.isub(e),s.isub(i),a.isub(o))}return{a:s,b:a,gcd:r.iushln(f)}},u.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,o=new u(1),s=new u(0),a=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var f=0,c=1;0==(e.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(e.iushrn(f);f-- >0;)o.isOdd()&&o.iadd(a),o.iushrn(1);for(var h=0,l=1;0==(r.words[0]&l)&&h<26;++h,l<<=1);if(h>0)for(r.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(r)>=0?(e.isub(r),o.isub(s)):(r.isub(e),s.isub(o))}return(i=0===e.cmpn(1)?o:s).cmpn(0)<0&&i.iadd(t),i},u.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var u=e;e=r,r=u}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},u.prototype.invm=function(t){return this.egcd(t).a.umod(t)},u.prototype.isEven=function(){return 0==(1&this.words[0])},u.prototype.isOdd=function(){return 1==(1&this.words[0])},u.prototype.andln=function(t){return this.words[0]&t},u.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var u=i,o=r;0!==u&&o<this.length;o++){var s=0|this.words[o];u=(s+=u)>>>26,s&=67108863,this.words[o]=s}return 0!==u&&(this.words[o]=u,this.length++),this},u.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},u.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},u.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},u.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},u.prototype.gtn=function(t){return 1===this.cmpn(t)},u.prototype.gt=function(t){return 1===this.cmp(t)},u.prototype.gten=function(t){return this.cmpn(t)>=0},u.prototype.gte=function(t){return this.cmp(t)>=0},u.prototype.ltn=function(t){return-1===this.cmpn(t)},u.prototype.lt=function(t){return-1===this.cmp(t)},u.prototype.lten=function(t){return this.cmpn(t)<=0},u.prototype.lte=function(t){return this.cmp(t)<=0},u.prototype.eqn=function(t){return 0===this.cmpn(t)},u.prototype.eq=function(t){return 0===this.cmp(t)},u.red=function(t){return new _(t)},u.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},u.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},u.prototype._forceRed=function(t){return this.red=t,this},u.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},u.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},u.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},u.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},u.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},u.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},u.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},u.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},u.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},u.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},u.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},u.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},u.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},u.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function m(t,e){this.name=t,this.p=new u(e,16),this.n=this.p.bitLength(),this.k=new u(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function E(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=u._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function A(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new u(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var t=new u(null);return t.words=new Array(Math.ceil(this.n/13)),t},m.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},m.prototype.split=function(t,e){t.iushrn(this.n,0,e)},m.prototype.imulK=function(t){return t.imul(this.k)},i(v,m),v.prototype.split=function(t,e){for(var r=Math.min(t.length,9),n=0;n<r;n++)e.words[n]=t.words[n];if(e.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(e.words[e.length++]=4194303&i,n=10;n<t.length;n++){var u=0|t.words[n];t.words[n-10]=(4194303&u)<<4|i>>>22,i=u}i>>>=22,t.words[n-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,m),i(w,m),i(E,m),E.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},u._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new E}return g[t]=e,e},_.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},_.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new u(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);n(!i.isZero());var s=new u(1).toRed(this),a=s.redNeg(),f=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new u(2*c*c).toRed(this);0!==this.pow(c,f).cmp(a);)c.redIAdd(a);for(var h=this.pow(c,i),l=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),d=o;0!==p.cmp(s);){for(var y=p,g=0;0!==y.cmp(s);g++)y=y.redSqr();n(g<d);var m=this.pow(h,new u(1).iushln(d-g-1));l=l.redMul(m),h=m.redSqr(),p=p.redMul(h),d=g}return l},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new u(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new u(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],o=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),n=e.length-1;n>=0;n--){for(var f=e.words[n],c=a-1;c>=0;c--){var h=f>>c&1;i!==r[0]&&(i=this.sqr(i)),0!==h||0!==o?(o<<=1,o|=h,(4===++s||0===n&&0===c)&&(i=this.mul(i,r[o]),s=0,o=0)):s=0}a=26}return i},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},u.mont=function(t){return new A(t)},i(A,_),A.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},A.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},A.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),u=i;return i.cmp(this.m)>=0?u=i.isub(this.m):i.cmpn(0)<0&&(u=i.iadd(this.m)),u._forceRed(this)},A.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new u(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},A.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,r(181)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){},function(t,e,r){"use strict";(function(e){var r,n,i,u,o,s,a,f,c=!1;function h(t,e,r){var n=t[e++],i=t[e++],u=t[e++],o=t[e];return"bige"===r?256*(256*(256*n+i)+u)+o:256*(256*(256*o+u)+i)+n}function l(t,e,r,n){var i=e>>>24&255,u=e>>16&255,o=e>>8&255,s=255&e;"bige"===n?(t[r++]=i,t[r++]=u,t[r++]=o,t[r]=s):(t[r++]=s,t[r++]=o,t[r++]=u,t[r]=i)}function p(t,e,r,n,i){"bige"===i?(l(t,e,n,i),l(t,r,n+4,i)):(l(t,r,n,i),l(t,e,n+4,i))}"function"==typeof Float32Array&&function(){var t=new Float32Array(1),e=new Uint8Array(t.buffer);t[0]=-1,c=0===e[3],r=function(r,n){return(n=n||0)<0||n+4>r.length?0:(e[0]=r[n++],e[1]=r[n++],e[2]=r[n++],e[3]=r[n],t[0])},i=function(r,n){return(n=n||0)<0||n+4>r.length?0:(e[3]=r[n++],e[2]=r[n++],e[1]=r[n++],e[0]=r[n],t[0])},n=function(r,n,i){i=i||0,t[0]=n,r[i++]=e[0],r[i++]=e[1],r[i++]=e[2],r[i]=e[3]},u=function(r,n,i){i=i||0,t[0]=n,r[i++]=e[3],r[i++]=e[2],r[i++]=e[1],r[i]=e[0]}}(),"function"==typeof Float64Array&&function(){var t=new Float64Array(1),e=new Uint8Array(t.buffer);o=function(r,n){return(n=n||0)<0||n+8>r.length?0:(e[0]=r[n+0],e[1]=r[n+1],e[2]=r[n+2],e[3]=r[n+3],e[4]=r[n+4],e[5]=r[n+5],e[6]=r[n+6],e[7]=r[n+7],t[0])},a=function(r,n){return(n=n||0)<0||n+8>r.length?0:(e[7]=r[n+0],e[6]=r[n+1],e[5]=r[n+2],e[4]=r[n+3],e[3]=r[n+4],e[2]=r[n+5],e[1]=r[n+6],e[0]=r[n+7],t[0])},s=function(r,n,i){i=i||0,t[0]=n,r[i+0]=e[0],r[i+1]=e[1],r[i+2]=e[2],r[i+3]=e[3],r[i+4]=e[4],r[i+5]=e[5],r[i+6]=e[6],r[i+7]=e[7]},f=function(r,n,i){i=i||0,t[0]=n,r[i+0]=e[7],r[i+1]=e[6],r[i+2]=e[5],r[i+3]=e[4],r[i+4]=e[3],r[i+5]=e[2],r[i+6]=e[1],r[i+7]=e[0]}}();for(var d=new Array,y=0;y<1200;y++)d[y]=Math.pow(2,y);var g=new Array;for(y=0;y<1200;y++)g[y]=Math.pow(2,-y);function m(t){return t>=0?d[t]:g[-t]}var v=4294967296,b=2.220446049250313e-16;m(-1023);function w(t,e,r){var n,i,u=h(t,e,r),o=h(t,e+4,r);"bige"===r?(n=u,i=o):(n=o,i=u);var s=(1048575&n)*v+i,a=(2146435072&n)>>>20;return(n>>31||1)*(0===a?s?s*m(-1074):0:a<2047?s>=0?(1+s*b)*m(a-1023):0:s?NaN:1/0)}var E=Math.pow(2,-23),_=Math.pow(2,-127);function A(t,e,r){var n=h(t,e,r),i=8388607&n,u=(2139095040&n)>>>23;return(n>>31||1)*(0===u?i?i*E*2*_:0:u<255?(1+i*E)*m(u-127):i?NaN:1/0)}var B={exp:0,mant:0};function C(t){var e=0;return t>=2?(t*=m(-(e=D(1,t))))>=2&&(t/=2,e+=1):t<1&&((e=D(t,2))<=1023?t*=m(e):(t*=m(e-100),t*=m(100)),e=-e),B.exp=e,B.mant=t,B}var F=Math.pow(2,192);function D(t,e){for(var r=0;t*F<e;)t*=F,r+=192;for(;0x10000000000000000*t<e;)t*=0x10000000000000000,r+=64;for(;65536*t<e;)t*=65536,r+=16;for(;64*t<e;)t*=64,r+=6;for(;2*t<e;)t*=2,r+=1;return r}function x(t,e){return(t*=e)-Math.floor(t)!=.5||1&t?t+.5:t}function S(t,e,r,n){var i,u=0;e<0&&(u=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=127,i.exp<=0?i.exp<=-25?(i.mant=0,i.exp=0):(i.mant=x(i.mant,m(22+i.exp)),i.exp=0,i.mant>=8388608&&(i.mant-=8388608,i.exp+=1)):(i.mant=x(i.mant-1,8388608),i.mant>=8388608&&(i.mant-=8388608,i.exp+=1),i.exp>254&&(i.mant=0,i.exp=255)),l(t,u|i.exp<<23|i.mant,r,n)):l(t,0===e?1/e<0?2147483648:0:e===1/0?2139095040|u:2143289344,r,n)}new e(8);var T=Math.pow(2,52);function k(t,e,r,n){var i,u,o,s=0;e<0&&(s=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=1023,i.exp<=0?(i.mant*=m(51+i.exp),i.exp=0):i.mant=(i.mant-1)*T,p(t,u=s|i.exp<<20|i.mant/4294967296,o=i.mant>>>0,r,n)):(0===e?(u=1/e<0?2147483648:0,o=0):e===1/0?(u=s+2146435072,o=0):(u=2146959360,o=0),p(t,u,o,r,n))}(function e(){var d=t.exports||this;d.readWord=h,d.writeWord=l,d.writeDoubleWord=p,d.readFloat=A,d.writeFloat=S,d.readDouble=w,d.writeDouble=k,d._useFloatArray=function(t){d._usingFloatArray=t,t?("full"==t&&(d.readFloatLE=c?i:r),d.writeFloatLE=c?u:n,"full"==t&&(d.readFloatBE=c?r:i),d.writeFloatBE=c?n:u,d.readDoubleLE=c?a:o,d.writeDoubleLE=c?f:s,d.readDoubleBE=c?o:a,d.writeDoubleBE=c?s:f):(d._usingFloatArray="",d.readFloatLE=function(t,e){return d.readFloat(t,e||0,"le")},d.writeFloatLE=function(t,e,r){d.writeFloat(t,e,r||0,"le")},d.readFloatBE=function(t,e){return d.readFloat(t,e||0,"bige")},d.writeFloatBE=function(t,e,r){d.writeFloat(t,e,r||0,"bige")},d.readDoubleLE=function(t,e){return d.readDouble(t,e||0,"le")},d.writeDoubleLE=function(t,e,r){d.writeDouble(t,e,r||0,"le")},d.readDoubleBE=function(t,e){return d.readDouble(t,e||0,"bige")},d.writeDoubleBE=function(t,e,r){d.writeDouble(t,e,r||0,"bige")})},d._getBigeCpu=function(){return c},d._setBigeCpu=function(t){c=t},d._useFloatArray(!1),d._useFloatArray(r&&o&&"fastest"),e.prototype=d}).call(this)}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(18),u=r(185);t.exports={create:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.config,i=[];r.sort||(r.sort={});for(var a in t){var f=t[a],c=f.base,h=f.fields,l=void 0===f?"undefined":n(f);if("object"===l){if(!c&&!h){i.push("Expecting "+a+".fields or "+a+".base");continue}if(c&&"string"!=typeof c&&i.push("Expecting string "+a+".base"),h)if("object"!==(void 0===h?"undefined":n(h)))i.push("Expecting object "+a+".fields");else for(var p in h)"string"!=typeof h[p]&&i.push("Expecting string in "+a+".fields."+p)}else if("string"!==l){i.push("Expecting object or string under "+a+", instead got "+(void 0===f?"undefined":n(f)));continue}}var d={};for(var y in t){var g=t[y];"object"===(void 0===g?"undefined":n(g))&&(d[y]=u(y,r))}for(var m in t){var v=t[m];if("string"==typeof v){var b=e[v];if(b)e[m]=b;else{var w=C(m,v);w?d[m]=w:i.push("Unrecognized type or struct "+m+"."+v)}}}for(var E in t){var _=d[E];if(_){var A=t[E];if("object"===(void 0===A?"undefined":n(A))&&A.base){var c=A.base,B=d[c];if(!B){i.push("Missing "+c+" in "+E+".base");continue}_.add("",s(B))}}}function C(t,n,u,s){var a=o(n);if(!a)return null;var f=a.name,c=a.annotation,h=a.arrayType,l=void 0;if(c){var p=e[f];if(null==p)return i.push("Missing "+f+" in "+n),null;var y=[],g=!0,m=!1,v=void 0;try{for(var b,w=c[Symbol.iterator]();!(g=(b=w.next()).done);g=!0){var E=b.value,_=C(t,E,null,s);if(!_)return i.push("Missing "+E+" in "+n),null;y.push(_)}}catch(t){m=!0,v=t}finally{try{!g&&w.return&&w.return()}finally{if(m)throw v}}l=p(y)}else if(null==h){var A=d[f];if(A)return A;var B=e[f];if(!B)return null;l=B(u)}else if(""===h){var F=C(t,a.name,null,s);if(!F)return null;var D=r.sort[t+"."+s]||!1;l=e.vector(F,D)}else if(h.length>0){var x=C(t,a.arrayType,null,s);if(!x)return i.push("Missing "+a.arrayType+" in "+n),null;var S=C(t,a.name,x,s);if(!S)return i.push("Missing "+a.name+" in "+n),null;l=S}return a.optional?e.optional(l):l}for(var F in t){var D=d[F];if(D){var x=t[F];if(x.fields){var h=x.fields;for(var S in h){var T=h[S],k=C(F,T,null,S);k?D.add(S,k):i.push("Missing "+T+" in "+F+".fields."+S)}}}}if(i.length)return{errors:i};return{errors:i,structs:d}},toBuffer:function(t,r){var n=t.fromObject(r);return e.from(function(t,e){var r=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);return t.appendByteBuffer(r,e),r.copy(0,r.offset)}(t,n).toBinary(),"binary")},fromBuffer:function(t,e){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=i.fromBinary(e.toString("binary"),i.LITTLE_ENDIAN),u=t.fromByteBuffer(n);return r?t.toObject(u):u}};var o=function(t){if(!t||"string"!=typeof t)return null;var e=(t=t.trim()).match(/<(.*)>/);if(e){var r=e?e[1].replace(/ /g,"").split(","):null;return{name:t=t.replace(e[0],"").trim(),annotation:r}}var n=t.match(/\[(.*)\]/),i=n?n[1].trim():null;n&&(t=t.replace(n[0],"").trim());var u=!1;return/\?$/.test(t)&&(t=t.substring(0,t.length-1),u=!0),{name:t,arrayType:i,optional:u}},s=function(t){return{fromByteBuffer:function(e){return t.fromByteBuffer(e)},appendByteBuffer:function(e,r){t.appendByteBuffer(e,r)},fromObject:function(e){return t.fromObject(e)},toObject:function(e){return t.toObject(e)}}}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";var n=r(18);t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{debug:!1};e=Object.assign({override:{}},e);var r={},i=void 0,u=void 0;return{compare:function(t,e){var r=t[u],n=e[u];return i&&i.compare?i.compare(r,n):r>n?1:r<n?-1:0},add:function(t,e){r[t]=e,null==i&&(i=e,u=t)},fields:r,fromByteBuffer:function(n){var i={},u=null;try{for(u in r){var o=r[u];try{var s=n.offset;if(""===u)i=o.fromByteBuffer(n,e);else{var a=e.override[t+"."+u+".fromByteBuffer"];a?a({fields:r,object:i,b:n,config:e}):i[u]=o.fromByteBuffer(n,e)}if(e.debug)if(o.struct)console.error(o.struct);else{var f=void 0;try{f=o.toObject(""===u?i:i[u],e)}catch(t){f=""}var c=n.copy(s,n.offset);console.error("fromByteBuffer",t+"."+u,"'"+f+"'",c.toHex())}}catch(e){throw console.error(e+" in "+t+"."+u),n.printDebug(),e}}}catch(e){throw e.message+=" in "+t+"."+u,e}return i},appendByteBuffer:function(n,i){var u=null;try{for(u in r){var o=r[u];if(""===u)o.appendByteBuffer(n,i);else{var s=e.override[t+"."+u+".appendByteBuffer"];s?s({fields:r,object:i,b:n}):o.appendByteBuffer(n,i[u])}}}catch(e){try{e.message+=" "+t+"."+u+" = "+JSON.stringify(i[u])}catch(r){e.message+=" "+t+"."+u+" = "+i[u]}throw e}},fromObject:function(n){var i=e.override[t+".fromObject"];if(i){var u=i(n);if(null!=u)return u}var o={},s=null;try{for(s in r){var a=r[s];if(""===s){var f=a.fromObject(n);Object.assign(o,f)}else{var c=e.override[t+"."+s+".fromObject"];if(c)c({fields:r,object:n,result:o});else{var h=n[s],l=a.fromObject(h);o[s]=l}}}}catch(e){throw e.message+=" "+t+"."+s,e}return o},toObject:function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=e.override[t+".toObject"];if(u){var o=u(i);if(null!=o)return o}var s={},a=null;try{for(a in r){var f=r[a],c=e.override[t+"."+a+".toObject"];if(c)c({fields:r,object:i,result:s,config:e});else if(""===a){var h=f.toObject(i,e);Object.assign(s,h)}else{var l=f.toObject(i?i[a]:null,e);s[a]=l}if(e.debug)try{var p=new n(n.DEFAULT_CAPACITY,n.LITTLE_ENDIAN);if(null!=i){var d=i[a];if(d){var y=e.override[t+"."+a+".appendByteBuffer"];c&&y?y({fields:r,object:i,b:p}):f.appendByteBuffer(p,d)}}p=p.copy(0,p.offset),console.error("toObject",t+"."+a,"'"+s[a]+"'",p.toHex())}catch(e){e.message=t+"."+a+" "+e.message,console.error(e)}}}catch(e){throw e.message+=" "+t+"."+a,e}return s}}}},function(t,e,r){"use strict";t.exports={chain:r(187),history:r(188)}},function(t){t.exports={get_info:{brief:"Return general network information.",params:null,results:"string"},get_account:{brief:"Fetch a blockchain account",params:{account_name:"name"},results:"string"},get_code:{brief:"Fetch smart contract code",params:{account_name:"name",code_as_wasm:{type:"bool",default:!1}},results:{account_name:"name",wast:"string",wasm:"string",code_hash:"sha256",abi:"optional<abi_def>"}},get_code_hash:{brief:"",params:{account_name:"name"},results:{account_name:"name",code_hash:"sha256"}},get_abi:{params:{account_name:"name"},results:{account_name:"name",abi:"abi_def?"}},get_raw_code_and_abi:{params:{account_name:"name"},results:{account_name:"name",wasm:"bytes",abi:"abi_def?"}},abi_json_to_bin:{brief:"Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",params:{code:"name",action:"name",args:"bytes"},results:{binargs:"bytes"}},abi_bin_to_json:{brief:"Convert bin hex back into Abi json definition.",params:{code:"name",action:"name",binargs:"bytes"},results:{args:"bytes"}},get_required_keys:{params:{transaction:"transaction",available_keys:"set[public_key]"},results:"Set[public_key]"},get_block:{brief:"Fetch a block from the blockchain.",params:{block_num_or_id:"string"},results:"variant",errors:{"unknown block":null}},get_block_header_state:{brief:"Fetch the minimum state necessary to validate transaction headers.",params:{block_num_or_id:"string"},results:"string",errors:{block_id_type_exception:"Invalid block ID",unknown_block_exception:"Could not find reversible block"}},get_table_rows:{brief:"Fetch smart contract data from an account.",params:{json:{type:"bool",default:!1},code:"name",scope:"string",table:"name",table_key:"string",lower_bound:{type:"string",default:"0"},upper_bound:{type:"string",default:"-1"},limit:{type:"uint32",default:"10"},key_type:{type:"string",doc:"The key type of --index, primary only supports (i64), all others support (i64, i128, i256, float64, float128). Special type 'name' indicates an account name."},index_position:{type:"string",doc:"1 - primary (first), 2 - secondary index (in order defined by multi_index), 3 - third index, etc"}},results:{rows:{type:"vector",doc:"One row per item, either encoded as hex String or JSON object"},more:{type:"bool",doc:"True if last element in data is not the end and sizeof data() < limit"}}},get_currency_balance:{params:{code:"name",account:"name",symbol:"optional<string>"},results:"asset[]"},get_currency_stats:{params:{code:"name",symbol:"string"},results:{supply:"asset",max_supply:"asset",issuer:"account_name"}},get_producers:{brief:"Fetch smart contract data from producer.",params:{json:{type:"bool",default:!1},lower_bound:"string",limit:{type:"uint32",default:"50"}},results:{rows:{type:"vector",doc:"one row per item, either encoded as hex String or JSON object"},total_producer_vote_weight:{type:"double",doc:"total vote"},more:{type:"string",doc:"fill lower_bound with this value to fetch more rows"}}},get_producer_schedule:{brief:"",params:{},results:{vector:"proposed"}},get_scheduled_transactions:{brief:"",params:{json:{type:"bool",default:!1},lower_bound:{type:"string",doc:"timestamp OR transaction ID"},limit:{type:"uint32",default:"50"}},results:{vector:"transactions",more:{type:"string",doc:"fill lower_bound with this to fetch next set of transactions"}}},push_block:{brief:"Append a block to the chain database.",params:{block:"signed_block"},results:null},push_transaction:{brief:"Attempts to push the transaction into the pending queue.",params:{signed_transaction:"signed_transaction"},results:{transaction_id:"fixed_bytes32",processed:"bytes"}},push_transactions:{brief:"Attempts to push transactions into the pending queue.",params:{"signed_transaction[]":"signed_transaction"},results:"vector[push_transaction.results]"}}},function(t){t.exports={get_actions:{params:{account_name:"account_name",pos:{type:"int32?",doc:"An absolute sequence positon -1 is the end/last action"},offset:{type:"int32?",doc:"The number of actions relative to pos, negative numbers return [pos-offset,pos), positive numbers return [pos,pos+offset)"}},results:{actions:"ordered_action_result[]",last_irreversible_block:"uint32",time_limit_exceeded_error:"bool?"},structs:[{name:"ordered_action_result",fields:{global_action_seq:"uint64",account_action_seq:"int32",block_num:"uint32",block_time:"block_timestamp_type",action_trace:"variant"}}]},get_transaction:{brief:"Retrieve a transaction from the blockchain.",params:{id:"transaction_id_type",block_num_hint:{type:"uint32?",default:0,doc:"A non-zero block number allows shorter transaction IDs (8 hex, 4 bytes)"}},results:{id:"transaction_id_type",trx:"variant",block_time:"block_timestamp_type",block_num:"uint32",last_irreversible_block:"uint32",traces:"variant[]"}},get_key_accounts:{params:{public_key:"public_key_type"},results:{account_names:"account_name[]"}},get_controlled_accounts:{params:{controlling_account:"account_name"},results:{controlled_accounts:"account_name[]"}}}},function(t,e,r){"use strict";r(190);var n=r(192),i=r(199),u=r(97);function o(t,e,r,n){var i=n.logger;return function(){for(var o=arguments.length,s=Array(o),a=0;a<o;a++)s[a]=arguments[a];if(0!==s.length){var f=u(s,Object.keys(r.params||[]),t,function(t){if("boolean"==typeof t)return{broadcast:t}}),c=f.params,h=(f.options,f.returnPromise),l=f.callback,p=JSON.stringify(c);i.log&&i.log("api >","post","\t",e,p);var d={body:p,method:"POST"};return Object.assign(d,n.fetchConfiguration),fetch(e,d).then(function(t){return t.status>=200&&t.status<300?t.json():t.text().then(function(e){var r=new Error(e);throw r.status=t.status,r.statusText=t.statusText,r})}).then(function(t){i.log&&i.log("api <","response","\t",e,JSON.stringify(t));try{l(null,t)}catch(t){i.error&&i.error("api <","result callback",":",t)}}).catch(function(t){var r="";try{r=JSON.parse(t.message).error.details[0]}catch(t){}i.error&&(i.error("api <","error","\t",r,e,p),i.error(t));try{l(t)}catch(t){i.error&&i.error("api <","error callback",":",t)}}),h}console.log(function(t,e){var r="",n=function(t){r+=t+"\n"};n("USAGE"),n(t+" - "+e.brief),n("\nPARAMETERS"),e.params?n(JSON.stringify(e.params,null,2)):n("none");n("\nRETURNS"),e.results?n(""+JSON.stringify(e.results,null,2)):n("no data");if(n("\nERRORS"),e.errors)for(var i in e.errors){var u=e.errors[i];n(i+(u?" - "+u:""))}else n("nothing special");return r}(t,r))}}t.exports=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u={httpEndpoint:"http://127.0.0.1:8888",verbose:!1,logger:{log:function(){var t;return r.verbose?(t=console).log.apply(t,arguments):null},error:function(){var t;return r.verbose?(t=console).error.apply(t,arguments):null}}};function s(t,e){Object.keys(e).forEach(function(r){void 0===t[r]&&(t[r]=e[r])})}s(r,u),s(r.logger,u.logger);var a={},f=r.httpEndpoint;for(var c in e)for(var h in e[c]){var l=n(h),p=f+"/"+t+"/"+c+"/"+h;a[l]=o(l,p,e[c][h],r)}var d=function(t){a[t]=function(){for(var e,r=arguments.length,n=Array(r),u=0;u<r;u++)n[u]=arguments[u];return(e=i.api)[t].apply(e,[a].concat(n))}};for(var y in i.api)d(y);return a}},function(t,e,r){r(191),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",function(){return f}),r.d(e,"Request",function(){return g}),r.d(e,"Response",function(){return v}),r.d(e,"DOMException",function(){return w}),r.d(e,"fetch",function(){return E});var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],u=ArrayBuffer.isView||function(t){return t&&i.indexOf(Object.prototype.toString.call(t))>-1};function o(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function a(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n.iterable&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function c(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function l(t){var e=new FileReader,r=h(e);return e.readAsArrayBuffer(t),r}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||u(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?c(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(l)}),this.text=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,r=h(e);return e.readAsText(t),r}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=o(t),e=s(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},f.prototype.delete=function(t){delete this.map[o(t)]},f.prototype.get=function(t){return t=o(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(o(t))},f.prototype.set=function(t,e){this.map[o(t)]=s(e)},f.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},f.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),a(t)},f.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),a(t)},f.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),a(t)},n.iterable&&(f.prototype[Symbol.iterator]=f.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(t,e){var r=(e=e||{}).body;if(t instanceof g){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=function(t){var e=t.toUpperCase();return y.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function m(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),i=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(i))}}),e}function v(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},d.call(g.prototype),d.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];v.redirect=function(t,e){if(-1===b.indexOf(e))throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function E(t,e){return new Promise(function(r,i){var u=new g(t,e);if(u.signal&&u.signal.aborted)return i(new w("Aborted","AbortError"));var o=new XMLHttpRequest;function s(){o.abort()}o.onload=function(){var t={status:o.status,statusText:o.statusText,headers:function(t){var e=new f;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var i=r.join(":").trim();e.append(n,i)}}),e}(o.getAllResponseHeaders()||"")};t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL");var e="response"in o?o.response:o.responseText;r(new v(e,t))},o.onerror=function(){i(new TypeError("Network request failed"))},o.ontimeout=function(){i(new TypeError("Network request failed"))},o.onabort=function(){i(new w("Aborted","AbortError"))},o.open(u.method,u.url,!0),"include"===u.credentials?o.withCredentials=!0:"omit"===u.credentials&&(o.withCredentials=!1),"responseType"in o&&n.blob&&(o.responseType="blob"),u.headers.forEach(function(t,e){o.setRequestHeader(e,t)}),u.signal&&(u.signal.addEventListener("abort",s),o.onreadystatechange=function(){4===o.readyState&&u.signal.removeEventListener("abort",s)}),o.send(void 0===u._bodyInit?null:u._bodyInit)})}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=f,self.Request=g,self.Response=v)},function(t,e,r){var n=r(193),i=r(194);t.exports=function(t,e,r){var u=i(t,e);return r||(u=u.replace(/ (?=\d)/g,"_")),u.replace(/ (.)/g,function(t,r){return n(r,e)})}},function(t,e){var r={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{"i̇":"I","j̇":"J","į̇":"Į","i̇̀":"Ì","i̇́":"Í","i̇̃":"Ĩ"}}};t.exports=function(t,e){var n=r[e];return t=null==t?"":String(t),n&&(t=t.replace(n.regexp,function(t){return n.map[t]})),t.toUpperCase()}},function(t,e,r){var n=r(195),i=r(196),u=r(197),o=r(198);t.exports=function(t,e,r){if(null==t)return"";return r="string"!=typeof r?" ":r,t=String(t).replace(u,"$1 $2").replace(o,"$1 $2").replace(i,function(t,e,n){return 0===e||e===n.length-t.length?"":r}),n(t,e)}},function(t,e){var r={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"İ":"i",I:"ı","İ":"i"}},az:{regexp:/[\u0130]/g,map:{"İ":"i",I:"ı","İ":"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇","Į":"į̇","Ì":"i̇̀","Í":"i̇́","Ĩ":"i̇̃"}}};t.exports=function(t,e){var n=r[e];return t=null==t?"":String(t),n&&(t=t.replace(n.regexp,function(t){return n.map[t]})),t.toLowerCase()}},function(t,e){t.exports=/[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g},function(t,e){t.exports=/([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g},function(t,e){t.exports=/([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g},function(t,e,r){"use strict";t.exports={api:{createTransaction:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:60,r=arguments[2];if(!r)throw new TypeError("callback parameter is required");t.getInfo(n(r,function(i){var u=new Date(i.head_block_time+"Z");t.getBlock(i.last_irreversible_block_num,n(r,function(t){var n=new Date(u.getTime()+1e3*e),o=65535&i.last_irreversible_block_num,s={expiration:n.toISOString().split(".")[0],ref_block_num:o,ref_block_prefix:t.ref_block_prefix,max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]};r(null,s)}))}))}}};var n=function(t,e){return function(r,n){r?t(r):e(n)}}},function(t,e,r){t.exports={default:r(201),__esModule:!0}},function(t,e,r){r(46),r(36),t.exports=r(202)},function(t,e,r){var n=r(98),i=r(4)("iterator"),u=r(23);t.exports=r(8).isIterable=function(t){var e=Object(t);return void 0!==e[i]||"@@iterator"in e||u.hasOwnProperty(n(e))}},function(t,e,r){t.exports={default:r(204),__esModule:!0}},function(t,e,r){r(46),r(36),t.exports=r(205)},function(t,e,r){var n=r(21),i=r(206);t.exports=r(8).getIterator=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return n(e.call(t))}},function(t,e,r){var n=r(98),i=r(4)("iterator"),u=r(23);t.exports=r(8).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||u[n(t)]}},function(t){t.exports={name:"uint64",checksum160:"fixed_bytes20",checksum256:"fixed_bytes32",checksum512:"fixed_bytes64",signature:"fixed_bytes65",public_key:"fixed_bytes33",message_type:"fixed_string16",symbol:"uint64",symbol_code:"uint64",field_name:"string",account_name:"name",permission_name:"name",type_name:"string",token_name:"name",table_name:"name",scope_name:"name",action_name:"name",time_point:"int64",time_point_sec:"time",timestamp:"uint32",block_timestamp_type:"timestamp",block_id:"fixed_bytes32",checksum_type:"fixed_bytes32",checksum256_type:"fixed_bytes32",checksum512_type:"fixed_bytes64",checksum160_type:"fixed_bytes20",sha256:"fixed_bytes32",sha512:"fixed_bytes64",sha160:"fixed_bytes20",weight_type:"uint16",block_num_type:"uint32",share_type:"int64",digest_type:"checksum_type",context_free_type:"bytes",unsigned_int:"varuint32",bool:"uint8",extensions_type:{base:"",fields:{type:"uint16",data:"bytes"}},transaction_header:{base:"",fields:{expiration:"time",ref_block_num:"uint16",ref_block_prefix:"uint32",max_net_usage_words:"unsigned_int",max_cpu_usage_ms:"uint8",delay_sec:"unsigned_int"}},transaction:{base:"transaction_header",fields:{context_free_actions:"action[]",actions:"action[]",transaction_extensions:"extensions_type[]"}},signed_transaction:{base:"transaction",fields:{signatures:"signature[]",context_free_data:"bytes[]"}},fields:"field_def[]",field_def:{fields:{name:"field_name",type:"type_name"}},asset:{fields:{amount:"share_type",sym:"symbol"}},producer_key:{fields:{producer_name:"account_name",block_signing_key:"public_key"}},producer_schedule:{fields:{version:"uint32",producers:"producer_key[]"}},chain_config:{fields:{target_block_size:"uint32",max_block_size:"uint32",target_block_acts_per_scope:"uint32",max_block_acts_per_scope:"uint32",target_block_acts:"uint32",max_block_acts:"uint32",real_threads:"uint64",max_storage_size:"uint64",max_transaction_lifetime:"uint32",max_authority_depth:"uint16",max_transaction_exec_time:"uint32",max_inline_depth:"uint16",max_inline_action_size:"uint32",max_generated_transaction_size:"uint32"}},type_def:{base:"",fields:{new_type_name:"type_name",type:"type_name"}},struct_def:{base:"",fields:{name:"type_name",base:"type_name",fields:"field_def[]"}},clause_pair:{base:"",fields:{id:"string",body:"string"}},error_message:{base:"",fields:{error_code:"uint64",error_msg:"string"}},abi_def:{base:"",fields:{version:"string",types:"type_def[]",structs:"struct_def[]",actions:"action_def[]",tables:"table_def[]",ricardian_clauses:"clause_pair[]",error_messages:"error_message[]",abi_extensions:"extensions_type[]"}},table_def:{base:"",fields:{name:"table_name",index_type:"type_name",key_names:"field_name[]",key_types:"type_name[]",type:"type_name"}},permission_level:{base:"",fields:{actor:"account_name",permission:"permission_name"}},action:{base:"",fields:{account:"account_name",name:"action_name",authorization:"permission_level[]",data:"bytes"}},action_def:{base:"",fields:{name:"action_name",type:"type_name",ricardian_contract:"string"}},block_header:{base:"",fields:{previous:"checksum256",timestamp:"timestamp",transaction_mroot:"checksum256",action_mroot:"checksum256",block_mroot:"checksum256",producer:"account_name",schedule_version:"uint32",new_producers:"producer_schedule?"}},packed_transaction:{fields:{signatures:"signature[]",compression:"uint8",packed_context_free_data:"bytes",packed_trx:"bytes"}}}},function(t,e,r){"use strict";(function(e){var n=function(t){return t&&t.__esModule?t:{default:t}}(r(20));var i=r(3),u=r(59);t.exports=function(t,r){r.abiCache={abiAsync:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(i.equal(void 0===e?"undefined":(0,n.default)(e),"string","account string required"),0==r&&null!=s[e])return Promise.resolve(s[e]);if(null==t){var u=s[e];return i(u,"Missing ABI for account: "+e+", provide httpEndpoint or add to abiCache"),Promise.resolve(u)}return t.getAbi(e).then(function(t){return i(t.abi,"Missing ABI for account: "+e),a(e,t.abi)})},abi:a};var o=Object.assign({},{defaults:!0},r),s={};function a(t,r){if(i.equal(void 0===t?"undefined":(0,n.default)(t),"string","account string required"),r){i.equal(void 0===r?"undefined":(0,n.default)(r),"object","abi"),e.isBuffer(r)&&(r=JSON.parse(r));var a=function(t,e){var r={};t.types&&t.types.forEach(function(t){r[t.new_type_name]=t.type});t.structs&&t.structs.forEach(function(t){var e={},n=!0,i=!1,u=void 0;try{for(var o,s=t.fields[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value;e[a.name]=a.type}}catch(t){i=!0,u=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw u}}r[t.name]={base:t.base,fields:e},""===t.base&&delete r[t.name].base});t.actions&&t.actions.forEach(function(t){var n=r[t.type];n?n.action={name:t.name,account:e}:console.error("Missing abiSchema type",t.type,e)});return r}(r,t),f=u(o,a);return s[t]=Object.assign({abi:r,schema:a},f)}var c=s[t];if(null==c)throw new Error("Abi '"+t+"' is not cached");return c}return r.abiCache}}).call(this,r(2).Buffer)},function(t,e,r){"use strict";(function(e){var n=o(r(60)),i=o(r(61)),u=o(r(20));function o(t){return t&&t.__esModule?t:{default:t}}var s=r(3),a=r(50),f=r(58),c=r(57),h=r(96).processArgs;r(59);t.exports=function(t,r,o,m,v){if("string"!=typeof m.chainId)throw new TypeError("config.chainId is required");var b=function(t,r,o,m){var v=function(t,e){return function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];var a,f,c,h,l,d,y,g,m,v,w,A,B,C,F,D,x,S,T,k,M;return i.default.async(function(t){for(;;)switch(t.prev=t.next){case 0:if(a=void 0,f=void 0,c=void 0,null==r[r.length-1]&&(r=r.slice(0,r.length-1)),!(h=p(r[0]))){t.next=8;break}a=r[0],r=r.slice(1),t.next=39;break;case 8:if("string"!=typeof r[0]){t.next=13;break}a=[r[0]],r=r.slice(1),t.next=39;break;case 13:if("object"!==(0,u.default)(r[0])||!Array.isArray(r[0].actions)){t.next=39;break}for(l=new Set,d=!0,y=!1,g=void 0,t.prev=18,m=r[0].actions[Symbol.iterator]();!(d=(v=m.next()).done);d=!0)w=v.value,l.add(w.account);t.next=26;break;case 22:t.prev=22,t.t0=t.catch(18),y=!0,g=t.t0;case 26:t.prev=26,t.prev=27,!d&&m.return&&m.return();case 29:if(t.prev=29,!y){t.next=32;break}throw g;case 32:return t.finish(29);case 33:return t.finish(26);case 34:return A=[],B=new Set(["eosio","eosio.token","eosio.null"]),l.forEach(function(t){B.has(t)||A.push(o.abiCache.abiAsync(t))}),t.next=39,i.default.awrap(Promise.all(A));case 39:if(r.length>1&&"function"==typeof r[r.length-1]&&(c=r.pop()),r.length>1&&"object"===(0,u.default)(r[r.length-1])&&(f=r.pop()),s.equal(r.length,1,"transaction args: contracts<string|array>, transaction<callback|object>, [options], [callback]"),C=r[0],!a){t.next=67;break}for(s(!c,"callback with contracts are not supported"),s.equal("function",void 0===C?"undefined":(0,u.default)(C),"provide function callback following contracts array parameter"),F=[],D=!0,x=!1,S=void 0,t.prev=50,T=a[Symbol.iterator]();!(D=(k=T.next()).done);D=!0)M=k.value,F.push(b(M,e.transaction));t.next=58;break;case 54:t.prev=54,t.t1=t.catch(50),x=!0,S=t.t1;case 58:t.prev=58,t.prev=59,!D&&T.return&&T.return();case 61:if(t.prev=61,!x){t.next=64;break}throw S;case 64:return t.finish(61);case 65:return t.finish(58);case 66:return t.abrupt("return",Promise.all(F).then(function(t){var e={};t.forEach(function(t,r){e[a[r]]=t});var r=h?e:e[a[0]];return E(C,f,r)}));case 67:if("function"!=typeof C){t.next=69;break}return t.abrupt("return",E(C,f,e));case 69:if("object"!==(void 0===C?"undefined":(0,u.default)(C))){t.next=71;break}return t.abrupt("return",_(C,f,c));case 71:throw new Error("first transaction argument unrecognized",C);case 72:case"end":return t.stop()}},null,this,[[18,22,26,34],[27,,29,33],[50,54,58,66],[59,,61,65]])}};function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return o.abiCache.abiAsync(t).then(function(r){s(Array.isArray(r.abi.actions)&&r.abi.actions.length,"No actions");var n={};return n.transaction=e||v(r.structs,n),r.abi.actions.forEach(function(e){var i=e.name,u=e.type,o=g(r.schema,u);n[i]=w(u,o,n.transaction,t,i)}),n.fc=r,n})}function w(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"eosio.token",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:t;return function(){for(var f=arguments.length,c=Array(f),l=0;l<f;l++)c[l]=arguments[l];if(0!==c.length){var p={},y=c[c.length-1];"object"===(void 0===y?"undefined":(0,u.default)(y))&&"object"===(0,u.default)(y.__optionOverrides)&&Object.assign(p,c.pop().__optionOverrides);var m=h(c,Object.keys(e),t,d),v=m.options,b=m.params,w=m.returnPromise,E=m.callback,_={broadcast:o.broadcast,sign:o.sign};if(v=Object.assign({},_,v,p),p.noCallback&&!w)throw new Error("Callback during a transaction are not supported");var A=[],B=v.authorization?v.authorization:o.authorization,C=null==B;if(B){var F=void 0;"string"==typeof B?F=[B]:Array.isArray(B)&&(F=B),F&&F.forEach(function(t){if("string"==typeof t){var e=t.split("@"),r=(0,n.default)(e,2),i=r[0],o=r[1],s=void 0===o?"active":o;""===i&&(i=S()),i&&A.push({actor:i,permission:s})}else"object"===(void 0===t?"undefined":(0,u.default)(t))&&A.push(t)}),s.equal(A.length,F.length,"invalid authorization in: "+JSON.stringify(B))}var D={actions:[{account:i,name:a,authorization:A,data:b}]};if(C){var x=S();x&&D.actions[0].authorization.push({actor:x,permission:"active"})}return D.actions[0].authorization.sort(function(t,e){return t.actor>e.actor?1:t.actor<e.actor?-1:0}),p.messageOnly?E(null,D):r(D,v,E),w}function S(){var t=Object.keys(e),r=t[0];if("account_name"===e[r])return b[r]}console.log(function(t,e,r,n,i){var u="",o=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";u+=t+"\n"};o("CONTRACT"),o(n),o(),o("ACTION"),o(t.name),o();var s=i.abiCache.abi(n);o("PARAMETERS"),o(JSON.stringify(g(s.schema,t.type),null,4)),o();var a=s.structs[t.type];return o("EXAMPLE"),o(n+"."+t.name+"("+JSON.stringify(a.toObject(),null,4)+")"),u}({name:a,type:t},0,0,i,o))}}function E(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments[2];s.equal("function",void 0===t?"undefined":(0,u.default)(t),"trCallback"),s.equal("object",void 0===e?"undefined":(0,u.default)(e),"options"),s.equal("object",void 0===r?"undefined":(0,u.default)(r),"merges"),s(!Array.isArray(r),"merges should not be an array"),s.equal("function",(0,u.default)(_),"transaction");var i=[],o={},a=function(t){return function(){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];var u=t.apply(void 0,r.concat([{__optionOverrides:{broadcast:!1,messageOnly:!0,noCallback:!0}}]));if(null==u)throw new Error("Callbacks can not be used when creating a multi-action transaction");i.push(u)}};for(var f in r){var c=r[f],h=f.replace(/\./,"_");if("function"==typeof c)o[h]=a(c);else if("object"===(void 0===c?"undefined":(0,u.default)(c)))for(var l in null==o[h]&&(o[h]={}),c)"transaction"!==l&&(o[h][l]=a(c[l]))}var p=void 0;try{p=t(o)}catch(t){p=Promise.reject(t)}return Promise.resolve(p).then(function(){return Promise.all(i).then(function(t){var r=[],i=!0,u=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value,c=(0,n.default)(f.actions,1),h=c[0];r.push(h)}}catch(t){u=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(u)throw o}}var l={};return l.actions=r,_(l,e)})})}function _(t,n,h){var p,d,g,v,b,w,E,_,A,B,C,F,D,x,S,T;return i.default.async(function(k){for(;;)switch(k.prev=k.next){case 0:if(p=o.expireInSeconds?o.expireInSeconds:60,d={expireInSeconds:p,broadcast:!0,sign:!0},n=Object.assign({},d,n),g=void 0,"function"!=typeof h&&(g=new Promise(function(t,e){h=function(r,n){r?e(r):t(n)}})),"object"===(void 0===t?"undefined":(0,u.default)(t))){k.next=7;break}throw new TypeError("First transaction argument should be an object or function");case 7:if(Array.isArray(t.actions)){k.next=9;break}throw new TypeError("Expecting actions array");case 9:if((o.logger.log||o.logger.error)&&(v=h,h=function(t,e){t&&o.logger.error&&o.logger.error(t),o.logger.log&&o.logger.log(JSON.stringify(e)),v(t,e)}),t.actions.forEach(function(t){if(!Array.isArray(t.authorization))throw new TypeError("Expecting action.authorization array",t)}),!n.sign||"function"==typeof o.signProvider){k.next=13;break}throw new TypeError("Expecting config.signProvider function (disable using {sign: false})");case 13:if(b={max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]},!o.transactionHeaders){k.next=25;break}if("object"!==(0,u.default)(o.transactionHeaders)){k.next=19;break}Object.assign(b,o.transactionHeaders),k.next=25;break;case 19:if("function"!=typeof o.transactionHeaders){k.next=24;break}return k.next=22,i.default.awrap(o.transactionHeaders(n.expireInSeconds,y(h,o.logger,function(t){return i.default.async(function(e){for(;;)switch(e.prev=e.next){case 0:s.equal(void 0===t?"undefined":(0,u.default)(t),"object","expecting transaction header object"),Object.assign(b,t);case 2:case"end":return e.stop()}},null,this)})));case 22:k.next=25;break;case 24:s(!1,"config.transactionHeaders should be an object or function");case 25:for(w=["expiration","ref_block_num","ref_block_prefix","delay_sec","max_net_usage_words","max_cpu_usage_ms"],E=0;E<w.length;E++)_=w[E],void 0!==t[_]?b[_]=t[_]:void 0!==n[_]&&(b[_]=n[_]);if(void 0!==b.expiration&&void 0!==b.ref_block_num&&void 0!==b.ref_block_prefix){k.next=31;break}return s(r,"Network is required, provide httpEndpoint or own transaction headers"),k.next=31,i.default.awrap(new Promise(function(t){r.createTransaction(n.expireInSeconds,y(h,o.logger,function(e){var r,n,u;return i.default.async(function(i){for(;;)switch(i.prev=i.next){case 0:for(r=["expiration","ref_block_num","ref_block_prefix"],n=0;n<r.length;n++)u=r[n],void 0===b[u]&&(b[u]=e[u]);t();case 3:case"end":return i.stop()}},null,this)}))}));case 31:return s.equal((0,u.default)(b.expiration),"string","expecting expiration: iso date time string"),s.equal((0,u.default)(b.ref_block_num),"number","expecting ref_block_num number"),s.equal((0,u.default)(b.ref_block_prefix),"number","expecting ref_block_prefix number"),b.context_free_actions=t.context_free_actions,b.actions=t.actions,b.transaction_extensions=t.transaction_extensions,A=m.fromObject(b),B=f.toBuffer(m,A),C=m.toObject(A),F=c("sha256").update(B).digest().toString("hex"),D=[],n.sign&&(x=e.from(o.chainId,"hex"),S=e.from(new Uint8Array(32)),T=e.concat([x,B,S]),D=o.signProvider({transaction:C,buf:T,sign:l,optionsKeyProvider:n.keyProvider}),Array.isArray(D)||(D=[D])),Promise.all(D).then(function(t){t=[].concat.apply([],t);for(var e=0;e<t.length;e++){var i=t[e];"string"==typeof i&&130===i.length&&(t[e]=a.Signature.from(i).toString())}var u={compression:"none",transaction:C,signatures:t},f=o.mockTransactions?o.mockTransactions():null;if(null==f)n.broadcast&&r?r.pushTransaction(u,function(t,e){t?(o.logger.error&&o.logger.error("[push_transaction error] '"+t.message+"', transaction '"+B.toString("hex")+"'"),h(t.message)):h(null,Object.assign({broadcast:!0,transaction:u,transaction_id:F},e))}):h(null,{transaction_id:F,broadcast:!1,transaction:u});else if(s(/pass|fail/.test(f),"mockTransactions should return a string: pass or fail"),"pass"===f&&h(null,{transaction_id:F,mockTransaction:!0,broadcast:!1,transaction:u}),"fail"===f){var c="[push_transaction mock error] 'fake error', digest '"+B.toString("hex")+"'";o.logger.error&&o.logger.error(c),h(c)}}).catch(function(t){o.logger.error&&o.logger.error(t),h(t)}),k.abrupt("return",g);case 45:case"end":return k.stop()}},null,this)}return{genTransaction:v,genContractActions:b,genMethod:w}}(0,r,m,o.transaction),w=new Set(["transaction","contract"]),E={};E.transaction=b.genTransaction(o,E);var _=!0,A=!1,B=void 0;try{for(var C,F=v[Symbol.iterator]();!(_=(C=F.next()).done);_=!0){var D=C.value;for(var x in D.schema){var S=D.schema[x];if("string"!=typeof S){s.equal(void 0===S?"undefined":(0,u.default)(S),"object","abi.schema[type = "+x+"]");var T=S.action;if(void 0!==T){if(w.has(T.name))throw new TypeError("Conflicting Api function: "+x);var k=g(D.schema,x);E[T.name]=b.genMethod(x,k,E.transaction,T.account,T.name)}}}}}catch(t){A=!0,B=t}finally{try{!_&&F.return&&F.return()}finally{if(A)throw B}}return E.contract=function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];var n=h(e,["account"],"contract",d),i=n.params,u=(n.options,n.returnPromise),o=n.callback,s=i.account;return b.genContractActions(s).then(function(t){o(null,t)}).catch(function(t){o(t)}),u},E};var l=a.sign;var p=function(t){return Array.isArray(t)&&t.length>0&&-1===t.findIndex(function(t){return"string"!=typeof t})},d=function(t){return"object"===(void 0===t?"undefined":(0,u.default)(t))?t:"boolean"==typeof t?{broadcast:t}:void 0};var y=function(t,e,r){return function(n,i){n?(e.error&&e.error("error",n),t(n)):Promise.resolve(r(i)).catch(function(e){t(e)})}};function g(t,e){var r=t[e],n=r.base,i=r.fields,u={};return n&&""!==n&&Object.assign(u,g(t,n)),Object.assign(u,i),u}}).call(this,r(2).Buffer)},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"}],structs:[{name:"transfer",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"create",base:"",fields:[{name:"issuer",type:"account_name"},{name:"maximum_supply",type:"asset"}]},{name:"issue",base:"",fields:[{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"account",base:"",fields:[{name:"balance",type:"asset"}]},{name:"currency_stats",base:"",fields:[{name:"supply",type:"asset"},{name:"max_supply",type:"asset"},{name:"issuer",type:"account_name"}]}],actions:[{name:"transfer",type:"transfer",ricardian_contract:""},{name:"issue",type:"issue",ricardian_contract:""},{name:"create",type:"create",ricardian_contract:""}],tables:[{name:"accounts",type:"account",index_type:"i64",key_names:["currency"],key_types:["uint64"]},{name:"stat",type:"currency_stats",index_type:"i64",key_names:["currency"],key_types:["uint64"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"},{new_type_name:"permission_name",type:"name"},{new_type_name:"action_name",type:"name"},{new_type_name:"transaction_id_type",type:"checksum256"},{new_type_name:"weight_type",type:"uint16"}],____comment:"eosio.bios structs: set_account_limits, setpriv, set_global_limits, producer_key, set_producers, require_auth are provided so abi available for deserialization in future.",structs:[{name:"permission_level",base:"",fields:[{name:"actor",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"key_weight",base:"",fields:[{name:"key",type:"public_key"},{name:"weight",type:"weight_type"}]},{name:"bidname",base:"",fields:[{name:"bidder",type:"account_name"},{name:"newname",type:"account_name"},{name:"bid",type:"asset"}]},{name:"permission_level_weight",base:"",fields:[{name:"permission",type:"permission_level"},{name:"weight",type:"weight_type"}]},{name:"wait_weight",base:"",fields:[{name:"wait_sec",type:"uint32"},{name:"weight",type:"weight_type"}]},{name:"authority",base:"",fields:[{name:"threshold",type:"uint32"},{name:"keys",type:"key_weight[]"},{name:"accounts",type:"permission_level_weight[]"},{name:"waits",type:"wait_weight[]"}]},{name:"newaccount",base:"",fields:[{name:"creator",type:"account_name"},{name:"name",type:"account_name"},{name:"owner",type:"authority"},{name:"active",type:"authority"}]},{name:"setcode",base:"",fields:[{name:"account",type:"account_name"},{name:"vmtype",type:"uint8"},{name:"vmversion",type:"uint8"},{name:"code",type:"bytes"}]},{name:"setabi",base:"",fields:[{name:"account",type:"account_name"},{name:"abi",type:"bytes"}]},{name:"updateauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"},{name:"parent",type:"permission_name"},{name:"auth",type:"authority"}]},{name:"deleteauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"linkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"},{name:"requirement",type:"permission_name"}]},{name:"unlinkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"}]},{name:"canceldelay",base:"",fields:[{name:"canceling_auth",type:"permission_level"},{name:"trx_id",type:"transaction_id_type"}]},{name:"onerror",base:"",fields:[{name:"sender_id",type:"uint128"},{name:"sent_trx",type:"bytes"}]},{name:"buyrambytes",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"bytes",type:"uint32"}]},{name:"sellram",base:"",fields:[{name:"account",type:"account_name"},{name:"bytes",type:"uint64"}]},{name:"buyram",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"quant",type:"asset"}]},{name:"delegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"stake_net_quantity",type:"asset"},{name:"stake_cpu_quantity",type:"asset"},{name:"transfer",type:"bool"}]},{name:"undelegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"unstake_net_quantity",type:"asset"},{name:"unstake_cpu_quantity",type:"asset"}]},{name:"refund",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"delegated_bandwidth",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"}]},{name:"user_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"total_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"refund_request",base:"",fields:[{name:"owner",type:"account_name"},{name:"request_time",type:"time_point_sec"},{name:"net_amount",type:"asset"},{name:"cpu_amount",type:"asset"}]},{name:"blockchain_parameters",base:"",fields:[{name:"max_block_net_usage",type:"uint64"},{name:"target_block_net_usage_pct",type:"uint32"},{name:"max_transaction_net_usage",type:"uint32"},{name:"base_per_transaction_net_usage",type:"uint32"},{name:"net_usage_leeway",type:"uint32"},{name:"context_free_discount_net_usage_num",type:"uint32"},{name:"context_free_discount_net_usage_den",type:"uint32"},{name:"max_block_cpu_usage",type:"uint32"},{name:"target_block_cpu_usage_pct",type:"uint32"},{name:"max_transaction_cpu_usage",type:"uint32"},{name:"min_transaction_cpu_usage",type:"uint32"},{name:"max_transaction_lifetime",type:"uint32"},{name:"deferred_trx_expiration_window",type:"uint32"},{name:"max_transaction_delay",type:"uint32"},{name:"max_inline_action_size",type:"uint32"},{name:"max_inline_action_depth",type:"uint16"},{name:"max_authority_depth",type:"uint16"}]},{name:"eosio_global_state",base:"blockchain_parameters",fields:[{name:"max_ram_size",type:"uint64"},{name:"total_ram_bytes_reserved",type:"uint64"},{name:"total_ram_stake",type:"int64"},{name:"last_producer_schedule_update",type:"block_timestamp_type"},{name:"last_pervote_bucket_fill",type:"uint64"},{name:"pervote_bucket",type:"int64"},{name:"perblock_bucket",type:"int64"},{name:"total_unpaid_blocks",type:"uint32"},{name:"total_activated_stake",type:"int64"},{name:"thresh_activated_stake_time",type:"uint64"},{name:"last_producer_schedule_size",type:"uint16"},{name:"total_producer_vote_weight",type:"float64"},{name:"last_name_close",type:"block_timestamp_type"}]},{name:"producer_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"total_votes",type:"float64"},{name:"producer_key",type:"public_key"},{name:"is_active",type:"bool"},{name:"url",type:"string"},{name:"unpaid_blocks",type:"uint32"},{name:"last_claim_time",type:"uint64"},{name:"location",type:"uint16"}]},{name:"regproducer",base:"",fields:[{name:"producer",type:"account_name"},{name:"producer_key",type:"public_key"},{name:"url",type:"string"},{name:"location",type:"uint16"}]},{name:"unregprod",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"setram",base:"",fields:[{name:"max_ram_size",type:"uint64"}]},{name:"regproxy",base:"",fields:[{name:"proxy",type:"account_name"},{name:"isproxy",type:"bool"}]},{name:"voteproducer",base:"",fields:[{name:"voter",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"}]},{name:"voter_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"},{name:"staked",type:"int64"},{name:"last_vote_weight",type:"float64"},{name:"proxied_vote_weight",type:"float64"},{name:"is_proxy",type:"bool"}]},{name:"claimrewards",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"setpriv",base:"",fields:[{name:"account",type:"account_name"},{name:"is_priv",type:"int8"}]},{name:"rmvproducer",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"set_account_limits",base:"",fields:[{name:"account",type:"account_name"},{name:"ram_bytes",type:"int64"},{name:"net_weight",type:"int64"},{name:"cpu_weight",type:"int64"}]},{name:"set_global_limits",base:"",fields:[{name:"cpu_usec_per_period",type:"int64"}]},{name:"producer_key",base:"",fields:[{name:"producer_name",type:"account_name"},{name:"block_signing_key",type:"public_key"}]},{name:"set_producers",base:"",fields:[{name:"schedule",type:"producer_key[]"}]},{name:"require_auth",base:"",fields:[{name:"from",type:"account_name"}]},{name:"setparams",base:"",fields:[{name:"params",type:"blockchain_parameters"}]},{name:"connector",base:"",fields:[{name:"balance",type:"asset"},{name:"weight",type:"float64"}]},{name:"exchange_state",base:"",fields:[{name:"supply",type:"asset"},{name:"base",type:"connector"},{name:"quote",type:"connector"}]},{name:"namebid_info",base:"",fields:[{name:"newname",type:"account_name"},{name:"high_bidder",type:"account_name"},{name:"high_bid",type:"int64"},{name:"last_bid_time",type:"uint64"}]}],actions:[{name:"newaccount",type:"newaccount",ricardian_contract:""},{name:"setcode",type:"setcode",ricardian_contract:""},{name:"setabi",type:"setabi",ricardian_contract:""},{name:"updateauth",type:"updateauth",ricardian_contract:""},{name:"deleteauth",type:"deleteauth",ricardian_contract:""},{name:"linkauth",type:"linkauth",ricardian_contract:""},{name:"unlinkauth",type:"unlinkauth",ricardian_contract:""},{name:"canceldelay",type:"canceldelay",ricardian_contract:""},{name:"onerror",type:"onerror",ricardian_contract:""},{name:"buyrambytes",type:"buyrambytes",ricardian_contract:""},{name:"buyram",type:"buyram",ricardian_contract:""},{name:"sellram",type:"sellram",ricardian_contract:""},{name:"delegatebw",type:"delegatebw",ricardian_contract:""},{name:"undelegatebw",type:"undelegatebw",ricardian_contract:""},{name:"refund",type:"refund",ricardian_contract:""},{name:"regproducer",type:"regproducer",ricardian_contract:""},{name:"setram",type:"setram",ricardian_contract:""},{name:"bidname",type:"bidname",ricardian_contract:""},{name:"unregprod",type:"unregprod",ricardian_contract:""},{name:"regproxy",type:"regproxy",ricardian_contract:""},{name:"voteproducer",type:"voteproducer",ricardian_contract:""},{name:"claimrewards",type:"claimrewards",ricardian_contract:""},{name:"setpriv",type:"setpriv",ricardian_contract:""},{name:"rmvproducer",type:"rmvproducer",ricardian_contract:""},{name:"setalimits",type:"set_account_limits",ricardian_contract:""},{name:"setglimits",type:"set_global_limits",ricardian_contract:""},{name:"setprods",type:"set_producers",ricardian_contract:""},{name:"reqauth",type:"require_auth",ricardian_contract:""},{name:"setparams",type:"setparams",ricardian_contract:""}],tables:[{name:"producers",type:"producer_info",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"global",type:"eosio_global_state",index_type:"i64",key_names:[],key_types:[]},{name:"voters",type:"voter_info",index_type:"i64",key_names:["owner"],key_types:["account_name"]},{name:"userres",type:"user_resources",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"delband",type:"delegated_bandwidth",index_type:"i64",key_names:["to"],key_types:["uint64"]},{name:"rammarket",type:"exchange_state",index_type:"i64",key_names:["supply"],key_types:["uint64"]},{name:"refunds",type:"refund_request",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"namebids",type:"namebid_info",index_type:"i64",key_names:["newname"],key_types:["account_name"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[],structs:[{name:"nonce",base:"",fields:[{name:"value",type:"string"}]}],actions:[{name:"nonce",type:"nonce",ricardian_contract:""}],tables:[],ricardian_clauses:[],abi_extensions:[]}},function(t,e,r){"use strict";t.exports={scatter:{blockchain:"eos",host:"nodes.get-scatter.com",port:443,chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",protocol:"https",httpEndpoint:"https://nodes.get-scatter.com:443"},eosasia:{blockchain:"eos",host:"api1.eosasia.one",port:443,chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",protocol:"https",httpEndpoint:"https://api1.eosasia.one:443"},dev:{blockchain:"eos",host:"dev.toneos.pro",port:7777,chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",protocol:"http",httpEndpoint:"http://dev.toneos.pro:7777"}}},function(t,e,r){const n=r(35),i=r(215),u=r(216),{forMs:o}=r(102),s={ERR_GET_SCATTER_FAILED:"ERR_GET_SCATTER_FAILED",ERR_GET_IDENTITY_FAILED:"ERR_GET_IDENTITY_FAILED"};t.exports=class extends u{constructor(t){super(),this.events.enableEvents(s),this._networks=t,this._db=new i({network_name:"dev",lang:"ch"}),console.log(`eosplayer created: \n${this.netName} \n${JSON.stringify(this.netConf)}`)}get storage(){return this._db}switchNetwork(t){t in this._networks?(this.storage.set("network_name",t),this._eosClient=null,console.log(`network changed to ${this.netName}.`)):console.log(`network ${t} cannot find.`)}setNetConf(t,e){this._networks[t]=e}get netName(){return this.storage.get("network_name")}get netConf(){return this._networks[this.netName]}get scatter(){let t=window.scatter;if(!t){let t=new Error("scatter cannot found");this.events.emitEvent(s.ERR_GET_SCATTER_FAILED,t)}return t}async getScatterAsync(t=100){let e=window.scatter;for(;!e;)await o(100),e=window.scatter;return e}async login(){return await this.getIdentity()}async logout(){return await(await this.getScatterAsync()).forgetIdentity(this.netName)}get eosClient(){return this._eosClient||(this._eosClient=this.scatter.eos(this.netConf,n,{},this.netConf.protocol)),this._eosClient}async getIdentity(){let t=this.storage.get("latest_chain_id");return t&&this.netConf.chainId!==t&&(console.log(`a changing of chain_id detected: ${t} -> ${this.netConf.chainId} `),await this.logout(),console.log(`log out from ${t}`)),await(await this.getScatterAsync()).getIdentity({accounts:[this.netConf]}).catch(t=>{throw this.events.emitEvent(s.ERR_GET_IDENTITY_FAILED,t),t}),this.storage.set("latest_chain_id",this.netConf.chainId),(await this.getScatterAsync()).identity.accounts.find(t=>"eos"===t.blockchain)}get help(){return super.help+"\n  \n## Usage of eosplayer (for broswer)\n  \n### Events\n\nERR_GET_SCATTER_FAILED  \nERR_GET_IDENTITY_FAILED  \n\n### APIs\n\n```js\n{void} eosplayer.switchNetwork(val) // switch network\n{void} eosplayer.setNetConf(network_name, conf) // add a network config at runtime    \n\nget {Scatter} eosplayer.scatter // get scatter instance\nget {Scatter} async getScatterAsync(maxTry = 100) // get scatter instance\n\nget {string} eosplayer.netName // get current network name\nget {string} eosplayer.netConf // get current network config\n        \nasync {Identity} eosplayer.login() // let user allow you using identity\nasync {void} eosplayer.logout() // return back the identity\n```\n\n## Imported libs\n\n```js\nwindow.eosjs = Eos; /** the eosjs lib @see {@url https://www.npmjs.com/package/eosjs} */  \nwindow.env = env; /** {isPc} */  \nwindow.idb = idb; /** idb lib for browser storage @see {@url https://www.npmjs.com/package/idb } */  \nwindow.eosplayer = new ScatterPlayer(networks);  \nwindow.BigNumber = BigNumber; /** big number @see {@url https://www.npmjs.com/package/bignumber.js} */\n```        \n"}}},function(t,e){"using strict";t.exports=class{constructor(t){this._defualts=t}get(t){let e=`eosplayer::${t}`,r=localStorage.getItem(e);if(r)return r;if(t in this._defualts){let e=this._defualts[t];return this.set(t,e),e}}set(t,e){let r=`eosplayer::${t}`;localStorage.setItem(r,e)}}},function(t,e,r){const n=r(217),i={ERR_TRANSFER_FAILED:"ERR_TRANSFER_FAILED",ERR_TRANSCAL_FAILED:"ERR_TRANSCAL_FAILED",ERR_TRANSEND_FAILED:"ERR_TRANSEND_FAILED"},u=r(218),o=r(219),s=r(220),a=r(221);t.exports=class extends a{constructor(){super(),this.events.enableEvents(i)}get events(){return this._events||(this._events=new u)}get chain(){return new o(this.eosClient)}get kh(){return new s(this.chain)}async getAccountInfo(t){return await this.chain.getAccountInfo(t||(await this.getIdentity()).name)}async getBalance(t,e="eosio.token"){return this.chain.getBalance(t||(await this.getIdentity()).name,e)}async getBalanceAsset(t,e="eosio.token"){let r=await this.getBalance(t,e);return n.parse(r)}async transfer(t,e,r=""){return await this.chain.transfer(await this.getIdentity(),t,e,r,t=>this.events.emitEvent(i.ERR_TRANSCAL_FAILED,t))}async transcal(t,e,r,...n){return await this.kh.transcal(await this.getIdentity(),t,e,r,n,t=>this.events.emitEvent(i.ERR_TRANSCAL_FAILED,t))}async transget(t,e,r,...n){return await this.transend(t,e,r,...n)}async transend(t,e,r,...n){return await this.kh.transend(await this.getIdentity(),t,e,r,n,t=>this.events.emitEvent(i.ERR_TRANSEND_FAILED,t))}async call(t,e,r){const n=await this.getIdentity();let i=await this.chain.call(t,e,r,{actor:n.name,permission:n.authority});return i&&console.log(`Transaction ID: ${i.transaction_id}`),i}async waitTx(t,e=12,r=1009){return await this.chain.waitTx(t,e,r)}async checkTable(t,e,r,n=10,i=0,u=-1,o=1){return await this.chain.checkTable(t,e,r,n,i,u,o)}async checkTableRange(t,e,r,n,i=1,u=1){return await this.chain.checkTableRange(t,e,r,n,i,u)}async checkTableItem(t,e,r,n=0,i=1){return await this.chain.checkTableItem(t,e,r,n,i)}async newAccount(t,e){return await this.eosClient.newaccount({creator:(await this.getIdentity()).name,name:t,owner:{threshold:1,keys:[{key:e,weight:1}],accounts:[],waits:[]},active:{threshold:1,keys:[{key:e,weight:1}],accounts:[],waits:[]}})}get version(){return"0.3.0"}get help(){return`\n\`\`\`js\n      =============================================================\n        \n               -----      ------        ------      -------\n              -----     -----          ------      -------\n             -----   -----            ------      -------\n            -----  -----             ------      -------\n           ----------                ----- ---- ------ \n          -----  -----              ----- ---- ------\n         -----    -----           ------      -------\n        -----      ------        ------      -------\n       ------       -------     ------      -------\n      --------      ---------  ------      -------\n        \n===========================================================\n\`\`\`\n---\n\n# eosplayer ${this.version}\n        \n## Usage of eosplayer\n\n### Events\n\n\`ERR_TRANSFER_FAILED\`\n\`ERR_TRANSCAL_FAILED\`\n\`ERR_TRANSEND_FAILED\`\n\n### APIs\n\n\`\`\`js\n{String} get help // get help info of usage\n{String} get version // get the version info\n{ChainHelper} get chain // get the chain helper\n{KhHelper} get kh // get the kh contract helper\n\n{Void} eosplayer.event.setEvent(event, fnCallback, context) //listen to a event\n\n{Eos} get eosplayer.eosClient // get eos instance\n{Identity} async eosplayer.getIdentity() // get identity\n\n{AccountInfo} async eosplayer.getAccountInfo(account_name = identity.name) \n    // get account info for any user\n\n{String} async eosplayer.getBalance(account_name = undefined, code = "eosio.token")  \n    // get balance string of a account. ex. "1.0000 EOS", null means that the account dosen't have any token,\n\n{String} async eosplayer.getBalanceAsset(account_name = undefined, code = "eosio.token") \n    // get balance structure of a account. ex. {val:1, sym:"EOS", decimal:4}\n\n{Tx} async eosplayer.transfer(target, quantity, memo = "")\n    // transfer tokens to target\n\n{Tx} async eosplayer.transcal(code, quantity, func, ...args) \n    // send a action of transcal to contract\n    \n{Tx} async eosplayer.transget(code, symbol, func, ...args) \n    // send a action of trancal (quantity value = 0.0001) to contract\n\n{Contract} async eosplayer.contract(code)\n    // get contract object\n\n{Tx} async eosplayer.call(code, func, jsonData)\n    // send a action to contract\n\`\`\`\n\n${this.chain.help}`}}},function(t,e,r){"use strict";class n{constructor(t,e,r=4){this._val=t,this._sym=e,this._decimal=r}get val(){return this._val}get sym(){return this._sym}get decimal(){return this._decimal}get valStr(){return this._val.toFixed(this.decimal)}toString(){return`${this.valStr} ${this.sym}`}static parse(t){if(!t||"string"!=typeof t)return null;let e=(t=t.trim()).indexOf(" ");if(e<0)return null;let r=t.slice(0,e),i=t.slice(1+e);if(!r||!i)return null;let u=t.indexOf("."),o=u<0?0:e-u-1,s=parseFloat(r);return new n(s,i,o)}}t.exports=n},function(t,e,r){"use strict";t.exports=class{constructor(t){this._defaultCb=function(...t){t.forEach(t=>{if(!alert)throw typeof t instanceof Error?t:new Error(strTrigger);alert(t)})},this._eventMap={},t&&(this.enableEvents(t),this._eventMap=Array.isArray(t)?{}:t)}enableEvents(t){let e=Array.isArray(t)?t:Object.keys(t);this._supportedEvents=(this._supportedEvents||[]).concat(e)}setEvent(t,e,r){if(!this._supportedEvents.find(e=>e===t))throw new Error(`event handler : event ${t} are not supported.`);this._eventMap[t]={cb:e,ctx:context}}emitEvent(t,...e){if(!this._supportedEvents.find(e=>e===t))throw new Error(`event handler : event ${t} are not found.`);let r=this._eventMap[t];return r?r.cb.call(r.ctx,...e):this._defaultCb.call(t,...e)}}},function(t,e,r){"use strict";const{forMs:n}=r(102),i=r(101).BigNumber;t.exports=class{constructor(t){this._eos=t}async getInfo(){return await this._eos.getInfo({})}async getBlock(t){let e={block_num_or_id:t};return await this._eos.getBlock(e)}async getContract(t){return await this._eos.contract(t)}async getAbi(t){return await this._eos.getAbi(t)}async getTableAbi(t,e){return(await this.getAbi(t)).abi.tables.find(t=>t.name===e)}async abiJsonToBin(t,e,r){let n={code:t,action:e,args:r};return(await this._eos.abiJsonToBin(n)).binargs}async getAccountInfo(t){return await this._eos.getAccount({account_name:t})}async getActionCount(t){let e=await this.getRecentActions(t);if(!e||!e.actions)throw new Error(`getActionCount failed: cannot find recent actions of ${t})`);let r=e.actions;return 0===r.length?0:r[r.length-1].account_action_seq}async getRecentActions(t){return await this._eos.getActions({account_name:t})}async getActions(t,e=0,r=0){let n=e,i=e+r,u=[];for(;;){let e=await this._eos.getActions({account_name:t,pos:n,offset:i-n});if(!e||!e.actions)throw new Error(`getActions failed: cannot find actions of ${t} (pos:${n}, offset:${r})`);let o=e.actions;console.log("getActions find",o[o.length-1]);let s=0===o.length?n:o[o.length-1].account_action_seq;if(s<=n)break;if(u.push(...o),s>=i)break;n=s+1}return u}async getBalance(t,e="eosio.token"){let r=await this._eos.getCurrencyBalance(e,t);return r[0]?r[0].trim():null}async transfer(t,e,r,n="",i){const u={authorization:[`${t.name}@${t.authority}`]};let o=await this._eos.transfer(t.name,e,r,n,u).catch(i||console.log);return o&&console.log(`Transaction ID: ${o.transaction_id}`),o}async waitTx(t,e=12,r=1009){const n=async(t,i=0)=>{try{const e=await this._eos.getTransaction(t);if(e)return e}catch(e){console.log(`wait tx ${t}, retry round: ${i}. ${e.message}`)}return i>=e?(console.error("wait tx failed, round out."),null):(await(t=>new Promise(e=>setTimeout(e,t)))(r),n(t,i+1))};return await n(t)}async call(t,e,r,...n){return await this._eos.transaction({actions:[{account:t,name:e,authorization:n,data:r}]})}async getTable(t,e,r,u,o,...s){u=i(u||0),o=i(o&&-1!==o?o:"18446744073709551615");let a=[],f=[];const c=(n,i)=>{if(console.log("search ",Date.now(),n.toFixed(0),i.toFixed(0)),n.gte(i))return;let u=this._eos.getTableRows({json:!0,code:t,scope:r,table:e,limit:-1,lower_bound:n.toFixed(0),upper_bound:i.toFixed(0)}).then(t=>{let e=f.findIndex(t=>t===u);if(f.splice(e,1),t)if(t.more){let t=i.minus(n).dividedBy(2).decimalPlaces(0).plus(n);c(n,t.minus(1)),c(t,i)}else t.rows&&a.push(...t.rows)}).catch(t=>{let e=f.find(t=>t===u);throw f.splice(e,1),t});f.push(u)};for(!s||s.length<=0?c(u,o):[...s.map(t=>i(t)),o].reduce((t,e)=>(c(t,e),e),u);f.length>0;)await n(50);return console.log("done search ",Date.now(),u.toFixed(0),o.toFixed(0)),a}async checkTable(t,e,r,n=10,u=0,o=-1,s=1){console.log("search ",Date.now(),u,o,n);let a=await this._eos.getTableRows({json:!0,code:t,scope:r,table:e,limit:n,lower_bound:u,upper_bound:o,index_position:s}),f=a&&a.rows?a.rows:[];if(a.more&&(n<=0||a.rows&&a.rows.length<n)){let u=(await this.getTableAbi(t,e)).key_names[0],a=f[f.length-1][u];return f.concat(await this.checkTable(t,e,r,n-f.length,i(a).plus(1).toFixed(0),o,s))}return f}async checkTableRange(t,e,r,n,i=1,u=1){if(i<0)throw new Error(`range error: length(${i}) must larger than 0 `);return await this.checkTable(t,e,r,i,n,"number"==typeof n?n+i:-1,u)}async checkTableItem(t,e,r,n=0){return(await this.checkTableRange(t,e,r,n,1))[0]}async updateAuth(t,e,r,n,i,u,o){return await this._eos.updateauth({account:t,permission:e,parent:r,auth:{threshold:n,keys:i,accounts:u,waits:o}})}get help(){return'\n### Chain API\n\n```js\n{Object} async getInfo() // get info of the chain connected\n{Object} async getBlock(blockNumOrId) // get specific block of the chain\n\n{Contract} async getContract(code) // get contract\n{Object} async getAbi(code) // get abi of contract\n{Object} async getTableAbi(code, tableName) // get table abi of contract\n{Object} async abiJsonToBin(code, action, args) \n\n{Object} async getAccountInfo(account_name) // get account info of any user\n\n{Number} async getActionCount(account_name) // get a account\'s action count\n{Array} async getRecentActions(account_name) // get recent actions\n{Array} async getActions(account_name, startPos = 0, offset = 0) // get all actions of an account\n\n{String} async getBalance(account_name, code = "eosio.token") // get balance of specific account\n{Tx} async transfer(account, target, quantity, memo = "", cbError) // transfer\n\n{Tx} async waitTx(txID, maxRound = 12, timeSpanMS = 1009) // check a transaction info, retry once per sec until success\n\n{Tx} async call(code, func, jsonData, ...authorization) // send action to a contract\n\n{Array} async getTable(code, tableName, scope, lower, upper, ...hint) // get all items in a table\n{Array} async checkTable(code, tableName, scope, limit = 10, lower_bound = 0, upper_bound = -1, index_position = 1) // check a table\n{Array} async checkTableRange(code, tableName, scope, from, length = 1, index_position = 1) // check range in table\n{Object} async checkTableItem(code, tableName, scope, key = 0) // check a item in a table\n\n{Object} async updateAuth(account, permission, parent, threshold, keys, accounts, waits) // update auth\n```   \n'}}},function(t,e,r){"use strict"},function(t,e,r){"use strict";r(35);const n=Symbol("sym::EosClient"),i=Symbol("sym::GetIdentity");t.exports=class{get eosClient(){if(this[n])return n();throw new Error("method not yet implemented: this interface should be implement by the specific class.")}async getIdentity(){if(this[i])return i();throw new Error("method not yet implemented: this interface should be implement by the specific class.")}initFromConf(t,e){if(t){let e=Eos(t);this[n]=(()=>e)}e&&(this[i]=e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
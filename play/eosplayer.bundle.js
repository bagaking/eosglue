!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,e){if(!w[t]||!b[t])return;for(var n in b[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(d[n]=e[n]);0==--g&&0===m&&B()}(t,n),e&&e(t,n)};var n,r=!0,i="6e117280f7ee2a7fc6c6",o=1e4,u={},s=[],a=[];function f(t){var e=F[t];if(!e)return x;var r=function(r){return e.hot.active?(F[r]?-1===F[r].parents.indexOf(t)&&F[r].parents.push(t):(s=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),s=[]),x(r)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return x[t]},set:function(e){x[t]=e}}};for(var o in x)Object.prototype.hasOwnProperty.call(x,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(t){return"ready"===h&&l("prepare"),m++,x.e(t).then(e,function(t){throw e(),t});function e(){m--,"prepare"===h&&(v[t]||A(t),0===m&&0===g&&B())}},r.t=function(t,e){return 1&e&&(t=r(t)),x.t(t,-2&e)},r}var c=[],h="idle";function l(t){h=t;for(var e=0;e<c.length;e++)c[e].call(null,t)}var p,d,y,g=0,m=0,v={},b={},w={};function _(t){return+t+""===t?+t:t}function E(t){if("idle"!==h)throw new Error("check() is only allowed in idle status");return r=t,l("check"),function(t){return t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=x.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void n(t)}e(t)}}})}(o).then(function(t){if(!t)return l("idle"),null;b={},v={},w=t.c,y=t.h,l("prepare");var e=new Promise(function(t,e){p={resolve:t,reject:e}});d={};return A(0),"prepare"===h&&0===m&&0===g&&B(),e})}function A(t){w[t]?(b[t]=!0,g++,function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=x.p+""+t+"."+i+".hot-update.js",e.appendChild(n)}(t)):v[t]=!0}function B(){l("ready");var t=p;if(p=null,t)if(r)Promise.resolve().then(function(){return C(r)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in d)Object.prototype.hasOwnProperty.call(d,n)&&e.push(_(n));t.resolve(e)}}function C(e){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var n,r,o,a,f;function c(t){for(var e=[t],n={},r=e.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var i=r.pop(),o=i.id,u=i.chain;if((a=F[o])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:u,moduleId:o};if(a.hot._main)return{type:"unaccepted",chain:u,moduleId:o};for(var s=0;s<a.parents.length;s++){var f=a.parents[s],c=F[f];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:u.concat([f]),moduleId:o,parentId:f};-1===e.indexOf(f)&&(c.hot._acceptedDependencies[o]?(n[f]||(n[f]=[]),p(n[f],[o])):(delete n[f],e.push(f),r.push({chain:u.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}e=e||{};var g={},m=[],v={},b=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var E in d)if(Object.prototype.hasOwnProperty.call(d,E)){var A;f=_(E);var B=!1,C=!1,S=!1,D="";switch((A=d[E]?c(f):{type:"disposed",moduleId:E}).chain&&(D="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":e.onDeclined&&e.onDeclined(A),e.ignoreDeclined||(B=new Error("Aborted because of self decline: "+A.moduleId+D));break;case"declined":e.onDeclined&&e.onDeclined(A),e.ignoreDeclined||(B=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+D));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(A),e.ignoreUnaccepted||(B=new Error("Aborted because "+f+" is not accepted"+D));break;case"accepted":e.onAccepted&&e.onAccepted(A),C=!0;break;case"disposed":e.onDisposed&&e.onDisposed(A),S=!0;break;default:throw new Error("Unexception type "+A.type)}if(B)return l("abort"),Promise.reject(B);if(C)for(f in v[f]=d[f],p(m,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,f)&&(g[f]||(g[f]=[]),p(g[f],A.outdatedDependencies[f]));S&&(p(m,[A.moduleId]),v[f]=b)}var k,T=[];for(r=0;r<m.length;r++)f=m[r],F[f]&&F[f].hot._selfAccepted&&T.push({module:f,errorHandler:F[f].hot._selfAccepted});l("dispose"),Object.keys(w).forEach(function(t){!1===w[t]&&function(t){delete installedChunks[t]}(t)});for(var I,M,O=m.slice();O.length>0;)if(f=O.pop(),a=F[f]){var j={},R=a.hot._disposeHandlers;for(o=0;o<R.length;o++)(n=R[o])(j);for(u[f]=j,a.hot.active=!1,delete F[f],delete g[f],o=0;o<a.children.length;o++){var L=F[a.children[o]];L&&((k=L.parents.indexOf(f))>=0&&L.parents.splice(k,1))}}for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(a=F[f]))for(M=g[f],o=0;o<M.length;o++)I=M[o],(k=a.children.indexOf(I))>=0&&a.children.splice(k,1);for(f in l("apply"),i=y,v)Object.prototype.hasOwnProperty.call(v,f)&&(t[f]=v[f]);var N=null;for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(a=F[f])){M=g[f];var P=[];for(r=0;r<M.length;r++)if(I=M[r],n=a.hot._acceptedDependencies[I]){if(-1!==P.indexOf(n))continue;P.push(n)}for(r=0;r<P.length;r++){n=P[r];try{n(M)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:f,dependencyId:M[r],error:t}),e.ignoreErrored||N||(N=t)}}}for(r=0;r<T.length;r++){var U=T[r];f=U.module,s=[f];try{x(f)}catch(t){if("function"==typeof U.errorHandler)try{U.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:n,originalError:t}),e.ignoreErrored||N||(N=n),N||(N=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:f,error:t}),e.ignoreErrored||N||(N=t)}}return N?(l("fail"),Promise.reject(N)):(l("idle"),new Promise(function(t){t(m)}))}var F={};function x(e){if(F[e])return F[e].exports;var r=F[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:E,apply:C,status:function(t){if(!t)return h;c.push(t)},addStatusHandler:function(t){c.push(t)},removeStatusHandler:function(t){var e=c.indexOf(t);e>=0&&c.splice(e,1)},data:u[t]};return n=void 0,e}(e),parents:(a=s,s=[],a),children:[]};return t[e].call(r.exports,r,r.exports,f(e)),r.l=!0,r.exports}x.m=t,x.c=F,x.d=function(t,e,n){x.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},x.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},x.t=function(t,e){if(1&e&&(t=x(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(x.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)x.d(n,r,function(e){return t[e]}.bind(null,r));return n},x.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return x.d(e,"a",e),e},x.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},x.p="",x.h=function(){return i},f(122)(x.s=122)}([function(t,e,n){var r=n(2),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function u(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=u),o(i,u),u.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},u.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},u.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},u.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(154),i=n(155),o=n(83);function u(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,n){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,n)}function f(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!a.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(a.isBuffer(e)){var n=0|p(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?s(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=s(t,e<0?0:0|p(e)),!a.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|p(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function d(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(t).length;default:if(r)return U(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=a.from(e,r)),a.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,u=1,s=t.length,a=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,s/=2,a/=2,n/=2}function f(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(i){var c=-1;for(o=n;o<s;o++)if(f(t,o)===f(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===a)return c*u}else-1!==c&&(o-=o-c),c=-1}else for(n+a>s&&(n=s-a),o=n;o>=0;o--){for(var h=!0,l=0;l<a;l++)if(f(t,o+l)!==f(e,l)){h=!1;break}if(h)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var u=0;u<r;++u){var s=parseInt(e.substr(2*u,2),16);if(isNaN(s))return u;t[n+u]=s}return u}function b(t,e,n,r){return z(U(e,t.length-n),t,n,r)}function w(t,e,n,r){return z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function _(t,e,n,r){return w(t,e,n,r)}function E(t,e,n,r){return z(q(e),t,n,r)}function A(t,e,n,r){return z(function(t,e){for(var n,r,i,o=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function B(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function C(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,u,s,a,f=t[i],c=null,h=f>239?4:f>223?3:f>191?2:1;if(i+h<=n)switch(h){case 1:f<128&&(c=f);break;case 2:128==(192&(o=t[i+1]))&&(a=(31&f)<<6|63&o)>127&&(c=a);break;case 3:o=t[i+1],u=t[i+2],128==(192&o)&&128==(192&u)&&(a=(15&f)<<12|(63&o)<<6|63&u)>2047&&(a<55296||a>57343)&&(c=a);break;case 4:o=t[i+1],u=t[i+2],s=t[i+3],128==(192&o)&&128==(192&u)&&128==(192&s)&&(a=(15&f)<<18|(63&o)<<12|(63&u)<<6|63&s)>65535&&a<1114112&&(c=a)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=h}return function(t){var e=t.length;if(e<=F)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=F));return n}(r)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=u(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,n){return f(null,t,e,n)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},a.allocUnsafe=function(t){return h(null,t)},a.allocUnsafeSlow=function(t){return h(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=a.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var u=t[n];if(!a.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,i),i+=u.length}return r},a.byteLength=d,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return D(this,e,n);case"utf8":case"utf-8":return C(this,e,n);case"ascii":return x(this,e,n);case"latin1":case"binary":return S(this,e,n);case"base64":return B(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,n,r,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,u=n-e,s=Math.min(o,u),f=this.slice(r,i),c=t.slice(e,n),h=0;h<s;++h)if(f[h]!==c[h]){o=f[h],u=c[h];break}return o<u?-1:u<o?1:0},a.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},a.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},a.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},a.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return _(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var F=4096;function x(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function S(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function D(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=P(t[o]);return i}function k(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function T(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,n,r,i,o){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function O(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function j(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(t,e,n,r,o){return o||j(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,o){return o||j(t,0,n,8),i.write(t,e,n,r,52,8),n+8}a.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;n=new a(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},a.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},a.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},a.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},a.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},a.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},a.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):O(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);I(this,t,e,n,i-1,-i)}var o=0,u=1,s=0;for(this[e]=255&t;++o<n&&(u*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/u>>0)-s&255;return e+n},a.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);I(this,t,e,n,i-1,-i)}var o=n-1,u=1,s=0;for(this[e+o]=255&t;--o>=0&&(u*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/u>>0)-s&255;return e+n},a.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):O(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,n){return R(this,t,e,!0,n)},a.prototype.writeFloatBE=function(t,e,n){return R(this,t,e,!1,n)},a.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},a.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},a.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},a.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var u=a.isBuffer(t)?t:U(new a(t,r).toString()),s=u.length;for(o=0;o<n-e;++o)this[o+e]=u[o%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function P(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],u=0;u<r;++u){if((n=t.charCodeAt(u))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function q(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(6))},function(t,e,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function r(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var o=n(178),u=Object.prototype.hasOwnProperty,s=Array.prototype.slice,a="foo"===function(){}.name;function f(t){return Object.prototype.toString.call(t)}function c(t){return!i(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var h=t.exports=m,l=/\s*function\s+([^\(\s]*)\s*/;function p(t){if(o.isFunction(t)){if(a)return t.name;var e=t.toString().match(l);return e&&e[1]}}function d(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function y(t){if(a||!o.isFunction(t))return o.inspect(t);var e=p(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,n,r,i){throw new h.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:i})}function m(t,e){t||g(t,!0,e,"==",h.ok)}function v(t,e,n,u){if(t===e)return!0;if(i(t)&&i(e))return 0===r(t,e);if(o.isDate(t)&&o.isDate(e))return t.getTime()===e.getTime();if(o.isRegExp(t)&&o.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(c(t)&&c(e)&&f(t)===f(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===r(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var a=(u=u||{actual:[],expected:[]}).actual.indexOf(t);return-1!==a&&a===u.expected.indexOf(e)||(u.actual.push(t),u.expected.push(e),function(t,e,n,r){if(null===t||void 0===t||null===e||void 0===e)return!1;if(o.isPrimitive(t)||o.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=b(t),u=b(e);if(i&&!u||!i&&u)return!1;if(i)return t=s.call(t),e=s.call(e),v(t,e,n);var a,f,c=E(t),h=E(e);if(c.length!==h.length)return!1;for(c.sort(),h.sort(),f=c.length-1;f>=0;f--)if(c[f]!==h[f])return!1;for(f=c.length-1;f>=0;f--)if(a=c[f],!v(t[a],e[a],n,r))return!1;return!0}(t,e,n,u))}return n?t===e:t==e}function b(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function w(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function _(t,e,n,r){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!i&&g(i,n,"Missing expected exception"+r);var u="string"==typeof r,s=!t&&o.isError(i),a=!t&&i&&!n;if((s&&u&&w(i,n)||a)&&g(i,n,"Got unwanted exception"+r),t&&i&&n&&!w(i,n)||!t&&i)throw i}h.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return d(y(t.actual),128)+" "+t.operator+" "+d(y(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,i=p(e),o=r.indexOf("\n"+i);if(o>=0){var u=r.indexOf("\n",o+1);r=r.substring(u+1)}this.stack=r}}},o.inherits(h.AssertionError,Error),h.fail=g,h.ok=m,h.equal=function(t,e,n){t!=e&&g(t,e,n,"==",h.equal)},h.notEqual=function(t,e,n){t==e&&g(t,e,n,"!=",h.notEqual)},h.deepEqual=function(t,e,n){v(t,e,!1)||g(t,e,n,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(t,e,n){v(t,e,!0)||g(t,e,n,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(t,e,n){v(t,e,!1)&&g(t,e,n,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function t(e,n,r){v(e,n,!0)&&g(e,n,r,"notDeepStrictEqual",t)},h.strictEqual=function(t,e,n){t!==e&&g(t,e,n,"===",h.strictEqual)},h.notStrictEqual=function(t,e,n){t===e&&g(t,e,n,"!==",h.notStrictEqual)},h.throws=function(t,e,n){_(!0,t,e,n)},h.doesNotThrow=function(t,e,n){_(!1,t,e,n)},h.ifError=function(t){if(t)throw t};var E=Object.keys||function(t){var e=[];for(var n in t)u.call(t,n)&&e.push(n);return e}}).call(this,n(6))},function(t,e,n){"use strict";var r=n(113),i=n(239),o=Object.prototype.toString;function u(t){return"[object Array]"===o.call(t)}function s(t){return null!==t&&"object"==typeof t}function a(t){return"[object Function]"===o.call(t)}function f(t,e){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),u(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}t.exports={isArray:u,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:i,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:s,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:a,isStream:function(t){return s(t)&&a(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],n);return e},extend:function(t,e,n){return f(e,function(e,i){t[i]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){var r=n(49)("wks"),i=n(35),o=n(7).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var a,f=[],c=!1,h=-1;function l(){c&&a&&(c=!1,a.length?f=a.concat(f):h=-1,f.length&&p())}function p(){if(!c){var t=s(l);c=!0;for(var e=f.length;e;){for(a=f,f=[];++h<e;)a&&a[h].run();h=-1,e=f.length}a=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new d(t,e)),1!==f.length||c||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(99);n(181),t.exports=r},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(0).Buffer,i=n(90).Transform,o=n(59).StringDecoder;function u(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(1)(u,i),u.prototype.update=function(t,e,n){"string"==typeof t&&(t=r.from(t,e));var i=this._update(t);return this.hashMode?this:(n&&(i=this._toString(i,n)),i)},u.prototype.setAutoPadding=function(){},u.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},u.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},u.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},u.prototype._transform=function(t,e,n){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{n(r)}},u.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},u.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},u.prototype._toString=function(t,e,n){if(this._decoder||(this._decoder=new o(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return n&&(r+=this._decoder.end()),r},t.exports=u},function(t,e,n){"use strict";var r=n(37),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=h;var o=n(28);o.inherits=n(1);var u=n(91),s=n(58);o.inherits(h,u);for(var a=i(s.prototype),f=0;f<a.length;f++){var c=a[f];h.prototype[c]||(h.prototype[c]=s.prototype[c])}function h(t){if(!(this instanceof h))return new h(t);u.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||r.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";var r=n(62),i=n(188);t.exports={sha1:function(t,e){return r("sha1").update(t).digest(e)},sha256:function(t,e){return r("sha256").update(t).digest(e)},sha512:function(t,e){return r("sha512").update(t).digest(e)},HmacSHA256:function(t,e){return i("sha256",e).update(t).digest()},ripemd160:function(t){return r("rmd160").update(t).digest()}}},function(t,e,n){var r=n(16),i=n(34);t.exports=n(17)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(24),i=n(75),o=n(45),u=Object.defineProperty;e.f=n(17)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(33)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(132),i=n(44);t.exports=function(t){return r(i(t))}},function(t,e,n){var r,i,o;
/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */i=[n(156)],void 0===(o="function"==typeof(r=function(t){"use strict";var e=function(t,n,i){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===n&&(n=e.DEFAULT_ENDIAN),void 0===i&&(i=e.DEFAULT_NOASSERT),!i){if((t|=0)<0)throw RangeError("Illegal capacity");n=!!n,i=!!i}this.buffer=0===t?r:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=n,this.noAssert=i};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var n=e.prototype;n.__isByteBuffer__,Object.defineProperty(n,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var r=new ArrayBuffer(0),i=String.fromCharCode;function o(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function u(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+i.apply(String,t);t.length+arguments.length>1024&&(e.push(i.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function s(t,e,n,r,i){var o,u,s=8*i-r-1,a=(1<<s)-1,f=a>>1,c=-7,h=n?i-1:0,l=n?-1:1,p=t[e+h];for(h+=l,o=p&(1<<-c)-1,p>>=-c,c+=s;c>0;o=256*o+t[e+h],h+=l,c-=8);for(u=o&(1<<-c)-1,o>>=-c,c+=r;c>0;u=256*u+t[e+h],h+=l,c-=8);if(0===o)o=1-f;else{if(o===a)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),o-=f}return(p?-1:1)*u*Math.pow(2,o-r)}function a(t,e,n,r,i,o){var u,s,a,f=8*o-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-u))<1&&(u--,a*=2),(e+=u+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(s=0,u=c):u+h>=1?(s=(e*a-1)*Math.pow(2,i),u+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),u=0));i>=8;t[n+p]=255&s,p+=d,s/=256,i-=8);for(u=u<<i|s,f+=i;f>0;t[n+p]=255&u,p+=d,u/=256,f-=8);t[n+p-d]|=128*y}e.accessor=function(){return Uint8Array},e.allocate=function(t,n,r){return new e(t,n,r)},e.concat=function(t,n,r,i){"boolean"!=typeof n&&"string"==typeof n||(i=r,r=n,n=void 0);for(var o,u=0,s=0,a=t.length;s<a;++s)e.isByteBuffer(t[s])||(t[s]=e.wrap(t[s],n)),(o=t[s].limit-t[s].offset)>0&&(u+=o);if(0===u)return new e(0,r,i);var f,c=new e(u,r,i);for(s=0;s<a;)(o=(f=t[s++]).limit-f.offset)<=0||(c.view.set(f.view.subarray(f.offset,f.limit),c.offset),c.offset+=o);return c.limit=c.offset,c.offset=0,c},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,r,i,o){if("string"!=typeof r&&(o=i,i=r,r=void 0),"string"==typeof t)switch(void 0===r&&(r="utf8"),r){case"base64":return e.fromBase64(t,i);case"hex":return e.fromHex(t,i);case"binary":return e.fromBinary(t,i);case"utf8":return e.fromUTF8(t,i);case"debug":return e.fromDebug(t,i);default:throw Error("Unsupported encoding: "+r)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var u;if(e.isByteBuffer(t))return(u=n.clone.call(t)).markedOffset=-1,u;if(t instanceof Uint8Array)u=new e(0,i,o),t.length>0&&(u.buffer=t.buffer,u.offset=t.byteOffset,u.limit=t.byteOffset+t.byteLength,u.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)u=new e(0,i,o),t.byteLength>0&&(u.buffer=t,u.offset=0,u.limit=t.byteLength,u.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(u=new e(t.length,i,o)).limit=t.length;for(var s=0;s<t.length;++s)u.view[s]=t[s]}return u},n.writeBitSet=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,i=e,o=t.length,u=o>>3,s=0;for(e+=this.writeVarint32(o,e);u--;)r=1&!!t[s++]|(1&!!t[s++])<<1|(1&!!t[s++])<<2|(1&!!t[s++])<<3|(1&!!t[s++])<<4|(1&!!t[s++])<<5|(1&!!t[s++])<<6|(1&!!t[s++])<<7,this.writeByte(r,e++);if(s<o){var a=0;for(r=0;s<o;)r|=(1&!!t[s++])<<a++;this.writeByte(r,e++)}return n?(this.offset=e,this):e-i},n.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var n,r=this.readVarint32(t),i=r.value,o=i>>3,u=0,s=[];for(t+=r.length;o--;)n=this.readByte(t++),s[u++]=!!(1&n),s[u++]=!!(2&n),s[u++]=!!(4&n),s[u++]=!!(8&n),s[u++]=!!(16&n),s[u++]=!!(32&n),s[u++]=!!(64&n),s[u++]=!!(128&n);if(u<i){var a=0;for(n=this.readByte(t++);u<i;)s[u++]=!!(n>>a++&1)}return e&&(this.offset=t),s},n.readBytes=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var r=this.slice(e,e+t);return n&&(this.offset+=t),r},n.writeBytes=n.append,n.writeInt8=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,n&&(this.offset+=1),this},n.writeByte=n.writeInt8,n.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=this.view[t];return 128==(128&n)&&(n=-(255-n+1)),e&&(this.offset+=1),n},n.readByte=n.readInt8,n.writeUint8=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,n&&(this.offset+=1),this},n.writeUInt8=n.writeUint8,n.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=this.view[t];return e&&(this.offset+=1),n},n.readUInt8=n.readUint8,n.writeInt16=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),n&&(this.offset+=2),this},n.writeShort=n.writeInt16,n.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t],n|=this.view[t+1]<<8):(n=this.view[t]<<8,n|=this.view[t+1]),32768==(32768&n)&&(n=-(65535-n+1)),e&&(this.offset+=2),n},n.readShort=n.readInt16,n.writeUint16=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),n&&(this.offset+=2),this},n.writeUInt16=n.writeUint16,n.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t],n|=this.view[t+1]<<8):(n=this.view[t]<<8,n|=this.view[t+1]),e&&(this.offset+=2),n},n.readUInt16=n.readUint16,n.writeInt32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),n&&(this.offset+=4),this},n.writeInt=n.writeInt32,n.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0):(n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0),n|=0,e&&(this.offset+=4),n},n.readInt=n.readInt32,n.writeUint32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),n&&(this.offset+=4),this},n.writeUInt32=n.writeUint32,n.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0):(n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0),e&&(this.offset+=4),n},n.readUInt32=n.readUint32,t&&(n.writeInt64=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=e.low,u=e.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=u>>>24&255,this.view[n+2]=u>>>16&255,this.view[n+1]=u>>>8&255,this.view[n]=255&u):(this.view[n]=u>>>24&255,this.view[n+1]=u>>>16&255,this.view[n+2]=u>>>8&255,this.view[n+3]=255&u,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeLong=n.writeInt64,n.readInt64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var o=new t(r,i,!1);return n&&(this.offset+=8),o},n.readLong=n.readInt64,n.writeUint64=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=e.low,u=e.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=u>>>24&255,this.view[n+2]=u>>>16&255,this.view[n+1]=u>>>8&255,this.view[n]=255&u):(this.view[n]=u>>>24&255,this.view[n+1]=u>>>16&255,this.view[n+2]=u>>>8&255,this.view[n+3]=255&u,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeUInt64=n.writeUint64,n.readUint64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var o=new t(r,i,!0);return n&&(this.offset+=8),o},n.readUInt64=n.readUint64),n.writeFloat32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,a(this.view,t,e,this.littleEndian,23,4),n&&(this.offset+=4),this},n.writeFloat=n.writeFloat32,n.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=s(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),n},n.readFloat=n.readFloat32,n.writeFloat64=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=8,a(this.view,t,e,this.littleEndian,52,8),n&&(this.offset+=8),this},n.writeDouble=n.writeFloat64,n.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var n=s(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),n},n.readDouble=n.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},n.writeVarint32=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,o=e.calculateVarint32(t);n+=o;var u=this.buffer.byteLength;for(n>u&&this.resize((u*=2)>n?u:n),n-=o,t>>>=0;t>=128;)i=127&t|128,this.view[n++]=i,t>>>=7;return this.view[n++]=t,r?(this.offset=n,this):o},n.writeVarint32ZigZag=function(t,n){return this.writeVarint32(e.zigZagEncode32(t),n)},n.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n,r=0,i=0;do{if(!this.noAssert&&t>this.limit){var o=Error("Truncated");throw o.truncated=!0,o}n=this.view[t++],r<5&&(i|=(127&n)<<7*r),++r}while(0!=(128&n));return i|=0,e?(this.offset=t,i):{value:i,length:r}},n.readVarint32ZigZag=function(t){var n=this.readVarint32(t);return"object"==typeof n?n.value=e.zigZagDecode32(n.value):n=e.zigZagDecode32(n),n},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var n=e.toInt()>>>0,r=e.shiftRightUnsigned(28).toInt()>>>0,i=e.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==r?n<16384?n<128?1:2:n<1<<21?3:4:r<16384?r<128?5:6:r<1<<21?7:8:i<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},n.writeVarint64=function(n,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof n)n=t.fromNumber(n);else if("string"==typeof n)n=t.fromString(n);else if(!(n&&n instanceof t))throw TypeError("Illegal value: "+n+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof n?n=t.fromNumber(n,!1):"string"==typeof n?n=t.fromString(n,!1):!1!==n.unsigned&&(n=n.toSigned());var o=e.calculateVarint64(n),u=n.toInt()>>>0,s=n.shiftRightUnsigned(28).toInt()>>>0,a=n.shiftRightUnsigned(56).toInt()>>>0;r+=o;var f=this.buffer.byteLength;switch(r>f&&this.resize((f*=2)>r?f:r),r-=o,o){case 10:this.view[r+9]=a>>>7&1;case 9:this.view[r+8]=9!==o?128|a:127&a;case 8:this.view[r+7]=8!==o?s>>>21|128:s>>>21&127;case 7:this.view[r+6]=7!==o?s>>>14|128:s>>>14&127;case 6:this.view[r+5]=6!==o?s>>>7|128:s>>>7&127;case 5:this.view[r+4]=5!==o?128|s:127&s;case 4:this.view[r+3]=4!==o?u>>>21|128:u>>>21&127;case 3:this.view[r+2]=3!==o?u>>>14|128:u>>>14&127;case 2:this.view[r+1]=2!==o?u>>>7|128:u>>>7&127;case 1:this.view[r]=1!==o?128|u:127&u}return i?(this.offset+=o,this):o},n.writeVarint64ZigZag=function(t,n){return this.writeVarint64(e.zigZagEncode64(t),n)},n.readVarint64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=e,i=0,o=0,u=0,s=0;if(s=this.view[e++],i=127&s,128&s&&(s=this.view[e++],i|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<7,128&s||this.noAssert&&void 0===s))))))))))throw Error("Buffer overrun");var a=t.fromBits(i|o<<28,o>>>4|u<<24,!1);return n?(this.offset=e,a):{value:a,length:e-r}},n.readVarint64ZigZag=function(n){var r=this.readVarint64(n);return r&&r.value instanceof t?r.value=e.zigZagDecode64(r.value):r=e.zigZagDecode64(r),r}),n.writeCString=function(t,e){var n=void 0===e;n&&(e=this.offset);var r,i=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(r=0;r<i;++r)if(0===t.charCodeAt(r))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}i=c.calculateUTF16asUTF8(o(t))[1],e+=i+1;var u=this.buffer.byteLength;return e>u&&this.resize((u*=2)>e?u:e),e-=i+1,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,n?(this.offset=e,this):i},n.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n,r=t,i=-1;return c.decodeUTF8toUTF16(function(){if(0===i)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(i=this.view[t++])?null:i}.bind(this),n=u(),!0),e?(this.offset=t,n()):{string:n(),length:t-r}},n.writeIString=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,i=e;r=c.calculateUTF16asUTF8(o(t),this.noAssert)[1],e+=4+r;var u=this.buffer.byteLength;if(e>u&&this.resize((u*=2)>e?u:e),e-=4+r,this.littleEndian?(this.view[e+3]=r>>>24&255,this.view[e+2]=r>>>16&255,this.view[e+1]=r>>>8&255,this.view[e]=255&r):(this.view[e]=r>>>24&255,this.view[e+1]=r>>>16&255,this.view[e+2]=r>>>8&255,this.view[e+3]=255&r),e+=4,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),e!==i+4+r)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+r));return n?(this.offset=e,this):e-i},n.readIString=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=t,i=this.readUint32(t),o=this.readUTF8String(i,e.METRICS_BYTES,t+=4);return t+=o.length,n?(this.offset=t,o.string):{string:o.string,length:t-r}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",n.writeUTF8String=function(t,e){var n,r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i=e;n=c.calculateUTF16asUTF8(o(t))[1],e+=n;var u=this.buffer.byteLength;return e>u&&this.resize((u*=2)>e?u:e),e-=n,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),r?(this.offset=e,this):e-i},n.writeString=n.writeUTF8String,e.calculateUTF8Chars=function(t){return c.calculateUTF16asUTF8(o(t))[0]},e.calculateUTF8Bytes=function(t){return c.calculateUTF16asUTF8(o(t))[1]},e.calculateString=e.calculateUTF8Bytes,n.readUTF8String=function(t,n,r){"number"==typeof n&&(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),void 0===n&&(n=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var o,s=0,a=r;if(n===e.METRICS_CHARS){if(o=u(),c.decodeUTF8(function(){return s<t&&r<this.limit?this.view[r++]:null}.bind(this),function(t){++s,c.UTF8toUTF16(t,o)}),s!==t)throw RangeError("Illegal range: Truncated data, "+s+" == "+t);return i?(this.offset=r,o()):{string:o(),length:r-a}}if(n===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+"+t+") <= "+this.buffer.byteLength)}var f=r+t;if(c.decodeUTF8toUTF16(function(){return r<f?this.view[r++]:null}.bind(this),o=u(),this.noAssert),r!==f)throw RangeError("Illegal range: Truncated data, "+r+" == "+f);return i?(this.offset=r,o()):{string:o(),length:r-a}}throw TypeError("Unsupported metrics: "+n)},n.readString=n.readUTF8String,n.writeVString=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,u,s=n;i=c.calculateUTF16asUTF8(o(t),this.noAssert)[1],u=e.calculateVarint32(i),n+=u+i;var a=this.buffer.byteLength;if(n>a&&this.resize((a*=2)>n?a:n),n-=u+i,n+=this.writeVarint32(i,n),c.encodeUTF16toUTF8(o(t),function(t){this.view[n++]=t}.bind(this)),n!==s+i+u)throw RangeError("Illegal range: Truncated data, "+n+" == "+(n+i+u));return r?(this.offset=n,this):n-s},n.readVString=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=t,i=this.readVarint32(t),o=this.readUTF8String(i.value,e.METRICS_BYTES,t+=i.length);return t+=o.length,n?(this.offset=t,o.string):{string:o.string,length:t-r}},n.append=function(t,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,n));var o=t.limit-t.offset;if(o<=0)return this;r+=o;var u=this.buffer.byteLength;return r>u&&this.resize((u*=2)>r?u:r),r-=o,this.view.set(t.view.subarray(t.offset,t.limit),r),t.offset+=o,i&&(this.offset+=o),this},n.appendTo=function(t,e){return t.append(this,e),this},n.assert=function(t){return this.noAssert=!t,this},n.capacity=function(){return this.buffer.byteLength},n.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},n.clone=function(t){var n=new e(0,this.littleEndian,this.noAssert);return t?(n.buffer=new ArrayBuffer(this.buffer.byteLength),n.view=new Uint8Array(n.buffer)):(n.buffer=this.buffer,n.view=this.view),n.offset=this.offset,n.markedOffset=this.markedOffset,n.limit=this.limit,n},n.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var n=e-t;if(0===n)return this.buffer=r,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(n),o=new Uint8Array(i);return o.set(this.view.subarray(t,e)),this.buffer=i,this.view=o,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=n,this},n.copy=function(t,n){if(void 0===t&&(t=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(t===n)return new e(0,this.littleEndian,this.noAssert);var r=n-t,i=new e(r,this.littleEndian,this.noAssert);return i.offset=0,i.limit=r,i.markedOffset>=0&&(i.markedOffset-=t),this.copyTo(i,0,t,n),i},n.copyTo=function(t,n,r,i){var o,u;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(n=(u=void 0===n)?t.offset:0|n,r=(o=void 0===r)?this.offset:0|r,i=void 0===i?this.limit:0|i,n<0||n>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+n+" <= "+t.buffer.byteLength);if(r<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+r+" <= "+this.buffer.byteLength);var s=i-r;return 0===s?t:(t.ensureCapacity(n+s),t.view.set(this.view.subarray(r,i),n),o&&(this.offset+=s),u&&(t.offset+=s),this)},n.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},n.fill=function(t,e,n){var r=void 0===e;if(r&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(e>=n)return this;for(;e<n;)this.view[e++]=t;return r&&(this.offset=e),this},n.flip=function(){return this.limit=this.offset,this.offset=0,this},n.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},n.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},n.LE=function(t){return this.littleEndian=void 0===t||!!t,this},n.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},n.prepend=function(t,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,n));var o=t.limit-t.offset;if(o<=0)return this;var u=o-r;if(u>0){var s=new ArrayBuffer(this.buffer.byteLength+u),a=new Uint8Array(s);a.set(this.view.subarray(r,this.buffer.byteLength),o),this.buffer=s,this.view=a,this.offset+=u,this.markedOffset>=0&&(this.markedOffset+=u),this.limit+=u,r+=u}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),r-o),t.offset=t.limit,i&&(this.offset-=o),this},n.prependTo=function(t,e){return t.prepend(this,e),this},n.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},n.remaining=function(){return this.limit-this.offset},n.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},n.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),n=new Uint8Array(e);n.set(this.view),this.buffer=e,this.view=n}return this},n.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e?this:(Array.prototype.reverse.call(this.view.subarray(t,e)),this)},n.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},n.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var n=this.clone();return n.offset=t,n.limit=e,n},n.toBuffer=function(t){var e=this.offset,n=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal limit: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(!t&&0===e&&n===this.buffer.byteLength)return this.buffer;if(e===n)return r;var i=new ArrayBuffer(n-e);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(e,n),0),i},n.toArrayBuffer=n.toBuffer,n.toString=function(t,e,n){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(n=e=t="utf8"),t){case"utf8":return this.toUTF8(e,n);case"base64":return this.toBase64(e,n);case"hex":return this.toHex(e,n);case"binary":return this.toBinary(e,n);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var f=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],n=[],r=0,i=e.length;r<i;++r)n[e[r]]=r;return t.encode=function(t,n){for(var r,i;null!==(r=t());)n(e[r>>2&63]),i=(3&r)<<4,null!==(r=t())?(n(e[63&((i|=r>>4&15)|r>>4&15)]),i=(15&r)<<2,null!==(r=t())?(n(e[63&(i|r>>6&3)]),n(e[63&r])):(n(e[63&i]),n(61))):(n(e[63&i]),n(61),n(61))},t.decode=function(t,e){var r,i,o;function u(t){throw Error("Illegal character code: "+t)}for(;null!==(r=t());)if(void 0===(i=n[r])&&u(r),null!==(r=t())&&(void 0===(o=n[r])&&u(r),e(i<<2>>>0|(48&o)>>4),null!==(r=t()))){if(void 0===(i=n[r])){if(61===r)break;u(r)}if(e((15&o)<<4>>>0|(60&i)>>2),null!==(r=t())){if(void 0===(o=n[r])){if(61===r)break;u(r)}e((3&i)<<6>>>0|o)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();n.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var n;return f.encode(function(){return t<e?this.view[t++]:null}.bind(this),n=u()),n()},e.fromBase64=function(t,n){if("string"!=typeof t)throw TypeError("str");var r=new e(t.length/4*3,n),i=0;return f.decode(o(t),function(t){r.view[i++]=t}),r.limit=i,r},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},n.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var n=[],r=[];t<e;)n.push(this.view[t++]),n.length>=1024&&(r.push(String.fromCharCode.apply(String,n)),n=[]);return r.join("")+String.fromCharCode.apply(String,n)},e.fromBinary=function(t,n){if("string"!=typeof t)throw TypeError("str");for(var r,i=0,o=t.length,u=new e(o,n);i<o;){if((r=t.charCodeAt(i))>255)throw RangeError("illegal char code: "+r);u.view[i++]=r}return u.limit=o,u},n.toDebug=function(t){for(var e,n=-1,r=this.buffer.byteLength,i="",o="",u="";n<r;){if(-1!==n&&(e=this.view[n],i+=e<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(o+=e>32&&e<127?String.fromCharCode(e):".")),++n,t&&n>0&&n%16==0&&n!==r){for(;i.length<51;)i+=" ";u+=i+o+"\n",i=o=""}n===this.offset&&n===this.limit?i+=n===this.markedOffset?"!":"|":n===this.offset?i+=n===this.markedOffset?"[":"<":n===this.limit?i+=n===this.markedOffset?"]":">":i+=n===this.markedOffset?"'":t||0!==n&&n!==r?" ":""}if(t&&" "!==i){for(;i.length<51;)i+=" ";u+=i+o+"\n"}return t?u:i},e.fromDebug=function(t,n,r){for(var i,o,u=t.length,s=new e((u+1)/3|0,n,r),a=0,f=0,c=!1,h=!1,l=!1,p=!1,d=!1;a<u;){switch(i=t.charAt(a++)){case"!":if(!r){if(h||l||p){d=!0;break}h=l=p=!0}s.offset=s.markedOffset=s.limit=f,c=!1;break;case"|":if(!r){if(h||p){d=!0;break}h=p=!0}s.offset=s.limit=f,c=!1;break;case"[":if(!r){if(h||l){d=!0;break}h=l=!0}s.offset=s.markedOffset=f,c=!1;break;case"<":if(!r){if(h){d=!0;break}h=!0}s.offset=f,c=!1;break;case"]":if(!r){if(p||l){d=!0;break}p=l=!0}s.limit=s.markedOffset=f,c=!1;break;case">":if(!r){if(p){d=!0;break}p=!0}s.limit=f,c=!1;break;case"'":if(!r){if(l){d=!0;break}l=!0}s.markedOffset=f,c=!1;break;case" ":c=!1;break;default:if(!r&&c){d=!0;break}if(o=parseInt(i+t.charAt(a++),16),!r&&(isNaN(o)||o<0||o>255))throw TypeError("Illegal str: Not a debug encoded string");s.view[f++]=o,c=!0}if(d)throw TypeError("Illegal str: Invalid symbol at "+a)}if(!r){if(!h||!p)throw TypeError("Illegal str: Missing offset or limit");if(f<s.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+f+" < "+u)}return s},n.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var n,r=new Array(e-t);t<e;)(n=this.view[t++])<16?r.push("0",n.toString(16)):r.push(n.toString(16));return r.join("")},e.fromHex=function(t,n,r){if(!r){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,o=t.length,u=new e(o/2|0,n),s=0,a=0;s<o;s+=2){if(i=parseInt(t.substring(s,s+2),16),!r&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");u.view[a++]=i}return u.limit=a,u};var c=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var n=null;for("number"==typeof t&&(n=t,t=function(){return null});null!==n||null!==(n=t());)n<128?e(127&n):n<2048?(e(n>>6&31|192),e(63&n|128)):n<65536?(e(n>>12&15|224),e(n>>6&63|128),e(63&n|128)):(e(n>>18&7|240),e(n>>12&63|128),e(n>>6&63|128),e(63&n|128)),n=null},decodeUTF8:function(t,e){for(var n,r,i,o,u=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(n=t());)if(0==(128&n))e(n);else if(192==(224&n))null===(r=t())&&u([n,r]),e((31&n)<<6|63&r);else if(224==(240&n))(null===(r=t())||null===(i=t()))&&u([n,r,i]),e((15&n)<<12|(63&r)<<6|63&i);else{if(240!=(248&n))throw RangeError("Illegal starting byte: "+n);(null===(r=t())||null===(i=t())||null===(o=t()))&&u([n,r,i,o]),e((7&n)<<18|(63&r)<<12|(63&i)<<6|63&o)}},UTF16toUTF8:function(t,e){for(var n,r=null;null!==(n=null!==r?r:t());)n>=55296&&n<=57343&&null!==(r=t())&&r>=56320&&r<=57343?(e(1024*(n-55296)+r-56320+65536),r=null):e(n);null!==r&&e(r)},UTF8toUTF16:function(t,e){var n=null;for("number"==typeof t&&(n=t,t=function(){return null});null!==n||null!==(n=t());)n<=65535?e(n):(e(55296+((n-=65536)>>10)),e(n%1024+56320)),n=null},encodeUTF16toUTF8:function(e,n){t.UTF16toUTF8(e,function(e){t.encodeUTF8(e,n)})},decodeUTF8toUTF16:function(e,n){t.decodeUTF8(e,function(e){t.UTF8toUTF16(e,n)})},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,n=0;null!==(e=t());)n+=e<128?1:e<2048?2:e<65536?3:4;return n},calculateUTF16asUTF8:function(e){var n=0,r=0;return t.UTF16toUTF8(e,function(t){++n,r+=t<128?1:t<2048?2:t<65536?3:4}),[n,r]}};return t}();return n.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var n;try{c.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),n=u())}catch(n){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return n()},e.fromUTF8=function(t,n,r){if(!r&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var i=new e(c.calculateUTF16asUTF8(o(t),!0)[1],n,r),u=0;return c.encodeUTF16toUTF8(o(t),function(t){i.view[u++]=t}),i.limit=u,i},e})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(0).Buffer;function i(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var n=this._block,i=this._blockSize,o=t.length,u=this._len,s=0;s<o;){for(var a=u%i,f=Math.min(o-s,i-a),c=0;c<f;c++)n[a+c]=t[s+c];s+=f,(u+=f)%i==0&&this._update(n)}return this._len+=o,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(232),i=n(69),o=i.modules.ecc;e.Eos=i,e.Ecc=o,e.Debug=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(21);e.createLogger=function(t){return{verbose:r.Debug("verbose:"+t),info:r.Debug("info:"+t),warning:r.Debug("warning:"+t),error:r.Debug("error:"+t)}};var i=r.Debug.disable();""===i?r.Debug.enable("info:*,warning:*,error:*"):r.Debug.enable(i)},function(t,e,n){"use strict";e.__esModule=!0;var r=u(n(125)),i=u(n(142)),o="function"==typeof i.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function u(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===o(r.default)?function(t){return void 0===t?"undefined":o(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":o(t)}},function(t,e,n){var r=n(25);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports={}},function(t,e,n){(function(e){t.exports=function(t,n){for(var r=Math.min(t.length,n.length),i=new e(r),o=0;o<r;++o)i[o]=t[o]^n[o];return i}}).call(this,n(2).Buffer)},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(3),u=n(61),s=n(9),a=u.getCurveByName("secp256k1"),f=n(14),c=n(30),h=a.G,l=a.n;function p(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";if("string"==typeof t){var r=p.fromString(t,n);return o(null!=r,"Invalid public key"),r}if(e.isBuffer(t))return p.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&t.Q)return p(t.Q);function d(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.compressed;return t.getEncoded(e)}o.equal(void 0===t?"undefined":i(t),"object","Invalid public key"),o.equal(i(t.compressed),"boolean","Invalid public key");return{Q:t,toString:function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"EOS")+c.checkEncode(d())},toUncompressed:function(){var e=t.getEncoded(!1),n=u.Point.decodeFrom(a,e);return p.fromPoint(n)},toBuffer:d,child:function(n){console.error("Deprecated warning: PublicKey.child"),o(e.isBuffer(n),"Buffer required: offset"),o.equal(n.length,32,"offset length"),n=e.concat([d(),n]),n=f.sha256(n);var r=s.fromBuffer(n);if(r.compareTo(l)>=0)throw new Error("Child offset went out of bounds, try again");var i=h.multiply(r),u=t.add(i);if(a.isInfinity(u))throw new Error("Child offset derived to an invalid key, try again");return p.fromPoint(u)},toHex:function(){return d().toString("hex")}}}t.exports=p,p.isValid=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p(t,e),!0}catch(t){return!1}},p.fromBinary=function(t){return p.fromBuffer(new e(t,"binary"))},p.fromBuffer=function(t){return p(u.Point.decodeFrom(a,t))},p.fromPoint=function(t){return p(t)},p.fromString=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p.fromStringOrThrow(t,e)}catch(t){return null}},p.fromStringOrThrow=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";o.equal(void 0===t?"undefined":i(t),"string","public_key");var n=t.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===n)return new RegExp("^"+e).test(t)&&(t=t.substring(e.length)),p.fromBuffer(c.checkDecode(t));o(3===n.length,"Expecting public key like: PUB_K1_base58pubkey..");var u=r(n,3),s=u[1],a=u[2];return o.equal(s,"K1","K1 private key expected"),p.fromBuffer(c.checkDecode(a,s))},p.fromHex=function(t){return p.fromBuffer(new e(t,"hex"))},p.fromStringHex=function(t){return p.fromString(new e(t,"hex"))}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(191),o=n(3),u=n(84),s=n(14);t.exports={random32ByteBuffer:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.cpuEntropyBits,i=void 0===n?0:n,a=t.safe,l=void 0===a||a;o.equal(void 0===i?"undefined":r(i),"number","cpuEntropyBits"),o.equal(void 0===l?"undefined":r(l),"boolean","boolean"),l&&o(f>=128,"Call initialize() to add entropy");var p=[];return p.push(u(32)),p.push(e.from(h(i))),p.push(c),p.push(function(){var t=Array(u(101)).join();try{t+=(new Date).toString()+" "+window.screen.height+" "+window.screen.width+" "+window.screen.colorDepth+"  "+window.screen.availHeight+" "+window.screen.availWidth+" "+window.screen.pixelDepth+navigator.language+" "+window.location+" "+window.history.length;for(var n,r=0;r<navigator.mimeTypes.length;r++)n=navigator.mimeTypes[r],t+=n.description+" "+n.type+" "+n.suffixes+" "}catch(e){t+=s.sha256((new Date).toString())}for(var i=new e(t),o=t+=i.toString("binary")+" "+(new Date).toString(),a=Date.now();Date.now()-a<25;)o=s.sha256(o);return o}()),s.sha256(e.concat(p))},addEntropy:function(){o.equal(c.length,101,"externalEntropyArray");for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];f+=e.length;var r=!0,i=!1,u=void 0;try{for(var s,h=e[Symbol.iterator]();!(r=(s=h.next()).done);r=!0){var l=s.value,p=a++%101,d=c[p]+=l;d>9007199254740991&&(c[p]=0)}}catch(t){i=!0,u=t}finally{try{!r&&h.return&&h.return()}finally{if(i)throw u}}},cpuEntropy:h,entropyCount:function(){return f},checkDecode:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;o(null!=t,"private key expected");var r=new e(i.decode(t)),u=r.slice(-4),a=r.slice(0,-4),f=void 0;if("sha256x2"===n)f=s.sha256(s.sha256(a)).slice(0,4);else{var c=[a];n&&c.push(e.from(n)),f=s.ripemd160(e.concat(c)).slice(0,4)}if(u.toString()!==f.toString())throw new Error("Invalid checksum, "+u.toString("hex")+" != "+f.toString("hex"));return a},checkEncode:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(o(e.isBuffer(t),"expecting keyBuffer<Buffer>"),"sha256x2"===n){var r=s.sha256(s.sha256(t)).slice(0,4);return i.encode(e.concat([t,r]))}var u=[t];n&&u.push(e.from(n));var a=s.ripemd160(e.concat(u)).slice(0,4);return i.encode(e.concat([t,a]))}};var a=0,f=0,c=u(101);function h(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:128,e=[],n=null,r=0;e.length<t;){var i=l();if(null!=n){var o=i-n;if(Math.abs(o)<1){r++;continue}var u=Math.floor(p(Math.abs(o))+1);if(u<4){u<2&&r++;continue}e.push(o)}n=i}if(r>10){var s=Number(r/t*100).toFixed(2);console.warn("WARN: "+s+"% low CPU entropy re-sampled")}return e}function l(){for(var t=Date.now(),e=0,n=0;Date.now()<t+7+1;)n=Math.sin(Math.sqrt(Math.log(++e+n)));return e}var p=function(t){return Math.log(t)/Math.LN2}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(153),i=n(196),o=Object.assign({},r,i);t.exports=o},function(t,e){t.exports=!0},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(0).Buffer;function i(t){r.isBuffer(t)||(t=r.from(t));for(var e=t.length/4|0,n=new Array(e),i=0;i<e;i++)n[i]=t.readUInt32BE(4*i);return n}function o(t){for(;0<t.length;t++)t[0]=0}function u(t,e,n,r,i){for(var o,u,s,a,f=n[0],c=n[1],h=n[2],l=n[3],p=t[0]^e[0],d=t[1]^e[1],y=t[2]^e[2],g=t[3]^e[3],m=4,v=1;v<i;v++)o=f[p>>>24]^c[d>>>16&255]^h[y>>>8&255]^l[255&g]^e[m++],u=f[d>>>24]^c[y>>>16&255]^h[g>>>8&255]^l[255&p]^e[m++],s=f[y>>>24]^c[g>>>16&255]^h[p>>>8&255]^l[255&d]^e[m++],a=f[g>>>24]^c[p>>>16&255]^h[d>>>8&255]^l[255&y]^e[m++],p=o,d=u,y=s,g=a;return o=(r[p>>>24]<<24|r[d>>>16&255]<<16|r[y>>>8&255]<<8|r[255&g])^e[m++],u=(r[d>>>24]<<24|r[y>>>16&255]<<16|r[g>>>8&255]<<8|r[255&p])^e[m++],s=(r[y>>>24]<<24|r[g>>>16&255]<<16|r[p>>>8&255]<<8|r[255&d])^e[m++],a=(r[g>>>24]<<24|r[p>>>16&255]<<16|r[d>>>8&255]<<8|r[255&y])^e[m++],[o>>>=0,u>>>=0,s>>>=0,a>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],a=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var n=[],r=[],i=[[],[],[],[]],o=[[],[],[],[]],u=0,s=0,a=0;a<256;++a){var f=s^s<<1^s<<2^s<<3^s<<4;f=f>>>8^255&f^99,n[u]=f,r[f]=u;var c=t[u],h=t[c],l=t[h],p=257*t[f]^16843008*f;i[0][u]=p<<24|p>>>8,i[1][u]=p<<16|p>>>16,i[2][u]=p<<8|p>>>24,i[3][u]=p,p=16843009*l^65537*h^257*c^16843008*u,o[0][f]=p<<24|p>>>8,o[1][f]=p<<16|p>>>16,o[2][f]=p<<8|p>>>24,o[3][f]=p,0===u?u=s=1:(u=c^t[t[t[l^c]]],s^=t[t[s]])}return{SBOX:n,INV_SBOX:r,SUB_MIX:i,INV_SUB_MIX:o}}();function f(t){this._key=i(t),this._reset()}f.blockSize=16,f.keySize=32,f.prototype.blockSize=f.blockSize,f.prototype.keySize=f.keySize,f.prototype._reset=function(){for(var t=this._key,e=t.length,n=e+6,r=4*(n+1),i=[],o=0;o<e;o++)i[o]=t[o];for(o=e;o<r;o++){var u=i[o-1];o%e==0?(u=u<<8|u>>>24,u=a.SBOX[u>>>24]<<24|a.SBOX[u>>>16&255]<<16|a.SBOX[u>>>8&255]<<8|a.SBOX[255&u],u^=s[o/e|0]<<24):e>6&&o%e==4&&(u=a.SBOX[u>>>24]<<24|a.SBOX[u>>>16&255]<<16|a.SBOX[u>>>8&255]<<8|a.SBOX[255&u]),i[o]=i[o-e]^u}for(var f=[],c=0;c<r;c++){var h=r-c,l=i[h-(c%4?0:4)];f[c]=c<4||h<=4?l:a.INV_SUB_MIX[0][a.SBOX[l>>>24]]^a.INV_SUB_MIX[1][a.SBOX[l>>>16&255]]^a.INV_SUB_MIX[2][a.SBOX[l>>>8&255]]^a.INV_SUB_MIX[3][a.SBOX[255&l]]}this._nRounds=n,this._keySchedule=i,this._invKeySchedule=f},f.prototype.encryptBlockRaw=function(t){return u(t=i(t),this._keySchedule,a.SUB_MIX,a.SBOX,this._nRounds)},f.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),n=r.allocUnsafe(16);return n.writeUInt32BE(e[0],0),n.writeUInt32BE(e[1],4),n.writeUInt32BE(e[2],8),n.writeUInt32BE(e[3],12),n},f.prototype.decryptBlock=function(t){var e=(t=i(t))[1];t[1]=t[3],t[3]=e;var n=u(t,this._invKeySchedule,a.INV_SUB_MIX,a.INV_SBOX,this._nRounds),o=r.allocUnsafe(16);return o.writeUInt32BE(n[0],0),o.writeUInt32BE(n[3],4),o.writeUInt32BE(n[2],8),o.writeUInt32BE(n[1],12),o},f.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},t.exports.AES=f},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,u,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(s-1),u=0;u<o.length;)o[u++]=arguments[u];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(8))},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var o=n(61),u=o.Point,s=o.getCurveByName("secp256k1"),a=n(9),f=n(3),c=n(14),h=n(29),l=n(30),p=n(62),d=n(193);s.G,s.n;function y(t){if("string"==typeof t)return y.fromString(t);if(e.isBuffer(t))return y.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&a.isBigInteger(t.d))return y(t.d);if(!a.isBigInteger(t))throw new TypeError("Invalid private key");function n(){var t=o();return t=e.concat([new e([128]),t]),l.checkEncode(t,"sha256x2")}var r=void 0;function o(){return t.toBuffer(32)}return{d:t,toWif:n,toString:function(){return n()},toPublic:function(){if(r)return r;var e=s.G.multiply(t);return r=h.fromPoint(e)},toBuffer:o,getSharedSecret:function(t){var e=(t=h(t)).toUncompressed().toBuffer(),n=u.fromAffine(s,a.fromBuffer(e.slice(1,33)),a.fromBuffer(e.slice(33,65))),r=o(),i=n.multiply(a.fromBuffer(r)).affineX.toBuffer({size:32});return c.sha512(i)},getChildKey:function(t){return y(p("sha256").update(o()).update(t).digest())}}}function g(t){f.equal(void 0===t?"undefined":i(t),"string","privateStr");var e=t.match(/^PVT_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===e){var n=l.checkDecode(t,"sha256x2"),o=n.readUInt8(0);f.equal(128,o,"Expected version 128, instead got "+o);return{privateKey:y.fromBuffer(n.slice(1)),format:"WIF",keyType:"K1"}}f(3===e.length,"Expecting private key like: PVT_K1_base58privateKey..");var u=r(e,3),s=u[1],a=u[2];return f.equal(s,"K1","K1 private key expected"),{privateKey:y.fromBuffer(l.checkDecode(a,s)),format:"PVT",keyType:s}}t.exports=y,y.fromHex=function(t){return y.fromBuffer(new e(t,"hex"))},y.fromBuffer=function(t){if(!e.isBuffer(t))throw new Error("Expecting parameter to be a Buffer type");if(33===t.length&&1===t[32]&&(t=t.slice(0,-1)),32!==t.length)throw new Error("Expecting 32 bytes, instead got "+t.length);return y(a.fromBuffer(t))},y.fromSeed=function(t){if("string"!=typeof t)throw new Error("seed must be of type string");return y.fromBuffer(c.sha256(t))},y.isWif=function(t){try{return f("WIF"===g(t).format),!0}catch(t){return!1}},y.isValid=function(t){try{return y(t),!0}catch(t){return!1}},y.fromWif=function(t){return console.log("PrivateKey.fromWif is deprecated, please use PrivateKey.fromString"),y.fromString(t)},y.fromString=function(t){return g(t).privateKey},y.randomKey=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return y.initialize().then(function(){return y.fromBuffer(l.random32ByteBuffer({cpuEntropyBits:t}))})},y.unsafeRandomKey=function(){return Promise.resolve(y.fromBuffer(l.random32ByteBuffer({safe:!1})))};var m=!1;y.initialize=d(function(){m||(function(){var t=y(c.sha256("")),e="key comparison test failed on a known private key";f.equal(t.toWif(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e),f.equal(t.toString(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e);var n=t.toPublic();f.equal(n.toString(),"EOS859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM","pubkey string comparison test failed on a known public key"),v(function(){return y.fromString(t.toWif())},"converting known wif from string"),v(function(){return y.fromString(t.toString())},"converting known pvt from string"),v(function(){return h.fromString(n.toString())},"converting known public key from string"),!0}(),l.addEntropy.apply(l,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(l.cpuEntropy())),f(l.entropyCount()>=128,"insufficient entropy"),m=!0)});var v=function(t,e){try{t()}catch(t){throw t.message=e+" ==> "+t.message,t}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};function u(t){return new Promise(function(e){setTimeout(e,t)})}Object.defineProperty(e,"__esModule",{value:!0}),e.forMs=u,e.forCondition=function(t,e){return void 0===e&&(e=100),i(this,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return t()?[2]:[4,u(e)];case 1:return n.sent(),[3,0];case 2:return[2]}})})};var s=function(t){function e(e,n){var r=t.call(this,e)||this;return r.message=e,r.ms=n,r.name="TimeoutError",r}return r(e,t),e}(Error);e.TimeoutError=s,e.timeoutPromise=function(t,e,n){return i(this,void 0,void 0,function(){var r,i;return o(this,function(o){return i=new Promise(function(e,i){r=setTimeout(function(){n&&n(t),i(new s("Timed out in "+t+" ms.",t))},t)}),[2,Promise.race([Promise.resolve(e),i]).then(function(t){return clearTimeout(r),t},function(t){throw clearTimeout(r),t})]})})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(231))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(66)),r(n(68)),r(n(262)),r(n(40))},function(t,e,n){"use strict";var r=n(127)(!0);n(73)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(25);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(79),i=n(50);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(49)("keys"),i=n(35);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){var r=n(10),i=n(7),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(16).f,i=n(11),o=n(5)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){n(139);for(var r=n(7),i=n(15),o=n(26),u=n(5)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),a=0;a<s.length;a++){var f=s[a],c=r[f],h=c&&c.prototype;h&&!h[u]&&i(h,u,f),o[f]=o.Array}},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(7),i=n(10),o=n(32),u=n(53),s=n(16).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:u.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,u,s,a,f;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(o(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(i(n))for(s=Array.prototype.slice.call(arguments,1),u=(f=n.slice()).length,a=0;a<u;a++)f[a].apply(this,s);return!0},n.prototype.addListener=function(t,e){var u;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(u=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&u>0&&this._events[t].length>u&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,o,u,s;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(u=(n=this._events[t]).length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(s=u;s-- >0;)if(n[s]===e||n[s].listener&&n[s].listener===e){o=s;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){(e=t.exports=n(91)).Stream=e,e.Readable=e,e.Writable=n(58),e.Duplex=n(13),e.Transform=n(94),e.PassThrough=n(171)},function(t,e,n){"use strict";(function(e,r,i){var o=n(37);function u(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var s,a=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;v.WritableState=m;var f=n(28);f.inherits=n(1);var c={deprecate:n(170)},h=n(92),l=n(0).Buffer,p=i.Uint8Array||function(){};var d,y=n(93);function g(){}function m(t,e){s=s||n(13),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(f||0===f)?f:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(B,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),B(t,e))}(t,n,r,e,i);else{var u=E(n);u||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?a(w,t,n,u,i):w(t,n,u,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new u(this)}function v(t){if(s=s||n(13),!(d.call(v,this)||this instanceof s))return new v(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function b(t,e,n,r,i,o,u){e.writelen=r,e.writecb=u,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function w(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),B(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var s=0,a=!0;n;)i[s]=n,n.isBuf||(a=!1),n=n.next,s+=1;i.allBuffers=a,b(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new u(e),e.bufferedRequestCount=0}else{for(;n;){var f=n.chunk,c=n.encoding,h=n.callback;if(b(t,e,!1,e.objectMode?1:f.length,f,c,h),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function E(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function A(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),B(t,e)})}function B(t,e){var n=E(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(A,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}f.inherits(v,h),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===v&&(t&&t._writableState instanceof m)}})):d=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r=this._writableState,i=!1,u=!r.objectMode&&function(t){return l.isBuffer(t)||t instanceof p}(t);return u&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(n=e,e=null),u?e="buffer":e||(e=r.defaultEncoding),"function"!=typeof n&&(n=g),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(u||function(t,e,n,r){var i=!0,u=!1;return null===n?u=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(u=new TypeError("Invalid non-string/buffer chunk")),u&&(t.emit("error",u),o.nextTick(r,u),i=!1),i}(this,r,t,n))&&(r.pendingcb++,i=function(t,e,n,r,i,o){if(!n){var u=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,n));return e}(e,r,i);r!==u&&(n=!0,i="buffer",r=u)}var s=e.objectMode?1:r.length;e.length+=s;var a=e.length<e.highWaterMark;a||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,s,r,i,o);return a}(this,r,u,t,e,n)),i},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,B(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(8),n(168).setImmediate,n(6))},function(t,e,n){"use strict";var r=n(0).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=a,this.end=f,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=l,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function u(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function a(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function l(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=u(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=u(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=u(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";var r=n(1),i=n(97),o=n(0).Buffer,u=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function a(t,e){return t<<e|t>>>32-e}function f(t,e,n,r,i,o,u){return a(t+(e&n|~e&r)+i+o|0,u)+e|0}function c(t,e,n,r,i,o,u){return a(t+(e&r|n&~r)+i+o|0,u)+e|0}function h(t,e,n,r,i,o,u){return a(t+(e^n^r)+i+o|0,u)+e|0}function l(t,e,n,r,i,o,u){return a(t+(n^(e|~r))+i+o|0,u)+e|0}r(s,i),s.prototype._update=function(){for(var t=u,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var n=this._a,r=this._b,i=this._c,o=this._d;r=l(r=l(r=l(r=l(r=h(r=h(r=h(r=h(r=c(r=c(r=c(r=c(r=f(r=f(r=f(r=f(r,i=f(i,o=f(o,n=f(n,r,i,o,t[0],3614090360,7),r,i,t[1],3905402710,12),n,r,t[2],606105819,17),o,n,t[3],3250441966,22),i=f(i,o=f(o,n=f(n,r,i,o,t[4],4118548399,7),r,i,t[5],1200080426,12),n,r,t[6],2821735955,17),o,n,t[7],4249261313,22),i=f(i,o=f(o,n=f(n,r,i,o,t[8],1770035416,7),r,i,t[9],2336552879,12),n,r,t[10],4294925233,17),o,n,t[11],2304563134,22),i=f(i,o=f(o,n=f(n,r,i,o,t[12],1804603682,7),r,i,t[13],4254626195,12),n,r,t[14],2792965006,17),o,n,t[15],1236535329,22),i=c(i,o=c(o,n=c(n,r,i,o,t[1],4129170786,5),r,i,t[6],3225465664,9),n,r,t[11],643717713,14),o,n,t[0],3921069994,20),i=c(i,o=c(o,n=c(n,r,i,o,t[5],3593408605,5),r,i,t[10],38016083,9),n,r,t[15],3634488961,14),o,n,t[4],3889429448,20),i=c(i,o=c(o,n=c(n,r,i,o,t[9],568446438,5),r,i,t[14],3275163606,9),n,r,t[3],4107603335,14),o,n,t[8],1163531501,20),i=c(i,o=c(o,n=c(n,r,i,o,t[13],2850285829,5),r,i,t[2],4243563512,9),n,r,t[7],1735328473,14),o,n,t[12],2368359562,20),i=h(i,o=h(o,n=h(n,r,i,o,t[5],4294588738,4),r,i,t[8],2272392833,11),n,r,t[11],1839030562,16),o,n,t[14],4259657740,23),i=h(i,o=h(o,n=h(n,r,i,o,t[1],2763975236,4),r,i,t[4],1272893353,11),n,r,t[7],4139469664,16),o,n,t[10],3200236656,23),i=h(i,o=h(o,n=h(n,r,i,o,t[13],681279174,4),r,i,t[0],3936430074,11),n,r,t[3],3572445317,16),o,n,t[6],76029189,23),i=h(i,o=h(o,n=h(n,r,i,o,t[9],3654602809,4),r,i,t[12],3873151461,11),n,r,t[15],530742520,16),o,n,t[2],3299628645,23),i=l(i,o=l(o,n=l(n,r,i,o,t[0],4096336452,6),r,i,t[7],1126891415,10),n,r,t[14],2878612391,15),o,n,t[5],4237533241,21),i=l(i,o=l(o,n=l(n,r,i,o,t[12],1700485571,6),r,i,t[3],2399980690,10),n,r,t[10],4293915773,15),o,n,t[1],2240044497,21),i=l(i,o=l(o,n=l(n,r,i,o,t[8],1873313359,6),r,i,t[15],4264355552,10),n,r,t[6],2734768916,15),o,n,t[13],1309151649,21),i=l(i,o=l(o,n=l(n,r,i,o,t[4],4149444226,6),r,i,t[11],3174756917,10),n,r,t[2],718787259,15),o,n,t[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+i|0,this._d=this._d+o|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=o.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=s},function(t,e,n){var r=n(98),i=n(100),o=n(182);t.exports={Curve:i,Point:r,getCurveByName:o}},function(t,e,n){"use strict";var r=n(1),i=n(60),o=n(101),u=n(102),s=n(12);function a(t){s.call(this,"digest"),this._hash=t}r(a,s),a.prototype._update=function(t){this._hash.update(t)},a.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new o:new a(u(t))}},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(197),o=n(202),u=n(3),s=o.create;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!==(void 0===t?"undefined":r(t)))throw new TypeError("definitions is a required parameter");if(e.customTypes)for(var n in t=Object.assign({},t),e.customTypes)delete t[n];var o=i(e),u=s(t,o),c=u.errors,h=u.structs;return{errors:c,structs:h,types:o,extend:function(e){return function t(e,n){var r=Object.assign({},e,n),i=s(r,o),u=i.structs;return{errors:i.errors,structs:u,extend:function(e){return t(r,e)},fromBuffer:a(o,u),toBuffer:f(o,u)}}(t,e)},fromBuffer:a(o,h),toBuffer:f(o,h)}};var a=function(t,n){return function(i,s){u.equal(void 0===i?"undefined":r(i),"string","typeName (type or struct name)"),"string"==typeof s&&(s=e.from(s,"hex")),u(e.isBuffer(s),"expecting buf<hex|Buffer>");var a=t[i];return a=a?a():n[i],u(a,"missing type or struct: "+i),o.fromBuffer(a,s)}},f=function(t,e){return function(n,i){u.equal(void 0===n?"undefined":r(n),"string","typeName (type or struct name)"),u(null!=i,"value is required");var s=t[n];return s=s?s():e[n],u(s,"missing type or struct: "+n),o.toBuffer(s,i)}};t.exports.fromBuffer=o.fromBuffer,t.exports.toBuffer=o.toBuffer}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=o(n(65)),i=o(n(23));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(31),s=u.Signature,a=u.PublicKey,f=n(63),c=n(19),h=n(3),l=n(110),p=n(111),d=(p.isName,p.encodeName),y=p.decodeName,g=p.DecimalPad,m=p.DecimalImply,v=p.DecimalUnimply,b=p.printAsset,w=p.parseAsset;t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],n=function(e,n){var r=t.abiCache.abi(n),i=!0,o=!1,u=void 0;try{for(var s,a=r.abi.actions[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if(f.name===e){var c=r.structs[f.type];if(null!=c)return c}}}catch(t){o=!0,u=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw u}}var h=r.structs[e];if(null!=h)return h;throw new Error("Missing ABI action: "+e)},r=null==t.forceActionDataHex||t.forceActionDataHex,i=Object.assign({},k(t),T(n),I(t),M(n,r),t.override),o={name:function(){return[_]},public_key:function(){return[E(A)]},symbol:function(){return[B]},symbol_code:function(){return[C]},extended_symbol:function(){return[F]},asset:function(){return[x]},extended_asset:function(){return[S]},signature:function(){return[E(D)]}},u=Object.assign({},o,t.customTypes);(t=Object.assign({override:i},{customTypes:u},t)).sort=Object.assign({},t.sort),t.sort["action.authorization"]=!0,t.sort["signed_transaction.signature"]=!0,t.sort["authority.accounts"]=!0,t.sort["authority.keys"]=!0;var s=Object.assign({},l,e),a=f(s,t),c=a.structs,h=a.types,p=a.errors,d=a.fromBuffer,y=a.toBuffer;if(0!==p.length)throw new Error(JSON.stringify(p,null,4));return{structs:c,types:h,fromBuffer:d,toBuffer:y}};var _=function(t){return{fromByteBuffer:function(t){return y(t.readUint64(),!1)},appendByteBuffer:function(t,e){t.writeUint64(d(e,!1))},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"":e}}},E=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t,n,r){var i=e.map(function(e){return e(t,n,r)}),o=n.static_variant(i);return{fromByteBuffer:function(t){return o.fromByteBuffer(t)},appendByteBuffer:function(t,e){Array.isArray(e)||(e=[0,e]),o.appendByteBuffer(t,e)},fromObject:function(t){return Array.isArray(t)||(t=[0,t]),o.fromObject(t)[1]},toObject:function(t){return Array.isArray(t)||(t=[0,t]),o.toObject(t)[1]}}}},A=function(t){return{fromByteBuffer:function(n){var r=n.copy(n.offset,n.offset+33);n.skip(33);var i=e.from(r.toBinary(),"binary");return a.fromBuffer(i).toString(t.keyPrefix)},appendByteBuffer:function(e,n){var r=a.fromStringOrThrow(n,t.keyPrefix).toBuffer();e.append(r.toString("binary"),"binary")},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?(t.keyPrefix?t.keyPrefix:"EOS")+"6MRy..":e}}},B=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var n=e.readUint8(),r=e.toBinary(),i="",o=!0,u=!1,s=void 0;try{for(var a,f=r[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;if("\0"==c)break;i+=c}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}return n+","+i},appendByteBuffer:function(t,e){var n=w(e),r=n.symbol,i=n.precision;h(null!=i,"Precision unknown for symbol: "+e);var o="\0".repeat(7-r.length);t.append(String.fromCharCode(i)+r+o)},fromObject:function(t){h(null!=t,"Symbol is required: "+t);var e=w(t),n=e.symbol,r=e.precision;return null==r?n:r+","+n},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},C=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var n=e.toBinary(),r="",i=!0,o=!1,u=void 0;try{for(var s,a=n[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if("\0"==f)break;r+=f}}catch(t){o=!0,u=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw u}}return""+r},appendByteBuffer:function(t,e){var n=w(e).symbol,r="\0".repeat(8-n.length);t.append(n+r)},fromObject:function(t){return h(null!=t,"Symbol is required: "+t),w(t).symbol},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},F=function(t,e,n){var o=n.symbol(t),u=n.name(t);return{fromByteBuffer:function(t){return o.fromByteBuffer(t)+"@"+u.fromByteBuffer(t)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"string","Invalid extended symbol: "+e);var n=e.split("@"),s=(0,r.default)(n,2),a=s[0],f=s[1];h(null!=f,"Missing @contract suffix in extended symbol: "+e),o.appendByteBuffer(t,a),u.appendByteBuffer(t,f)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"SYS@contract":e}}},x=function(t,e,n){var r=e.int64(t),i=n.symbol(t);return{fromByteBuffer:function(t){var e=r.fromByteBuffer(t);h(null!=e,"amount");var n=i.fromByteBuffer(t),o=w(""+n),u=o.precision,s=o.symbol;return h(null!=u,"precision"),h(null!=s,"symbol"),v(e,u)+" "+s},appendByteBuffer:function(t,e){var n=w(e),o=n.amount,u=n.precision,s=n.symbol;h(null!=o,"amount"),h(null!=u,"precision"),h(null!=s,"symbol"),r.appendByteBuffer(t,m(o,u)),i.appendByteBuffer(t,u+","+s)},fromObject:function(t){var e=w(t),n=e.amount,r=e.precision,i=e.symbol;return h(null!=n,"amount"),h(null!=r,"precision"),h(null!=i,"symbol"),g(n,r)+" "+i},toObject:function(e){if(t.defaults&&null==e)return"0.0001 SYS";var n=w(e),r=n.amount,i=n.precision,o=n.symbol;return h(null!=r,"amount"),h(null!=i,"precision"),h(null!=o,"symbol"),g(r,i)+" "+o}}},S=function(t,e,n){var o=n.asset(t),u=n.name(t);return{fromByteBuffer:function(t){var e=o.fromByteBuffer(t),n=u.fromByteBuffer(t);return w(e+"@"+n)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object, got "+(void 0===e?"undefined":(0,i.default)(e)));var n=b(e),s=n.split("@"),a=(0,r.default)(s,2)[1];h.equal(void 0===a?"undefined":(0,i.default)(a),"string","Invalid extended asset: "+e),o.appendByteBuffer(t,n),u.appendByteBuffer(t,a)},fromObject:function(t){var e={};"string"==typeof t?Object.assign(e,w(t)):"object"===(void 0===t?"undefined":(0,i.default)(t))?Object.assign(e,t):h(!1,"expecting extended_asset<object|string>, got: "+(void 0===t?"undefined":(0,i.default)(t)));var n=e.amount,r=e.precision,o=e.symbol,u=e.contract;return h(null!=n,"missing amount"),h(null!=r,"missing precision"),h(null!=o,"missing symbol"),h(null!=u,"missing contract"),{amount:n,precision:r,symbol:o,contract:u}},toObject:function(e){if(t.defaults&&null==e)return{amount:"1.0000",precision:4,symbol:"SYS",contract:"eosio.token"};h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object");var n=e.amount,r=e.precision,o=e.symbol,u=e.contract;return{amount:g(n,r),precision:r,symbol:o,contract:u}}}},D=function(t,e){var n=e.fixed_bytes65(t);return{fromByteBuffer:function(t){var e=n.fromByteBuffer(t);return s.from(e).toString()},appendByteBuffer:function(t,e){var r=s.from(e);n.appendByteBuffer(t,r.toBuffer())},fromObject:function(t){return s.from(t).toString()},toObject:function(e){return t.defaults&&null==e?"SIG_K1_bas58signature..":s.from(e).toString()}}},k=function(t){return{"authority.fromObject":function(e){if(a.fromString(e,t.keyPrefix))return{threshold:1,keys:[{key:e,weight:1}]};if("string"==typeof e){var n=e.split("@"),i=(0,r.default)(n,2),o=i[0],u=i[1];return{threshold:1,accounts:[{permission:{actor:o,permission:void 0===u?"active":u},weight:1}]}}}}},T=function(t){return{"abi_def.fromObject":function(t){if("string"==typeof t){var n=e.from(t,"hex").toString();return 0===n.length&&(n=e.from(t).toString()),JSON.parse(n)}return e.isBuffer(t)?JSON.parse(t.toString()):null},"setabi.abi.appendByteBuffer":function(n){n.fields;var r=n.object,o=n.b,u=t("abi_def","eosio"),s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);e.isBuffer(r.abi)?s.append(r.abi):"object"==(0,i.default)(r.abi)&&u.appendByteBuffer(s,r.abi),o.writeVarint32(s.offset),o.append(s.copy(0,s.offset),"binary")}}},I=function(t){return{"setcode.code.fromObject":function(n){var r=n.object,i=n.result;try{var o=r.code.toString();if(/^\s*\(module/.test(o)){var u=t.binaryen;h(null!=u,'required: config.binaryen = require("binaryen")'),t.debug&&console.log("Assembling WASM..");var s=e.from(u.parseText(o).emitBinary());i.code=s}else i.code=r.code}catch(t){throw console.error(t,r.code),t}}}},M=function(t,n){return{"action.data.fromByteBuffer":function(n){var r=n.fields,i=n.object,o=n.b,u=n.config,s=""==(i.name||"")?r.data:t(i.name,i.account);if(s)o.readVarint32(),i.data=s.fromByteBuffer(o,u);else{var a=o.readVarint32(),f=o.copy(o.offset,o.offset+a);o.skip(a),i.data=e.from(f.toBinary(),"binary")}},"action.data.appendByteBuffer":function(n){var r=n.fields,i=n.object,o=n.b,u=""==(i.name||"")?r.data:t(i.name,i.account);if(u){var s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);u.appendByteBuffer(s,i.data),o.writeVarint32(s.offset),o.append(s.copy(0,s.offset),"binary")}else{var a="string"==typeof i.data?e.from(i.data,"hex"):i.data;if(!e.isBuffer(a))throw new TypeError("Unknown struct '"+i.name+"' for contract '"+i.account+"', locate this struct or provide serialized action.data");o.writeVarint32(a.length),o.append(a.toString("binary"),"binary")}},"action.data.fromObject":function(n){var r=n.fields,o=n.object,u=n.result,s=o.data,a=o.name,c=""==(a||"")?r.data:t(a,o.account);if(c)if("object"===(void 0===s?"undefined":(0,i.default)(s)))u.data=c.fromObject(s);else{if("string"!=typeof s)throw new TypeError("Expecting hex string or object in action.data");var h=e.from(s,"hex");u.data=f.fromBuffer(c,h)}else u.data=s},"action.data.toObject":function(r){var i=r.fields,o=r.object,u=r.result,s=r.config,a=o||{},f=a.data,h=a.name,l=""==(h||"")?i.data:t(h,o.account);if(l){if(n){var p=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);return f&&l.appendByteBuffer(p,f),void(u.data=p.copy(0,p.offset).toString("hex"))}u.data=l.toObject(f,s)}else u.data=e.isBuffer(f)?f.toString("hex"):f}}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";e.__esModule=!0;var r=o(n(218)),i=o(n(221));function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(){return function(t,e){if(Array.isArray(t))return t;if((0,r.default)(Object(t)))return function(t,e){var n=[],r=!0,o=!1,u=void 0;try{for(var s,a=(0,i.default)(t);!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){o=!0,u=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw u}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(112),s=n(22),a=n(236),f=n(256),c=n(259),h=n(260),l=s.createLogger("chain"),p=n(261),d={ERR_TRANSFER_FAILED:"ERR_TRANSFER_FAILED",ERR_TRANSCAL_FAILED:"ERR_TRANSCAL_FAILED",ERR_TRANSEND_FAILED:"ERR_TRANSEND_FAILED"},y=function(t){function e(){var e=t.call(this)||this;return e._events=new h.default,e.events.enableEvents(d),e}return r(e,t),Object.defineProperty(e.prototype,"events",{get:function(){return this._events||(this._events=new h.default)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"chain",{get:function(){return new a.default(this.eosClient)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kh",{get:function(){return new f.default(this.chain)},enumerable:!0,configurable:!0}),e.prototype.getAccountInfo=function(t){return i(this,void 0,void 0,function(){var e,n,r;return o(this,function(i){switch(i.label){case 0:return n=(e=this.chain).getAccountInfo,(r=t)?[3,2]:[4,this.getIdentity()];case 1:r=i.sent().name,i.label=2;case 2:return[4,n.apply(e,[r])];case 3:return[2,i.sent()]}})})},e.prototype.getBalance=function(t,e,n){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var r,i,u;return o(this,function(o){switch(o.label){case 0:return i=(r=this.chain).getBalance,(u=t)?[3,2]:[4,this.getIdentity()];case 1:u=o.sent().name,o.label=2;case 2:return[2,i.apply(r,[u,e,n])]}})})},e.prototype.getBalances=function(t,e){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var n,r,i;return o(this,function(o){switch(o.label){case 0:return r=(n=this.chain).getBalances,(i=t)?[3,2]:[4,this.getIdentity()];case 1:i=o.sent().name,o.label=2;case 2:return[2,r.apply(n,[i,e])]}})})},e.prototype.getBalanceAsset=function(t,e){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var n;return o(this,function(r){switch(r.label){case 0:return[4,this.getBalance(t,e)];case 1:return n=r.sent(),[2,u.default.parse(n)]}})})},e.prototype.transfer=function(t,e,n){return void 0===n&&(n=""),i(this,void 0,void 0,function(){var r,i,u=this;return o(this,function(o){switch(o.label){case 0:return i=(r=this.chain).transfer,[4,this.getIdentity()];case 1:return[4,i.apply(r,[o.sent(),t,e,n,function(t){return u.events.emitEvent(d.ERR_TRANSCAL_FAILED,t)}])];case 2:return[2,o.sent()]}})})},e.prototype.transcal=function(t,e,n){for(var r=[],u=3;u<arguments.length;u++)r[u-3]=arguments[u];return i(this,void 0,void 0,function(){var i,u,s=this;return o(this,function(o){switch(o.label){case 0:return u=(i=this.kh).transcal,[4,this.getIdentity()];case 1:return[4,u.apply(i,[o.sent(),t,e,n,r,function(t){return s.events.emitEvent(d.ERR_TRANSCAL_FAILED,t)}])];case 2:return[2,o.sent()]}})})},e.prototype.call=function(t,e,n){return i(this,void 0,void 0,function(){var r,i;return o(this,function(o){switch(o.label){case 0:return[4,this.getIdentity()];case 1:return r=o.sent(),[4,this.chain.call(t,e,n,{actor:r.name,permission:r.authority})];case 2:return(i=o.sent())&&l.info("call operation dealed, txID: "+i.transaction_id),[2,i]}})})},e.prototype.newAccount=function(t,e,n){return i(this,void 0,void 0,function(){var r;return o(this,function(i){switch(i.label){case 0:if(!e)throw new Error("newAccount : active key error ");return n||(n=e),[4,this.getIdentity()];case 1:if(r=i.sent(),!this.eosClient)throw new Error("eosClient is not exist");return[4,this.eosClient.transaction(function(i){i.newaccount({creator:r.name,name:t,owner:n,active:e}),i.buyrambytes({payer:r.name,receiver:t,bytes:8192}),i.delegatebw({from:r.name,receiver:t,stake_net_quantity:"1.0000 EOS",stake_cpu_quantity:"1.0000 EOS",transfer:0})})];case 2:return[2,i.sent()]}})})},e.prototype.version=function(){return p.name+" # "+p.version},e.prototype.help=function(){return"\n```js\n      =============================================================\n\n               -----      ------        ------      -------\n              -----     -----          ------      -------\n             -----   -----            ------      -------\n            -----  -----             ------      -------\n           ----------                ----- ---- ------\n          -----  -----              ----- ---- ------\n         -----    -----           ------      -------\n        -----      ------        ------      -------\n       ------       -------     ------      -------\n      --------      ---------  ------      -------\n\n===========================================================\n```\n---\n\n# eosplayer "+this.version+'\n\n## Usage of eosplayer\n\n### Events\n\n`ERR_TRANSFER_FAILED`\n`ERR_TRANSCAL_FAILED`\n`ERR_TRANSEND_FAILED`\n\n### APIs\n\n```js\n{String} get help // get help info of usage\n{String} get version // get the version info\n{ChainHelper} get chain // get the chain helper\n{KhHelper} get kh // get the kh contract helper\n\n{Void} eosplayer.event.setEvent(event, fnCallback, context) //listen to a event\n\n{Eos} get eosplayer.eosClient // get eos instance\n{Identity} async eosplayer.getIdentity() // get identity\n\n{AccountInfo} async eosplayer.getAccountInfo(account_name = identity.name)\n    // get account info for any user\n\n{String} async eosplayer.getBalance(account_name = undefined, code = "eosio.token", symbolName = undefined)\n    // get balance string of a account. ex. "1.0000 EOS", null means that the account dosen\'t have any token,\n\n{Array.<String>} async getBalances(account_name = undefined, code = "eosio.token")\n    // get balances\n\n{String} async eosplayer.getBalanceAsset(account_name = undefined, code = "eosio.token")\n    // get balance structure of a account. ex. {val:1, sym:"EOS", decimal:4}\n\n{Tx} async eosplayer.transfer(target, quantity, memo = "")\n    // transfer tokens to target\n\n{Tx} async eosplayer.transcal(code, quantity, func, ...args)\n    // send a action of transcal to contract\n\n{Tx} async eosplayer.call(code, func, jsonData)\n    // send a action to contract\n\n{Tx} async eosplayer.newAccount(name, activeKey, ownerKey)\n    // create a account with public key\n```\n\n'+a.default.help()},e}(c.default);e.Player=y},function(t,e,n){"use strict";(function(e){var r=n(4),i=n(241),o={"Content-Type":"application/x-www-form-urlencoded"};function u(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var s={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=n(114):void 0!==e&&(t=n(114)),t}(),transformRequest:[function(t,e){return i(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(u(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(u(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(t){s.headers[t]={}}),r.forEach(["post","put","patch"],function(t){s.headers[t]=r.merge(o)}),t.exports=s}).call(this,n(8))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o={node:{chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",mockTransactions:function(){return null},expireInSeconds:60,broadcast:!0,debug:!1,sign:!0},urls:["https://mars.fn.eosbixin.com","https://eos.eoscafeblock.com","https://api.eosdublin.io"]},u=function(t){function e(e){var n=t.call(this)||this;n._urls=[],n._nodeConfigs=[];var r=e.node,u=e.urls;return n._conf=i({},o.node,r),n._urls=u,n._nodeConfigs=n._urls.map(function(t){var e={chainId:""};for(var r in n._conf)n._conf.hasOwnProperty(r)&&(e[r]=n._conf[r]);return e.httpEndpoint=t,e}),n}return r(e,t),e}(n(66).Player);e.MultiSourcePlayer=u},function(t,e,n){"use strict";var r=o(n(72)),i=o(n(23));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(31),s=n(63),a=n(107),f=n(3),c=n(64),h=n(226),l=n(227),p=n(111),d=n(110),y=n(228),g=n(229),m=n(230),v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={httpEndpoint:"http://127.0.0.1:8888",debug:!1,verbose:!1,broadcast:!0,logger:{log:function(){var e;return t.verbose?(e=console).log.apply(e,arguments):null},error:function(){var e;return t.verbose?(e=console).error.apply(e,arguments):null}},sign:!0};function n(t,e){Object.keys(e).forEach(function(n){void 0===t[n]&&(t[n]=e[n])})}return n(t,e),n(t.logger,e.logger),function(t){var e=null!=t.httpEndpoint?a(t):null;t.network=e;var n=[],r=h(e,t);n.push(r.abi("eosio.null",m)),n.push(r.abi("eosio.token",y)),n.push(r.abi("eosio",g)),t.chainId||(t.chainId="cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f");e&&function(t,e,n){t.getInfo({}).then(function(t){t.chain_id!==e&&n.log&&n.log("chainId mismatch, signatures will not match transaction authority. expected "+e+" !== actual "+t.chain_id)}).catch(function(t){n.error&&n.error("Warning, unable to validate chainId: "+t.message)})}(e,t.chainId,t.logger);if(null!=t.mockTransactions){if("string"==typeof t.mockTransactions){var o=t.mockTransactions;t.mockTransactions=function(){return o}}f.equal((0,i.default)(t.mockTransactions),"function","config.mockTransactions")}var u=c(t),s=u.structs,d=u.types,v=u.fromBuffer,w=u.toBuffer,_=function(t,e,n,r){var i=t.network,o=Object.assign({},i),u=l(e,i,n,t,r);return function(t,e,n){for(var r in t)if(e[r])throw new TypeError(n+": "+r)}(o,u,"Conflicting methods in EosApi and Transaction Api"),Object.assign(o,u),o}(t,a,s,n);Object.assign(_,{config:function(t){var e=new Set(["httpEndpoint","abiCache","chainId","expireInSeconds"]),n=new Set(["verbose","debug","broadcast","logger","sign"]),r={};return Object.keys(t).forEach(function(i){Object.defineProperty(r,i,{set:function(e){if(!n.has(i))throw new Error("Access denied");t[i]=e},get:function(){if(e.has(i)||n.has(i))return t[i];throw new Error("Access denied")}})}),r}(t),fc:{structs:s,types:d,fromBuffer:v,toBuffer:w,abiCache:r},modules:{format:p}}),t.signProvider||(t.signProvider=b(_,t));return _}(t)};t.exports=v,Object.assign(v,{version:"16.0.0",modules:{format:p,api:a,ecc:u,json:{api:a.api,schema:d},Fcbuffer:s},Testnet:function(t){return console.error("deprecated, change Eos.Testnet(..) to just Eos(..)"),v(t)},Localnet:function(t){return console.error("deprecated, change Eos.Localnet(..) to just Eos(..)"),v(t)}});var b=function(t,e){return function(n){var i,o,s,a,c,h,l,p,d,y,g,m,v,b,w,_,E,A,B,C=n.sign,F=n.buf,x=n.transaction,S=n.optionsKeyProvider;return r.default.async(function(n){for(;;)switch(n.prev=n.next){case 0:if(i=S||e.keyProvider){n.next=3;break}throw new TypeError("This transaction requires a keyProvider for signing");case 3:return o=i,"function"==typeof i&&(o=i({transaction:x})),n.next=7,r.default.awrap(Promise.resolve(o));case 7:if(o=n.sent,Array.isArray(o)||(o=[o]),(o=o.map(function(t){try{return{private:u.PrivateKey(t).toString()}}catch(e){return{public:u.PublicKey(t).toString()}}f(!1,"expecting public or private keys from keyProvider")})).length){n.next=12;break}throw new Error("missing key, check your keyProvider");case 12:if(1!==o.length||!o[0].private){n.next=15;break}return s=o[0].private,n.abrupt("return",C(F,s));case 15:if(null!=e.httpEndpoint){n.next=37;break}for(a=[],c=!0,h=!1,l=void 0,n.prev=20,p=o[Symbol.iterator]();!(c=(d=p.next()).done);c=!0)y=d.value,a.push(C(F,y.private));n.next=28;break;case 24:n.prev=24,n.t0=n.catch(20),h=!0,l=n.t0;case 28:n.prev=28,n.prev=29,!c&&p.return&&p.return();case 31:if(n.prev=31,!h){n.next=34;break}throw l;case 34:return n.finish(31);case 35:return n.finish(28);case 36:return n.abrupt("return",a);case 37:for(g=new Map,m=!0,v=!1,b=void 0,n.prev=41,w=o[Symbol.iterator]();!(m=(_=w.next()).done);m=!0)E=_.value,A=null!=E.private,null!=E.public,A?g.set(u.privateToPublic(E.private),E.private):g.set(E.public,null);n.next=49;break;case 45:n.prev=45,n.t1=n.catch(41),v=!0,b=n.t1;case 49:n.prev=49,n.prev=50,!m&&w.return&&w.return();case 52:if(n.prev=52,!v){n.next=55;break}throw b;case 55:return n.finish(52);case 56:return n.finish(49);case 57:return B=Array.from(g.keys()),n.abrupt("return",t.getRequiredKeys(x,B).then(function(t){var e=t.required_keys;if(!e.length)throw new Error("missing required keys for "+JSON.stringify(x));var n=[],r=[],o=!0,s=!1,a=void 0;try{for(var c,h=e[Symbol.iterator]();!(o=(c=h.next()).done);o=!0){var l=c.value;l=u.PublicKey(l).toString();var p=g.get(l);p?n.push(p):r.push(l)}}catch(t){s=!0,a=t}finally{try{!o&&h.return&&h.return()}finally{if(s)throw a}}0!==r.length&&(f("function"==typeof i,"keyProvider function is needed for private key lookup"),i({pubkeys:r}).forEach(function(t){n.push(t)}));var d=[],y=!0,m=!1,v=void 0;try{for(var b,w=n[Symbol.iterator]();!(y=(b=w.next()).done);y=!0){var _=b.value;d.push(C(F,_))}}catch(t){m=!0,v=t}finally{try{!y&&w.return&&w.return()}finally{if(m)throw v}}return d}));case 59:case"end":return n.stop()}},null,this,[[20,24,28,36],[29,,31,35],[41,45,49,57],[50,,52,56]])}}},function(t,e,n){var r;!function(i){"use strict";var o,u=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,s=Math.ceil,a=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",h=1e14,l=14,p=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,g=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function v(t){for(var e,n,r=1,i=t.length,o=t[0]+"";r<i;){for(e=t[r++]+"",n=l-e.length;n--;e="0"+e);o+=e}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function b(t,e){var n,r,i=t.c,o=e.c,u=t.s,s=e.s,a=t.e,f=e.e;if(!u||!s)return null;if(n=i&&!i[0],r=o&&!o[0],n||r)return n?r?0:-s:u;if(u!=s)return u;if(n=u<0,r=a==f,!i||!o)return r?0:!i^n?1:-1;if(!r)return a>f^n?1:-1;for(s=(a=i.length)<(f=o.length)?a:f,u=0;u<s;u++)if(i[u]!=o[u])return i[u]>o[u]^n?1:-1;return a==f?0:a>f^n?1:-1}function w(t,e,n,r){if(t<e||t>n||t!==(t<0?s(t):a(t)))throw Error(f+(r||"Argument")+("number"==typeof t?t<e||t>n?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function _(t){var e=t.c.length-1;return m(t.e/l)==e&&t.c[e]%2!=0}function E(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function A(t,e,n){var r,i;if(e<0){for(i=n+".";++e;i+=n);t=i+t}else if(++e>(r=t.length)){for(i=n,e-=r;--e;i+=n);t+=i}else e<r&&(t=t.slice(0,e)+"."+t.slice(e));return t}(o=function t(e){var n,r,i,o=R.prototype={constructor:R,toString:null,valueOf:null},B=new R(1),C=20,F=4,x=-7,S=21,D=-1e7,k=1e7,T=!1,I=1,M=0,O={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},j="0123456789abcdefghijklmnopqrstuvwxyz";function R(t,e){var n,o,s,f,h,d,y,g,m=this;if(!(m instanceof R))return new R(t,e);if(null==e){if(t instanceof R)return m.s=t.s,m.e=t.e,void(m.c=(t=t.c)?t.slice():t);if((d="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,h=t;h>=10;h/=10,f++);return m.e=f,void(m.c=[t])}g=String(t)}else{if(g=String(t),!u.test(g))return i(m,g,d);m.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(f=g.indexOf("."))>-1&&(g=g.replace(".","")),(h=g.search(/e/i))>0?(f<0&&(f=h),f+=+g.slice(h+1),g=g.substring(0,h)):f<0&&(f=g.length)}else{if(w(e,2,j.length,"Base"),g=String(t),10==e)return U(m=new R(t instanceof R?t:g),C+m.e+1,F);if(d="number"==typeof t){if(0*t!=0)return i(m,g,d,e);if(m.s=1/t<0?(g=g.slice(1),-1):1,R.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(c+t);d=!1}else m.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(n=j.slice(0,e),f=h=0,y=g.length;h<y;h++)if(n.indexOf(o=g.charAt(h))<0){if("."==o){if(h>f){f=y;continue}}else if(!s&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){s=!0,h=-1,f=0;continue}return i(m,String(t),d,e)}(f=(g=r(g,e,10,m.s)).indexOf("."))>-1?g=g.replace(".",""):f=g.length}for(h=0;48===g.charCodeAt(h);h++);for(y=g.length;48===g.charCodeAt(--y););if(g=g.slice(h,++y)){if(y-=h,d&&R.DEBUG&&y>15&&(t>p||t!==a(t)))throw Error(c+m.s*t);if((f=f-h-1)>k)m.c=m.e=null;else if(f<D)m.c=[m.e=0];else{if(m.e=f,m.c=[],h=(f+1)%l,f<0&&(h+=l),h<y){for(h&&m.c.push(+g.slice(0,h)),y-=l;h<y;)m.c.push(+g.slice(h,h+=l));g=g.slice(h),h=l-g.length}else h-=y;for(;h--;g+="0");m.c.push(+g)}}else m.c=[m.e=0]}function L(t,e,n,r){var i,o,u,s,a;if(null==n?n=F:w(n,0,8),!t.c)return t.toString();if(i=t.c[0],u=t.e,null==e)a=v(t.c),a=1==r||2==r&&u<=x?E(a,u):A(a,u,"0");else if(o=(t=U(new R(t),e,n)).e,s=(a=v(t.c)).length,1==r||2==r&&(e<=o||o<=x)){for(;s<e;a+="0",s++);a=E(a,o)}else if(e-=u,a=A(a,o,"0"),o+1>s){if(--e>0)for(a+=".";e--;a+="0");}else if((e+=o-s)>0)for(o+1==s&&(a+=".");e--;a+="0");return t.s<0&&i?"-"+a:a}function N(t,e){for(var n,r=1,i=new R(t[0]);r<t.length;r++){if(!(n=new R(t[r])).s){i=n;break}e.call(i,n)&&(i=n)}return i}function P(t,e,n){for(var r=1,i=e.length;!e[--i];e.pop());for(i=e[0];i>=10;i/=10,r++);return(n=r+n*l-1)>k?t.c=t.e=null:n<D?t.c=[t.e=0]:(t.e=n,t.c=e),t}function U(t,e,n,r){var i,o,u,f,c,p,y,g=t.c,m=d;if(g){t:{for(i=1,f=g[0];f>=10;f/=10,i++);if((o=e-i)<0)o+=l,u=e,y=(c=g[p=0])/m[i-u-1]%10|0;else if((p=s((o+1)/l))>=g.length){if(!r)break t;for(;g.length<=p;g.push(0));c=y=0,i=1,u=(o%=l)-l+1}else{for(c=f=g[p],i=1;f>=10;f/=10,i++);y=(u=(o%=l)-l+i)<0?0:c/m[i-u-1]%10|0}if(r=r||e<0||null!=g[p+1]||(u<0?c:c%m[i-u-1]),r=n<4?(y||r)&&(0==n||n==(t.s<0?3:2)):y>5||5==y&&(4==n||r||6==n&&(o>0?u>0?c/m[i-u]:0:g[p-1])%10&1||n==(t.s<0?8:7)),e<1||!g[0])return g.length=0,r?(e-=t.e+1,g[0]=m[(l-e%l)%l],t.e=-e||0):g[0]=t.e=0,t;if(0==o?(g.length=p,f=1,p--):(g.length=p+1,f=m[l-o],g[p]=u>0?a(c/m[i-u]%m[u])*f:0),r)for(;;){if(0==p){for(o=1,u=g[0];u>=10;u/=10,o++);for(u=g[0]+=f,f=1;u>=10;u/=10,f++);o!=f&&(t.e++,g[0]==h&&(g[0]=1));break}if(g[p]+=f,g[p]!=h)break;g[p--]=0,f=1}for(o=g.length;0===g[--o];g.pop());}t.e>k?t.c=t.e=null:t.e<D&&(t.c=[t.e=0])}return t}function q(t){var e,n=t.e;return null===n?t.toString():(e=v(t.c),e=n<=x||n>=S?E(e,n):A(e,n,"0"),t.s<0?"-"+e:e)}return R.clone=t,R.ROUND_UP=0,R.ROUND_DOWN=1,R.ROUND_CEIL=2,R.ROUND_FLOOR=3,R.ROUND_HALF_UP=4,R.ROUND_HALF_DOWN=5,R.ROUND_HALF_EVEN=6,R.ROUND_HALF_CEIL=7,R.ROUND_HALF_FLOOR=8,R.EUCLID=9,R.config=R.set=function(t){var e,n;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(w(n=t[e],0,g,e),C=n),t.hasOwnProperty(e="ROUNDING_MODE")&&(w(n=t[e],0,8,e),F=n),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((n=t[e])&&n.pop?(w(n[0],-g,0,e),w(n[1],0,g,e),x=n[0],S=n[1]):(w(n,-g,g,e),x=-(S=n<0?-n:n))),t.hasOwnProperty(e="RANGE"))if((n=t[e])&&n.pop)w(n[0],-g,-1,e),w(n[1],1,g,e),D=n[0],k=n[1];else{if(w(n,-g,g,e),!n)throw Error(f+e+" cannot be zero: "+n);D=-(k=n<0?-n:n)}if(t.hasOwnProperty(e="CRYPTO")){if((n=t[e])!==!!n)throw Error(f+e+" not true or false: "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw T=!n,Error(f+"crypto unavailable");T=n}else T=n}if(t.hasOwnProperty(e="MODULO_MODE")&&(w(n=t[e],0,9,e),I=n),t.hasOwnProperty(e="POW_PRECISION")&&(w(n=t[e],0,g,e),M=n),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(n=t[e]))throw Error(f+e+" not an object: "+n);O=n}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(n=t[e])||/^.$|[+-.\s]|(.).*\1/.test(n))throw Error(f+e+" invalid: "+n);j=n}}return{DECIMAL_PLACES:C,ROUNDING_MODE:F,EXPONENTIAL_AT:[x,S],RANGE:[D,k],CRYPTO:T,MODULO_MODE:I,POW_PRECISION:M,FORMAT:O,ALPHABET:j}},R.isBigNumber=function(t){return t instanceof R||t&&!0===t._isBigNumber||!1},R.maximum=R.max=function(){return N(arguments,o.lt)},R.minimum=R.min=function(){return N(arguments,o.gt)},R.random=function(){var t=9007199254740992*Math.random()&2097151?function(){return a(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var n,r,i,o,u,c=0,h=[],p=new R(B);if(null==e?e=C:w(e,0,g),o=s(e/l),T)if(crypto.getRandomValues){for(n=crypto.getRandomValues(new Uint32Array(o*=2));c<o;)(u=131072*n[c]+(n[c+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),n[c]=r[0],n[c+1]=r[1]):(h.push(u%1e14),c+=2);c=o/2}else{if(!crypto.randomBytes)throw T=!1,Error(f+"crypto unavailable");for(n=crypto.randomBytes(o*=7);c<o;)(u=281474976710656*(31&n[c])+1099511627776*n[c+1]+4294967296*n[c+2]+16777216*n[c+3]+(n[c+4]<<16)+(n[c+5]<<8)+n[c+6])>=9e15?crypto.randomBytes(7).copy(n,c):(h.push(u%1e14),c+=7);c=o/7}if(!T)for(;c<o;)(u=t())<9e15&&(h[c++]=u%1e14);for(o=h[--c],e%=l,o&&e&&(u=d[l-e],h[c]=a(o/u)*u);0===h[c];h.pop(),c--);if(c<0)h=[i=0];else{for(i=-1;0===h[0];h.splice(0,1),i-=l);for(c=1,u=h[0];u>=10;u/=10,c++);c<l&&(i-=l-c)}return p.e=i,p.c=h,p}}(),R.sum=function(){for(var t=1,e=arguments,n=new R(e[0]);t<e.length;)n=n.plus(e[t++]);return n},r=function(){function t(t,e,n,r){for(var i,o,u=[0],s=0,a=t.length;s<a;){for(o=u.length;o--;u[o]*=e);for(u[0]+=r.indexOf(t.charAt(s++)),i=0;i<u.length;i++)u[i]>n-1&&(null==u[i+1]&&(u[i+1]=0),u[i+1]+=u[i]/n|0,u[i]%=n)}return u.reverse()}return function(e,r,i,o,u){var s,a,f,c,h,l,p,d,y=e.indexOf("."),g=C,m=F;for(y>=0&&(c=M,M=0,e=e.replace(".",""),l=(d=new R(r)).pow(e.length-y),M=c,d.c=t(A(v(l.c),l.e,"0"),10,i,"0123456789"),d.e=d.c.length),f=c=(p=t(e,r,i,u?(s=j,"0123456789"):(s="0123456789",j))).length;0==p[--c];p.pop());if(!p[0])return s.charAt(0);if(y<0?--f:(l.c=p,l.e=f,l.s=o,p=(l=n(l,d,g,m,i)).c,h=l.r,f=l.e),y=p[a=f+g+1],c=i/2,h=h||a<0||null!=p[a+1],h=m<4?(null!=y||h)&&(0==m||m==(l.s<0?3:2)):y>c||y==c&&(4==m||h||6==m&&1&p[a-1]||m==(l.s<0?8:7)),a<1||!p[0])e=h?A(s.charAt(1),-g,s.charAt(0)):s.charAt(0);else{if(p.length=a,h)for(--i;++p[--a]>i;)p[a]=0,a||(++f,p=[1].concat(p));for(c=p.length;!p[--c];);for(y=0,e="";y<=c;e+=s.charAt(p[y++]));e=A(e,f,s.charAt(0))}return e}}(),n=function(){function t(t,e,n){var r,i,o,u,s=0,a=t.length,f=e%y,c=e/y|0;for(t=t.slice();a--;)s=((i=f*(o=t[a]%y)+(r=c*o+(u=t[a]/y|0)*f)%y*y+s)/n|0)+(r/y|0)+c*u,t[a]=i%n;return s&&(t=[s].concat(t)),t}function e(t,e,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(t[i]!=e[i]){o=t[i]>e[i]?1:-1;break}return o}function n(t,e,n,r){for(var i=0;n--;)t[n]-=i,i=t[n]<e[n]?1:0,t[n]=i*r+t[n]-e[n];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(r,i,o,u,s){var f,c,p,d,y,g,v,b,w,_,E,A,B,C,F,x,S,D=r.s==i.s?1:-1,k=r.c,T=i.c;if(!(k&&k[0]&&T&&T[0]))return new R(r.s&&i.s&&(k?!T||k[0]!=T[0]:T)?k&&0==k[0]||!T?0*D:D/0:NaN);for(w=(b=new R(D)).c=[],D=o+(c=r.e-i.e)+1,s||(s=h,c=m(r.e/l)-m(i.e/l),D=D/l|0),p=0;T[p]==(k[p]||0);p++);if(T[p]>(k[p]||0)&&c--,D<0)w.push(1),d=!0;else{for(C=k.length,x=T.length,p=0,D+=2,(y=a(s/(T[0]+1)))>1&&(T=t(T,y,s),k=t(k,y,s),x=T.length,C=k.length),B=x,E=(_=k.slice(0,x)).length;E<x;_[E++]=0);S=T.slice(),S=[0].concat(S),F=T[0],T[1]>=s/2&&F++;do{if(y=0,(f=e(T,_,x,E))<0){if(A=_[0],x!=E&&(A=A*s+(_[1]||0)),(y=a(A/F))>1)for(y>=s&&(y=s-1),v=(g=t(T,y,s)).length,E=_.length;1==e(g,_,v,E);)y--,n(g,x<v?S:T,v,s),v=g.length,f=1;else 0==y&&(f=y=1),v=(g=T.slice()).length;if(v<E&&(g=[0].concat(g)),n(_,g,E,s),E=_.length,-1==f)for(;e(T,_,x,E)<1;)y++,n(_,x<E?S:T,E,s),E=_.length}else 0===f&&(y++,_=[0]);w[p++]=y,_[0]?_[E++]=k[B]||0:(_=[k[B]],E=1)}while((B++<C||null!=_[0])&&D--);d=null!=_[0],w[0]||w.splice(0,1)}if(s==h){for(p=1,D=w[0];D>=10;D/=10,p++);U(b,o+(b.e=p+c*l-1)+1,u,d)}else b.e=c,b.r=+d;return b}}(),i=function(){var t=/^(-?)0([xbo])(?=\w[\w.]*$)/i,e=/^([^.]+)\.$/,n=/^\.([^.]+)$/,r=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(o,u,s,a){var c,h=s?u:u.replace(i,"");if(r.test(h))o.s=isNaN(h)?null:h<0?-1:1,o.c=o.e=null;else{if(!s&&(h=h.replace(t,function(t,e,n){return c="x"==(n=n.toLowerCase())?16:"b"==n?2:8,a&&a!=c?t:e}),a&&(c=a,h=h.replace(e,"$1").replace(n,"0.$1")),u!=h))return new R(h,c);if(R.DEBUG)throw Error(f+"Not a"+(a?" base "+a:"")+" number: "+u);o.c=o.e=o.s=null}}}(),o.absoluteValue=o.abs=function(){var t=new R(this);return t.s<0&&(t.s=1),t},o.comparedTo=function(t,e){return b(this,new R(t,e))},o.decimalPlaces=o.dp=function(t,e){var n,r,i,o=this;if(null!=t)return w(t,0,g),null==e?e=F:w(e,0,8),U(new R(o),t+o.e+1,e);if(!(n=o.c))return null;if(r=((i=n.length-1)-m(this.e/l))*l,i=n[i])for(;i%10==0;i/=10,r--);return r<0&&(r=0),r},o.dividedBy=o.div=function(t,e){return n(this,new R(t,e),C,F)},o.dividedToIntegerBy=o.idiv=function(t,e){return n(this,new R(t,e),0,1)},o.exponentiatedBy=o.pow=function(t,e){var n,r,i,o,u,c,h,p,d=this;if((t=new R(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+q(t));if(null!=e&&(e=new R(e)),u=t.e>14,!d.c||!d.c[0]||1==d.c[0]&&!d.e&&1==d.c.length||!t.c||!t.c[0])return p=new R(Math.pow(+q(d),u?2-_(t):+q(t))),e?p.mod(e):p;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new R(NaN);(r=!c&&d.isInteger()&&e.isInteger())&&(d=d.mod(e))}else{if(t.e>9&&(d.e>0||d.e<-1||(0==d.e?d.c[0]>1||u&&d.c[1]>=24e7:d.c[0]<8e13||u&&d.c[0]<=9999975e7)))return o=d.s<0&&_(t)?-0:0,d.e>-1&&(o=1/o),new R(c?1/o:o);M&&(o=s(M/l+2))}for(u?(n=new R(.5),c&&(t.s=1),h=_(t)):h=(i=Math.abs(+q(t)))%2,p=new R(B);;){if(h){if(!(p=p.times(d)).c)break;o?p.c.length>o&&(p.c.length=o):r&&(p=p.mod(e))}if(i){if(0===(i=a(i/2)))break;h=i%2}else if(U(t=t.times(n),t.e+1,1),t.e>14)h=_(t);else{if(0==(i=+q(t)))break;h=i%2}d=d.times(d),o?d.c&&d.c.length>o&&(d.c.length=o):r&&(d=d.mod(e))}return r?p:(c&&(p=B.div(p)),e?p.mod(e):o?U(p,M,F,void 0):p)},o.integerValue=function(t){var e=new R(this);return null==t?t=F:w(t,0,8),U(e,e.e+1,t)},o.isEqualTo=o.eq=function(t,e){return 0===b(this,new R(t,e))},o.isFinite=function(){return!!this.c},o.isGreaterThan=o.gt=function(t,e){return b(this,new R(t,e))>0},o.isGreaterThanOrEqualTo=o.gte=function(t,e){return 1===(e=b(this,new R(t,e)))||0===e},o.isInteger=function(){return!!this.c&&m(this.e/l)>this.c.length-2},o.isLessThan=o.lt=function(t,e){return b(this,new R(t,e))<0},o.isLessThanOrEqualTo=o.lte=function(t,e){return-1===(e=b(this,new R(t,e)))||0===e},o.isNaN=function(){return!this.s},o.isNegative=function(){return this.s<0},o.isPositive=function(){return this.s>0},o.isZero=function(){return!!this.c&&0==this.c[0]},o.minus=function(t,e){var n,r,i,o,u=this,s=u.s;if(e=(t=new R(t,e)).s,!s||!e)return new R(NaN);if(s!=e)return t.s=-e,u.plus(t);var a=u.e/l,f=t.e/l,c=u.c,p=t.c;if(!a||!f){if(!c||!p)return c?(t.s=-e,t):new R(p?u:NaN);if(!c[0]||!p[0])return p[0]?(t.s=-e,t):new R(c[0]?u:3==F?-0:0)}if(a=m(a),f=m(f),c=c.slice(),s=a-f){for((o=s<0)?(s=-s,i=c):(f=a,i=p),i.reverse(),e=s;e--;i.push(0));i.reverse()}else for(r=(o=(s=c.length)<(e=p.length))?s:e,s=e=0;e<r;e++)if(c[e]!=p[e]){o=c[e]<p[e];break}if(o&&(i=c,c=p,p=i,t.s=-t.s),(e=(r=p.length)-(n=c.length))>0)for(;e--;c[n++]=0);for(e=h-1;r>s;){if(c[--r]<p[r]){for(n=r;n&&!c[--n];c[n]=e);--c[n],c[r]+=h}c[r]-=p[r]}for(;0==c[0];c.splice(0,1),--f);return c[0]?P(t,c,f):(t.s=3==F?-1:1,t.c=[t.e=0],t)},o.modulo=o.mod=function(t,e){var r,i,o=this;return t=new R(t,e),!o.c||!t.s||t.c&&!t.c[0]?new R(NaN):!t.c||o.c&&!o.c[0]?new R(o):(9==I?(i=t.s,t.s=1,r=n(o,t,0,3),t.s=i,r.s*=i):r=n(o,t,0,I),(t=o.minus(r.times(t))).c[0]||1!=I||(t.s=o.s),t)},o.multipliedBy=o.times=function(t,e){var n,r,i,o,u,s,a,f,c,p,d,g,v,b,w,_=this,E=_.c,A=(t=new R(t,e)).c;if(!(E&&A&&E[0]&&A[0]))return!_.s||!t.s||E&&!E[0]&&!A||A&&!A[0]&&!E?t.c=t.e=t.s=null:(t.s*=_.s,E&&A?(t.c=[0],t.e=0):t.c=t.e=null),t;for(r=m(_.e/l)+m(t.e/l),t.s*=_.s,(a=E.length)<(p=A.length)&&(v=E,E=A,A=v,i=a,a=p,p=i),i=a+p,v=[];i--;v.push(0));for(b=h,w=y,i=p;--i>=0;){for(n=0,d=A[i]%w,g=A[i]/w|0,o=i+(u=a);o>i;)n=((f=d*(f=E[--u]%w)+(s=g*f+(c=E[u]/w|0)*d)%w*w+v[o]+n)/b|0)+(s/w|0)+g*c,v[o--]=f%b;v[o]=n}return n?++r:v.splice(0,1),P(t,v,r)},o.negated=function(){var t=new R(this);return t.s=-t.s||null,t},o.plus=function(t,e){var n,r=this,i=r.s;if(e=(t=new R(t,e)).s,!i||!e)return new R(NaN);if(i!=e)return t.s=-e,r.minus(t);var o=r.e/l,u=t.e/l,s=r.c,a=t.c;if(!o||!u){if(!s||!a)return new R(i/0);if(!s[0]||!a[0])return a[0]?t:new R(s[0]?r:0*i)}if(o=m(o),u=m(u),s=s.slice(),i=o-u){for(i>0?(u=o,n=a):(i=-i,n=s),n.reverse();i--;n.push(0));n.reverse()}for((i=s.length)-(e=a.length)<0&&(n=a,a=s,s=n,e=i),i=0;e;)i=(s[--e]=s[e]+a[e]+i)/h|0,s[e]=h===s[e]?0:s[e]%h;return i&&(s=[i].concat(s),++u),P(t,s,u)},o.precision=o.sd=function(t,e){var n,r,i,o=this;if(null!=t&&t!==!!t)return w(t,1,g),null==e?e=F:w(e,0,8),U(new R(o),t,e);if(!(n=o.c))return null;if(r=(i=n.length-1)*l+1,i=n[i]){for(;i%10==0;i/=10,r--);for(i=n[0];i>=10;i/=10,r++);}return t&&o.e+1>r&&(r=o.e+1),r},o.shiftedBy=function(t){return w(t,-p,p),this.times("1e"+t)},o.squareRoot=o.sqrt=function(){var t,e,r,i,o,u=this,s=u.c,a=u.s,f=u.e,c=C+4,h=new R("0.5");if(1!==a||!s||!s[0])return new R(!a||a<0&&(!s||s[0])?NaN:s?u:1/0);if(0==(a=Math.sqrt(+q(u)))||a==1/0?(((e=v(s)).length+f)%2==0&&(e+="0"),a=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),r=new R(e=a==1/0?"1e"+f:(e=a.toExponential()).slice(0,e.indexOf("e")+1)+f)):r=new R(a+""),r.c[0])for((a=(f=r.e)+c)<3&&(a=0);;)if(o=r,r=h.times(o.plus(n(u,o,c,1))),v(o.c).slice(0,a)===(e=v(r.c)).slice(0,a)){if(r.e<f&&--a,"9999"!=(e=e.slice(a-3,a+1))&&(i||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(U(r,r.e+C+2,1),t=!r.times(r).eq(u));break}if(!i&&(U(o,o.e+C+2,0),o.times(o).eq(u))){r=o;break}c+=4,a+=4,i=1}return U(r,r.e+C+1,F,t)},o.toExponential=function(t,e){return null!=t&&(w(t,0,g),t++),L(this,t,e,1)},o.toFixed=function(t,e){return null!=t&&(w(t,0,g),t=t+this.e+1),L(this,t,e)},o.toFormat=function(t,e,n){var r,i=this;if(null==n)null!=t&&e&&"object"==typeof e?(n=e,e=null):t&&"object"==typeof t?(n=t,t=e=null):n=O;else if("object"!=typeof n)throw Error(f+"Argument not an object: "+n);if(r=i.toFixed(t,e),i.c){var o,u=r.split("."),s=+n.groupSize,a=+n.secondaryGroupSize,c=n.groupSeparator||"",h=u[0],l=u[1],p=i.s<0,d=p?h.slice(1):h,y=d.length;if(a&&(o=s,s=a,a=o,y-=o),s>0&&y>0){for(o=y%s||s,h=d.substr(0,o);o<y;o+=s)h+=c+d.substr(o,s);a>0&&(h+=c+d.slice(o)),p&&(h="-"+h)}r=l?h+(n.decimalSeparator||"")+((a=+n.fractionGroupSize)?l.replace(new RegExp("\\d{"+a+"}\\B","g"),"$&"+(n.fractionGroupSeparator||"")):l):h}return(n.prefix||"")+r+(n.suffix||"")},o.toFraction=function(t){var e,r,i,o,u,s,a,c,h,p,y,g,m=this,b=m.c;if(null!=t&&(!(a=new R(t)).isInteger()&&(a.c||1!==a.s)||a.lt(B)))throw Error(f+"Argument "+(a.isInteger()?"out of range: ":"not an integer: ")+q(a));if(!b)return new R(m);for(e=new R(B),h=r=new R(B),i=c=new R(B),g=v(b),u=e.e=g.length-m.e-1,e.c[0]=d[(s=u%l)<0?l+s:s],t=!t||a.comparedTo(e)>0?u>0?e:h:a,s=k,k=1/0,a=new R(g),c.c[0]=0;p=n(a,e,0,1),1!=(o=r.plus(p.times(i))).comparedTo(t);)r=i,i=o,h=c.plus(p.times(o=h)),c=o,e=a.minus(p.times(o=e)),a=o;return o=n(t.minus(r),i,0,1),c=c.plus(o.times(h)),r=r.plus(o.times(i)),c.s=h.s=m.s,y=n(h,i,u*=2,F).minus(m).abs().comparedTo(n(c,r,u,F).minus(m).abs())<1?[h,i]:[c,r],k=s,y},o.toNumber=function(){return+q(this)},o.toPrecision=function(t,e){return null!=t&&w(t,1,g),L(this,t,e,2)},o.toString=function(t){var e,n=this,i=n.s,o=n.e;return null===o?i?(e="Infinity",i<0&&(e="-"+e)):e="NaN":(e=v(n.c),null==t?e=o<=x||o>=S?E(e,o):A(e,o,"0"):(w(t,2,j.length,"Base"),e=r(A(e,o,"0"),10,t,i,!0)),i<0&&n.c[0]&&(e="-"+e)),e},o.valueOf=o.toJSON=function(){return q(this)},o._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(o[Symbol.toStringTag]="BigNumber",o[Symbol.for("nodejs.util.inspect.custom")]=o.valueOf),null!=e&&R.set(e),R}()).default=o.BigNumber=o,void 0===(r=function(){return o}.call(e,n,e,t))||(t.exports=r)}()},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(21),s=n(235),a=n(66),f=n(39),c=n(22).createLogger("scatterPlayer"),h={ERR_GET_SCATTER_FAILED:"ERR_GET_SCATTER_FAILED",ERR_GET_IDENTITY_FAILED:"ERR_GET_IDENTITY_FAILED",ERR_LOGOUT_FAILED:"ERR_LOGOUT_FAILED",ERR_CONF_NOT_FOUND:"ERR_CONF_NOT_FOUND"},l=function(t){function e(e){var n=t.call(this)||this;return n._networks=e,n.identityReceiver=[],n.storage=new s.default({network_name:"dev",lang:"ch"}),n.events.enableEvents(h),c.info("eos player created: \n"+n.netName+" \n"+JSON.stringify(n.netConf,null,2)),n}return r(e,t),e.prototype.switchNetwork=function(t){t in this._networks?(this.storage.set("network_name",t),this._eosClient=void 0,c.info("network changed to "+this.netName+" "+this.netConf+".")):c.warning("network "+t+" cannot find.")},e.prototype.setNetConf=function(t,e){this._networks[t]=e},Object.defineProperty(e.prototype,"netName",{get:function(){return this.storage.get("network_name")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"netConf",{get:function(){var t=this._networks[this.netName];return t||this.events.emitEvent(h.ERR_CONF_NOT_FOUND,new Error("cannot find config of "+this.netName)),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scatter",{get:function(){var t=window.scatter;if(!t){var e=new Error("scatter cannot found");this.events.emitEvent(h.ERR_GET_SCATTER_FAILED,e)}return t},enumerable:!0,configurable:!0}),e.prototype.getScatterAsync=function(t){return void 0===t&&(t=100),i(this,void 0,void 0,function(){var e;return o(this,function(n){switch(n.label){case 0:return window.scatter||!t--?[3,2]:(c.verbose("get scatter failed, retry :",t),[4,f.forMs(100)]);case 1:return n.sent(),[3,0];case 2:return window.scatter||(e=new Error("scatter cannot found"),this.events.emitEvent(h.ERR_GET_SCATTER_FAILED,e)),[2,window.scatter]}})})},e.prototype.login=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this.getIdentity()]})})},e.prototype.logout=function(){return i(this,void 0,void 0,function(){var t,e;return o(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,this.getScatterAsync()];case 1:return[4,n.sent().forgetIdentity()];case 2:return t=n.sent(),c.info("log out from "+this.storage.get("latest_chain_id")),[2,t];case 3:return e=n.sent(),this.events.emitEvent(h.ERR_LOGOUT_FAILED,e),[3,4];case 4:return[2]}})})},Object.defineProperty(e.prototype,"eosClient",{get:function(){if(!this._eosClient){var t=this.netConf;console.log("this.scatter",this.scatter),console.log("this.scatter.eos",this.scatter.eos);var e=t.httpEndpoint.indexOf(":"),n=t.httpEndpoint.indexOf(":",e+1),r=t.httpEndpoint.substr(0,e),i=n<0?t.httpEndpoint.substr(e+3):t.httpEndpoint.substr(e+3,n-e-3),o=n<0?"https"===r?"443":"80":t.httpEndpoint.substr(n+1);console.log("protocol",r,i,o),t.host=i,t.port=o,console.log("conf",t),this._eosClient=this.scatter.eos(t,u.Eos,{},r)}if(!this._eosClient)throw new Error("cannot create _eosClient");return this._eosClient},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return i(this,void 0,void 0,function(){function t(t){i=t}var e,n,r,i,u=this;return o(this,function(o){switch(o.label){case 0:return[4,this.getScatterAsync()];case 1:return e=o.sent(),n=this.storage.get("latest_chain_id"),r=this.netConf.chainId,n&&r!==n?(c.info("a changing of chain_id detected: "+n+" -> "+r+" "),[4,this.logout()]):[3,3];case 2:o.sent(),o.label=3;case 3:return this.storage.set("latest_chain_id",r),this.identityReceiver.push(t),this.identityReceiver.length<=1&&e.getIdentity({accounts:[this.netConf]}).then(function(){u.identityReceiver.forEach(function(t){return t(e.identity?e.identity.accounts.find(function(t){return"eos"===t.blockchain}):void 0)}),u.identityReceiver=[]}).catch(function(t){u.identityReceiver.forEach(function(e){return e(t)}),u.identityReceiver=[]}),[4,f.forCondition(function(){return!!i})];case 4:if(o.sent(),i instanceof Error||i.isError)throw this.events.emitEvent(h.ERR_GET_IDENTITY_FAILED,i),i;return[2,i]}})})},e.prototype.sign=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return i(this,void 0,void 0,function(){var n,r,i,u,s,a,f,h,l,p,d,y=this;return o(this,function(g){switch(g.label){case 0:return[4,this.getIdentity()];case 1:return n=g.sent(),r=n.name,[4,this.getAccountInfo(r)];case 2:if(!(i=g.sent().permissions))return c.warning("permissions of account "+r+" are not found."),[2];u=i.find(function(t){return t.perm_name===n.authority}),c.info("perm : "+JSON.stringify(u)),s=u.required_auth,a=s.accounts,f=s.keys,h=f||[],l=function(t){var n,i;return o(this,function(o){switch(o.label){case 0:return n=e[t],[4,Promise.all(a.map(function(t){return t.permission.actor+"@"+t.permission.permission}).map(function(t){return n.signKeyProvider[t]}).filter(function(t){return t}).map(function(t){return Promise.resolve(t(r,y.chain))}))];case 1:return i=o.sent(),h=h.concat(i.map(function(t){return{key:t}})),[2]}})},d=0,g.label=3;case 3:return e&&d<e.length?[5,l(d)]:[3,6];case 4:g.sent(),g.label=5;case 5:return d++,[3,3];case 6:p="",d=0,g.label=7;case 7:if(!(d<h.length))return[3,12];g.label=8;case 8:return g.trys.push([8,10,,11]),c.info("try sign ("+JSON.stringify(h[d])+") : "+t),[4,this.scatter.getArbitrarySignature(h[d].key,t)];case 9:return p=g.sent(),[3,12];case 10:return g.sent(),c.warning("try pub key failed "+h[d]),[3,11];case 11:return d++,[3,7];case 12:return[2,p]}})})},e.prototype.help=function(){return t.prototype.help.call(this)+"\n\n## Usage of eosplayer (for broswer)\n\n### Events\n\nERR_GET_SCATTER_FAILED\nERR_GET_IDENTITY_FAILED\nERR_LOGOUT_FAILED\n\n### APIs\n\n```js\n{void} eosplayer.switchNetwork(val) // switch network\n{void} eosplayer.setNetConf(network_name, conf) // add a network config at runtime\n\nget {Scatter} eosplayer.scatter // get scatter instance\nget {Scatter} async getScatterAsync(maxTry = 100) // get scatter instance\n\nget {string} eosplayer.netName // get current network name\nget {string} eosplayer.netConf // get current network config\n\nasync {Identity} eosplayer.login() // let user allow you using identity\nasync {void} eosplayer.logout() // return back the identity\n\nasync {string} sign(message) // sign a message with current identity\n```\n\n## Imported libs\n\n```js\nwindow.eosjs = Eos; /** the eosjs lib @see {@url https://www.npmjs.com/package/eosjs} */\nwindow.env = env; /** {isPc} */\nwindow.idb = idb; /** idb lib for browser storage @see {@url https://www.npmjs.com/package/idb } */\nwindow.BigNumber = BigNumber; /** big number @see {@url https://www.npmjs.com/package/bignumber.js} */\n\nwindow.kh.eos.Player\nwindow.kh.eos.ScatterPlayer\nwindow.eosplayer = new ScatterPlayer(networks);\n```\n"},e}(a.Player);e.ScatterPlayer=l},function(t,e,n){t.exports=n(123)},function(t,e,n){"use strict";var r=n(32),i=n(74),o=n(77),u=n(15),s=n(26),a=n(130),f=n(51),c=n(137),h=n(5)("iterator"),l=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,y,g,m){a(n,e,d);var v,b,w,_=function(t){if(!l&&t in C)return C[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},E=e+" Iterator",A="values"==y,B=!1,C=t.prototype,F=C[h]||C["@@iterator"]||y&&C[y],x=F||_(y),S=y?A?_("entries"):x:void 0,D="Array"==e&&C.entries||F;if(D&&(w=c(D.call(new t)))!==Object.prototype&&w.next&&(f(w,E,!0),r||"function"==typeof w[h]||u(w,h,p)),A&&F&&"values"!==F.name&&(B=!0,x=function(){return F.call(this)}),r&&!m||!l&&!B&&C[h]||u(C,h,x),s[e]=x,s[E]=p,y)if(v={values:A?x:_("values"),keys:g?x:_("keys"),entries:S},m)for(b in v)b in C||o(C,b,v[b]);else i(i.P+i.F*(l||B),e,v);return v}},function(t,e,n){var r=n(7),i=n(10),o=n(128),u=n(15),s=n(11),a=function(t,e,n){var f,c,h,l=t&a.F,p=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=t&a.W,v=p?i:i[e]||(i[e]={}),b=v.prototype,w=p?r:d?r[e]:(r[e]||{}).prototype;for(f in p&&(n=e),n)(c=!l&&w&&void 0!==w[f])&&s(v,f)||(h=c?w[f]:n[f],v[f]=p&&"function"!=typeof w[f]?n[f]:g&&c?o(h,r):m&&w[f]==h?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(h):y&&"function"==typeof h?o(Function.call,h):h,y&&((v.virtual||(v.virtual={}))[f]=h,t&a.R&&b&&!b[f]&&u(b,f,h)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,n){t.exports=!n(17)&&!n(33)(function(){return 7!=Object.defineProperty(n(76)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(25),i=n(7).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){t.exports=n(15)},function(t,e,n){var r=n(24),i=n(131),o=n(50),u=n(48)("IE_PROTO"),s=function(){},a=function(){var t,e=n(76)("iframe"),r=o.length;for(e.style.display="none",n(136).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[o[r]];return a()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[u]=t):n=a(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(11),i=n(18),o=n(133)(!1),u=n(48)("IE_PROTO");t.exports=function(t,e){var n,s=i(t),a=0,f=[];for(n in s)n!=u&&r(s,n)&&f.push(n);for(;e.length>a;)r(s,n=e[a++])&&(~o(f,n)||f.push(n));return f}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(79),i=n(50).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";(function(e){var r=n(84),i=n(19),o=n(157),u=n(3),s=n(29),a=n(38),f=n(14),c=i.Long;function h(t,n,r,c,h){if(!(t=a(t)))throw new TypeError("private_key is required");if(!(n=s(n)))throw new TypeError("public_key is required");if(!(r=p(r)))throw new TypeError("nonce is required");if(!e.isBuffer(c)){if("string"!=typeof c)throw new TypeError("message should be buffer or string");c=new e(c,"binary")}if(h&&"number"!=typeof h)throw new TypeError("checksum should be a number");var l=t.getSharedSecret(n),y=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);y.writeUint64(r),y.append(l.toString("binary"),"binary"),y=new e(y.copy(0,y.offset).toBinary(),"binary");var g=f.sha512(y),m=g.slice(32,48),v=g.slice(0,32),b=f.sha256(g);if(b=b.slice(0,4),b=i.fromBinary(b.toString("binary"),i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN).readUint32(),h){if(b!==h)throw new Error("Invalid key");c=function(t,n,r){u(t,"Missing cipher text"),t=d(t);var i=o.createDecipheriv("aes-256-cbc",n,r);return t=e.concat([i.update(t),i.final()])}(c,v,m)}else c=function(t,n,r){u(t,"Missing plain text"),t=d(t);var i=o.createCipheriv("aes-256-cbc",n,r);return t=e.concat([i.update(t),i.final()])}(c,v,m);return{nonce:r,message:c,checksum:b}}t.exports={encrypt:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){if(null===l){var t=new Uint8Array(r(2));l=parseInt(t[0]<<8|t[1],10)}var e=c.fromNumber(Date.now()),n=++l%65535;return(e=e.shiftLeft(16).or(c.fromNumber(n))).toString()}();return h(t,e,i,n)},decrypt:function(t,e,n,r,i){return h(t,e,n,r,i).message}};var l=null,p=function(t){return t?c.isLong(t)?t:c.fromString(t):t},d=function(t){return t?e.isBuffer(t)?t:new e(t,"binary"):t}}).call(this,n(2).Buffer)},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";(function(e,r){var i=n(0).Buffer,o=e.crypto||e.msCrypto;o&&o.getRandomValues?t.exports=function(t,n){if(t>65536)throw new Error("requested too many random bytes");var u=new e.Uint8Array(t);t>0&&o.getRandomValues(u);var s=i.from(u.buffer);if("function"==typeof n)return r.nextTick(function(){n(null,s)});return s}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,n(6),n(8))},function(t,e,n){var r={ECB:n(159),CBC:n(160),CFB:n(161),CFB8:n(162),CFB1:n(163),OFB:n(164),CTR:n(86),GCM:n(86)},i=n(88);for(var o in i)i[o].module=r[i[o].mode];t.exports=i},function(t,e,n){var r=n(27),i=n(0).Buffer,o=n(87);function u(t){var e=t._cipher.encryptBlockRaw(t._prev);return o(t._prev),e}e.encrypt=function(t,e){var n=Math.ceil(e.length/16),o=t._cache.length;t._cache=i.concat([t._cache,i.allocUnsafe(16*n)]);for(var s=0;s<n;s++){var a=u(t),f=o+16*s;t._cache.writeUInt32BE(a[0],f+0),t._cache.writeUInt32BE(a[1],f+4),t._cache.writeUInt32BE(a[2],f+8),t._cache.writeUInt32BE(a[3],f+12)}var c=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),r(e,c)}},function(t,e){t.exports=function(t){for(var e,n=t.length;n--;){if(255!==(e=t.readUInt8(n))){e++,t.writeUInt8(e,n);break}t.writeUInt8(0,n)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,n){var r=n(36),i=n(0).Buffer,o=n(12),u=n(1),s=n(176),a=n(27),f=n(87);function c(t,e,n,u){o.call(this);var a=i.alloc(4,0);this._cipher=new r.AES(e);var c=this._cipher.encryptBlock(a);this._ghash=new s(c),n=function(t,e,n){if(12===e.length)return t._finID=i.concat([e,i.from([0,0,0,1])]),i.concat([e,i.from([0,0,0,2])]);var r=new s(n),o=e.length,u=o%16;r.update(e),u&&(u=16-u,r.update(i.alloc(u,0))),r.update(i.alloc(8,0));var a=8*o,c=i.alloc(8);c.writeUIntBE(a,0,8),r.update(c),t._finID=r.state;var h=i.from(t._finID);return f(h),h}(this,n,c),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=u,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}u(c,o),c.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=i.alloc(e,0),this._ghash.update(e))}this._called=!0;var n=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(n),this._len+=t.length,n},c.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=a(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var n=0;t.length!==e.length&&n++;for(var r=Math.min(t.length,e.length),i=0;i<r;++i)n+=t[i]^e[i];return n}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},c.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},c.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},c.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=c},function(t,e,n){t.exports=i;var r=n(56).EventEmitter;function i(){r.call(this)}n(1)(i,r),i.Readable=n(57),i.Writable=n(172),i.Duplex=n(173),i.Transform=n(174),i.PassThrough=n(175),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",a));var u=!1;function s(){u||(u=!0,t.end())}function a(){u||(u=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(c(),0===r.listenerCount(this,"error"))throw t}function c(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",a),n.removeListener("error",f),t.removeListener("error",f),n.removeListener("end",c),n.removeListener("close",c),t.removeListener("close",c)}return n.on("error",f),t.on("error",f),n.on("end",c),n.on("close",c),t.on("close",c),t.emit("pipe",n),t}},function(t,e,n){"use strict";(function(e,r){var i=n(37);t.exports=b;var o,u=n(83);b.ReadableState=v;n(56).EventEmitter;var s=function(t,e){return t.listeners(e).length},a=n(92),f=n(0).Buffer,c=e.Uint8Array||function(){};var h=n(28);h.inherits=n(1);var l=n(165),p=void 0;p=l&&l.debuglog?l.debuglog("stream"):function(){};var d,y=n(166),g=n(93);h.inherits(b,a);var m=["error","close","destroy","pause","resume"];function v(t,e){o=o||n(13),t=t||{};var r=e instanceof o;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,u=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(u||0===u)?u:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=n(59).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function b(t){if(o=o||n(13),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function w(t,e,n,r,i){var o,u=t._readableState;null===e?(u.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,B(t)}(t,u)):(i||(o=function(t,e){var n;(function(t){return f.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(u,e)),o?t.emit("error",o):u.objectMode||e&&e.length>0?("string"==typeof e||u.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),r?u.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,u,e,!0):u.ended?t.emit("error",new Error("stream.push() after EOF")):(u.reading=!1,u.decoder&&!n?(e=u.decoder.write(e),u.objectMode||0!==e.length?_(t,u,e,!1):F(t,u)):_(t,u,e,!1))):r||(u.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(u)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&B(t)),F(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=f.from(t,e),e=""),n=!0),w(this,t,e,!1,n)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return d||(d=n(59).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var E=8388608;function A(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=E?t=E:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function B(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(C,t):C(t))}function C(t){p("emit readable"),t.emit("readable"),k(t)}function F(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(x,t,e))}function x(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function S(t){p("readable nexttick read 0"),t.read(0)}function D(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),k(t),e.flowing&&!e.reading&&t.read(0)}function k(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function T(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,u=t>o.length?o.length:t;if(u===o.length?i+=o:i+=o.slice(0,t),0===(t-=u)){u===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(u));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=f.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,u=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,u),0===(t-=u)){u===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(u));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function I(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(M,e,t))}function M(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function O(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}b.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?I(this):B(this),null;if(0===(t=A(t,e))&&e.ended)return 0===e.length&&I(this),null;var r,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=A(n,e))),null===(r=t>0?T(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&I(this)),null!==r&&this.emit("data",r),r},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,p("pipe count=%d opts=%j",o.pipesCount,e);var a=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?c:b;function f(e,r){p("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,p("cleanup"),t.removeListener("close",m),t.removeListener("finish",v),t.removeListener("drain",h),t.removeListener("error",g),t.removeListener("unpipe",f),n.removeListener("end",c),n.removeListener("end",b),n.removeListener("data",y),l=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function c(){p("onend"),t.end()}o.endEmitted?i.nextTick(a):n.once("end",a),t.on("unpipe",f);var h=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,k(t))}}(n);t.on("drain",h);var l=!1;var d=!1;function y(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==O(o.pipes,t))&&!l&&(p("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,d=!0),n.pause())}function g(e){p("onerror",e),b(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",v),b()}function v(){p("onfinish"),t.removeListener("close",m),b()}function b(){p("unpipe"),n.unpipe(t)}return n.on("data",y),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?u(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",g),t.once("close",m),t.once("finish",v),t.emit("pipe",n),o.flowing||(p("pipe resume"),n.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var u=O(e.pipes,t);return-1===u?this:(e.pipes.splice(u,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},b.prototype.on=function(t,e){var n=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&B(this):i.nextTick(S,this))}return n},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(D,t,e))}(this,t)),this},b.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(p("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(p("wrapped data"),n.decoder&&(i=n.decoder.write(i)),!n.objectMode||null!==i&&void 0!==i)&&((n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){p("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=T}).call(this,n(6),n(8))},function(t,e,n){t.exports=n(56).EventEmitter},function(t,e,n){"use strict";var r=n(37);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return o||u?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=o;var r=n(13),i=n(28);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",u)}function u(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){s(t,e,n)}):s(this,null,null)}function s(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(1),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){var r=n(36),i=n(0).Buffer,o=n(12);function u(t,e,n,u){o.call(this),this._cipher=new r.AES(e),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=u,this._mode=t}n(1)(u,o),u.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},u.prototype._final=function(){this._cipher.scrub()},t.exports=u},function(t,e,n){var r=n(0).Buffer,i=n(60);t.exports=function(t,e,n,o){if(r.isBuffer(t)||(t=r.from(t,"binary")),e&&(r.isBuffer(e)||(e=r.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var u=n/8,s=r.alloc(u),a=r.alloc(o||0),f=r.alloc(0);u>0||o>0;){var c=new i;c.update(f),c.update(t),e&&c.update(e),f=c.digest();var h=0;if(u>0){var l=s.length-u;h=Math.min(u,f.length),f.copy(s,l,0,h),u-=h}if(h<f.length&&o>0){var p=a.length-o,d=Math.min(o,f.length-h);f.copy(a,p,h,h+d),o-=d}}return f.fill(0),{key:s,iv:a}}},function(t,e,n){"use strict";var r=n(0).Buffer,i=n(90).Transform;function o(t){i.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(1)(o,i),o.prototype._transform=function(t,e,n){var r=null;try{this.update(t,e)}catch(t){r=t}n(r)},o.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},o.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var n=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)n[o++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)n[this._blockOffset++]=t[i++];for(var u=0,s=8*t.length;s>0;++u)this._length[u]+=s,(s=this._length[u]/4294967296|0)>0&&(this._length[u]-=4294967296*s);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return e},o.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=o},function(t,e,n){var r=n(3),i=n(0).Buffer,o=n(9),u=o.valueOf(3);function s(t,e,n,i){r.notStrictEqual(i,void 0,"Missing Z coordinate"),this.curve=t,this.x=e,this.y=n,this.z=i,this._zInv=null,this.compressed=!0}Object.defineProperty(s.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(s.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(s.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),s.fromAffine=function(t,e,n){return new s(t,e,n,o.ONE)},s.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},s.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new s(this.curve,this.x,t,this.z)},s.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var e=this.x,n=this.y,r=t.x,i=t.y.multiply(this.z).subtract(n.multiply(t.z)).mod(this.curve.p),o=r.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p);if(0===o.signum())return 0===i.signum()?this.twice():this.curve.infinity;var a=o.square(),f=a.multiply(o),c=e.multiply(a),h=i.square().multiply(this.z),l=h.subtract(c.shiftLeft(1)).multiply(t.z).subtract(f).multiply(o).mod(this.curve.p),p=c.multiply(u).multiply(i).subtract(n.multiply(f)).subtract(h.multiply(i)).multiply(t.z).add(i.multiply(f)).mod(this.curve.p),d=f.multiply(this.z).multiply(t.z).mod(this.curve.p);return new s(this.curve,l,p,d)},s.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,e=this.y,n=e.multiply(this.z).mod(this.curve.p),r=n.multiply(e).mod(this.curve.p),i=this.curve.a,o=t.square().multiply(u);0!==i.signum()&&(o=o.add(this.z.square().multiply(i)));var a=(o=o.mod(this.curve.p)).square().subtract(t.shiftLeft(3).multiply(r)).shiftLeft(1).multiply(n).mod(this.curve.p),f=o.multiply(u).multiply(t).subtract(r.shiftLeft(1)).shiftLeft(2).multiply(r).subtract(o.pow(3)).mod(this.curve.p),c=n.pow(3).shiftLeft(3).mod(this.curve.p);return new s(this.curve,a,f,c)},s.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var e=t,n=e.multiply(u),r=this.negate(),i=this,o=n.bitLength()-2;o>0;--o){var s=n.testBit(o),a=e.testBit(o);i=i.twice(),s!==a&&(i=i.add(s?this:r))}return i},s.prototype.multiplyTwo=function(t,e,n){for(var r=Math.max(t.bitLength(),n.bitLength())-1,i=this.curve.infinity,o=this.add(e);r>=0;){var u=t.testBit(r),s=n.testBit(r);i=i.twice(),u?i=s?i.add(o):i.add(this):s&&(i=i.add(e)),--r}return i},s.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return i.alloc(1,0);var e,n=this.affineX,r=this.affineY,o=this.curve.pLength;return t?(e=i.allocUnsafe(1+o)).writeUInt8(r.isEven()?2:3,0):((e=i.allocUnsafe(1+o+o)).writeUInt8(4,0),r.toBuffer(o).copy(e,1+o)),n.toBuffer(o).copy(e,1),e},s.decodeFrom=function(t,e){var n,i=e.readUInt8(0),u=4!==i,a=Math.floor((t.p.bitLength()+7)/8),f=o.fromBuffer(e.slice(1,1+a));if(u){r.equal(e.length,a+1,"Invalid sequence length"),r(2===i||3===i,"Invalid sequence tag");var c=3===i;n=t.pointFromX(c,f)}else{r.equal(e.length,1+a+a,"Invalid sequence length");var h=o.fromBuffer(e.slice(1+a));n=s.fromAffine(t,f,h)}return n.compressed=u,n},s.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},t.exports=s},function(t,e,n){function r(t,e,n){if(!(this instanceof r))return new r(t,e,n);null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}var i=r.prototype;i.__bigi=n(180).version,r.isBigInteger=function(t,e){return t&&t.__bigi&&(!e||t.__bigi===i.__bigi)},r.prototype.am=function(t,e,n,r,i,o){for(;--o>=0;){var u=e*this[t++]+n[r]+i;i=Math.floor(u/67108864),n[r++]=67108863&u}return i},r.prototype.DB=26,r.prototype.DM=67108863;var o=r.prototype.DV=1<<26;r.prototype.FV=Math.pow(2,52),r.prototype.F1=26,r.prototype.F2=0;var u,s,a="0123456789abcdefghijklmnopqrstuvwxyz",f=new Array;for(u="0".charCodeAt(0),s=0;s<=9;++s)f[u++]=s;for(u="a".charCodeAt(0),s=10;s<36;++s)f[u++]=s;for(u="A".charCodeAt(0),s=10;s<36;++s)f[u++]=s;function c(t){return a.charAt(t)}function h(t,e){var n=f[t.charCodeAt(e)];return null==n?-1:n}function l(t){var e=new r;return e.fromInt(t),e}function p(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}function d(t){this.m=t}function y(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function m(t,e){return t|e}function v(t,e){return t^e}function b(t,e){return t&~e}function w(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function _(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function E(){}function A(t){return t}function B(t){this.r2=new r,this.q3=new r,r.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}d.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},d.prototype.revert=function(t){return t},d.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},d.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},d.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},y.prototype.convert=function(t){var e=new r;return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(r.ZERO)>0&&this.m.subTo(e,e),e},y.prototype.revert=function(t){var e=new r;return t.copyTo(e),this.reduce(e),e},y.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],r=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},y.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},y.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},i.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},i.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+o:this.t=0},i.fromString=function(t,e){var n;if(16==e)n=4;else if(8==e)n=3;else if(256==e)n=8;else if(2==e)n=1;else if(32==e)n=5;else{if(4!=e)return void this.fromRadix(t,e);n=2}this.t=0,this.s=0;for(var i=t.length,o=!1,u=0;--i>=0;){var s=8==n?255&t[i]:h(t,i);s<0?"-"==t.charAt(i)&&(o=!0):(o=!1,0==u?this[this.t++]=s:u+n>this.DB?(this[this.t-1]|=(s&(1<<this.DB-u)-1)<<u,this[this.t++]=s>>this.DB-u):this[this.t-1]|=s<<u,(u+=n)>=this.DB&&(u-=this.DB))}8==n&&0!=(128&t[0])&&(this.s=-1,u>0&&(this[this.t-1]|=(1<<this.DB-u)-1<<u)),this.clamp(),o&&r.ZERO.subTo(this,this)},i.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},i.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},i.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},i.lShiftTo=function(t,e){var n,r=t%this.DB,i=this.DB-r,o=(1<<i)-1,u=Math.floor(t/this.DB),s=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)e[n+u+1]=this[n]>>i|s,s=(this[n]&o)<<r;for(n=u-1;n>=0;--n)e[n]=0;e[u]=s,e.t=this.t+u+1,e.s=this.s,e.clamp()},i.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var r=t%this.DB,i=this.DB-r,o=(1<<r)-1;e[0]=this[n]>>r;for(var u=n+1;u<this.t;++u)e[u-n-1]|=(this[u]&o)<<i,e[u-n]=this[u]>>r;r>0&&(e[this.t-n-1]|=(this.s&o)<<i),e.t=this.t-n,e.clamp()}},i.subTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]-t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r-=t[n],e[n++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[n++]=this.DV+r:r>0&&(e[n++]=r),e.t=n,e.clamp()},i.multiplyTo=function(t,e){var n=this.abs(),i=t.abs(),o=n.t;for(e.t=o+i.t;--o>=0;)e[o]=0;for(o=0;o<i.t;++o)e[o+n.t]=n.am(0,i[o],e,o,0,n.t);e.s=0,e.clamp(),this.s!=t.s&&r.ZERO.subTo(e,e)},i.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var r=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,r,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},i.divRemTo=function(t,e,n){var i=t.abs();if(!(i.t<=0)){var o=this.abs();if(o.t<i.t)return null!=e&&e.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=new r);var u=new r,s=this.s,a=t.s,f=this.DB-p(i[i.t-1]);f>0?(i.lShiftTo(f,u),o.lShiftTo(f,n)):(i.copyTo(u),o.copyTo(n));var c=u.t,h=u[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?u[c-2]>>this.F2:0),d=this.FV/l,y=(1<<this.F1)/l,g=1<<this.F2,m=n.t,v=m-c,b=null==e?new r:e;for(u.dlShiftTo(v,b),n.compareTo(b)>=0&&(n[n.t++]=1,n.subTo(b,n)),r.ONE.dlShiftTo(c,b),b.subTo(u,u);u.t<c;)u[u.t++]=0;for(;--v>=0;){var w=n[--m]==h?this.DM:Math.floor(n[m]*d+(n[m-1]+g)*y);if((n[m]+=u.am(0,w,n,v,0,c))<w)for(u.dlShiftTo(v,b),n.subTo(b,n);n[m]<--w;)n.subTo(b,n)}null!=e&&(n.drShiftTo(c,e),s!=a&&r.ZERO.subTo(e,e)),n.t=c,n.clamp(),f>0&&n.rShiftTo(f,n),s<0&&r.ZERO.subTo(n,n)}}},i.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},i.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},i.exp=function(t,e){if(t>4294967295||t<1)return r.ONE;var n=new r,i=new r,o=e.convert(this),u=p(t)-1;for(o.copyTo(n);--u>=0;)if(e.sqrTo(n,i),(t&1<<u)>0)e.mulTo(i,o,n);else{var s=n;n=i,i=s}return e.revert(n)},i.toString=function(t){var e;if(this.s<0)return"-"+this.negate().toString(t);if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,r=(1<<e)-1,i=!1,o="",u=this.t,s=this.DB-u*this.DB%e;if(u-- >0)for(s<this.DB&&(n=this[u]>>s)>0&&(i=!0,o=c(n));u>=0;)s<e?(n=(this[u]&(1<<s)-1)<<e-s,n|=this[--u]>>(s+=this.DB-e)):(n=this[u]>>(s-=e)&r,s<=0&&(s+=this.DB,--u)),n>0&&(i=!0),i&&(o+=c(n));return i?o:"0"},i.negate=function(){var t=new r;return r.ZERO.subTo(this,t),t},i.abs=function(){return this.s<0?this.negate():this},i.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},i.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+p(this[this.t-1]^this.s&this.DM)},i.byteLength=function(){return this.bitLength()>>3},i.mod=function(t){var e=new r;return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(r.ZERO)>0&&t.subTo(e,e),e},i.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new d(e):new y(e),this.exp(t,n)},E.prototype.convert=A,E.prototype.revert=A,E.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},E.prototype.sqrTo=function(t,e){t.squareTo(e)},B.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=new r;return t.copyTo(e),this.reduce(e),e},B.prototype.revert=function(t){return t},B.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},B.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},B.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],F=(1<<26)/C[C.length-1];i.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},i.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=l(n),o=new r,u=new r,s="";for(this.divRemTo(i,o,u);o.signum()>0;)s=(n+u.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,u);return u.intValue().toString(t)+s},i.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var n=this.chunkSize(e),i=Math.pow(e,n),o=!1,u=0,s=0,a=0;a<t.length;++a){var f=h(t,a);f<0?"-"==t.charAt(a)&&0==this.signum()&&(o=!0):(s=e*s+f,++u>=n&&(this.dMultiply(i),this.dAddOffset(s,0),u=0,s=0))}u>0&&(this.dMultiply(Math.pow(e,u)),this.dAddOffset(s,0)),o&&r.ZERO.subTo(this,this)},i.fromNumber=function(t,e,n){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,n),this.testBit(t-1)||this.bitwiseTo(r.ONE.shiftLeft(t-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(r.ONE.shiftLeft(t-1),this);else{var i=new Array,o=7&t;i.length=1+(t>>3),e.nextBytes(i),o>0?i[0]&=(1<<o)-1:i[0]=0,this.fromString(i,256)}},i.bitwiseTo=function(t,e,n){var r,i,o=Math.min(t.t,this.t);for(r=0;r<o;++r)n[r]=e(this[r],t[r]);if(t.t<this.t){for(i=t.s&this.DM,r=o;r<this.t;++r)n[r]=e(this[r],i);n.t=this.t}else{for(i=this.s&this.DM,r=o;r<t.t;++r)n[r]=e(i,t[r]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},i.changeBit=function(t,e){var n=r.ONE.shiftLeft(t);return this.bitwiseTo(n,e,n),n},i.addTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]+t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r+=t[n],e[n++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[n++]=r:r<-1&&(e[n++]=this.DV+r),e.t=n,e.clamp()},i.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},i.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},i.multiplyLowerTo=function(t,e,n){var r,i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(r=n.t-this.t;i<r;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(r=Math.min(t.t,e);i<r;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},i.multiplyUpperTo=function(t,e,n){--e;var r=n.t=this.t+t.t-e;for(n.s=0;--r>=0;)n[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)n[this.t+r-e]=this.am(e-r,t[r],n,0,0,this.t+r-e);n.clamp(),n.drShiftTo(1,n)},i.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var r=this.t-1;r>=0;--r)n=(e*n+this[r])%t;return n},i.millerRabin=function(t){var e=this.subtract(r.ONE),n=e.getLowestSetBit();if(n<=0)return!1;var i=e.shiftRight(n);(t=t+1>>1)>C.length&&(t=C.length);for(var o=new r(null),u=[],s=0;s<t;++s){for(;f=C[Math.floor(Math.random()*C.length)],-1!=u.indexOf(f););u.push(f),o.fromInt(f);var a=o.modPow(i,this);if(0!=a.compareTo(r.ONE)&&0!=a.compareTo(e)){for(var f=1;f++<n&&0!=a.compareTo(e);)if(0==(a=a.modPowInt(2,this)).compareTo(r.ONE))return!1;if(0!=a.compareTo(e))return!1}}return!0},i.clone=function(){var t=new r;return this.copyTo(t),t},i.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},i.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},i.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},i.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},i.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var n,r=this.DB-t*this.DB%8,i=0;if(t-- >0)for(r<this.DB&&(n=this[t]>>r)!=(this.s&this.DM)>>r&&(e[i++]=n|this.s<<this.DB-r);t>=0;)r<8?(n=(this[t]&(1<<r)-1)<<8-r,n|=this[--t]>>(r+=this.DB-8)):(n=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&n)&&(n|=-256),0===i&&(128&this.s)!=(128&n)&&++i,(i>0||n!=this.s)&&(e[i++]=n);return e},i.equals=function(t){return 0==this.compareTo(t)},i.min=function(t){return this.compareTo(t)<0?this:t},i.max=function(t){return this.compareTo(t)>0?this:t},i.and=function(t){var e=new r;return this.bitwiseTo(t,g,e),e},i.or=function(t){var e=new r;return this.bitwiseTo(t,m,e),e},i.xor=function(t){var e=new r;return this.bitwiseTo(t,v,e),e},i.andNot=function(t){var e=new r;return this.bitwiseTo(t,b,e),e},i.not=function(){for(var t=new r,e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},i.shiftLeft=function(t){var e=new r;return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},i.shiftRight=function(t){var e=new r;return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},i.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+w(this[t]);return this.s<0?this.t*this.DB:-1},i.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=_(this[n]^e);return t},i.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},i.setBit=function(t){return this.changeBit(t,m)},i.clearBit=function(t){return this.changeBit(t,b)},i.flipBit=function(t){return this.changeBit(t,v)},i.add=function(t){var e=new r;return this.addTo(t,e),e},i.subtract=function(t){var e=new r;return this.subTo(t,e),e},i.multiply=function(t){var e=new r;return this.multiplyTo(t,e),e},i.divide=function(t){var e=new r;return this.divRemTo(t,e,null),e},i.remainder=function(t){var e=new r;return this.divRemTo(t,null,e),e},i.divideAndRemainder=function(t){var e=new r,n=new r;return this.divRemTo(t,e,n),new Array(e,n)},i.modPow=function(t,e){var n,i,o=t.bitLength(),u=l(1);if(o<=0)return u;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new d(e):e.isEven()?new B(e):new y(e);var s=new Array,a=3,f=n-1,c=(1<<n)-1;if(s[1]=i.convert(this),n>1){var h=new r;for(i.sqrTo(s[1],h);a<=c;)s[a]=new r,i.mulTo(h,s[a-2],s[a]),a+=2}var g,m,v=t.t-1,b=!0,w=new r;for(o=p(t[v])-1;v>=0;){for(o>=f?g=t[v]>>o-f&c:(g=(t[v]&(1<<o+1)-1)<<f-o,v>0&&(g|=t[v-1]>>this.DB+o-f)),a=n;0==(1&g);)g>>=1,--a;if((o-=a)<0&&(o+=this.DB,--v),b)s[g].copyTo(u),b=!1;else{for(;a>1;)i.sqrTo(u,w),i.sqrTo(w,u),a-=2;a>0?i.sqrTo(u,w):(m=u,u=w,w=m),i.mulTo(w,s[g],u)}for(;v>=0&&0==(t[v]&1<<o);)i.sqrTo(u,w),m=u,u=w,w=m,--o<0&&(o=this.DB-1,--v)}return i.revert(u)},i.modInverse=function(t){var e=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&e||0==t.signum())return r.ZERO;for(var n=t.clone(),i=this.clone(),o=l(1),u=l(0),s=l(0),a=l(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),e?(o.isEven()&&u.isEven()||(o.addTo(this,o),u.subTo(t,u)),o.rShiftTo(1,o)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);for(;i.isEven();)i.rShiftTo(1,i),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);n.compareTo(i)>=0?(n.subTo(i,n),e&&o.subTo(s,o),u.subTo(a,u)):(i.subTo(n,i),e&&s.subTo(o,s),a.subTo(u,a))}if(0!=i.compareTo(r.ONE))return r.ZERO;for(;a.compareTo(t)>=0;)a.subTo(t,a);for(;a.signum()<0;)a.addTo(t,a);return a},i.pow=function(t){return this.exp(t,new E)},i.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var r=e;e=n,n=r}var i=e.getLowestSetBit(),o=n.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),n.rShiftTo(o,n));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return o>0&&n.lShiftTo(o,n),n},i.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(n[0]==C[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<C.length;){for(var r=C[e],i=e+1;i<C.length&&r<F;)r*=C[i++];for(r=n.modInt(r);e<i;)if(r%C[e++]==0)return!1}return n.millerRabin(t)},i.square=function(){var t=new r;return this.squareTo(t),t},r.ZERO=l(0),r.ONE=l(1),r.valueOf=l,t.exports=r},function(t,e,n){var r=n(3),i=n(9),o=n(98);function u(t,e,n,r,u,s,a){this.p=t,this.a=e,this.b=n,this.G=o.fromAffine(this,r,u),this.n=s,this.h=a,this.infinity=new o(this,null,null,i.ZERO),this.pOverFour=t.add(i.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}u.prototype.pointFromX=function(t,e){var n=e.pow(3).add(this.a.multiply(e)).add(this.b).mod(this.p).modPow(this.pOverFour,this.p),r=n;return n.isEven()^!t&&(r=this.p.subtract(r)),o.fromAffine(this,e,r)},u.prototype.isInfinity=function(t){return t===this.infinity||0===t.z.signum()&&0!==t.y.signum()},u.prototype.isOnCurve=function(t){if(this.isInfinity(t))return!0;var e=t.affineX,n=t.affineY,r=this.a,i=this.b,o=this.p;if(e.signum()<0||e.compareTo(o)>=0)return!1;if(n.signum()<0||n.compareTo(o)>=0)return!1;var u=n.square().mod(o),s=e.pow(3).add(r.multiply(e)).add(i).mod(o);return u.equals(s)},u.prototype.validate=function(t){r(!this.isInfinity(t),"Point is at infinity"),r(this.isOnCurve(t),"Point is not on the curve");var e=t.multiply(this.n);return r(this.isInfinity(e),"Point is not a scalar multiple of G"),!0},t.exports=u},function(t,e,n){"use strict";var r=n(2).Buffer,i=n(1),o=n(97),u=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],a=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],f=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],c=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function p(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function d(t,e){return t<<e|t>>>32-e}function y(t,e,n,r,i,o,u,s){return d(t+(e^n^r)+o+u|0,s)+i|0}function g(t,e,n,r,i,o,u,s){return d(t+(e&n|~e&r)+o+u|0,s)+i|0}function m(t,e,n,r,i,o,u,s){return d(t+((e|~n)^r)+o+u|0,s)+i|0}function v(t,e,n,r,i,o,u,s){return d(t+(e&r|n&~r)+o+u|0,s)+i|0}function b(t,e,n,r,i,o,u,s){return d(t+(e^(n|~r))+o+u|0,s)+i|0}i(p,o),p.prototype._update=function(){for(var t=u,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,p=0|this._e,w=0|this._a,_=0|this._b,E=0|this._c,A=0|this._d,B=0|this._e,C=0;C<80;C+=1){var F,x;C<16?(F=y(n,r,i,o,p,t[s[C]],h[0],f[C]),x=b(w,_,E,A,B,t[a[C]],l[0],c[C])):C<32?(F=g(n,r,i,o,p,t[s[C]],h[1],f[C]),x=v(w,_,E,A,B,t[a[C]],l[1],c[C])):C<48?(F=m(n,r,i,o,p,t[s[C]],h[2],f[C]),x=m(w,_,E,A,B,t[a[C]],l[2],c[C])):C<64?(F=v(n,r,i,o,p,t[s[C]],h[3],f[C]),x=g(w,_,E,A,B,t[a[C]],l[3],c[C])):(F=b(n,r,i,o,p,t[s[C]],h[4],f[C]),x=y(w,_,E,A,B,t[a[C]],l[4],c[C])),n=p,p=o,o=d(i,10),i=r,r=F,w=B,B=A,A=d(E,10),E=_,_=x}var S=this._b+i+A|0;this._b=this._c+o+B|0,this._c=this._d+p+w|0,this._d=this._e+n+_|0,this._e=this._a+r+E|0,this._a=S},p.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=p},function(t,e,n){(e=t.exports=function(t){t=t.toLowerCase();var n=e[t];if(!n)throw new Error(t+" is not supported (we accept pull requests)");return new n}).sha=n(184),e.sha1=n(185),e.sha224=n(186),e.sha256=n(103),e.sha384=n(187),e.sha512=n(104)},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t,e,n){return n^t&(e^n)}function c(t,e,n){return t&e|n&(t|e)}function h(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function l(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function p(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function d(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}r(a,i),a.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,s=0|this._e,a=0|this._f,y=0|this._g,g=0|this._h,m=0;m<16;++m)e[m]=t.readInt32BE(4*m);for(;m<64;++m)e[m]=d(e[m-2])+e[m-7]+p(e[m-15])+e[m-16]|0;for(var v=0;v<64;++v){var b=g+l(s)+f(s,a,y)+u[v]+e[v]|0,w=h(n)+c(n,r,i)|0;g=y,y=a,a=s,s=o+b|0,o=i,i=r,r=n,n=b+w|0}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=s+this._e|0,this._f=a+this._f|0,this._g=y+this._g|0,this._h=g+this._h|0},a.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=a},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function a(){this.init(),this._w=s,i.call(this,128,112)}function f(t,e,n){return n^t&(e^n)}function c(t,e,n){return t&e|n&(t|e)}function h(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function l(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function m(t,e){return t>>>0<e>>>0?1:0}r(a,i),a.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,o=0|this._dh,s=0|this._eh,a=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,_=0|this._bl,E=0|this._cl,A=0|this._dl,B=0|this._el,C=0|this._fl,F=0|this._gl,x=0|this._hl,S=0;S<32;S+=2)e[S]=t.readInt32BE(4*S),e[S+1]=t.readInt32BE(4*S+4);for(;S<160;S+=2){var D=e[S-30],k=e[S-30+1],T=p(D,k),I=d(k,D),M=y(D=e[S-4],k=e[S-4+1]),O=g(k,D),j=e[S-14],R=e[S-14+1],L=e[S-32],N=e[S-32+1],P=I+R|0,U=T+j+m(P,I)|0;U=(U=U+M+m(P=P+O|0,O)|0)+L+m(P=P+N|0,N)|0,e[S]=U,e[S+1]=P}for(var q=0;q<160;q+=2){U=e[q],P=e[q+1];var z=c(n,r,i),H=c(w,_,E),V=h(n,w),G=h(w,n),Z=l(s,B),Y=l(B,s),K=u[q],W=u[q+1],X=f(s,a,v),J=f(B,C,F),$=x+Y|0,Q=b+Z+m($,x)|0;Q=(Q=(Q=Q+X+m($=$+J|0,J)|0)+K+m($=$+W|0,W)|0)+U+m($=$+P|0,P)|0;var tt=G+H|0,et=V+z+m(tt,G)|0;b=v,x=F,v=a,F=C,a=s,C=B,s=o+Q+m(B=A+$|0,A)|0,o=i,A=E,i=r,E=_,r=n,_=w,n=Q+et+m(w=$+tt|0,$)|0}this._al=this._al+w|0,this._bl=this._bl+_|0,this._cl=this._cl+E|0,this._dl=this._dl+A|0,this._el=this._el+B|0,this._fl=this._fl+C|0,this._gl=this._gl+F|0,this._hl=this._hl+x|0,this._ah=this._ah+n+m(this._al,w)|0,this._bh=this._bh+r+m(this._bl,_)|0,this._ch=this._ch+i+m(this._cl,E)|0,this._dh=this._dh+o+m(this._dl,A)|0,this._eh=this._eh+s+m(this._el,B)|0,this._fh=this._fh+a+m(this._fl,C)|0,this._gh=this._gh+v+m(this._gl,F)|0,this._hh=this._hh+b+m(this._hl,x)|0},a.prototype._hash=function(){var t=o.allocUnsafe(64);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=a},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(194),u=n(14),s=n(61).getCurveByName("secp256k1"),a=n(3),f=n(9),c=n(30),h=n(29),l=n(38);function p(t,n,r){function i(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),a(e.isBuffer(t),"data is a required String or Buffer"),l(t=u.sha256(t),n)}function l(r,i){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof r&&(r=e.from(r,u)),32!==r.length||!e.isBuffer(r))throw new Error("dataSha256: 32 bytes required");var f=h(i);return a(f,"pubkey required"),o.verify(s,r,{r:t,s:n},f.Q)}function p(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),a(e.isBuffer(t),"data is a required String or Buffer"),d(t=u.sha256(t))}function d(i){var u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";if("string"==typeof i&&(i=e.from(i,u)),32!==i.length||!e.isBuffer(i))throw new Error("dataSha256: 32 byte String or buffer requred");var a=f.fromBuffer(i),c=r;c-=27,c&=3;var l=o.recoverPubKey(s,a,{r:t,s:n,i:r},c);return h.fromPoint(l)}function y(){var i;return(i=new e(65)).writeUInt8(r,0),t.toBuffer(32).copy(i,1),n.toBuffer(32).copy(i,33),i}a.equal(null!=t,!0,"Missing parameter"),a.equal(null!=n,!0,"Missing parameter"),a.equal(null!=r,!0,"Missing parameter");var g=void 0;return{r:t,s:n,i:r,toBuffer:y,verify:i,verifyHash:l,verifyHex:function(t,n){return console.log('Deprecated: use verify(data, pubkey, "hex")'),i(e.from(t,"hex"),n)},recover:p,recoverHash:d,toHex:function(){return y().toString("hex")},toString:function(){return g||(g="SIG_K1_"+c.checkEncode(y(),"K1"))},verifyBuffer:function(){return console.log("Deprecated: use signature.verify instead (same arguments)"),i.apply(void 0,arguments)},recoverPublicKey:function(){return console.log("Deprecated: use signature.recover instead (same arguments)"),p.apply(void 0,arguments)},recoverPublicKeyFromBuffer:function(){return console.log("Deprecated: use signature.recoverHash instead (same arguments)"),d.apply(void 0,arguments)}}}t.exports=p,p.sign=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),a(e.isBuffer(t),"data is a required String or Buffer"),t=u.sha256(t),p.signHash(t,n)},p.signHash=function(t,n){var r,i,u,c,h,d,y,g=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof t&&(t=e.from(t,g)),32!==t.length||!e.isBuffer(t))throw new Error("dataSha256: 32 byte buffer requred");for(n=l(n),a(n,"privateKey required"),c=null,y=0,i=f.fromBuffer(t);;){if(d=(r=(u=o.sign(s,t,n.d,y++)).toDER())[5+(h=r[3])],32===h&&32===d){c=o.calcPubKeyRecoveryParam(s,i,u,n.toPublic().Q),c+=4,c+=27;break}y%10==0&&console.log("WARN: "+y+" attempts to find canonical signature")}return p(u.r,u.s,c)},p.fromBuffer=function(t){var n;return a(e.isBuffer(t),"Buffer is required"),a.equal(t.length,65,"Invalid signature length"),n=t.readUInt8(0),a.equal(n-27,n-27&7,"Invalid signature parameter"),p(f.fromBuffer(t.slice(1,33)),f.fromBuffer(t.slice(33)),n)},p.fromHex=function(t){return p.fromBuffer(e.from(t,"hex"))},p.fromString=function(t){try{return p.fromStringOrThrow(t)}catch(t){return null}},p.fromStringOrThrow=function(t){a.equal(void 0===t?"undefined":i(t),"string","signature");var e=t.match(/^SIG_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);a(null!=e&&3===e.length,"Expecting signature like: SIG_K1_base58signature..");var n=r(e,3),o=n[1],u=n[2];return a.equal(o,"K1","K1 signature expected"),p.fromBuffer(c.checkDecode(u,o))},p.from=function(t){var n=t?t.r&&t.s&&t.i?t:"string"==typeof t&&130===t.length?p.fromHex(t):"string"==typeof t&&130!==t.length?p.fromStringOrThrow(t):e.isBuffer(t)?p.fromBuffer(t):null:t;if(!n)throw new TypeError("signature should be a hex string or buffer");return n}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){function n(t){var e=t.toString().match(/function (.*?)\(/);return e?e[1]:null}t.exports=function(t,r){switch(t){case"Array":if(Array.isArray(r))return;break;case"Boolean":if("boolean"==typeof r)return;break;case"Buffer":if(e.isBuffer(r))return;break;case"Number":if("number"==typeof r)return;break;case"String":if("string"==typeof r)return;break;default:if(n(r.constructor)===n(t))return}throw new TypeError("Expected "+(n(t)||t)+", got "+r)}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(204),i=n(207),o=n(108),u=function(t){return i("v1",r,t)};Object.assign(u,{processArgs:o,api:r,Testnet:function(t){return console.error("deprecated, change EosApi.Testnet(..) to just EosApi(..)"),u(t)},Localnet:function(t){return console.error("deprecated, change EosApi.Localnet(..) to just EosApi(..)"),u(t)}}),t.exports=u},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"method",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o={},u={},s=e.length,a=void 0;"function"==typeof t[t.length-1]&&(a=t[t.length-1],t=t.slice(0,t.length-1));var f=void 0,c=void 0;a?f=function(t,e){t?a(t):a(null,e)}:c=new Promise(function(t,e){f=function(n,r){n?e(n):t(r)}});"function"==typeof i&&t.length>0&&("object"===r(t[0])&&2===t.length||t.length===s+1)&&null!=(u=i(t[t.length-1]))&&(t=t.slice(0,t.length-1));if(1===t.length&&"object"===r(t[0]))o=t[0];else{if(t.length>s)throw new TypeError(n+" is expecting "+s+" parameters but "+t.length+" where provided");var h=0,l=!0,p=!1,d=void 0;try{for(var y,g=e[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value;o[m]=t[h],h++}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}}return{params:o,options:u,callback:f,returnPromise:c}}},function(t,e,n){var r=n(47),i=n(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){"use strict";var r=Object.assign({},n(225));t.exports=r},function(t,e,n){"use strict";var r=o(n(65)),i=o(n(23));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(3),s=n(19).Long;t.exports={ULong:a,isName:function(t,e){try{return h(t),!0}catch(t){return e&&e(t),!1}},encodeName:h,decodeName:l,encodeNameHex:function(t){return s.fromString(h(t),!0).toString(16)},decodeNameHex:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return l(s.fromString(t,!0,16).toString(),e)},DecimalString:p,DecimalPad:d,DecimalImply:function(t,e){return d(t,e).replace(".","")},DecimalUnimply:function(t,e){u(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var n=/^-/.test(t);n&&(t=t.substring(1));u(/^\d+$/.test(t),"invalid whole number "+t),u(null!=e,"precision required"),u(e>=0&&e<=18,"Precision should be 18 characters or less");var r=e-t.length;r>0&&(t=""+"0".repeat(r)+t);var i=t.length-e;return t=t.slice(0,i)+"."+t.slice(i),(n?"-":"")+d(t,e)},printAsset:y,parseAsset:function(t){var e=t.split(" "),n=(0,r.default)(e,1)[0].match(/^(-?[0-9]+(\.[0-9]+)?)( |$)/),i=n?n[1]:null,o=t.match(/(^| )([0-9]+),([A-Z]+)(@|$)/),s=o?Number(o[2]):null,a=i?(i.split(".")[1]||"").length:null,f=null!=s?s:a,c=t.match(/(^| |,)([A-Z]+)(@|$)/),h=c?c[2]:null,l=t.split("@"),p=(0,r.default)(l,2)[1],d=void 0===p?"":p,g=/^[a-z0-5]+(\.[a-z0-5]+)*$/.test(d)?d:null,m=y({amount:i,precision:f,symbol:h,contract:g});u.equal(t,m,"Invalid asset string: "+t+" !== "+m),null!=f&&u(f>=0&&f<=18,"Precision should be 18 characters or less");null!=h&&u(h.length<=7,"Asset symbol is 7 characters or less");null!=g&&u(g.length<=12,"Contract is 12 characters or less");return{amount:i,precision:f,symbol:h,contract:g}}};function a(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;if("number"==typeof t){if(t>Number.MAX_SAFE_INTEGER)throw new TypeError("value parameter overflow");t=s.fromString(String(t),e,n)}else if("string"==typeof t)t=s.fromString(t,e,n);else if(!s.isLong(t))throw new TypeError("value parameter is a requied Long, Number or String");return t}var f=".12345abcdefghijklmnopqrstuvwxyz",c=function(t){var e=f.indexOf(t);if(-1===e)throw new TypeError("Invalid character: '"+t+"'");return e};function h(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("string"!=typeof t)throw new TypeError("name parameter is a required string");if(t.length>12)throw new TypeError("A name can be up to 12 characters long");for(var n="",r=0;r<=12;r++){var i=r<t.length?c(t[r]):0,o=r<12?5:4,u=Number(i).toString(2);if(u.length>o)throw new TypeError("Invalid name "+t);n+=u="0".repeat(o-u.length)+u}var a=s.fromString(n,!0,2),f="",h=e?a.toBytesLE():a.toBytesBE(),l=!0,p=!1,d=void 0;try{for(var y,g=h[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value,v=Number(m).toString(16);f+=(1===v.length?"0":"")+v}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}return s.fromString(f,!0,16).toString().toString()}function l(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t=a(t);var n="",r=e?t.toBytesLE():t.toBytesBE(),i=!0,o=!1,u=void 0;try{for(var c,h=r[Symbol.iterator]();!(i=(c=h.next()).done);i=!0){var l=c.value,p=Number(l).toString(16);n+=(1===p.length?"0":"")+p}}catch(t){o=!0,u=t}finally{try{!i&&h.return&&h.return()}finally{if(o)throw u}}n+="0".repeat(16-n.length);for(var d=s.fromNumber(31,!0),y=s.fromNumber(15,!0),g="",m=s.fromString(n,!0,16),v=0;v<=12;v++){g=f[m.and(0===v?y:d)]+g,m=m.shiftRight(0===v?4:5)}return g=g.replace(/\.+$/,"")}function p(t){u(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var e=/^-/.test(t);e&&(t=t.substring(1)),"."===t[0]&&(t="0"+t);var n=t.split(".");return u(n.length<=2,"invalid decimal "+t),u(/^\d+(,?\d)*\d*$/.test(n[0]),"invalid decimal "+t),2===n.length&&(u(/^\d*$/.test(n[1]),"invalid decimal "+t),n[1]=n[1].replace(/0+$/,""),""===n[1]&&n.pop()),n[0]=n[0].replace(/^0*/,""),""===n[0]&&(n[0]="0"),(e?"-":"")+n.join(".")}function d(t,e){var n=p(t);if(null==e)return n;u(e>=0&&e<=18,"Precision should be 18 characters or less");var r=n.split(".");if(0===e&&1===r.length)return r[0];if(1===r.length)return r[0]+"."+"0".repeat(e);var i=e-r[1].length;return u(i>=0,"decimal '"+n+"' exceeds precision "+e),r[0]+"."+r[1]+"0".repeat(i)}function y(t){var e=t.amount,n=t.precision,r=t.symbol,o=t.contract;u.equal(void 0===r?"undefined":(0,i.default)(r),"string","symbol is a required string"),null!=e&&null!=n&&(e=d(e,n));var s=function(t,e){return null==t?"":null==e?"":t+e};return null!=e?s(e," ")+r+s("@",o):s(n,",")+r+s("@",o)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n){void 0===n&&(n=4),this._val=t,this._sym=e,this._decimal=n}return Object.defineProperty(t.prototype,"val",{get:function(){return this._val},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sym",{get:function(){return this._sym},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"decimal",{get:function(){return this._decimal},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valStr",{get:function(){return this._val.toFixed(this.decimal)},enumerable:!0,configurable:!0}),t.prototype.toString=function(){return this.valStr+" "+this.sym},t.parse=function(e){if(!e)return null;var n=(e=e.trim()).indexOf(" ");if(n<0)return null;var r=e.slice(0,n),i=e.slice(1+n);if(!r||!i)return null;var o=e.indexOf("."),u=o<0?0:n-o-1;return new t(parseFloat(r),i,u)},t}();e.default=r},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(4),i=n(242),o=n(244),u=n(245),s=n(246),a=n(115),f="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(247);t.exports=function(t){return new Promise(function(e,c){var h=t.data,l=t.headers;r.isFormData(h)&&delete l["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(t.url)||(p=new window.XDomainRequest,d="onload",y=!0,p.onprogress=function(){},p.ontimeout=function(){}),t.auth){var g=t.auth.username||"",m=t.auth.password||"";l.Authorization="Basic "+f(g+":"+m)}if(p.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p[d]=function(){if(p&&(4===p.readyState||y)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:t,request:p};i(e,c,r),p=null}},p.onerror=function(){c(a("Network Error",t,null,p)),p=null},p.ontimeout=function(){c(a("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(248),b=(t.withCredentials||s(t.url))&&t.xsrfCookieName?v.read(t.xsrfCookieName):void 0;b&&(l[t.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(l,function(t,e){void 0===h&&"content-type"===e.toLowerCase()?delete l[e]:p.setRequestHeader(e,t)}),t.withCredentials&&(p.withCredentials=!0),t.responseType)try{p.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){p&&(p.abort(),c(t),p=null)}),void 0===h&&(h=null),p.send(h)})}},function(t,e,n){"use strict";var r=n(243);t.exports=function(t,e,n,i,o){var u=new Error(t);return r(u,e,n,i,o)}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e,n){"use strict";!function(){function e(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function n(t,n,r){var i,o=new Promise(function(o,u){e(i=t[n].apply(t,r)).then(o,u)});return o.request=i,o}function r(t,e,n){n.forEach(function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})})}function i(t,e,r,i){i.forEach(function(i){i in r.prototype&&(t.prototype[i]=function(){return n(this[e],i,arguments)})})}function o(t,e,n,r){r.forEach(function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})})}function u(t,e,r,i){i.forEach(function(i){i in r.prototype&&(t.prototype[i]=function(){return function(t,e,r){var i=n(t,e,r);return i.then(function(t){if(t)return new a(t,i.request)})}(this[e],i,arguments)})})}function s(t){this._index=t}function a(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}})}function h(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new c(n)}function l(t){this._db=t}r(s,"_index",["name","keyPath","multiEntry","unique"]),i(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(a,"_cursor",["direction","key","primaryKey","value"]),i(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(a.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(t){if(t)return new a(t,n._request)})})})}),f.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(f,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},r(c,"_tx",["objectStoreNames","mode"]),o(c,"_tx",IDBTransaction,["abort"]),h.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},r(h,"_db",["name","version","objectStoreNames"]),o(h,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},r(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[f,s].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e=function(t){return Array.prototype.slice.call(t)}(arguments),n=e[e.length-1],r=this._store||this._index,i=r[t].apply(r,e.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[s,f].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise(function(i){n.iterateCursor(t,function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)})})})});var p={open:function(t,e,r){var i=n(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){r&&r(new h(o.result,t.oldVersion,o.transaction))}),i.then(function(t){return new l(t)})},delete:function(t){return n(indexedDB,"deleteDatabase",[t])}};t.exports=p,t.exports.default=t.exports}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(267))},function(t,e,n){"use strict";n.r(e);var r=n(118),i=n.n(r),o=n(119),u=n.n(o),s=n(120),a=n.n(s),f=n(69),c=n.n(f),h=n(31),l=n.n(h),p=n(70),d=n.n(p),y=n(40),g=n(71),m=n(41),v=n(121);console.log("eosplayer >>> configs loaded."),console.log(":",y.eosNodeConfigs),window.env=function(){function t(){i()(this,t)}return u()(t,null,[{key:"isPc",get:function(){return!/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)}}]),t}(),window.eosjs=c.a,window.eosjs_ecc=l.a,window.BigNumber=d.a,window.idb=a.a,window.eosplayer=new g.ScatterPlayer(y.eosNodeConfigs),window.kh||(window.kh={}),console.log("eosplayer >>> scatter player created."),window.kh.eos={Player:m.Player,ScatterPlayer:g.ScatterPlayer,SignPlayer:m.SignPlayer,ReadingPlayer:m.ReadingPlayer,Plugins:{mykey:new v.MykeyPlugin}},console.log("eosplayer >>> plugins loaded.")},function(t,e,n){var r=function(){return this}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(124),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",f="object"==typeof t,c=e.regeneratorRuntime;if(c)f&&(t.exports=c);else{(c=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var h="suspendedStart",l="suspendedYield",p="executing",d="completed",y={},g={};g[u]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(T([])));v&&v!==r&&i.call(v,u)&&(g=v);var b=B.prototype=E.prototype=Object.create(g);A.prototype=b.constructor=B,B.constructor=A,B[a]=A.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,B):(t.__proto__=B,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},C(F.prototype),F.prototype[s]=function(){return this},c.AsyncIterator=F,c.async=function(t,e,n,r){var i=new F(w(t,e,n,r));return c.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[a]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=T,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(D),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],s=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var a=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),D(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;D(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}}}function w(t,e,n,r){var i=e&&e.prototype instanceof E?e:E,o=Object.create(i.prototype),u=new k(r||[]);return o._invoke=function(t,e,n){var r=h;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return I()}for(n.method=i,n.arg=o;;){var u=n.delegate;if(u){var s=x(u,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var a=_(t,e,n);if("normal"===a.type){if(r=n.done?d:l,a.arg===y)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r=d,n.method="throw",n.arg=a.arg)}}}(t,n,u),o}function _(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function A(){}function B(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function F(t){var e;this._invoke=function(n,r){function o(){return new Promise(function(e,o){!function e(n,r,o,u){var s=_(t[n],t,r);if("throw"!==s.type){var a=s.arg,f=a.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(f).then(function(t){a.value=t,o(a)},u)}u(s.arg)}(n,r,e,o)})}return e=e?e.then(o,o):o()}}function x(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,x(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=_(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function D(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function T(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,n){t.exports={default:n(126),__esModule:!0}},function(t,e,n){n(42),n(52),t.exports=n(53).f("iterator")},function(t,e,n){var r=n(43),i=n(44);t.exports=function(t){return function(e,n){var o,u,s=String(i(e)),a=r(n),f=s.length;return a<0||a>=f?t?"":void 0:(o=s.charCodeAt(a))<55296||o>56319||a+1===f||(u=s.charCodeAt(a+1))<56320||u>57343?t?s.charAt(a):o:t?s.slice(a,a+2):u-56320+(o-55296<<10)+65536}}},function(t,e,n){var r=n(129);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(78),i=n(34),o=n(51),u={};n(15)(u,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(16),i=n(24),o=n(46);t.exports=n(17)?Object.defineProperties:function(t,e){i(t);for(var n,u=o(e),s=u.length,a=0;s>a;)r.f(t,n=u[a++],e[n]);return t}},function(t,e,n){var r=n(47);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(18),i=n(134),o=n(135);t.exports=function(t){return function(e,n,u){var s,a=r(e),f=i(a.length),c=o(u,f);if(t&&n!=n){for(;f>c;)if((s=a[c++])!=s)return!0}else for(;f>c;c++)if((t||c in a)&&a[c]===n)return t||c||0;return!t&&-1}}},function(t,e,n){var r=n(43),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(43),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(7).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(11),i=n(138),o=n(48)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(44);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(140),i=n(141),o=n(26),u=n(18);t.exports=n(73)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){t.exports={default:n(143),__esModule:!0}},function(t,e,n){n(144),n(150),n(151),n(152),t.exports=n(10).Symbol},function(t,e,n){"use strict";var r=n(7),i=n(11),o=n(17),u=n(74),s=n(77),a=n(145).KEY,f=n(33),c=n(49),h=n(51),l=n(35),p=n(5),d=n(53),y=n(54),g=n(146),m=n(147),v=n(24),b=n(25),w=n(18),_=n(45),E=n(34),A=n(78),B=n(148),C=n(149),F=n(16),x=n(46),S=C.f,D=F.f,k=B.f,T=r.Symbol,I=r.JSON,M=I&&I.stringify,O=p("_hidden"),j=p("toPrimitive"),R={}.propertyIsEnumerable,L=c("symbol-registry"),N=c("symbols"),P=c("op-symbols"),U=Object.prototype,q="function"==typeof T,z=r.QObject,H=!z||!z.prototype||!z.prototype.findChild,V=o&&f(function(){return 7!=A(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=S(U,e);r&&delete U[e],D(t,e,n),r&&t!==U&&D(U,e,r)}:D,G=function(t){var e=N[t]=A(T.prototype);return e._k=t,e},Z=q&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},Y=function(t,e,n){return t===U&&Y(P,e,n),v(t),e=_(e,!0),v(n),i(N,e)?(n.enumerable?(i(t,O)&&t[O][e]&&(t[O][e]=!1),n=A(n,{enumerable:E(0,!1)})):(i(t,O)||D(t,O,E(1,{})),t[O][e]=!0),V(t,e,n)):D(t,e,n)},K=function(t,e){v(t);for(var n,r=g(e=w(e)),i=0,o=r.length;o>i;)Y(t,n=r[i++],e[n]);return t},W=function(t){var e=R.call(this,t=_(t,!0));return!(this===U&&i(N,t)&&!i(P,t))&&(!(e||!i(this,t)||!i(N,t)||i(this,O)&&this[O][t])||e)},X=function(t,e){if(t=w(t),e=_(e,!0),t!==U||!i(N,e)||i(P,e)){var n=S(t,e);return!n||!i(N,e)||i(t,O)&&t[O][e]||(n.enumerable=!0),n}},J=function(t){for(var e,n=k(w(t)),r=[],o=0;n.length>o;)i(N,e=n[o++])||e==O||e==a||r.push(e);return r},$=function(t){for(var e,n=t===U,r=k(n?P:w(t)),o=[],u=0;r.length>u;)!i(N,e=r[u++])||n&&!i(U,e)||o.push(N[e]);return o};q||(s((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=l(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(P,n),i(this,O)&&i(this[O],t)&&(this[O][t]=!1),V(this,t,E(1,n))};return o&&H&&V(U,t,{configurable:!0,set:e}),G(t)}).prototype,"toString",function(){return this._k}),C.f=X,F.f=Y,n(81).f=B.f=J,n(55).f=W,n(80).f=$,o&&!n(32)&&s(U,"propertyIsEnumerable",W,!0),d.f=function(t){return G(p(t))}),u(u.G+u.W+u.F*!q,{Symbol:T});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var et=x(p.store),nt=0;et.length>nt;)y(et[nt++]);u(u.S+u.F*!q,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=T(t)},keyFor:function(t){if(!Z(t))throw TypeError(t+" is not a symbol!");for(var e in L)if(L[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),u(u.S+u.F*!q,"Object",{create:function(t,e){return void 0===e?A(t):K(A(t),e)},defineProperty:Y,defineProperties:K,getOwnPropertyDescriptor:X,getOwnPropertyNames:J,getOwnPropertySymbols:$}),I&&u(u.S+u.F*(!q||f(function(){var t=T();return"[null]"!=M([t])||"{}"!=M({a:t})||"{}"!=M(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!Z(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Z(e))return e}),r[1]=e,M.apply(I,r)}}),T.prototype[j]||n(15)(T.prototype,j,T.prototype.valueOf),h(T,"Symbol"),h(Math,"Math",!0),h(r.JSON,"JSON",!0)},function(t,e,n){var r=n(35)("meta"),i=n(25),o=n(11),u=n(16).f,s=0,a=Object.isExtensible||function(){return!0},f=!n(33)(function(){return a(Object.preventExtensions({}))}),c=function(t){u(t,r,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!a(t))return"F";if(!e)return"E";c(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!a(t))return!0;if(!e)return!1;c(t)}return t[r].w},onFreeze:function(t){return f&&h.NEED&&a(t)&&!o(t,r)&&c(t),t}}},function(t,e,n){var r=n(46),i=n(80),o=n(55);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var u,s=n(t),a=o.f,f=0;s.length>f;)a.call(t,u=s[f++])&&e.push(u);return e}},function(t,e,n){var r=n(47);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(18),i=n(81).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,e,n){var r=n(55),i=n(34),o=n(18),u=n(45),s=n(11),a=n(75),f=Object.getOwnPropertyDescriptor;e.f=n(17)?f:function(t,e){if(t=o(t),e=u(e,!0),a)try{return f(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(54)("asyncIterator")},function(t,e,n){n(54)("observable")},function(t,e,n){"use strict";n(82);var r=n(38),i=n(29),o=n(105),u=(n(30),n(14)),s={initialize:r.initialize,unsafeRandomKey:function(){return r.unsafeRandomKey().then(function(t){return t.toString()})},randomKey:function(t){return r.randomKey(t).then(function(t){return t.toString()})},seedPrivate:function(t){return r.fromSeed(t).toString()},privateToPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return r(t).toPublic().toString(e)},isValidPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return i.isValid(t,e)},isValidPrivate:function(t){return r.isValid(t)},sign:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===n)throw new TypeError("API changed, use signHash(..) instead");return!1===n&&console.log("Warning: ecc.sign hashData parameter was removed"),o.sign(t,e,n).toString()},signHash:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return o.signHash(t,e,n).toString()},verify:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"utf8";if(!0===r)throw new TypeError("API changed, use verifyHash(..) instead");return!1===r&&console.log("Warning: ecc.verify hashData parameter was removed"),(t=o.from(t)).verify(e,n,r)},verifyHash:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"hex";return(t=o.from(t)).verifyHash(e,n,r)},recover:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===n)throw new TypeError("API changed, use recoverHash(signature, data) instead");return!1===n&&console.log("Warning: ecc.recover hashData parameter was removed"),(t=o.from(t)).recover(e,n).toString()},recoverHash:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return(t=o.from(t)).recoverHash(e,n).toString()},sha256:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";return u.sha256(t,e)}};t.exports=s},function(t,e,n){"use strict";e.byteLength=function(t){var e=f(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=f(t),r=n[0],u=n[1],s=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,u)),a=0,c=u>0?r-4:r,h=0;h<c;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],s[a++]=e>>16&255,s[a++]=e>>8&255,s[a++]=255&e;2===u&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,s[a++]=255&e);1===u&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,s[a++]=e>>8&255,s[a++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],u=0,s=n-i;u<s;u+=16383)o.push(h(t,u,u+16383>s?s:u+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=u.length;s<a;++s)r[s]=u[s],i[u.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function h(t,e,n){for(var r,i=[],o=e;o<n;o+=3)r=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(c(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,u,s=8*i-r-1,a=(1<<s)-1,f=a>>1,c=-7,h=n?i-1:0,l=n?-1:1,p=t[e+h];for(h+=l,o=p&(1<<-c)-1,p>>=-c,c+=s;c>0;o=256*o+t[e+h],h+=l,c-=8);for(u=o&(1<<-c)-1,o>>=-c,c+=r;c>0;u=256*u+t[e+h],h+=l,c-=8);if(0===o)o=1-f;else{if(o===a)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),o-=f}return(p?-1:1)*u*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var u,s,a,f=8*o-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-u))<1&&(u--,a*=2),(e+=u+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(s=0,u=c):u+h>=1?(s=(e*a-1)*Math.pow(2,i),u+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),u=0));i>=8;t[n+p]=255&s,p+=d,s/=256,i-=8);for(u=u<<i|s,f+=i;f>0;t[n+p]=255&u,p+=d,u/=256,f-=8);t[n+p-d]|=128*y}},function(t,e,n){var r,i,o;
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";function t(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var n={},r={};function i(t,e){var i,o,s;return e?(s=0<=(t>>>=0)&&t<256)&&(o=r[t])?o:(i=u(t,(0|t)<0?-1:0,!0),s&&(r[t]=i),i):(s=-128<=(t|=0)&&t<128)&&(o=n[t])?o:(i=u(t,t<0?-1:0,!1),s&&(n[t]=i),i)}function o(t,e){if(isNaN(t)||!isFinite(t))return e?y:d;if(e){if(t<0)return y;if(t>=h)return w}else{if(t<=-l)return _;if(t+1>=l)return b}return t<0?o(-t,e).neg():u(t%c|0,t/c|0,e)}function u(e,n,r){return new t(e,n,r)}t.fromInt=i,t.fromNumber=o,t.fromBits=u;var s=Math.pow;function a(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return d;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return a(t.substring(1),e,n).neg();for(var i=o(s(n,8)),u=d,f=0;f<t.length;f+=8){var c=Math.min(8,t.length-f),h=parseInt(t.substring(f,f+c),n);if(c<8){var l=o(s(n,c));u=u.mul(l).add(o(h))}else u=(u=u.mul(i)).add(o(h))}return u.unsigned=e,u}function f(e){return e instanceof t?e:"number"==typeof e?o(e):"string"==typeof e?a(e):u(e.low,e.high,e.unsigned)}t.fromString=a,t.fromValue=f;var c=4294967296,h=c*c,l=h/2,p=i(1<<24),d=i(0);t.ZERO=d;var y=i(0,!0);t.UZERO=y;var g=i(1);t.ONE=g;var m=i(1,!0);t.UONE=m;var v=i(-1);t.NEG_ONE=v;var b=u(-1,2147483647,!1);t.MAX_VALUE=b;var w=u(-1,-1,!0);t.MAX_UNSIGNED_VALUE=w;var _=u(0,-2147483648,!1);t.MIN_VALUE=_;var E=t.prototype;return E.toInt=function(){return this.unsigned?this.low>>>0:this.low},E.toNumber=function(){return this.unsigned?(this.high>>>0)*c+(this.low>>>0):this.high*c+(this.low>>>0)},E.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(_)){var e=o(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=o(s(t,6),this.unsigned),u=this,a="";;){var f=u.div(i),c=(u.sub(f.mul(i)).toInt()>>>0).toString(t);if((u=f).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},E.getHighBits=function(){return this.high},E.getHighBitsUnsigned=function(){return this.high>>>0},E.getLowBits=function(){return this.low},E.getLowBitsUnsigned=function(){return this.low>>>0},E.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},E.isZero=function(){return 0===this.high&&0===this.low},E.isNegative=function(){return!this.unsigned&&this.high<0},E.isPositive=function(){return this.unsigned||this.high>=0},E.isOdd=function(){return 1==(1&this.low)},E.isEven=function(){return 0==(1&this.low)},E.equals=function(t){return e(t)||(t=f(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},E.eq=E.equals,E.notEquals=function(t){return!this.eq(t)},E.neq=E.notEquals,E.lessThan=function(t){return this.comp(t)<0},E.lt=E.lessThan,E.lessThanOrEqual=function(t){return this.comp(t)<=0},E.lte=E.lessThanOrEqual,E.greaterThan=function(t){return this.comp(t)>0},E.gt=E.greaterThan,E.greaterThanOrEqual=function(t){return this.comp(t)>=0},E.gte=E.greaterThanOrEqual,E.compare=function(t){if(e(t)||(t=f(t)),this.eq(t))return 0;var n=this.isNegative(),r=t.isNegative();return n&&!r?-1:!n&&r?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},E.comp=E.compare,E.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(g)},E.neg=E.negate,E.add=function(t){e(t)||(t=f(t));var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,o=65535&this.low,s=t.high>>>16,a=65535&t.high,c=t.low>>>16,h=0,l=0,p=0,d=0;return p+=(d+=o+(65535&t.low))>>>16,l+=(p+=i+c)>>>16,h+=(l+=r+a)>>>16,h+=n+s,u((p&=65535)<<16|(d&=65535),(h&=65535)<<16|(l&=65535),this.unsigned)},E.subtract=function(t){return e(t)||(t=f(t)),this.add(t.neg())},E.sub=E.subtract,E.multiply=function(t){if(this.isZero())return d;if(e(t)||(t=f(t)),t.isZero())return d;if(this.eq(_))return t.isOdd()?_:d;if(t.eq(_))return this.isOdd()?_:d;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(p)&&t.lt(p))return o(this.toNumber()*t.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,s=65535&this.low,a=t.high>>>16,c=65535&t.high,h=t.low>>>16,l=65535&t.low,y=0,g=0,m=0,v=0;return m+=(v+=s*l)>>>16,g+=(m+=i*l)>>>16,m&=65535,g+=(m+=s*h)>>>16,y+=(g+=r*l)>>>16,g&=65535,y+=(g+=i*h)>>>16,g&=65535,y+=(g+=s*c)>>>16,y+=n*l+r*h+i*c+s*a,u((m&=65535)<<16|(v&=65535),(y&=65535)<<16|(g&=65535),this.unsigned)},E.mul=E.multiply,E.divide=function(t){if(e(t)||(t=f(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?y:d;var n,r,i;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return m;i=y}else{if(this.eq(_))return t.eq(g)||t.eq(v)?_:t.eq(_)?g:(n=this.shr(1).div(t).shl(1)).eq(d)?t.isNegative()?g:v:(r=this.sub(t.mul(n)),i=n.add(r.div(t)));if(t.eq(_))return this.unsigned?y:d;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();i=d}for(r=this;r.gte(t);){n=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(n)/Math.LN2),a=u<=48?1:s(2,u-48),c=o(n),h=c.mul(t);h.isNegative()||h.gt(r);)h=(c=o(n-=a,this.unsigned)).mul(t);c.isZero()&&(c=g),i=i.add(c),r=r.sub(h)}return i},E.div=E.divide,E.modulo=function(t){return e(t)||(t=f(t)),this.sub(this.div(t).mul(t))},E.mod=E.modulo,E.not=function(){return u(~this.low,~this.high,this.unsigned)},E.and=function(t){return e(t)||(t=f(t)),u(this.low&t.low,this.high&t.high,this.unsigned)},E.or=function(t){return e(t)||(t=f(t)),u(this.low|t.low,this.high|t.high,this.unsigned)},E.xor=function(t){return e(t)||(t=f(t)),u(this.low^t.low,this.high^t.high,this.unsigned)},E.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):u(0,this.low<<t-32,this.unsigned)},E.shl=E.shiftLeft,E.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):u(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},E.shr=E.shiftRight,E.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var n=this.high;return t<32?u(this.low>>>t|n<<32-t,n>>>t,this.unsigned):u(32===t?n:n>>>t-32,0,this.unsigned)},E.shru=E.shiftRightUnsigned,E.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},E.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},E.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},E.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},E.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(158),i=n(177),o=n(88);e.createCipher=e.Cipher=r.createCipher,e.createCipheriv=e.Cipheriv=r.createCipheriv,e.createDecipher=e.Decipher=i.createDecipher,e.createDecipheriv=e.Decipheriv=i.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(o)}},function(t,e,n){var r=n(85),i=n(89),o=n(0).Buffer,u=n(95),s=n(12),a=n(36),f=n(96);function c(t,e,n){s.call(this),this._cache=new l,this._cipher=new a.AES(e),this._prev=o.from(n),this._mode=t,this._autopadding=!0}n(1)(c,s),c.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get();)n=this._mode.encrypt(this,e),r.push(n);return o.concat(r)};var h=o.alloc(16,16);function l(){this.cache=o.allocUnsafe(0)}function p(t,e,n){var s=r[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=o.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof n&&(n=o.from(n)),"GCM"!==s.mode&&n.length!==s.iv)throw new TypeError("invalid iv length "+n.length);return"stream"===s.type?new u(s.module,e,n):"auth"===s.type?new i(s.module,e,n):new c(s.module,e,n)}c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},l.prototype.add=function(t){this.cache=o.concat([this.cache,t])},l.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},l.prototype.flush=function(){for(var t=16-this.cache.length,e=o.allocUnsafe(t),n=-1;++n<t;)e.writeUInt8(t,n);return o.concat([this.cache,e])},e.createCipheriv=p,e.createCipher=function(t,e){var n=r[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var i=f(e,!1,n.key,n.iv);return p(t,i.key,i.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,n){var r=n(27);e.encrypt=function(t,e){var n=r(e,t._prev);return t._prev=t._cipher.encryptBlock(n),t._prev},e.decrypt=function(t,e){var n=t._prev;t._prev=e;var i=t._cipher.decryptBlock(e);return r(i,n)}},function(t,e,n){var r=n(0).Buffer,i=n(27);function o(t,e,n){var o=e.length,u=i(e,t._cache);return t._cache=t._cache.slice(o),t._prev=r.concat([t._prev,n?e:u]),u}e.encrypt=function(t,e,n){for(var i,u=r.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=r.allocUnsafe(0)),!(t._cache.length<=e.length)){u=r.concat([u,o(t,e,n)]);break}i=t._cache.length,u=r.concat([u,o(t,e.slice(0,i),n)]),e=e.slice(i)}return u}},function(t,e,n){var r=n(0).Buffer;function i(t,e,n){var i=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=r.concat([t._prev.slice(1),r.from([n?e:i])]),i}e.encrypt=function(t,e,n){for(var o=e.length,u=r.allocUnsafe(o),s=-1;++s<o;)u[s]=i(t,e[s],n);return u}},function(t,e,n){var r=n(0).Buffer;function i(t,e,n){for(var r,i,u,s=-1,a=0;++s<8;)r=t._cipher.encryptBlock(t._prev),i=e&1<<7-s?128:0,a+=(128&(u=r[0]^i))>>s%8,t._prev=o(t._prev,n?i:u);return a}function o(t,e){var n=t.length,i=-1,o=r.allocUnsafe(t.length);for(t=r.concat([t,r.from([e])]);++i<n;)o[i]=t[i]<<1|t[i+1]>>7;return o}e.encrypt=function(t,e,n){for(var o=e.length,u=r.allocUnsafe(o),s=-1;++s<o;)u[s]=i(t,e[s],n);return u}},function(t,e,n){(function(t){var r=n(27);function i(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,n){for(;e._cache.length<n.length;)e._cache=t.concat([e._cache,i(e)]);var o=e._cache.slice(0,n.length);return e._cache=e._cache.slice(n.length),r(n,o)}}).call(this,n(2).Buffer)},function(t,e){},function(t,e,n){"use strict";var r=n(0).Buffer,i=n(167);function o(t,e,n){t.copy(e,n)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e=r.allocUnsafe(t>>>0),n=this.head,i=0;n;)o(n.data,e,i),i+=n.data.length,n=n.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(169),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(6))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},u=!1,s=t.document,a=Object.getPrototypeOf&&Object.getPrototypeOf(t);a=a&&a.setTimeout?a:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&c(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){c(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(c,0,t)},a.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var u={callback:t,args:e};return o[i]=u,r(i),i++},a.clearImmediate=f}function f(t){delete o[t]}function c(t){if(u)setTimeout(c,0,t);else{var e=o[t];if(e){u=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{f(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(6),n(8))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(6))},function(t,e,n){"use strict";t.exports=o;var r=n(94),i=n(28);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(1),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(58)},function(t,e,n){t.exports=n(13)},function(t,e,n){t.exports=n(57).Transform},function(t,e,n){t.exports=n(57).PassThrough},function(t,e,n){var r=n(0).Buffer,i=r.alloc(16,0);function o(t){var e=r.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function u(t){this.h=t,this.state=r.alloc(16,0),this.cache=r.allocUnsafe(0)}u.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},u.prototype._multiply=function(){for(var t,e,n=function(t){return[t.readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)]}(this.h),r=[0,0,0,0],i=-1;++i<128;){for(0!=(this.state[~~(i/8)]&1<<7-i%8)&&(r[0]^=n[0],r[1]^=n[1],r[2]^=n[2],r[3]^=n[3]),e=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,e&&(n[0]=n[0]^225<<24)}this.state=o(r)},u.prototype.update=function(t){var e;for(this.cache=r.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},u.prototype.final=function(t,e){return this.cache.length&&this.ghash(r.concat([this.cache,i],16)),this.ghash(o([0,t,0,e])),this.state},t.exports=u},function(t,e,n){var r=n(89),i=n(0).Buffer,o=n(85),u=n(95),s=n(12),a=n(36),f=n(96);function c(t,e,n){s.call(this),this._cache=new h,this._last=void 0,this._cipher=new a.AES(e),this._prev=i.from(n),this._mode=t,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function l(t,e,n){var s=o[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof n&&(n=i.from(n)),"GCM"!==s.mode&&n.length!==s.iv)throw new TypeError("invalid iv length "+n.length);if("string"==typeof e&&(e=i.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===s.type?new u(s.module,e,n,!0):"auth"===s.type?new r(s.module,e,n,!0):new c(s.module,e,n)}n(1)(c,s),c.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get(this._autopadding);)n=this._mode.decrypt(this,e),r.push(n);return i.concat(r)},c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var n=-1;for(;++n<e;)if(t[n+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},h.prototype.add=function(t){this.cache=i.concat([this.cache,t])},h.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var n=o[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var r=f(e,!1,n.key,n.iv);return l(t,r.key,r.iv)},e.createDecipheriv=l},function(t,e,n){(function(t,r){var i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(s(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,u=String(t).replace(i,function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),a=r[n];n<o;a=r[++n])y(a)||!w(a)?u+=" "+a:u+=" "+s(a);return u},e.deprecate=function(n,i){if(v(t.process))return function(){return e.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}};var o,u={};function s(t,n){var r={seen:[],stylize:f};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&e._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=a),c(r,t,r.depth)}function a(t,e){var n=s.styles[e];return n?"["+s.colors[n][0]+"m"+t+"["+s.colors[n][1]+"m":t}function f(t,e){return t}function c(t,n,r){if(t.customInspect&&n&&A(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=c(t,i,r)),i}var o=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(g(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,n);if(o)return o;var u=Object.keys(n),s=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),E(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return h(n);if(0===u.length){if(A(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(b(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(_(n))return t.stylize(Date.prototype.toString.call(n),"date");if(E(n))return h(n)}var f,w="",B=!1,C=["{","}"];(p(n)&&(B=!0,C=["[","]"]),A(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(w=" "+RegExp.prototype.toString.call(n)),_(n)&&(w=" "+Date.prototype.toUTCString.call(n)),E(n)&&(w=" "+h(n)),0!==u.length||B&&0!=n.length?r<0?b(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),f=B?function(t,e,n,r,i){for(var o=[],u=0,s=e.length;u<s;++u)x(e,String(u))?o.push(l(t,e,n,r,String(u),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(l(t,e,n,r,i,!0))}),o}(t,n,r,s,u):u.map(function(e){return l(t,n,r,s,e,B)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(f,w,C)):C[0]+w+C[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function l(t,e,n,r,i,o){var u,s,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special")),x(r,i)||(u="["+i+"]"),s||(t.seen.indexOf(a.value)<0?(s=y(n)?c(t,a.value,null):c(t,a.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n")):s=t.stylize("[Circular]","special")),v(u)){if(o&&i.match(/^\d+$/))return s;(u=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+s}function p(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function v(t){return void 0===t}function b(t){return w(t)&&"[object RegExp]"===B(t)}function w(t){return"object"==typeof t&&null!==t}function _(t){return w(t)&&"[object Date]"===B(t)}function E(t){return w(t)&&("[object Error]"===B(t)||t instanceof Error)}function A(t){return"function"==typeof t}function B(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(v(o)&&(o=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!u[t])if(new RegExp("\\b"+t+"\\b","i").test(o)){var n=r.pid;u[t]=function(){var r=e.format.apply(e,arguments);console.error("%s %d: %s",t,n,r)}}else u[t]=function(){};return u[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=p,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=b,e.isObject=w,e.isDate=_,e.isError=E,e.isFunction=A,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(179);var F=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function x(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),F[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=n(1),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}}).call(this,n(6),n(8))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t){t.exports={name:"bigi",version:"1.4.2",description:"Big integers.",keywords:["cryptography","math","bitcoin","arbitrary","precision","arithmetic","big","integer","int","number","biginteger","bigint","bignumber","decimal","float"],devDependencies:{coveralls:"^2.11.2",istanbul:"^0.3.5",jshint:"^2.5.1",mocha:"^2.1.0",mochify:"^2.1.0"},repository:{url:"https://github.com/cryptocoinjs/bigi",type:"git"},main:"./lib/index.js",scripts:{"browser-test":"./node_modules/.bin/mochify --wd -R spec",test:"./node_modules/.bin/_mocha -- test/*.js",jshint:"./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",unit:"./node_modules/.bin/mocha",coverage:"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",coveralls:"npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"},dependencies:{},testling:{files:"test/*.js",harness:"mocha",browsers:["ie/9..latest","firefox/latest","chrome/latest","safari/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]}}},function(t,e,n){(function(t){var e=n(3),r=n(99);r.fromByteArrayUnsigned=function(t){return 128&t[0]?new r([0].concat(t)):new r(t)},r.prototype.toByteArrayUnsigned=function(){var t=this.toByteArray();return 0===t[0]?t.slice(1):t},r.fromDERInteger=function(t){return new r(t)},r.prototype.toDERInteger=r.prototype.toByteArray,r.fromBuffer=function(t){if(128&t[0]){var e=Array.prototype.slice.call(t);return new r([0].concat(e))}return new r(t)},r.fromHex=function(t){return""===t?r.ZERO:(e.equal(t,t.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),e.equal(t.length%2,0,"Incomplete hex"),new r(t,16))},r.prototype.toBuffer=function(e){for(var n=this.toByteArrayUnsigned(),r=[],i=e-n.length;r.length<i;)r.push(0);return new t(r.concat(n))},r.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")}}).call(this,n(2).Buffer)},function(t,e,n){var r=n(9),i=n(183),o=n(100);t.exports=function(t){var e=i[t];if(!e)return null;var n=new r(e.p,16),u=new r(e.a,16),s=new r(e.b,16),a=new r(e.n,16),f=new r(e.h,16),c=new r(e.Gx,16),h=new r(e.Gy,16);return new o(n,u,s,c,h,a,f)}},function(t){t.exports={secp128r1:{p:"fffffffdffffffffffffffffffffffff",a:"fffffffdfffffffffffffffffffffffc",b:"e87579c11079f43dd824993c2cee5ed3",n:"fffffffe0000000075a30d1b9038a115",h:"01",Gx:"161ff7528b899b2d0c28607ca52c5b86",Gy:"cf5ac8395bafeb13c02da292dded7a83"},secp160k1:{p:"fffffffffffffffffffffffffffffffeffffac73",a:"00",b:"07",n:"0100000000000000000001b8fa16dfab9aca16b6b3",h:"01",Gx:"3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",Gy:"938cf935318fdced6bc28286531733c3f03c4fee"},secp160r1:{p:"ffffffffffffffffffffffffffffffff7fffffff",a:"ffffffffffffffffffffffffffffffff7ffffffc",b:"1c97befc54bd7a8b65acf89f81d4d4adc565fa45",n:"0100000000000000000001f4c8f927aed3ca752257",h:"01",Gx:"4a96b5688ef573284664698968c38bb913cbfc82",Gy:"23a628553168947d59dcc912042351377ac5fb32"},secp192k1:{p:"fffffffffffffffffffffffffffffffffffffffeffffee37",a:"00",b:"03",n:"fffffffffffffffffffffffe26f2fc170f69466a74defd8d",h:"01",Gx:"db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",Gy:"9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"},secp192r1:{p:"fffffffffffffffffffffffffffffffeffffffffffffffff",a:"fffffffffffffffffffffffffffffffefffffffffffffffc",b:"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",n:"ffffffffffffffffffffffff99def836146bc9b1b4d22831",h:"01",Gx:"188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",Gy:"07192b95ffc8da78631011ed6b24cdd573f977a11e794811"},secp256k1:{p:"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",a:"00",b:"07",n:"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",h:"01",Gx:"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",Gy:"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"},secp256r1:{p:"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",a:"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",b:"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",n:"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",h:"01",Gx:"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",Gy:"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"}}},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<5|t>>>27}function c(t){return t<<30|t>>>2}function h(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=e[a-3]^e[a-8]^e[a-14]^e[a-16];for(var l=0;l<80;++l){var p=~~(l/20),d=f(n)+h(p,r,i,o)+s+e[l]+u[p]|0;s=o,o=i,i=c(r),r=n,n=d}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<1|t>>>31}function c(t){return t<<5|t>>>27}function h(t){return t<<30|t>>>2}function l(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=f(e[a-3]^e[a-8]^e[a-14]^e[a-16]);for(var p=0;p<80;++p){var d=~~(p/20),y=c(n)+l(d,r,i,o)+s+e[p]+u[d]|0;s=o,o=i,i=h(r),r=n,n=y}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,n){var r=n(1),i=n(103),o=n(20),u=n(0).Buffer,s=new Array(64);function a(){this.init(),this._w=s,o.call(this,64,56)}r(a,i),a.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},a.prototype._hash=function(){var t=u.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=a},function(t,e,n){var r=n(1),i=n(104),o=n(20),u=n(0).Buffer,s=new Array(160);function a(){this.init(),this._w=s,o.call(this,128,112)}r(a,i),a.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},a.prototype._hash=function(){var t=u.allocUnsafe(48);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=a},function(t,e,n){"use strict";var r=n(1),i=n(189),o=n(12),u=n(0).Buffer,s=n(190),a=n(101),f=n(102),c=u.alloc(128);function h(t,e){o.call(this,"digest"),"string"==typeof e&&(e=u.from(e));var n="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>n)?e=("rmd160"===t?new a:f(t)).update(e).digest():e.length<n&&(e=u.concat([e,c],n));for(var r=this._ipad=u.allocUnsafe(n),i=this._opad=u.allocUnsafe(n),s=0;s<n;s++)r[s]=54^e[s],i[s]=92^e[s];this._hash="rmd160"===t?new a:f(t),this._hash.update(r)}r(h,o),h.prototype._update=function(t){this._hash.update(t)},h.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new a:f(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new h("rmd160",e):"md5"===t?new i(s,e):new h(t,e)}},function(t,e,n){"use strict";var r=n(1),i=n(0).Buffer,o=n(12),u=i.alloc(128),s=64;function a(t,e){o.call(this,"digest"),"string"==typeof e&&(e=i.from(e)),this._alg=t,this._key=e,e.length>s?e=t(e):e.length<s&&(e=i.concat([e,u],s));for(var n=this._ipad=i.allocUnsafe(s),r=this._opad=i.allocUnsafe(s),a=0;a<s;a++)n[a]=54^e[a],r[a]=92^e[a];this._hash=[n]}r(a,o),a.prototype._update=function(t){this._hash.push(t)},a.prototype._final=function(){var t=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,t]))},t.exports=a},function(t,e,n){var r=n(60);t.exports=function(t){return(new r).update(t).digest()}},function(t,e,n){var r=n(192);t.exports=r("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},function(t,e,n){var r=n(0).Buffer;t.exports=function(t){for(var e={},n=t.length,i=t.charAt(0),o=0;o<t.length;o++){var u=t.charAt(o);if(void 0!==e[u])throw new TypeError(u+" is ambiguous");e[u]=o}function s(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return r.allocUnsafe(0);for(var o=[0],u=0;u<t.length;u++){var s=e[t[u]];if(void 0===s)return;for(var a=0,f=s;a<o.length;++a)f+=o[a]*n,o[a]=255&f,f>>=8;for(;f>0;)o.push(255&f),f>>=8}for(var c=0;t[c]===i&&c<t.length-1;++c)o.push(0);return r.from(o.reverse())}return{encode:function(e){if(0===e.length)return"";for(var r=[0],o=0;o<e.length;++o){for(var u=0,s=e[o];u<r.length;++u)s+=r[u]<<8,r[u]=s%n,s=s/n|0;for(;s>0;)r.push(s%n),s=s/n|0}for(var a="",f=0;0===e[f]&&f<e.length-1;++f)a+=i;for(var c=r.length-1;c>=0;--c)a+=t[r[c]];return a},decodeUnsafe:s,decode:function(t){var e=s(t);if(e)return e;throw new Error("Non-base"+n+" character")}}}},function(t,e,n){"use strict";t.exports=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return new Promise(function(e,r){setTimeout(function(){try{e(t.apply(void 0,n))}catch(t){r(t)}})})}}},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(14),o=n(106),u=n(9),s=n(195);function a(t,n,s,a,f){o("Buffer",n),o(u,s),f&&(n=i.sha256(e.concat([n,new e(f)]))),r.equal(n.length,32,"Hash must be 256 bit");var c=s.toBuffer(32),h=new e(32),l=new e(32);l.fill(1),h.fill(0),h=i.HmacSHA256(e.concat([l,new e([0]),c,n]),h),l=i.HmacSHA256(l,h),h=i.HmacSHA256(e.concat([l,new e([1]),c,n]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h);for(var p=u.fromBuffer(l);p.signum()<=0||p.compareTo(t.n)>=0||!a(p);)h=i.HmacSHA256(e.concat([l,new e([0])]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h),p=u.fromBuffer(l);return p}function f(t,e,n,r){var i=t.n,o=t.G,u=n.r,s=n.s;if(u.signum()<=0||u.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var a=s.modInverse(i),f=e.multiply(a).mod(i),c=u.multiply(a).mod(i),h=o.multiplyTwo(f,r,c);return!t.isInfinity(h)&&h.affineX.mod(i).equals(u)}function c(t,e,n,i){r.strictEqual(3&i,i,"Recovery param is more than two bits");var o=t.n,u=t.G,s=n.r,a=n.s;r(s.signum()>0&&s.compareTo(o)<0,"Invalid r value"),r(a.signum()>0&&a.compareTo(o)<0,"Invalid s value");var f=1&i,c=i>>1?s.add(o):s,h=t.pointFromX(f,c),l=h.multiply(o);r(t.isInfinity(l),"nR is not a valid curve point");var p=e.negate().mod(o),d=s.modInverse(o),y=h.multiplyTwo(a,u,p).multiply(d);return t.validate(y),y}t.exports={calcPubKeyRecoveryParam:function(t,e,n,r){for(var i=0;i<4;i++)if(c(t,e,n,i).equals(r))return i;throw new Error("Unable to find valid recovery factor")},deterministicGenerateK:a,recoverPubKey:c,sign:function(t,e,n,r){var i,o,f=u.fromBuffer(e),c=t.n,h=t.G,l=(a(t,e,n,function(e){var r=h.multiply(e);return!t.isInfinity(r)&&0!==(i=r.affineX.mod(c)).signum()&&0!==(o=e.modInverse(c).multiply(f.add(n.multiply(i))).mod(c)).signum()},r),c.shiftRight(1));return o.compareTo(l)>0&&(o=c.subtract(o)),s(i,o)},verify:function(t,e,n,r){return f(t,u.fromBuffer(e),n,r)},verifyRaw:f}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(106),o=n(9);function u(t,n){function r(){var r=t.toDERInteger(),i=n.toDERInteger(),o=[];return o.push(2,r.length),(o=o.concat(r)).push(2,i.length),(o=o.concat(i)).unshift(48,o.length),new e(o)}return i(o,t),i(o,n),{r:t,s:n,toCompact:function(r,i){i&&(r+=4),r+=27;var o=new e(65);return o.writeUInt8(r,0),t.toBuffer(32).copy(o,1),n.toBuffer(32).copy(o,33),o},toDER:r,toScriptSignature:function(t){var n=new e(1);return n.writeUInt8(t,0),e.concat([r(),n])}}}u.parseCompact=function(t){r.equal(t.length,65,"Invalid signature length");var e=t.readUInt8(0)-27;return r.equal(e,7&e,"Invalid signature parameter"),{compressed:!!(4&e),i:e&=3,signature:u(o.fromBuffer(t.slice(1,33)),o.fromBuffer(t.slice(33)))}},u.fromDER=function(t){r.equal(t.readUInt8(0),48,"Not a DER sequence"),r.equal(t.readUInt8(1),t.length-2,"Invalid sequence length"),r.equal(t.readUInt8(2),2,"Expected a DER integer");var e=t.readUInt8(3);r(e>0,"R length is zero");var n=4+e;r.equal(t.readUInt8(n),2,"Expected a DER integer (2)");var i=t.readUInt8(n+1);r(i>0,"S length is zero");var s=t.slice(4,n),a=t.slice(n+2);n+=2+i,e>1&&0===s.readUInt8(0)&&r(128&s.readUInt8(1),"R value excessively padded"),i>1&&0===a.readUInt8(0)&&r(128&a.readUInt8(1),"S value excessively padded"),r.equal(n,t.length,"Invalid DER encoding");var f=o.fromDERInteger(s),c=o.fromDERInteger(a);return r(f.signum()>=0,"R value is negative"),r(c.signum()>=0,"S value is negative"),u(f,c)},u.parseScriptSignature=function(t){var e=t.readUInt8(t.length-1),n=-129&e;return r(n>0&&n<4,"Invalid hashType"),{signature:u.fromDER(t.slice(0,-1)),hashType:e}},t.exports=u}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(82),i=n(38),o=n(29),u=n(105),s=n(30);t.exports={Aes:r,PrivateKey:i,PublicKey:o,Signature:u,key_utils:s}},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var o=n(198),u=n(19).Long,s=n(3),a={bytes:function(){return[v]},string:function(){return[b]},vector:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return[h,{type:t,sorted:e}]},optional:function(t){return[l,{type:t}]},time:function(){return[w]},map:function(t){return[f,{annotation:t}]},static_variant:function(t){return[c,{types:t}]},fixed_string16:function(){return[b,{maxLen:16}]},fixed_string32:function(){return[b,{maxLen:32}]},fixed_bytes16:function(){return[v,{len:16}]},fixed_bytes20:function(){return[v,{len:20}]},fixed_bytes28:function(){return[v,{len:28}]},fixed_bytes32:function(){return[v,{len:32}]},fixed_bytes33:function(){return[v,{len:33}]},fixed_bytes64:function(){return[v,{len:64}]},fixed_bytes65:function(){return[v,{len:65}]},uint8:function(){return[d,{bits:8}]},uint16:function(){return[d,{bits:16}]},uint32:function(){return[d,{bits:32}]},uint64:function(){return[d,{bits:64}]},uint128:function(){return[y,{bits:128}]},uint224:function(){return[y,{bits:224}]},uint256:function(){return[y,{bits:256}]},uint512:function(){return[y,{bits:512}]},varuint32:function(){return[d,{bits:32,variable:!0}]},int8:function(){return[d,{signed:!0,bits:8}]},int16:function(){return[d,{signed:!0,bits:16}]},int32:function(){return[d,{signed:!0,bits:32}]},int64:function(){return[d,{signed:!0,bits:64}]},int128:function(){return[y,{signed:!0,bits:128}]},int224:function(){return[y,{signed:!0,bits:224}]},int256:function(){return[y,{signed:!0,bits:256}]},int512:function(){return[y,{signed:!0,bits:512}]},varint32:function(){return[d,{signed:!0,bits:32,variable:!0}]},float32:function(){return[m,{bits:32}]},float64:function(){return[m,{bits:64}]}};t.exports=function(t){t=Object.assign({defaults:!1,debug:!1,customTypes:{}},t);var e=Object.assign({},a,t.customTypes),n=function(n){return function(r,o){return r[o]=function(){for(var u=arguments.length,s=Array(u),f=0;f<u;f++)s[f]=arguments[f];return function(t,e,n,r,o,u){var s=(r?o[t]:a[t]).apply(void 0,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(n)),f=i(s,2),c=f[0],h=f[1],l=void 0===h?{}:h,p=Object.assign(l,e);p.typeName=t;var d=c(p,r,u);return d.typeName=t,d}(o,t,s,n,e,r)},r}},r=Object.keys(a).reduce(n(),{}),o=Object.keys(t.customTypes||{}).reduce(n(r),{});return Object.assign({},r,o,{config:t})};var f=function(t){var e=i(t.annotation,2),n=e[0],r=e[1];if(!C(n))throw new TypeError("map<type1, > unknown");if(!C(r))throw new TypeError("map<, type2> unknown");return{fromByteBuffer:function(e){for(var i=e.readVarint32(),o={},u=0;u<i;u++)o[n.fromByteBuffer(e)]=r.fromByteBuffer(e);return t.debug&&console.log("0x"+i.toString(16),"(map.fromByteBuffer length)",o),o},appendByteBuffer:function(e,i){_(i,t);var o=Object.keys(i);e.writeVarint32(o.length),t.debug&&console.log("0x"+o.length.toString(16),"(map.appendByteBuffer length)",o);var u=!0,s=!1,a=void 0;try{for(var f,c=o[Symbol.iterator]();!(u=(f=c.next()).done);u=!0){var h=f.value,l=i[h];n.appendByteBuffer(e,h),r.appendByteBuffer(e,l)}}catch(t){s=!0,a=t}finally{try{!u&&c.return&&c.return()}finally{if(s)throw a}}},fromObject:function(e){_(e,t);var i={};for(var o in e)i[n.fromObject(o)]=r.fromObject(e[o]);return i},toObject:function(e){if(t.defaults&&null==e)return function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},n.toObject(null),r.toObject(null));_(e,t);var i={};for(var o in e)i[n.toObject(o)]=r.toObject(e[o]);return i}}},c=function(t){var e=t.types;return{fromByteBuffer:function(n){var r=n.readVarint32(),i=e[r];return t.debug&&console.error("static_variant id "+r+" (0x"+r.toString(16)+")"),s(i,"static_variant invalid type position "+r),[r,i.fromByteBuffer(n)]},appendByteBuffer:function(t,n){s(Array.isArray(n)&&2===n.length,"Required tuple");var r=n[0],i=e[r];s(i,"type "+r),t.writeVarint32(r),i.appendByteBuffer(t,n[1])},fromObject:function(t){s(Array.isArray(t)&&2===t.length,"Required tuple");var n=t[0],r=e[n];return s(r,"type "+n),[n,r.fromObject(t[1])]},toObject:function(n){if(t.defaults&&null==n)return[0,e[0].toObject(null,debug)];s(Array.isArray(n)&&2===n.length,"Required tuple");var r=n[0],i=e[r];return s(i,"type "+r),[r,i.toObject(n[1])]}}},h=function(t){var e=t.type,n=t.sorted;if(!C(e))throw new TypeError("vector type should be a serializer");return{fromByteBuffer:function(n){var r=n.readVarint32();t.debug&&console.log("fromByteBuffer vector length",r,"(0x"+r.toString(16)+")");for(var i=[],o=0;o<r;o++)i.push(e.fromByteBuffer(n));return i},appendByteBuffer:function(r,i){null==i&&(i=[]),_(i,t),r.writeVarint32(i.length),!0===n&&(i=F(e,Object.assign([],i))),t.debug&&console.log("0x"+i.length.toString(16),"(vector.appendByteBuffer length)",i);var o=!0,u=!1,s=void 0;try{for(var a,f=i[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;e.appendByteBuffer(r,c)}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}},fromObject:function(r){null==r&&(r=[]),_(r,t);var i=[],o=!0,u=!1,s=void 0;try{for(var a,f=r[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;i.push(e.fromObject(c))}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}return!0===n&&(i=F(e,Object.assign([],i))),i},toObject:function(r){if(t.defaults&&null==r)return[e.toObject(r)];null==r&&(r=[]),_(r,t),!0===n&&(r=F(e,Object.assign([],r)));var i=[],o=!0,u=!1,s=void 0;try{for(var a,f=r[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;i.push(e.toObject(c))}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}return i}}},l=function(t){var e=t.type;if(!C(e))throw new TypeError("optional parameter should be a serializer");return{fromByteBuffer:function(t){return 1!==t.readUint8()?null:e.fromByteBuffer(t)},appendByteBuffer:function(t,n){null!=n?(t.writeUint8(1),e.appendByteBuffer(t,n)):t.writeUint8(0)},fromObject:function(t){return null==t?null:e.fromObject(t)},toObject:function(n){return null!=n||t.defaults?e.toObject(n):null}}},p=function(t){var e=t.signed,n=void 0!==e&&e,r=t.bits;return t.variable?"Varint"+r+(n?"ZigZag":""):(n?"Int":"Uint")+r},d=function(t){return{fromByteBuffer:function(e){var n=e["read"+p(t)]();return u.isLong(n)?n.toString():n},appendByteBuffer:function(e,n){e["write"+p(t)](n)},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),u.isLong(e)?e.toString():e)}}},y=function(t){var n=t.signed,r=void 0!==n&&n,i=t.bits,u=i/8;return{fromByteBuffer:function(n){var s=n.copy(n.offset,n.offset+u);n.skip(u);var a=new o(s.toHex(),"hex"),f=a.toArrayLike(e,"le",u);a=new o(f.toString("hex"),"hex"),r&&(a=a.fromTwos(i));var c=a.toString();return B(c,t),i>53?c:a.toNumber()},appendByteBuffer:function(n,s){B(s,t);var a=new o(s);r&&(a=a.toTwos(i));var f=a.toArrayLike(e,"le",u);n.append(f.toString("binary"),"binary")},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),e)}}},g=n(201),m=function(t){var n=t.bits,r=32===n?"Float":64===n?"Double":null;s(r,"unsupported float bit size: "+n);var i=n/8;return{fromByteBuffer:function(t){var n=t.copy(t.offset,t.offset+i);t.skip(i);var o=e.from(n.toBinary(),"binary");return g["read"+r+"LE"](o)},appendByteBuffer:function(t,e){var n=[];g["write"+r+"LE"](n,e),t.append(n)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?0:e}}},v=function(t){return{fromByteBuffer:function(n){var r=t.len,i=void 0;if(null==r){var o=n.readVarint32();i=n.copy(n.offset,n.offset+o),n.skip(o)}else i=n.copy(n.offset,n.offset+r),n.skip(r);return e.from(i.toBinary(),"binary")},appendByteBuffer:function(e,n){null==t.len&&e.writeVarint32(n.length),e.append(n.toString("binary"),"binary")},fromObject:function(n){return"string"==typeof n?n=e.from(n,"hex"):n instanceof Array?n=e.from(n):n instanceof Uint8Array&&(n=e.from(n)),_(n,t),n},toObject:function(e){var n=t.defaults,r=t.len;return n&&null==e?Array(r?r+1:1).join("00"):(_(e,t),e.toString("hex"))},compare:function(t,n){return e.compare(t,n)}}},b=function(t){return{fromByteBuffer:function(t){return t.readVString()},appendByteBuffer:function(e,n){_(n,t),e.writeVString(n.toString())},fromObject:function(e){return _(e,t),e},toObject:function(e){return t.defaults&&null==e?"":(_(e,t),e)}}},w=function(t){return{fromByteBuffer:function(t){return t.readUint32()},appendByteBuffer:function(e,n){_(n,t),e.writeUint32(n)},fromObject:function(e){if(_(e,t),"number"==typeof e)return e;if(e.getTime)return Math.floor(e.getTime()/1e3);if("string"!=typeof e)throw new Error("Unknown date type: "+e);return"string"!=typeof e||/Z$/.test(e)||(e+="Z"),Math.floor(new Date(e).getTime()/1e3)},toObject:function(e){if(t.defaults&&null==e)return new Date(0).toISOString().split(".")[0];_(e,t),B(e,x(t,{bits:32}));var n=parseInt(e);return new Date(1e3*n).toISOString().split(".")[0]}}},_=function(t,e){if(S(t))throw new Error("Required "+e.typeName);if(null!=e.len){if(null==t.length)throw new Error('len validation requries a "length" property');var n=e.len;if(t.length!==n)throw new Error(e.typeName+" length "+t.length+" does not equal "+n)}if(null!=e.maxLen){var r=e.maxLen;if(null==t.length)throw new Error('maxLen validation requries a "length" property');if(t.length>r)throw new Error(e.typeName+" length "+t.length+" exceeds maxLen "+r)}},E=new o,A=new o("1");function B(t,e){if(S(t))throw new Error("Required "+e.typeName);var n=e.signed,r=void 0!==n&&n,i=e.bits,u=void 0===i?54:i;if(t=String(t).trim(),r&&!/^-?[0-9]+$/.test(t)||!r&&!/^[0-9]+$/.test(t))throw new Error("Number format "+e.typeName+" "+t);var s=r?k(u):D(u),a=r?T(u):E,f=new o(t);if(f.cmp(a)<0||f.cmp(s)>0)throw new Error("Overflow "+e.typeName+" "+t+", max "+s.toString()+", min "+a.toString()+", signed "+r+", bits "+u)}var C=function(t){return"object"===(void 0===t?"undefined":r(t))&&"function"==typeof t.fromByteBuffer&&"function"==typeof t.appendByteBuffer&&"function"==typeof t.fromObject&&"function"==typeof t.toObject},F=function(t,e){return t.compare?e.sort(t.compare):e.sort()},x=function(){return Object.assign.apply(Object,arguments)},S=function(t){return null==t},D=function(t){return new o(1).ishln(t).isub(A)},k=function(t){return new o(1).ishln(t-1).isub(A)},T=function(t){return new o(1).ishln(t-1).ineg()}}).call(this,n(2).Buffer)},function(t,e,n){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}function o(t,e,n){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(n=e,e=10),this._init(t||0,e||10,n||"be"))}var u;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{u=n(200).Buffer}catch(t){}function s(t,e,n){for(var r=0,i=Math.min(t.length,n),o=e;o<i;o++){var u=t.charCodeAt(o)-48;r<<=4,r|=u>=49&&u<=54?u-49+10:u>=17&&u<=22?u-17+10:15&u}return r}function a(t,e,n,r){for(var i=0,o=Math.min(t.length,n),u=e;u<o;u++){var s=t.charCodeAt(u)-48;i*=r,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,n){if("number"==typeof t)return this._initNumber(t,e,n);if("object"==typeof t)return this._initArray(t,e,n);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initNumber=function(t,e,n){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initArray=function(t,e,n){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,u,s=0;if("be"===n)for(i=t.length-1,o=0;i>=0;i-=3)u=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=u<<s&67108863,this.words[o+1]=u>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===n)for(i=0,o=0;i<t.length;i+=3)u=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=u<<s&67108863,this.words[o+1]=u>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var r,i,o=0;for(n=t.length-6,r=0;n>=e;n-=6)i=s(t,n,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);n+6!==e&&(i=s(t,e,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,n){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var o=t.length-n,u=o%r,s=Math.min(o,o-u)+n,f=0,c=n;c<s;c+=r)f=a(t,c,c+r,e),this.imuln(i),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==u){var h=1;for(f=a(t,c,t.length,e),c=0;c<u;c++)h*=e;this.imuln(h),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function l(t,e,n){n.negative=e.negative^t.negative;var r=t.length+e.length|0;n.length=r,r=r-1|0;var i=0|t.words[0],o=0|e.words[0],u=i*o,s=67108863&u,a=u/67108864|0;n.words[0]=s;for(var f=1;f<r;f++){for(var c=a>>>26,h=67108863&a,l=Math.min(f,e.length-1),p=Math.max(0,f-t.length+1);p<=l;p++){var d=f-p|0;c+=(u=(i=0|t.words[d])*(o=0|e.words[p])+h)/67108864|0,h=67108863&u}n.words[f]=0|h,a=0|c}return 0!==a?n.words[f]=0|a:n.length--,n.strip()}o.prototype.toString=function(t,e){var n;if(t=t||10,e=0|e||1,16===t||"hex"===t){n="";for(var i=0,o=0,u=0;u<this.length;u++){var s=this.words[u],a=(16777215&(s<<i|o)).toString(16);n=0!==(o=s>>>24-i&16777215)||u!==this.length-1?f[6-a.length]+a+n:a+n,(i+=2)>=26&&(i-=26,u--)}for(0!==o&&(n=o.toString(16)+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(t===(0|t)&&t>=2&&t<=36){var l=c[t],p=h[t];n="";var d=this.clone();for(d.negative=0;!d.isZero();){var y=d.modn(p).toString(t);n=(d=d.idivn(p)).isZero()?y+n:f[l-y.length]+y+n}for(this.isZero()&&(n="0"+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==u),this.toArrayLike(u,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,n){var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var u,s,a="le"===e,f=new t(o),c=this.clone();if(a){for(s=0;!c.isZero();s++)u=c.andln(255),c.iushrn(8),f[s]=u;for(;s<o;s++)f[s]=0}else{for(s=0;s<o-i;s++)f[s]=0;for(s=0;!c.isZero();s++)u=c.andln(255),c.iushrn(8),f[o-s-1]=u}return f},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,n=0;return e>=4096&&(n+=13,e>>>=13),e>=64&&(n+=7,e>>>=7),e>=8&&(n+=4,e>>>=4),e>=2&&(n+=2,e>>>=2),n+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,n=0;return 0==(8191&e)&&(n+=13,e>>>=13),0==(127&e)&&(n+=7,e>>>=7),0==(15&e)&&(n+=4,e>>>=4),0==(3&e)&&(n+=2,e>>>=2),0==(1&e)&&n++,n},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var n=this._zeroBits(this.words[e]);if(t+=n,26!==n)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var n=0;n<e.length;n++)this.words[n]=this.words[n]&t.words[n];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,n;this.length>t.length?(e=this,n=t):(e=t,n=this);for(var r=0;r<n.length;r++)this.words[r]=e.words[r]^n.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),n=t%26;this._expand(e),n>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var n=t/26|0,i=t%26;return this._expand(n+1),this.words[n]=e?this.words[n]|1<<i:this.words[n]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,n,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(n=this,r=t):(n=t,r=this);for(var i=0,o=0;o<r.length;o++)e=(0|n.words[o])+(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<n.length;o++)e=(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=n.length,0!==i)this.words[this.length]=i,this.length++;else if(n!==this)for(;o<n.length;o++)this.words[o]=n.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var n,r,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(n=this,r=t):(n=t,r=this);for(var o=0,u=0;u<r.length;u++)o=(e=(0|n.words[u])-(0|r.words[u])+o)>>26,this.words[u]=67108863&e;for(;0!==o&&u<n.length;u++)o=(e=(0|n.words[u])+o)>>26,this.words[u]=67108863&e;if(0===o&&u<n.length&&n!==this)for(;u<n.length;u++)this.words[u]=n.words[u];return this.length=Math.max(this.length,u),n!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,n){var r,i,o,u=t.words,s=e.words,a=n.words,f=0,c=0|u[0],h=8191&c,l=c>>>13,p=0|u[1],d=8191&p,y=p>>>13,g=0|u[2],m=8191&g,v=g>>>13,b=0|u[3],w=8191&b,_=b>>>13,E=0|u[4],A=8191&E,B=E>>>13,C=0|u[5],F=8191&C,x=C>>>13,S=0|u[6],D=8191&S,k=S>>>13,T=0|u[7],I=8191&T,M=T>>>13,O=0|u[8],j=8191&O,R=O>>>13,L=0|u[9],N=8191&L,P=L>>>13,U=0|s[0],q=8191&U,z=U>>>13,H=0|s[1],V=8191&H,G=H>>>13,Z=0|s[2],Y=8191&Z,K=Z>>>13,W=0|s[3],X=8191&W,J=W>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],nt=8191&et,rt=et>>>13,it=0|s[6],ot=8191&it,ut=it>>>13,st=0|s[7],at=8191&st,ft=st>>>13,ct=0|s[8],ht=8191&ct,lt=ct>>>13,pt=0|s[9],dt=8191&pt,yt=pt>>>13;n.negative=t.negative^e.negative,n.length=19;var gt=(f+(r=Math.imul(h,q))|0)+((8191&(i=(i=Math.imul(h,z))+Math.imul(l,q)|0))<<13)|0;f=((o=Math.imul(l,z))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(d,q),i=(i=Math.imul(d,z))+Math.imul(y,q)|0,o=Math.imul(y,z);var mt=(f+(r=r+Math.imul(h,V)|0)|0)+((8191&(i=(i=i+Math.imul(h,G)|0)+Math.imul(l,V)|0))<<13)|0;f=((o=o+Math.imul(l,G)|0)+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,r=Math.imul(m,q),i=(i=Math.imul(m,z))+Math.imul(v,q)|0,o=Math.imul(v,z),r=r+Math.imul(d,V)|0,i=(i=i+Math.imul(d,G)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,G)|0;var vt=(f+(r=r+Math.imul(h,Y)|0)|0)+((8191&(i=(i=i+Math.imul(h,K)|0)+Math.imul(l,Y)|0))<<13)|0;f=((o=o+Math.imul(l,K)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(w,q),i=(i=Math.imul(w,z))+Math.imul(_,q)|0,o=Math.imul(_,z),r=r+Math.imul(m,V)|0,i=(i=i+Math.imul(m,G)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,G)|0,r=r+Math.imul(d,Y)|0,i=(i=i+Math.imul(d,K)|0)+Math.imul(y,Y)|0,o=o+Math.imul(y,K)|0;var bt=(f+(r=r+Math.imul(h,X)|0)|0)+((8191&(i=(i=i+Math.imul(h,J)|0)+Math.imul(l,X)|0))<<13)|0;f=((o=o+Math.imul(l,J)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(A,q),i=(i=Math.imul(A,z))+Math.imul(B,q)|0,o=Math.imul(B,z),r=r+Math.imul(w,V)|0,i=(i=i+Math.imul(w,G)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,G)|0,r=r+Math.imul(m,Y)|0,i=(i=i+Math.imul(m,K)|0)+Math.imul(v,Y)|0,o=o+Math.imul(v,K)|0,r=r+Math.imul(d,X)|0,i=(i=i+Math.imul(d,J)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,J)|0;var wt=(f+(r=r+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,tt)|0)+Math.imul(l,Q)|0))<<13)|0;f=((o=o+Math.imul(l,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(F,q),i=(i=Math.imul(F,z))+Math.imul(x,q)|0,o=Math.imul(x,z),r=r+Math.imul(A,V)|0,i=(i=i+Math.imul(A,G)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,G)|0,r=r+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(_,Y)|0,o=o+Math.imul(_,K)|0,r=r+Math.imul(m,X)|0,i=(i=i+Math.imul(m,J)|0)+Math.imul(v,X)|0,o=o+Math.imul(v,J)|0,r=r+Math.imul(d,Q)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0;var _t=(f+(r=r+Math.imul(h,nt)|0)|0)+((8191&(i=(i=i+Math.imul(h,rt)|0)+Math.imul(l,nt)|0))<<13)|0;f=((o=o+Math.imul(l,rt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(D,q),i=(i=Math.imul(D,z))+Math.imul(k,q)|0,o=Math.imul(k,z),r=r+Math.imul(F,V)|0,i=(i=i+Math.imul(F,G)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,G)|0,r=r+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,K)|0)+Math.imul(B,Y)|0,o=o+Math.imul(B,K)|0,r=r+Math.imul(w,X)|0,i=(i=i+Math.imul(w,J)|0)+Math.imul(_,X)|0,o=o+Math.imul(_,J)|0,r=r+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,tt)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,tt)|0,r=r+Math.imul(d,nt)|0,i=(i=i+Math.imul(d,rt)|0)+Math.imul(y,nt)|0,o=o+Math.imul(y,rt)|0;var Et=(f+(r=r+Math.imul(h,ot)|0)|0)+((8191&(i=(i=i+Math.imul(h,ut)|0)+Math.imul(l,ot)|0))<<13)|0;f=((o=o+Math.imul(l,ut)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(I,q),i=(i=Math.imul(I,z))+Math.imul(M,q)|0,o=Math.imul(M,z),r=r+Math.imul(D,V)|0,i=(i=i+Math.imul(D,G)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,G)|0,r=r+Math.imul(F,Y)|0,i=(i=i+Math.imul(F,K)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(A,X)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(B,X)|0,o=o+Math.imul(B,J)|0,r=r+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,r=r+Math.imul(m,nt)|0,i=(i=i+Math.imul(m,rt)|0)+Math.imul(v,nt)|0,o=o+Math.imul(v,rt)|0,r=r+Math.imul(d,ot)|0,i=(i=i+Math.imul(d,ut)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,ut)|0;var At=(f+(r=r+Math.imul(h,at)|0)|0)+((8191&(i=(i=i+Math.imul(h,ft)|0)+Math.imul(l,at)|0))<<13)|0;f=((o=o+Math.imul(l,ft)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(j,q),i=(i=Math.imul(j,z))+Math.imul(R,q)|0,o=Math.imul(R,z),r=r+Math.imul(I,V)|0,i=(i=i+Math.imul(I,G)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,G)|0,r=r+Math.imul(D,Y)|0,i=(i=i+Math.imul(D,K)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(F,X)|0,i=(i=i+Math.imul(F,J)|0)+Math.imul(x,X)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,r=r+Math.imul(w,nt)|0,i=(i=i+Math.imul(w,rt)|0)+Math.imul(_,nt)|0,o=o+Math.imul(_,rt)|0,r=r+Math.imul(m,ot)|0,i=(i=i+Math.imul(m,ut)|0)+Math.imul(v,ot)|0,o=o+Math.imul(v,ut)|0,r=r+Math.imul(d,at)|0,i=(i=i+Math.imul(d,ft)|0)+Math.imul(y,at)|0,o=o+Math.imul(y,ft)|0;var Bt=(f+(r=r+Math.imul(h,ht)|0)|0)+((8191&(i=(i=i+Math.imul(h,lt)|0)+Math.imul(l,ht)|0))<<13)|0;f=((o=o+Math.imul(l,lt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,q),i=(i=Math.imul(N,z))+Math.imul(P,q)|0,o=Math.imul(P,z),r=r+Math.imul(j,V)|0,i=(i=i+Math.imul(j,G)|0)+Math.imul(R,V)|0,o=o+Math.imul(R,G)|0,r=r+Math.imul(I,Y)|0,i=(i=i+Math.imul(I,K)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(D,X)|0,i=(i=i+Math.imul(D,J)|0)+Math.imul(k,X)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(F,Q)|0,i=(i=i+Math.imul(F,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(A,nt)|0,i=(i=i+Math.imul(A,rt)|0)+Math.imul(B,nt)|0,o=o+Math.imul(B,rt)|0,r=r+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,ut)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,ut)|0,r=r+Math.imul(m,at)|0,i=(i=i+Math.imul(m,ft)|0)+Math.imul(v,at)|0,o=o+Math.imul(v,ft)|0,r=r+Math.imul(d,ht)|0,i=(i=i+Math.imul(d,lt)|0)+Math.imul(y,ht)|0,o=o+Math.imul(y,lt)|0;var Ct=(f+(r=r+Math.imul(h,dt)|0)|0)+((8191&(i=(i=i+Math.imul(h,yt)|0)+Math.imul(l,dt)|0))<<13)|0;f=((o=o+Math.imul(l,yt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(N,V),i=(i=Math.imul(N,G))+Math.imul(P,V)|0,o=Math.imul(P,G),r=r+Math.imul(j,Y)|0,i=(i=i+Math.imul(j,K)|0)+Math.imul(R,Y)|0,o=o+Math.imul(R,K)|0,r=r+Math.imul(I,X)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(M,X)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(D,Q)|0,i=(i=i+Math.imul(D,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(F,nt)|0,i=(i=i+Math.imul(F,rt)|0)+Math.imul(x,nt)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,ut)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,ut)|0,r=r+Math.imul(w,at)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(_,at)|0,o=o+Math.imul(_,ft)|0,r=r+Math.imul(m,ht)|0,i=(i=i+Math.imul(m,lt)|0)+Math.imul(v,ht)|0,o=o+Math.imul(v,lt)|0;var Ft=(f+(r=r+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,yt)|0)+Math.imul(y,dt)|0))<<13)|0;f=((o=o+Math.imul(y,yt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,r=Math.imul(N,Y),i=(i=Math.imul(N,K))+Math.imul(P,Y)|0,o=Math.imul(P,K),r=r+Math.imul(j,X)|0,i=(i=i+Math.imul(j,J)|0)+Math.imul(R,X)|0,o=o+Math.imul(R,J)|0,r=r+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(D,nt)|0,i=(i=i+Math.imul(D,rt)|0)+Math.imul(k,nt)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(F,ot)|0,i=(i=i+Math.imul(F,ut)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(A,at)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(B,at)|0,o=o+Math.imul(B,ft)|0,r=r+Math.imul(w,ht)|0,i=(i=i+Math.imul(w,lt)|0)+Math.imul(_,ht)|0,o=o+Math.imul(_,lt)|0;var xt=(f+(r=r+Math.imul(m,dt)|0)|0)+((8191&(i=(i=i+Math.imul(m,yt)|0)+Math.imul(v,dt)|0))<<13)|0;f=((o=o+Math.imul(v,yt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,X),i=(i=Math.imul(N,J))+Math.imul(P,X)|0,o=Math.imul(P,J),r=r+Math.imul(j,Q)|0,i=(i=i+Math.imul(j,tt)|0)+Math.imul(R,Q)|0,o=o+Math.imul(R,tt)|0,r=r+Math.imul(I,nt)|0,i=(i=i+Math.imul(I,rt)|0)+Math.imul(M,nt)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(D,ot)|0,i=(i=i+Math.imul(D,ut)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(F,at)|0,i=(i=i+Math.imul(F,ft)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ft)|0,r=r+Math.imul(A,ht)|0,i=(i=i+Math.imul(A,lt)|0)+Math.imul(B,ht)|0,o=o+Math.imul(B,lt)|0;var St=(f+(r=r+Math.imul(w,dt)|0)|0)+((8191&(i=(i=i+Math.imul(w,yt)|0)+Math.imul(_,dt)|0))<<13)|0;f=((o=o+Math.imul(_,yt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(N,Q),i=(i=Math.imul(N,tt))+Math.imul(P,Q)|0,o=Math.imul(P,tt),r=r+Math.imul(j,nt)|0,i=(i=i+Math.imul(j,rt)|0)+Math.imul(R,nt)|0,o=o+Math.imul(R,rt)|0,r=r+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,ut)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(D,at)|0,i=(i=i+Math.imul(D,ft)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ft)|0,r=r+Math.imul(F,ht)|0,i=(i=i+Math.imul(F,lt)|0)+Math.imul(x,ht)|0,o=o+Math.imul(x,lt)|0;var Dt=(f+(r=r+Math.imul(A,dt)|0)|0)+((8191&(i=(i=i+Math.imul(A,yt)|0)+Math.imul(B,dt)|0))<<13)|0;f=((o=o+Math.imul(B,yt)|0)+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,r=Math.imul(N,nt),i=(i=Math.imul(N,rt))+Math.imul(P,nt)|0,o=Math.imul(P,rt),r=r+Math.imul(j,ot)|0,i=(i=i+Math.imul(j,ut)|0)+Math.imul(R,ot)|0,o=o+Math.imul(R,ut)|0,r=r+Math.imul(I,at)|0,i=(i=i+Math.imul(I,ft)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ft)|0,r=r+Math.imul(D,ht)|0,i=(i=i+Math.imul(D,lt)|0)+Math.imul(k,ht)|0,o=o+Math.imul(k,lt)|0;var kt=(f+(r=r+Math.imul(F,dt)|0)|0)+((8191&(i=(i=i+Math.imul(F,yt)|0)+Math.imul(x,dt)|0))<<13)|0;f=((o=o+Math.imul(x,yt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,ot),i=(i=Math.imul(N,ut))+Math.imul(P,ot)|0,o=Math.imul(P,ut),r=r+Math.imul(j,at)|0,i=(i=i+Math.imul(j,ft)|0)+Math.imul(R,at)|0,o=o+Math.imul(R,ft)|0,r=r+Math.imul(I,ht)|0,i=(i=i+Math.imul(I,lt)|0)+Math.imul(M,ht)|0,o=o+Math.imul(M,lt)|0;var Tt=(f+(r=r+Math.imul(D,dt)|0)|0)+((8191&(i=(i=i+Math.imul(D,yt)|0)+Math.imul(k,dt)|0))<<13)|0;f=((o=o+Math.imul(k,yt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),i=(i=Math.imul(N,ft))+Math.imul(P,at)|0,o=Math.imul(P,ft),r=r+Math.imul(j,ht)|0,i=(i=i+Math.imul(j,lt)|0)+Math.imul(R,ht)|0,o=o+Math.imul(R,lt)|0;var It=(f+(r=r+Math.imul(I,dt)|0)|0)+((8191&(i=(i=i+Math.imul(I,yt)|0)+Math.imul(M,dt)|0))<<13)|0;f=((o=o+Math.imul(M,yt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ht),i=(i=Math.imul(N,lt))+Math.imul(P,ht)|0,o=Math.imul(P,lt);var Mt=(f+(r=r+Math.imul(j,dt)|0)|0)+((8191&(i=(i=i+Math.imul(j,yt)|0)+Math.imul(R,dt)|0))<<13)|0;f=((o=o+Math.imul(R,yt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863;var Ot=(f+(r=Math.imul(N,dt))|0)+((8191&(i=(i=Math.imul(N,yt))+Math.imul(P,dt)|0))<<13)|0;return f=((o=Math.imul(P,yt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,a[0]=gt,a[1]=mt,a[2]=vt,a[3]=bt,a[4]=wt,a[5]=_t,a[6]=Et,a[7]=At,a[8]=Bt,a[9]=Ct,a[10]=Ft,a[11]=xt,a[12]=St,a[13]=Dt,a[14]=kt,a[15]=Tt,a[16]=It,a[17]=Mt,a[18]=Ot,0!==f&&(a[19]=f,n.length++),n};function d(t,e,n){return(new y).mulp(t,e,n)}function y(t,e){this.x=t,this.y=e}Math.imul||(p=l),o.prototype.mulTo=function(t,e){var n=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):n<63?l(this,t,e):n<1024?function(t,e,n){n.negative=e.negative^t.negative,n.length=t.length+e.length;for(var r=0,i=0,o=0;o<n.length-1;o++){var u=i;i=0;for(var s=67108863&r,a=Math.min(o,e.length-1),f=Math.max(0,o-t.length+1);f<=a;f++){var c=o-f,h=(0|t.words[c])*(0|e.words[f]),l=67108863&h;s=67108863&(l=l+s|0),i+=(u=(u=u+(h/67108864|0)|0)+(l>>>26)|0)>>>26,u&=67108863}n.words[o]=s,r=u,u=i}return 0!==r?n.words[o]=r:n.length--,n.strip()}(this,t,e):d(this,t,e)},y.prototype.makeRBT=function(t){for(var e=new Array(t),n=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,n,t);return e},y.prototype.revBin=function(t,e,n){if(0===t||t===n-1)return t;for(var r=0,i=0;i<e;i++)r|=(1&t)<<e-i-1,t>>=1;return r},y.prototype.permute=function(t,e,n,r,i,o){for(var u=0;u<o;u++)r[u]=e[t[u]],i[u]=n[t[u]]},y.prototype.transform=function(t,e,n,r,i,o){this.permute(o,t,e,n,r,i);for(var u=1;u<i;u<<=1)for(var s=u<<1,a=Math.cos(2*Math.PI/s),f=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var h=a,l=f,p=0;p<u;p++){var d=n[c+p],y=r[c+p],g=n[c+p+u],m=r[c+p+u],v=h*g-l*m;m=h*m+l*g,g=v,n[c+p]=d+g,r[c+p]=y+m,n[c+p+u]=d-g,r[c+p+u]=y-m,p!==s&&(v=a*h-f*l,l=a*l+f*h,h=v)}},y.prototype.guessLen13b=function(t,e){var n=1|Math.max(e,t),r=1&n,i=0;for(n=n/2|0;n;n>>>=1)i++;return 1<<i+1+r},y.prototype.conjugate=function(t,e,n){if(!(n<=1))for(var r=0;r<n/2;r++){var i=t[r];t[r]=t[n-r-1],t[n-r-1]=i,i=e[r],e[r]=-e[n-r-1],e[n-r-1]=-i}},y.prototype.normalize13b=function(t,e){for(var n=0,r=0;r<e/2;r++){var i=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+n;t[r]=67108863&i,n=i<67108864?0:i/67108864|0}return t},y.prototype.convert13b=function(t,e,n,i){for(var o=0,u=0;u<e;u++)o+=0|t[u],n[2*u]=8191&o,o>>>=13,n[2*u+1]=8191&o,o>>>=13;for(u=2*e;u<i;++u)n[u]=0;r(0===o),r(0==(-8192&o))},y.prototype.stub=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=0;return e},y.prototype.mulp=function(t,e,n){var r=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(r),o=this.stub(r),u=new Array(r),s=new Array(r),a=new Array(r),f=new Array(r),c=new Array(r),h=new Array(r),l=n.words;l.length=r,this.convert13b(t.words,t.length,u,r),this.convert13b(e.words,e.length,f,r),this.transform(u,o,s,a,r,i),this.transform(f,o,c,h,r,i);for(var p=0;p<r;p++){var d=s[p]*c[p]-a[p]*h[p];a[p]=s[p]*h[p]+a[p]*c[p],s[p]=d}return this.conjugate(s,a,r),this.transform(s,a,l,o,r,i),this.conjugate(l,o,r),this.normalize13b(l,r),n.negative=t.negative^e.negative,n.length=t.length+e.length,n.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),d(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,n=0;n<this.length;n++){var i=(0|this.words[n])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[n]=67108863&o}return 0!==e&&(this.words[n]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),n=0;n<e.length;n++){var r=n/26|0,i=n%26;e[n]=(t.words[r]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var n=this,r=0;r<e.length&&0===e[r];r++,n=n.sqr());if(++r<e.length)for(var i=n.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(n=n.mul(i));return n},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,n=t%26,i=(t-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var u=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<n;this.words[e]=a|u,u=s>>>26-n}u&&(this.words[e]=u,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,n){var i;r("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,u=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=n;if(i-=u,i=Math.max(0,i),a){for(var f=0;f<u;f++)a.words[f]=this.words[f];a.length=u}if(0===u);else if(this.length>u)for(this.length-=u,f=0;f<this.length;f++)this.words[f]=this.words[f+u];else this.words[0]=0,this.length=1;var c=0;for(f=this.length-1;f>=0&&(0!==c||f>=i);f--){var h=0|this.words[f];this.words[f]=c<<26-o|h>>>o,c=h&s}return a&&0!==c&&(a.words[a.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,n){return r(0===this.negative),this.iushrn(t,e,n)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26,i=1<<e;return!(this.length<=n)&&!!(this.words[n]&i)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==e&&n++,this.length=Math.min(n,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,n){var i,o,u=t.length+n;this._expand(u);var s=0;for(i=0;i<t.length;i++){o=(0|this.words[i+n])+s;var a=(0|t.words[i])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)s=(o=(0|this.words[i+n])+s)>>26,this.words[i+n]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,i=0;i<this.length;i++)s=(o=-(0|this.words[i])+s)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var n=(this.length,t.length),r=this.clone(),i=t,u=0|i.words[i.length-1];0!==(n=26-this._countBits(u))&&(i=i.ushln(n),r.iushln(n),u=0|i.words[i.length-1]);var s,a=r.length-i.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var f=0;f<s.length;f++)s.words[f]=0}var c=r.clone()._ishlnsubmul(i,1,a);0===c.negative&&(r=c,s&&(s.words[a]=1));for(var h=a-1;h>=0;h--){var l=67108864*(0|r.words[i.length+h])+(0|r.words[i.length+h-1]);for(l=Math.min(l/u|0,67108863),r._ishlnsubmul(i,l,h);0!==r.negative;)l--,r.negative=0,r._ishlnsubmul(i,1,h),r.isZero()||(r.negative^=1);s&&(s.words[h]=l)}return s&&s.strip(),r.strip(),"div"!==e&&0!==n&&r.iushrn(n),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,n){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(u=s.mod.neg(),n&&0!==u.negative&&u.iadd(t)),{div:i,mod:u}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(u=s.mod.neg(),n&&0!==u.negative&&u.isub(t)),{div:s.div,mod:u}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,u,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var n=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),i=t.andln(1),o=n.cmp(r);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,n=0,i=this.length-1;i>=0;i--)n=(e*n+(0|this.words[i]))%t;return n},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var i=(0|this.words[n])+67108864*e;this.words[n]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),u=new o(0),s=new o(0),a=new o(1),f=0;e.isEven()&&n.isEven();)e.iushrn(1),n.iushrn(1),++f;for(var c=n.clone(),h=e.clone();!e.isZero();){for(var l=0,p=1;0==(e.words[0]&p)&&l<26;++l,p<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(i.isOdd()||u.isOdd())&&(i.iadd(c),u.isub(h)),i.iushrn(1),u.iushrn(1);for(var d=0,y=1;0==(n.words[0]&y)&&d<26;++d,y<<=1);if(d>0)for(n.iushrn(d);d-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(h)),s.iushrn(1),a.iushrn(1);e.cmp(n)>=0?(e.isub(n),i.isub(s),u.isub(a)):(n.isub(e),s.isub(i),a.isub(u))}return{a:s,b:a,gcd:n.iushln(f)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,u=new o(1),s=new o(0),a=n.clone();e.cmpn(1)>0&&n.cmpn(1)>0;){for(var f=0,c=1;0==(e.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(e.iushrn(f);f-- >0;)u.isOdd()&&u.iadd(a),u.iushrn(1);for(var h=0,l=1;0==(n.words[0]&l)&&h<26;++h,l<<=1);if(h>0)for(n.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(n)>=0?(e.isub(n),u.isub(s)):(n.isub(e),s.isub(u))}return(i=0===e.cmpn(1)?u:s).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),n=t.clone();e.negative=0,n.negative=0;for(var r=0;e.isEven()&&n.isEven();r++)e.iushrn(1),n.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;n.isEven();)n.iushrn(1);var i=e.cmp(n);if(i<0){var o=e;e=n,n=o}else if(0===i||0===n.cmpn(1))break;e.isub(n)}return n.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,n=(t-e)/26,i=1<<e;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,u=n;0!==o&&u<this.length;u++){var s=0|this.words[u];o=(s+=o)>>>26,s&=67108863,this.words[u]=s}return 0!==o&&(this.words[u]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,n=t<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)e=1;else{n&&(t=-t),r(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],i=0|t.words[n];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new E(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function m(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function E(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function A(t){E.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},m.prototype.ireduce=function(t){var e,n=t;do{this.split(n,this.tmp),e=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):n.strip(),n},m.prototype.split=function(t,e){t.iushrn(this.n,0,e)},m.prototype.imulK=function(t){return t.imul(this.k)},i(v,m),v.prototype.split=function(t,e){for(var n=Math.min(t.length,9),r=0;r<n;r++)e.words[r]=t.words[r];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(e.words[e.length++]=4194303&i,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|i>>>22,i=o}i>>>=22,t.words[r-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,n=0;n<t.length;n++){var r=0|t.words[n];e+=977*r,t.words[n]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,m),i(w,m),i(_,m),_.prototype.imulK=function(t){for(var e=0,n=0;n<t.length;n++){var r=19*(0|t.words[n])+e,i=67108863&r;r>>>=26,t.words[n]=i,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return g[t]=e,e},E.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},E.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},E.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},E.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},E.prototype.add=function(t,e){this._verify2(t,e);var n=t.add(e);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},E.prototype.iadd=function(t,e){this._verify2(t,e);var n=t.iadd(e);return n.cmp(this.m)>=0&&n.isub(this.m),n},E.prototype.sub=function(t,e){this._verify2(t,e);var n=t.sub(e);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},E.prototype.isub=function(t,e){this._verify2(t,e);var n=t.isub(e);return n.cmpn(0)<0&&n.iadd(this.m),n},E.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},E.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},E.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},E.prototype.isqr=function(t){return this.imul(t,t.clone())},E.prototype.sqr=function(t){return this.mul(t,t)},E.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var n=this.m.add(new o(1)).iushrn(2);return this.pow(t,n)}for(var i=this.m.subn(1),u=0;!i.isZero()&&0===i.andln(1);)u++,i.iushrn(1);r(!i.isZero());var s=new o(1).toRed(this),a=s.redNeg(),f=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,f).cmp(a);)c.redIAdd(a);for(var h=this.pow(c,i),l=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),d=u;0!==p.cmp(s);){for(var y=p,g=0;0!==y.cmp(s);g++)y=y.redSqr();r(g<d);var m=this.pow(h,new o(1).iushln(d-g-1));l=l.redMul(m),h=m.redSqr(),p=p.redMul(h),d=g}return l},E.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},E.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var n=new Array(16);n[0]=new o(1).toRed(this),n[1]=t;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],t);var i=n[0],u=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var f=e.words[r],c=a-1;c>=0;c--){var h=f>>c&1;i!==n[0]&&(i=this.sqr(i)),0!==h||0!==u?(u<<=1,u|=h,(4===++s||0===r&&0===c)&&(i=this.mul(i,n[u]),s=0,u=0)):s=0}a=26}return i},E.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},E.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new A(t)},i(A,E),A.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},A.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},A.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var n=t.imul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},A.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var n=t.mul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),u=i;return i.cmp(this.m)>=0?u=i.isub(this.m):i.cmpn(0)<0&&(u=i.iadd(this.m)),u._forceRed(this)},A.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,n(199)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){},function(t,e,n){"use strict";(function(e){var n,r,i,o,u,s,a,f,c=!1;function h(t,e,n){var r=t[e++],i=t[e++],o=t[e++],u=t[e];return"bige"===n?256*(256*(256*r+i)+o)+u:256*(256*(256*u+o)+i)+r}function l(t,e,n,r){var i=e>>>24&255,o=e>>16&255,u=e>>8&255,s=255&e;"bige"===r?(t[n++]=i,t[n++]=o,t[n++]=u,t[n]=s):(t[n++]=s,t[n++]=u,t[n++]=o,t[n]=i)}function p(t,e,n,r,i){"bige"===i?(l(t,e,r,i),l(t,n,r+4,i)):(l(t,n,r,i),l(t,e,r+4,i))}"function"==typeof Float32Array&&function(){var t=new Float32Array(1),e=new Uint8Array(t.buffer);t[0]=-1,c=0===e[3],n=function(n,r){return(r=r||0)<0||r+4>n.length?0:(e[0]=n[r++],e[1]=n[r++],e[2]=n[r++],e[3]=n[r],t[0])},i=function(n,r){return(r=r||0)<0||r+4>n.length?0:(e[3]=n[r++],e[2]=n[r++],e[1]=n[r++],e[0]=n[r],t[0])},r=function(n,r,i){i=i||0,t[0]=r,n[i++]=e[0],n[i++]=e[1],n[i++]=e[2],n[i]=e[3]},o=function(n,r,i){i=i||0,t[0]=r,n[i++]=e[3],n[i++]=e[2],n[i++]=e[1],n[i]=e[0]}}(),"function"==typeof Float64Array&&function(){var t=new Float64Array(1),e=new Uint8Array(t.buffer);u=function(n,r){return(r=r||0)<0||r+8>n.length?0:(e[0]=n[r+0],e[1]=n[r+1],e[2]=n[r+2],e[3]=n[r+3],e[4]=n[r+4],e[5]=n[r+5],e[6]=n[r+6],e[7]=n[r+7],t[0])},a=function(n,r){return(r=r||0)<0||r+8>n.length?0:(e[7]=n[r+0],e[6]=n[r+1],e[5]=n[r+2],e[4]=n[r+3],e[3]=n[r+4],e[2]=n[r+5],e[1]=n[r+6],e[0]=n[r+7],t[0])},s=function(n,r,i){i=i||0,t[0]=r,n[i+0]=e[0],n[i+1]=e[1],n[i+2]=e[2],n[i+3]=e[3],n[i+4]=e[4],n[i+5]=e[5],n[i+6]=e[6],n[i+7]=e[7]},f=function(n,r,i){i=i||0,t[0]=r,n[i+0]=e[7],n[i+1]=e[6],n[i+2]=e[5],n[i+3]=e[4],n[i+4]=e[3],n[i+5]=e[2],n[i+6]=e[1],n[i+7]=e[0]}}();for(var d=new Array,y=0;y<1200;y++)d[y]=Math.pow(2,y);var g=new Array;for(y=0;y<1200;y++)g[y]=Math.pow(2,-y);function m(t){return t>=0?d[t]:g[-t]}var v=4294967296,b=2.220446049250313e-16;m(-1023);function w(t,e,n){var r,i,o=h(t,e,n),u=h(t,e+4,n);"bige"===n?(r=o,i=u):(r=u,i=o);var s=(1048575&r)*v+i,a=(2146435072&r)>>>20;return(r>>31||1)*(0===a?s?s*m(-1074):0:a<2047?s>=0?(1+s*b)*m(a-1023):0:s?NaN:1/0)}var _=Math.pow(2,-23),E=Math.pow(2,-127);function A(t,e,n){var r=h(t,e,n),i=8388607&r,o=(2139095040&r)>>>23;return(r>>31||1)*(0===o?i?i*_*2*E:0:o<255?(1+i*_)*m(o-127):i?NaN:1/0)}var B={exp:0,mant:0};function C(t){var e=0;return t>=2?(t*=m(-(e=x(1,t))))>=2&&(t/=2,e+=1):t<1&&((e=x(t,2))<=1023?t*=m(e):(t*=m(e-100),t*=m(100)),e=-e),B.exp=e,B.mant=t,B}var F=Math.pow(2,192);function x(t,e){for(var n=0;t*F<e;)t*=F,n+=192;for(;0x10000000000000000*t<e;)t*=0x10000000000000000,n+=64;for(;65536*t<e;)t*=65536,n+=16;for(;64*t<e;)t*=64,n+=6;for(;2*t<e;)t*=2,n+=1;return n}function S(t,e){return(t*=e)-Math.floor(t)!=.5||1&t?t+.5:t}function D(t,e,n,r){var i,o=0;e<0&&(o=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=127,i.exp<=0?i.exp<=-25?(i.mant=0,i.exp=0):(i.mant=S(i.mant,m(22+i.exp)),i.exp=0,i.mant>=8388608&&(i.mant-=8388608,i.exp+=1)):(i.mant=S(i.mant-1,8388608),i.mant>=8388608&&(i.mant-=8388608,i.exp+=1),i.exp>254&&(i.mant=0,i.exp=255)),l(t,o|i.exp<<23|i.mant,n,r)):l(t,0===e?1/e<0?2147483648:0:e===1/0?2139095040|o:2143289344,n,r)}new e(8);var k=Math.pow(2,52);function T(t,e,n,r){var i,o,u,s=0;e<0&&(s=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=1023,i.exp<=0?(i.mant*=m(51+i.exp),i.exp=0):i.mant=(i.mant-1)*k,p(t,o=s|i.exp<<20|i.mant/4294967296,u=i.mant>>>0,n,r)):(0===e?(o=1/e<0?2147483648:0,u=0):e===1/0?(o=s+2146435072,u=0):(o=2146959360,u=0),p(t,o,u,n,r))}(function e(){var d=t.exports||this;d.readWord=h,d.writeWord=l,d.writeDoubleWord=p,d.readFloat=A,d.writeFloat=D,d.readDouble=w,d.writeDouble=T,d._useFloatArray=function(t){d._usingFloatArray=t,t?("full"==t&&(d.readFloatLE=c?i:n),d.writeFloatLE=c?o:r,"full"==t&&(d.readFloatBE=c?n:i),d.writeFloatBE=c?r:o,d.readDoubleLE=c?a:u,d.writeDoubleLE=c?f:s,d.readDoubleBE=c?u:a,d.writeDoubleBE=c?s:f):(d._usingFloatArray="",d.readFloatLE=function(t,e){return d.readFloat(t,e||0,"le")},d.writeFloatLE=function(t,e,n){d.writeFloat(t,e,n||0,"le")},d.readFloatBE=function(t,e){return d.readFloat(t,e||0,"bige")},d.writeFloatBE=function(t,e,n){d.writeFloat(t,e,n||0,"bige")},d.readDoubleLE=function(t,e){return d.readDouble(t,e||0,"le")},d.writeDoubleLE=function(t,e,n){d.writeDouble(t,e,n||0,"le")},d.readDoubleBE=function(t,e){return d.readDouble(t,e||0,"bige")},d.writeDoubleBE=function(t,e,n){d.writeDouble(t,e,n||0,"bige")})},d._getBigeCpu=function(){return c},d._setBigeCpu=function(t){c=t},d._useFloatArray(!1),d._useFloatArray(n&&u&&"fastest"),e.prototype=d}).call(this)}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(19),o=n(203);t.exports={create:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.config,i=[];n.sort||(n.sort={});for(var a in t){var f=t[a],c=f.base,h=f.fields,l=void 0===f?"undefined":r(f);if("object"===l){if(!c&&!h){i.push("Expecting "+a+".fields or "+a+".base");continue}if(c&&"string"!=typeof c&&i.push("Expecting string "+a+".base"),h)if("object"!==(void 0===h?"undefined":r(h)))i.push("Expecting object "+a+".fields");else for(var p in h)"string"!=typeof h[p]&&i.push("Expecting string in "+a+".fields."+p)}else if("string"!==l){i.push("Expecting object or string under "+a+", instead got "+(void 0===f?"undefined":r(f)));continue}}var d={};for(var y in t){var g=t[y];"object"===(void 0===g?"undefined":r(g))&&(d[y]=o(y,n))}for(var m in t){var v=t[m];if("string"==typeof v){var b=e[v];if(b)e[m]=b;else{var w=C(m,v);w?d[m]=w:i.push("Unrecognized type or struct "+m+"."+v)}}}for(var _ in t){var E=d[_];if(E){var A=t[_];if("object"===(void 0===A?"undefined":r(A))&&A.base){var c=A.base,B=d[c];if(!B){i.push("Missing "+c+" in "+_+".base");continue}E.add("",s(B))}}}function C(t,r,o,s){var a=u(r);if(!a)return null;var f=a.name,c=a.annotation,h=a.arrayType,l=void 0;if(c){var p=e[f];if(null==p)return i.push("Missing "+f+" in "+r),null;var y=[],g=!0,m=!1,v=void 0;try{for(var b,w=c[Symbol.iterator]();!(g=(b=w.next()).done);g=!0){var _=b.value,E=C(t,_,null,s);if(!E)return i.push("Missing "+_+" in "+r),null;y.push(E)}}catch(t){m=!0,v=t}finally{try{!g&&w.return&&w.return()}finally{if(m)throw v}}l=p(y)}else if(null==h){var A=d[f];if(A)return A;var B=e[f];if(!B)return null;l=B(o)}else if(""===h){var F=C(t,a.name,null,s);if(!F)return null;var x=n.sort[t+"."+s]||!1;l=e.vector(F,x)}else if(h.length>0){var S=C(t,a.arrayType,null,s);if(!S)return i.push("Missing "+a.arrayType+" in "+r),null;var D=C(t,a.name,S,s);if(!D)return i.push("Missing "+a.name+" in "+r),null;l=D}return a.optional?e.optional(l):l}for(var F in t){var x=d[F];if(x){var S=t[F];if(S.fields){var h=S.fields;for(var D in h){var k=h[D],T=C(F,k,null,D);T?x.add(D,T):i.push("Missing "+k+" in "+F+".fields."+D)}}}}if(i.length)return{errors:i};return{errors:i,structs:d}},toBuffer:function(t,n){var r=t.fromObject(n);return e.from(function(t,e){var n=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);return t.appendByteBuffer(n,e),n.copy(0,n.offset)}(t,r).toBinary(),"binary")},fromBuffer:function(t,e){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=i.fromBinary(e.toString("binary"),i.LITTLE_ENDIAN),o=t.fromByteBuffer(r);return n?t.toObject(o):o}};var u=function(t){if(!t||"string"!=typeof t)return null;var e=(t=t.trim()).match(/<(.*)>/);if(e){var n=e?e[1].replace(/ /g,"").split(","):null;return{name:t=t.replace(e[0],"").trim(),annotation:n}}var r=t.match(/\[(.*)\]/),i=r?r[1].trim():null;r&&(t=t.replace(r[0],"").trim());var o=!1;return/\?$/.test(t)&&(t=t.substring(0,t.length-1),o=!0),{name:t,arrayType:i,optional:o}},s=function(t){return{fromByteBuffer:function(e){return t.fromByteBuffer(e)},appendByteBuffer:function(e,n){t.appendByteBuffer(e,n)},fromObject:function(e){return t.fromObject(e)},toObject:function(e){return t.toObject(e)}}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(19);t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{debug:!1};e=Object.assign({override:{}},e);var n={},i=void 0,o=void 0;return{compare:function(t,e){var n=t[o],r=e[o];return i&&i.compare?i.compare(n,r):n>r?1:n<r?-1:0},add:function(t,e){n[t]=e,null==i&&(i=e,o=t)},fields:n,fromByteBuffer:function(r){var i={},o=null;try{for(o in n){var u=n[o];try{var s=r.offset;if(""===o)i=u.fromByteBuffer(r,e);else{var a=e.override[t+"."+o+".fromByteBuffer"];a?a({fields:n,object:i,b:r,config:e}):i[o]=u.fromByteBuffer(r,e)}if(e.debug)if(u.struct)console.error(u.struct);else{var f=void 0;try{f=u.toObject(""===o?i:i[o],e)}catch(t){f=""}var c=r.copy(s,r.offset);console.error("fromByteBuffer",t+"."+o,"'"+f+"'",c.toHex())}}catch(e){throw console.error(e+" in "+t+"."+o),r.printDebug(),e}}}catch(e){throw e.message+=" in "+t+"."+o,e}return i},appendByteBuffer:function(r,i){var o=null;try{for(o in n){var u=n[o];if(""===o)u.appendByteBuffer(r,i);else{var s=e.override[t+"."+o+".appendByteBuffer"];s?s({fields:n,object:i,b:r}):u.appendByteBuffer(r,i[o])}}}catch(e){try{e.message+=" "+t+"."+o+" = "+JSON.stringify(i[o])}catch(n){e.message+=" "+t+"."+o+" = "+i[o]}throw e}},fromObject:function(r){var i=e.override[t+".fromObject"];if(i){var o=i(r);if(null!=o)return o}var u={},s=null;try{for(s in n){var a=n[s];if(""===s){var f=a.fromObject(r);Object.assign(u,f)}else{var c=e.override[t+"."+s+".fromObject"];if(c)c({fields:n,object:r,result:u});else{var h=r[s],l=a.fromObject(h);u[s]=l}}}}catch(e){throw e.message+=" "+t+"."+s,e}return u},toObject:function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.override[t+".toObject"];if(o){var u=o(i);if(null!=u)return u}var s={},a=null;try{for(a in n){var f=n[a],c=e.override[t+"."+a+".toObject"];if(c)c({fields:n,object:i,result:s,config:e});else if(""===a){var h=f.toObject(i,e);Object.assign(s,h)}else{var l=f.toObject(i?i[a]:null,e);s[a]=l}if(e.debug)try{var p=new r(r.DEFAULT_CAPACITY,r.LITTLE_ENDIAN);if(null!=i){var d=i[a];if(d){var y=e.override[t+"."+a+".appendByteBuffer"];c&&y?y({fields:n,object:i,b:p}):f.appendByteBuffer(p,d)}}p=p.copy(0,p.offset),console.error("toObject",t+"."+a,"'"+s[a]+"'",p.toHex())}catch(e){e.message=t+"."+a+" "+e.message,console.error(e)}}}catch(e){throw e.message+=" "+t+"."+a,e}return s}}}},function(t,e,n){"use strict";t.exports={chain:n(205),history:n(206)}},function(t){t.exports={get_info:{brief:"Return general network information.",params:null,results:"string"},get_account:{brief:"Fetch a blockchain account",params:{account_name:"name"},results:"string"},get_code:{brief:"Fetch smart contract code",params:{account_name:"name",code_as_wasm:{type:"bool",default:!1}},results:{account_name:"name",wast:"string",wasm:"string",code_hash:"sha256",abi:"optional<abi_def>"}},get_code_hash:{brief:"",params:{account_name:"name"},results:{account_name:"name",code_hash:"sha256"}},get_abi:{params:{account_name:"name"},results:{account_name:"name",abi:"abi_def?"}},get_raw_code_and_abi:{params:{account_name:"name"},results:{account_name:"name",wasm:"bytes",abi:"abi_def?"}},abi_json_to_bin:{brief:"Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",params:{code:"name",action:"name",args:"bytes"},results:{binargs:"bytes"}},abi_bin_to_json:{brief:"Convert bin hex back into Abi json definition.",params:{code:"name",action:"name",binargs:"bytes"},results:{args:"bytes"}},get_required_keys:{params:{transaction:"transaction",available_keys:"set[public_key]"},results:"Set[public_key]"},get_block:{brief:"Fetch a block from the blockchain.",params:{block_num_or_id:"string"},results:"variant",errors:{"unknown block":null}},get_block_header_state:{brief:"Fetch the minimum state necessary to validate transaction headers.",params:{block_num_or_id:"string"},results:"string",errors:{block_id_type_exception:"Invalid block ID",unknown_block_exception:"Could not find reversible block"}},get_table_rows:{brief:"Fetch smart contract data from an account.",params:{json:{type:"bool",default:!1},code:"name",scope:"string",table:"name",table_key:"string",lower_bound:{type:"string",default:"0"},upper_bound:{type:"string",default:"-1"},limit:{type:"uint32",default:"10"},key_type:{type:"string",doc:"The key type of --index, primary only supports (i64), all others support (i64, i128, i256, float64, float128). Special type 'name' indicates an account name."},index_position:{type:"string",doc:"1 - primary (first), 2 - secondary index (in order defined by multi_index), 3 - third index, etc"}},results:{rows:{type:"vector",doc:"One row per item, either encoded as hex String or JSON object"},more:{type:"bool",doc:"True if last element in data is not the end and sizeof data() < limit"}}},get_currency_balance:{params:{code:"name",account:"name",symbol:"optional<string>"},results:"asset[]"},get_currency_stats:{params:{code:"name",symbol:"string"},results:{supply:"asset",max_supply:"asset",issuer:"account_name"}},get_producers:{brief:"Fetch smart contract data from producer.",params:{json:{type:"bool",default:!1},lower_bound:"string",limit:{type:"uint32",default:"50"}},results:{rows:{type:"vector",doc:"one row per item, either encoded as hex String or JSON object"},total_producer_vote_weight:{type:"double",doc:"total vote"},more:{type:"string",doc:"fill lower_bound with this value to fetch more rows"}}},get_producer_schedule:{brief:"",params:{},results:{vector:"proposed"}},get_scheduled_transactions:{brief:"",params:{json:{type:"bool",default:!1},lower_bound:{type:"string",doc:"timestamp OR transaction ID"},limit:{type:"uint32",default:"50"}},results:{vector:"transactions",more:{type:"string",doc:"fill lower_bound with this to fetch next set of transactions"}}},push_block:{brief:"Append a block to the chain database.",params:{block:"signed_block"},results:null},push_transaction:{brief:"Attempts to push the transaction into the pending queue.",params:{signed_transaction:"signed_transaction"},results:{transaction_id:"fixed_bytes32",processed:"bytes"}},push_transactions:{brief:"Attempts to push transactions into the pending queue.",params:{"signed_transaction[]":"signed_transaction"},results:"vector[push_transaction.results]"}}},function(t){t.exports={get_actions:{params:{account_name:"account_name",pos:{type:"int32?",doc:"An absolute sequence positon -1 is the end/last action"},offset:{type:"int32?",doc:"The number of actions relative to pos, negative numbers return [pos-offset,pos), positive numbers return [pos,pos+offset)"}},results:{actions:"ordered_action_result[]",last_irreversible_block:"uint32",time_limit_exceeded_error:"bool?"},structs:[{name:"ordered_action_result",fields:{global_action_seq:"uint64",account_action_seq:"int32",block_num:"uint32",block_time:"block_timestamp_type",action_trace:"variant"}}]},get_transaction:{brief:"Retrieve a transaction from the blockchain.",params:{id:"transaction_id_type",block_num_hint:{type:"uint32?",default:0,doc:"A non-zero block number allows shorter transaction IDs (8 hex, 4 bytes)"}},results:{id:"transaction_id_type",trx:"variant",block_time:"block_timestamp_type",block_num:"uint32",last_irreversible_block:"uint32",traces:"variant[]"}},get_key_accounts:{params:{public_key:"public_key_type"},results:{account_names:"account_name[]"}},get_controlled_accounts:{params:{controlling_account:"account_name"},results:{controlled_accounts:"account_name[]"}}}},function(t,e,n){"use strict";n(208);var r=n(210),i=n(217),o=n(108);function u(t,e,n,r){var i=r.logger;return function(){for(var u=arguments.length,s=Array(u),a=0;a<u;a++)s[a]=arguments[a];if(0!==s.length){var f=o(s,Object.keys(n.params||[]),t,function(t){if("boolean"==typeof t)return{broadcast:t}}),c=f.params,h=(f.options,f.returnPromise),l=f.callback,p=JSON.stringify(c);i.log&&i.log("api >","post","\t",e,p);var d={body:p,method:"POST"};return Object.assign(d,r.fetchConfiguration),fetch(e,d).then(function(t){return t.status>=200&&t.status<300?t.json():t.text().then(function(e){var n=new Error(e);throw n.status=t.status,n.statusText=t.statusText,n})}).then(function(t){i.log&&i.log("api <","response","\t",e,JSON.stringify(t));try{l(null,t)}catch(t){i.error&&i.error("api <","result callback",":",t)}}).catch(function(t){var n="";try{n=JSON.parse(t.message).error.details[0]}catch(t){}i.error&&(i.error("api <","error","\t",n,e,p),i.error(t));try{l(t)}catch(t){i.error&&i.error("api <","error callback",":",t)}}),h}console.log(function(t,e){var n="",r=function(t){n+=t+"\n"};r("USAGE"),r(t+" - "+e.brief),r("\nPARAMETERS"),e.params?r(JSON.stringify(e.params,null,2)):r("none");r("\nRETURNS"),e.results?r(""+JSON.stringify(e.results,null,2)):r("no data");if(r("\nERRORS"),e.errors)for(var i in e.errors){var o=e.errors[i];r(i+(o?" - "+o:""))}else r("nothing special");return n}(t,n))}}t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={httpEndpoint:"http://127.0.0.1:8888",verbose:!1,logger:{log:function(){var t;return n.verbose?(t=console).log.apply(t,arguments):null},error:function(){var t;return n.verbose?(t=console).error.apply(t,arguments):null}}};function s(t,e){Object.keys(e).forEach(function(n){void 0===t[n]&&(t[n]=e[n])})}s(n,o),s(n.logger,o.logger);var a={},f=n.httpEndpoint;for(var c in e)for(var h in e[c]){var l=r(h),p=f+"/"+t+"/"+c+"/"+h;a[l]=u(l,p,e[c][h],n)}var d=function(t){a[t]=function(){for(var e,n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=i.api)[t].apply(e,[a].concat(r))}};for(var y in i.api)d(y);return a}},function(t,e,n){n(209),t.exports=self.fetch.bind(self)},function(t,e,n){"use strict";n.r(e),n.d(e,"Headers",function(){return f}),n.d(e,"Request",function(){return g}),n.d(e,"Response",function(){return v}),n.d(e,"DOMException",function(){return w}),n.d(e,"fetch",function(){return _});var r={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(r.arrayBuffer)var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],o=ArrayBuffer.isView||function(t){return t&&i.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function a(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r.iterable&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function c(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function l(t){var e=new FileReader,n=h(e);return e.readAsArrayBuffer(t),n}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:r.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:r.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():r.arrayBuffer&&r.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||o(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?c(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(l)}),this.text=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=h(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=u(t),e=s(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},f.prototype.delete=function(t){delete this.map[u(t)]},f.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},f.prototype.set=function(t,e){this.map[u(t)]=s(e)},f.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},f.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),a(t)},f.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),a(t)},f.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),a(t)},r.iterable&&(f.prototype[Symbol.iterator]=f.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(t,e){var n=(e=e||{}).body;if(t instanceof g){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=function(t){var e=t.toUpperCase();return y.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function m(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function v(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},d.call(g.prototype),d.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];v.redirect=function(t,e){if(-1===b.indexOf(e))throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function _(t,e){return new Promise(function(n,i){var o=new g(t,e);if(o.signal&&o.signal.aborted)return i(new w("Aborted","AbortError"));var u=new XMLHttpRequest;function s(){u.abort()}u.onload=function(){var t={status:u.status,statusText:u.statusText,headers:function(t){var e=new f;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(u.getAllResponseHeaders()||"")};t.url="responseURL"in u?u.responseURL:t.headers.get("X-Request-URL");var e="response"in u?u.response:u.responseText;n(new v(e,t))},u.onerror=function(){i(new TypeError("Network request failed"))},u.ontimeout=function(){i(new TypeError("Network request failed"))},u.onabort=function(){i(new w("Aborted","AbortError"))},u.open(o.method,o.url,!0),"include"===o.credentials?u.withCredentials=!0:"omit"===o.credentials&&(u.withCredentials=!1),"responseType"in u&&r.blob&&(u.responseType="blob"),o.headers.forEach(function(t,e){u.setRequestHeader(e,t)}),o.signal&&(o.signal.addEventListener("abort",s),u.onreadystatechange=function(){4===u.readyState&&o.signal.removeEventListener("abort",s)}),u.send(void 0===o._bodyInit?null:o._bodyInit)})}_.polyfill=!0,self.fetch||(self.fetch=_,self.Headers=f,self.Request=g,self.Response=v)},function(t,e,n){var r=n(211),i=n(212);t.exports=function(t,e,n){var o=i(t,e);return n||(o=o.replace(/ (?=\d)/g,"_")),o.replace(/ (.)/g,function(t,n){return r(n,e)})}},function(t,e){var n={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{"i̇":"I","j̇":"J","į̇":"Į","i̇̀":"Ì","i̇́":"Í","i̇̃":"Ĩ"}}};t.exports=function(t,e){var r=n[e];return t=null==t?"":String(t),r&&(t=t.replace(r.regexp,function(t){return r.map[t]})),t.toUpperCase()}},function(t,e,n){var r=n(213),i=n(214),o=n(215),u=n(216);t.exports=function(t,e,n){if(null==t)return"";return n="string"!=typeof n?" ":n,t=String(t).replace(o,"$1 $2").replace(u,"$1 $2").replace(i,function(t,e,r){return 0===e||e===r.length-t.length?"":n}),r(t,e)}},function(t,e){var n={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"İ":"i",I:"ı","İ":"i"}},az:{regexp:/[\u0130]/g,map:{"İ":"i",I:"ı","İ":"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇","Į":"į̇","Ì":"i̇̀","Í":"i̇́","Ĩ":"i̇̃"}}};t.exports=function(t,e){var r=n[e];return t=null==t?"":String(t),r&&(t=t.replace(r.regexp,function(t){return r.map[t]})),t.toLowerCase()}},function(t,e){t.exports=/[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g},function(t,e){t.exports=/([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g},function(t,e){t.exports=/([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g},function(t,e,n){"use strict";t.exports={api:{createTransaction:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:60,n=arguments[2];if(!n)throw new TypeError("callback parameter is required");t.getInfo(r(n,function(i){var o=new Date(i.head_block_time+"Z");t.getBlock(i.last_irreversible_block_num,r(n,function(t){var r=new Date(o.getTime()+1e3*e),u=65535&i.last_irreversible_block_num,s={expiration:r.toISOString().split(".")[0],ref_block_num:u,ref_block_prefix:t.ref_block_prefix,max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]};n(null,s)}))}))}}};var r=function(t,e){return function(n,r){n?t(n):e(r)}}},function(t,e,n){t.exports={default:n(219),__esModule:!0}},function(t,e,n){n(52),n(42),t.exports=n(220)},function(t,e,n){var r=n(109),i=n(5)("iterator"),o=n(26);t.exports=n(10).isIterable=function(t){var e=Object(t);return void 0!==e[i]||"@@iterator"in e||o.hasOwnProperty(r(e))}},function(t,e,n){t.exports={default:n(222),__esModule:!0}},function(t,e,n){n(52),n(42),t.exports=n(223)},function(t,e,n){var r=n(24),i=n(224);t.exports=n(10).getIterator=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return r(e.call(t))}},function(t,e,n){var r=n(109),i=n(5)("iterator"),o=n(26);t.exports=n(10).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t){t.exports={name:"uint64",checksum160:"fixed_bytes20",checksum256:"fixed_bytes32",checksum512:"fixed_bytes64",signature:"fixed_bytes65",public_key:"fixed_bytes33",message_type:"fixed_string16",symbol:"uint64",symbol_code:"uint64",field_name:"string",account_name:"name",permission_name:"name",type_name:"string",token_name:"name",table_name:"name",scope_name:"name",action_name:"name",time_point:"int64",time_point_sec:"time",timestamp:"uint32",block_timestamp_type:"timestamp",block_id:"fixed_bytes32",checksum_type:"fixed_bytes32",checksum256_type:"fixed_bytes32",checksum512_type:"fixed_bytes64",checksum160_type:"fixed_bytes20",sha256:"fixed_bytes32",sha512:"fixed_bytes64",sha160:"fixed_bytes20",weight_type:"uint16",block_num_type:"uint32",share_type:"int64",digest_type:"checksum_type",context_free_type:"bytes",unsigned_int:"varuint32",bool:"uint8",extensions_type:{base:"",fields:{type:"uint16",data:"bytes"}},transaction_header:{base:"",fields:{expiration:"time",ref_block_num:"uint16",ref_block_prefix:"uint32",max_net_usage_words:"unsigned_int",max_cpu_usage_ms:"uint8",delay_sec:"unsigned_int"}},transaction:{base:"transaction_header",fields:{context_free_actions:"action[]",actions:"action[]",transaction_extensions:"extensions_type[]"}},signed_transaction:{base:"transaction",fields:{signatures:"signature[]",context_free_data:"bytes[]"}},fields:"field_def[]",field_def:{fields:{name:"field_name",type:"type_name"}},asset:{fields:{amount:"share_type",sym:"symbol"}},producer_key:{fields:{producer_name:"account_name",block_signing_key:"public_key"}},producer_schedule:{fields:{version:"uint32",producers:"producer_key[]"}},chain_config:{fields:{target_block_size:"uint32",max_block_size:"uint32",target_block_acts_per_scope:"uint32",max_block_acts_per_scope:"uint32",target_block_acts:"uint32",max_block_acts:"uint32",real_threads:"uint64",max_storage_size:"uint64",max_transaction_lifetime:"uint32",max_authority_depth:"uint16",max_transaction_exec_time:"uint32",max_inline_depth:"uint16",max_inline_action_size:"uint32",max_generated_transaction_size:"uint32"}},type_def:{base:"",fields:{new_type_name:"type_name",type:"type_name"}},struct_def:{base:"",fields:{name:"type_name",base:"type_name",fields:"field_def[]"}},clause_pair:{base:"",fields:{id:"string",body:"string"}},error_message:{base:"",fields:{error_code:"uint64",error_msg:"string"}},abi_def:{base:"",fields:{version:"string",types:"type_def[]",structs:"struct_def[]",actions:"action_def[]",tables:"table_def[]",ricardian_clauses:"clause_pair[]",error_messages:"error_message[]",abi_extensions:"extensions_type[]"}},table_def:{base:"",fields:{name:"table_name",index_type:"type_name",key_names:"field_name[]",key_types:"type_name[]",type:"type_name"}},permission_level:{base:"",fields:{actor:"account_name",permission:"permission_name"}},action:{base:"",fields:{account:"account_name",name:"action_name",authorization:"permission_level[]",data:"bytes"}},action_def:{base:"",fields:{name:"action_name",type:"type_name",ricardian_contract:"string"}},block_header:{base:"",fields:{previous:"checksum256",timestamp:"timestamp",transaction_mroot:"checksum256",action_mroot:"checksum256",block_mroot:"checksum256",producer:"account_name",schedule_version:"uint32",new_producers:"producer_schedule?"}},packed_transaction:{fields:{signatures:"signature[]",compression:"uint8",packed_context_free_data:"bytes",packed_trx:"bytes"}}}},function(t,e,n){"use strict";(function(e){var r=function(t){return t&&t.__esModule?t:{default:t}}(n(23));var i=n(3),o=n(64);t.exports=function(t,n){n.abiCache={abiAsync:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(i.equal(void 0===e?"undefined":(0,r.default)(e),"string","account string required"),0==n&&null!=s[e])return Promise.resolve(s[e]);if(null==t){var o=s[e];return i(o,"Missing ABI for account: "+e+", provide httpEndpoint or add to abiCache"),Promise.resolve(o)}return t.getAbi(e).then(function(t){return i(t.abi,"Missing ABI for account: "+e),a(e,t.abi)})},abi:a};var u=Object.assign({},{defaults:!0},n),s={};function a(t,n){if(i.equal(void 0===t?"undefined":(0,r.default)(t),"string","account string required"),n){i.equal(void 0===n?"undefined":(0,r.default)(n),"object","abi"),e.isBuffer(n)&&(n=JSON.parse(n));var a=function(t,e){var n={};t.types&&t.types.forEach(function(t){n[t.new_type_name]=t.type});t.structs&&t.structs.forEach(function(t){var e={},r=!0,i=!1,o=void 0;try{for(var u,s=t.fields[Symbol.iterator]();!(r=(u=s.next()).done);r=!0){var a=u.value;e[a.name]=a.type}}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}n[t.name]={base:t.base,fields:e},""===t.base&&delete n[t.name].base});t.actions&&t.actions.forEach(function(t){var r=n[t.type];r?r.action={name:t.name,account:e}:console.error("Missing abiSchema type",t.type,e)});return n}(n,t),f=o(u,a);return s[t]=Object.assign({abi:n,schema:a},f)}var c=s[t];if(null==c)throw new Error("Abi '"+t+"' is not cached");return c}return n.abiCache}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=u(n(65)),i=u(n(72)),o=u(n(23));function u(t){return t&&t.__esModule?t:{default:t}}var s=n(3),a=n(31),f=n(63),c=n(62),h=n(107).processArgs;n(64);t.exports=function(t,n,u,m,v){if("string"!=typeof m.chainId)throw new TypeError("config.chainId is required");var b=function(t,n,u,m){var v=function(t,e){return function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var a,f,c,h,l,d,y,g,m,v,w,A,B,C,F,x,S,D,k,T,I;return i.default.async(function(t){for(;;)switch(t.prev=t.next){case 0:if(a=void 0,f=void 0,c=void 0,null==n[n.length-1]&&(n=n.slice(0,n.length-1)),!(h=p(n[0]))){t.next=8;break}a=n[0],n=n.slice(1),t.next=39;break;case 8:if("string"!=typeof n[0]){t.next=13;break}a=[n[0]],n=n.slice(1),t.next=39;break;case 13:if("object"!==(0,o.default)(n[0])||!Array.isArray(n[0].actions)){t.next=39;break}for(l=new Set,d=!0,y=!1,g=void 0,t.prev=18,m=n[0].actions[Symbol.iterator]();!(d=(v=m.next()).done);d=!0)w=v.value,l.add(w.account);t.next=26;break;case 22:t.prev=22,t.t0=t.catch(18),y=!0,g=t.t0;case 26:t.prev=26,t.prev=27,!d&&m.return&&m.return();case 29:if(t.prev=29,!y){t.next=32;break}throw g;case 32:return t.finish(29);case 33:return t.finish(26);case 34:return A=[],B=new Set(["eosio","eosio.token","eosio.null"]),l.forEach(function(t){B.has(t)||A.push(u.abiCache.abiAsync(t))}),t.next=39,i.default.awrap(Promise.all(A));case 39:if(n.length>1&&"function"==typeof n[n.length-1]&&(c=n.pop()),n.length>1&&"object"===(0,o.default)(n[n.length-1])&&(f=n.pop()),s.equal(n.length,1,"transaction args: contracts<string|array>, transaction<callback|object>, [options], [callback]"),C=n[0],!a){t.next=67;break}for(s(!c,"callback with contracts are not supported"),s.equal("function",void 0===C?"undefined":(0,o.default)(C),"provide function callback following contracts array parameter"),F=[],x=!0,S=!1,D=void 0,t.prev=50,k=a[Symbol.iterator]();!(x=(T=k.next()).done);x=!0)I=T.value,F.push(b(I,e.transaction));t.next=58;break;case 54:t.prev=54,t.t1=t.catch(50),S=!0,D=t.t1;case 58:t.prev=58,t.prev=59,!x&&k.return&&k.return();case 61:if(t.prev=61,!S){t.next=64;break}throw D;case 64:return t.finish(61);case 65:return t.finish(58);case 66:return t.abrupt("return",Promise.all(F).then(function(t){var e={};t.forEach(function(t,n){e[a[n]]=t});var n=h?e:e[a[0]];return _(C,f,n)}));case 67:if("function"!=typeof C){t.next=69;break}return t.abrupt("return",_(C,f,e));case 69:if("object"!==(void 0===C?"undefined":(0,o.default)(C))){t.next=71;break}return t.abrupt("return",E(C,f,c));case 71:throw new Error("first transaction argument unrecognized",C);case 72:case"end":return t.stop()}},null,this,[[18,22,26,34],[27,,29,33],[50,54,58,66],[59,,61,65]])}};function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return u.abiCache.abiAsync(t).then(function(n){s(Array.isArray(n.abi.actions)&&n.abi.actions.length,"No actions");var r={};return r.transaction=e||v(n.structs,r),n.abi.actions.forEach(function(e){var i=e.name,o=e.type,u=g(n.schema,o);r[i]=w(o,u,r.transaction,t,i)}),r.fc=n,r})}function w(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"eosio.token",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:t;return function(){for(var f=arguments.length,c=Array(f),l=0;l<f;l++)c[l]=arguments[l];if(0!==c.length){var p={},y=c[c.length-1];"object"===(void 0===y?"undefined":(0,o.default)(y))&&"object"===(0,o.default)(y.__optionOverrides)&&Object.assign(p,c.pop().__optionOverrides);var m=h(c,Object.keys(e),t,d),v=m.options,b=m.params,w=m.returnPromise,_=m.callback,E={broadcast:u.broadcast,sign:u.sign};if(v=Object.assign({},E,v,p),p.noCallback&&!w)throw new Error("Callback during a transaction are not supported");var A=[],B=v.authorization?v.authorization:u.authorization,C=null==B;if(B){var F=void 0;"string"==typeof B?F=[B]:Array.isArray(B)&&(F=B),F&&F.forEach(function(t){if("string"==typeof t){var e=t.split("@"),n=(0,r.default)(e,2),i=n[0],u=n[1],s=void 0===u?"active":u;""===i&&(i=D()),i&&A.push({actor:i,permission:s})}else"object"===(void 0===t?"undefined":(0,o.default)(t))&&A.push(t)}),s.equal(A.length,F.length,"invalid authorization in: "+JSON.stringify(B))}var x={actions:[{account:i,name:a,authorization:A,data:b}]};if(C){var S=D();S&&x.actions[0].authorization.push({actor:S,permission:"active"})}return x.actions[0].authorization.sort(function(t,e){return t.actor>e.actor?1:t.actor<e.actor?-1:0}),p.messageOnly?_(null,x):n(x,v,_),w}function D(){var t=Object.keys(e),n=t[0];if("account_name"===e[n])return b[n]}console.log(function(t,e,n,r,i){var o="",u=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";o+=t+"\n"};u("CONTRACT"),u(r),u(),u("ACTION"),u(t.name),u();var s=i.abiCache.abi(r);u("PARAMETERS"),u(JSON.stringify(g(s.schema,t.type),null,4)),u();var a=s.structs[t.type];return u("EXAMPLE"),u(r+"."+t.name+"("+JSON.stringify(a.toObject(),null,4)+")"),o}({name:a,type:t},0,0,i,u))}}function _(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];s.equal("function",void 0===t?"undefined":(0,o.default)(t),"trCallback"),s.equal("object",void 0===e?"undefined":(0,o.default)(e),"options"),s.equal("object",void 0===n?"undefined":(0,o.default)(n),"merges"),s(!Array.isArray(n),"merges should not be an array"),s.equal("function",(0,o.default)(E),"transaction");var i=[],u={},a=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=t.apply(void 0,n.concat([{__optionOverrides:{broadcast:!1,messageOnly:!0,noCallback:!0}}]));if(null==o)throw new Error("Callbacks can not be used when creating a multi-action transaction");i.push(o)}};for(var f in n){var c=n[f],h=f.replace(/\./,"_");if("function"==typeof c)u[h]=a(c);else if("object"===(void 0===c?"undefined":(0,o.default)(c)))for(var l in null==u[h]&&(u[h]={}),c)"transaction"!==l&&(u[h][l]=a(c[l]))}var p=void 0;try{p=t(u)}catch(t){p=Promise.reject(t)}return Promise.resolve(p).then(function(){return Promise.all(i).then(function(t){var n=[],i=!0,o=!1,u=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value,c=(0,r.default)(f.actions,1),h=c[0];n.push(h)}}catch(t){o=!0,u=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw u}}var l={};return l.actions=n,E(l,e)})})}function E(t,r,h){var p,d,g,v,b,w,_,E,A,B,C,F,x,S,D,k;return i.default.async(function(T){for(;;)switch(T.prev=T.next){case 0:if(p=u.expireInSeconds?u.expireInSeconds:60,d={expireInSeconds:p,broadcast:!0,sign:!0},r=Object.assign({},d,r),g=void 0,"function"!=typeof h&&(g=new Promise(function(t,e){h=function(n,r){n?e(n):t(r)}})),"object"===(void 0===t?"undefined":(0,o.default)(t))){T.next=7;break}throw new TypeError("First transaction argument should be an object or function");case 7:if(Array.isArray(t.actions)){T.next=9;break}throw new TypeError("Expecting actions array");case 9:if((u.logger.log||u.logger.error)&&(v=h,h=function(t,e){t&&u.logger.error&&u.logger.error(t),u.logger.log&&u.logger.log(JSON.stringify(e)),v(t,e)}),t.actions.forEach(function(t){if(!Array.isArray(t.authorization))throw new TypeError("Expecting action.authorization array",t)}),!r.sign||"function"==typeof u.signProvider){T.next=13;break}throw new TypeError("Expecting config.signProvider function (disable using {sign: false})");case 13:if(b={max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]},!u.transactionHeaders){T.next=25;break}if("object"!==(0,o.default)(u.transactionHeaders)){T.next=19;break}Object.assign(b,u.transactionHeaders),T.next=25;break;case 19:if("function"!=typeof u.transactionHeaders){T.next=24;break}return T.next=22,i.default.awrap(u.transactionHeaders(r.expireInSeconds,y(h,u.logger,function(t){return i.default.async(function(e){for(;;)switch(e.prev=e.next){case 0:s.equal(void 0===t?"undefined":(0,o.default)(t),"object","expecting transaction header object"),Object.assign(b,t);case 2:case"end":return e.stop()}},null,this)})));case 22:T.next=25;break;case 24:s(!1,"config.transactionHeaders should be an object or function");case 25:for(w=["expiration","ref_block_num","ref_block_prefix","delay_sec","max_net_usage_words","max_cpu_usage_ms"],_=0;_<w.length;_++)E=w[_],void 0!==t[E]?b[E]=t[E]:void 0!==r[E]&&(b[E]=r[E]);if(void 0!==b.expiration&&void 0!==b.ref_block_num&&void 0!==b.ref_block_prefix){T.next=31;break}return s(n,"Network is required, provide httpEndpoint or own transaction headers"),T.next=31,i.default.awrap(new Promise(function(t){n.createTransaction(r.expireInSeconds,y(h,u.logger,function(e){var n,r,o;return i.default.async(function(i){for(;;)switch(i.prev=i.next){case 0:for(n=["expiration","ref_block_num","ref_block_prefix"],r=0;r<n.length;r++)o=n[r],void 0===b[o]&&(b[o]=e[o]);t();case 3:case"end":return i.stop()}},null,this)}))}));case 31:return s.equal((0,o.default)(b.expiration),"string","expecting expiration: iso date time string"),s.equal((0,o.default)(b.ref_block_num),"number","expecting ref_block_num number"),s.equal((0,o.default)(b.ref_block_prefix),"number","expecting ref_block_prefix number"),b.context_free_actions=t.context_free_actions,b.actions=t.actions,b.transaction_extensions=t.transaction_extensions,A=m.fromObject(b),B=f.toBuffer(m,A),C=m.toObject(A),F=c("sha256").update(B).digest().toString("hex"),x=[],r.sign&&(S=e.from(u.chainId,"hex"),D=e.from(new Uint8Array(32)),k=e.concat([S,B,D]),x=u.signProvider({transaction:C,buf:k,sign:l,optionsKeyProvider:r.keyProvider}),Array.isArray(x)||(x=[x])),Promise.all(x).then(function(t){t=[].concat.apply([],t);for(var e=0;e<t.length;e++){var i=t[e];"string"==typeof i&&130===i.length&&(t[e]=a.Signature.from(i).toString())}var o={compression:"none",transaction:C,signatures:t},f=u.mockTransactions?u.mockTransactions():null;if(null==f)r.broadcast&&n?n.pushTransaction(o,function(t,e){t?(u.logger.error&&u.logger.error("[push_transaction error] '"+t.message+"', transaction '"+B.toString("hex")+"'"),h(t.message)):h(null,Object.assign({broadcast:!0,transaction:o,transaction_id:F},e))}):h(null,{transaction_id:F,broadcast:!1,transaction:o});else if(s(/pass|fail/.test(f),"mockTransactions should return a string: pass or fail"),"pass"===f&&h(null,{transaction_id:F,mockTransaction:!0,broadcast:!1,transaction:o}),"fail"===f){var c="[push_transaction mock error] 'fake error', digest '"+B.toString("hex")+"'";u.logger.error&&u.logger.error(c),h(c)}}).catch(function(t){u.logger.error&&u.logger.error(t),h(t)}),T.abrupt("return",g);case 45:case"end":return T.stop()}},null,this)}return{genTransaction:v,genContractActions:b,genMethod:w}}(0,n,m,u.transaction),w=new Set(["transaction","contract"]),_={};_.transaction=b.genTransaction(u,_);var E=!0,A=!1,B=void 0;try{for(var C,F=v[Symbol.iterator]();!(E=(C=F.next()).done);E=!0){var x=C.value;for(var S in x.schema){var D=x.schema[S];if("string"!=typeof D){s.equal(void 0===D?"undefined":(0,o.default)(D),"object","abi.schema[type = "+S+"]");var k=D.action;if(void 0!==k){if(w.has(k.name))throw new TypeError("Conflicting Api function: "+S);var T=g(x.schema,S);_[k.name]=b.genMethod(S,T,_.transaction,k.account,k.name)}}}}}catch(t){A=!0,B=t}finally{try{!E&&F.return&&F.return()}finally{if(A)throw B}}return _.contract=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=h(e,["account"],"contract",d),i=r.params,o=(r.options,r.returnPromise),u=r.callback,s=i.account;return b.genContractActions(s).then(function(t){u(null,t)}).catch(function(t){u(t)}),o},_};var l=a.sign;var p=function(t){return Array.isArray(t)&&t.length>0&&-1===t.findIndex(function(t){return"string"!=typeof t})},d=function(t){return"object"===(void 0===t?"undefined":(0,o.default)(t))?t:"boolean"==typeof t?{broadcast:t}:void 0};var y=function(t,e,n){return function(r,i){r?(e.error&&e.error("error",r),t(r)):Promise.resolve(n(i)).catch(function(e){t(e)})}};function g(t,e){var n=t[e],r=n.base,i=n.fields,o={};return r&&""!==r&&Object.assign(o,g(t,r)),Object.assign(o,i),o}}).call(this,n(2).Buffer)},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"}],structs:[{name:"transfer",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"create",base:"",fields:[{name:"issuer",type:"account_name"},{name:"maximum_supply",type:"asset"}]},{name:"issue",base:"",fields:[{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"account",base:"",fields:[{name:"balance",type:"asset"}]},{name:"currency_stats",base:"",fields:[{name:"supply",type:"asset"},{name:"max_supply",type:"asset"},{name:"issuer",type:"account_name"}]}],actions:[{name:"transfer",type:"transfer",ricardian_contract:""},{name:"issue",type:"issue",ricardian_contract:""},{name:"create",type:"create",ricardian_contract:""}],tables:[{name:"accounts",type:"account",index_type:"i64",key_names:["currency"],key_types:["uint64"]},{name:"stat",type:"currency_stats",index_type:"i64",key_names:["currency"],key_types:["uint64"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"},{new_type_name:"permission_name",type:"name"},{new_type_name:"action_name",type:"name"},{new_type_name:"transaction_id_type",type:"checksum256"},{new_type_name:"weight_type",type:"uint16"}],____comment:"eosio.bios structs: set_account_limits, setpriv, set_global_limits, producer_key, set_producers, require_auth are provided so abi available for deserialization in future.",structs:[{name:"permission_level",base:"",fields:[{name:"actor",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"key_weight",base:"",fields:[{name:"key",type:"public_key"},{name:"weight",type:"weight_type"}]},{name:"bidname",base:"",fields:[{name:"bidder",type:"account_name"},{name:"newname",type:"account_name"},{name:"bid",type:"asset"}]},{name:"permission_level_weight",base:"",fields:[{name:"permission",type:"permission_level"},{name:"weight",type:"weight_type"}]},{name:"wait_weight",base:"",fields:[{name:"wait_sec",type:"uint32"},{name:"weight",type:"weight_type"}]},{name:"authority",base:"",fields:[{name:"threshold",type:"uint32"},{name:"keys",type:"key_weight[]"},{name:"accounts",type:"permission_level_weight[]"},{name:"waits",type:"wait_weight[]"}]},{name:"newaccount",base:"",fields:[{name:"creator",type:"account_name"},{name:"name",type:"account_name"},{name:"owner",type:"authority"},{name:"active",type:"authority"}]},{name:"setcode",base:"",fields:[{name:"account",type:"account_name"},{name:"vmtype",type:"uint8"},{name:"vmversion",type:"uint8"},{name:"code",type:"bytes"}]},{name:"setabi",base:"",fields:[{name:"account",type:"account_name"},{name:"abi",type:"bytes"}]},{name:"updateauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"},{name:"parent",type:"permission_name"},{name:"auth",type:"authority"}]},{name:"deleteauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"linkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"},{name:"requirement",type:"permission_name"}]},{name:"unlinkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"}]},{name:"canceldelay",base:"",fields:[{name:"canceling_auth",type:"permission_level"},{name:"trx_id",type:"transaction_id_type"}]},{name:"onerror",base:"",fields:[{name:"sender_id",type:"uint128"},{name:"sent_trx",type:"bytes"}]},{name:"buyrambytes",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"bytes",type:"uint32"}]},{name:"sellram",base:"",fields:[{name:"account",type:"account_name"},{name:"bytes",type:"uint64"}]},{name:"buyram",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"quant",type:"asset"}]},{name:"delegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"stake_net_quantity",type:"asset"},{name:"stake_cpu_quantity",type:"asset"},{name:"transfer",type:"bool"}]},{name:"undelegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"unstake_net_quantity",type:"asset"},{name:"unstake_cpu_quantity",type:"asset"}]},{name:"refund",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"delegated_bandwidth",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"}]},{name:"user_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"total_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"refund_request",base:"",fields:[{name:"owner",type:"account_name"},{name:"request_time",type:"time_point_sec"},{name:"net_amount",type:"asset"},{name:"cpu_amount",type:"asset"}]},{name:"blockchain_parameters",base:"",fields:[{name:"max_block_net_usage",type:"uint64"},{name:"target_block_net_usage_pct",type:"uint32"},{name:"max_transaction_net_usage",type:"uint32"},{name:"base_per_transaction_net_usage",type:"uint32"},{name:"net_usage_leeway",type:"uint32"},{name:"context_free_discount_net_usage_num",type:"uint32"},{name:"context_free_discount_net_usage_den",type:"uint32"},{name:"max_block_cpu_usage",type:"uint32"},{name:"target_block_cpu_usage_pct",type:"uint32"},{name:"max_transaction_cpu_usage",type:"uint32"},{name:"min_transaction_cpu_usage",type:"uint32"},{name:"max_transaction_lifetime",type:"uint32"},{name:"deferred_trx_expiration_window",type:"uint32"},{name:"max_transaction_delay",type:"uint32"},{name:"max_inline_action_size",type:"uint32"},{name:"max_inline_action_depth",type:"uint16"},{name:"max_authority_depth",type:"uint16"}]},{name:"eosio_global_state",base:"blockchain_parameters",fields:[{name:"max_ram_size",type:"uint64"},{name:"total_ram_bytes_reserved",type:"uint64"},{name:"total_ram_stake",type:"int64"},{name:"last_producer_schedule_update",type:"block_timestamp_type"},{name:"last_pervote_bucket_fill",type:"uint64"},{name:"pervote_bucket",type:"int64"},{name:"perblock_bucket",type:"int64"},{name:"total_unpaid_blocks",type:"uint32"},{name:"total_activated_stake",type:"int64"},{name:"thresh_activated_stake_time",type:"uint64"},{name:"last_producer_schedule_size",type:"uint16"},{name:"total_producer_vote_weight",type:"float64"},{name:"last_name_close",type:"block_timestamp_type"}]},{name:"producer_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"total_votes",type:"float64"},{name:"producer_key",type:"public_key"},{name:"is_active",type:"bool"},{name:"url",type:"string"},{name:"unpaid_blocks",type:"uint32"},{name:"last_claim_time",type:"uint64"},{name:"location",type:"uint16"}]},{name:"regproducer",base:"",fields:[{name:"producer",type:"account_name"},{name:"producer_key",type:"public_key"},{name:"url",type:"string"},{name:"location",type:"uint16"}]},{name:"unregprod",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"setram",base:"",fields:[{name:"max_ram_size",type:"uint64"}]},{name:"regproxy",base:"",fields:[{name:"proxy",type:"account_name"},{name:"isproxy",type:"bool"}]},{name:"voteproducer",base:"",fields:[{name:"voter",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"}]},{name:"voter_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"},{name:"staked",type:"int64"},{name:"last_vote_weight",type:"float64"},{name:"proxied_vote_weight",type:"float64"},{name:"is_proxy",type:"bool"}]},{name:"claimrewards",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"setpriv",base:"",fields:[{name:"account",type:"account_name"},{name:"is_priv",type:"int8"}]},{name:"rmvproducer",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"set_account_limits",base:"",fields:[{name:"account",type:"account_name"},{name:"ram_bytes",type:"int64"},{name:"net_weight",type:"int64"},{name:"cpu_weight",type:"int64"}]},{name:"set_global_limits",base:"",fields:[{name:"cpu_usec_per_period",type:"int64"}]},{name:"producer_key",base:"",fields:[{name:"producer_name",type:"account_name"},{name:"block_signing_key",type:"public_key"}]},{name:"set_producers",base:"",fields:[{name:"schedule",type:"producer_key[]"}]},{name:"require_auth",base:"",fields:[{name:"from",type:"account_name"}]},{name:"setparams",base:"",fields:[{name:"params",type:"blockchain_parameters"}]},{name:"connector",base:"",fields:[{name:"balance",type:"asset"},{name:"weight",type:"float64"}]},{name:"exchange_state",base:"",fields:[{name:"supply",type:"asset"},{name:"base",type:"connector"},{name:"quote",type:"connector"}]},{name:"namebid_info",base:"",fields:[{name:"newname",type:"account_name"},{name:"high_bidder",type:"account_name"},{name:"high_bid",type:"int64"},{name:"last_bid_time",type:"uint64"}]}],actions:[{name:"newaccount",type:"newaccount",ricardian_contract:""},{name:"setcode",type:"setcode",ricardian_contract:""},{name:"setabi",type:"setabi",ricardian_contract:""},{name:"updateauth",type:"updateauth",ricardian_contract:""},{name:"deleteauth",type:"deleteauth",ricardian_contract:""},{name:"linkauth",type:"linkauth",ricardian_contract:""},{name:"unlinkauth",type:"unlinkauth",ricardian_contract:""},{name:"canceldelay",type:"canceldelay",ricardian_contract:""},{name:"onerror",type:"onerror",ricardian_contract:""},{name:"buyrambytes",type:"buyrambytes",ricardian_contract:""},{name:"buyram",type:"buyram",ricardian_contract:""},{name:"sellram",type:"sellram",ricardian_contract:""},{name:"delegatebw",type:"delegatebw",ricardian_contract:""},{name:"undelegatebw",type:"undelegatebw",ricardian_contract:""},{name:"refund",type:"refund",ricardian_contract:""},{name:"regproducer",type:"regproducer",ricardian_contract:""},{name:"setram",type:"setram",ricardian_contract:""},{name:"bidname",type:"bidname",ricardian_contract:""},{name:"unregprod",type:"unregprod",ricardian_contract:""},{name:"regproxy",type:"regproxy",ricardian_contract:""},{name:"voteproducer",type:"voteproducer",ricardian_contract:""},{name:"claimrewards",type:"claimrewards",ricardian_contract:""},{name:"setpriv",type:"setpriv",ricardian_contract:""},{name:"rmvproducer",type:"rmvproducer",ricardian_contract:""},{name:"setalimits",type:"set_account_limits",ricardian_contract:""},{name:"setglimits",type:"set_global_limits",ricardian_contract:""},{name:"setprods",type:"set_producers",ricardian_contract:""},{name:"reqauth",type:"require_auth",ricardian_contract:""},{name:"setparams",type:"setparams",ricardian_contract:""}],tables:[{name:"producers",type:"producer_info",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"global",type:"eosio_global_state",index_type:"i64",key_names:[],key_types:[]},{name:"voters",type:"voter_info",index_type:"i64",key_names:["owner"],key_types:["account_name"]},{name:"userres",type:"user_resources",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"delband",type:"delegated_bandwidth",index_type:"i64",key_names:["to"],key_types:["uint64"]},{name:"rammarket",type:"exchange_state",index_type:"i64",key_names:["supply"],key_types:["uint64"]},{name:"refunds",type:"refund_request",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"namebids",type:"namebid_info",index_type:"i64",key_names:["newname"],key_types:["account_name"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[],structs:[{name:"nonce",base:"",fields:[{name:"value",type:"string"}]}],actions:[{name:"nonce",type:"nonce",ricardian_contract:""}],tables:[],ricardian_clauses:[],abi_extensions:[]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.eosNodeConfigs={scatter:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://nodes.get-scatter.com:443"},acroeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api2.acroeos.one"},alohaeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"http://api.main.alohaeos.com"},atticlab:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosbp.atticlab.net"},genereos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.genereos.io"},blockmatrix:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosapi.blockmatrix.network"},chainrift:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eospublic.chainrift.com"},eosio:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosio.cr"},cryptolions:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.cryptolions.io"},cypherglass:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.cypherglass.com"},eos42:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://nodes.eos42.io"},eosamsterdam:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eosamsterdam.net"},eosasia:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api1.eosasia.one"},eosauthority:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://publicapi-mainnet.eosauthority.com"},eosbean:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosbean.com"},eosbeijing:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosbeijing.one"},eosbixin:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mars.fn.eosbixin.com"},eoscafeblock:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.eoscafeblock.com"},eoscanada:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eoscanada.com"},eoscannon:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eoscannon.io"},eoscleaner:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoscleaner.com"},eosdac:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eu.eosdac.io"},eosdublin:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosdublin.io"},eoseoul:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoseoul.io"},eosfengwo:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosfengwo.com"},eosflare:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node.eosflare.io"},genesis_mining:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.genesis-mining.com"},eosdetroit:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosdetroit.io"},meet:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.meet.one"},eosgravity:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api-mainnet.eosgravity.com"},eoslaomao:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoslaomao.com"},eosmetal:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api3.eosmetal.io"},minergate:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eos.minergate.com"},minergate_bp:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.eos.minergate.com"},eosn:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosn.io"},eosnewyork:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosnewyork.io"},eosnodeone:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.main-net.eosnodeone.io"},eospacex:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api-mainnet.eospacex.com"},nodepacific:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosapi.nodepacific.com"},eosrio:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosrio.io"},eossweden:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eossweden.se"},eostitan:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eostitan.com"},eostribe:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eostribe.io"},eosvolga:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.eosvolga.one"},eosweb:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://apinode.eosweb.net"},eosys:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://rpc.eosys.io"},franceos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.franceos.fr"},eosblockbuster:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://full.eosblockbuster.com"},jeda:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.jeda.one"},oraclechain:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.oraclechain.io"},sheos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.sheos.org"},eosgeneva:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosgeneva.io"},greymass:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.greymass.com"},zbeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node1.zbeos.com"},zeroxeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node1.zeroxeos.com"},eosnode:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://proxy.eosnode.tools"},dfuse:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eos.dfuse.io"},dev:{blockchain:"eos",chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",httpEndpoint:"http://dev.toneos.pro:7777"}}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&"%c"===t&&(i=++r)}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(233)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(8))},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function u(...t){if(!u.enabled)return;const e=u,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;s++;const o=r.formatters[i];if("function"==typeof o){const r=t[s];n=o.call(e,r),t.splice(s,1),s--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return u.namespace=t,u.enabled=r.enabled(t),u.useColors=r.useColors(),u.color=e(t),u.destroy=i,u.extend=o,"function"==typeof r.init&&r.init(u),r.instances.push(u),u}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){return r(this.namespace+(void 0===e?":":e)+t)}function u(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(u),...r.skips.map(u).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(234),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,u=7*o,s=365.25*o;function a(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var f=typeof t;if("string"===f&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"weeks":case"week":case"w":return a*u;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===f&&!1===isNaN(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return a(t,e,o,"day");if(e>=i)return a(t,e,i,"hour");if(e>=r)return a(t,e,r,"minute");if(e>=n)return a(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){"use strict";"using strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.defaultConfigs=t}return t.prototype.get=function(t){var e="eosplayer::"+t,n=localStorage.getItem(e);if(n)return n;if(t in this.defaultConfigs){var r=this.defaultConfigs[t];return this.set(t,r),r}},t.prototype.set=function(t,e){var n="eosplayer::"+t;localStorage.setItem(n,e)},t}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(237),u=n(70),s=n(39),a=n(22),f=n(21),c=a.createLogger("chain"),h=function(){function t(t){this._eos=t}return t.prototype.getInfo=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this._eos.getInfo({})];case 1:return[2,t.sent()]}})})},t.prototype.getBlock=function(t){return r(this,void 0,void 0,function(){var e;return i(this,function(n){switch(n.label){case 0:return e={block_num_or_id:t},[4,this._eos.getBlock(e)];case 1:return[2,n.sent()]}})})},t.prototype.getContract=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.contract(t)];case 1:return[2,e.sent()]}})})},t.prototype.getAbi=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getAbi(t)];case 1:return[2,e.sent()]}})})},t.prototype.getTableAbi=function(t,e){return r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.getAbi(t)];case 1:return[2,n.sent().abi.tables.find(function(t){return t.name===e})]}})})},t.prototype.abiJsonToBin=function(t,e,n){return r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return r={code:t,action:e,args:n},[4,this._eos.abiJsonToBin(r)];case 1:return[2,i.sent().binargs]}})})},t.prototype.getAccountInfo=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getAccount({account_name:t})];case 1:return[2,e.sent()]}})})},t.prototype.getPubKey=function(t,e){return void 0===e&&(e="active"),r(this,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:return[4,this.getPubKeys(t,e)];case 1:return!(n=r.sent())||n.length<=0?(c.warning("cannot find public key for "+t+"@"+e),[2]):[4,this.getPubKeys(t,e)];case 2:return[2,r.sent()[0].key]}})})},t.prototype.getPubKeys=function(t,e){return void 0===e&&(e="active"),r(this,void 0,void 0,function(){var n,r;return i(this,function(i){switch(i.label){case 0:return[4,this.getAccountInfo(t)];case 1:if(n=i.sent(),!(r=n.permissions.find(function(t){return t.perm_name===e})))throw new Error("cannot find the permission of "+t);return[2,r.required_auth.keys]}})})},t.prototype.recoverSign=function(t,e){return f.Ecc.recover(t,e)},t.prototype.validateSign=function(t,e,n,o){void 0===o&&(o="active");for(var u=[],s=4;s<arguments.length;s++)u[s-4]=arguments[s];return r(this,void 0,void 0,function(){var r,s,a,f,h,l,p,d,y,g,m,v,b,w;return i(this,function(i){switch(i.label){case 0:return r=this.recoverSign(t,e),[4,this.getAccountInfo(n)];case 1:if(!(s=i.sent().permissions))return c.warning("permissions of account_name "+n+" are not found."),[2];if(a=s.find(function(t){return t.perm_name===o}),!s)return c.warning("permission "+o+" account_name "+n+" are not found."),[2];if(f=a.required_auth,h=f.accounts,l=f.keys,p=l.find(function(t){return t.key===r}))return[2,p.key];if(!u||u.length<=0)return[2];d=h.map(function(t){return t.permission.actor+"@"+t.permission.permission}),c.verbose("try match",h,d,u),y=0,i.label=2;case 2:if(!(y<u.length))return[3,8];g=u[y],m=0,i.label=3;case 3:return m<d.length?(v=d[m],b=g.validatorProvider[v],(w=b)?[4,Promise.resolve(b(n,r,this))]:[3,5]):[3,7];case 4:w=i.sent(),i.label=5;case 5:if(w)return[2,r];i.label=6;case 6:return m++,[3,3];case 7:return y++,[3,2];case 8:return[2]}})})},t.prototype.getActionCount=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getActionMaxSeq(t)];case 1:return[2,e.sent()+1]}})})},t.prototype.getActionMaxSeq=function(t){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return[4,this.getRecentActions(t)];case 1:if(!(e=r.sent())||!e.actions)throw new Error("getActionCount failed: cannot find recent actions of "+t+")");return[2,0===(n=e.actions).length?-1:n[n.length-1].account_action_seq]}})})},t.prototype.getRecentActions=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getActions({account_name:t})];case 1:return[2,e.sent()]}})})},t.prototype.getActions=function(t,e,n,o){return void 0===e&&(e=0),void 0===n&&(n=0),void 0===o&&(o=6e4),r(this,void 0,void 0,function(){var r,u,a,f,h,l,p;return i(this,function(i){switch(i.label){case 0:r=e,u=e+n,a=[],c.verbose("getActions start",e,u,"current:",a.length),i.label=1;case 1:0,f=void 0,i.label=2;case 2:return i.trys.push([2,4,,5]),[4,s.timeoutPromise(o,this._eos.getActions({account_name:t,pos:r,offset:u-r}))];case 3:return f=i.sent(),[3,5];case 4:return h=i.sent(),c.warning(h),[3,1];case 5:if(!f||!f.actions)throw new Error("getActions failed: cannot find actions of "+t+" (pos:"+r+", offset:"+n+")");return l=f.actions,c.verbose("getActions find",l[l.length-1]),(p=0===l.length?r-1:l[l.length-1].account_action_seq)<r?[3,6]:(a.push.apply(a,l),p>=u?[3,6]:(r=p+1,[3,1]));case 6:return[2,a]}})})},t.prototype.getAllActionsBatch=function(t,e,n,o,u){return void 0===n&&(n=0),void 0===o&&(o=100),void 0===u&&(u=10),r(this,void 0,void 0,function(){var s,a,f,h,l,p,d,y=this;return i(this,function(g){switch(g.label){case 0:s=o-1,a=function(e){return r(y,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:0,r.label=1;case 1:return r.trys.push([1,3,,4]),c.verbose("search Start : at:"+Date.now()+" pos:"+e+" offset:"+s),[4,this.getActions(t,e,s)];case 2:return[2,r.sent()];case 3:return n=r.sent(),c.error("error : ",n),[3,4];case 4:return[3,0];case 5:return[2]}})})},f=[],c.info("===> start search actions of "+t+" from "+n+", concurrent : "+u+", count : "+o+", once : "+u*o),h=Date.now(),l=0,g.label=1;case 1:return f.push(n+l*o),l%u!=0?[3,3]:(p=Date.now(),c.verbose("===> deal batch "+l+" : "+f+" at "+h),[4,Promise.all(f.map(a))]);case 2:if(!(d=g.sent()).find(function(t){return t.length>0}))return[3,4];c.verbose("===> deal batch "+l+" done ("+(Date.now()-p)+")"),d.forEach(function(t){t.length<=0||null!=e&&e(t)}),c.verbose("===> send batch "+l+" done ("+(Date.now()-p)+")"),f=[],g.label=3;case 3:return l++,[3,1];case 4:return c.info("getAllActions : all scaned ("+(Date.now()-h)+")"),[2]}})})},t.prototype.getBalance=function(t,e,n){return void 0===e&&(e="eosio.token"),r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return[4,this.getBalances(t,e)];case 1:return r=i.sent(),n?[2,r.find(function(t){return t.endsWith(n)})||null]:(c.warning("Symbol of the token has not been specified, the first item will return. all:",r),[2,r[0]||null])}})})},t.prototype.getBalances=function(t,e){return void 0===e&&(e="eosio.token"),r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this._eos.getCurrencyBalance(e,t)];case 1:return[2,(n.sent()||[]).map(function(t){return t.trim()})]}})})},t.prototype.transfer=function(t,e,n,o,u){return void 0===o&&(o=""),r(this,void 0,void 0,function(){var r,s;return i(this,function(i){switch(i.label){case 0:return r={authorization:[t.name+"@"+t.authority]},[4,this._eos.transfer(t.name,e,n,o,r).catch(u||c.error)];case 1:return(s=i.sent())&&c.info("Transfer dealed, txID: "+s.transaction_id),[2,s]}})})},t.prototype.waitTx=function(t,e,n){return void 0===e&&(e=12),void 0===n&&(n=1009),r(this,void 0,void 0,function(){var o,u=this;return i(this,function(a){switch(a.label){case 0:return[4,(o=function(t,a){return void 0===a&&(a=0),r(u,void 0,void 0,function(){var r,u;return i(this,function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this._eos.getTransaction(t)];case 1:return(r=i.sent())?[2,r]:[3,3];case 2:return u=i.sent(),c.verbose("wait tx "+t+", retry round: "+a+". "+u.message),[3,3];case 3:return a>=e?(c.error("wait tx failed, round out."),[2,null]):[4,s.forMs(n)];case 4:return i.sent(),[2,o(t,a+1)]}})})})(t)];case 1:return[2,a.sent()]}})})},t.prototype.call=function(t,e,n){for(var o=[],u=3;u<arguments.length;u++)o[u-3]=arguments[u];return r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return r={actions:[{account:t,name:e,data:n,authorization:o}]},c.info("CALL","code",t,"func",e,"jsonData",n,"authorization",n),[4,this._eos.transaction(r)];case 1:return[2,i.sent()]}})})},t.prototype.getTableAll=function(t,e,n,o,a){for(var f=[],h=5;h<arguments.length;h++)f[h-5]=arguments[h];return r(this,void 0,void 0,function(){var r,h,l,p,d,y=this;return i(this,function(i){switch(i.label){case 0:r=o?new u.BigNumber(o):new u.BigNumber(0),h=a&&-1!==a?new u.BigNumber(a):new u.BigNumber("18446744073709551615"),l=[],p=[],d=function(r,i){if(c.verbose("search ",Date.now(),r.toFixed(0),i.toFixed(0)),!r.gte(i)){var o=y._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:-1,lower_bound:r.toFixed(0),upper_bound:i.toFixed(0)}).then(function(t){var e=p.findIndex(function(t){return t===o});if(p.splice(e,1),t)if(t.more){var n=i.minus(r).dividedBy(2).decimalPlaces(0).plus(r);d(r,n.minus(1)),d(n,i)}else t.rows&&l.push.apply(l,t.rows)}).catch(function(t){var e=p.find(function(t){return t===o});throw p.splice(e,1),t});p.push(o)}},!f||f.length<=0?d(r,h):f.map(function(t){return new u.BigNumber(t)}).concat([h]).reduce(function(t,e){return d(t,e),e},r),i.label=1;case 1:return p.length>0?[4,s.forMs(50)]:[3,3];case 2:return i.sent(),[3,1];case 3:return c.verbose("done search ",Date.now(),r.toFixed(0),h.toFixed(0)),[2,l]}})})},t.prototype.checkTable=function(t,e,n,o,u,s,a){return void 0===o&&(o=10),void 0===u&&(u=0),void 0===s&&(s=-1),void 0===a&&(a=1),r(this,void 0,void 0,function(){var r,f;return i(this,function(i){switch(i.label){case 0:return c.verbose("search ",Date.now(),u,s,o),[4,this._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:o,lower_bound:u,upper_bound:s,index_position:a})];case 1:return r=i.sent(),f=r&&r.rows?r.rows:[],r.more&&(o<=0||r.rows&&r.rows.length<o)&&c.warning("'more' detected, and this method didn't deal with the tag 'more'. if you want to get all results, using checkTableMore and provide the primary key. "),[2,f]}})})},t.prototype.checkTableMore=function(t,e,n,o,u,s,a,f){return void 0===u&&(u=9999999),void 0===s&&(s=0),void 0===a&&(a=-1),void 0===f&&(f=1),r(this,void 0,void 0,function(){var r,h,l,p,d,y;return i(this,function(i){switch(i.label){case 0:return c.verbose("search ",t,e,Date.now()),[4,this._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:u,lower_bound:s,upper_bound:a,index_position:f})];case 1:return r=i.sent(),h=r&&r.rows?r.rows:[],c.verbose("part size "+h.length+"."),r.more&&(u<=0||r.rows&&r.rows.length<u)?(l=h[0][o],p=h[h.length-1][o],l&&p?[3,3]:[4,this.getAbi(t)]):[3,5];case 2:throw d=i.sent(),c.error("searching more error with primary key : "+o+". please check\nlast data: "+h[h.length-1]+" \nabi "+JSON.stringify(d)),new Error("check more error with primary key : "+o);case 3:return c.info("'more' detected: start searching results from "+p+"."),[4,this.checkTableMore(t,e,n,o,u-h.length+1,p,a,f)];case 4:return y=i.sent(),[2,h.concat(y.splice(1))];case 5:return[2,h]}})})},t.prototype.checkTableRange=function(t,e,n,o,s,a){return void 0===s&&(s=1),void 0===a&&(a=1),r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:if(s<0)throw new Error("range error: length("+s+") must larger than 0 ");return[4,this.checkTable(t,e,n,s,o,"number"==typeof o?o+s:new u.BigNumber(f.Eos.modules.format.encodeName(o,!1)).plus(s).toString(),a)];case 1:return[2,r.sent()]}})})},t.prototype.checkTableItem=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.checkTableRange(t,e,n,o,1)];case 1:return[2,r.sent()[0]]}})})},t.prototype.updateAuth=function(t,e,n,o,u,s,a){return void 0===a&&(a=1),r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._eos.updateauth({account_name:t,permission:e,parent:n,auth:{threshold:o,keys:u,accounts:s,waits:a}})];case 1:return[2,r.sent()]}})})},t.getTableByScope=function(t,e,n,u,s,a){return void 0===a&&(a=1e3),r(this,void 0,void 0,function(){var r,f,c,h,l;return i(this,function(i){switch(i.label){case 0:r="/v1/chain/get_table_by_scope",f={code:e,table:n,lower_bound:u,upper_bound:s,limit:a},c=o.default.create({baseURL:t,headers:{post:{"Content-Type":"application/json"}}}),h=[],i.label=1;case 1:return[4,c.post(r,f)];case 2:return l=i.sent(),h.push(l.data),""===l.data.more?[3,3]:[3,1];case 3:return[2,h]}})})},t.help=function(){return'\n### Chain API\n\n```js\n{Object} async getInfo() // get info of the chain connected\n{Object} async getBlock(blockNumOrId) // get specific block of the chain\n\n\n{Contract} async getContract(code) // get contract\n{Object} async getAbi(code) // get abi of contract\n{Object} async getTableAbi(code, tableName) // get table abi of contract\n{Object} async abiJsonToBin(code, action, args)\n\n{Object} async getAccountInfo(account_name) // get account info of any user\n{string} async getPubKey(account_name, authority = "active") // get the first public key of an account\n{Array} async getPubKeys(account_name, authority = "active") // get public keys of an account\n{string} async recoverSign(signature, message) // recover sign and to the public key\n{string} async validateSign (signature, message, account, authority = \'active\', accountsPermisionPlugins)\n// validate if signed data is signed by a account. it returns the matched public key\n\n{Number} async getActionCount(account_name) // get a account\'s action count\n{Number} async getActionMaxSeq(account_name) // get a account\'s max action seq\n{Array} async getRecentActions(account_name) // get recent actions\n{Array} async getActions(account_name, startPos = 0, offset = 0) // get all actions of an account\n{Array} async getAllActionsBatch (account_name, cbReceive, startPos = 0, count = 100, concurrent = 10) // get all actions in bulk\n\n{String} async getBalance(account_name, code = "eosio.token", symbolName = undefined) // get balance of specific account\n{Array.<String>} async getBalances(account_name, code = "eosio.token") // get all balance of specific account\n{Tx} async transfer(account, target, quantity, memo = "", cbError) // the format of account should be {name, authority}\n\n{Tx} async waitTx(txID, maxRound = 12, timeSpanMS = 1009) // check a transaction info, retry once per sec until success\n\n{Tx} async call(code, func, jsonData, ...authorization) // send action to a contract\n\n{Array} async getTableAll(code, tableName, scope, lowerNum, upperNum, ...hint) // get all items in a table\n{Array} async checkTable(code, tableName, scope, limit = 10, lower_bound = 0, upper_bound = -1, index_position = 1) // check a table\n{Array} async checkTableMore(code, tableName, scope, primaryKey, limit = 9999999, lower_bound = 0, upper_bound = -1, index_position = 1)\n{Array} async checkTableRange(code, tableName, scope, from, length = 1, index_position = 1) // check range in table\n{Object} async checkTableItem(code, tableName, scope, key = 0) // check a item in a table\n\n{Object} async updateAuth(account, permission, parent, threshold, keys, accounts, waits) // update auth\n```\n'},t}();e.default=h},function(t,e,n){t.exports=n(238)},function(t,e,n){"use strict";var r=n(4),i=n(113),o=n(240),u=n(67);function s(t){var e=new o(t),n=i(o.prototype.request,e);return r.extend(n,o.prototype,e),r.extend(n,e),n}var a=s(u);a.Axios=o,a.create=function(t){return s(r.merge(u,t))},a.Cancel=n(117),a.CancelToken=n(254),a.isCancel=n(116),a.all=function(t){return Promise.all(t)},a.spread=n(255),t.exports=a,t.exports.default=a},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(67),i=n(4),o=n(249),u=n(250);function s(t){this.defaults=t,this.interceptors={request:new o,response:new o}}s.prototype.request=function(t){"string"==typeof t&&(t=i.merge({url:arguments[0]},arguments[1])),(t=i.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[u,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},i.forEach(["delete","get","head","options"],function(t){s.prototype[t]=function(e,n){return this.request(i.merge(n||{},{method:t,url:e}))}}),i.forEach(["post","put","patch"],function(t){s.prototype[t]=function(e,n,r){return this.request(i.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=s},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(115);t.exports=function(t,e,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i){return t.config=e,n&&(t.code=n),t.request=r,t.response=i,t}},function(t,e,n){"use strict";var r=n(4);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(r.isURLSearchParams(e))o=e.toString();else{var u=[];r.forEach(e,function(t,e){null!==t&&void 0!==t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(i(e)+"="+i(t))}))}),o=u.join("&")}return o&&(t+=(-1===t.indexOf("?")?"?":"&")+o),t}},function(t,e,n){"use strict";var r=n(4),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,o,u={};return t?(r.forEach(t.split("\n"),function(t){if(o=t.indexOf(":"),e=r.trim(t.substr(0,o)).toLowerCase(),n=r.trim(t.substr(o+1)),e){if(u[e]&&i.indexOf(e)>=0)return;u[e]="set-cookie"===e?(u[e]?u[e]:[]).concat([n]):u[e]?u[e]+", "+n:n}}),u):u}},function(t,e,n){"use strict";var r=n(4);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=i(window.location.href),function(e){var n=r.isString(e)?i(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,o=String(t),u="",s=0,a=r;o.charAt(0|s)||(a="=",s%1);u+=a.charAt(63&e>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new i;e=e<<8|n}return u}},function(t,e,n){"use strict";var r=n(4);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,i,o,u){var s=[];s.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===u&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r=n(4);function i(){this.handlers=[]}i.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=i},function(t,e,n){"use strict";var r=n(4),i=n(251),o=n(116),u=n(67),s=n(252),a=n(253);function f(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return f(t),t.baseURL&&!s(t.url)&&(t.url=a(t.baseURL,t.url)),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||u.adapter)(t).then(function(e){return f(t),e.data=i(e.data,e.headers,t.transformResponse),e},function(e){return o(e)||(f(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(117);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i(function(e){t=e}),cancel:t}},t.exports=i},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(257),u=n(258),s=function(){function t(t){this._chain=t}return t.prototype.transcal=function(t,e,n,o,u,s){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._chain.transfer(t,e,n,"@["+o+":"+u.join(",")+"]",s)];case 1:return[2,r.sent()]}})})},t.prototype.transend=function(t,e,n,o,u,s){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.transcal(t,e,"0.0001 "+n,o,u,s)];case 1:return[2,r.sent()]}})})},t.prototype.res=function(t,e){return new u.default(this._chain,t,e)},t.prototype.checkResOf=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.res(t,n).checkAsset(e)];case 1:return[2,r.sent()]}})})},t.prototype.checkResInfo=function(t,e){return r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.res(t,e).checkInfo()];case 1:return[2,n.sent()]}})})},t.prototype.parseTranscalPayload=function(t){return o.default.parse(t)},t.prototype.assembleTranscalPayload=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return(new(o.default.bind.apply(o.default,[void 0,t].concat(e)))).memo()},t}();e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];this.func=t,this.args=[],this.args=e}return t.prototype.memo=function(){return"@["+this.func+":"+this.args.join(",")+"]"},t.prototype.parseMemo=function(t){var e=t[0];if(t.length<4)throw new Error("parse transcal error: the memo is too short.");if("["!==t[1]||"]"===t[2])throw new Error("parse transcal error: formation error.");if("@"!==e&&"#"!==e)throw new Error("parse transcal error: type mark must be @ or #.");var n=t.indexOf(":"),r=t.indexOf("]");if(r<0)throw new Error("parse transcal error: cannot find end mark ']'.");if(n<0)return this.func=t.substr(2,r-2),this.args=[],this;this.func=t.substr(2,n-2);for(var i=n+1,o=i,u=[];;){if((i=t.indexOf(",",i))>=r||i<0){u.push(t.substr(o,r-o));break}u.push(t.substr(o,i-o)),o=++i}return this.args=u,this},t.parse=function(e){return new t("").parseMemo(e)},t}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(112),u=function(){function t(t,e,n,r){void 0===r&&(r={name:null,authority:null}),this._chain=t,this._code=e,this._symStr=n,this._admin=r}return Object.defineProperty(t.prototype,"admin",{get:function(){return this._admin&&this._admin.name&&this._admin.authority?this._admin:null},enumerable:!0,configurable:!0}),t.prototype.resContract=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this._chain.getContract(this._code)];case 1:return[2,t.sent()]}})})},t.prototype.checkAsset=function(t){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return n=(e=o.default).parse,[4,this._chain.checkTableItem(this._code,"res.accounts",t,this._symStr)];case 1:return[2,n.apply(e,[r.sent()])]}})})},t.prototype.checkInfo=function(){return r(this,void 0,void 0,function(){var t,e;return i(this,function(n){switch(n.label){case 0:return e=(t=o.default).parse,[4,this._chain.checkTableItem(this._code,"res.info",this._code,this._symStr)];case 1:return[2,e.apply(t,[n.sent()])]}})})},t.prototype.issue=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().resissue({user:t,quantity:e,memo:n})];case 2:return[2,r.sent()]}})})},t.prototype.burn=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().resburn({user:t,quantity:e,memo:n})];case 2:return[2,r.sent()]}})})},t.prototype.take=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().restake({from:t,to:e,quantity:n,memo:o})];case 2:return[2,r.sent()]}})})},t.prototype.change=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().change({user:t,from:e,to:n,memo:o})];case 2:return[2,r.sent()]}})})},t}();e.default=u},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(21),u=Symbol("sym::EosClient"),s=Symbol("sym::GetIdentity"),a=function(){function t(){this.field={}}return Object.defineProperty(t.prototype,"eosClient",{get:function(){if(this.field[u])return this.field[u];throw new Error("method not yet implemented: this interface should be implement by the specific class.")},enumerable:!0,configurable:!0}),t.prototype.getIdentity=function(){return r(this,void 0,void 0,function(){return i(this,function(t){if(this.field[s])return[2,this.field[s]];throw new Error("method not yet implemented: this interface should be implement by the specific class.")})})},t.prototype.getAuth=function(){return r(this,void 0,void 0,function(){var t;return i(this,function(e){switch(e.label){case 0:return[4,this.getIdentity()];case 1:return[2,{authorization:[(t=e.sent()).name+"@"+t.authority]}]}})})},t.prototype.initFromConf=function(t,e){if(t){var n=o.Eos(t);this.field[u]=function(){return n}}e&&(this.field[s]=e)},t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this._eventMap={},this._supportedEvents=[],this._defaultCb=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t.forEach(function(t){throw t instanceof Error?t:new Error(t)})},t&&(this.enableEvents(t),this._eventMap=Array.isArray(t)?{}:t)}return t.prototype.enableEvents=function(t){var e=Array.isArray(t)?t:Object.keys(t);this._supportedEvents=(this._supportedEvents||[]).concat(e)},t.prototype.setEvent=function(t,e,n){if(!this._supportedEvents.find(function(e){return e===t}))throw new Error("event handler : event "+t+" are not supported.");return this._eventMap[t]={cb:e,ctx:n},this},t.prototype.emitEvent=function(t){for(var e,n,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];if(!this._supportedEvents.find(function(e){return e===t}))throw new Error("event handler : event "+t+" are not found.");var o=this._eventMap[t];return o?(e=o.cb).call.apply(e,[o.ctx].concat(r)):(n=this._defaultCb).call.apply(n,[t].concat(r))},t}();e.default=r},function(t){t.exports={name:"eosplayer",version:"0.5.9",description:"eosplayer is the glue layer of eosjs, which is packaged based on eosjs and provides better usability for the application layer. It can be used on browsers already installed scatter or in Dapp wallets.",main:"build/lib/index.js",bin:{eosplayer:"bin/index.js"},types:"build/lib/index.d.js",repository:"git@github.com:bagaking/eosplayer.git",author:"bagaking <zfaustk@qq.com>",license:"Apache License 2.0",keywords:["eos","tonarts","contract","eosjs","scatter","blockchain"],scripts:{dev:"webpack-dev-server --config webpack.debug.js --open","build:web":"rimraf ./build/web/ &&webpack --config webpack.prod.js -p --display-error-details","build:play":"webpack --config webpack.debug.js -p --display-error-details","build:lib":"rimraf ./build/lib/ && npx tsc && cp LICENSE ./build/lib && cp README.md ./build/lib && node ./scripts/copyPackage.js",build:"npm run lint:fix && npm run build:web && npm run build:lib && npm run build:play","build:graph":"depcruise --exclude '^node_modules' --output-type dot src | dot -T svg > dependency.svg","lint:fix":"npx tslint --fix --project .",test:"./node_modules/.bin/mocha test/*test.js --reporter spec",doc:"jsdoc -c .jsdocrc",update_version:"node ./scripts/prepublish.js",prepublishOnly:"npm run build"},homepage:"https://github.com/bagaking/eosglue#readme",dependencies:{"@babel/polyfill":"^7.2.5","@babel/runtime":"^7.2.0",axios:"^0.18.0","bignumber.js":"^8.0.1",debug:"^4.1.0",eosjs:"^16.0.9",fetch:"^1.1.0",idb:"^2.1.3",yargs:"^13.2.2"},devDependencies:{"@babel/cli":"^7.2.3","@babel/core":"^7.2.2","@babel/plugin-proposal-object-rest-spread":"^7.2.0","@babel/plugin-transform-async-to-generator":"^7.2.0","@babel/plugin-transform-runtime":"^7.2.0","@babel/preset-env":"^7.2.3","babel-loader":"^8.0.5","compression-webpack-plugin":"^2.0.0","dependency-cruiser":"^4.13.3",docdash:"^1.0.0",eslint:"^5.12.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","fs-extra":"^7.0.1",hserve:"^0.0.1-beta.14",rimraf:"^2.6.3","ts-loader":"^5.3.3",tslint:"^5.12.1",typescript:"^3.3.3","uglifyjs-webpack-plugin":"^2.1.1",webpack:"^4.19.0","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.14"},files:["build","bin"]}},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(263)),r(n(264))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(21),s=n(68),a=n(22),f=n(39),c=a.createLogger("readingPlayer"),h={account:{name:"eosio",authority:"active"}},l=function(t){function e(e){var n=t.call(this,e)||this;return n._head_block_num=0,n._head_retry_count=0,n._eosNodes=[],n._identity=h.account,n._head_block_num=0,n._head_retry_count=0,c.info("[EosReading] ==> Create reading nodes \nCONFIGS:",JSON.stringify(n._nodeConfigs)),n._eosNodes=n._nodeConfigs.map(function(t){var e=u.Eos(t);return e.__conf=t,e}),n}return r(e,t),Object.defineProperty(e.prototype,"eosClient",{get:function(){if(!this._eosNodes||this._eosNodes.length<=0)throw new Error("EosUtil : No Avaliable Nodes.");return this._eosNodes[0]},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this._identity]})})},e.prototype.checkNodes=function(t,e,n){return void 0===t&&(t=15e3),void 0===e&&(e=4),void 0===n&&(n=1e3),i(this,void 0,void 0,function(){var r,i,u,s,a,c;return o(this,function(o){switch(o.label){case 0:return[4,f.forMs(t)];case 1:o.sent(),console.log("[EosReading] ==> Start Checking Nodes ",this.eosClient.__conf.httpEndpoint,"AT",Date.now()),o.label=2;case 2:0,o.label=3;case 3:return o.trys.push([3,9,,17]),[4,this.eosClient.getInfo({})];case 4:if(r=o.sent(),this._head_retry_count=0,r.head_block_num>this._head_block_num&&(this._head_block_num=r.head_block_num,console.log("[EosReading] ==> | Info : new head block num",this._head_block_num,"| Node: ",this.eosClient.__conf.httpEndpoint)),0===(i=Math.floor(Math.random()*this._eosNodes.length)))return[3,19];o.label=5;case 5:return o.trys.push([5,7,,8]),console.log("[EosReading] ==> | Info : try pick another node by block height | Node: ",this._eosNodes[i].__conf.httpEndpoint),[4,this._eosNodes[i].getInfo({})];case 6:return(u=o.sent()).head_block_num-this._head_block_num>n?(c=this._eosNodes[0],this._eosNodes[0]=this._eosNodes[i],this._eosNodes[i]=c,console.log("[EosReading] ==> | Info : new node selected (by head block) | OLD: ",c.__conf.httpEndpoint,"| NEW:",this.eosClient.__conf.httpEndpoint)):console.log("[EosReading] ==> | Info : no needs to switch node for block height | ",u.head_block_num,"-",this._head_block_num,"<",n),[3,8];case 7:return o.sent(),[3,19];case 8:return[3,17];case 9:return o.sent(),this._head_retry_count<e?(console.log("[EosReading] ==> | Error : Current node error | RETRY :",this._head_retry_count,"| NODE: ",this._eosNodes[0].__conf.httpEndpoint),this._head_retry_count+=1,[3,16]):[3,10];case 10:console.log("[EosReading] ==> | Error : Current node error | RETRY : Failed | Node:",this._eosNodes[0].__conf.httpEndpoint),s=1,o.label=11;case 11:if(!(s<this._eosNodes.length))return[3,16];o.label=12;case 12:return o.trys.push([12,14,,15]),[4,this._eosNodes[s].getInfo({})];case 13:return(a=o.sent()).head_block_num>=this._head_block_num?(c=this._eosNodes[0],this._eosNodes[0]=this._eosNodes[s],this._eosNodes[s]=c,console.log("[EosReading] ==> Info : new node selected | OLD: ",c.__conf.httpEndpoint,"| NEW:",this.eosClient.__conf.httpEndpoint),[3,16]):(console.log("[EosReading] ==> Info : test node passed | Node: ",this._eosNodes[s].__conf.httpEndpoint,"Test: ",a.head_block_num,"<",this._head_block_num),[3,15]);case 14:return o.sent(),console.log("[EosReading] ==> Warning : test node error | Node: ",this._eosNodes[s].__conf.httpEndpoint),[3,15];case 15:return s++,[3,11];case 16:return[3,17];case 17:return[4,f.forMs(2e3)];case 18:return o.sent(),[3,2];case 19:return[3,0];case 20:return[2]}})})},e}(s.MultiSourcePlayer);e.ReadingPlayer=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(265))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},u=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var s=n(68),a=n(21),f=n(22),c=n(39),h=n(266),l=f.createLogger("signPlayer"),p={account:{name:"eosio",authority:"active"},options:{maxFailureRate:.499,failureRateThreshold:.1,maxContinuousFailure:3,cleaningTimeInterval:12e4,revivalTimeInterval:6e5,responseIntervalThreshold:1e3,responseIntervalDecline:100,maxCallPromiseExceedTime:18e4}},d=function(t){function e(e){var n=t.call(this,e)||this;n._concurrentCount=0;var r=e.account,o=e.options;return n._identity=i({},p.account,r),n._options=i({},p.options,o),n._nodeStates=new h.NodeStatMgr(n._nodeConfigs,n._options),n}return r(e,t),Object.defineProperty(e.prototype,"eosClient",{get:function(){this._nodeStates.setTheBestNodeToCurrent();var t=this._nodeStates.getCurNodeConf();return new a.Eos(t)},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return o(this,void 0,void 0,function(){return u(this,function(t){if(!this._identity)throw new Error("identity has not been set");return[2,this._identity]})})},e.prototype.setIdentity=function(t){this._identity=t},e.prototype.lockChain=function(){return this.chain},e.prototype.dynamicCall=function(t,e,n,r){return o(this,void 0,void 0,function(){var i,o,s,a,f,h,l;return u(this,function(u){switch(u.label){case 0:this._concurrentCount+=1,i=this.lockChain(),o=(new Date).getTime(),s=this._nodeStates.getCurNodeConf().httpEndpoint||"",a=r||{actor:this._identity.name,permission:this._identity.authority},this.log("START",s,t,e,n,a,this._nodeStates.getCurNodeStat(),"Concurrent count => "+this._concurrentCount+" "),u.label=1;case 1:return u.trys.push([1,3,,4]),[4,c.timeoutPromise(this._options.maxCallPromiseExceedTime||5e4,i.call(t,e,n,a)).catch(function(t){throw t})];case 2:return f=u.sent(),l=this._nodeStates.markSendSuccess(o),this.log("SUCCESS",s,t,e,n,a,l),this._concurrentCount-=1,[2,f];case 3:throw h=u.sent(),l=this._nodeStates.markSendFailed(o),this.log("FAILED",s,t,e,n,a,l,"ERROR => "+(h&&h.message?h.message:h)),this._concurrentCount-=1,h;case 4:return[2]}})})},e.prototype.log=function(t,e,n,r,i,o,u){for(var s=[],a=7;a<arguments.length;a++)s[a-7]=arguments[a];l.info.apply(l,["[signPlayer] Call chain [[ "+e+" ]] "+n+"."+r+"("+JSON.stringify(i)+") by "+o.actor+"@"+o.permission+" [[["+t+"]]] :\nNode status => "+JSON.stringify(u)+"\n"].concat(s))},e}(s.MultiSourcePlayer);e.SignPlayer=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(22).createLogger("signPlayer:nodeStat"),i=function(){return function(){this.error_counts=0,this.total_counts=1,this.continuous_failure=0,this.enabled=!0,this.response_interval=0,this.revival_time=(new Date).getTime(),this.cleaning_time=(new Date).getTime(),this.record_total_counts=0,this.record_total_success=0,this.record_total_fuse=0,this.record_total_failed=0}}();e.NodeStat=i;var o=function(){function t(t,e){this._nodeConfigs=t,this._options=e,this._nodeStatus=[],this._currentNodeIndex=0,this.initNodeStatus()}return t.prototype.initNodeStatus=function(){for(var t=0;t<this._nodeConfigs.length;t++)this._nodeStatus.push(new i);this.setTheBestNodeToCurrent()},t.prototype.setTheBestNodeToCurrent=function(){for(var t=Math.floor(Math.random()*this._nodeStatus.length),e=(new Date).getTime(),n=0;n!==this._nodeStatus.length;n++){var i=this.tryClean(n),o=i.error_counts/i.total_counts,u=e>=i.revival_time;if(i.enabled&&(o>=(this._options.maxFailureRate||.5)||i.continuous_failure>=(this._options.maxContinuousFailure||5))&&(i.enabled=!1,i.revival_time=e+(this._options.revivalTimeInterval||6e5),i.error_counts=0,i.total_counts=1,i.continuous_failure=0,i.record_total_fuse=(i.record_total_fuse||0)+1,r.info("[eos_call_util] fuse "+this._nodeConfigs[n].httpEndpoint)),i.enabled||u){var s=this._nodeStatus[t],a=s.error_counts/s.total_counts;(s.continuous_failure>i.continuous_failure||a>o+(this._options.failureRateThreshold||.1)||s.response_interval>i.response_interval+(this._options.responseIntervalThreshold||1e3))&&(t=n)}}this._currentNodeIndex=t},t.prototype.getNodeConf=function(t){return this._nodeConfigs[t]},t.prototype.getNodeStat=function(t){return this._nodeStatus[t]},t.prototype.tryClean=function(t){var e=this.getNodeStat(t),n=(new Date).getTime();return e.cleaning_time>n?e:(r.verbose("execute clean ",e),e.error_counts=Math.max(0,e.error_counts-1),e.total_counts=Math.max(1,e.total_counts-1),e.continuous_failure=Math.max(0,e.continuous_failure-1),e.response_interval=Math.max(0,e.response_interval-(this._options.responseIntervalDecline||1e3)),e.cleaning_time=n+(this._options.cleaningTimeInterval||6e4),e)},t.prototype.getCurNodeConf=function(){return this.getNodeConf(this._currentNodeIndex)},t.prototype.getCurNodeStat=function(){return this.getNodeStat(this._currentNodeIndex)},t.prototype.markSendSuccess=function(t){var e=this.getCurNodeStat(),n=(new Date).getTime(),i=n-t;return e.response_interval=(e.response_interval+i)/2,e.continuous_failure=0,e.enabled=!0,e.cleaning_time=n+(this._options.cleaningTimeInterval||18e4),e.total_counts+=1,e.record_total_success=(e.record_total_success||0)+1,e.record_total_counts=(e.record_total_counts||0)+1,r.verbose("send succeed > ",e.continuous_failure,e.error_counts,e.total_counts),e},t.prototype.markSendFailed=function(t){var e=this.getCurNodeStat();return e.error_counts+=1,e.continuous_failure+=1,e.revival_time=t+(this._options.revivalTimeInterval||18e4),e.total_counts+=1,e.record_total_failed=(e.record_total_failed||0)+1,e.record_total_counts=(e.record_total_counts||0)+1,r.verbose("send failed > ",e.continuous_failure,e.error_counts,e.total_counts),e},t}();e.NodeStatMgr=o},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){void 0===t&&(t={mgrcontract:"mykeymanager"}),this.config=t}return t.prototype.getSignKey=function(t,e){return r(this,void 0,void 0,function(){var n,r,o;return i(this,function(i){switch(i.label){case 0:return n="keydata",r=3,[4,e.getTableAll(this.config.mgrcontract,n,t,r,r+1)];case 1:return(o=i.sent())?[2,o[0].key.pubkey]:[2,""]}})})},Object.defineProperty(t.prototype,"perm",{get:function(){return this.config.mgrcontract+"@active"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"signKeyProvider",{get:function(){var t,e=this;return(t={})[this.perm]=function(t,n){return r(e,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getSignKey(t,n)];case 1:return[2,e.sent()]}})})},t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"validatorProvider",{get:function(){var t,e=this;return(t={})[this.perm]=function(t,n,o){return r(e,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getSignKey(t,o)];case 1:return[2,e.sent()===n]}})})},t},enumerable:!0,configurable:!0}),t}();e.MykeyPlugin=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JpZ2kvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J5dGVidWZmZXIvZGlzdC9ieXRlYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHlwZXMvbGlicy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbG9nLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIva2V5X3B1YmxpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9rZXlfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2tleV9wcml2YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy93YWl0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWdzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21kNS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWN1cnZlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmNidWZmZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvc3RydWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsYXllci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL3NyYy9tdWx0aVNvdXJjZVBsYXllci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdudW1iZXIuanMvYmlnbnVtYmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9zY2F0dGVyUGxheWVyL3NjYXR0ZXJQbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9hZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbWJ5dGVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2luY3IzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYXV0aENpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvc3RyZWFtQ2lwaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdpL2xpYi9iaWdpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL2N1cnZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yaXBlbWQxNjAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvZW5mb3JjZV90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9wcm9jZXNzLWFyZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvZm9ybWF0LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9hc3NldC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZGIvbGliL2lkYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2lucy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvYXBpX2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb25nL2Rpc3QvbG9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdpL2xpYi9jb252ZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL25hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2UteC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9wcm9taXNlLWFzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2VjZHNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2Vjc2lnbmF0dXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2FwaV9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZjYnVmZmVyL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWUtZmxvYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZjYnVmZmVyL2xpYi9mY2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmNidWZmZXIvbGliL3N0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9hcGkvdjEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWFwaS9saWIvYXBpZ2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc29tb3JwaGljLWZldGNoL2ZldGNoLW5wbS1icm93c2VyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbWVsLWNhc2UvY2FtZWwtY2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXBwZXItY2FzZS91cHBlci1jYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uby1jYXNlL25vLWNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvd2VyLWNhc2UvbG93ZXItY2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm8tY2FzZS92ZW5kb3Ivbm9uLXdvcmQtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uby1jYXNlL3ZlbmRvci9jYW1lbC1jYXNlLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm8tY2FzZS92ZW5kb3IvY2FtZWwtY2FzZS11cHBlci1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWFwaS9saWIvZXhwb3J0ZWQtaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzL2xpYi9hYmktY2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzL2xpYi93cml0ZS1hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZ3MvZW9zTm9kZXMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL291dE9mQm94L3NjYXR0ZXJQbGF5ZXIvZGIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvY2hhaW4udHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL2toLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC90cmFuc2NhbFBheWxvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMva2hSZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL2Vvc1Byb3ZpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9ldmVudEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL291dE9mQm94L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9yZWFkaW5nUGxheWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9zaWduUGxheWVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9zaWduUGxheWVyL3NpZ25QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL291dE9mQm94L3NpZ25QbGF5ZXIvbm9kZVN0YXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbnMvbXlrZXkvaW5kZXgudHMiXSwibmFtZXMiOlsicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjaHVua0lkIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90UmVxdWVzdFRpbWVvdXQiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsInB1c2giLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0RmFjdG9yeSIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJob3RTdGF0dXMiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiZmluaXNoQ2h1bmtMb2FkaW5nIiwiZXJyIiwiaG90V2FpdGluZ0ZpbGVzTWFwIiwiaG90RW5zdXJlVXBkYXRlQ2h1bmsiLCJ0IiwibW9kZSIsImhvdFN0YXR1c0hhbmRsZXJzIiwibmV3U3RhdHVzIiwiaSIsImxlbmd0aCIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJpZCIsImhvdENoZWNrIiwiYXBwbHkiLCJFcnJvciIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJob3REb3dubG9hZE1hbmlmZXN0IiwiYyIsImgiLCJwcm9taXNlIiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwiaG90QXBwbHkiLCJyZXN1bHQiLCJvdXRkYXRlZE1vZHVsZXMiLCJvcHRpb25zIiwiY2IiLCJqIiwibW9kdWxlIiwiZ2V0QWZmZWN0ZWRTdHVmZiIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsInNsaWNlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsInR5cGUiLCJfbWFpbiIsInBhcmVudElkIiwicGFyZW50IiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiY29uY2F0IiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJqb2luIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwiaWR4Iiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiZXJyb3JIYW5kbGVyIiwia2V5cyIsImZvckVhY2giLCJpbnN0YWxsZWRDaHVua3MiLCJob3REaXNwb3NlQ2h1bmsiLCJkZXBlbmRlbmN5IiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkYXRhIiwiZGlzcG9zZUhhbmRsZXJzIiwiX2Rpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwic3BsaWNlIiwibW9kdWxlcyIsImVycm9yIiwiY2FsbGJhY2tzIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwiZXhwb3J0cyIsImwiLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImNoZWNrIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJob3RDcmVhdGVNb2R1bGUiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsImJ1ZmZlciIsIkJ1ZmZlciIsImNvcHlQcm9wcyIsImRzdCIsIlNhZmVCdWZmZXIiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwiU2xvd0J1ZmZlciIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwiVGVtcEN0b3IiLCJnbG9iYWwiLCJiYXNlNjQiLCJpZWVlNzU0IiwiaXNBcnJheSIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwidGhpcyIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJsZW4iLCJjaGVja2VkIiwiY29weSIsInZhbCIsImlzbmFuIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJ0b1N0cmluZyIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImNoYXJDb2RlQXQiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsInN0YXJ0IiwiZW5kIiwiZnJvbUJ5dGVBcnJheSIsInV0ZjhTbGljZSIsIk1hdGgiLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwieCIsInkiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiYXJndW1lbnRzIiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIkFycmF5IiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJ1dGlsIiwiaGFzT3duIiwicFNsaWNlIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwicFRvU3RyaW5nIiwiYXJyYnVmIiwiRGF0YVZpZXciLCJhc3NlcnQiLCJvayIsInJlZ2V4IiwiZ2V0TmFtZSIsImZ1bmMiLCJpc0Z1bmN0aW9uIiwidHJ1bmNhdGUiLCJzb21ldGhpbmciLCJyYXduYW1lIiwiZmFpbCIsImV4cGVjdGVkIiwibWVzc2FnZSIsIm9wZXJhdG9yIiwic3RhY2tTdGFydEZ1bmN0aW9uIiwiQXNzZXJ0aW9uRXJyb3IiLCJfZGVlcEVxdWFsIiwic3RyaWN0IiwibWVtb3MiLCJpc0RhdGUiLCJnZXRUaW1lIiwiaXNSZWdFeHAiLCJzb3VyY2UiLCJtdWx0aWxpbmUiLCJsYXN0SW5kZXgiLCJpZ25vcmVDYXNlIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYWN0dWFsSW5kZXgiLCJhY3R1YWxWaXNpdGVkT2JqZWN0cyIsImlzUHJpbWl0aXZlIiwiZ2V0UHJvdG90eXBlT2YiLCJhSXNBcmdzIiwiaXNBcmd1bWVudHMiLCJiSXNBcmdzIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0Iiwib2JqRXF1aXYiLCJleHBlY3RlZEV4Y2VwdGlvbiIsInRlc3QiLCJpc1Byb3RvdHlwZU9mIiwiX3Rocm93cyIsInNob3VsZFRocm93IiwiYmxvY2siLCJfdHJ5QmxvY2siLCJ1c2VyUHJvdmlkZWRNZXNzYWdlIiwiaXNVbndhbnRlZEV4Y2VwdGlvbiIsImlzRXJyb3IiLCJpc1VuZXhwZWN0ZWRFeGNlcHRpb24iLCJnZW5lcmF0ZWRNZXNzYWdlIiwic2VsZiIsImdldE1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInN0YWNrIiwiZm5fbmFtZSIsIm5leHRfbGluZSIsInN1YnN0cmluZyIsImluaGVyaXRzIiwiZXF1YWwiLCJub3RFcXVhbCIsImRlZXBFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBFcXVhbCIsIm5vdERlZXBTdHJpY3RFcXVhbCIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJ0aHJvd3MiLCJkb2VzTm90VGhyb3ciLCJpZkVycm9yIiwiaXNPYmplY3QiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJleHRlbmQiLCJ0aGlzQXJnIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsIl9fZyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIkJpZ0ludGVnZXIiLCJjb3JlIiwiX19lIiwiaXQiLCJUcmFuc2Zvcm0iLCJTdHJpbmdEZWNvZGVyIiwiQ2lwaGVyQmFzZSIsImhhc2hNb2RlIiwiX2ZpbmFsT3JEaWdlc3QiLCJmaW5hbCIsIl9maW5hbCIsIl9fZmluYWwiLCJfZGVjb2RlciIsIl9lbmNvZGluZyIsImlucHV0RW5jIiwib3V0cHV0RW5jIiwib3V0RGF0YSIsIl91cGRhdGUiLCJfdG9TdHJpbmciLCJzZXRBdXRvUGFkZGluZyIsImdldEF1dGhUYWciLCJzZXRBdXRoVGFnIiwic2V0QUFEIiwiX3RyYW5zZm9ybSIsIl8iLCJuZXh0IiwiX2ZsdXNoIiwiZG9uZSIsImVuYyIsImZpbiIsInBuYSIsIkR1cGxleCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY3JlYXRlSGFzaCIsImNyZWF0ZUhtYWMiLCJzaGExIiwicmVzdWx0RW5jb2RpbmciLCJkaWdlc3QiLCJzaGEyNTYiLCJzaGE1MTIiLCJIbWFjU0hBMjU2Iiwic2VjcmV0IiwicmlwZW1kMTYwIiwiZFAiLCJjcmVhdGVEZXNjIiwiZiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsIklPYmplY3QiLCJkZWZpbmVkIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiTG9uZyIsIkJ5dGVCdWZmZXIiLCJjYXBhY2l0eSIsIkRFRkFVTFRfQ0FQQUNJVFkiLCJERUZBVUxUX0VORElBTiIsIkRFRkFVTFRfTk9BU1NFUlQiLCJFTVBUWV9CVUZGRVIiLCJ2aWV3IiwibWFya2VkT2Zmc2V0IiwiVkVSU0lPTiIsIkxJVFRMRV9FTkRJQU4iLCJCSUdfRU5ESUFOIiwiQnl0ZUJ1ZmZlclByb3RvdHlwZSIsIl9faXNCeXRlQnVmZmVyX18iLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJzdHJpbmdTb3VyY2UiLCJzdHJpbmdEZXN0aW5hdGlvbiIsImNzIiwicHMiLCJpZWVlNzU0X3JlYWQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsImllZWU3NTRfd3JpdGUiLCJydCIsImFicyIsImxvZyIsIkxOMiIsImFjY2Vzc29yIiwiYWxsb2NhdGUiLCJidWZmZXJzIiwiayIsImlzQnl0ZUJ1ZmZlciIsIndyYXAiLCJiaSIsImJiIiwiZnJvbUJhc2U2NCIsImZyb21IZXgiLCJmcm9tQmluYXJ5IiwiZnJvbVVURjgiLCJmcm9tRGVidWciLCJjbG9uZSIsIndyaXRlQml0U2V0IiwicmVsYXRpdmUiLCJiaXRzIiwiYml0Iiwid3JpdGVWYXJpbnQzMiIsIndyaXRlQnl0ZSIsInJlYWRCaXRTZXQiLCJyZWFkVmFyaW50MzIiLCJyZWFkQnl0ZSIsInJlYWRCeXRlcyIsIndyaXRlQnl0ZXMiLCJhcHBlbmQiLCJjYXBhY2l0eTAiLCJyZXNpemUiLCJ3cml0ZVVpbnQ4IiwiY2FwYWNpdHkxIiwicmVhZFVpbnQ4Iiwid3JpdGVJbnQxNiIsImNhcGFjaXR5MiIsIndyaXRlU2hvcnQiLCJyZWFkSW50MTYiLCJyZWFkU2hvcnQiLCJ3cml0ZVVpbnQxNiIsImNhcGFjaXR5MyIsIndyaXRlVUludDE2IiwicmVhZFVpbnQxNiIsInJlYWRVSW50MTYiLCJ3cml0ZUludDMyIiwiY2FwYWNpdHk0Iiwid3JpdGVJbnQiLCJyZWFkSW50MzIiLCJyZWFkSW50Iiwid3JpdGVVaW50MzIiLCJjYXBhY2l0eTUiLCJ3cml0ZVVJbnQzMiIsInJlYWRVaW50MzIiLCJyZWFkVUludDMyIiwid3JpdGVJbnQ2NCIsImZyb21OdW1iZXIiLCJjYXBhY2l0eTYiLCJsb3ciLCJoaWdoIiwid3JpdGVMb25nIiwicmVhZEludDY0IiwicmVhZExvbmciLCJ3cml0ZVVpbnQ2NCIsImNhcGFjaXR5NyIsIndyaXRlVUludDY0IiwicmVhZFVpbnQ2NCIsInJlYWRVSW50NjQiLCJ3cml0ZUZsb2F0MzIiLCJjYXBhY2l0eTgiLCJyZWFkRmxvYXQzMiIsInJlYWRGbG9hdCIsIndyaXRlRmxvYXQ2NCIsImNhcGFjaXR5OSIsInJlYWRGbG9hdDY0IiwicmVhZERvdWJsZSIsIk1BWF9WQVJJTlQzMl9CWVRFUyIsImNhbGN1bGF0ZVZhcmludDMyIiwiemlnWmFnRW5jb2RlMzIiLCJ6aWdaYWdEZWNvZGUzMiIsImNhcGFjaXR5MTAiLCJ3cml0ZVZhcmludDMyWmlnWmFnIiwicmVhZFZhcmludDMyWmlnWmFnIiwiTUFYX1ZBUklOVDY0X0JZVEVTIiwiY2FsY3VsYXRlVmFyaW50NjQiLCJwYXJ0MCIsInRvSW50IiwicGFydDEiLCJzaGlmdFJpZ2h0VW5zaWduZWQiLCJwYXJ0MiIsInppZ1phZ0VuY29kZTY0IiwidW5zaWduZWQiLCJ0b1NpZ25lZCIsInNoaWZ0TGVmdCIsInhvciIsInNoaWZ0UmlnaHQiLCJ0b1Vuc2lnbmVkIiwiemlnWmFnRGVjb2RlNjQiLCJhbmQiLCJPTkUiLCJuZWdhdGUiLCJ3cml0ZVZhcmludDY0IiwiY2FwYWNpdHkxMSIsIndyaXRlVmFyaW50NjRaaWdaYWciLCJyZWFkVmFyaW50NjQiLCJmcm9tQml0cyIsInJlYWRWYXJpbnQ2NFppZ1phZyIsIndyaXRlQ1N0cmluZyIsInV0ZngiLCJjYWxjdWxhdGVVVEYxNmFzVVRGOCIsImNhcGFjaXR5MTIiLCJlbmNvZGVVVEYxNnRvVVRGOCIsInJlYWRDU3RyaW5nIiwic2QiLCJkZWNvZGVVVEY4dG9VVEYxNiIsIndyaXRlSVN0cmluZyIsImNhcGFjaXR5MTMiLCJyZWFkSVN0cmluZyIsInJlYWRVVEY4U3RyaW5nIiwiTUVUUklDU19CWVRFUyIsIk1FVFJJQ1NfQ0hBUlMiLCJ3cml0ZVVURjhTdHJpbmciLCJjYXBhY2l0eTE0Iiwid3JpdGVTdHJpbmciLCJjYWxjdWxhdGVVVEY4Q2hhcnMiLCJjYWxjdWxhdGVVVEY4Qnl0ZXMiLCJjYWxjdWxhdGVTdHJpbmciLCJtZXRyaWNzIiwiZGVjb2RlVVRGOCIsImNwIiwiVVRGOHRvVVRGMTYiLCJyZWFkU3RyaW5nIiwid3JpdGVWU3RyaW5nIiwiY2FwYWNpdHkxNSIsInJlYWRWU3RyaW5nIiwiY2FwYWNpdHkxNiIsImFwcGVuZFRvIiwiY2xlYXIiLCJjb21wYWN0IiwiYmVnaW4iLCJjb3B5VG8iLCJ0YXJnZXRPZmZzZXQiLCJzb3VyY2VPZmZzZXQiLCJzb3VyY2VMaW1pdCIsInRhcmdldFJlbGF0aXZlIiwiZW5zdXJlQ2FwYWNpdHkiLCJjdXJyZW50IiwiZmxpcCIsIm1hcmsiLCJvcmRlciIsIkxFIiwiQkUiLCJiaWdFbmRpYW4iLCJwcmVwZW5kIiwiZGlmZiIsInByZXBlbmRUbyIsInByaW50RGVidWciLCJ0b0RlYnVnIiwicmVzZXQiLCJyZXZlcnNlIiwic2tpcCIsInRvQnVmZmVyIiwiZm9yY2VDb3B5IiwidG9BcnJheUJ1ZmZlciIsInRvVVRGOCIsInRvQmFzZTY0IiwidG9CaW5hcnkiLCJ0b0NvbHVtbnMiLCJseGl2IiwiYW91dCIsImFpbiIsImVuY29kZSIsImRlY29kZSIsInQxIiwidDIiLCJidG9hIiwiYXRvYiIsImI2NCIsImNoYXJzIiwicGFydHMiLCJjaGFyQ29kZSIsImNvbHVtbnMiLCJoZXgiLCJhc2MiLCJ0b1VwcGVyQ2FzZSIsImNoIiwicnMiLCJobyIsImhtIiwiaGwiLCJjaGFyQXQiLCJNQVhfQ09ERVBPSU5UIiwiZW5jb2RlVVRGOCIsIlVURjE2dG9VVEY4IiwiYzEiLCJjMiIsImNhbGN1bGF0ZUNvZGVQb2ludCIsImNhbGN1bGF0ZVVURjgiLCJIYXNoIiwiYmxvY2tTaXplIiwiZmluYWxTaXplIiwiX2Jsb2NrIiwiX2ZpbmFsU2l6ZSIsIl9ibG9ja1NpemUiLCJfbGVuIiwiYWNjdW0iLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsInJlbSIsImxvd0JpdHMiLCJoaWdoQml0cyIsImhhc2giLCJfaGFzaCIsImRlYnVnIiwiRW9zTGliIiwiZWNjIiwiRW9zIiwiRWNjIiwiRGVidWciLCJsaWJzXzEiLCJjcmVhdGVMb2dnZXIiLCJ2ZXJib3NlIiwiaW5mbyIsIndhcm5pbmciLCJuYW1lc3BhY2VzIiwiZGlzYWJsZSIsImVuYWJsZSIsIl9pdGVyYXRvcjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N5bWJvbDIiLCJfdHlwZW9mIiwiZGVmYXVsdCIsIm9iamVjdFRvU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N5bWJvbCIsInJlIiwiX3NsaWNlZFRvQXJyYXkiLCJpdGVyYXRvciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJzbGljZUl0ZXJhdG9yIiwiZWN1cnZlIiwic2VjcDI1NmsxIiwiZ2V0Q3VydmVCeU5hbWUiLCJrZXlVdGlscyIsIkciLCJQdWJsaWNLZXkiLCJRIiwicHVia2V5X3ByZWZpeCIsInB1YmxpY0tleSIsImZyb21CdWZmZXIiLCJjb21wcmVzc2VkIiwiZ2V0RW5jb2RlZCIsImNoZWNrRW5jb2RlIiwidG9VbmNvbXByZXNzZWQiLCJwb2ludCIsIlBvaW50IiwiZGVjb2RlRnJvbSIsImZyb21Qb2ludCIsImNvbXBhcmVUbyIsImNHIiwibXVsdGlwbHkiLCJRcHJpbWUiLCJhZGQiLCJpc0luZmluaXR5IiwiaXNWYWxpZCIsInB1YmtleSIsImJpbiIsInB1YmxpY19rZXkiLCJmcm9tU3RyaW5nT3JUaHJvdyIsIlJlZ0V4cCIsImNoZWNrRGVjb2RlIiwiX21hdGNoIiwia2V5VHlwZSIsImtleVN0cmluZyIsImZyb21TdHJpbmdIZXgiLCJiYXNlNTgiLCJyYW5kb21CeXRlcyIsInJhbmRvbTMyQnl0ZUJ1ZmZlciIsIl9yZWYiLCJfcmVmJGNwdUVudHJvcHlCaXRzIiwiY3B1RW50cm9weUJpdHMiLCJfcmVmJHNhZmUiLCJzYWZlIiwiX2VudHJvcHlDb3VudCIsImhhc2hfYXJyYXkiLCJjcHVFbnRyb3B5IiwiZXh0ZXJuYWxFbnRyb3B5QXJyYXkiLCJlbnRyb3B5U3RyIiwiRGF0ZSIsInNjcmVlbiIsImhlaWdodCIsIndpZHRoIiwiY29sb3JEZXB0aCIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsInBpeGVsRGVwdGgiLCJsYW5ndWFnZSIsImxvY2F0aW9uIiwiaGlzdG9yeSIsIm1pbWVUeXBlIiwibWltZVR5cGVzIiwiZGVzY3JpcHRpb24iLCJzdWZmaXhlcyIsImVudHJvcHkiLCJzdGFydF90Iiwibm93IiwiYnJvd3NlckVudHJvcHkiLCJhZGRFbnRyb3B5IiwiaW50cyIsIl9rZXkiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiZW50cm9weVBvcyIsImkyIiwicmV0dXJuIiwiZW50cm9weUNvdW50IiwiY2hlY2tzdW0iLCJuZXdDaGVjayIsImtleUJ1ZmZlciIsIl9jaGVja3N1bSIsImNvbGxlY3RlZCIsImxhc3RDb3VudCIsImxvd0VudHJvcHlTYW1wbGVzIiwiY291bnQiLCJmbG9hdGluZ1BvaW50Q291bnQiLCJkZWx0YSIsImxvZzIiLCJwY3QiLCJ0b0ZpeGVkIiwic2luIiwic3FydCIsImNvbW1vbkFwaSIsIm9iamVjdEFwaSIsImFzc2lnbiIsImV4ZWMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsImFzVUludDMyQXJyYXkiLCJzY3J1YlZlYyIsImNyeXB0QmxvY2siLCJNIiwia2V5U2NoZWR1bGUiLCJTVUJfTUlYIiwiU0JPWCIsIm5Sb3VuZHMiLCJ0MCIsInQzIiwiU1VCX01JWDAiLCJTVUJfTUlYMSIsIlNVQl9NSVgyIiwiU1VCX01JWDMiLCJzMCIsInMxIiwiczIiLCJzMyIsImtzUm93Iiwicm91bmQiLCJSQ09OIiwiSU5WX1NCT1giLCJJTlZfU1VCX01JWCIsInhpIiwic3giLCJ4MiIsIng0IiwieDgiLCJBRVMiLCJfcmVzZXQiLCJrZXlTaXplIiwia2V5V29yZHMiLCJrc1Jvd3MiLCJpbnZLZXlTY2hlZHVsZSIsImlrIiwia3NSIiwidHQiLCJfblJvdW5kcyIsIl9rZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImVuY3J5cHRCbG9ja1JhdyIsImVuY3J5cHRCbG9jayIsImRlY3J5cHRCbG9jayIsIm0xIiwic2NydWIiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJwcm9taXNlQXN5bmMiLCJQcml2YXRlS2V5IiwiaXNCaWdJbnRlZ2VyIiwidG9XaWYiLCJwcml2YXRlX2tleSIsInRvUHVibGljIiwiZ2V0U2hhcmVkU2VjcmV0IiwiS0IiLCJLQlAiLCJmcm9tQWZmaW5lIiwiUyIsImFmZmluZVgiLCJnZXRDaGlsZEtleSIsInBhcnNlS2V5IiwicHJpdmF0ZVN0ciIsInZlcnNpb25LZXkiLCJwcml2YXRlS2V5IiwiZm9ybWF0IiwiZnJvbVNlZWQiLCJzZWVkIiwiaXNXaWYiLCJ0ZXh0IiwiZnJvbVdpZiIsInJhbmRvbUtleSIsImluaXRpYWxpemUiLCJ1bnNhZmVSYW5kb21LZXkiLCJpbml0aWFsaXplZCIsInB2dCIsInB2dEVycm9yIiwicHViIiwidW5pdFRlc3QiLCJhcnIyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibXNnIiwiZm9yTXMiLCJtcyIsImZvckNvbmRpdGlvbiIsImZuUHJlZGljdCIsInNwYW5NcyIsIl9hIiwic2VudCIsIlRpbWVvdXRFcnJvciIsIl9zdXBlciIsIl90aGlzIiwiX19leHRlbmRzIiwidGltZW91dFByb21pc2UiLCJwcm9taXNlTGlrZSIsIm9uQ2FuY2VsIiwidFByb21pc2UiLCJ0aW1lT3V0IiwicmFjZSIsIl9fZXhwb3J0IiwiJGF0IiwiaXRlcmF0ZWQiLCJfdCIsImluZGV4IiwiY2VpbCIsInZhbHVlT2YiLCIka2V5cyIsImVudW1CdWdLZXlzIiwic2hhcmVkIiwiY29weXJpZ2h0Iiwic3BsaXQiLCJkZWYiLCJoYXMiLCJUQUciLCJ0YWciLCJzdGF0IiwiaGlkZSIsIkl0ZXJhdG9ycyIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJOQU1FIiwiQ29sbGVjdGlvbiIsInByb3RvIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsImVyIiwiaGFuZGxlciIsImNvbnRleHQiLCJsaXN0ZW5lciIsIm5ld0xpc3RlbmVyIiwid2FybmVkIiwidHJhY2UiLCJmaXJlZCIsInBvc2l0aW9uIiwibGlzdGVuZXJDb3VudCIsImV2bGlzdGVuZXIiLCJlbWl0dGVyIiwiU3RyZWFtIiwiUGFzc1Rocm91Z2giLCJzZXRJbW1lZGlhdGUiLCJDb3JrZWRSZXF1ZXN0Iiwic3RhdGUiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJwZW5kaW5nY2IiLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJvbkNvcmtlZEZpbmlzaCIsImFzeW5jV3JpdGUiLCJXcml0YWJsZVN0YXRlIiwiaW50ZXJuYWxVdGlsIiwiZGVwcmVjYXRlIiwiT3VyVWludDhBcnJheSIsInJlYWxIYXNJbnN0YW5jZSIsImRlc3Ryb3lJbXBsIiwibm9wIiwic3RyZWFtIiwiaXNEdXBsZXgiLCJvYmplY3RNb2RlIiwid3JpdGFibGVPYmplY3RNb2RlIiwiaHdtIiwid3JpdGFibGVId20iLCJ3cml0YWJsZUhpZ2hXYXRlck1hcmsiLCJkZWZhdWx0SHdtIiwiZmluYWxDYWxsZWQiLCJuZWVkRHJhaW4iLCJlbmRpbmciLCJmaW5pc2hlZCIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsImRlZmF1bHRFbmNvZGluZyIsIndyaXRpbmciLCJjb3JrZWQiLCJzeW5jIiwiYnVmZmVyUHJvY2Vzc2luZyIsIm9ud3JpdGUiLCJ3cml0ZWNiIiwid3JpdGVsZW4iLCJvbndyaXRlU3RhdGVVcGRhdGUiLCJmaW5pc2hNYXliZSIsImVycm9yRW1pdHRlZCIsIm9ud3JpdGVFcnJvciIsIm5lZWRGaW5pc2giLCJidWZmZXJlZFJlcXVlc3QiLCJjbGVhckJ1ZmZlciIsImFmdGVyV3JpdGUiLCJsYXN0QnVmZmVyZWRSZXF1ZXN0IiwicHJlZmluaXNoZWQiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsIl93cml0ZSIsIndyaXRldiIsIl93cml0ZXYiLCJkZXN0cm95IiwiZG9Xcml0ZSIsImNodW5rIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInByZWZpbmlzaCIsImdldEJ1ZmZlciIsImhhc0luc3RhbmNlIiwiX2lzVWludDhBcnJheSIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWQiLCJ2YWxpZENodW5rIiwibmV3Q2h1bmsiLCJkZWNvZGVDaHVuayIsImxhc3QiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsIm5iIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiSGFzaEJhc2UiLCJBUlJBWTE2IiwiTUQ1IiwiX2IiLCJfYyIsInJvdGwiLCJmbkYiLCJmbkciLCJmbkgiLCJmbkkiLCJfZGlnZXN0IiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsIkN1cnZlIiwiUklQRU1EMTYwIiwic2hhIiwiQmFzZSIsImFsZyIsIlR5cGVzIiwiRmNidWZmZXIiLCJkZWZpbml0aW9ucyIsImNvbmZpZyIsImN1c3RvbVR5cGVzIiwidHlwZXMiLCJfY3JlYXRlIiwiZXJyb3JzIiwic3RydWN0cyIsIl9leHRlbmQiLCJjb21iaW5lZCIsIl9jcmVhdGUyIiwidHlwZU5hbWUiLCJfc2xpY2VkVG9BcnJheTMiLCJfdHlwZW9mMyIsIl9yZXF1aXJlIiwiU2lnbmF0dXJlIiwic2NoZW1hIiwiX3JlcXVpcmUyIiwiZW5jb2RlTmFtZSIsImlzTmFtZSIsImRlY29kZU5hbWUiLCJEZWNpbWFsUGFkIiwiRGVjaW1hbEltcGx5IiwiRGVjaW1hbFVuaW1wbHkiLCJwcmludEFzc2V0IiwicGFyc2VBc3NldCIsImV4dGVuZGVkU2NoZW1hIiwic3RydWN0TG9va3VwIiwibG9va3VwTmFtZSIsImFjY291bnQiLCJjYWNoZSIsImFiaUNhY2hlIiwiYWJpIiwiYWN0aW9ucyIsImFjdGlvbiIsIl9zdHJ1Y3QiLCJzdHJ1Y3QiLCJmb3JjZUFjdGlvbkRhdGFIZXgiLCJvdmVycmlkZSIsImF1dGhvcml0eU92ZXJyaWRlIiwiYWJpT3ZlcnJpZGUiLCJ3YXNtQ29kZU92ZXJyaWRlIiwiYWN0aW9uRGF0YU92ZXJyaWRlIiwiZW9zVHlwZXMiLCJOYW1lIiwidmFyaWFudCIsIlB1YmxpY0tleUVjYyIsInN5bWJvbCIsIl9TeW1ib2wiLCJzeW1ib2xfY29kZSIsIlN5bWJvbENvZGUiLCJleHRlbmRlZF9zeW1ib2wiLCJFeHRlbmRlZFN5bWJvbCIsImFzc2V0IiwiQXNzZXQiLCJleHRlbmRlZF9hc3NldCIsIkV4dGVuZGVkQXNzZXQiLCJzaWduYXR1cmUiLCJTaWduYXR1cmVUeXBlIiwiZnVsbFNjaGVtYSIsIl9GY2J1ZmZlciIsInN0cmluZ2lmeSIsInZhbGlkYXRpb24iLCJmcm9tQnl0ZUJ1ZmZlciIsImFwcGVuZEJ5dGVCdWZmZXIiLCJ0b09iamVjdCIsImRlZmF1bHRzIiwidmFyaWFudEFycmF5IiwiYmFzZVR5cGVzIiwidmFyaWFudHMiLCJUeXBlIiwic3RhdGljVmFyaWFudCIsInN0YXRpY192YXJpYW50IiwiYmNvcHkiLCJwdWJidWYiLCJrZXlQcmVmaXgiLCJwcmVjaXNpb24iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9wYXJzZUFzc2V0IiwicGFkIiwicmVwZWF0IiwiX3BhcnNlQXNzZXQyIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMiLCJfZGlkSXRlcmF0b3JFcnJvcjMiLCJfaXRlcmF0b3JFcnJvcjMiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwic3ltYm9sVHlwZSIsImNvbnRyYWN0TmFtZSIsIl92YWx1ZSRzcGxpdCIsIl92YWx1ZSRzcGxpdDIiLCJjb250cmFjdCIsImFtb3VudFR5cGUiLCJpbnQ2NCIsImFtb3VudCIsInN5bSIsIl9wYXJzZUFzc2V0NSIsIl9wYXJzZUFzc2V0NiIsIl9wYXJzZUFzc2V0NyIsIl9wYXJzZUFzc2V0OCIsImFzc2V0VHlwZSIsIl9hc3NldCRzcGxpdCIsInNpZ25hdHVyZVR5cGUiLCJmaXhlZF9ieXRlczY1Iiwic2lnbmF0dXJlQnVmZmVyIiwiYXV0aG9yaXR5LmZyb21PYmplY3QiLCJ0aHJlc2hvbGQiLCJ3ZWlnaHQiLCJfdmFsdWUkc3BsaXQzIiwiX3ZhbHVlJHNwbGl0NCIsIl92YWx1ZSRzcGxpdDQkIiwiYWNjb3VudHMiLCJwZXJtaXNzaW9uIiwiYWN0b3IiLCJhYmlfZGVmLmZyb21PYmplY3QiLCJqc29uIiwic2V0YWJpLmFiaS5hcHBlbmRCeXRlQnVmZmVyIiwiZmllbGRzIiwic2VyIiwiYjIiLCJzZXRjb2RlLmNvZGUuZnJvbU9iamVjdCIsIl9yZWYyIiwiYmluYXJ5ZW4iLCJ3YXNtIiwicGFyc2VUZXh0IiwiZW1pdEJpbmFyeSIsImFjdGlvbi5kYXRhLmZyb21CeXRlQnVmZmVyIiwiX3JlZjMiLCJsZW5QcmVmaXgiLCJiQ29weSIsImFjdGlvbi5kYXRhLmFwcGVuZEJ5dGVCdWZmZXIiLCJfcmVmNCIsImFjdGlvbi5kYXRhLmZyb21PYmplY3QiLCJfcmVmNSIsImFjdGlvbi5kYXRhLnRvT2JqZWN0IiwiX3JlZjYiLCJfcmVmNyIsIl9pc0l0ZXJhYmxlMyIsIl9nZXRJdGVyYXRvcjMiLCJhc3NldF8xIiwibG9nXzEiLCJjaGFpbl8xIiwia2hfMSIsImVvc1Byb3ZpZGVyXzEiLCJldmVudEhhbmRsZXJfMSIsInBhY2thZ2VKc29uIiwiRVZFTlRfTkFNRVMiLCJFUlJfVFJBTlNGRVJfRkFJTEVEIiwiRVJSX1RSQU5TQ0FMX0ZBSUxFRCIsIkVSUl9UUkFOU0VORF9GQUlMRUQiLCJQbGF5ZXIiLCJldmVudHMiLCJlbmFibGVFdmVudHMiLCJlb3NDbGllbnQiLCJnZXRBY2NvdW50SW5mbyIsImFjY291bnRfbmFtZSIsImdldElkZW50aXR5IiwiZ2V0QmFsYW5jZSIsInN5bWJvbE5hbWUiLCJnZXRCYWxhbmNlcyIsImdldEJhbGFuY2VBc3NldCIsInN0ckFzc2V0IiwidHJhbnNmZXIiLCJxdWFudGl0eSIsIm1lbW8iLCJlbWl0RXZlbnQiLCJ0cmFuc2NhbCIsImtoIiwianNvbkRhdGEiLCJhdXRob3JpdHkiLCJ0cngiLCJ0cmFuc2FjdGlvbl9pZCIsIm5ld0FjY291bnQiLCJhY3RpdmVLZXkiLCJvd25lcktleSIsImNyZWF0b3IiLCJ0cmFuc2FjdGlvbiIsInRyIiwibmV3YWNjb3VudCIsIm93bmVyIiwiYnV5cmFtYnl0ZXMiLCJwYXllciIsInJlY2VpdmVyIiwiZGVsZWdhdGVidyIsInN0YWtlX25ldF9xdWFudGl0eSIsInN0YWtlX2NwdV9xdWFudGl0eSIsImhlbHAiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwiZGVmYXVsdENvbmZpZyIsIm5vZGUiLCJjaGFpbklkIiwibW9ja1RyYW5zYWN0aW9ucyIsImV4cGlyZUluU2Vjb25kcyIsImJyb2FkY2FzdCIsInNpZ24iLCJ1cmxzIiwiTXVsdGlTb3VyY2VQbGF5ZXIiLCJjb25mIiwiX3VybHMiLCJfbm9kZUNvbmZpZ3MiLCJfY29uZiIsIl9fYXNzaWduIiwidXJsIiwiaHR0cEVuZHBvaW50IiwiX3JlZ2VuZXJhdG9yMiIsIkVvc0FwaSIsIlN0cnVjdHMiLCJBYmlDYWNoZSIsIndyaXRlQXBpR2VuIiwidG9rZW4iLCJzeXN0ZW0iLCJlb3Npb19udWxsIiwiY29uZmlnRGVmYXVsdHMiLCJsb2dnZXIiLCJfY29uc29sZSIsIl9jb25zb2xlMiIsImFwcGx5RGVmYXVsdHMiLCJuZXR3b3JrIiwiYWJpcyIsImdldEluZm8iLCJjaGFpbl9pZCIsImNhdGNoIiwiY2hlY2tDaGFpbklkIiwibW9jayIsIl9TdHJ1Y3RzIiwiZW9zIiwid3JpdGVBcGkiLCJvMSIsIm8yIiwidGhyb3dPbkR1cGxpY2F0ZSIsIm1lcmdlV3JpdGVGdW5jdGlvbnMiLCJyZWFkT25seSIsIlNldCIsInJlYWRXcml0ZSIsInByb3RlY3RlZENvbmZpZyIsInNhZmVDb25maWciLCJmYyIsInNpZ25Qcm92aWRlciIsImRlZmF1bHRTaWduUHJvdmlkZXIiLCJjcmVhdGVFb3MiLCJhcGkiLCJUZXN0bmV0IiwiTG9jYWxuZXQiLCJrZXlQcm92aWRlciIsInNpZ3MiLCJrZXlNYXAiLCJpc1ByaXZhdGUiLCJwdWJrZXlzIiwib3B0aW9uc0tleVByb3ZpZGVyIiwiYXN5bmMiLCJfY29udGV4dCIsInByZXYiLCJhd3JhcCIsInByaXZhdGUiLCJwdWJsaWMiLCJhYnJ1cHQiLCJNYXAiLCJwcml2YXRlVG9QdWJsaWMiLCJnZXRSZXF1aXJlZEtleXMiLCJyZXF1aXJlZF9rZXlzIiwicHZ0cyIsIm1pc3NpbmdLZXlzIiwicmVxdWlyZWRLZXkiLCJ3aWYiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCIsIl9kaWRJdGVyYXRvckVycm9yNCIsIl9pdGVyYXRvckVycm9yNCIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJfcHZ0Iiwic3RvcCIsImdsb2JhbE9iamVjdCIsIkJpZ051bWJlciIsImlzTnVtZXJpYyIsIm1hdGhjZWlsIiwibWF0aGZsb29yIiwiYmlnbnVtYmVyRXJyb3IiLCJ0b29NYW55RGlnaXRzIiwiQkFTRSIsIkxPR19CQVNFIiwiTUFYX1NBRkVfSU5URUdFUiIsIlBPV1NfVEVOIiwiU1FSVF9CQVNFIiwiTUFYIiwiYml0Rmxvb3IiLCJjb2VmZlRvU3RyaW5nIiwieiIsInhjIiwieWMiLCJpbnRDaGVjayIsImlzT2RkIiwidG9FeHBvbmVudGlhbCIsInRvRml4ZWRQb2ludCIsInpzIiwiY29uZmlnT2JqZWN0IiwiZGl2IiwiY29udmVydEJhc2UiLCJwYXJzZU51bWVyaWMiLCJERUNJTUFMX1BMQUNFUyIsIlJPVU5ESU5HX01PREUiLCJUT19FWFBfTkVHIiwiVE9fRVhQX1BPUyIsIk1JTl9FWFAiLCJNQVhfRVhQIiwiQ1JZUFRPIiwiTU9EVUxPX01PREUiLCJQT1dfUFJFQ0lTSU9OIiwiRk9STUFUIiwicHJlZml4IiwiZ3JvdXBTaXplIiwic2Vjb25kYXJ5R3JvdXBTaXplIiwiZ3JvdXBTZXBhcmF0b3IiLCJkZWNpbWFsU2VwYXJhdG9yIiwiZnJhY3Rpb25Hcm91cFNpemUiLCJmcmFjdGlvbkdyb3VwU2VwYXJhdG9yIiwic3VmZml4IiwiQUxQSEFCRVQiLCJhbHBoYWJldCIsImNhc2VDaGFuZ2VkIiwiaXNOdW0iLCJzZWFyY2giLCJERUJVRyIsInJtIiwiYzAiLCJuZSIsIm1heE9yTWluIiwibm9ybWFsaXNlIiwibmkiLCJyZCIsInBvd3MxMCIsIlJPVU5EX1VQIiwiUk9VTkRfRE9XTiIsIlJPVU5EX0NFSUwiLCJST1VORF9GTE9PUiIsIlJPVU5EX0hBTEZfVVAiLCJST1VORF9IQUxGX0RPV04iLCJST1VORF9IQUxGX0VWRU4iLCJST1VORF9IQUxGX0NFSUwiLCJST1VORF9IQUxGX0ZMT09SIiwiRVVDTElEIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiRVhQT05FTlRJQUxfQVQiLCJSQU5HRSIsImlzQmlnTnVtYmVyIiwiX2lzQmlnTnVtYmVyIiwibWF4aW11bSIsImx0IiwibWluaW11bSIsImd0IiwicmFuZG9tNTNiaXRJbnQiLCJkcCIsInJhbmQiLCJVaW50MzJBcnJheSIsInN1bSIsInBsdXMiLCJ0b0Jhc2VPdXQiLCJiYXNlSW4iLCJiYXNlT3V0IiwiYXJyTCIsImNhbGxlcklzVG9TdHJpbmciLCJiYXNlIiwidGVtcCIsInhsbyIsInhoaSIsImNhcnJ5Iiwia2xvIiwia2hpIiwiYUwiLCJiTCIsImNtcCIsInN1YnRyYWN0IiwibW9yZSIsInByb2QiLCJwcm9kTCIsInEiLCJxYyIsInJlbUwiLCJyZW0wIiwieEwiLCJ5YzAiLCJ5TCIsInl6IiwiYmFzZVByZWZpeCIsImRvdEFmdGVyIiwiZG90QmVmb3JlIiwiaXNJbmZpbml0eU9yTmFOIiwid2hpdGVzcGFjZU9yUGx1cyIsInAxIiwicDIiLCJhYnNvbHV0ZVZhbHVlIiwiY29tcGFyZWRUbyIsImRlY2ltYWxQbGFjZXMiLCJkaXZpZGVkQnkiLCJkaXZpZGVkVG9JbnRlZ2VyQnkiLCJpZGl2IiwiZXhwb25lbnRpYXRlZEJ5IiwiaGFsZiIsImlzTW9kRXhwIiwibklzQmlnIiwibklzTmVnIiwibklzT2RkIiwiaXNJbnRlZ2VyIiwibW9kIiwidGltZXMiLCJpbnRlZ2VyVmFsdWUiLCJpc0VxdWFsVG8iLCJlcSIsImlzR3JlYXRlclRoYW4iLCJpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvIiwiZ3RlIiwiaXNMZXNzVGhhbiIsImlzTGVzc1RoYW5PckVxdWFsVG8iLCJsdGUiLCJpc05lZ2F0aXZlIiwiaXNQb3NpdGl2ZSIsImlzWmVybyIsIm1pbnVzIiwieExUeSIsInhlIiwieWUiLCJtb2R1bG8iLCJtdWx0aXBsaWVkQnkiLCJ4Y0wiLCJ5Y0wiLCJ5bG8iLCJ5aGkiLCJ6YyIsInNxcnRCYXNlIiwibmVnYXRlZCIsInNoaWZ0ZWRCeSIsInNxdWFyZVJvb3QiLCJyZXAiLCJ0b0Zvcm1hdCIsImcxIiwiZzIiLCJpbnRQYXJ0IiwiZnJhY3Rpb25QYXJ0IiwiaXNOZWciLCJpbnREaWdpdHMiLCJ0b0ZyYWN0aW9uIiwibWQiLCJkMCIsImQxIiwiZDIiLCJleHAiLCJuMCIsIm4xIiwidG9OdW1iZXIiLCJ0b1ByZWNpc2lvbiIsImZvciIsImRiXzEiLCJwbGF5ZXJfMSIsIndhaXRfMSIsIkVSUl9HRVRfU0NBVFRFUl9GQUlMRUQiLCJFUlJfR0VUX0lERU5USVRZX0ZBSUxFRCIsIkVSUl9MT0dPVVRfRkFJTEVEIiwiRVJSX0NPTkZfTk9UX0ZPVU5EIiwiU2NhdHRlclBsYXllciIsIl9uZXR3b3JrcyIsImlkZW50aXR5UmVjZWl2ZXIiLCJzdG9yYWdlIiwibmV0d29ya19uYW1lIiwibGFuZyIsIm5ldE5hbWUiLCJuZXRDb25mIiwic3dpdGNoTmV0d29yayIsIl9lb3NDbGllbnQiLCJzZXROZXRDb25mIiwic2NhdHRlciIsImdldFNjYXR0ZXJBc3luYyIsIm1heFRyeSIsImxvZ2luIiwibG9nb3V0IiwiZm9yZ2V0SWRlbnRpdHkiLCJlcnJfMSIsImZpcnN0Q29sb24iLCJuZXh0Q29sb24iLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0IiwicmVjZWl2ZUluc3RhbmNlT3JFcnJvciIsIl9pZGVudGl0eSIsImlkZW50aXR5IiwiX3NjYXR0ZXIiLCJvcmlnaW5DaGFpbklEIiwiY2hhaW5JRCIsImZpbmQiLCJhY2MiLCJibG9ja2NoYWluIiwic2lnblBsdWdpbnMiLCJwZXJtaXNzaW9ucyIsInBlcm0iLCJwZXJtX25hbWUiLCJyZXF1aXJlZF9hdXRoIiwicHViS2V5cyIsInNpZ25QbHVnaW4iLCJhbGwiLCJhY2NTdHIiLCJzaWduS2V5UHJvdmlkZXIiLCJmaWx0ZXIiLCJjb252ZXJ0ZWQiLCJnZXRBcmJpdHJhcnlTaWduYXR1cmUiLCIkZXhwb3J0IiwicmVkZWZpbmUiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiSVRFUkFUT1IiLCJCVUdHWSIsInJldHVyblRoaXMiLCJDb25zdHJ1Y3RvciIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJtZXRob2RzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJlbnRyaWVzIiwidmFsdWVzIiwiRiIsImN0eCIsIm93biIsIklTX0ZPUkNFRCIsIklTX0dMT0JBTCIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwiQyIsInZpcnR1YWwiLCJSIiwiVSIsImlzIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImNvbnRlbnRXaW5kb3ciLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJ0b0lPYmplY3QiLCJuYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY3J5cHQiLCJub25jZSIsInRvTG9uZ09iaiIsImVidWYiLCJlbmNyeXB0aW9uX2tleSIsIml2IiwidG9CaW5hcnlCdWZmZXIiLCJkZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJjcnlwdG9Kc0RlY3J5cHQiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsImNyeXB0b0pzRW5jcnlwdCIsImVuY3J5cHQiLCJ1bmlxdWVfbm9uY2VfZW50cm9weSIsImxvbmciLCJvciIsInVuaXF1ZU5vbmNlIiwiZGVjcnlwdCIsImlzTG9uZyIsIm1zQ3J5cHRvIiwicmF3Qnl0ZXMiLCJtb2RlTW9kdWxlcyIsIkVDQiIsIkNCQyIsIkNGQiIsIkNGQjgiLCJDRkIxIiwiT0ZCIiwiQ1RSIiwiR0NNIiwibW9kZXMiLCJpbmNyMzIiLCJnZXRCbG9jayIsIl9jaXBoZXIiLCJfcHJldiIsImNodW5rTnVtIiwiX2NhY2hlIiwiYWVzIiwiR0hBU0giLCJTdHJlYW1DaXBoZXIiLCJjayIsIl9naGFzaCIsIl9maW5JRCIsImdoYXNoIiwidG9QYWQiLCJpdkJpdHMiLCJ0YWlsIiwiY2FsY0l2IiwiX3NlY0NhY2hlIiwiX2RlY3J5cHQiLCJfYWxlbiIsIl9tb2RlIiwiX2F1dGhUYWciLCJfY2FsbGVkIiwicnVtcCIsInhvclRlc3QiLCJFRSIsImRlc3QiLCJvbmRhdGEiLCJwYXVzZSIsIm9uZHJhaW4iLCJyZXN1bWUiLCJfaXNTdGRpbyIsIm9uY2xvc2UiLCJkaWRPbkVuZCIsIm9uZXJyb3IiLCJjbGVhbnVwIiwiUmVhZGFibGVTdGF0ZSIsIkVFbGlzdGVuZXJDb3VudCIsImRlYnVnVXRpbCIsImRlYnVnbG9nIiwiQnVmZmVyTGlzdCIsImtQcm94eUV2ZW50cyIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInJlYWRhYmxlSHdtIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwiX3JlYWQiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsImFkZENodW5rIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsInVuc2hpZnQiLCJpc1BhdXNlZCIsInNldEVuY29kaW5nIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibWF5YmVSZWFkTW9yZV8iLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0Iiwic2hpZnQiLCJoYXNTdHJpbmdzIiwiY29weUZyb21CdWZmZXJTdHJpbmciLCJjb3B5RnJvbUJ1ZmZlciIsImZyb21MaXN0UGFydGlhbCIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibk9yaWciLCJkb1JlYWQiLCJwaXBlT3B0cyIsImVuZEZuIiwic3Rkb3V0Iiwic3RkZXJyIiwidW5waXBlIiwib251bnBpcGUiLCJ1bnBpcGVJbmZvIiwiaGFzVW5waXBlZCIsIm9uZmluaXNoIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJpbmNyZWFzZWRBd2FpdERyYWluIiwiZXZlbnQiLCJkZXN0cyIsImV2IiwicGF1c2VkIiwiX2Zyb21MaXN0IiwiZW1pdEVycm9yTlQiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiX3RyYW5zZm9ybVN0YXRlIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJ0cyIsInRyYW5zZm9ybWluZyIsIndyaXRlY2h1bmsiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsInRyYW5zZm9ybSIsImZsdXNoIiwiX3RoaXMyIiwicGFzc3dvcmQiLCJzYWx0Iiwia2V5Qml0cyIsIml2TGVuIiwia2V5TGVuIiwidG1wIiwidXNlZCIsImtleVN0YXJ0IiwiaXZTdGFydCIsIl9maW5hbGl6ZWQiLCJ0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIiLCJUSFJFRSIsImN1cnZlIiwiX3pJbnYiLCJtb2RJbnZlcnNlIiwiekludiIsIm90aGVyIiwic2lnbnVtIiwieDEiLCJ5MSIsInUiLCJ0d2ljZSIsImluZmluaXR5IiwidjIiLCJzcXVhcmUiLCJ2MyIsIngxdjIiLCJ6dTIiLCJ4MyIsInkzIiwiejMiLCJ5MXoxIiwieTFzcXoxIiwidyIsIm5lZyIsImJpdExlbmd0aCIsImhCaXQiLCJ0ZXN0Qml0IiwiZUJpdCIsIm11bHRpcGx5VHdvIiwiYm90aCIsImpCaXQiLCJrQml0IiwiYWZmaW5lWSIsInBMZW5ndGgiLCJpc0V2ZW4iLCJwb2ludEZyb21YIiwiX19iaWdpIiwiY2hlY2tfdmVyIiwiYW0iLCJEQiIsIkRNIiwiRFYiLCJGViIsIkYxIiwiQklfRlAiLCJGMiIsInJyIiwidnYiLCJCSV9STSIsIkJJX1JDIiwiaW50MmNoYXIiLCJpbnRBdCIsIm5idiIsImZyb21JbnQiLCJuYml0cyIsIkNsYXNzaWMiLCJNb250Z29tZXJ5IiwibXAiLCJpbnZEaWdpdCIsIm1wbCIsIm1waCIsInVtIiwibXQyIiwib3BfYW5kIiwib3Bfb3IiLCJvcF94b3IiLCJvcF9hbmRub3QiLCJsYml0IiwiY2JpdCIsIk51bGxFeHAiLCJuTm9wIiwiQmFycmV0dCIsInIyIiwicTMiLCJkbFNoaWZ0VG8iLCJtdSIsImRpdmlkZSIsImNvbnZlcnQiLCJyZXZlcnQiLCJyZWR1Y2UiLCJkaXZSZW1UbyIsIm11bFRvIiwibXVsdGlwbHlUbyIsInNxclRvIiwic3F1YXJlVG8iLCJaRVJPIiwic3ViVG8iLCJ1MCIsImNsYW1wIiwiZHJTaGlmdFRvIiwiZnJvbVJhZGl4IiwibWkiLCJzaCIsImxTaGlmdFRvIiwiYnMiLCJjYnMiLCJibSIsImRzIiwiclNoaWZ0VG8iLCJwbSIsInB0IiwibnNoIiwieXMiLCJ5MCIsInl0IiwicWQiLCJ0b1JhZGl4Iiwia20iLCJtb2RQb3dJbnQiLCJtdWx0aXBseVVwcGVyVG8iLCJtdWx0aXBseUxvd2VyVG8iLCJkQWRkT2Zmc2V0IiwibG93cHJpbWVzIiwibHBsaW0iLCJjaHVua1NpemUiLCJpbnRWYWx1ZSIsImRNdWx0aXBseSIsImJpdHdpc2VUbyIsImlzUHJvYmFibGVQcmltZSIsIm5leHRCeXRlcyIsIm9wIiwiY2hhbmdlQml0IiwiYWRkVG8iLCJtb2RJbnQiLCJtaWxsZXJSYWJpbiIsImdldExvd2VzdFNldEJpdCIsImJhc2VzIiwibW9kUG93IiwiYnl0ZVZhbHVlIiwic2hvcnRWYWx1ZSIsImFuZE5vdCIsIm5vdCIsImJpdENvdW50Iiwic2V0Qml0IiwiY2xlYXJCaXQiLCJmbGlwQml0IiwiZGl2aWRlQW5kUmVtYWluZGVyIiwiazEiLCJpczEiLCJhYyIsImdjZCIsIkd4IiwiR3kiLCJwT3ZlckZvdXIiLCJiZXRhIiwiaXNPbkN1cnZlIiwibGhzIiwicmhzIiwidmFsaWRhdGUiLCJuUSIsInpsIiwienIiLCJzbCIsInNyIiwiaHIiLCJmbjEiLCJmbjIiLCJmbjMiLCJmbjQiLCJmbjUiLCJ3b3JkcyIsImFsIiwiYmwiLCJjbCIsImRsIiwiZWwiLCJhciIsImJyIiwiY3IiLCJkciIsInRsIiwiYWxnb3JpdGhtIiwiQWxnb3JpdGhtIiwic2hhMjI0Iiwic2hhMzg0IiwiSyIsIlNoYTI1NiIsImluaXQiLCJfdyIsIm1haiIsInNpZ21hMCIsInNpZ21hMSIsImdhbW1hMCIsImdhbW1hMSIsIl9mIiwiX2ciLCJfaCIsIlQxIiwiVDIiLCJIIiwiU2hhNTEyIiwiQ2giLCJ4bCIsIkdhbW1hMCIsIkdhbW1hMGwiLCJHYW1tYTEiLCJHYW1tYTFsIiwiZ2V0Q2FycnkiLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJhaCIsImJoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImZsIiwiZ2wiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwiZWNkc2EiLCJ2ZXJpZnkiLCJ2ZXJpZnlIYXNoIiwiZGF0YVNoYTI1NiIsInJlY292ZXIiLCJyZWNvdmVySGFzaCIsInJlY292ZXJQdWJLZXkiLCJzaWduYXR1cmVDYWNoZSIsInZlcmlmeUhleCIsInZlcmlmeUJ1ZmZlciIsInJlY292ZXJQdWJsaWNLZXkiLCJyZWNvdmVyUHVibGljS2V5RnJvbUJ1ZmZlciIsInNpZ25IYXNoIiwiZGVyIiwiZWNzaWduYXR1cmUiLCJsZW5SIiwibGVuUyIsInRvREVSIiwiY2FsY1B1YktleVJlY292ZXJ5UGFyYW0iLCJhcGlHZW4iLCJwcm9jZXNzQXJncyIsImRlZlBhcmFtcyIsIm1ldGhvZE5hbWUiLCJvcHRpb25zRm9ybWF0dGVyIiwicGFyYW1zIiwiZXhwZWN0ZWRBcmdDb3VudCIsImNhbGxiYWNrQXJnIiwicmV0dXJuUHJvbWlzZSIsImRlZlBhcmFtIiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIlVMb25nIiwiZW5jb2RlTmFtZUhleCIsImRlY29kZU5hbWVIZXgiLCJEZWNpbWFsU3RyaW5nIiwiZG90SWR4IiwiX3N0ciRzcGxpdCIsImFtb3VudE1hdGNoIiwicHJlY2lzaW9uTWF0Y2giLCJwcmVjaXNpb25TeW1ib2wiLCJwcmVjaXNpb25BbW91bnQiLCJzeW1ib2xNYXRjaCIsIl9zdHIkc3BsaXQzIiwiX3N0ciRzcGxpdDQkIiwiY29udHJhY3RSYXciLCJyYWRpeCIsImNoYXJtYXAiLCJjaGFyaWR4IiwiYml0c3RyIiwiYml0bGVuIiwibGVIZXgiLCJ0b0J5dGVzTEUiLCJ0b0J5dGVzQkUiLCJiZUhleCIsImZpdmVCaXRzIiwiZm91ckJpdHMiLCJwYXJ0IiwibnVtIiwiZTEiLCJlMiIsIl92YWwiLCJfc3ltIiwiX2RlY2ltYWwiLCJkZWNpbWFsIiwidmFsU3RyIiwiYXNzZXRTdHIiLCJibGFua1BvcyIsInN0clZhbCIsInN0clN5bSIsImRlY2ltYWxQb3MiLCJwYXJzZUZsb2F0Iiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJsb2FkRXZlbnQiLCJ4RG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwiQXV0aG9yaXphdGlvbiIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwic3RhdHVzVGV4dCIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsImNhbmNlbCIsImFib3J0IiwiZW5oYW5jZUVycm9yIiwiX19DQU5DRUxfXyIsIkNhbmNlbCIsImluc3RhbmNlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm9taXNpZnlSZXF1ZXN0Iiwib25zdWNjZXNzIiwicHJvbWlzaWZ5UmVxdWVzdENhbGwiLCJwcm94eVByb3BlcnRpZXMiLCJQcm94eUNsYXNzIiwidGFyZ2V0UHJvcCIsInByb3BlcnRpZXMiLCJwcm9wIiwicHJveHlSZXF1ZXN0TWV0aG9kcyIsInByb3h5TWV0aG9kcyIsInByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMiLCJDdXJzb3IiLCJwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbCIsIkluZGV4IiwiX2luZGV4IiwiY3Vyc29yIiwiX2N1cnNvciIsIl9yZXF1ZXN0IiwiT2JqZWN0U3RvcmUiLCJfc3RvcmUiLCJUcmFuc2FjdGlvbiIsImlkYlRyYW5zYWN0aW9uIiwiX3R4IiwiY29tcGxldGUiLCJvbmNvbXBsZXRlIiwib25hYm9ydCIsIlVwZ3JhZGVEQiIsImRiIiwib2xkVmVyc2lvbiIsIl9kYiIsIklEQkluZGV4IiwiSURCQ3Vyc29yIiwiY3JlYXRlSW5kZXgiLCJJREJPYmplY3RTdG9yZSIsIm9iamVjdFN0b3JlIiwiSURCVHJhbnNhY3Rpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsIklEQkRhdGFiYXNlIiwiZnVuY05hbWUiLCJ0b0FycmF5IiwibmF0aXZlT2JqZWN0IiwiZ2V0QWxsIiwicXVlcnkiLCJpdGVtcyIsIml0ZXJhdGVDdXJzb3IiLCJjb250aW51ZSIsInVwZ3JhZGVDYWxsYmFjayIsImluZGV4ZWREQiIsIm9udXBncmFkZW5lZWRlZCIsImRlbGV0ZSIsImVvc05vZGVDb25maWdzIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsInVzZXJBZ2VudCIsImVvc2pzIiwiZW9zanNfZWNjIiwiaWRiIiwiZW9zcGxheWVyIiwiU2lnblBsYXllciIsIlJlYWRpbmdQbGF5ZXIiLCJQbHVnaW5zIiwibXlrZXkiLCJNeWtleVBsdWdpbiIsImhhZFJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJvbGRSdW50aW1lIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsInNldFByb3RvdHlwZU9mIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiaXRlciIsIkNvbnRleHQiLCJza2lwVGVtcFJlc2V0IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJpdGVyYWJsZSIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwidW53cmFwcGVkIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwidG9JbnRlZ2VyIiwiVE9fU1RSSU5HIiwiYUZ1bmN0aW9uIiwiZ2V0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJkb2N1bWVudEVsZW1lbnQiLCJPYmplY3RQcm90byIsImFkZFRvVW5zY29wYWJsZXMiLCJzdGVwIiwiX2siLCJBcmd1bWVudHMiLCJERVNDUklQVE9SUyIsIk1FVEEiLCJLRVkiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsImdPUE5FeHQiLCIkR09QRCIsIiREUCIsImdPUEQiLCJnT1BOIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiaXNFbnVtIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwiRCIsInByb3RvRGVzYyIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImdPUFMiLCJwSUUiLCJnZXRTeW1ib2xzIiwic3ltYm9scyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJzZWVkUHJpdmF0ZSIsImlzVmFsaWRQdWJsaWMiLCJpc1ZhbGlkUHJpdmF0ZSIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJ0cmlwbGV0VG9CYXNlNjQiLCJvdXRwdXQiLCJfX2lzTG9uZ19fIiwiSU5UX0NBQ0hFIiwiVUlOVF9DQUNIRSIsImNhY2hlZE9iaiIsIlVaRVJPIiwiVFdPX1BXUl82NF9EQkwiLCJNQVhfVU5TSUdORURfVkFMVUUiLCJUV09fUFdSXzYzX0RCTCIsIk1JTl9WQUxVRSIsIk1BWF9WQUxVRSIsIlRXT19QV1JfMzJfREJMIiwicG93X2RibCIsInJhZGl4VG9Qb3dlciIsInBvd2VyIiwiZnJvbVZhbHVlIiwiVFdPX1BXUl8xNl9EQkwiLCJUV09fUFdSXzI0IiwiVU9ORSIsIk5FR19PTkUiLCJMb25nUHJvdG90eXBlIiwicmFkaXhMb25nIiwicmVtMSIsInJlbURpdiIsImRpZ2l0cyIsImdldEhpZ2hCaXRzIiwiZ2V0SGlnaEJpdHNVbnNpZ25lZCIsImdldExvd0JpdHMiLCJnZXRMb3dCaXRzVW5zaWduZWQiLCJnZXROdW1CaXRzQWJzIiwibm90RXF1YWxzIiwibmVxIiwibGVzc1RoYW4iLCJjb21wIiwibGVzc1RoYW5PckVxdWFsIiwiZ3JlYXRlclRoYW4iLCJncmVhdGVyVGhhbk9yRXF1YWwiLCJ0aGlzTmVnIiwib3RoZXJOZWciLCJhZGRlbmQiLCJhNDgiLCJhMzIiLCJhMTYiLCJhMDAiLCJiNDgiLCJiMzIiLCJiMTYiLCJjNDgiLCJjMzIiLCJjMTYiLCJjMDAiLCJzdWJ0cmFoZW5kIiwibXVsdGlwbGllciIsImIwMCIsImRpdmlzb3IiLCJhcHByb3giLCJzaHJ1Iiwic2hyIiwic2hsIiwiYXBwcm94UmVzIiwiYXBwcm94UmVtIiwibnVtQml0cyIsInRvQnl0ZXMiLCJsZSIsImNpcGhlcnMiLCJkZWNpcGhlcnMiLCJjcmVhdGVDaXBoZXIiLCJDaXBoZXIiLCJDaXBoZXJpdiIsImNyZWF0ZURlY2lwaGVyIiwiRGVjaXBoZXIiLCJEZWNpcGhlcml2IiwibGlzdENpcGhlcnMiLCJnZXRDaXBoZXJzIiwiTU9ERVMiLCJBdXRoQ2lwaGVyIiwiZWJ0ayIsIlNwbGl0dGVyIiwiX2F1dG9wYWRkaW5nIiwidGhpbmciLCJQQURESU5HIiwic3VpdGUiLCJzZXRUbyIsInBhZEJ1ZmYiLCJlbmNyeXB0U3RhcnQiLCJlbmNyeXB0Qnl0ZSIsImJ5dGVQYXJhbSIsInNoaWZ0SW4iLCJjb3B5QnVmZmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiY3VzdG9tIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwiYXR0YWNoRXZlbnQiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsIk1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImh0bWwiLCJyZW1vdmVDaGlsZCIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJ0YXNrIiwibG9jYWxTdG9yYWdlIiwiWkVST0VTIiwiZnJvbUFycmF5IiwiX211bHRpcGx5IiwibHNiVmkiLCJWaSIsIlppIiwiYWJsIiwiX2xhc3QiLCJwYWRkZWQiLCJ1bnBhZCIsImF1dG9QYWRkaW5nIiwiZm9ybWF0UmVnRXhwIiwib2JqZWN0cyIsIm5vRGVwcmVjYXRpb24iLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsIm9wdHMiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJzaG93SGlkZGVuIiwiY3VzdG9tSW5zcGVjdCIsInN0eWxpemVXaXRoQ29sb3IiLCJmb3JtYXRWYWx1ZSIsInN0eWxlVHlwZSIsInN0eWxlcyIsInJlY3Vyc2VUaW1lcyIsInByaW1pdGl2ZSIsInNpbXBsZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiYXJyYXlUb0hhc2giLCJmb3JtYXRFcnJvciIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsImN1ciIsIm51bUxpbmVzRXN0IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJkZXNjIiwibGluZSIsIk5PREVfREVCVUciLCJwaWQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsIndoaXRlIiwiZ3JleSIsImJsYWNrIiwiYmx1ZSIsImN5YW4iLCJncmVlbiIsIm1hZ2VudGEiLCJyZWQiLCJ5ZWxsb3ciLCJzcGVjaWFsIiwibnVtYmVyIiwiYm9vbGVhbiIsIm51bGwiLCJkYXRlIiwicmVnZXhwIiwibW9udGhzIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJ0aW1lc3RhbXAiLCJvcmlnaW4iLCJmcm9tQnl0ZUFycmF5VW5zaWduZWQiLCJ0b0J5dGVBcnJheVVuc2lnbmVkIiwiZnJvbURFUkludGVnZXIiLCJ0b0RFUkludGVnZXIiLCJ6ZXJvcyIsInBhZGRpbmciLCJjdXJ2ZXMiLCJTaGEiLCJyb3RsNSIsInJvdGwzMCIsImZ0IiwiU2hhMSIsInJvdGwxIiwiU2hhMjI0IiwiU0hBNTEyIiwiU2hhMzg0IiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsImJhc2V4IiwiQUxQSEFCRVRfTUFQIiwiTEVBREVSIiwiZGVjb2RlVW5zYWZlIiwiZW5mb3JjZVR5cGUiLCJFQ1NpZ25hdHVyZSIsImRldGVybWluaXN0aWNHZW5lcmF0ZUsiLCJjaGVja1NpZyIsInZlcmlmeVJhdyIsInUxIiwidTIiLCJpc1lPZGQiLCJuUiIsImVOZWciLCJySW52IiwiTl9PVkVSX1RXTyIsInJCYSIsInNCYSIsInNlcXVlbmNlIiwidG9Db21wYWN0IiwidG9TY3JpcHRTaWduYXR1cmUiLCJoYXNoVHlwZSIsImhhc2hUeXBlQnVmZmVyIiwicGFyc2VDb21wYWN0IiwiZnJvbURFUiIsInJMZW4iLCJzTGVuIiwickIiLCJzQiIsInBhcnNlU2NyaXB0U2lnbmF0dXJlIiwiaGFzaFR5cGVNb2QiLCJBZXMiLCJrZXlfdXRpbHMiLCJCTiIsImJ5dGVidWYiLCJfc3RyaW5nIiwidmVjdG9yIiwic29ydGVkIiwiX3ZlY3RvciIsIm9wdGlvbmFsIiwiX29wdGlvbmFsIiwiX3RpbWUyIiwiYW5ub3RhdGlvbiIsIl9tYXAiLCJfc3RhdGljX3ZhcmlhbnQiLCJmaXhlZF9zdHJpbmcxNiIsIm1heExlbiIsImZpeGVkX3N0cmluZzMyIiwiZml4ZWRfYnl0ZXMxNiIsImZpeGVkX2J5dGVzMjAiLCJmaXhlZF9ieXRlczI4IiwiZml4ZWRfYnl0ZXMzMiIsImZpeGVkX2J5dGVzMzMiLCJmaXhlZF9ieXRlczY0IiwiaW50YnVmIiwidWludDE2IiwidWludDMyIiwidWludDY0IiwidWludDEyOCIsImJuYnVmIiwidWludDIyNCIsInVpbnQyNTYiLCJ1aW50NTEyIiwidmFydWludDMyIiwidmFyaWFibGUiLCJpbnQ4Iiwic2lnbmVkIiwiaW50MTYiLCJpbnQzMiIsImludDEyOCIsImludDIyNCIsImludDI1NiIsImludDUxMiIsInZhcmludDMyIiwiZmxvYXQzMiIsImZsb2F0IiwiZmxvYXQ2NCIsImFsbFR5cGVzIiwiY3JlYXRlVHlwZVJlZHVjZXIiLCJfVHlwZSIsIl9UeXBlMiIsIl9UeXBlMiQiLCJjcmVhdGVUeXBlIiwiX3ZhbGlkYXRpb24kYW5ub3RhdGlvIiwidHlwZTEiLCJ0eXBlMiIsImlzU2VyaWFsaXplciIsInZhbHVlMiIsIl9kZWZpbmVQcm9wZXJ0eSIsInR5cGVQb3NpdGlvbiIsImludGJ1ZlR5cGUiLCJfcmVmMiRzaWduZWQiLCJ2YWxpZGF0ZUludCIsIl92YWxpZGF0aW9uJHNpZ25lZCIsImJuIiwidG9BcnJheUxpa2UiLCJmcm9tVHdvcyIsInRvVHdvcyIsImZsb2F0UG9pbnQiLCJzaXplTmFtZSIsImZiIiwidG9JU09TdHJpbmciLCJzcHJlYWQiLCJpbnQiLCJpc0VtcHR5IiwiX3ZhbGlkYXRpb24kc2lnbmVkMiIsIl92YWxpZGF0aW9uJGJpdHMiLCJtYXhTaWduZWQiLCJtYXhVbnNpZ25lZCIsIm1pblNpZ25lZCIsImlzaGxuIiwiaXN1YiIsImluZWciLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJfaW5pdCIsIndvcmRTaXplIiwicGFyc2VIZXgiLCJwYXJzZUJhc2UiLCJsZWZ0IiwicmlnaHQiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwic3RyaXAiLCJsaW1iTGVuIiwibGltYlBvdyIsIndvcmQiLCJpbXVsbiIsIl9pYWRkbiIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInNtYWxsTXVsVG8iLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJncm91cEJhc2UiLCJtb2RuIiwiaWRpdm4iLCJBcnJheVR5cGUiLCJyZXFMZW5ndGgiLCJhbmRsbiIsIml1c2hybiIsImNsejMyIiwiX2NvdW50Qml0cyIsIl96ZXJvQml0cyIsInplcm9CaXRzIiwiaW5vdG4iLCJpYWRkbiIsInRlc3RuIiwibm90biIsIml1b3IiLCJpb3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwid2JpdCIsImlhZGQiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwiaG5jYXJyeSIsImJpZ011bFRvIiwibWFrZVJCVCIsIk4iLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInJ0d2RmIiwiY29zIiwiUEkiLCJpdHdkZiIsInJ0d2RmXyIsIml0d2RmXyIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImhpbnQiLCJleHRlbmRlZCIsIm1hc2siLCJtYXNrZWRXb3JkcyIsImlzaHJuIiwic2hsbiIsInVzaGxuIiwic2hybiIsInVzaHJuIiwiaW1hc2tuIiwibWFza24iLCJpc3VibiIsImFkZG4iLCJzdWJuIiwiaWFicyIsIl9pc2hsbnN1Ym11bCIsIl93b3JkRGl2IiwiYmhpIiwicWoiLCJkaXZtb2QiLCJwb3NpdGl2ZSIsImRpdm4iLCJ1bW9kIiwiZGl2Um91bmQiLCJkbSIsImVnY2QiLCJBIiwieXAiLCJ4cCIsImltIiwiam0iLCJfaW52bXAiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0ZW4iLCJsdG4iLCJsdGVuIiwiZXFuIiwiUmVkIiwidG9SZWQiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInJlZEludm0iLCJyZWROZWciLCJyZWRQb3ciLCJwcmltZXMiLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJNUHJpbWUiLCJfdG1wIiwiSzI1NiIsIlAyMjQiLCJQMTkyIiwiUDI1NTE5IiwicHJpbWUiLCJfcHJpbWUiLCJNb250IiwiaW1vZCIsInJpbnYiLCJtaW52IiwiaXJlZHVjZSIsInJsZW4iLCJpbXVsSyIsImlucHV0Iiwib3V0TGVuIiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwiaW52Iiwid25kIiwiY3VycmVudExlbiIsIm1vbnQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJwYXRocyIsInJlYWRGbG9hdDMyQXJyYXkiLCJ3cml0ZUZsb2F0MzJBcnJheSIsInJlYWRGbG9hdDMyQXJyYXlSZXYiLCJ3cml0ZUZsb2F0MzJBcnJheVJldiIsInJlYWRGbG9hdDY0QXJyYXkiLCJ3cml0ZUZsb2F0NjRBcnJheSIsInJlYWRGbG9hdDY0QXJyYXlSZXYiLCJ3cml0ZUZsb2F0NjRBcnJheVJldiIsImlzQmlnZUNwdSIsInJlYWRXb3JkIiwib2ZmcyIsImRpcm4iLCJ3cml0ZVdvcmQiLCJ3cml0ZURvdWJsZVdvcmQiLCJfZnAzMiIsIl9iMzIiLCJfZnA2NCIsIl9iNjQiLCJfMmVYcCIsIl8yZVhuIiwicG93MiIsIl9sc2hpZnQzMiIsIl9yc2hpZnQ1MiIsImhpZ2hXb3JkIiwibG93V29yZCIsIm1hbnRpc3NhIiwiZXhwb25lbnQiLCJfcnNoaWZ0MjMiLCJfcnNoaWZ0MTI3IiwiX3BhcnRzIiwibWFudCIsIm5vcm1hbGl6ZSIsImNvdW50RG91YmxpbmdzIiwiXzJlMTkyIiwicm91bmRNYW50aXNzYSIsInNjYWxlIiwibm9ybSIsIl8yZTUyIiwiaW5zdGFsbCIsIl91c2VGbG9hdEFycmF5IiwieWVzbm8iLCJfdXNpbmdGbG9hdEFycmF5IiwiX2dldEJpZ2VDcHUiLCJfc2V0QmlnZUNwdSIsIlN0cnVjdCIsInR5cGVPZlZhbHVlIiwiZmllbGQiLCJfdmFsdWUiLCJfa2V5MiIsIl92YWx1ZTIiLCJnZXRUeXBlT3JTdHJ1Y3QiLCJfa2V5MyIsInRoaXNTdHJ1Y3QiLCJfdmFsdWUzIiwiYmFzZVN0cnVjdCIsInN0cnVjdFB0ciIsInR5cGVBcmdzIiwiZmllbGROYW1lIiwidHlwZWF0dHkiLCJwYXJzZVR5cGUiLCJhcnJheVR5cGUiLCJfdHlwZSIsImFublR5cGVzIiwiYW5uVHlwZU5hbWUiLCJhbm5UeXBlIiwiZmllbGRTdHJ1Y3QiLCJfdHlwZTIiLCJuYW1lVHlwZSIsImFycmF5VHMiLCJiYXNlVHMiLCJfa2V5NCIsIl90aGlzU3RydWN0IiwiX3ZhbHVlNCIsIkZpZWxkIiwidG9CeXRlQnVmZmVyIiwiYW5ub3RhdGlvbk1hdGNoIiwiYXJyYXlNYXRjaCIsImZpZWxkT25lIiwiZmllbGRPbmVOYW1lIiwidjEiLCJzZXJpYWxpemVkT2JqZWN0IiwiZnJvbU9iamVjdF9zdHJ1Y3QiLCJfb2JqZWN0IiwidG9PYmplY3Rfc3RydWN0IiwiX29iamVjdDIiLCJjYW1lbENhc2UiLCJoZWxwZXJzIiwiZmV0Y2hNZXRob2QiLCJkZWZpbml0aW9uIiwiX2xlbjIiLCJwcm9jZXNzZWRBcmdzIiwib3B0aW9uIiwiYm9keSIsImZldGNoQ29uZmlndXJhdGlvbiIsImZldGNoIiwiYm9keVJlc3AiLCJvYmplY3RSZXNwIiwiY2FsbGJhY2tFcnJvciIsImRldGFpbHMiLCJ1c2FnZSIsImJyaWVmIiwicmVzdWx0cyIsImVycm9yRGVzYyIsImFwaUdyb3VwIiwiYXBpTWV0aG9kIiwiX2xvb3AiLCJoZWxwZXIiLCJfaGVscGVycyRhcGkiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiSGVhZGVycyIsIlJlcXVlc3QiLCJSZXNwb25zZSIsIkRPTUV4Y2VwdGlvbiIsInN1cHBvcnQiLCJzZWFyY2hQYXJhbXMiLCJibG9iIiwiQmxvYiIsImZvcm1EYXRhIiwiYXJyYXlCdWZmZXIiLCJ2aWV3Q2xhc3NlcyIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaGVhZGVyIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsIm9ubG9hZCIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJ1ZmZlckNsb25lIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsIl9ib2R5QmxvYiIsIl9ib2R5Rm9ybURhdGEiLCJpc0RhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwicmVhZEFzVGV4dCIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFycmF5QnVmZmVyQXNUZXh0Iiwib2xkVmFsdWUiLCJjcmVkZW50aWFscyIsInNpZ25hbCIsInVwY2FzZWQiLCJub3JtYWxpemVNZXRob2QiLCJyZWZlcnJlciIsImZvcm0iLCJkZWNvZGVVUklDb21wb25lbnQiLCJib2R5SW5pdCIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsImFib3J0ZWQiLCJ4aHIiLCJhYm9ydFhociIsInJhd0hlYWRlcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicG9seWZpbGwiLCJ1cHBlckNhc2UiLCJub0Nhc2UiLCJsb2NhbGUiLCJtZXJnZU51bWJlcnMiLCIkMSIsIkxBTkdVQUdFUyIsImF6IiwiacyHIiwiasyHIiwixK/MhyIsImnMh8yAIiwiacyHzIEiLCJpzIfMgyIsImxvd2VyQ2FzZSIsIk5PTl9XT1JEX1JFR0VYUCIsIkNBTUVMX0NBU0VfUkVHRVhQIiwiQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAiLCJyZXBsYWNlbWVudCIsIsSwIiwiSSIsIknMhyIsIkoiLCLEriIsIsOMIiwiw40iLCLEqCIsImNyZWF0ZVRyYW5zYWN0aW9uIiwiY2hlY2tFcnJvciIsImNoYWluRGF0ZSIsImhlYWRfYmxvY2tfdGltZSIsImxhc3RfaXJyZXZlcnNpYmxlX2Jsb2NrX251bSIsImV4cGlyYXRpb24iLCJyZWZfYmxvY2tfbnVtIiwicmVmX2Jsb2NrX3ByZWZpeCIsIm1heF9uZXRfdXNhZ2Vfd29yZHMiLCJtYXhfY3B1X3VzYWdlX21zIiwiZGVsYXlfc2VjIiwiY29udGV4dF9mcmVlX2FjdGlvbnMiLCJzaWduYXR1cmVzIiwidHJhbnNhY3Rpb25fZXh0ZW5zaW9ucyIsInBhcmVudEVyciIsInBhcnJlbnRSZXMiLCJjbGFzc29mIiwiaXNJdGVyYWJsZSIsImdldEl0ZXJhdG9yIiwiaXRlckZuIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhYmlBc3luYyIsImZvcmNlIiwiX2FiaSIsImdldEFiaSIsImFiaUNhY2hlQ29uZmlnIiwiZmNTY2hlbWEiLCJhYmlTY2hlbWEiLCJuZXdfdHlwZV9uYW1lIiwiYWJpVG9GY1NjaGVtYSIsIk5ldHdvcmsiLCJnZW5UcmFuc2FjdGlvbiIsImNvbnRyYWN0cyIsImlzQ29udHJhY3RBcnJheSIsImFiaVByb21pc2VzIiwiY2FjaGVkQ29kZSIsImNvbnRyYWN0UHJvbWlzZXMiLCJpc1N0cmluZ0FycmF5IiwiZ2VuQ29udHJhY3RBY3Rpb25zIiwibWVyZ2VzIiwicGFyYW0iLCJ0ck1lc3NhZ2VDb2xsZWN0b3IiLCJjb250cmFjdE1lcmdlIiwic2NoZW1hRmllbGRzIiwiZ2VuTWV0aG9kIiwidHJhbnNhY3Rpb25BcmciLCJfbGVuMyIsIm9wdGlvbk92ZXJyaWRlcyIsImxhc3RBcmciLCJfX29wdGlvbk92ZXJyaWRlcyIsIm9wdGlvbkRlZmF1bHRzIiwibm9DYWxsYmFjayIsImF1dGhvcml6YXRpb24iLCJwcm92aWRlZEF1dGgiLCJhZGREZWZhdWx0QXV0aHMiLCJhdXRoQXJyYXkiLCJfYXV0aCRzcGxpdCIsIl9hdXRoJHNwbGl0MiIsIl9hdXRoJHNwbGl0MiQiLCJmaXJzdEFjY291bnQiLCJtZXNzYWdlT25seSIsImZpZWxkS2V5cyIsImYxIiwidHJDYWxsYmFjayIsIm1lc3NhZ2VMaXN0IiwibWVzc2FnZUNvbGxlY3RvciIsIm9wRnVuY3Rpb24iLCJfbGVuNCIsInZhcmlhYmxlTmFtZSIsImtleTIiLCJwcm9taXNlQ29sbGVjdG9yIiwicmVzb2x2ZWRNZXNzYWdlTGlzdCIsIl9tJGFjdGlvbnMiLCJ0ck9iamVjdCIsImRlZmF1bHRFeHBpcmF0aW9uIiwib3B0aW9uRGVmYXVsdCIsInN1cGVyQ2FsbGJhY2siLCJyYXdUeCIsInR4RmllbGQiLCJ0eE9iamVjdCIsInRyYW5zYWN0aW9uSWQiLCJjaGFpbklkQnVmIiwicGFja2VkQ29udGV4dEZyZWVEYXRhIiwic2lnbkJ1ZiIsIl9jb250ZXh0NCIsInRyYW5zYWN0aW9uSGVhZGVycyIsIl9jb250ZXh0MiIsIl9hcnIyIiwiX2kyIiwiX2NvbnRleHQzIiwic2lnIiwicGFja2VkVHIiLCJjb21wcmVzc2lvbiIsInB1c2hUcmFuc2FjdGlvbiIsInByb2Nlc3NlZFRyYW5zYWN0aW9uIiwibW9ja1RyYW5zYWN0aW9uIiwiV3JpdGVBcGkiLCJyZXNlcnZlRnVuY3Rpb25zIiwidHlwZVN0cnVjdCIsIl9wcm9jZXNzQXJncyIsImZpbmRJbmRleCIsIl9zY2hlbWEkdHlwZSIsImFjcm9lb3MiLCJhbG9oYWVvcyIsImF0dGljbGFiIiwiZ2VuZXJlb3MiLCJibG9ja21hdHJpeCIsImNoYWlucmlmdCIsImVvc2lvIiwiY3J5cHRvbGlvbnMiLCJjeXBoZXJnbGFzcyIsImVvczQyIiwiZW9zYW1zdGVyZGFtIiwiZW9zYXNpYSIsImVvc2F1dGhvcml0eSIsImVvc2JlYW4iLCJlb3NiZWlqaW5nIiwiZW9zYml4aW4iLCJlb3NjYWZlYmxvY2siLCJlb3NjYW5hZGEiLCJlb3NjYW5ub24iLCJlb3NjbGVhbmVyIiwiZW9zZGFjIiwiZW9zZHVibGluIiwiZW9zZW91bCIsImVvc2Zlbmd3byIsImVvc2ZsYXJlIiwiZ2VuZXNpc19taW5pbmciLCJlb3NkZXRyb2l0IiwibWVldCIsImVvc2dyYXZpdHkiLCJlb3NsYW9tYW8iLCJlb3NtZXRhbCIsIm1pbmVyZ2F0ZSIsIm1pbmVyZ2F0ZV9icCIsImVvc24iLCJlb3NuZXd5b3JrIiwiZW9zbm9kZW9uZSIsImVvc3BhY2V4Iiwibm9kZXBhY2lmaWMiLCJlb3NyaW8iLCJlb3Nzd2VkZW4iLCJlb3N0aXRhbiIsImVvc3RyaWJlIiwiZW9zdm9sZ2EiLCJlb3N3ZWIiLCJlb3N5cyIsImZyYW5jZW9zIiwiZW9zYmxvY2tidXN0ZXIiLCJqZWRhIiwib3JhY2xlY2hhaW4iLCJzaGVvcyIsImVvc2dlbmV2YSIsImdyZXltYXNzIiwiemJlb3MiLCJ6ZXJveGVvcyIsImVvc25vZGUiLCJkZnVzZSIsImRldiIsImZvcm1hdEFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImNvbG9yIiwibGFzdEMiLCJzYXZlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJsb2FkIiwiZ2V0SXRlbSIsIl9fbndqcyIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwidGFibGUiLCJsb2NhbHN0b3JhZ2UiLCJmb3JtYXR0ZXJzIiwic2VsZWN0Q29sb3IiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJjb2VyY2UiLCJmb3JtYXR0ZXIiLCJpbnN0YW5jZXMiLCJkZWxpbWl0ZXIiLCJ0b05hbWVzcGFjZSIsInNraXBzIiwicGx1cmFsIiwibXNBYnMiLCJpc1BsdXJhbCIsImZtdExvbmciLCJmbXRTaG9ydCIsImRlZmF1bHRDb25maWdzIiwicEtleSIsImF4aW9zXzEiLCJiaWdudW1iZXJfanNfMSIsIkNoYWluSGVscGVyIiwiX2VvcyIsImJsb2NrTnVtT3JJZCIsImJsb2NrX251bV9vcl9pZCIsImdldENvbnRyYWN0IiwiZ2V0VGFibGVBYmkiLCJ0YWJsZU5hbWUiLCJ0YWJsZXMiLCJhYmlKc29uVG9CaW4iLCJiaW5hcmdzIiwiZ2V0QWNjb3VudCIsImdldFB1YktleSIsImdldFB1YktleXMiLCJhY2NvdW50SW5mbyIsInJlY292ZXJTaWduIiwidmFsaWRhdGVTaWduIiwicmVjb3ZlcktleSIsImtleU9iaiIsImFjY1N0cnMiLCJpUGxnIiwidmFsaWRhdG9yIiwidmFsaWRhdG9yUHJvdmlkZXIiLCJnZXRBY3Rpb25Db3VudCIsImdldEFjdGlvbk1heFNlcSIsImdldFJlY2VudEFjdGlvbnMiLCJyZWNlbnRBY3Rpb25zIiwiYWN0cyIsImFjY291bnRfYWN0aW9uX3NlcSIsImdldEFjdGlvbnMiLCJzdGFydFBvcyIsImZldGNoVGltZW91dCIsImVuZFBvcyIsImV4XzEiLCJtYXhBY3Rpb25JbmQiLCJnZXRBbGxBY3Rpb25zQmF0Y2giLCJjYlJlY2VpdmUiLCJjb25jdXJyZW50IiwicmVxIiwiX19hd2FpdGVyIiwiZXhfMiIsInJhbmdlcyIsInRTdGFydCIsInRSb3VuZCIsImJhbGFuY2VzIiwiZW5kc1dpdGgiLCJnZXRDdXJyZW5jeUJhbGFuY2UiLCJjYkVycm9yIiwidHJhbnNPcHRpb25zIiwid2FpdFR4IiwidHhJRCIsIm1heFJvdW5kIiwidGltZVNwYW5NUyIsImNoZWNrVHgiLCJfdHhJRCIsImdldFRyYW5zYWN0aW9uIiwidHgiLCJnZXRUYWJsZUFsbCIsImxvd2VyTnVtIiwidXBwZXJOdW0iLCJsb3dlciIsInVwcGVyIiwicG9vbCIsIlJlcXVpcmUiLCJfbCIsIl91IiwiX3Byb21pc2UiLCJnZXRUYWJsZVJvd3MiLCJsb3dlcl9ib3VuZCIsInVwcGVyX2JvdW5kIiwiX215SW5kIiwiX21pZCIsInJvd3MiLCJfbSIsImNoZWNrVGFibGUiLCJpbmRleF9wb3NpdGlvbiIsImNoZWNrVGFibGVNb3JlIiwicHJpbWFyeUtleSIsInRvIiwicGFydFJlc3VsdCIsImNoZWNrVGFibGVSYW5nZSIsImNoZWNrVGFibGVJdGVtIiwidXBkYXRlQXV0aCIsIndhaXRzIiwidXBkYXRlYXV0aCIsImdldFRhYmxlQnlTY29wZSIsImJhc2VVUkwiLCJwb3N0IiwicnNwIiwiQXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJpc1Nsb3dCdWZmZXIiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsIm5vcm1hbGl6ZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsImlnbm9yZUR1cGxpY2F0ZU9mIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJyZW1vdmUiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwiZm5zIiwicmVsYXRpdmVVUkwiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwidHJhbnNjYWxQYXlsb2FkXzEiLCJraFJlc18xIiwiS2hIZWxwZXIiLCJfY2hhaW4iLCJ0cmFuc2VuZCIsInN5bWJvbFN0ciIsInN5bVN0ciIsImNoZWNrUmVzT2YiLCJjaGVja0Fzc2V0IiwiY2hlY2tSZXNJbmZvIiwiY2hlY2tJbmZvIiwicGFyc2VUcmFuc2NhbFBheWxvYWQiLCJhc3NlbWJsZVRyYW5zY2FsUGF5bG9hZCIsIlRyYW5zY2FsUGF5bG9hZCIsInBhcnNlTWVtbyIsImNhbGxUeXBlIiwicG9zQ29sIiwicG9zRW5kIiwicG9zUHJldiIsIlJlc0hlbHBlciIsIl9jb2RlIiwiX3N5bVN0ciIsIl9hZG1pbiIsInJlc0NvbnRyYWN0IiwiaXNzdWUiLCJyZXNpc3N1ZSIsInVzZXIiLCJidXJuIiwicmVzYnVybiIsInRha2UiLCJyZXN0YWtlIiwiY2hhbmdlIiwic3ltRW9zQ2xpZW50Iiwic3ltR2V0SWRlbnRpdHkiLCJFT1NQcm92aWRlciIsImdldEF1dGgiLCJpbml0RnJvbUNvbmYiLCJlb3NfMSIsIkV2ZW50SGFuZGxlciIsInN1cHBvcnRlZEV2ZW50cyIsIl9ldmVudE1hcCIsIl9zdXBwb3J0ZWRFdmVudHMiLCJfZGVmYXVsdENiIiwibmV3RXZlbnRLZXlzIiwic2V0RXZlbnQiLCJmbkNhbGxiYWNrIiwibXVsdGlTb3VyY2VQbGF5ZXJfMSIsIl9oZWFkX2Jsb2NrX251bSIsIl9oZWFkX3JldHJ5X2NvdW50IiwiX2Vvc05vZGVzIiwiY2ZnIiwiX19jb25mIiwiY2hlY2tOb2RlcyIsImNoZWNrU3Bhbk1zIiwicmV0cnlfbWF4IiwiYmxvY2tIZWlnaHRUb2xlcmFuY2UiLCJoZWFkX2Jsb2NrX251bSIsInJhbmRvbUluZCIsImFub3RoZXJDaGFpbkluZm8iLCJjaGFpbkluZm9OZXciLCJub2RlU3RhdF8xIiwibWF4RmFpbHVyZVJhdGUiLCJmYWlsdXJlUmF0ZVRocmVzaG9sZCIsIm1heENvbnRpbnVvdXNGYWlsdXJlIiwiY2xlYW5pbmdUaW1lSW50ZXJ2YWwiLCJyZXZpdmFsVGltZUludGVydmFsIiwicmVzcG9uc2VJbnRlcnZhbFRocmVzaG9sZCIsInJlc3BvbnNlSW50ZXJ2YWxEZWNsaW5lIiwibWF4Q2FsbFByb21pc2VFeGNlZWRUaW1lIiwiX2NvbmN1cnJlbnRDb3VudCIsIl9vcHRpb25zIiwiX25vZGVTdGF0ZXMiLCJOb2RlU3RhdE1nciIsInNldFRoZUJlc3ROb2RlVG9DdXJyZW50IiwiZ2V0Q3VyTm9kZUNvbmYiLCJzZXRJZGVudGl0eSIsImxvY2tDaGFpbiIsImR5bmFtaWNDYWxsIiwic3RhcnRUaW1lU3RhbXAiLCJfZW5kcG9pbnRVcmwiLCJnZXRDdXJOb2RlU3RhdCIsImV4IiwibWFya1NlbmRTdWNjZXNzIiwibWFya1NlbmRGYWlsZWQiLCJlXzEiLCJlbmRQb2ludFVybCIsIk5vZGVTdGF0IiwiZXJyb3JfY291bnRzIiwidG90YWxfY291bnRzIiwiY29udGludW91c19mYWlsdXJlIiwicmVzcG9uc2VfaW50ZXJ2YWwiLCJyZXZpdmFsX3RpbWUiLCJjbGVhbmluZ190aW1lIiwicmVjb3JkX3RvdGFsX2NvdW50cyIsInJlY29yZF90b3RhbF9zdWNjZXNzIiwicmVjb3JkX3RvdGFsX2Z1c2UiLCJyZWNvcmRfdG90YWxfZmFpbGVkIiwiX25vZGVTdGF0dXMiLCJfY3VycmVudE5vZGVJbmRleCIsImluaXROb2RlU3RhdHVzIiwibWluX25vZGVfaWR4IiwidHJ5Q2xlYW4iLCJlcnJvcl9yYXRlIiwicmV2aXZhbCIsIm1pbl9ub2RlIiwibWluX2Vycm9yX3JhdGUiLCJnZXROb2RlQ29uZiIsImdldE5vZGVTdGF0Iiwic3RhcnRUaW1lc3RhbXAiLCJ0aW1lRGVsdGEiLCJtZ3Jjb250cmFjdCIsImdldFNpZ25LZXkiLCJzaWduS2V5VGFibGVOYW1lIiwic2lnbktleUluZGV4Iiwia2V5T2JqZWN0IiwiX19nZW5lcmF0b3IiXSwibWFwcGluZ3MiOiJhQUdBLElBQUFBLEVBQUFDLE9BQUEsaUJBQ0FBLE9BQUEsaUJBQ0EsU0FBQUMsRUFBQUMsSUFpUkEsU0FBQUQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixLQUFBRyxFQUFBSCxHQUNBLE9BRUEsUUFBQUksS0FEQUQsRUFBQUgsSUFBQSxFQUNBQyxFQUNBSSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBUCxFQUFBRyxLQUNBSyxFQUFBTCxHQUFBSCxFQUFBRyxJQUdBLEtBQUFNLEdBQUEsSUFBQUMsR0FDQUMsSUExUkFDLENBQUFiLEVBQUFDLEdBQ0FILEtBQUFFLEVBQUFDLElBd0RBLElBS0FhLEVBTEFDLEdBQUEsRUFFQUMsRUFBQSx1QkFDQUMsRUFBQSxJQUNBQyxLQUdBQyxLQUVBQyxLQUdBLFNBQUFDLEVBQUFqQixHQUNBLElBQUFrQixFQUFBQyxFQUFBbkIsR0FDQSxJQUFBa0IsRUFBQSxPQUFBRSxFQUNBLElBQUFDLEVBQUEsU0FBQUMsR0FzQkEsT0FyQkFKLEVBQUFLLElBQUFDLFFBQ0FMLEVBQUFHLElBQ0EsSUFBQUgsRUFBQUcsR0FBQUcsUUFBQUMsUUFBQTFCLElBQ0FtQixFQUFBRyxHQUFBRyxRQUFBRSxLQUFBM0IsSUFHQWUsR0FBQWYsR0FDQVUsRUFBQVksSUFFQSxJQUFBSixFQUFBVSxTQUFBRixRQUFBSixJQUNBSixFQUFBVSxTQUFBRCxLQUFBTCxLQUdBTyxRQUFBQyxL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QUFBOS9FLE9BQUEscUVBQ3hELFNBQU1uMkIsS0FBS2dqSCxXQUFXamdGLEVBQVNscUMsV0FDOUMsU0FEZWs5QixFQUFBQyxTQUNHMitFLDRDQUlsQzdxQyxFQS9DQSxHQUFhOXRFLEVBQUE4dEUiLCJmaWxlIjoiZW9zcGxheWVyLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbiBcdFx0aWYgKG51bGwpIHNjcmlwdC5jcm9zc09yaWdpbiA9IG51bGw7XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0fVxuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCI2ZTExNzI4MGY3ZWUyYTdmYzZjNlwiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuIFx0XHR2YXIgY2I7XG4gXHRcdHZhciBpO1xuIFx0XHR2YXIgajtcbiBcdFx0dmFyIG1vZHVsZTtcbiBcdFx0dmFyIG1vZHVsZUlkO1xuXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHQpXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHRcdH0pO1xuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoMTIyKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMjIpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgaWYgKGdsb2JhbC5CdWZmZXIgJiYgdHlwZW9mIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcbiAgfVxuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKTtcbn1cblxuLy8gYmFzZWQgb24gbm9kZSBhc3NlcnQsIG9yaWdpbmFsIG5vdGljZTpcblxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG59KCkpO1xuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xufVxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xuICBpZiAoaXNCdWZmZXIoYXJyYnVmKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYnVmKTtcbiAgfVxuICBpZiAoIWFycmJ1Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYXJyYnVmIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYXJyYnVmLmJ1ZmZlciAmJiBhcnJidWYuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXlxcKFxcc10qKVxccyovO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9ibG9iL2FkZWVlZWM4YmZjYzYwNjhiMTg3ZDdkOWZiM2Q1YmIxZDNhMzA4OTkvaW1wbGVtZW50YXRpb24uanNcbmZ1bmN0aW9uIGdldE5hbWUoZnVuYykge1xuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmMubmFtZTtcbiAgfVxuICB2YXIgc3RyID0gZnVuYy50b1N0cmluZygpO1xuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcbiAgICAgIHZhciBmbl9uYW1lID0gZ2V0TmFtZShzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXG4nICsgZm5fbmFtZSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG4gICAgfVxuICB9XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzIHx8ICF1dGlsLmlzRnVuY3Rpb24oc29tZXRoaW5nKSkge1xuICAgIHJldHVybiB1dGlsLmluc3BlY3Qoc29tZXRoaW5nKTtcbiAgfVxuICB2YXIgcmF3bmFtZSA9IGdldE5hbWUoc29tZXRoaW5nKTtcbiAgdmFyIG5hbWUgPSByYXduYW1lID8gJzogJyArIHJhd25hbWUgOiAnJztcbiAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcbiAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcbiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgK1xuICAgICAgICAgdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmV4cGVjdGVkKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG4gICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJlxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKChhY3R1YWwgPT09IG51bGwgfHwgdHlwZW9mIGFjdHVhbCAhPT0gJ29iamVjdCcpICYmXG4gICAgICAgICAgICAgKGV4cGVjdGVkID09PSBudWxsIHx8IHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiB0eXBlZCBhcnJheXMsIHdyYXAgdGhlaXIgdW5kZXJseWluZ1xuICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxuICAvLyBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGUgYXJyYXlzIHRvIGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBjaGVja2VkIGJ5XG4gIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKGFrYSBwVG9TdHJpbmcpLiBOZXZlciBwZXJmb3JtIGJpbmFyeVxuICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxuICAvLyBiaXQgcGF0dGVybnMgYXJlIG5vdCBpZGVudGljYWwuXG4gIH0gZWxzZSBpZiAoaXNWaWV3KGFjdHVhbCkgJiYgaXNWaWV3KGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXG4gICAgICAgICAgICAgIShhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcbiAgICAgICAgICAgICAgIGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpIHtcbiAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcbiAgICAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShleHBlY3RlZC5idWZmZXIpKSA9PT0gMDtcblxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xuXG4gICAgdmFyIGFjdHVhbEluZGV4ID0gbWVtb3MuYWN0dWFsLmluZGV4T2YoYWN0dWFsKTtcbiAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoYWN0dWFsSW5kZXggPT09IG1lbW9zLmV4cGVjdGVkLmluZGV4T2YoZXhwZWN0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XG4gICAgbWVtb3MuZXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG5cbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykge1xuICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSk7XG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XG4gIH1cbiAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgdmFyIGtleSwgaTtcbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT09IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwU3RyaWN0RXF1YWwnLCBub3REZWVwU3RyaWN0RXF1YWwpO1xuICB9XG59XG5cblxuLy8gOS4gVGhlIHN0cmljdCBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc3RyaWN0IGVxdWFsaXR5LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIF90cnlCbG9jayhibG9jaykge1xuICB2YXIgZXJyb3I7XG4gIHRyeSB7XG4gICAgYmxvY2soKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xuXG4gIG1lc3NhZ2UgPSAoZXhwZWN0ZWQgJiYgZXhwZWN0ZWQubmFtZSA/ICcgKCcgKyBleHBlY3RlZC5uYW1lICsgJykuJyA6ICcuJykgK1xuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcblxuICBpZiAoc2hvdWxkVGhyb3cgJiYgIWFjdHVhbCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gIHZhciBpc1Vud2FudGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIHV0aWwuaXNFcnJvcihhY3R1YWwpO1xuICB2YXIgaXNVbmV4cGVjdGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIGFjdHVhbCAmJiAhZXhwZWN0ZWQ7XG5cbiAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG4gICAgICB1c2VyUHJvdmlkZWRNZXNzYWdlICYmXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcbiAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MoZmFsc2UsIGJsb2NrLCBlcnJvciwgbWVzc2FnZSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB0aHJvdyBlcnI7IH07XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCcuL2JpZ2knKVxuXG4vL2FkZG9uc1xucmVxdWlyZSgnLi9jb252ZXJ0JylcblxubW9kdWxlLmV4cG9ydHMgPSBCaWdJbnRlZ2VyIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKS5TdHJpbmdEZWNvZGVyXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlckJhc2UgKGhhc2hNb2RlKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG4gIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maW5hbCA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfVxuICBpZiAodGhpcy5fZmluYWwpIHtcbiAgICB0aGlzLl9fZmluYWwgPSB0aGlzLl9maW5hbFxuICAgIHRoaXMuX2ZpbmFsID0gbnVsbFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGlucHV0RW5jKVxuICB9XG5cbiAgdmFyIG91dERhdGEgPSB0aGlzLl91cGRhdGUoZGF0YSlcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHJldHVybiB0aGlzXG5cbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMpXG4gIH1cblxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGRhdGEsIF8sIG5leHQpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgICB0aGlzLl91cGRhdGUoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoKHRoaXMuX3VwZGF0ZShkYXRhKSlcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH0gZmluYWxseSB7XG4gICAgbmV4dChlcnIpXG4gIH1cbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChkb25lKSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fX2ZpbmFsKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlXG4gIH1cblxuICBkb25lKGVycilcbn1cbkNpcGhlckJhc2UucHJvdG90eXBlLl9maW5hbE9yRGlnZXN0ID0gZnVuY3Rpb24gKG91dHB1dEVuYykge1xuICB2YXIgb3V0RGF0YSA9IHRoaXMuX19maW5hbCgpIHx8IEJ1ZmZlci5hbGxvYygwKVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYywgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVuYywgZmluKSB7XG4gIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpXG4gICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNcbiAgfVxuXG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3Qgc3dpdGNoIGVuY29kaW5ncycpXG5cbiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpXG4gIGlmIChmaW4pIHtcbiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlckJhc2VcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIGNyZWF0ZUhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpO1xuXG4vKiogQG5hbWVzcGFjZSBoYXNoICovXG5cbi8qKiBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhXG4gICAgQGFyZyB7c3RyaW5nfSBbcmVzdWx0RW5jb2RpbmcgPSBudWxsXSAtICdoZXgnLCAnYmluYXJ5JyBvciAnYmFzZTY0J1xuICAgIEByZXR1cm4ge3N0cmluZ3xCdWZmZXJ9IC0gQnVmZmVyIHdoZW4gcmVzdWx0RW5jb2RpbmcgaXMgbnVsbCwgb3Igc3RyaW5nXG4qL1xuZnVuY3Rpb24gc2hhMShkYXRhLCByZXN1bHRFbmNvZGluZykge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKGRhdGEpLmRpZ2VzdChyZXN1bHRFbmNvZGluZyk7XG59XG5cbi8qKiBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhXG4gICAgQGFyZyB7c3RyaW5nfSBbcmVzdWx0RW5jb2RpbmcgPSBudWxsXSAtICdoZXgnLCAnYmluYXJ5JyBvciAnYmFzZTY0J1xuICAgIEByZXR1cm4ge3N0cmluZ3xCdWZmZXJ9IC0gQnVmZmVyIHdoZW4gcmVzdWx0RW5jb2RpbmcgaXMgbnVsbCwgb3Igc3RyaW5nXG4qL1xuZnVuY3Rpb24gc2hhMjU2KGRhdGEsIHJlc3VsdEVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShkYXRhKS5kaWdlc3QocmVzdWx0RW5jb2RpbmcpO1xufVxuXG4vKiogQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YVxuICAgIEBhcmcge3N0cmluZ30gW3Jlc3VsdEVuY29kaW5nID0gbnVsbF0gLSAnaGV4JywgJ2JpbmFyeScgb3IgJ2Jhc2U2NCdcbiAgICBAcmV0dXJuIHtzdHJpbmd8QnVmZmVyfSAtIEJ1ZmZlciB3aGVuIHJlc3VsdEVuY29kaW5nIGlzIG51bGwsIG9yIHN0cmluZ1xuKi9cbmZ1bmN0aW9uIHNoYTUxMihkYXRhLCByZXN1bHRFbmNvZGluZykge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGE1MTInKS51cGRhdGUoZGF0YSkuZGlnZXN0KHJlc3VsdEVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gSG1hY1NIQTI1NihidWZmZXIsIHNlY3JldCkge1xuICAgIHJldHVybiBjcmVhdGVIbWFjKCdzaGEyNTYnLCBzZWNyZXQpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpO1xufVxuXG5mdW5jdGlvbiByaXBlbWQxNjAoZGF0YSkge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdybWQxNjAnKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XG59XG5cbi8vIGZ1bmN0aW9uIGhhc2gxNjAoYnVmZmVyKSB7XG4vLyAgIHJldHVybiByaXBlbWQxNjAoc2hhMjU2KGJ1ZmZlcikpXG4vLyB9XG4vL1xuLy8gZnVuY3Rpb24gaGFzaDI1NihidWZmZXIpIHtcbi8vICAgcmV0dXJuIHNoYTI1NihzaGEyNTYoYnVmZmVyKSlcbi8vIH1cblxuLy9cbi8vIGZ1bmN0aW9uIEhtYWNTSEE1MTIoYnVmZmVyLCBzZWNyZXQpIHtcbi8vICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIbWFjKCdzaGE1MTInLCBzZWNyZXQpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXG4vLyB9XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNoYTE6IHNoYTEsXG4gICAgc2hhMjU2OiBzaGEyNTYsXG4gICAgc2hhNTEyOiBzaGE1MTIsXG4gICAgSG1hY1NIQTI1NjogSG1hY1NIQTI1NixcbiAgICByaXBlbWQxNjA6IHJpcGVtZDE2MFxuICAgIC8vIGhhc2gxNjA6IGhhc2gxNjAsXG4gICAgLy8gaGFzaDI1NjogaGFzaDI1NixcbiAgICAvLyBIbWFjU0hBNTEyOiBIbWFjU0hBNTEyXG59OyIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvKlxyXG4gQ29weXJpZ2h0IDIwMTMtMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG5cclxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbGljZW5zZSBieXRlYnVmZmVyLmpzIChjKSAyMDE1IERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiAqIEJhY2tpbmcgYnVmZmVyOiBBcnJheUJ1ZmZlciwgQWNjZXNzb3I6IFVpbnQ4QXJyYXlcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxyXG4gKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2J5dGVidWZmZXIuanMgZm9yIGRldGFpbHNcclxuICovXHJcbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcclxuXHJcbiAgICAvKiBBTUQgKi8gaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lW1wiYW1kXCJdKVxyXG4gICAgICAgIGRlZmluZShbXCJsb25nXCJdLCBmYWN0b3J5KTtcclxuICAgIC8qIENvbW1vbkpTICovIGVsc2UgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlICYmIG1vZHVsZVtcImV4cG9ydHNcIl0pXHJcbiAgICAgICAgbW9kdWxlWydleHBvcnRzJ10gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBMb25nOyB0cnkgeyBMb25nID0gcmVxdWlyZShcImxvbmdcIik7IH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KExvbmcpO1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICAvKiBHbG9iYWwgKi8gZWxzZVxyXG4gICAgICAgIChnbG9iYWxbXCJkY29kZUlPXCJdID0gZ2xvYmFsW1wiZGNvZGVJT1wiXSB8fCB7fSlbXCJCeXRlQnVmZmVyXCJdID0gZmFjdG9yeShnbG9iYWxbXCJkY29kZUlPXCJdW1wiTG9uZ1wiXSk7XHJcblxyXG59KSh0aGlzLCBmdW5jdGlvbihMb25nKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBjbGFzcyBUaGUgc3dpc3MgYXJteSBrbmlmZSBmb3IgYmluYXJ5IGRhdGEgaW4gSmF2YVNjcmlwdC5cclxuICAgICAqIEBleHBvcnRzIEJ5dGVCdWZmZXJcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBjYXBhY2l0eSBJbml0aWFsIGNhcGFjaXR5LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgdmFyIEJ5dGVCdWZmZXIgPSBmdW5jdGlvbihjYXBhY2l0eSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2FwYWNpdHkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBjYXBhY2l0eSA9IEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWTtcclxuICAgICAgICBpZiAodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9IEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU47XHJcbiAgICAgICAgaWYgKHR5cGVvZiBub0Fzc2VydCA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUO1xyXG4gICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgY2FwYWNpdHkgPSBjYXBhY2l0eSB8IDA7XHJcbiAgICAgICAgICAgIGlmIChjYXBhY2l0eSA8IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBjYXBhY2l0eVwiKTtcclxuICAgICAgICAgICAgbGl0dGxlRW5kaWFuID0gISFsaXR0bGVFbmRpYW47XHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gISFub0Fzc2VydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJhY2tpbmcgQXJyYXlCdWZmZXIuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheUJ1ZmZlcn1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBjYXBhY2l0eSA9PT0gMCA/IEVNUFRZX0JVRkZFUiA6IG5ldyBBcnJheUJ1ZmZlcihjYXBhY2l0eSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVpbnQ4QXJyYXkgdXRpbGl6ZWQgdG8gbWFuaXB1bGF0ZSB0aGUgYmFja2luZyBidWZmZXIuIEJlY29tZXMgYG51bGxgIGlmIHRoZSBiYWNraW5nIGJ1ZmZlciBoYXMgYSBjYXBhY2l0eSBvZiBgMGAuXHJcbiAgICAgICAgICogQHR5cGUgez9VaW50OEFycmF5fVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnZpZXcgPSBjYXBhY2l0eSA9PT0gMCA/IG51bGwgOiBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFic29sdXRlIHJlYWQvd3JpdGUgb2Zmc2V0LlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNmbGlwXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI2NsZWFyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXJrZWQgb2Zmc2V0LlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNtYXJrXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI3Jlc2V0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tYXJrZWRPZmZzZXQgPSAtMTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWJzb2x1dGUgbGltaXQgb2YgdGhlIGNvbnRhaW5lZCBkYXRhLiBTZXQgdG8gdGhlIGJhY2tpbmcgYnVmZmVyJ3MgY2FwYWNpdHkgdXBvbiBhbGxvY2F0aW9uLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNmbGlwXHJcbiAgICAgICAgICogQHNlZSBCeXRlQnVmZmVyI2NsZWFyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5saW1pdCA9IGNhcGFjaXR5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIGJpZyBlbmRpYW4uXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gbGl0dGxlRW5kaWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMsIGRlZmF1bHRzIHRvIGBmYWxzZWAuXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubm9Bc3NlcnQgPSBub0Fzc2VydDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCeXRlQnVmZmVyIHZlcnNpb24uXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuVkVSU0lPTiA9IFwiNS4wLjFcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpdHRsZSBlbmRpYW4gY29uc3RhbnQgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGl0cyBib29sZWFuIHZhbHVlLiBFdmFsdWF0ZXMgdG8gYHRydWVgLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJpZyBlbmRpYW4gY29uc3RhbnQgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGl0cyBib29sZWFuIHZhbHVlLiBFdmFsdWF0ZXMgdG8gYGZhbHNlYC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuQklHX0VORElBTiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBpbml0aWFsIGNhcGFjaXR5IG9mIGAxNmAuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFkgPSAxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgZW5kaWFuZXNzIG9mIGBmYWxzZWAgZm9yIGJpZyBlbmRpYW4uXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTiA9IEJ5dGVCdWZmZXIuQklHX0VORElBTjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgbm8gYXNzZXJ0aW9ucyBmbGFnIG9mIGBmYWxzZWAuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGBMb25nYCBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgNjQtYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciB2YWx1ZS4gTWF5IGJlIGBudWxsYCBpZiBMb25nLmpzIGhhcyBub3QgYmVlbiBsb2FkZWRcclxuICAgICAqICBhbmQgaW50NjQgc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLlxyXG4gICAgICogQHR5cGUgez9Mb25nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2xvbmcuanNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5Mb25nID0gTG9uZyB8fCBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGFsaWFzIEJ5dGVCdWZmZXIucHJvdG90eXBlXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIEJ5dGVCdWZmZXJQcm90b3R5cGUgPSBCeXRlQnVmZmVyLnByb3RvdHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGluZGljYXRvciB1c2VkIHRvIHJlbGlhYmx5IGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCeXRlQnVmZmVyIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLl9faXNCeXRlQnVmZmVyX187XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ5dGVCdWZmZXJQcm90b3R5cGUsIFwiX19pc0J5dGVCdWZmZXJfX1wiLCB7XHJcbiAgICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gaGVscGVyc1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFBcnJheUJ1ZmZlcn1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgRU1QVFlfQlVGRkVSID0gbmV3IEFycmF5QnVmZmVyKDApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RyaW5nLmZyb21DaGFyQ29kZSByZWZlcmVuY2UgZm9yIGNvbXBpbGUtdGltZSByZW5hbWluZy5cclxuICAgICAqIEB0eXBlIHtmdW5jdGlvbiguLi5udW1iZXIpOnN0cmluZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBzb3VyY2UgZnVuY3Rpb24gZm9yIGEgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHMgU3RyaW5nIHRvIHJlYWQgZnJvbVxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKCk6bnVtYmVyfG51bGx9IFNvdXJjZSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY2hhciBjb2RlIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmUgYXJlXHJcbiAgICAgKiAgbm8gbW9yZSBjaGFyYWN0ZXJzIGxlZnQuXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHRoZSBhcmd1bWVudCBpcyBpbnZhbGlkXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc3RyaW5nU291cmNlKHMpIHtcclxuICAgICAgICB2YXIgaT0wOyByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpIDwgcy5sZW5ndGggPyBzLmNoYXJDb2RlQXQoaSsrKSA6IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBkZXN0aW5hdGlvbiBmdW5jdGlvbiBmb3IgYSBzdHJpbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24obnVtYmVyPSk6dW5kZWZpbmVkfHN0cmluZ30gRGVzdGluYXRpb24gZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIHRoZSBuZXh0IGNoYXIgY29kZS5cclxuICAgICAqICBSZXR1cm5zIHRoZSBmaW5hbCBzdHJpbmcgd2hlbiBjYWxsZWQgd2l0aG91dCBhcmd1bWVudHMuXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc3RyaW5nRGVzdGluYXRpb24oKSB7XHJcbiAgICAgICAgdmFyIGNzID0gW10sIHBzID0gW107IHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHMuam9pbignJykrc3RyaW5nRnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY3MpO1xyXG4gICAgICAgICAgICBpZiAoY3MubGVuZ3RoICsgYXJndW1lbnRzLmxlbmd0aCA+IDEwMjQpXHJcbiAgICAgICAgICAgICAgICBwcy5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNzKSksXHJcbiAgICAgICAgICAgICAgICAgICAgY3MubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY3MsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGFjY2Vzc29yIHR5cGUuXHJcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGBCdWZmZXJgIHVuZGVyIG5vZGUuanMsIGBVaW50OEFycmF5YCByZXNwZWN0aXZlbHkgYERhdGFWaWV3YCBpbiB0aGUgYnJvd3NlciAoY2xhc3NlcylcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5hY2Nlc3NvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWxsb2NhdGVzIGEgbmV3IEJ5dGVCdWZmZXIgYmFja2VkIGJ5IGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgY2FwYWNpdHkuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGNhcGFjaXR5IEluaXRpYWwgY2FwYWNpdHkuIERlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFl9LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmFsbG9jYXRlID0gZnVuY3Rpb24oY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJ5dGVCdWZmZXIoY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbmNhdGVuYXRlcyBtdWx0aXBsZSBCeXRlQnVmZmVycyBpbnRvIG9uZS5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjwhQnl0ZUJ1ZmZlcnwhQXJyYXlCdWZmZXJ8IVVpbnQ4QXJyYXl8c3RyaW5nPn0gYnVmZmVycyBCdWZmZXJzIHRvIGNvbmNhdGVuYXRlXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8Ym9vbGVhbik9fSBlbmNvZGluZyBTdHJpbmcgZW5jb2RpbmcgaWYgYGJ1ZmZlcnNgIGNvbnRhaW5zIGEgc3RyaW5nIChcImJhc2U2NFwiLCBcImhleFwiLCBcImJpbmFyeVwiLFxyXG4gICAgICogIGRlZmF1bHRzIHRvIFwidXRmOFwiKVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIgZm9yIHRoZSByZXN1bHRpbmcgQnl0ZUJ1ZmZlci4gRGVmYXVsdHNcclxuICAgICAqICB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMgZm9yIHRoZSByZXN1bHRpbmcgQnl0ZUJ1ZmZlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQ29uY2F0ZW5hdGVkIEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbihidWZmZXJzLCBlbmNvZGluZywgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgICAgICBsaXR0bGVFbmRpYW4gPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjYXBhY2l0eSA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaT0wLCBrPWJ1ZmZlcnMubGVuZ3RoLCBsZW5ndGg7IGk8azsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmICghQnl0ZUJ1ZmZlci5pc0J5dGVCdWZmZXIoYnVmZmVyc1tpXSkpXHJcbiAgICAgICAgICAgICAgICBidWZmZXJzW2ldID0gQnl0ZUJ1ZmZlci53cmFwKGJ1ZmZlcnNbaV0sIGVuY29kaW5nKTtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYnVmZmVyc1tpXS5saW1pdCAtIGJ1ZmZlcnNbaV0ub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gMCkgY2FwYWNpdHkgKz0gbGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FwYWNpdHkgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnl0ZUJ1ZmZlcigwLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihjYXBhY2l0eSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCksXHJcbiAgICAgICAgICAgIGJpO1xyXG4gICAgICAgIGk9MDsgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICBiaSA9IGJ1ZmZlcnNbaSsrXTtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYmkubGltaXQgLSBiaS5vZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmIChsZW5ndGggPD0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGJiLnZpZXcuc2V0KGJpLnZpZXcuc3ViYXJyYXkoYmkub2Zmc2V0LCBiaS5saW1pdCksIGJiLm9mZnNldCk7XHJcbiAgICAgICAgICAgIGJiLm9mZnNldCArPSBsZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJiLmxpbWl0ID0gYmIub2Zmc2V0O1xyXG4gICAgICAgIGJiLm9mZnNldCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdHlwZSBpcyBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAcGFyYW0geyp9IGJiIEJ5dGVCdWZmZXIgdG8gdGVzdFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBpdCBpcyBhIEJ5dGVCdWZmZXIsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyID0gZnVuY3Rpb24oYmIpIHtcclxuICAgICAgICByZXR1cm4gKGJiICYmIGJiW1wiX19pc0J5dGVCdWZmZXJfX1wiXSkgPT09IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBiYWNraW5nIGJ1ZmZlciB0eXBlLlxyXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBgQnVmZmVyYCB1bmRlciBub2RlLmpzLCBgQXJyYXlCdWZmZXJgIGluIHRoZSBicm93c2VyIChjbGFzc2VzKVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLnR5cGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXlCdWZmZXI7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXcmFwcyBhIGJ1ZmZlciBvciBhIHN0cmluZy4gU2V0cyB0aGUgYWxsb2NhdGVkIEJ5dGVCdWZmZXIncyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IHRvIGAwYCBhbmQgaXRzXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9IHRvIHRoZSBsZW5ndGggb2YgdGhlIHdyYXBwZWQgZGF0YS5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZ3whQXJyYXkuPG51bWJlcj59IGJ1ZmZlciBBbnl0aGluZyB0aGF0IGNhbiBiZSB3cmFwcGVkXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8Ym9vbGVhbik9fSBlbmNvZGluZyBTdHJpbmcgZW5jb2RpbmcgaWYgYGJ1ZmZlcmAgaXMgYSBzdHJpbmcgKFwiYmFzZTY0XCIsIFwiaGV4XCIsIFwiYmluYXJ5XCIsIGRlZmF1bHRzIHRvXHJcbiAgICAgKiAgXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEEgQnl0ZUJ1ZmZlciB3cmFwcGluZyBgYnVmZmVyYFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLndyYXAgPSBmdW5jdGlvbihidWZmZXIsIGVuY29kaW5nLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbm9Bc3NlcnQgPSBsaXR0bGVFbmRpYW47XHJcbiAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9IGVuY29kaW5nO1xyXG4gICAgICAgICAgICBlbmNvZGluZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSBcInV0ZjhcIjtcclxuICAgICAgICAgICAgc3dpdGNoIChlbmNvZGluZykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21CYXNlNjQoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImhleFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21IZXgoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCeXRlQnVmZmVyLmZyb21CaW5hcnkoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInV0ZjhcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tVVRGOChidWZmZXIsIGxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGVidWdcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tRGVidWcoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIlVuc3VwcG9ydGVkIGVuY29kaW5nOiBcIitlbmNvZGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1ZmZlciA9PT0gbnVsbCB8fCB0eXBlb2YgYnVmZmVyICE9PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBidWZmZXJcIik7XHJcbiAgICAgICAgdmFyIGJiO1xyXG4gICAgICAgIGlmIChCeXRlQnVmZmVyLmlzQnl0ZUJ1ZmZlcihidWZmZXIpKSB7XHJcbiAgICAgICAgICAgIGJiID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbG9uZS5jYWxsKGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGJiLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICByZXR1cm4gYmI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7IC8vIEV4dHJhY3QgQXJyYXlCdWZmZXIgZnJvbSBVaW50OEFycmF5XHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoMCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkgeyAvLyBBdm9pZCByZWZlcmVuY2VzIHRvIG1vcmUgdGhhbiBvbmUgRU1QVFlfQlVGRkVSXHJcbiAgICAgICAgICAgICAgICBiYi5idWZmZXIgPSBidWZmZXIuYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gYnVmZmVyLmJ5dGVPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBiYi52aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7IC8vIFJldXNlIEFycmF5QnVmZmVyXHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoMCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGJiLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYmIudmlldyA9IGJ1ZmZlci5ieXRlTGVuZ3RoID4gMCA/IG5ldyBVaW50OEFycmF5KGJ1ZmZlcikgOiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYnVmZmVyKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7IC8vIENyZWF0ZSBmcm9tIG9jdGV0c1xyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKGJ1ZmZlci5sZW5ndGgsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBiYi5saW1pdCA9IGJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxidWZmZXIubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICBiYi52aWV3W2ldID0gYnVmZmVyW2ldO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJ1ZmZlclwiKTsgLy8gT3RoZXJ3aXNlIGZhaWxcclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIHRoZSBhcnJheSBhcyBhIGJpdHNldC5cclxuICAgICAqIEBwYXJhbSB7QXJyYXk8Ym9vbGVhbj59IHZhbHVlIEFycmF5IG9mIGJvb2xlYW5zIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgbGVuZ3RoYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlQml0U2V0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSlcclxuICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgQml0U2V0OiBOb3QgYW4gYXJyYXlcIik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgYml0cyA9IHZhbHVlLmxlbmd0aCxcclxuICAgICAgICAgIGJ5dGVzID0gKGJpdHMgPj4gMyksXHJcbiAgICAgICAgICBiaXQgPSAwLFxyXG4gICAgICAgICAgaztcclxuXHJcbiAgICAgIG9mZnNldCArPSB0aGlzLndyaXRlVmFyaW50MzIoYml0cyxvZmZzZXQpO1xyXG5cclxuICAgICAgd2hpbGUoYnl0ZXMtLSkge1xyXG4gICAgICAgIGsgPSAoISF2YWx1ZVtiaXQrK10gJiAxKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCAxKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCAyKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCAzKSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA0KSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA1KSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA2KSB8XHJcbiAgICAgICAgICAgICgoISF2YWx1ZVtiaXQrK10gJiAxKSA8PCA3KTtcclxuICAgICAgICB0aGlzLndyaXRlQnl0ZShrLG9mZnNldCsrKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYoYml0IDwgYml0cykge1xyXG4gICAgICAgIHZhciBtID0gMDsgayA9IDA7XHJcbiAgICAgICAgd2hpbGUoYml0IDwgYml0cykgayA9IGsgfCAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgKG0rKykpO1xyXG4gICAgICAgIHRoaXMud3JpdGVCeXRlKGssb2Zmc2V0KyspO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIEJpdFNldCBhcyBhbiBhcnJheSBvZiBib29sZWFucy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGBsZW5ndGhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkQml0U2V0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcblxyXG4gICAgICB2YXIgcmV0ID0gdGhpcy5yZWFkVmFyaW50MzIob2Zmc2V0KSxcclxuICAgICAgICAgIGJpdHMgPSByZXQudmFsdWUsXHJcbiAgICAgICAgICBieXRlcyA9IChiaXRzID4+IDMpLFxyXG4gICAgICAgICAgYml0ID0gMCxcclxuICAgICAgICAgIHZhbHVlID0gW10sXHJcbiAgICAgICAgICBrO1xyXG5cclxuICAgICAgb2Zmc2V0ICs9IHJldC5sZW5ndGg7XHJcblxyXG4gICAgICB3aGlsZShieXRlcy0tKSB7XHJcbiAgICAgICAgayA9IHRoaXMucmVhZEJ5dGUob2Zmc2V0KyspO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDAxKTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHgwMik7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4MDQpO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDA4KTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHgxMCk7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4MjApO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDQwKTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHg4MCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKGJpdCA8IGJpdHMpIHtcclxuICAgICAgICB2YXIgbSA9IDA7XHJcbiAgICAgICAgayA9IHRoaXMucmVhZEJ5dGUob2Zmc2V0KyspO1xyXG4gICAgICAgIHdoaWxlKGJpdCA8IGJpdHMpIHZhbHVlW2JpdCsrXSA9ICEhKChrID4+IChtKyspKSAmIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJ5dGVzLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBOdW1iZXIgb2YgYnl0ZXMgdG8gcmVhZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYGxlbmd0aGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIGxlbmd0aCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiK2xlbmd0aCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2xpY2UgPSB0aGlzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHNsaWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIHBheWxvYWQgb2YgYnl0ZXMuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjYXBwZW5kfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcnwhQXJyYXlCdWZmZXJ8IVVpbnQ4QXJyYXl8c3RyaW5nfSBzb3VyY2UgRGF0YSB0byB3cml0ZS4gSWYgYHNvdXJjZWAgaXMgYSBCeXRlQnVmZmVyLCBpdHMgb2Zmc2V0c1xyXG4gICAgICogIHdpbGwgYmUgbW9kaWZpZWQgYWNjb3JkaW5nIHRvIHRoZSBwZXJmb3JtZWQgcmVhZCBvcGVyYXRpb24uXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGVuY29kaW5nIEVuY29kaW5nIGlmIGBkYXRhYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG8gXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUJ5dGVzID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5hcHBlbmQ7XHJcblxyXG4gICAgLy8gdHlwZXMvaW50cy9pbnQ4XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gOGJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSB8PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICB2YXIgY2FwYWNpdHkwID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MClcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTAgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTAgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gMTtcbiAgICAgICAgdGhpcy52aWV3W29mZnNldF0gPSB2YWx1ZTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlSW50OH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVCeXRlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDEgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlld1tvZmZzZXRdO1xyXG4gICAgICAgIGlmICgodmFsdWUgJiAweDgwKSA9PT0gMHg4MCkgdmFsdWUgPSAtKDB4RkYgLSB2YWx1ZSArIDEpOyAvLyBDYXN0IHRvIHNpZ25lZFxyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIDhiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRCeXRlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50ODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiA4Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDggPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgdmFyIGNhcGFjaXR5MSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDE7XG4gICAgICAgIHRoaXMudmlld1tvZmZzZXRdID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gOGJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlVWludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDggPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiA4Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50OCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDEgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmlld1tvZmZzZXRdO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIDhiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVWludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAxYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVSW50OCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVpbnQ4O1xyXG5cclxuICAgIC8vIHR5cGVzL2ludHMvaW50MTZcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIG9yIGB2YWx1ZWAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQxNiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgdmFyIGNhcGFjaXR5MiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTIpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkyICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkyIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDI7XG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlICYgMHhGRjAwKSA+Pj4gODtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICB2YWx1ZSAmIDB4MDBGRjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0XSAgID0gKHZhbHVlICYgMHhGRjAwKSA+Pj4gODtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICB2YWx1ZSAmIDB4MDBGRjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAxNmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUludDE2fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIG9yIGB2YWx1ZWAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVTaG9ydCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMTZiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50MTYgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAyID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMitcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB2YWx1ZSAgPSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCAgXSA8PCA4O1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZhbHVlICYgMHg4MDAwKSA9PT0gMHg4MDAwKSB2YWx1ZSA9IC0oMHhGRkZGIC0gdmFsdWUgKyAxKTsgLy8gQ2FzdCB0byBzaWduZWRcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRTaG9ydCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDE2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBvciBgdmFsdWVgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDE2ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgIHZhciBjYXBhY2l0eTMgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkzKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MyAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MyA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSAyO1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSAmIDB4RkYwMCkgPj4+IDg7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgdmFsdWUgJiAweDAwRkY7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldF0gICA9ICh2YWx1ZSAmIDB4RkYwMCkgPj4+IDg7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAgdmFsdWUgJiAweDAwRkY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVpbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBvciBgdmFsdWVgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDE2ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMTZiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MTYgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAyID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMitcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICB2YWx1ZSAgPSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCAgXSA8PCA4O1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDE2Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZFVpbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDJgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVSW50MTYgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MTY7XHJcblxyXG4gICAgLy8gdHlwZXMvaW50cy9pbnQzMlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMzJiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQzMiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgdmFyIGNhcGFjaXR5NCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTQpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHk0ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHk0IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDQ7XG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICh2YWx1ZSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICB2YWx1ZSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAodmFsdWUgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9ICh2YWx1ZSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgdmFsdWUgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUludDMyfS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrNCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgIHZhbHVlIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgIHZhbHVlICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgfD0gMDsgLy8gQ2FzdCB0byBzaWduZWRcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQzMn0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDMyYml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVaW50MzIgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgdmFyIGNhcGFjaXR5NSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTUpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHk1ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHk1IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDQ7XG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICh2YWx1ZSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICB2YWx1ZSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAodmFsdWUgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKHZhbHVlID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9ICh2YWx1ZSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgdmFsdWUgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlVWludDMyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDMyID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrNCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgIHZhbHVlIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgIHZhbHVlICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSAzMmJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRVaW50MzJ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVUludDMyID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDMyO1xyXG5cclxuICAgIC8vIHR5cGVzL2ludHMvaW50NjRcclxuXHJcbiAgICBpZiAoTG9uZykge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSA2NGJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50NjQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoISh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIExvbmcpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIgb3IgTG9uZylcIik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICB2YXIgY2FwYWNpdHk2ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTYpXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NiAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NiA6IG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgLT0gODtcbiAgICAgICAgICAgIHZhciBsbyA9IHZhbHVlLmxvdyxcclxuICAgICAgICAgICAgICAgIGhpID0gdmFsdWUuaGlnaDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gKGxvID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAobG8gPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChsbyA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gIGxvICAgICAgICAgJiAweEZGO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9IChoaSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGhpID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoaGkgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICBoaSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gKGhpID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoaGkgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChoaSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gIGhpICAgICAgICAgJiAweEZGO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9IChsbyA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGxvID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAobG8gPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICBsbyAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVJbnQ2NH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUxvbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50NjQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA4ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbG8gPSAwLFxyXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgICAgIGxvICA9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgMTY7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAgODtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgICAgIGxvICs9IHRoaXMudmlld1tvZmZzZXQrM10gPDwgMjQgPj4+IDA7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICBoaSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgICAgICBoaSArPSB0aGlzLnZpZXdbb2Zmc2V0KzNdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhpICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAgODtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzNdO1xuICAgICAgICAgICAgICAgIGhpICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICBsbyAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgIDg7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgICAgICBsbyArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBuZXcgTG9uZyhsbywgaGksIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEludDY0fS5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZExvbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQ2NDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICAgICAgdmFyIGNhcGFjaXR5NyA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk3KVxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTcgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTcgOiBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0IC09IDg7XG4gICAgICAgICAgICB2YXIgbG8gPSB2YWx1ZS5sb3csXHJcbiAgICAgICAgICAgICAgICBoaSA9IHZhbHVlLmhpZ2g7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9IChsbyA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGxvID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAobG8gPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICBsbyAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAoaGkgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChoaSA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGhpID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgaGkgICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9IChoaSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGhpID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoaGkgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICBoaSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAobG8gPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChsbyA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGxvID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgbG8gICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVVaW50NjR9LlxyXG4gICAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVSW50NjQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDY0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50NjQgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgOCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis4K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxvID0gMCxcclxuICAgICAgICAgICAgICAgIGhpID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgICAgICBsbyAgPSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgICAgICBsbyArPSB0aGlzLnZpZXdbb2Zmc2V0KzNdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgaGkgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQgIF07XG4gICAgICAgICAgICAgICAgaGkgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoaSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgIDg7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgICAgICBoaSArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgbG8gID0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrM107XG4gICAgICAgICAgICAgICAgbG8gKz0gdGhpcy52aWV3W29mZnNldCAgXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbmV3IExvbmcobG8sIGhpLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgNjRiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVWludDY0fS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVJbnQ2NCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVpbnQ2NDtcclxuXHJcbiAgICB9IC8vIExvbmdcclxuXHJcblxyXG4gICAgLy8gdHlwZXMvZmxvYXRzL2Zsb2F0MzJcclxuXHJcbiAgICAvKlxyXG4gICAgIGllZWU3NTQgLSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcclxuXHJcbiAgICAgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcblxyXG4gICAgIENvcHlyaWdodCAoYykgRmVyb3NzIEFib3VraGFkaWplaFxyXG5cclxuICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiAgICAgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gICAgIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuICAgICB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbiAgICAgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiAgICAgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiAgICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuICAgICBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gICAgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gICAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuICAgICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuICAgICBUSEUgU09GVFdBUkUuXHJcbiAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYW4gSUVFRTc1NCBmbG9hdCBmcm9tIGEgYnl0ZSBhcnJheS5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5fSBidWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMRVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1MZW5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXNcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaWVlZTc1NF9yZWFkKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcclxuICAgICAgICB2YXIgZSwgbSxcclxuICAgICAgICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcclxuICAgICAgICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcclxuICAgICAgICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXHJcbiAgICAgICAgICAgIG5CaXRzID0gLTcsXHJcbiAgICAgICAgICAgIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMCxcclxuICAgICAgICAgICAgZCA9IGlzTEUgPyAtMSA6IDEsXHJcbiAgICAgICAgICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XHJcblxyXG4gICAgICAgIGkgKz0gZDtcclxuXHJcbiAgICAgICAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XHJcbiAgICAgICAgcyA+Pj0gKC1uQml0cyk7XHJcbiAgICAgICAgbkJpdHMgKz0gZUxlbjtcclxuICAgICAgICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxyXG5cclxuICAgICAgICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKTtcclxuICAgICAgICBlID4+PSAoLW5CaXRzKTtcclxuICAgICAgICBuQml0cyArPSBtTGVuO1xyXG4gICAgICAgIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XHJcblxyXG4gICAgICAgIGlmIChlID09PSAwKSB7XHJcbiAgICAgICAgICAgIGUgPSAxIC0gZUJpYXM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pO1xyXG4gICAgICAgICAgICBlID0gZSAtIGVCaWFzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiBJRUVFNzU0IGZsb2F0IHRvIGEgYnl0ZSBhcnJheS5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5fSBidWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0xFXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbUxlblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlc1xyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGllZWU3NTRfd3JpdGUoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcclxuICAgICAgICB2YXIgZSwgbSwgYyxcclxuICAgICAgICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcclxuICAgICAgICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcclxuICAgICAgICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXHJcbiAgICAgICAgICAgIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKSxcclxuICAgICAgICAgICAgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpLFxyXG4gICAgICAgICAgICBkID0gaXNMRSA/IDEgOiAtMSxcclxuICAgICAgICAgICAgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMDtcclxuXHJcbiAgICAgICAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMDtcclxuICAgICAgICAgICAgZSA9IGVNYXg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBlLS07XHJcbiAgICAgICAgICAgICAgICBjICo9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBydCAvIGM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBlKys7XHJcbiAgICAgICAgICAgICAgICBjIC89IDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xyXG4gICAgICAgICAgICAgICAgbSA9IDA7XHJcbiAgICAgICAgICAgICAgICBlID0gZU1heDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xyXG4gICAgICAgICAgICAgICAgZSA9IGUgKyBlQmlhcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcclxuICAgICAgICAgICAgICAgIGUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxyXG5cclxuICAgICAgICBlID0gKGUgPDwgbUxlbikgfCBtO1xyXG4gICAgICAgIGVMZW4gKz0gbUxlbjtcclxuICAgICAgICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XHJcblxyXG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDMyYml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGEgbnVtYmVyKVwiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICB2YXIgY2FwYWNpdHk4ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5OClcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTggKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTggOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gNDtcbiAgICAgICAgaWVlZTc1NF93cml0ZSh0aGlzLnZpZXcsIHZhbHVlLCBvZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuLCAyMywgNCk7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBmbG9hdC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUZsb2F0MzJ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0MzI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdDMyID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gaWVlZTc1NF9yZWFkKHRoaXMudmlldywgb2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiwgMjMsIDQpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgZmxvYXQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEZsb2F0MzJ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEZsb2F0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkRmxvYXQzMjtcclxuXHJcbiAgICAvLyB0eXBlcy9mbG9hdHMvZmxvYXQ2NFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgNjRiaXQgZmxvYXQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0NjQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYSBudW1iZXIpXCIpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgIHZhciBjYXBhY2l0eTkgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk5KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5OSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5OSA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSA4O1xuICAgICAgICBpZWVlNzU0X3dyaXRlKHRoaXMudmlldywgdmFsdWUsIG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4sIDUyLCA4KTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDg7XG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDY0Yml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlRmxvYXQ2NH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlRG91YmxlID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUZsb2F0NjQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDY0Yml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdDY0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgOCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gaWVlZTc1NF9yZWFkKHRoaXMudmlldywgb2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiwgNTIsIDgpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgNjRiaXQgZmxvYXQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZEZsb2F0NjR9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZERvdWJsZSA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEZsb2F0NjQ7XHJcblxyXG5cclxuICAgIC8vIHR5cGVzL3ZhcmludHMvdmFyaW50MzJcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuTUFYX1ZBUklOVDMyX0JZVEVTID0gNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQgdG8gc3RvcmUgYSAzMmJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBlbmNvZGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBieXRlcyByZXF1aXJlZC4gQ2FwcGVkIHRvIHtAbGluayBCeXRlQnVmZmVyLk1BWF9WQVJJTlQzMl9CWVRFU31cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVWYXJpbnQzMiA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL2lvL2NvZGVkX3N0cmVhbS5jY1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUgPj4+IDA7XHJcbiAgICAgICAgICAgICBpZiAodmFsdWUgPCAxIDw8IDcgKSByZXR1cm4gMTtcclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IDEgPDwgMTQpIHJldHVybiAyO1xyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMSA8PCAyMSkgcmV0dXJuIDM7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPCAxIDw8IDI4KSByZXR1cm4gNDtcclxuICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFppZ3phZyBlbmNvZGVzIGEgc2lnbmVkIDMyYml0IGludGVnZXIgc28gdGhhdCBpdCBjYW4gYmUgZWZmZWN0aXZlbHkgdXNlZCB3aXRoIHZhcmludCBlbmNvZGluZy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFNpZ25lZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCB6aWd6YWcgZW5jb2RlZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuemlnWmFnRW5jb2RlMzIgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuICgoKG4gfD0gMCkgPDwgMSkgXiAobiA+PiAzMSkpID4+PiAwOyAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvd2lyZV9mb3JtYXRfbGl0ZS5oXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIHppZ3phZyBlbmNvZGVkIHNpZ25lZCAzMmJpdCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVW5zaWduZWQgemlnemFnIGVuY29kZWQgMzJiaXQgaW50ZWdlclxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIDMyYml0IGludGVnZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGUzMiA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gKChuID4+PiAxKSBeIC0obiAmIDEpKSB8IDA7IC8vIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZhcmludDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSB8PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzaXplID0gQnl0ZUJ1ZmZlci5jYWxjdWxhdGVWYXJpbnQzMih2YWx1ZSksXHJcbiAgICAgICAgICAgIGI7XHJcbiAgICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgICAgIHZhciBjYXBhY2l0eTEwID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTApXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTAgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gc2l6ZTtcbiAgICAgICAgdmFsdWUgPj4+PSAwO1xyXG4gICAgICAgIHdoaWxlICh2YWx1ZSA+PSAweDgwKSB7XHJcbiAgICAgICAgICAgIGIgPSAodmFsdWUgJiAweDdmKSB8IDB4ODA7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSBiO1xyXG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSB2YWx1ZTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSB6aWctemFnIGVuY29kZWQgKHNpZ25lZCkgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgYG9mZnNldGAgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWYXJpbnQzMlppZ1phZyA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVZhcmludDMyKEJ5dGVCdWZmZXIuemlnWmFnRW5jb2RlMzIodmFsdWUpLCBvZmZzZXQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcnwhe3ZhbHVlOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHZhbHVlIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHZhbHVlIHJlYWRcclxuICAgICAqICBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludC4gSGFzIGEgcHJvcGVydHkgYHRydW5jYXRlZCA9IHRydWVgIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggZGF0YSBhdmFpbGFibGVcclxuICAgICAqICB0byBmdWxseSBkZWNvZGUgdGhlIHZhcmludC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50MzIgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYyA9IDAsXHJcbiAgICAgICAgICAgIHZhbHVlID0gMCA+Pj4gMCxcclxuICAgICAgICAgICAgYjtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCAmJiBvZmZzZXQgPiB0aGlzLmxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXCJUcnVuY2F0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICBlcnJbJ3RydW5jYXRlZCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiID0gdGhpcy52aWV3W29mZnNldCsrXTtcclxuICAgICAgICAgICAgaWYgKGMgPCA1KVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgfD0gKGIgJiAweDdmKSA8PCAoNypjKTtcclxuICAgICAgICAgICAgKytjO1xyXG4gICAgICAgIH0gd2hpbGUgKChiICYgMHg4MCkgIT09IDApO1xyXG4gICAgICAgIHZhbHVlIHw9IDA7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwidmFsdWVcIjogdmFsdWUsXHJcbiAgICAgICAgICAgIFwibGVuZ3RoXCI6IGNcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIChzaWduZWQpIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8IXt2YWx1ZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkXHJcbiAgICAgKiAgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50MzJaaWdaYWcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgdmFsID0gdGhpcy5yZWFkVmFyaW50MzIob2Zmc2V0KTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgIHZhbFtcInZhbHVlXCJdID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGUzMih2YWxbXCJ2YWx1ZVwiXSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB2YWwgPSBCeXRlQnVmZmVyLnppZ1phZ0RlY29kZTMyKHZhbCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gdHlwZXMvdmFyaW50cy92YXJpbnQ2NFxyXG5cclxuICAgIGlmIChMb25nKSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1heGltdW0gbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIGEgNjRiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKiBAY29uc3RcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UNjRfQllURVMgPSAxMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byBlbmNvZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQuIENhcHBlZCB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UNjRfQllURVN9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50NjQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi9pby9jb2RlZF9zdHJlYW0uY2NcclxuICAgICAgICAgICAgdmFyIHBhcnQwID0gdmFsdWUudG9JbnQoKSA+Pj4gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQxID0gdmFsdWUuc2hpZnRSaWdodFVuc2lnbmVkKDI4KS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgcGFydDIgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoNTYpLnRvSW50KCkgPj4+IDA7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0MiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydDEgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0MCA8IDEgPDwgMTQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0MCA8IDEgPDwgNyA/IDEgOiAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQwIDwgMSA8PCAyMSA/IDMgOiA0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydDEgPCAxIDw8IDE0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydDEgPCAxIDw8IDcgPyA1IDogNjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0MSA8IDEgPDwgMjEgPyA3IDogODtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFydDIgPCAxIDw8IDcgPyA5IDogMTA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWmlnemFnIGVuY29kZXMgYSBzaWduZWQgNjRiaXQgaW50ZWdlciBzbyB0aGF0IGl0IGNhbiBiZSBlZmZlY3RpdmVseSB1c2VkIHdpdGggdmFyaW50IGVuY29kaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBTaWduZWQgbG9uZ1xyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ30gVW5zaWduZWQgemlnemFnIGVuY29kZWQgbG9uZ1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTY0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLnVuc2lnbmVkICE9PSBmYWxzZSkgdmFsdWUgPSB2YWx1ZS50b1NpZ25lZCgpO1xuICAgICAgICAgICAgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL3dpcmVfZm9ybWF0X2xpdGUuaFxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc2hpZnRMZWZ0KDEpLnhvcih2YWx1ZS5zaGlmdFJpZ2h0KDYzKSkudG9VbnNpZ25lZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYSB6aWd6YWcgZW5jb2RlZCBzaWduZWQgNjRiaXQgaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcn0gdmFsdWUgVW5zaWduZWQgemlnemFnIGVuY29kZWQgbG9uZyBvciBKYXZhU2NyaXB0IG51bWJlclxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2lnbmVkIGxvbmdcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS51bnNpZ25lZCAhPT0gZmFsc2UpIHZhbHVlID0gdmFsdWUudG9TaWduZWQoKTtcbiAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNoaWZ0UmlnaHRVbnNpZ25lZCgxKS54b3IodmFsdWUuYW5kKExvbmcuT05FKS50b1NpZ25lZCgpLm5lZ2F0ZSgpKS50b1NpZ25lZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfExvbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSBgdGhpc2AgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZhcmludDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUudW5zaWduZWQgIT09IGZhbHNlKSB2YWx1ZSA9IHZhbHVlLnRvU2lnbmVkKCk7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50NjQodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgcGFydDAgPSB2YWx1ZS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgcGFydDEgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoMjgpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MiA9IHZhbHVlLnNoaWZ0UmlnaHRVbnNpZ25lZCg1NikudG9JbnQoKSA+Pj4gMDtcclxuICAgICAgICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgICAgICAgICB2YXIgY2FwYWNpdHkxMSA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxMSlcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTEgOiBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0IC09IHNpemU7XG4gICAgICAgICAgICBzd2l0Y2ggKHNpemUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHRoaXMudmlld1tvZmZzZXQrOV0gPSAocGFydDIgPj4+ICA3KSAmIDB4MDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDkgOiB0aGlzLnZpZXdbb2Zmc2V0KzhdID0gc2l6ZSAhPT0gOSA/IChwYXJ0MiAgICAgICApIHwgMHg4MCA6IChwYXJ0MiAgICAgICApICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgOCA6IHRoaXMudmlld1tvZmZzZXQrN10gPSBzaXplICE9PSA4ID8gKHBhcnQxID4+PiAyMSkgfCAweDgwIDogKHBhcnQxID4+PiAyMSkgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3IDogdGhpcy52aWV3W29mZnNldCs2XSA9IHNpemUgIT09IDcgPyAocGFydDEgPj4+IDE0KSB8IDB4ODAgOiAocGFydDEgPj4+IDE0KSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDYgOiB0aGlzLnZpZXdbb2Zmc2V0KzVdID0gc2l6ZSAhPT0gNiA/IChwYXJ0MSA+Pj4gIDcpIHwgMHg4MCA6IChwYXJ0MSA+Pj4gIDcpICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgNSA6IHRoaXMudmlld1tvZmZzZXQrNF0gPSBzaXplICE9PSA1ID8gKHBhcnQxICAgICAgICkgfCAweDgwIDogKHBhcnQxICAgICAgICkgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0IDogdGhpcy52aWV3W29mZnNldCszXSA9IHNpemUgIT09IDQgPyAocGFydDAgPj4+IDIxKSB8IDB4ODAgOiAocGFydDAgPj4+IDIxKSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMgOiB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gc2l6ZSAhPT0gMyA/IChwYXJ0MCA+Pj4gMTQpIHwgMHg4MCA6IChwYXJ0MCA+Pj4gMTQpICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMiA6IHRoaXMudmlld1tvZmZzZXQrMV0gPSBzaXplICE9PSAyID8gKHBhcnQwID4+PiAgNykgfCAweDgwIDogKHBhcnQwID4+PiAgNykgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxIDogdGhpcy52aWV3W29mZnNldCAgXSA9IHNpemUgIT09IDEgPyAocGFydDAgICAgICAgKSB8IDB4ODAgOiAocGFydDAgICAgICAgKSAmIDB4N0Y7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzaXplO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIHppZy16YWcgZW5jb2RlZCA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnxMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gYHRoaXNgIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4uXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWYXJpbnQ2NFppZ1phZyA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVWYXJpbnQ2NChCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTY0KHZhbHVlKSwgb2Zmc2V0KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLiBSZXF1aXJlcyBMb25nLmpzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ3whe3ZhbHVlOiBMb25nLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkIGFuZFxyXG4gICAgICAgICAqICB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWYXJpbnQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvaW8vY29kZWRfc3RyZWFtLmNjXHJcbiAgICAgICAgICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgICAgIHBhcnQwID0gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQxID0gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQyID0gMCxcclxuICAgICAgICAgICAgICAgIGIgID0gMDtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwICA9IChiICYgMHg3RikgICAgICA7IGlmICggYiAmIDB4ODAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwIHw9IChiICYgMHg3RikgPDwgIDc7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwIHw9IChiICYgMHg3RikgPDwgMTQ7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQwIHw9IChiICYgMHg3RikgPDwgMjE7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxICA9IChiICYgMHg3RikgICAgICA7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxIHw9IChiICYgMHg3RikgPDwgIDc7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxIHw9IChiICYgMHg3RikgPDwgMTQ7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQxIHw9IChiICYgMHg3RikgPDwgMjE7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQyICA9IChiICYgMHg3RikgICAgICA7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107IHBhcnQyIHw9IChiICYgMHg3RikgPDwgIDc7IGlmICgoYiAmIDB4ODApIHx8ICh0aGlzLm5vQXNzZXJ0ICYmIHR5cGVvZiBiID09PSAndW5kZWZpbmVkJykpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJCdWZmZXIgb3ZlcnJ1blwiKTsgfX19fX19fX19fVxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBMb25nLmZyb21CaXRzKHBhcnQwIHwgKHBhcnQxIDw8IDI4KSwgKHBhcnQxID4+PiA0KSB8IChwYXJ0MikgPDwgMjQsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xlbmd0aCc6IG9mZnNldC1zdGFydFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlYWRzIGEgemlnLXphZyBlbmNvZGVkIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLiBSZXF1aXJlcyBMb25nLmpzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ3whe3ZhbHVlOiBMb25nLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkIGFuZFxyXG4gICAgICAgICAqICB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCdzIG5vdCBhIHZhbGlkIHZhcmludFxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWYXJpbnQ2NFppZ1phZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpcy5yZWFkVmFyaW50NjQob2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKHZhbCAmJiB2YWxbJ3ZhbHVlJ10gaW5zdGFuY2VvZiBMb25nKVxyXG4gICAgICAgICAgICAgICAgdmFsW1widmFsdWVcIl0gPSBCeXRlQnVmZmVyLnppZ1phZ0RlY29kZTY0KHZhbFtcInZhbHVlXCJdKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdmFsID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCh2YWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfSAvLyBMb25nXHJcblxyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvY3N0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgTlVMTC10ZXJtaW5hdGVkIFVURjggZW5jb2RlZCBzdHJpbmcuIEZvciB0aGlzIHRvIHdvcmsgdGhlIHNwZWNpZmllZCBzdHJpbmcgbXVzdCBub3QgY29udGFpbiBhbnkgTlVMTFxyXG4gICAgICogIGNoYXJhY3RlcnMgaXRzZWxmLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIGNvbnRhaW5lZCBpbiBgc3RyYCArIDEgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlQ1N0cmluZyA9IGZ1bmN0aW9uKHN0ciwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICBrID0gc3RyLmxlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgZm9yIChpPTA7IGk8azsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgc3RyOiBDb250YWlucyBOVUxMLWNoYXJhY3RlcnNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVURjggc3RyaW5ncyBkbyBub3QgY29udGFpbiB6ZXJvIGJ5dGVzIGluIGJldHdlZW4gZXhjZXB0IGZvciB0aGUgemVybyBjaGFyYWN0ZXIsIHNvOlxyXG4gICAgICAgIGsgPSB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpKVsxXTtcclxuICAgICAgICBvZmZzZXQgKz0gaysxO1xuICAgICAgICB2YXIgY2FwYWNpdHkxMiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEyKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTIgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTEyIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IGsrMTtcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSAwO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgTlVMTC10ZXJtaW5hdGVkIFVURjggZW5jb2RlZCBzdHJpbmcuIEZvciB0aGlzIHRvIHdvcmsgdGhlIHN0cmluZyByZWFkIG11c3Qgbm90IGNvbnRhaW4gYW55IE5VTEwgY2hhcmFjdGVyc1xyXG4gICAgICogIGl0c2VsZi5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCF7c3RyaW5nOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHN0cmluZyByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBzdHJpbmdcclxuICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRDU3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMSA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICB0ZW1wO1xyXG4gICAgICAgIC8vIFVURjggc3RyaW5ncyBkbyBub3QgY29udGFpbiB6ZXJvIGJ5dGVzIGluIGJldHdlZW4gZXhjZXB0IGZvciB0aGUgemVybyBjaGFyYWN0ZXIgaXRzZWxmLCBzbzpcclxuICAgICAgICB2YXIgc2QsIGIgPSAtMTtcclxuICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoYiA9PT0gMCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIrb2Zmc2V0K1wiIDwgXCIrdGhpcy5saW1pdCk7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdO1xyXG4gICAgICAgICAgICByZXR1cm4gYiA9PT0gMCA/IG51bGwgOiBiO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgc2QgPSBzdHJpbmdEZXN0aW5hdGlvbigpLCB0cnVlKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcInN0cmluZ1wiOiBzZCgpLFxyXG4gICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvaXN0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgbGVuZ3RoIGFzIHVpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN3cml0ZVZhcmludDMyXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJU3RyaW5nID0gZnVuY3Rpb24oc3RyLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgIGs7XHJcbiAgICAgICAgayA9IHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0ciksIHRoaXMubm9Bc3NlcnQpWzFdO1xyXG4gICAgICAgIG9mZnNldCArPSA0K2s7XG4gICAgICAgIHZhciBjYXBhY2l0eTEzID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTMpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxMyAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTMgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gNCtrO1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAoayA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoayA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoayA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgayAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAoayA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAoayA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoayA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgayAgICAgICAgICYgMHhGRjtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4KHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSBiO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gc3RhcnQgKyA0ICsgaylcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IFRydW5jYXRlZCBkYXRhLCBcIitvZmZzZXQrXCIgPT0gXCIrKG9mZnNldCs0K2spKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSBsZW5ndGggYXMgdWludDMyIHByZWZpeGVkIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgKiAgcmVhZCBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNyZWFkVmFyaW50MzJcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSVN0cmluZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis0K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgICAgICB2YXIgbGVuID0gdGhpcy5yZWFkVWludDMyKG9mZnNldCk7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMucmVhZFVURjhTdHJpbmcobGVuLCBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMsIG9mZnNldCArPSA0KTtcclxuICAgICAgICBvZmZzZXQgKz0gc3RyWydsZW5ndGgnXTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJbJ3N0cmluZyddO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnc3RyaW5nJzogc3RyWydzdHJpbmcnXSxcclxuICAgICAgICAgICAgICAgICdsZW5ndGgnOiBvZmZzZXQgLSBzdGFydFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gdHlwZXMvc3RyaW5ncy91dGY4c3RyaW5nXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRyaWNzIHJlcHJlc2VudGluZyBudW1iZXIgb2YgVVRGOCBjaGFyYWN0ZXJzLiBFdmFsdWF0ZXMgdG8gYGNgLlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlMgPSAnYyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRyaWNzIHJlcHJlc2VudGluZyBudW1iZXIgb2YgYnl0ZXMuIEV2YWx1YXRlcyB0byBgYmAuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuTUVUUklDU19CWVRFUyA9ICdiJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVURjhTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBrO1xyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSlbMV07XHJcbiAgICAgICAgb2Zmc2V0ICs9IGs7XG4gICAgICAgIHZhciBjYXBhY2l0eTE0ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTQpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxNCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTQgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gaztcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVURjhTdHJpbmd9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gdGhpcyBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlU3RyaW5nID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVURjhTdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgVVRGOCBjaGFyYWN0ZXJzIG9mIGEgc3RyaW5nLiBKYXZhU2NyaXB0IGl0c2VsZiB1c2VzIFVURi0xNiwgc28gdGhhdCBhIHN0cmluZydzXHJcbiAgICAgKiAgYGxlbmd0aGAgcHJvcGVydHkgZG9lcyBub3QgcmVmbGVjdCBpdHMgYWN0dWFsIFVURjggc2l6ZSBpZiBpdCBjb250YWlucyBjb2RlIHBvaW50cyBsYXJnZXIgdGhhbiAweEZGRkYuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjYWxjdWxhdGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGNoYXJhY3RlcnNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVVVEY4Q2hhcnMgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSlbMF07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgb2YgYSBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjYWxjdWxhdGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGJ5dGVzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVVRGOEJ5dGVzID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0cikpWzFdO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIG9mIGEgc3RyaW5nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyLmNhbGN1bGF0ZVVURjhCeXRlc30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNhbGN1bGF0ZVxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gTnVtYmVyIG9mIFVURjggYnl0ZXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVTdHJpbmcgPSBCeXRlQnVmZmVyLmNhbGN1bGF0ZVVURjhCeXRlcztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIE51bWJlciBvZiBjaGFyYWN0ZXJzIG9yIGJ5dGVzIHRvIHJlYWQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1ldHJpY3MgTWV0cmljcyBzcGVjaWZ5aW5nIHdoYXQgYGxlbmd0aGAgaXMgbWVhbnQgdG8gY291bnQuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSU30uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgKiAgcmVhZCBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVVRGOFN0cmluZyA9IGZ1bmN0aW9uKGxlbmd0aCwgbWV0cmljcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRyaWNzID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBtZXRyaWNzO1xyXG4gICAgICAgICAgICBtZXRyaWNzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRyaWNzID09PSAndW5kZWZpbmVkJykgbWV0cmljcyA9IEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSUztcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBsZW5ndGg6IFwiK2xlbmd0aCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgbGVuZ3RoIHw9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGkgPSAwLFxyXG4gICAgICAgICAgICBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgc2Q7XHJcbiAgICAgICAgaWYgKG1ldHJpY3MgPT09IEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSUykgeyAvLyBUaGUgc2FtZSBmb3Igbm9kZSBhbmQgdGhlIGJyb3dzZXJcclxuICAgICAgICAgICAgc2QgPSBzdHJpbmdEZXN0aW5hdGlvbigpO1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjgoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA8IGxlbmd0aCAmJiBvZmZzZXQgPCB0aGlzLmxpbWl0ID8gdGhpcy52aWV3W29mZnNldCsrXSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgZnVuY3Rpb24oY3ApIHtcclxuICAgICAgICAgICAgICAgICsraTsgdXRmeC5VVEY4dG9VVEYxNihjcCwgc2QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGkgIT09IGxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIraStcIiA9PSBcIitsZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCI6IHNkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG1ldHJpY3MgPT09IEJ5dGVCdWZmZXIuTUVUUklDU19CWVRFUykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyBsZW5ndGggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrbGVuZ3RoK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGsgPSBvZmZzZXQgKyBsZW5ndGg7XHJcbiAgICAgICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0IDwgayA/IHRoaXMudmlld1tvZmZzZXQrK10gOiBudWxsO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKSwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGspXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA9PSBcIitrKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJzogc2QoKSxcclxuICAgICAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgbWV0cmljczogXCIrbWV0cmljcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVVRGOFN0cmluZ30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGNoYXJhY3RlcnMgb3IgYnl0ZXMgdG8gcmVhZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtZXRyaWNzIE1ldHJpY3Mgc3BlY2lmeWluZyB3aGF0IGBuYCBpcyBtZWFudCB0byBjb3VudC4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5NRVRSSUNTX0NIQVJTfS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCF7c3RyaW5nOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHN0cmluZyByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBzdHJpbmdcclxuICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRTdHJpbmcgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVVEY4U3RyaW5nO1xyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvdnN0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgbGVuZ3RoIGFzIHZhcmludDMyIHByZWZpeGVkIFVURjggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gYHRoaXNgIGlmIGBvZmZzZXRgIGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3dyaXRlVmFyaW50MzJcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVZTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgaywgbDtcclxuICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgdGhpcy5ub0Fzc2VydClbMV07XHJcbiAgICAgICAgbCA9IEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50MzIoayk7XHJcbiAgICAgICAgb2Zmc2V0ICs9IGwraztcbiAgICAgICAgdmFyIGNhcGFjaXR5MTUgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxNSlcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTE1ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxNSA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSBsK2s7XG4gICAgICAgIG9mZnNldCArPSB0aGlzLndyaXRlVmFyaW50MzIoaywgb2Zmc2V0KTtcclxuICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4KHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrK10gPSBiO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gc3RhcnQraytsKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA9PSBcIisob2Zmc2V0K2srbCkpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIGxlbmd0aCBhcyB2YXJpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICogIHJlYWQgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjcmVhZFZhcmludDMyXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFZTdHJpbmcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMucmVhZFZhcmludDMyKG9mZnNldCk7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMucmVhZFVURjhTdHJpbmcobGVuWyd2YWx1ZSddLCBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMsIG9mZnNldCArPSBsZW5bJ2xlbmd0aCddKTtcclxuICAgICAgICBvZmZzZXQgKz0gc3RyWydsZW5ndGgnXTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJbJ3N0cmluZyddO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnc3RyaW5nJzogc3RyWydzdHJpbmcnXSxcclxuICAgICAgICAgICAgICAgICdsZW5ndGgnOiBvZmZzZXQgLSBzdGFydFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyBzb21lIGRhdGEgdG8gdGhpcyBCeXRlQnVmZmVyLiBUaGlzIHdpbGwgb3ZlcndyaXRlIGFueSBjb250ZW50cyBiZWhpbmQgdGhlIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlIGFwcGVuZGVkXHJcbiAgICAgKiAgZGF0YSdzIGxlbmd0aC5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZ30gc291cmNlIERhdGEgdG8gYXBwZW5kLiBJZiBgc291cmNlYCBpcyBhIEJ5dGVCdWZmZXIsIGl0cyBvZmZzZXRzXHJcbiAgICAgKiAgd2lsbCBiZSBtb2RpZmllZCBhY2NvcmRpbmcgdG8gdGhlIHBlcmZvcm1lZCByZWFkIG9wZXJhdGlvbi5cclxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gZW5jb2RpbmcgRW5jb2RpbmcgaWYgYGRhdGFgIGlzIGEgc3RyaW5nIChcImJhc2U2NFwiLCBcImhleFwiLCBcImJpbmFyeVwiLCBkZWZhdWx0cyB0byBcInV0ZjhcIilcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBhcHBlbmQgYXQuIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBleGFtcGxlIEEgcmVsYXRpdmUgYDwwMSAwMj4wMy5hcHBlbmQoPDA0IDA1PilgIHdpbGwgcmVzdWx0IGluIGA8MDEgMDIgMDQgMDU+LCAwNCAwNXxgXHJcbiAgICAgKiBAZXhhbXBsZSBBbiBhYnNvbHV0ZSBgPDAxIDAyPjAzLmFwcGVuZCgwNCAwNT4sIDEpYCB3aWxsIHJlc3VsdCBpbiBgPDAxIDA0PjA1LCAwNCAwNXxgXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc291cmNlLCBlbmNvZGluZywgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIEJ5dGVCdWZmZXIpKVxyXG4gICAgICAgICAgICBzb3VyY2UgPSBCeXRlQnVmZmVyLndyYXAoc291cmNlLCBlbmNvZGluZyk7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZS5saW1pdCAtIHNvdXJjZS5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKGxlbmd0aCA8PSAwKSByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byBhcHBlbmRcclxuICAgICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICB2YXIgY2FwYWNpdHkxNiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTE2KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTYgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTE2IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IGxlbmd0aDtcbiAgICAgICAgdGhpcy52aWV3LnNldChzb3VyY2Uudmlldy5zdWJhcnJheShzb3VyY2Uub2Zmc2V0LCBzb3VyY2UubGltaXQpLCBvZmZzZXQpO1xyXG4gICAgICAgIHNvdXJjZS5vZmZzZXQgKz0gbGVuZ3RoO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmRzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHRvIGFub3RoZXIgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYXQgYW5kIGFmdGVyIHRoZVxyXG4gICAgICAgIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlIGxlbmd0aCBvZiB0aGlzIEJ5dGVCdWZmZXIncyBkYXRhLlxyXG4gICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcn0gdGFyZ2V0IFRhcmdldCBCeXRlQnVmZmVyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gYXBwZW5kIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjYXBwZW5kXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuYXBwZW5kVG8gPSBmdW5jdGlvbih0YXJnZXQsIG9mZnNldCkge1xyXG4gICAgICAgIHRhcmdldC5hcHBlbmQodGhpcywgb2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGFzc2VydGlvbnMgb2YgYXJndW1lbnQgdHlwZXMgYW5kIG9mZnNldHMuIEFzc2VydGlvbnMgYXJlIGVuYWJsZWQgYnkgZGVmYXVsdCBidXQgeW91IGNhbiBvcHQgdG9cclxuICAgICAqICBkaXNhYmxlIHRoZW0gaWYgeW91ciBjb2RlIGFscmVhZHkgbWFrZXMgc3VyZSB0aGF0IGV2ZXJ5dGhpbmcgaXMgdmFsaWQuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFzc2VydCBgdHJ1ZWAgdG8gZW5hYmxlIGFzc2VydGlvbnMsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5hc3NlcnQgPSBmdW5jdGlvbihhc3NlcnQpIHtcclxuICAgICAgICB0aGlzLm5vQXNzZXJ0ID0gIWFzc2VydDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjYXBhY2l0eSBvZiB0aGlzIEJ5dGVCdWZmZXIncyBiYWNraW5nIGJ1ZmZlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IENhcGFjaXR5IG9mIHRoZSBiYWNraW5nIGJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNhcGFjaXR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhpcyBCeXRlQnVmZmVyJ3Mgb2Zmc2V0cyBieSBzZXR0aW5nIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gdG8gYDBgIGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0gdG8gdGhlXHJcbiAgICAgKiAgYmFja2luZyBidWZmZXIncyBjYXBhY2l0eS4gRGlzY2FyZHMge0BsaW5rIEJ5dGVCdWZmZXIjbWFya2VkT2Zmc2V0fS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHRoaXMubGltaXQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubWFya2VkT2Zmc2V0ID0gLTE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGNsb25lZCBpbnN0YW5jZSBvZiB0aGlzIEJ5dGVCdWZmZXIsIHByZXNldCB3aXRoIHRoaXMgQnl0ZUJ1ZmZlcidzIHZhbHVlcyBmb3Ige0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSxcclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBjb3B5IFdoZXRoZXIgdG8gY29weSB0aGUgYmFja2luZyBidWZmZXIgb3IgdG8gcmV0dXJuIGFub3RoZXIgdmlldyBvbiB0aGUgc2FtZSwgZGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBDbG9uZWQgaW5zdGFuY2VcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGNvcHkpIHtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigwLCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgaWYgKGNvcHkpIHtcclxuICAgICAgICAgICAgYmIuYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICBiYi52aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYmIuYnVmZmVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBiYi5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICAgICAgYmIudmlldyA9IHRoaXMudmlldztcclxuICAgICAgICB9XHJcbiAgICAgICAgYmIub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgYmIubWFya2VkT2Zmc2V0ID0gdGhpcy5tYXJrZWRPZmZzZXQ7XHJcbiAgICAgICAgYmIubGltaXQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYWN0cyB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgYmFja2VkIGJ5IGEge0BsaW5rIEJ5dGVCdWZmZXIjYnVmZmVyfSBvZiBpdHMgY29udGVudHMnIGxlbmd0aC4gQ29udGVudHMgYXJlIHRoZSBieXRlc1xyXG4gICAgICogIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LiBXaWxsIHNldCBgb2Zmc2V0ID0gMGAgYW5kIGBsaW1pdCA9IGNhcGFjaXR5YCBhbmRcclxuICAgICAqICBhZGFwdCB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9IHRvIHRoZSBzYW1lIHJlbGF0aXZlIHBvc2l0aW9uIGlmIHNldC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIHN0YXJ0IGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gMCAmJiBlbmQgPT09IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBBbHJlYWR5IGNvbXBhY3RlZFxyXG4gICAgICAgIHZhciBsZW4gPSBlbmQgLSBiZWdpbjtcclxuICAgICAgICBpZiAobGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gRU1QVFlfQlVGRkVSO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkgdGhpcy5tYXJrZWRPZmZzZXQgLT0gYmVnaW47XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5saW1pdCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGxlbik7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgIHZpZXcuc2V0KHRoaXMudmlldy5zdWJhcnJheShiZWdpbiwgZW5kKSk7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkgdGhpcy5tYXJrZWRPZmZzZXQgLT0gYmVnaW47XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHRoaXMubGltaXQgPSBsZW47XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlbiB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZFxyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gQmVnaW4gb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgRW5kIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBDb3B5XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJlZ2luID09PSBlbmQpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnl0ZUJ1ZmZlcigwLCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgdmFyIGNhcGFjaXR5ID0gZW5kIC0gYmVnaW4sXHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoY2FwYWNpdHksIHRoaXMubGl0dGxlRW5kaWFuLCB0aGlzLm5vQXNzZXJ0KTtcclxuICAgICAgICBiYi5vZmZzZXQgPSAwO1xyXG4gICAgICAgIGJiLmxpbWl0ID0gY2FwYWNpdHk7XHJcbiAgICAgICAgaWYgKGJiLm1hcmtlZE9mZnNldCA+PSAwKSBiYi5tYXJrZWRPZmZzZXQgLT0gYmVnaW47XHJcbiAgICAgICAgdGhpcy5jb3B5VG8oYmIsIDAsIGJlZ2luLCBlbmQpO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3BpZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgdG8gYW5vdGhlciBCeXRlQnVmZmVyLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmRcclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfSB0YXJnZXQgVGFyZ2V0IEJ5dGVCdWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gdGFyZ2V0T2Zmc2V0IE9mZnNldCB0byBjb3B5IHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2UgdGhlIHRhcmdldCdzIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH1cclxuICAgICAqICBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGNvcGllZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzb3VyY2VPZmZzZXQgT2Zmc2V0IHRvIHN0YXJ0IGNvcHlpbmcgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlXHJcbiAgICAgKiAgbnVtYmVyIG9mIGJ5dGVzIGNvcGllZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzb3VyY2VMaW1pdCBPZmZzZXQgdG8gZW5kIGNvcHlpbmcgZnJvbSwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9XHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jb3B5VG8gPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldE9mZnNldCwgc291cmNlT2Zmc2V0LCBzb3VyY2VMaW1pdCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSxcclxuICAgICAgICAgICAgdGFyZ2V0UmVsYXRpdmU7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICghQnl0ZUJ1ZmZlci5pc0J5dGVCdWZmZXIodGFyZ2V0KSlcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdGFyZ2V0OiBOb3QgYSBCeXRlQnVmZmVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXRPZmZzZXQgPSAodGFyZ2V0UmVsYXRpdmUgPSB0eXBlb2YgdGFyZ2V0T2Zmc2V0ID09PSAndW5kZWZpbmVkJykgPyB0YXJnZXQub2Zmc2V0IDogdGFyZ2V0T2Zmc2V0IHwgMDtcclxuICAgICAgICBzb3VyY2VPZmZzZXQgPSAocmVsYXRpdmUgPSB0eXBlb2Ygc291cmNlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgPyB0aGlzLm9mZnNldCA6IHNvdXJjZU9mZnNldCB8IDA7XHJcbiAgICAgICAgc291cmNlTGltaXQgPSB0eXBlb2Ygc291cmNlTGltaXQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5saW1pdCA6IHNvdXJjZUxpbWl0IHwgMDtcclxuXHJcbiAgICAgICAgaWYgKHRhcmdldE9mZnNldCA8IDAgfHwgdGFyZ2V0T2Zmc2V0ID4gdGFyZ2V0LmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCB0YXJnZXQgcmFuZ2U6IDAgPD0gXCIrdGFyZ2V0T2Zmc2V0K1wiIDw9IFwiK3RhcmdldC5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHNvdXJjZU9mZnNldCA8IDAgfHwgc291cmNlTGltaXQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBzb3VyY2UgcmFuZ2U6IDAgPD0gXCIrc291cmNlT2Zmc2V0K1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG5cclxuICAgICAgICB2YXIgbGVuID0gc291cmNlTGltaXQgLSBzb3VyY2VPZmZzZXQ7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDsgLy8gTm90aGluZyB0byBjb3B5XHJcblxyXG4gICAgICAgIHRhcmdldC5lbnN1cmVDYXBhY2l0eSh0YXJnZXRPZmZzZXQgKyBsZW4pO1xyXG5cclxuICAgICAgICB0YXJnZXQudmlldy5zZXQodGhpcy52aWV3LnN1YmFycmF5KHNvdXJjZU9mZnNldCwgc291cmNlTGltaXQpLCB0YXJnZXRPZmZzZXQpO1xyXG5cclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IGxlbjtcclxuICAgICAgICBpZiAodGFyZ2V0UmVsYXRpdmUpIHRhcmdldC5vZmZzZXQgKz0gbGVuO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlcyBzdXJlIHRoYXQgdGhpcyBCeXRlQnVmZmVyIGlzIGJhY2tlZCBieSBhIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn0gb2YgYXQgbGVhc3QgdGhlIHNwZWNpZmllZCBjYXBhY2l0eS4gSWYgdGhlXHJcbiAgICAgKiAgY3VycmVudCBjYXBhY2l0eSBpcyBleGNlZWRlZCwgaXQgd2lsbCBiZSBkb3VibGVkLiBJZiBkb3VibGUgdGhlIGN1cnJlbnQgY2FwYWNpdHkgaXMgbGVzcyB0aGFuIHRoZSByZXF1aXJlZCBjYXBhY2l0eSxcclxuICAgICAqICB0aGUgcmVxdWlyZWQgY2FwYWNpdHkgd2lsbCBiZSB1c2VkIGluc3RlYWQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2FwYWNpdHkgUmVxdWlyZWQgY2FwYWNpdHlcclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmVuc3VyZUNhcGFjaXR5ID0gZnVuY3Rpb24oY2FwYWNpdHkpIHtcclxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgaWYgKGN1cnJlbnQgPCBjYXBhY2l0eSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplKChjdXJyZW50ICo9IDIpID4gY2FwYWNpdHkgPyBjdXJyZW50IDogY2FwYWNpdHkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJ3cml0ZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW5cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlIEJ5dGUgdmFsdWUgdG8gZmlsbCB3aXRoLiBJZiBnaXZlbiBhcyBhIHN0cmluZywgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyB1c2VkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBCZWdpbiBvZmZzZXQuIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBFbmQgb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBleGFtcGxlIGBzb21lQnl0ZUJ1ZmZlci5jbGVhcigpLmZpbGwoMClgIGZpbGxzIHRoZSBlbnRpcmUgYmFja2luZyBidWZmZXIgd2l0aCB6ZXJvZXNcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24odmFsdWUsIGJlZ2luLCBlbmQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJlZ2luID49IGVuZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gZmlsbFxyXG4gICAgICAgIHdoaWxlIChiZWdpbiA8IGVuZCkgdGhpcy52aWV3W2JlZ2luKytdID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCA9IGJlZ2luO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIHRoaXMgQnl0ZUJ1ZmZlciByZWFkeSBmb3IgYSBuZXcgc2VxdWVuY2Ugb2Ygd3JpdGUgb3IgcmVsYXRpdmUgcmVhZCBvcGVyYXRpb25zLiBTZXRzIGBsaW1pdCA9IG9mZnNldGAgYW5kXHJcbiAgICAgKiAgYG9mZnNldCA9IDBgLiBNYWtlIHN1cmUgYWx3YXlzIHRvIGZsaXAgYSBCeXRlQnVmZmVyIHdoZW4gYWxsIHJlbGF0aXZlIHJlYWQgb3Igd3JpdGUgb3BlcmF0aW9ucyBhcmUgY29tcGxldGUuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5mbGlwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5saW1pdCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1hcmtzIGFuIG9mZnNldCBvbiB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgdXNlZCBsYXRlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBtYXJrLiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3Jlc2V0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUubWFyayA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIG9mZnNldCA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5vZmZzZXQgOiBvZmZzZXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGJ5dGUgb3JkZXIuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGxpdHRsZUVuZGlhbiBgdHJ1ZWAgZm9yIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlciwgYGZhbHNlYCBmb3IgYmlnIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUub3JkZXIgPSBmdW5jdGlvbihsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXR0bGVFbmRpYW4gIT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGl0dGxlRW5kaWFuOiBOb3QgYSBib29sZWFuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9ICEhbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3aXRjaGVzICh0bykgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIERlZmF1bHRzIHRvIGB0cnVlYCwgb3RoZXJ3aXNlIHVzZXMgYmlnIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuTEUgPSBmdW5jdGlvbihsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHR5cGVvZiBsaXR0bGVFbmRpYW4gIT09ICd1bmRlZmluZWQnID8gISFsaXR0bGVFbmRpYW4gOiB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3aXRjaGVzICh0bykgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYmlnRW5kaWFuIERlZmF1bHRzIHRvIGB0cnVlYCwgb3RoZXJ3aXNlIHVzZXMgbGl0dGxlIGVuZGlhblxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuQkUgPSBmdW5jdGlvbihiaWdFbmRpYW4pIHtcclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHR5cGVvZiBiaWdFbmRpYW4gIT09ICd1bmRlZmluZWQnID8gIWJpZ0VuZGlhbiA6IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJlcGVuZHMgc29tZSBkYXRhIHRvIHRoaXMgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYmVmb3JlIHRoZSBzcGVjaWZpZWQgb2Zmc2V0IHVwIHRvIHRoZVxyXG4gICAgICogIHByZXBlbmRlZCBkYXRhJ3MgbGVuZ3RoLiBJZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSBiZWZvcmUgdGhlIHNwZWNpZmllZCBgb2Zmc2V0YCwgdGhlIGJhY2tpbmcgYnVmZmVyXHJcbiAgICAgKiAgd2lsbCBiZSByZXNpemVkIGFuZCBpdHMgY29udGVudHMgbW92ZWQgYWNjb3JkaW5nbHkuXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfHN0cmluZ3whQXJyYXlCdWZmZXJ9IHNvdXJjZSBEYXRhIHRvIHByZXBlbmQuIElmIGBzb3VyY2VgIGlzIGEgQnl0ZUJ1ZmZlciwgaXRzIG9mZnNldCB3aWxsIGJlXHJcbiAgICAgKiAgbW9kaWZpZWQgYWNjb3JkaW5nIHRvIHRoZSBwZXJmb3JtZWQgcmVhZCBvcGVyYXRpb24uXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGVuY29kaW5nIEVuY29kaW5nIGlmIGBkYXRhYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG8gXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcHJlcGVuZCBhdC4gV2lsbCB1c2UgYW5kIGRlY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHByZXBlbmRlZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAZXhhbXBsZSBBIHJlbGF0aXZlIGAwMDwwMSAwMiAwMz4ucHJlcGVuZCg8MDQgMDU+KWAgcmVzdWx0cyBpbiBgPDA0IDA1IDAxIDAyIDAzPiwgMDQgMDV8YFxyXG4gICAgICogQGV4YW1wbGUgQW4gYWJzb2x1dGUgYDAwPDAxIDAyIDAzPi5wcmVwZW5kKDwwNCAwNT4sIDIpYCByZXN1bHRzIGluIGAwNDwwNSAwMiAwMz4sIDA0IDA1fGBcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24oc291cmNlLCBlbmNvZGluZywgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIEJ5dGVCdWZmZXIpKVxyXG4gICAgICAgICAgICBzb3VyY2UgPSBCeXRlQnVmZmVyLndyYXAoc291cmNlLCBlbmNvZGluZyk7XHJcbiAgICAgICAgdmFyIGxlbiA9IHNvdXJjZS5saW1pdCAtIHNvdXJjZS5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKGxlbiA8PSAwKSByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byBwcmVwZW5kXHJcbiAgICAgICAgdmFyIGRpZmYgPSBsZW4gLSBvZmZzZXQ7XHJcbiAgICAgICAgaWYgKGRpZmYgPiAwKSB7IC8vIE5vdCBlbm91Z2ggc3BhY2UgYmVmb3JlIG9mZnNldCwgc28gcmVzaXplICsgbW92ZVxyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggKyBkaWZmKTtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgICAgICB2aWV3LnNldCh0aGlzLnZpZXcuc3ViYXJyYXkob2Zmc2V0LCB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKSwgbGVuKTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IGRpZmY7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcmtlZE9mZnNldCA+PSAwKSB0aGlzLm1hcmtlZE9mZnNldCArPSBkaWZmO1xyXG4gICAgICAgICAgICB0aGlzLmxpbWl0ICs9IGRpZmY7XHJcbiAgICAgICAgICAgIG9mZnNldCArPSBkaWZmO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBhcnJheVZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlldy5zZXQoc291cmNlLnZpZXcuc3ViYXJyYXkoc291cmNlLm9mZnNldCwgc291cmNlLmxpbWl0KSwgb2Zmc2V0IC0gbGVuKTtcclxuXHJcbiAgICAgICAgc291cmNlLm9mZnNldCA9IHNvdXJjZS5saW1pdDtcclxuICAgICAgICBpZiAocmVsYXRpdmUpXHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwZW5kcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYW5vdGhlciBCeXRlQnVmZmVyLiBUaGlzIHdpbGwgb3ZlcndyaXRlIGFueSBjb250ZW50cyBiZWZvcmUgdGhlIHNwZWNpZmllZCBvZmZzZXQgdXAgdG8gdGhlXHJcbiAgICAgKiAgcHJlcGVuZGVkIGRhdGEncyBsZW5ndGguIElmIHRoZXJlIGlzIG5vdCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlIGJlZm9yZSB0aGUgc3BlY2lmaWVkIGBvZmZzZXRgLCB0aGUgYmFja2luZyBidWZmZXJcclxuICAgICAqICB3aWxsIGJlIHJlc2l6ZWQgYW5kIGl0cyBjb250ZW50cyBtb3ZlZCBhY2NvcmRpbmdseS5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ9IHRhcmdldCBUYXJnZXQgQnl0ZUJ1ZmZlclxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHByZXBlbmQgYXQuIFdpbGwgdXNlIGFuZCBkZWNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICBwcmVwZW5kZWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3ByZXBlbmRcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5wcmVwZW5kVG8gPSBmdW5jdGlvbih0YXJnZXQsIG9mZnNldCkge1xyXG4gICAgICAgIHRhcmdldC5wcmVwZW5kKHRoaXMsIG9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludHMgZGVidWcgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyk9fSBvdXQgT3V0cHV0IGZ1bmN0aW9uIHRvIGNhbGwsIGRlZmF1bHRzIHRvIGNvbnNvbGUubG9nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucHJpbnREZWJ1ZyA9IGZ1bmN0aW9uKG91dCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3V0ICE9PSAnZnVuY3Rpb24nKSBvdXQgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xyXG4gICAgICAgIG91dChcclxuICAgICAgICAgICAgdGhpcy50b1N0cmluZygpK1wiXFxuXCIrXHJcbiAgICAgICAgICAgIFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblwiK1xyXG4gICAgICAgICAgICB0aGlzLnRvRGVidWcoLyogY29sdW1ucyAqLyB0cnVlKVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHJlbWFpbmluZyByZWFkYWJsZSBieXRlcy4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LCBzbyB0aGlzIHJldHVybnMgYGxpbWl0IC0gb2Zmc2V0YC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJlbWFpbmluZyByZWFkYWJsZSBieXRlcy4gTWF5IGJlIG5lZ2F0aXZlIGlmIGBvZmZzZXQgPiBsaW1pdGAuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVtYWluaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGltaXQgLSB0aGlzLm9mZnNldDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyB0aGlzIEJ5dGVCdWZmZXIncyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LiBJZiBhbiBvZmZzZXQgaGFzIGJlZW4gbWFya2VkIHRocm91Z2gge0BsaW5rIEJ5dGVCdWZmZXIjbWFya31cclxuICAgICAqICBiZWZvcmUsIGBvZmZzZXRgIHdpbGwgYmUgc2V0IHRvIHtAbGluayBCeXRlQnVmZmVyI21hcmtlZE9mZnNldH0sIHdoaWNoIHdpbGwgdGhlbiBiZSBkaXNjYXJkZWQuIElmIG5vIG9mZnNldCBoYXMgYmVlblxyXG4gICAgICogIG1hcmtlZCwgc2V0cyBgb2Zmc2V0ID0gMGAuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNtYXJrXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMubWFya2VkT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemVzIHRoaXMgQnl0ZUJ1ZmZlciB0byBiZSBiYWNrZWQgYnkgYSBidWZmZXIgb2YgYXQgbGVhc3QgdGhlIGdpdmVuIGNhcGFjaXR5LiBXaWxsIGRvIG5vdGhpbmcgaWYgYWxyZWFkeSB0aGF0XHJcbiAgICAgKiAgbGFyZ2Ugb3IgbGFyZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5IENhcGFjaXR5IHJlcXVpcmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYGNhcGFjaXR5YCBpcyBub3QgYSBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBjYXBhY2l0eSA8IDBgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oY2FwYWNpdHkpIHtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYXBhY2l0eSAhPT0gJ251bWJlcicgfHwgY2FwYWNpdHkgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgY2FwYWNpdHk6IFwiK2NhcGFjaXR5K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBjYXBhY2l0eSB8PSAwO1xuICAgICAgICAgICAgaWYgKGNhcGFjaXR5IDwgMClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIGNhcGFjaXR5OiAwIDw9IFwiK2NhcGFjaXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggPCBjYXBhY2l0eSkge1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGNhcGFjaXR5KTtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgICAgICB2aWV3LnNldCh0aGlzLnZpZXcpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXZlcnNlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIHN0YXJ0IGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gZW5kKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gTm90aGluZyB0byByZXZlcnNlXHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnJldmVyc2UuY2FsbCh0aGlzLnZpZXcuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2tpcHMgdGhlIG5leHQgYGxlbmd0aGAgYnl0ZXMuIFRoaXMgd2lsbCBqdXN0IGFkdmFuY2VcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGJ5dGVzIHRvIHNraXAuIE1heSBhbHNvIGJlIG5lZ2F0aXZlIHRvIG1vdmUgdGhlIG9mZnNldCBiYWNrLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uKGxlbmd0aCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicgfHwgbGVuZ3RoICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGxlbmd0aDogXCIrbGVuZ3RoK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBsZW5ndGggfD0gMDtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCArIGxlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIGxlbmd0aDogMCA8PSBcIit0aGlzLm9mZnNldCtcIiArIFwiK2xlbmd0aCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2xpY2VzIHRoaXMgQnl0ZUJ1ZmZlciBieSBjcmVhdGluZyBhIGNsb25lZCBpbnN0YW5jZSB3aXRoIGBvZmZzZXQgPSBiZWdpbmAgYW5kIGBsaW1pdCA9IGVuZGAuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIEJlZ2luIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIEVuZCBvZmZzZXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQ2xvbmUgb2YgdGhpcyBCeXRlQnVmZmVyIHdpdGggc2xpY2luZyBhcHBsaWVkLCBiYWNrZWQgYnkgdGhlIHNhbWUge0BsaW5rIEJ5dGVCdWZmZXIjYnVmZmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgZW5kID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYmIgPSB0aGlzLmNsb25lKCk7XHJcbiAgICAgICAgYmIub2Zmc2V0ID0gYmVnaW47XHJcbiAgICAgICAgYmIubGltaXQgPSBlbmQ7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGJhY2tpbmcgYnVmZmVyIHRoYXQgY29udGFpbnMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlblxyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZvcmNlQ29weSBJZiBgdHJ1ZWAgcmV0dXJucyBhIGNvcHksIG90aGVyd2lzZSByZXR1cm5zIGEgdmlldyByZWZlcmVuY2luZyB0aGUgc2FtZSBtZW1vcnkgaWZcclxuICAgICAqICBwb3NzaWJsZS4gRGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMgeyFBcnJheUJ1ZmZlcn0gQ29udGVudHMgYXMgYW4gQXJyYXlCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uKGZvcmNlQ29weSkge1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCxcclxuICAgICAgICAgICAgbGltaXQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaW1pdCAhPT0gJ251bWJlcicgfHwgbGltaXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGltaXQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgbGltaXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gbGltaXQgfHwgbGltaXQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK29mZnNldCtcIiA8PSBcIitsaW1pdCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5PVEU6IEl0J3Mgbm90IHBvc3NpYmxlIHRvIGhhdmUgYW5vdGhlciBBcnJheUJ1ZmZlciByZWZlcmVuY2UgdGhlIHNhbWUgbWVtb3J5IGFzIHRoZSBiYWNraW5nIGJ1ZmZlci4gVGhpcyBpc1xyXG4gICAgICAgIC8vIHBvc3NpYmxlIHdpdGggVWludDhBcnJheSNzdWJhcnJheSBvbmx5LCBidXQgd2UgaGF2ZSB0byByZXR1cm4gYW4gQXJyYXlCdWZmZXIgYnkgY29udHJhY3QuIFNvOlxyXG4gICAgICAgIGlmICghZm9yY2VDb3B5ICYmIG9mZnNldCA9PT0gMCAmJiBsaW1pdCA9PT0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xyXG4gICAgICAgIGlmIChvZmZzZXQgPT09IGxpbWl0KVxyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xyXG4gICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGltaXQgLSBvZmZzZXQpO1xyXG4gICAgICAgIG5ldyBVaW50OEFycmF5KGJ1ZmZlcikuc2V0KG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKS5zdWJhcnJheShvZmZzZXQsIGxpbWl0KSwgMCk7XHJcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgcmF3IGJ1ZmZlciBjb21wYWN0ZWQgdG8gY29udGFpbiB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cy4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3RvQnVmZmVyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VDb3B5IElmIGB0cnVlYCByZXR1cm5zIGEgY29weSwgb3RoZXJ3aXNlIHJldHVybnMgYSB2aWV3IHJlZmVyZW5jaW5nIHRoZSBzYW1lIG1lbW9yeS5cclxuICAgICAqICBEZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICAgKiBAcmV0dXJucyB7IUFycmF5QnVmZmVyfSBDb250ZW50cyBhcyBhbiBBcnJheUJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQXJyYXlCdWZmZXIgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQnVmZmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZW5jb2RpbmcgT3V0cHV0IGVuY29kaW5nLiBSZXR1cm5zIGFuIGluZm9ybWF0aXZlIHN0cmluZyByZXByZXNlbnRhdGlvbiBpZiBvbWl0dGVkIGJ1dCBhbHNvIGFsbG93c1xyXG4gICAgICogIGRpcmVjdCBjb252ZXJzaW9uIHRvIFwidXRmOFwiLCBcImhleFwiLCBcImJhc2U2NFwiIGFuZCBcImJpbmFyeVwiIGVuY29kaW5nLiBcImRlYnVnXCIgcmV0dXJucyBhIGhleCByZXByZXNlbnRhdGlvbiB3aXRoXHJcbiAgICAgKiAgaGlnaGxpZ2h0ZWQgb2Zmc2V0cy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH1cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvblxyXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIGBlbmNvZGluZ2AgaXMgaW52YWxpZFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oZW5jb2RpbmcsIGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgcmV0dXJuIFwiQnl0ZUJ1ZmZlckFCKG9mZnNldD1cIit0aGlzLm9mZnNldCtcIixtYXJrZWRPZmZzZXQ9XCIrdGhpcy5tYXJrZWRPZmZzZXQrXCIsbGltaXQ9XCIrdGhpcy5saW1pdCtcIixjYXBhY2l0eT1cIit0aGlzLmNhcGFjaXR5KCkrXCIpXCI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIGVuY29kaW5nID0gXCJ1dGY4XCIsXHJcbiAgICAgICAgICAgIGJlZ2luID0gZW5jb2RpbmcsXHJcbiAgICAgICAgICAgIGVuZCA9IGJlZ2luO1xyXG4gICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcclxuICAgICAgICAgICAgY2FzZSBcInV0ZjhcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvVVRGOChiZWdpbiwgZW5kKTtcclxuICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9CYXNlNjQoYmVnaW4sIGVuZCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJoZXhcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvSGV4KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0JpbmFyeShiZWdpbiwgZW5kKTtcclxuICAgICAgICAgICAgY2FzZSBcImRlYnVnXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RlYnVnKCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjb2x1bW5zXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0NvbHVtbnMoKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgZW5jb2Rpbmc6IFwiK2VuY29kaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGx4aXYtZW1iZWRkYWJsZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbHhpdi1lbWJlZGRhYmxlIChjKSAyMDE0IERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXHJcbiAgICAgKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kY29kZUlPL2x4aXYgZm9yIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgdmFyIGx4aXYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogbHhpdiBuYW1lc3BhY2UuXHJcbiAgICAgICAgICogQHR5cGUgeyFPYmplY3QuPHN0cmluZywqPn1cclxuICAgICAgICAgKiBAZXhwb3J0cyBseGl2XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGx4aXYgPSB7fTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhcmFjdGVyIGNvZGVzIGZvciBvdXRwdXQuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheS48bnVtYmVyPn1cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgYW91dCA9IFtcclxuICAgICAgICAgICAgNjUsIDY2LCA2NywgNjgsIDY5LCA3MCwgNzEsIDcyLCA3MywgNzQsIDc1LCA3NiwgNzcsIDc4LCA3OSwgODAsXHJcbiAgICAgICAgICAgIDgxLCA4MiwgODMsIDg0LCA4NSwgODYsIDg3LCA4OCwgODksIDkwLCA5NywgOTgsIDk5LCAxMDAsIDEwMSwgMTAyLFxyXG4gICAgICAgICAgICAxMDMsIDEwNCwgMTA1LCAxMDYsIDEwNywgMTA4LCAxMDksIDExMCwgMTExLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsXHJcbiAgICAgICAgICAgIDExOSwgMTIwLCAxMjEsIDEyMiwgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDQzLCA0N1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoYXJhY3RlciBjb2RlcyBmb3IgaW5wdXQuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheS48bnVtYmVyPn1cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgYWluID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaT0wLCBrPWFvdXQubGVuZ3RoOyBpPGs7ICsraSlcclxuICAgICAgICAgICAgYWluW2FvdXRbaV1dID0gaTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5jb2RlcyBieXRlcyB0byBiYXNlNjQgY2hhciBjb2Rlcy5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZlxyXG4gICAgICAgICAqICB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggZW5jb2RlZCBjaGFyXHJcbiAgICAgICAgICogIGNvZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbHhpdi5lbmNvZGUgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgYiwgdDtcclxuICAgICAgICAgICAgd2hpbGUgKChiID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBkc3QoYW91dFsoYj4+MikmMHgzZl0pO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiJjB4Myk8PDQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGIgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0IHw9IChiPj40KSYweGY7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbKHR8KChiPj40KSYweGYpKSYweDNmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IChiJjB4Zik8PDI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChiID0gc3JjKCkpICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFsodHwoKGI+PjYpJjB4MykpJjB4M2ZdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbYiYweDNmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFt0JjB4M2ZdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KDYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdChhb3V0W3QmMHgzZl0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCg2MSksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KDYxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYmFzZTY0IGNoYXIgY29kZXMgdG8gYnl0ZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHlcclxuICAgICAgICAgKiAgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZS5cclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYSBjaGFyYWN0ZXIgY29kZSBpcyBpbnZhbGlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbHhpdi5kZWNvZGUgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgYywgdDEsIHQyO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmYWlsKGMpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSWxsZWdhbCBjaGFyYWN0ZXIgY29kZTogXCIrYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2hpbGUgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0MSA9IGFpbltjXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdDEgPT09ICd1bmRlZmluZWQnKSBmYWlsKGMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdDIgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0MiA9PT0gJ3VuZGVmaW5lZCcpIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCh0MTw8Mik+Pj4wfCh0MiYweDMwKT4+NCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQxID0gYWluW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQxID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSA2MSkgYnJlYWs7IGVsc2UgZmFpbChjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KCgodDImMHhmKTw8NCk+Pj4wfCh0MSYweDNjKT4+Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdDIgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQyID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gNjEpIGJyZWFrOyBlbHNlIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc3QoKCh0MSYweDMpPDw2KT4+PjB8dDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGVzdHMgaWYgYSBzdHJpbmcgaXMgdmFsaWQgYmFzZTY0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHRlc3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHZhbGlkLCBvdGhlcndpc2UgYGZhbHNlYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGx4aXYudGVzdCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgICByZXR1cm4gL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvLnRlc3Qoc3RyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbHhpdjtcclxuICAgIH0oKTtcclxuXHJcbiAgICAvLyBlbmNvZGluZ3MvYmFzZTY0XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHRvIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBPZmZzZXQgdG8gYmVnaW4gYXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBPZmZzZXQgdG8gZW5kIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBiZWdpbmAgb3IgYGVuZGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQmFzZTY0ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBiZWdpbiA9IGJlZ2luIHwgMDsgZW5kID0gZW5kIHwgMDtcclxuICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGVuZCA+IHRoaXMuY2FwYWNpdHkgfHwgYmVnaW4gPiBlbmQpXHJcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJiZWdpbiwgZW5kXCIpO1xyXG4gICAgICAgIHZhciBzZDsgbHhpdi5lbmNvZGUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWdpbiA8IGVuZCA/IHRoaXMudmlld1tiZWdpbisrXSA6IG51bGw7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCkpO1xyXG4gICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gYSBCeXRlQnVmZmVyLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gZGVjb2RlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0ID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcInN0clwiKTtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihzdHIubGVuZ3RoLzQqMywgbGl0dGxlRW5kaWFuKSxcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgbHhpdi5kZWNvZGUoc3RyaW5nU291cmNlKHN0ciksIGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgYmIudmlld1tpKytdID0gYjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYi5saW1pdCA9IGk7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgYSBiaW5hcnkgc3RyaW5nIHRvIGJhc2U2NCBsaWtlIGB3aW5kb3cuYnRvYWAgZG9lcy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQmluYXJ5IHN0cmluZ1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cuYnRvYVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmJ0b2EgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmluYXJ5KHN0cikudG9CYXNlNjQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGJpbmFyeSBsaWtlIGB3aW5kb3cuYXRvYmAgZG9lcy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiNjQgQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBCaW5hcnkgc3RyaW5nXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cuYXRvYlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmF0b2IgPSBmdW5jdGlvbihiNjQpIHtcclxuICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0KGI2NCkudG9CaW5hcnkoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL2JpbmFyeVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYSBiaW5hcnkgZW5jb2RlZCBzdHJpbmcsIHRoYXQgaXMgdXNpbmcgb25seSBjaGFyYWN0ZXJzIDB4MDAtMHhGRiBhcyBieXRlcy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmluYXJ5IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0ID4gbGltaXRgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9CaW5hcnkgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGJlZ2luIHw9IDA7IGVuZCB8PSAwO1xyXG4gICAgICAgIGlmIChiZWdpbiA8IDAgfHwgZW5kID4gdGhpcy5jYXBhY2l0eSgpIHx8IGJlZ2luID4gZW5kKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiYmVnaW4sIGVuZFwiKTtcclxuICAgICAgICBpZiAoYmVnaW4gPT09IGVuZClcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgdmFyIGNoYXJzID0gW10sXHJcbiAgICAgICAgICAgIHBhcnRzID0gW107XHJcbiAgICAgICAgd2hpbGUgKGJlZ2luIDwgZW5kKSB7XHJcbiAgICAgICAgICAgIGNoYXJzLnB1c2godGhpcy52aWV3W2JlZ2luKytdKTtcclxuICAgICAgICAgICAgaWYgKGNoYXJzLmxlbmd0aCA+PSAxMDI0KVxyXG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2hhcnMpKSxcclxuICAgICAgICAgICAgICAgIGNoYXJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKSArIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaGFycyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIGJpbmFyeSBlbmNvZGVkIHN0cmluZywgdGhhdCBpcyB1c2luZyBvbmx5IGNoYXJhY3RlcnMgMHgwMC0weEZGIGFzIGJ5dGVzLCB0byBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQnl0ZUJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmZyb21CaW5hcnkgPSBmdW5jdGlvbihzdHIsIGxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwic3RyXCIpO1xyXG4gICAgICAgIHZhciBpID0gMCxcclxuICAgICAgICAgICAgayA9IHN0ci5sZW5ndGgsXHJcbiAgICAgICAgICAgIGNoYXJDb2RlLFxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKGssIGxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICBpZiAoY2hhckNvZGUgPiAweGZmKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcImlsbGVnYWwgY2hhciBjb2RlOiBcIitjaGFyQ29kZSk7XHJcbiAgICAgICAgICAgIGJiLnZpZXdbaSsrXSA9IGNoYXJDb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYi5saW1pdCA9IGs7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBlbmNvZGluZ3MvZGVidWdcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyIHRvIGEgaGV4IGVuY29kZWQgc3RyaW5nIHdpdGggbWFya2VkIG9mZnNldHMuIE9mZnNldCBzeW1ib2xzIGFyZTpcclxuICAgICAqICogYDxgIDogb2Zmc2V0LFxyXG4gICAgICogKiBgJ2AgOiBtYXJrZWRPZmZzZXQsXHJcbiAgICAgKiAqIGA+YCA6IGxpbWl0LFxyXG4gICAgICogKiBgfGAgOiBvZmZzZXQgYW5kIGxpbWl0LFxyXG4gICAgICogKiBgW2AgOiBvZmZzZXQgYW5kIG1hcmtlZE9mZnNldCxcclxuICAgICAqICogYF1gIDogbWFya2VkT2Zmc2V0IGFuZCBsaW1pdCxcclxuICAgICAqICogYCFgIDogb2Zmc2V0LCBtYXJrZWRPZmZzZXQgYW5kIGxpbWl0XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBjb2x1bW5zIElmIGB0cnVlYCByZXR1cm5zIHR3byBjb2x1bW5zIGhleCArIGFzY2lpLCBkZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCFBcnJheS48c3RyaW5nPn0gRGVidWcgc3RyaW5nIG9yIGFycmF5IG9mIGxpbmVzIGlmIGBhc0FycmF5ID0gdHJ1ZWBcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBleGFtcGxlIGA+MDAnMDEgMDI8MDNgIGNvbnRhaW5zIGZvdXIgYnl0ZXMgd2l0aCBgbGltaXQ9MCwgbWFya2VkT2Zmc2V0PTEsIG9mZnNldD0zYFxyXG4gICAgICogQGV4YW1wbGUgYDAwWzAxIDAyIDAzPmAgY29udGFpbnMgZm91ciBieXRlcyB3aXRoIGBvZmZzZXQ9bWFya2VkT2Zmc2V0PTEsIGxpbWl0PTRgXHJcbiAgICAgKiBAZXhhbXBsZSBgMDB8MDEgMDIgMDNgIGNvbnRhaW5zIGZvdXIgYnl0ZXMgd2l0aCBgb2Zmc2V0PWxpbWl0PTEsIG1hcmtlZE9mZnNldD0tMWBcclxuICAgICAqIEBleGFtcGxlIGB8YCBjb250YWlucyB6ZXJvIGJ5dGVzIHdpdGggYG9mZnNldD1saW1pdD0wLCBtYXJrZWRPZmZzZXQ9LTFgXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9EZWJ1ZyA9IGZ1bmN0aW9uKGNvbHVtbnMpIHtcclxuICAgICAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgICAgICBrID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAgICAgYixcclxuICAgICAgICAgICAgaGV4ID0gXCJcIixcclxuICAgICAgICAgICAgYXNjID0gXCJcIixcclxuICAgICAgICAgICAgb3V0ID0gXCJcIjtcclxuICAgICAgICB3aGlsZSAoaTxrKSB7XHJcbiAgICAgICAgICAgIGlmIChpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgYiA9IHRoaXMudmlld1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChiIDwgMHgxMCkgaGV4ICs9IFwiMFwiK2IudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGhleCArPSBiLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgYXNjICs9IGIgPiAzMiAmJiBiIDwgMTI3ID8gU3RyaW5nLmZyb21DaGFyQ29kZShiKSA6ICcuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgaSAlIDE2ID09PSAwICYmIGkgIT09IGspIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaGV4Lmxlbmd0aCA8IDMqMTYrMykgaGV4ICs9IFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG91dCArPSBoZXgrYXNjK1wiXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaGV4ID0gYXNjID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gdGhpcy5vZmZzZXQgJiYgaSA9PT0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiIVwiIDogXCJ8XCI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IHRoaXMub2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgaGV4ICs9IGkgPT09IHRoaXMubWFya2VkT2Zmc2V0ID8gXCJbXCIgOiBcIjxcIjtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gdGhpcy5saW1pdClcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiXVwiIDogXCI+XCI7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiJ1wiIDogKGNvbHVtbnMgfHwgKGkgIT09IDAgJiYgaSAhPT0gaykgPyBcIiBcIiA6IFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29sdW1ucyAmJiBoZXggIT09IFwiIFwiKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChoZXgubGVuZ3RoIDwgMyoxNiszKVxyXG4gICAgICAgICAgICAgICAgaGV4ICs9IFwiIFwiO1xyXG4gICAgICAgICAgICBvdXQgKz0gaGV4ICsgYXNjICsgXCJcXG5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbHVtbnMgPyBvdXQgOiBoZXg7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIGhleCBlbmNvZGVkIHN0cmluZyB3aXRoIG1hcmtlZCBvZmZzZXRzIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgRGVidWcgc3RyaW5nIHRvIGRlY29kZSAobm90IGJlIGdlbmVyYXRlZCB3aXRoIGBjb2x1bW5zID0gdHJ1ZWApXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN0b0RlYnVnXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuZnJvbURlYnVnID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgdmFyIGsgPSBzdHIubGVuZ3RoLFxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKCgoaysxKS8zKXwwLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICB2YXIgaSA9IDAsIGogPSAwLCBjaCwgYixcclxuICAgICAgICAgICAgcnMgPSBmYWxzZSwgLy8gUmVxdWlyZSBzeW1ib2wgbmV4dFxyXG4gICAgICAgICAgICBobyA9IGZhbHNlLCBobSA9IGZhbHNlLCBobCA9IGZhbHNlLCAvLyBBbHJlYWR5IGhhcyBvZmZzZXQgKGhvKSwgbWFya2VkT2Zmc2V0IChobSksIGxpbWl0IChobCk/XHJcbiAgICAgICAgICAgIGZhaWwgPSBmYWxzZTtcclxuICAgICAgICB3aGlsZSAoaTxrKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY2ggPSBzdHIuY2hhckF0KGkrKykpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJyEnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvIHx8IGhtIHx8IGhsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gaG0gPSBobCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJiLm1hcmtlZE9mZnNldCA9IGJiLmxpbWl0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnfCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG8gfHwgaGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG8gPSBobCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJiLmxpbWl0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG8gfHwgaG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG8gPSBobSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJiLm1hcmtlZE9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzwnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmIub2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGwgfHwgaG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGwgPSBobSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLmxpbWl0ID0gYmIubWFya2VkT2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnPic6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCInXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5tYXJrZWRPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIHJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiID0gcGFyc2VJbnQoY2grc3RyLmNoYXJBdChpKyspLCAxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYikgfHwgYiA8IDAgfHwgYiA+IDI1NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBkZWJ1ZyBlbmNvZGVkIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmIudmlld1tqKytdID0gYjtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZhaWwpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogSW52YWxpZCBzeW1ib2wgYXQgXCIraSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKCFobyB8fCAhaGwpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTWlzc2luZyBvZmZzZXQgb3IgbGltaXRcIik7XHJcbiAgICAgICAgICAgIGlmIChqPGJiLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIGRlYnVnIGVuY29kZWQgc3RyaW5nIChpcyBpdCBoZXg/KSBcIitqK1wiIDwgXCIrayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL2hleFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIGhleCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gSGV4IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgYmVnaW4gPSB0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnID8gdGhpcy5vZmZzZXQgOiBiZWdpbjtcclxuICAgICAgICBlbmQgPSB0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJyA/IHRoaXMubGltaXQgOiBlbmQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBcnJheShlbmQgLSBiZWdpbiksXHJcbiAgICAgICAgICAgIGI7XHJcbiAgICAgICAgd2hpbGUgKGJlZ2luIDwgZW5kKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbYmVnaW4rK107XHJcbiAgICAgICAgICAgIGlmIChiIDwgMHgxMClcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKFwiMFwiLCBiLnRvU3RyaW5nKDE2KSk7XHJcbiAgICAgICAgICAgIGVsc2Ugb3V0LnB1c2goYi50b1N0cmluZygxNikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSBoZXggZW5jb2RlZCBzdHJpbmcgdG8gYSBCeXRlQnVmZmVyLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gZGVjb2RlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5mcm9tSGV4ID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCAlIDIgIT09IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTGVuZ3RoIG5vdCBhIG11bHRpcGxlIG9mIDJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBrID0gc3RyLmxlbmd0aCxcclxuICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigoayAvIDIpIHwgMCwgbGl0dGxlRW5kaWFuKSxcclxuICAgICAgICAgICAgYjtcclxuICAgICAgICBmb3IgKHZhciBpPTAsIGo9MDsgaTxrOyBpKz0yKSB7XHJcbiAgICAgICAgICAgIGIgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKGksIGkrMiksIDE2KTtcclxuICAgICAgICAgICAgaWYgKCFub0Fzc2VydClcclxuICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYikgfHwgYiA8IDAgfHwgYiA+IDI1NSlcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogQ29udGFpbnMgbm9uLWhleCBjaGFyYWN0ZXJzXCIpO1xyXG4gICAgICAgICAgICBiYi52aWV3W2orK10gPSBiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYi5saW1pdCA9IGo7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyB1dGZ4LWVtYmVkZGFibGVcclxuXHJcbiAgICAvKipcclxuICAgICAqIHV0ZngtZW1iZWRkYWJsZSAoYykgMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxyXG4gICAgICogc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy91dGZ4IGZvciBkZXRhaWxzXHJcbiAgICAgKi9cclxuICAgIHZhciB1dGZ4ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHV0ZnggbmFtZXNwYWNlLlxyXG4gICAgICAgICAqIEBpbm5lclxyXG4gICAgICAgICAqIEB0eXBlIHshT2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIHV0ZnggPSB7fTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWF4aW11bSB2YWxpZCBjb2RlIHBvaW50LlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5NQVhfQ09ERVBPSU5UID0gMHgxMEZGRkY7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVuY29kZXMgVVRGOCBjb2RlIHBvaW50cyB0byBVVEY4IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKSB8IG51bWJlcn0gc3JjIENvZGUgcG9pbnRzIHNvdXJjZSwgZWl0aGVyIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnRcclxuICAgICAgICAgKiAgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjb2RlIHBvaW50cyBsZWZ0IG9yIGEgc2luZ2xlIG51bWVyaWMgY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguZW5jb2RlVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIGNwID0gc3JjLFxyXG4gICAgICAgICAgICAgICAgc3JjID0gZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgICAgICAgICB3aGlsZSAoY3AgIT09IG51bGwgfHwgKGNwID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3AgPCAweDgwKVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdChjcCYweDdGKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNwIDwgMHg4MDApXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjYpJjB4MUYpfDB4QzApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AmMHgzRil8MHg4MCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjcCA8IDB4MTAwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjEyKSYweDBGKXwweEUwKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChjcD4+NikmMHgzRil8MHg4MCksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KChjcCYweDNGKXwweDgwKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChjcD4+MTgpJjB4MDcpfDB4RjApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj4xMikmMHgzRil8MHg4MCksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjYpJjB4M0YpfDB4ODApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AmMHgzRil8MHg4MCk7XHJcbiAgICAgICAgICAgICAgICBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIFVURjggYnl0ZXMgdG8gVVRGOCBjb2RlIHBvaW50cy5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZVxyXG4gICAgICAgICAqICBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDb2RlIHBvaW50cyBkZXN0aW5hdGlvbiBhcyBhIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCBlYWNoIGRlY29kZWQgY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIHN0YXJ0aW5nIGJ5dGUgaXMgaW52YWxpZCBpbiBVVEY4XHJcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBsYXN0IHNlcXVlbmNlIGlzIHRydW5jYXRlZC4gSGFzIGFuIGFycmF5IHByb3BlcnR5IGBieXRlc2AgaG9sZGluZyB0aGVcclxuICAgICAgICAgKiAgcmVtYWluaW5nIGJ5dGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguZGVjb2RlVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBhLCBiLCBjLCBkLCBmYWlsID0gZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICAgICAgYiA9IGIuc2xpY2UoMCwgYi5pbmRleE9mKG51bGwpKTtcclxuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcihiLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgZXJyLm5hbWUgPSBcIlRydW5jYXRlZEVycm9yXCI7XHJcbiAgICAgICAgICAgICAgICBlcnJbJ2J5dGVzJ10gPSBiO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aGlsZSAoKGEgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoYSYweDgwKSA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICBkc3QoYSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYSYweEUwKSA9PT0gMHhDMClcclxuICAgICAgICAgICAgICAgICAgICAoKGIgPSBzcmMoKSkgPT09IG51bGwpICYmIGZhaWwoW2EsIGJdKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChhJjB4MUYpPDw2KSB8IChiJjB4M0YpKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChhJjB4RjApID09PSAweEUwKVxyXG4gICAgICAgICAgICAgICAgICAgICgoYj1zcmMoKSkgPT09IG51bGwgfHwgKGM9c3JjKCkpID09PSBudWxsKSAmJiBmYWlsKFthLCBiLCBjXSksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoYSYweDBGKTw8MTIpIHwgKChiJjB4M0YpPDw2KSB8IChjJjB4M0YpKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChhJjB4RjgpID09PSAweEYwKVxyXG4gICAgICAgICAgICAgICAgICAgICgoYj1zcmMoKSkgPT09IG51bGwgfHwgKGM9c3JjKCkpID09PSBudWxsIHx8IChkPXNyYygpKSA9PT0gbnVsbCkgJiYgZmFpbChbYSwgYiwgYyAsZF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGEmMHgwNyk8PDE4KSB8ICgoYiYweDNGKTw8MTIpIHwgKChjJjB4M0YpPDw2KSB8IChkJjB4M0YpKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgc3RhcnRpbmcgYnl0ZTogXCIrYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBVVEYxNiBjaGFyYWN0ZXJzIHRvIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHlcclxuICAgICAgICAgKiAgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ29kZSBwb2ludHMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggZWFjaCBjb252ZXJ0ZWQgY29kZVxyXG4gICAgICAgICAqICBwb2ludC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LlVURjE2dG9VVEY4ID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdmFyIGMxLCBjMiA9IG51bGw7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGMxID0gYzIgIT09IG51bGwgPyBjMiA6IHNyYygpKSA9PT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGlmIChjMSA+PSAweEQ4MDAgJiYgYzEgPD0gMHhERkZGKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjMiA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYzIgPj0gMHhEQzAwICYmIGMyIDw9IDB4REZGRikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KChjMS0weEQ4MDApKjB4NDAwK2MyLTB4REMwMCsweDEwMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyID0gbnVsbDsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkc3QoYzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjMiAhPT0gbnVsbCkgZHN0KGMyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBVVEY4IGNvZGUgcG9pbnRzIHRvIFVURjE2IGNoYXJhY3RlcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpIHwgbnVtYmVyfSBzcmMgQ29kZSBwb2ludHMgc291cmNlLCBlaXRoZXIgYXMgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY29kZSBwb2ludFxyXG4gICAgICAgICAqICByZXNwZWN0aXZlbHkgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNvZGUgcG9pbnRzIGxlZnQgb3IgYSBzaW5nbGUgbnVtZXJpYyBjb2RlIHBvaW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggY29udmVydGVkIGNoYXIgY29kZS5cclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIGNvZGUgcG9pbnQgaXMgb3V0IG9mIHJhbmdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5VVEY4dG9VVEYxNiA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIGNwID0gc3JjLCBzcmMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICAgICAgICAgIHdoaWxlIChjcCAhPT0gbnVsbCB8fCAoY3AgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjcCA8PSAweEZGRkYpXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KGNwKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBjcCAtPSAweDEwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3A+PjEwKSsweEQ4MDApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AlMHg0MDApKzB4REMwMCk7XHJcbiAgICAgICAgICAgICAgICBjcCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBhbmQgZW5jb2RlcyBVVEYxNiBjaGFyYWN0ZXJzIHRvIFVURjggYnl0ZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHkgYG51bGxgXHJcbiAgICAgICAgICogIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQnl0ZXMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggdGhlIG5leHQgYnl0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmVuY29kZVVURjE2dG9VVEY4ID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdXRmeC5VVEYxNnRvVVRGOChzcmMsIGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICB1dGZ4LmVuY29kZVVURjgoY3AsIGRzdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY29kZXMgYW5kIGNvbnZlcnRzIFVURjggYnl0ZXMgdG8gVVRGMTYgY2hhcmFjdGVycy5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpOm51bWJlcnxudWxsfSBzcmMgQnl0ZXMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGJ5dGUgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZVxyXG4gICAgICAgICAqICBhcmUgbm8gbW9yZSBieXRlcyBsZWZ0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKG51bWJlcil9IGRzdCBDaGFyYWN0ZXJzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggY29udmVydGVkIGNoYXIgY29kZS5cclxuICAgICAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBhIHN0YXJ0aW5nIGJ5dGUgaXMgaW52YWxpZCBpbiBVVEY4XHJcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBsYXN0IHNlcXVlbmNlIGlzIHRydW5jYXRlZC4gSGFzIGFuIGFycmF5IHByb3BlcnR5IGBieXRlc2AgaG9sZGluZyB0aGUgcmVtYWluaW5nIGJ5dGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjgoc3JjLCBmdW5jdGlvbihjcCkge1xyXG4gICAgICAgICAgICAgICAgdXRmeC5VVEY4dG9VVEYxNihjcCwgZHN0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYW4gVVRGOCBjb2RlIHBvaW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjcCBVVEY4IGNvZGUgcG9pbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguY2FsY3VsYXRlQ29kZVBvaW50ID0gZnVuY3Rpb24oY3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIChjcCA8IDB4ODApID8gMSA6IChjcCA8IDB4ODAwKSA/IDIgOiAoY3AgPCAweDEwMDAwKSA/IDMgOiA0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpfSBzcmMgQ29kZSBwb2ludHMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnQgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICogIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjb2RlIHBvaW50cyBsZWZ0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgVVRGOCBieXRlcyByZXF1aXJlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguY2FsY3VsYXRlVVRGOCA9IGZ1bmN0aW9uKHNyYykge1xyXG4gICAgICAgICAgICB2YXIgY3AsIGw9MDtcclxuICAgICAgICAgICAgd2hpbGUgKChjcCA9IHNyYygpKSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIGwgKz0gKGNwIDwgMHg4MCkgPyAxIDogKGNwIDwgMHg4MDApID8gMiA6IChjcCA8IDB4MTAwMDApID8gMyA6IDQ7XHJcbiAgICAgICAgICAgIHJldHVybiBsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGNvZGUgcG9pbnRzIHJlc3BlY3RpdmVseSBVVEY4IGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIFVURjE2IGNoYXIgY29kZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHsoIWZ1bmN0aW9uKCk6bnVtYmVyfG51bGwpfSBzcmMgQ2hhcmFjdGVycyBzb3VyY2UgYXMgYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG5leHQgY2hhciBjb2RlIHJlc3BlY3RpdmVseVxyXG4gICAgICAgICAqICBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY2hhcmFjdGVycyBsZWZ0LlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IFRoZSBudW1iZXIgb2YgVVRGOCBjb2RlIHBvaW50cyBhdCBpbmRleCAwIGFuZCB0aGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgcmVxdWlyZWQgYXQgaW5kZXggMS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4ID0gZnVuY3Rpb24oc3JjKSB7XHJcbiAgICAgICAgICAgIHZhciBuPTAsIGw9MDtcclxuICAgICAgICAgICAgdXRmeC5VVEYxNnRvVVRGOChzcmMsIGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICArK247IGwgKz0gKGNwIDwgMHg4MCkgPyAxIDogKGNwIDwgMHg4MDApID8gMiA6IChjcCA8IDB4MTAwMDApID8gMyA6IDQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gW24sbF07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHV0Zng7XHJcbiAgICB9KCk7XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL3V0ZjhcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgYmV0d2VlbiB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0gdG8gYW4gVVRGOCBlbmNvZGVkXHJcbiAgICAgKiAgc3RyaW5nLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gSGV4IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0ID4gbGltaXRgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9VVEY4ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgZW5kID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2Q7IHRyeSB7XHJcbiAgICAgICAgICAgIHV0ZnguZGVjb2RlVVRGOHRvVVRGMTYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmVnaW4gPCBlbmQgPyB0aGlzLnZpZXdbYmVnaW4rK10gOiBudWxsO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAoYmVnaW4gIT09IGVuZClcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIrYmVnaW4rXCIgIT0gXCIrZW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNkKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGRlY29kZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuZnJvbVVURjggPSBmdW5jdGlvbihzdHIsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICBpZiAoIW5vQXNzZXJ0KVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgIHZhciBiYiA9IG5ldyBCeXRlQnVmZmVyKHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0ciksIHRydWUpWzFdLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSxcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICBiYi52aWV3W2krK10gPSBiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJiLmxpbWl0ID0gaTtcclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBCeXRlQnVmZmVyO1xyXG59KTtcclxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZVxuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGhcbiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuXG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOykge1xuICAgIHZhciBhc3NpZ25lZCA9IGFjY3VtICUgYmxvY2tTaXplXG4gICAgdmFyIHJlbWFpbmRlciA9IE1hdGgubWluKGxlbmd0aCAtIG9mZnNldCwgYmxvY2tTaXplIC0gYXNzaWduZWQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7XG4gICAgICBibG9ja1thc3NpZ25lZCArIGldID0gZGF0YVtvZmZzZXQgKyBpXVxuICAgIH1cblxuICAgIGFjY3VtICs9IHJlbWFpbmRlclxuICAgIG9mZnNldCArPSByZW1haW5kZXJcblxuICAgIGlmICgoYWNjdW0gJSBibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYmxvY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fbGVuICs9IGxlbmd0aFxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVcblxuICB0aGlzLl9ibG9ja1tyZW1dID0gMHg4MFxuXG4gIC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3RcbiAgLy8gbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobGVuZ3RoICsgMSArIChyZW0gKyAxKSkgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgcmVtICsgMSlcblxuICBpZiAocmVtID49IHRoaXMuX2ZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICB2YXIgYml0cyA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyB1aW50MzJcbiAgaWYgKGJpdHMgPD0gMHhmZmZmZmZmZikge1xuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICAvLyB1aW50NjRcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG93Qml0cyA9IChiaXRzICYgMHhmZmZmZmZmZikgPj4+IDBcbiAgICB2YXIgaGlnaEJpdHMgPSAoYml0cyAtIGxvd0JpdHMpIC8gMHgxMDAwMDAwMDBcblxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoaGlnaEJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDgpXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShsb3dCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2goKVxuXG4gIHJldHVybiBlbmMgPyBoYXNoLnRvU3RyaW5nKGVuYykgOiBoYXNoXG59XG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoXG4iLCJpbXBvcnQgKiBhcyBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgKiBhcyBFb3NMaWIgZnJvbSAnZW9zanMnO1xuY29uc3QgeyBlY2MgfSA9IEVvc0xpYi5tb2R1bGVzO1xuXG5leHBvcnQgY29uc3QgRW9zID0gRW9zTGliO1xuZXhwb3J0IGNvbnN0IEVjYyA9IGVjYztcbmV4cG9ydCBjb25zdCBEZWJ1ZyA9IGRlYnVnO1xuLy9cbi8vIGNvbnNvbGUubG9nKFwiRW9zXCIsIEVvcylcbi8vIGNvbnNvbGUubG9nKFwiRWNjXCIsIEVjYylcbi8vIGNvbnNvbGUubG9nKFwiRGVidWdcIiwgRGVidWcpXG4iLCJpbXBvcnQgeyBEZWJ1ZyB9IGZyb20gJy4uL3R5cGVzL2xpYnMnO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlTG9nZ2VyID0gKG5hbWU6IHN0cmluZykgPT4gKHtcbiAgdmVyYm9zZTogRGVidWcoYHZlcmJvc2U6JHtuYW1lfWApLFxuICBpbmZvOiBEZWJ1ZyhgaW5mbzoke25hbWV9YCksXG4gIHdhcm5pbmc6IERlYnVnKGB3YXJuaW5nOiR7bmFtZX1gKSxcbiAgZXJyb3I6IERlYnVnKGBlcnJvcjoke25hbWV9YCksXG59KTtcblxuY29uc3QgbmFtZXNwYWNlcyA9IERlYnVnLmRpc2FibGUoKTtcbmlmIChuYW1lc3BhY2VzID09PSAnJykge1xuICAgIERlYnVnLmVuYWJsZSgnaW5mbzoqLHdhcm5pbmc6KixlcnJvcjoqJyk7XG59IGVsc2Uge1xuICAgIERlYnVnLmVuYWJsZShuYW1lc3BhY2VzKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBlY3VydmUgPSByZXF1aXJlKCdlY3VydmUnKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xudmFyIHNlY3AyNTZrMSA9IGVjdXJ2ZS5nZXRDdXJ2ZUJ5TmFtZSgnc2VjcDI1NmsxJyk7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG52YXIga2V5VXRpbHMgPSByZXF1aXJlKCcuL2tleV91dGlscycpO1xuXG52YXIgRyA9IHNlY3AyNTZrMS5HO1xudmFyIG4gPSBzZWNwMjU2azEubjtcblxubW9kdWxlLmV4cG9ydHMgPSBQdWJsaWNLZXk7XG5cbi8qKlxuICBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ8UHVibGljS2V5fGVjdXJ2ZS5Qb2ludH0gcHVibGljIGtleVxuICBAcGFyYW0ge3N0cmluZ30gW3B1YmtleV9wcmVmaXggPSAnRU9TJ11cbiovXG5mdW5jdGlvbiBQdWJsaWNLZXkoUSkge1xuICAgIHZhciBwdWJrZXlfcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnRU9TJztcblxuICAgIGlmICh0eXBlb2YgUSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHB1YmxpY0tleSA9IFB1YmxpY0tleS5mcm9tU3RyaW5nKFEsIHB1YmtleV9wcmVmaXgpO1xuICAgICAgICBhc3NlcnQocHVibGljS2V5ICE9IG51bGwsICdJbnZhbGlkIHB1YmxpYyBrZXknKTtcbiAgICAgICAgcmV0dXJuIHB1YmxpY0tleTtcbiAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihRKSkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIoUSk7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIFEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKFEpKSA9PT0gJ29iamVjdCcgJiYgUS5RKSB7XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkoUS5RKTtcbiAgICB9XG5cbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIFEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKFEpLCAnb2JqZWN0JywgJ0ludmFsaWQgcHVibGljIGtleScpO1xuICAgIGFzc2VydC5lcXVhbChfdHlwZW9mKFEuY29tcHJlc3NlZCksICdib29sZWFuJywgJ0ludmFsaWQgcHVibGljIGtleScpO1xuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gICAgICAgIHZhciBjb21wcmVzc2VkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBRLmNvbXByZXNzZWQ7XG5cbiAgICAgICAgcmV0dXJuIFEuZ2V0RW5jb2RlZChjb21wcmVzc2VkKTtcbiAgICB9XG5cbiAgICB2YXIgcHViZGF0YSA9IHZvaWQgMDsgLy8gY2FjaGVcblxuICAgIC8vIC8qKlxuICAgIC8vICAgICBAdG9kbyBzZWNwMjI0cjFcbiAgICAvLyAgICAgQHJldHVybiB7c3RyaW5nfSBQVUJfSzFfYmFzZTU4cHVia2V5Li5cbiAgICAvLyAqL1xuICAgIC8vIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIC8vICAgICBpZihwdWJkYXRhKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gcHViZGF0YVxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHB1YmRhdGEgPSBgUFVCX0sxX2AgKyBrZXlVdGlscy5jaGVja0VuY29kZSh0b0J1ZmZlcigpLCAnSzEnKVxuICAgIC8vICAgICByZXR1cm4gcHViZGF0YTtcbiAgICAvLyB9XG5cbiAgICAvKiogQHRvZG8gcmVuYW1lIHRvIHRvU3RyaW5nTGVnYWN5XG4gICAgICogQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXSAtIHB1YmxpYyBrZXkgcHJlZml4XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdFT1MnO1xuXG4gICAgICAgIHJldHVybiBwdWJrZXlfcHJlZml4ICsga2V5VXRpbHMuY2hlY2tFbmNvZGUodG9CdWZmZXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9VbmNvbXByZXNzZWQoKSB7XG4gICAgICAgIHZhciBidWYgPSBRLmdldEVuY29kZWQoZmFsc2UpO1xuICAgICAgICB2YXIgcG9pbnQgPSBlY3VydmUuUG9pbnQuZGVjb2RlRnJvbShzZWNwMjU2azEsIGJ1Zik7XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbVBvaW50KHBvaW50KTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBmdW5jdGlvbiBjaGlsZChvZmZzZXQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRGVwcmVjYXRlZCB3YXJuaW5nOiBQdWJsaWNLZXkuY2hpbGQnKTtcblxuICAgICAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKG9mZnNldCksIFwiQnVmZmVyIHJlcXVpcmVkOiBvZmZzZXRcIik7XG4gICAgICAgIGFzc2VydC5lcXVhbChvZmZzZXQubGVuZ3RoLCAzMiwgXCJvZmZzZXQgbGVuZ3RoXCIpO1xuXG4gICAgICAgIG9mZnNldCA9IEJ1ZmZlci5jb25jYXQoW3RvQnVmZmVyKCksIG9mZnNldF0pO1xuICAgICAgICBvZmZzZXQgPSBoYXNoLnNoYTI1NihvZmZzZXQpO1xuXG4gICAgICAgIHZhciBjID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKG9mZnNldCk7XG5cbiAgICAgICAgaWYgKGMuY29tcGFyZVRvKG4pID49IDApIHRocm93IG5ldyBFcnJvcihcIkNoaWxkIG9mZnNldCB3ZW50IG91dCBvZiBib3VuZHMsIHRyeSBhZ2FpblwiKTtcblxuICAgICAgICB2YXIgY0cgPSBHLm11bHRpcGx5KGMpO1xuICAgICAgICB2YXIgUXByaW1lID0gUS5hZGQoY0cpO1xuXG4gICAgICAgIGlmIChzZWNwMjU2azEuaXNJbmZpbml0eShRcHJpbWUpKSB0aHJvdyBuZXcgRXJyb3IoXCJDaGlsZCBvZmZzZXQgZGVyaXZlZCB0byBhbiBpbnZhbGlkIGtleSwgdHJ5IGFnYWluXCIpO1xuXG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbVBvaW50KFFwcmltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBROiBRLFxuICAgICAgICB0b1N0cmluZzogdG9TdHJpbmcsXG4gICAgICAgIC8vIHRvU3RyaW5nTGVnYWN5LFxuICAgICAgICB0b1VuY29tcHJlc3NlZDogdG9VbmNvbXByZXNzZWQsXG4gICAgICAgIHRvQnVmZmVyOiB0b0J1ZmZlcixcbiAgICAgICAgY2hpbGQ6IGNoaWxkLFxuICAgICAgICB0b0hleDogdG9IZXhcbiAgICB9O1xufVxuXG4vKipcbiAgQHBhcmFtIHtzdHJpbmd8QnVmZmVyfFB1YmxpY0tleXxlY3VydmUuUG9pbnR9IHB1YmtleSAtIHB1YmxpYyBrZXlcbiAgQHBhcmFtIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddXG4qL1xuUHVibGljS2V5LmlzVmFsaWQgPSBmdW5jdGlvbiAocHVia2V5KSB7XG4gICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdFT1MnO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgUHVibGljS2V5KHB1YmtleSwgcHVia2V5X3ByZWZpeCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cblB1YmxpY0tleS5mcm9tQmluYXJ5ID0gZnVuY3Rpb24gKGJpbikge1xuICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGJpbiwgJ2JpbmFyeScpKTtcbn07XG5cblB1YmxpY0tleS5mcm9tQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgIHJldHVybiBQdWJsaWNLZXkoZWN1cnZlLlBvaW50LmRlY29kZUZyb20oc2VjcDI1NmsxLCBidWZmZXIpKTtcbn07XG5cblB1YmxpY0tleS5mcm9tUG9pbnQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gUHVibGljS2V5KHBvaW50KTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gcHVibGljX2tleSAtIGxpa2UgUFVCX0sxX2Jhc2U1OHB1YmtleS4uXG4gICAgQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXSAtIHB1YmxpYyBrZXkgcHJlZml4XG4gICAgQHJldHVybiBQdWJsaWNLZXkgb3IgYG51bGxgIChpbnZhbGlkKVxuKi9cblB1YmxpY0tleS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHB1YmxpY19rZXkpIHtcbiAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmdPclRocm93KHB1YmxpY19rZXksIHB1YmtleV9wcmVmaXgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gICAgQGFyZyB7c3RyaW5nfSBwdWJsaWNfa2V5IC0gbGlrZSBQVUJfSzFfYmFzZTU4cHVia2V5Li5cbiAgICBAYXJnIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddIC0gcHVibGljIGtleSBwcmVmaXhcblxuICAgIEB0aHJvd3Mge0Vycm9yfSBpZiBwdWJsaWMga2V5IGlzIGludmFsaWRcblxuICAgIEByZXR1cm4gUHVibGljS2V5XG4qL1xuUHVibGljS2V5LmZyb21TdHJpbmdPclRocm93ID0gZnVuY3Rpb24gKHB1YmxpY19rZXkpIHtcbiAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG5cbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHB1YmxpY19rZXkgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHB1YmxpY19rZXkpLCAnc3RyaW5nJywgJ3B1YmxpY19rZXknKTtcbiAgICB2YXIgbWF0Y2ggPSBwdWJsaWNfa2V5Lm1hdGNoKC9eUFVCXyhbQS1aYS16MC05XSspXyhbQS1aYS16MC05XSspJC8pO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBsZWdhY3lcbiAgICAgICAgdmFyIHByZWZpeF9tYXRjaCA9IG5ldyBSZWdFeHAoXCJeXCIgKyBwdWJrZXlfcHJlZml4KTtcbiAgICAgICAgaWYgKHByZWZpeF9tYXRjaC50ZXN0KHB1YmxpY19rZXkpKSB7XG4gICAgICAgICAgICBwdWJsaWNfa2V5ID0gcHVibGljX2tleS5zdWJzdHJpbmcocHVia2V5X3ByZWZpeC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5jaGVja0RlY29kZShwdWJsaWNfa2V5KSk7XG4gICAgfVxuICAgIGFzc2VydChtYXRjaC5sZW5ndGggPT09IDMsICdFeHBlY3RpbmcgcHVibGljIGtleSBsaWtlOiBQVUJfSzFfYmFzZTU4cHVia2V5Li4nKTtcblxuICAgIHZhciBfbWF0Y2ggPSBfc2xpY2VkVG9BcnJheShtYXRjaCwgMyksXG4gICAgICAgIGtleVR5cGUgPSBfbWF0Y2hbMV0sXG4gICAgICAgIGtleVN0cmluZyA9IF9tYXRjaFsyXTtcblxuICAgIGFzc2VydC5lcXVhbChrZXlUeXBlLCAnSzEnLCAnSzEgcHJpdmF0ZSBrZXkgZXhwZWN0ZWQnKTtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG59O1xuXG5QdWJsaWNLZXkuZnJvbUhleCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSk7XG59O1xuXG5QdWJsaWNLZXkuZnJvbVN0cmluZ0hleCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmcobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgYmFzZTU4ID0gcmVxdWlyZSgnYnM1OCcpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcblxudmFyIGhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmFuZG9tMzJCeXRlQnVmZmVyOiByYW5kb20zMkJ5dGVCdWZmZXIsXG4gICAgYWRkRW50cm9weTogYWRkRW50cm9weSxcbiAgICBjcHVFbnRyb3B5OiBjcHVFbnRyb3B5LFxuICAgIGVudHJvcHlDb3VudDogZnVuY3Rpb24gZW50cm9weUNvdW50KCkge1xuICAgICAgICByZXR1cm4gX2VudHJvcHlDb3VudDtcbiAgICB9LFxuICAgIGNoZWNrRGVjb2RlOiBjaGVja0RlY29kZSxcbiAgICBjaGVja0VuY29kZTogY2hlY2tFbmNvZGVcbn07XG5cbnZhciBlbnRyb3B5UG9zID0gMCxcbiAgICBfZW50cm9weUNvdW50ID0gMDtcblxudmFyIGV4dGVybmFsRW50cm9weUFycmF5ID0gcmFuZG9tQnl0ZXMoMTAxKTtcblxuLyoqXG4gICAgQWRkaXRpb25hbCBmb3JtcyBvZiBlbnRyb3B5IGFyZSB1c2VkLiAgQSB3ZWVrIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGNhbiBydW4gb3V0IG9mIGVudHJvcHkuICBUaGlzIHNob3VsZCBlbnN1cmUgZXZlbiB0aGUgd29yc3QgcmFuZG9tIG51bWJlciBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHJlYXNvbmFibHkgc2FmZS5cblxuICAgIEBhcmcge251bWJlcn0gW2NwdUVudHJvcHlCaXRzID0gMF0gZ2VuZXJhdGUgZW50cm9weSBvbiB0aGUgZmx5LiAgVGhpcyBpc1xuICAgIG5vdCByZXF1aXJlZCwgZW50cm9weSBjYW4gYmUgYWRkZWQgaW4gYWR2YW5jZWQgdmlhIGFkZEVudHJvcHkgb3IgaW5pdGlhbGl6ZSgpLlxuXG4gICAgQGFyZyB7Ym9vbGVhbn0gW3NhZmUgPSB0cnVlXSBmYWxzZSBmb3IgdGVzdGluZywgb3RoZXJ3aXNlIHRoaXMgd2lsbCBiZVxuICAgIHRydWUgdG8gZW5zdXJlIGluaXRpYWxpemUoKSB3YXMgY2FsbGVkLlxuXG4gICAgQHJldHVybiBhIHJhbmRvbSBidWZmZXIgb2J0YWluZWQgZnJvbSB0aGUgc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLiAgQWRkaXRpb25hbCBlbnRyb3B5IGlzIHVzZWQuXG4qL1xuZnVuY3Rpb24gcmFuZG9tMzJCeXRlQnVmZmVyKCkge1xuICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgX3JlZiRjcHVFbnRyb3B5Qml0cyA9IF9yZWYuY3B1RW50cm9weUJpdHMsXG4gICAgICAgIGNwdUVudHJvcHlCaXRzID0gX3JlZiRjcHVFbnRyb3B5Qml0cyA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkY3B1RW50cm9weUJpdHMsXG4gICAgICAgIF9yZWYkc2FmZSA9IF9yZWYuc2FmZSxcbiAgICAgICAgc2FmZSA9IF9yZWYkc2FmZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2FmZTtcblxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgY3B1RW50cm9weUJpdHMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNwdUVudHJvcHlCaXRzKSwgJ251bWJlcicsICdjcHVFbnRyb3B5Qml0cycpO1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygc2FmZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc2FmZSksICdib29sZWFuJywgJ2Jvb2xlYW4nKTtcblxuICAgIGlmIChzYWZlKSB7XG4gICAgICAgIGFzc2VydChfZW50cm9weUNvdW50ID49IDEyOCwgJ0NhbGwgaW5pdGlhbGl6ZSgpIHRvIGFkZCBlbnRyb3B5Jyk7XG4gICAgfVxuXG4gICAgLy8gaWYoZW50cm9weUNvdW50ID4gMCkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhgQWRkaXRpb25hbCBwcml2YXRlIGtleSBlbnRyb3B5OiAke2VudHJvcHlDb3VudH0gZXZlbnRzYClcbiAgICAvLyB9XG5cbiAgICB2YXIgaGFzaF9hcnJheSA9IFtdO1xuICAgIGhhc2hfYXJyYXkucHVzaChyYW5kb21CeXRlcygzMikpO1xuICAgIGhhc2hfYXJyYXkucHVzaChCdWZmZXIuZnJvbShjcHVFbnRyb3B5KGNwdUVudHJvcHlCaXRzKSkpO1xuICAgIGhhc2hfYXJyYXkucHVzaChleHRlcm5hbEVudHJvcHlBcnJheSk7XG4gICAgaGFzaF9hcnJheS5wdXNoKGJyb3dzZXJFbnRyb3B5KCkpO1xuICAgIHJldHVybiBoYXNoLnNoYTI1NihCdWZmZXIuY29uY2F0KGhhc2hfYXJyYXkpKTtcbn1cblxuLyoqXG4gICAgQWRkcyBlbnRyb3B5LiAgVGhpcyBtYXkgYmUgY2FsbGVkIG1hbnkgdGltZXMgd2hpbGUgdGhlIGFtb3VudCBvZiBkYXRhIHNhdmVkXG4gICAgaXMgYWNjdW11bGF0aXZlbHkgcmVkdWNlZCB0byAxMDEgaW50ZWdlcnMuICBEYXRhIGlzIHJldGFpbmVkIGluIFJBTSBmb3IgdGhlXG4gICAgbGlmZSBvZiB0aGlzIG1vZHVsZS5cblxuICAgIEBleGFtcGxlIFJlYWN0IDxjb2RlPlxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnJlZnMuTXlDb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uRW50cm9weUV2ZW50LCB7Y2FwdHVyZTogZmFsc2UsIHBhc3NpdmU6IHRydWV9KVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZWZzLk15Q29tcG9uZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbkVudHJvcHlFdmVudCk7XG4gICAgfVxuICAgIG9uRW50cm9weUV2ZW50ID0gKGUpID0+IHtcbiAgICAgICAgaWYoZS50eXBlID09PSAnbW91c2Vtb3ZlJylcbiAgICAgICAgICAgIGtleV91dGlscy5hZGRFbnRyb3B5KGUucGFnZVgsIGUucGFnZVksIGUuc2NyZWVuWCwgZS5zY3JlZW5ZKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnb25FbnRyb3B5RXZlbnQgVW5rbm93bicsIGUudHlwZSwgZSlcbiAgICB9XG4gICAgPC9jb2RlPlxuKi9cbmZ1bmN0aW9uIGFkZEVudHJvcHkoKSB7XG4gICAgYXNzZXJ0LmVxdWFsKGV4dGVybmFsRW50cm9weUFycmF5Lmxlbmd0aCwgMTAxLCAnZXh0ZXJuYWxFbnRyb3B5QXJyYXknKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGludHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX2VudHJvcHlDb3VudCArPSBpbnRzLmxlbmd0aDtcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gaW50c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgIHZhciBwb3MgPSBlbnRyb3B5UG9zKysgJSAxMDE7XG4gICAgICAgICAgICB2YXIgaTIgPSBleHRlcm5hbEVudHJvcHlBcnJheVtwb3NdICs9IGk7XG4gICAgICAgICAgICBpZiAoaTIgPiA5MDA3MTk5MjU0NzQwOTkxKSBleHRlcm5hbEVudHJvcHlBcnJheVtwb3NdID0gMDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAgICBUaGlzIHJ1bnMgaW4ganVzdCB1bmRlciAxIHNlY29uZCBhbmQgZW5zdXJlcyBhIG1pbmltdW0gb2YgY3B1RW50cm9weUJpdHNcbiAgICBiaXRzIG9mIGVudHJvcHkgYXJlIGdhdGhlcmVkLlxuXG4gICAgQmFzZWQgb24gbW9yZS1lbnRyb3B5LiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL21vcmUtZW50cm9weS9ibG9iL21hc3Rlci9zcmMvZ2VuZXJhdG9yLmljZWRcblxuICAgIEBhcmcge251bWJlcn0gW2NwdUVudHJvcHlCaXRzID0gMTI4XVxuICAgIEByZXR1cm4ge2FycmF5fSBjb3VudHMgZ2F0aGVyZWQgYnkgbWVhc3VyaW5nIHZhcmlhdGlvbnMgaW4gdGhlIENQVSBzcGVlZCBkdXJpbmcgZmxvYXRpbmcgcG9pbnQgb3BlcmF0aW9ucy5cbiovXG5mdW5jdGlvbiBjcHVFbnRyb3B5KCkge1xuICAgIHZhciBjcHVFbnRyb3B5Qml0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTI4O1xuXG4gICAgdmFyIGNvbGxlY3RlZCA9IFtdO1xuICAgIHZhciBsYXN0Q291bnQgPSBudWxsO1xuICAgIHZhciBsb3dFbnRyb3B5U2FtcGxlcyA9IDA7XG4gICAgd2hpbGUgKGNvbGxlY3RlZC5sZW5ndGggPCBjcHVFbnRyb3B5Qml0cykge1xuICAgICAgICB2YXIgY291bnQgPSBmbG9hdGluZ1BvaW50Q291bnQoKTtcbiAgICAgICAgaWYgKGxhc3RDb3VudCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBjb3VudCAtIGxhc3RDb3VudDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPCAxKSB7XG4gICAgICAgICAgICAgICAgbG93RW50cm9weVNhbXBsZXMrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhvdyBtYW55IGJpdHMgb2YgZW50cm9weSB3ZXJlIGluIHRoaXMgc2FtcGxlXG4gICAgICAgICAgICB2YXIgYml0cyA9IE1hdGguZmxvb3IobG9nMihNYXRoLmFicyhkZWx0YSkpICsgMSk7XG4gICAgICAgICAgICBpZiAoYml0cyA8IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYml0cyA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG93RW50cm9weVNhbXBsZXMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2xsZWN0ZWQucHVzaChkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdENvdW50ID0gY291bnQ7XG4gICAgfVxuICAgIGlmIChsb3dFbnRyb3B5U2FtcGxlcyA+IDEwKSB7XG4gICAgICAgIHZhciBwY3QgPSBOdW1iZXIobG93RW50cm9weVNhbXBsZXMgLyBjcHVFbnRyb3B5Qml0cyAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgLy8gSXMgdGhpcyBhbGdvcml0aG0gZ2V0dGluZyBpbmVmZmljaWVudD9cbiAgICAgICAgY29uc29sZS53YXJuKCdXQVJOOiAnICsgcGN0ICsgJyUgbG93IENQVSBlbnRyb3B5IHJlLXNhbXBsZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3RlZDtcbn1cblxuLyoqXG4gICAgQHByaXZhdGVcbiAgICBDb3VudCB3aGlsZSBwZXJmb3JtaW5nIGZsb2F0aW5nIHBvaW50IG9wZXJhdGlvbnMgZHVyaW5nIGEgZml4ZWQgdGltZVxuICAgICg3IG1zIGZvciBleGFtcGxlKS4gIFVzaW5nIGEgZml4ZWQgdGltZSBtYWtlcyB0aGlzIGFsZ29yaXRobVxuICAgIHByZWRpY3RhYmxlIGluIHJ1bnRpbWUuXG4qL1xuZnVuY3Rpb24gZmxvYXRpbmdQb2ludENvdW50KCkge1xuICAgIHZhciB3b3JrTWluTXMgPSA3O1xuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIHggPSAwO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIDwgZCArIHdvcmtNaW5NcyArIDEpIHtcbiAgICAgICAgeCA9IE1hdGguc2luKE1hdGguc3FydChNYXRoLmxvZygrK2kgKyB4KSkpO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cblxudmFyIGxvZzIgPSBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbn07XG5cbi8qKlxuICAgIEBwcml2YXRlXG4gICAgQXR0ZW1wdCB0byBnYXRoZXIgYW5kIGhhc2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgYnJvd3NlcidzIHdpbmRvdywgaGlzdG9yeSwgYW5kIHN1cHBvcnRlZCBtaW1lIHR5cGVzLiAgRm9yIG5vbi1icm93c2VyIGVudmlyb25tZW50cyB0aGlzIHNpbXBseSBpbmNsdWRlcyBzZWN1cmUgcmFuZG9tIGRhdGEuICBJbiBhbnkgZXZlbnQsIHRoZSBpbmZvcm1hdGlvbiBpcyByZS1oYXNoZWQgaW4gYSBsb29wIGZvciAyNSBtaWxsaXNlY29uZHMgc2Vjb25kcy5cblxuICAgIEByZXR1cm4ge0J1ZmZlcn0gMzIgYnl0ZXNcbiovXG5mdW5jdGlvbiBicm93c2VyRW50cm9weSgpIHtcbiAgICB2YXIgZW50cm9weVN0ciA9IEFycmF5KHJhbmRvbUJ5dGVzKDEwMSkpLmpvaW4oKTtcbiAgICB0cnkge1xuICAgICAgICBlbnRyb3B5U3RyICs9IG5ldyBEYXRlKCkudG9TdHJpbmcoKSArIFwiIFwiICsgd2luZG93LnNjcmVlbi5oZWlnaHQgKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4ud2lkdGggKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4uY29sb3JEZXB0aCArIFwiIFwiICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0ICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGggKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4ucGl4ZWxEZXB0aCArIG5hdmlnYXRvci5sYW5ndWFnZSArIFwiIFwiICsgd2luZG93LmxvY2F0aW9uICsgXCIgXCIgKyB3aW5kb3cuaGlzdG9yeS5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1pbWVUeXBlOyBpIDwgbmF2aWdhdG9yLm1pbWVUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbWltZVR5cGUgPSBuYXZpZ2F0b3IubWltZVR5cGVzW2ldO1xuICAgICAgICAgICAgZW50cm9weVN0ciArPSBtaW1lVHlwZS5kZXNjcmlwdGlvbiArIFwiIFwiICsgbWltZVR5cGUudHlwZSArIFwiIFwiICsgbWltZVR5cGUuc3VmZml4ZXMgKyBcIiBcIjtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vbm9kZWpzOlJlZmVyZW5jZUVycm9yOiB3aW5kb3cgaXMgbm90IGRlZmluZWRcbiAgICAgICAgZW50cm9weVN0ciArPSBoYXNoLnNoYTI1NihuZXcgRGF0ZSgpLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHZhciBiID0gbmV3IEJ1ZmZlcihlbnRyb3B5U3RyKTtcbiAgICBlbnRyb3B5U3RyICs9IGIudG9TdHJpbmcoJ2JpbmFyeScpICsgXCIgXCIgKyBuZXcgRGF0ZSgpLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIgZW50cm9weSA9IGVudHJvcHlTdHI7XG4gICAgdmFyIHN0YXJ0X3QgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRfdCA8IDI1KSB7XG4gICAgICAgIGVudHJvcHkgPSBoYXNoLnNoYTI1NihlbnRyb3B5KTtcbiAgICB9cmV0dXJuIGVudHJvcHk7XG59XG5cbi8qKlxuICBAYXJnIHtCdWZmZXJ9IGtleUJ1ZmZlciBkYXRhXG4gIEBhcmcge3N0cmluZ30ga2V5VHlwZSA9IHNoYTI1NngyLCBLMSwgZXRjXG4gIEByZXR1cm4ge3N0cmluZ30gY2hlY2tzdW0gZW5jb2RlZCBiYXNlNTggc3RyaW5nXG4qL1xuZnVuY3Rpb24gY2hlY2tFbmNvZGUoa2V5QnVmZmVyKSB7XG4gICAgdmFyIGtleVR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGtleUJ1ZmZlciksICdleHBlY3Rpbmcga2V5QnVmZmVyPEJ1ZmZlcj4nKTtcbiAgICBpZiAoa2V5VHlwZSA9PT0gJ3NoYTI1NngyJykge1xuICAgICAgICAvLyBsZWdhY3lcbiAgICAgICAgdmFyIGNoZWNrc3VtID0gaGFzaC5zaGEyNTYoaGFzaC5zaGEyNTYoa2V5QnVmZmVyKSkuc2xpY2UoMCwgNCk7XG4gICAgICAgIHJldHVybiBiYXNlNTguZW5jb2RlKEJ1ZmZlci5jb25jYXQoW2tleUJ1ZmZlciwgY2hlY2tzdW1dKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoZWNrID0gW2tleUJ1ZmZlcl07XG4gICAgICAgIGlmIChrZXlUeXBlKSB7XG4gICAgICAgICAgICBjaGVjay5wdXNoKEJ1ZmZlci5mcm9tKGtleVR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2NoZWNrc3VtID0gaGFzaC5yaXBlbWQxNjAoQnVmZmVyLmNvbmNhdChjaGVjaykpLnNsaWNlKDAsIDQpO1xuICAgICAgICByZXR1cm4gYmFzZTU4LmVuY29kZShCdWZmZXIuY29uY2F0KFtrZXlCdWZmZXIsIF9jaGVja3N1bV0pKTtcbiAgICB9XG59XG5cbi8qKlxuICBAYXJnIHtCdWZmZXJ9IGtleVN0cmluZyBkYXRhXG4gIEBhcmcge3N0cmluZ30ga2V5VHlwZSA9IHNoYTI1NngyLCBLMSwgZXRjXG4gIEByZXR1cm4ge3N0cmluZ30gY2hlY2tzdW0gZW5jb2RlZCBiYXNlNTggc3RyaW5nXG4qL1xuZnVuY3Rpb24gY2hlY2tEZWNvZGUoa2V5U3RyaW5nKSB7XG4gICAgdmFyIGtleVR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBhc3NlcnQoa2V5U3RyaW5nICE9IG51bGwsICdwcml2YXRlIGtleSBleHBlY3RlZCcpO1xuICAgIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGJhc2U1OC5kZWNvZGUoa2V5U3RyaW5nKSk7XG4gICAgdmFyIGNoZWNrc3VtID0gYnVmZmVyLnNsaWNlKC00KTtcbiAgICB2YXIga2V5ID0gYnVmZmVyLnNsaWNlKDAsIC00KTtcblxuICAgIHZhciBuZXdDaGVjayA9IHZvaWQgMDtcbiAgICBpZiAoa2V5VHlwZSA9PT0gJ3NoYTI1NngyJykge1xuICAgICAgICAvLyBsZWdhY3lcbiAgICAgICAgbmV3Q2hlY2sgPSBoYXNoLnNoYTI1NihoYXNoLnNoYTI1NihrZXkpKS5zbGljZSgwLCA0KTsgLy8gV0lGIChsZWdhY3kpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoZWNrID0gW2tleV07XG4gICAgICAgIGlmIChrZXlUeXBlKSB7XG4gICAgICAgICAgICBjaGVjay5wdXNoKEJ1ZmZlci5mcm9tKGtleVR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdDaGVjayA9IGhhc2gucmlwZW1kMTYwKEJ1ZmZlci5jb25jYXQoY2hlY2spKS5zbGljZSgwLCA0KTsgLy9QVlRcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzdW0udG9TdHJpbmcoKSAhPT0gbmV3Q2hlY2sudG9TdHJpbmcoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hlY2tzdW0sICcgKyAoY2hlY2tzdW0udG9TdHJpbmcoJ2hleCcpICsgJyAhPSAnICsgbmV3Q2hlY2sudG9TdHJpbmcoJ2hleCcpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25BcGkgPSByZXF1aXJlKCcuL2FwaV9jb21tb24nKTtcbnZhciBvYmplY3RBcGkgPSByZXF1aXJlKCcuL2FwaV9vYmplY3QnKTtcblxudmFyIGVjYyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1vbkFwaSwgb2JqZWN0QXBpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlY2M7IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgZWN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJyk7XG52YXIgUG9pbnQgPSBlY3VydmUuUG9pbnQ7XG52YXIgc2VjcDI1NmsxID0gZWN1cnZlLmdldEN1cnZlQnlOYW1lKCdzZWNwMjU2azEnKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoJy4va2V5X3B1YmxpYycpO1xudmFyIGtleVV0aWxzID0gcmVxdWlyZSgnLi9rZXlfdXRpbHMnKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciBwcm9taXNlQXN5bmMgPSByZXF1aXJlKCcuL3Byb21pc2UtYXN5bmMnKTtcblxudmFyIEcgPSBzZWNwMjU2azEuRztcbnZhciBuID0gc2VjcDI1NmsxLm47XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpdmF0ZUtleTtcblxuLyoqXG4gIEB0eXBlZGVmIHtzdHJpbmd9IHdpZiAtIGh0dHBzOi8vZW4uYml0Y29pbi5pdC93aWtpL1dhbGxldF9pbXBvcnRfZm9ybWF0XG4gIEB0eXBlZGVmIHtzdHJpbmd9IHB1YmtleSAtIEVPU0tleS4uXG4gIEB0eXBlZGVmIHtlY3VydmUuUG9pbnR9IFBvaW50XG4qL1xuXG4vKipcbiAgQHBhcmFtIHtCaWdJbnRlZ2VyfSBkXG4qL1xuZnVuY3Rpb24gUHJpdmF0ZUtleShkKSB7XG4gICAgaWYgKHR5cGVvZiBkID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKGQpO1xuICAgIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGQpKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21CdWZmZXIoZCk7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIGQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGQpKSA9PT0gJ29iamVjdCcgJiYgQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIoZC5kKSkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleShkLmQpO1xuICAgIH1cblxuICAgIGlmICghQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIoZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBwcml2YXRlIGtleScpO1xuICAgIH1cblxuICAgIC8qKiBAcmV0dXJuIHtzdHJpbmd9IHByaXZhdGUga2V5IGxpa2UgUFZUX0sxX2Jhc2U1OHByaXZhdGVrZXkuLiAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAvLyB0b2RvLCB1c2UgUFZUX0sxX1xuICAgICAgICAvLyByZXR1cm4gJ1BWVF9LMV8nICsga2V5VXRpbHMuY2hlY2tFbmNvZGUodG9CdWZmZXIoKSwgJ0sxJylcbiAgICAgICAgcmV0dXJuIHRvV2lmKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgIEByZXR1cm4gIHt3aWZ9XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1dpZigpIHtcbiAgICAgICAgdmFyIHByaXZhdGVfa2V5ID0gdG9CdWZmZXIoKTtcbiAgICAgICAgLy8gY2hlY2tzdW0gaW5jbHVkZXMgdGhlIHZlcnNpb25cbiAgICAgICAgcHJpdmF0ZV9rZXkgPSBCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFsweDgwXSksIHByaXZhdGVfa2V5XSk7XG4gICAgICAgIHJldHVybiBrZXlVdGlscy5jaGVja0VuY29kZShwcml2YXRlX2tleSwgJ3NoYTI1NngyJyk7XG4gICAgfVxuXG4gICAgdmFyIHB1YmxpY19rZXkgPSB2b2lkIDA7XG5cbiAgICAvKipcbiAgICAgICAgQHJldHVybiB7UG9pbnR9XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1B1YmxpYygpIHtcbiAgICAgICAgaWYgKHB1YmxpY19rZXkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlXG4gICAgICAgICAgICAvLyBTIEwgTyBXIGluIHRoZSBicm93c2VyXG4gICAgICAgICAgICByZXR1cm4gcHVibGljX2tleTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUSA9IHNlY3AyNTZrMS5HLm11bHRpcGx5KGQpO1xuICAgICAgICByZXR1cm4gcHVibGljX2tleSA9IFB1YmxpY0tleS5mcm9tUG9pbnQoUSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiBkLnRvQnVmZmVyKDMyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgIEVDSUVTXG4gICAgICBAYXJnIHtzdHJpbmd8T2JqZWN0fSBwdWJrZXkgd2lmLCBQdWJsaWNLZXkgb2JqZWN0XG4gICAgICBAcmV0dXJuIHtCdWZmZXJ9IDY0IGJ5dGUgc2hhcmVkIHNlY3JldFxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHB1YmxpY19rZXkpIHtcbiAgICAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleShwdWJsaWNfa2V5KTtcbiAgICAgICAgdmFyIEtCID0gcHVibGljX2tleS50b1VuY29tcHJlc3NlZCgpLnRvQnVmZmVyKCk7XG4gICAgICAgIHZhciBLQlAgPSBQb2ludC5mcm9tQWZmaW5lKHNlY3AyNTZrMSwgQmlnSW50ZWdlci5mcm9tQnVmZmVyKEtCLnNsaWNlKDEsIDMzKSksIC8vIHhcbiAgICAgICAgQmlnSW50ZWdlci5mcm9tQnVmZmVyKEtCLnNsaWNlKDMzLCA2NSkpIC8vIHlcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIHIgPSB0b0J1ZmZlcigpO1xuICAgICAgICB2YXIgUCA9IEtCUC5tdWx0aXBseShCaWdJbnRlZ2VyLmZyb21CdWZmZXIocikpO1xuICAgICAgICB2YXIgUyA9IFAuYWZmaW5lWC50b0J1ZmZlcih7IHNpemU6IDMyIH0pO1xuICAgICAgICAvLyBTSEE1MTIgdXNlZCBpbiBFQ0lFU1xuICAgICAgICByZXR1cm4gaGFzaC5zaGE1MTIoUyk7XG4gICAgfVxuXG4gICAgLy8gLyoqIEVDSUVTIFRPRE8gdW5pdCB0ZXN0XG4gICAgLy8gICBAYXJnIHtzdHJpbmd8T2JqZWN0fSBwdWJrZXkgd2lmLCBQdWJsaWNLZXkgb2JqZWN0XG4gICAgLy8gICBAcmV0dXJuIHtCdWZmZXJ9IDY0IGJ5dGUgc2hhcmVkIHNlY3JldFxuICAgIC8vICovXG4gICAgLy8gZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHB1YmxpY19rZXkpIHtcbiAgICAvLyAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleShwdWJsaWNfa2V5KS50b1VuY29tcHJlc3NlZCgpXG4gICAgLy8gICAgIHZhciBQID0gcHVibGljX2tleS5RLm11bHRpcGx5KCBkICk7XG4gICAgLy8gICAgIHZhciBTID0gUC5hZmZpbmVYLnRvQnVmZmVyKHtzaXplOiAzMn0pO1xuICAgIC8vICAgICAvLyBFQ0lFUywgYWRkcyBhbiBleHRyYSBzaGE1MTJcbiAgICAvLyAgICAgcmV0dXJuIGhhc2guc2hhNTEyKFMpO1xuICAgIC8vIH1cblxuICAgIC8qKlxuICAgICAgQGFyZyB7c3RyaW5nfSBuYW1lIC0gY2hpbGQga2V5IG5hbWUuXG4gICAgICBAcmV0dXJuIHtQcml2YXRlS2V5fVxuICAgICAgIEBleGFtcGxlIGFjdGl2ZVByaXZhdGUgPSBtYXN0ZXJQcml2YXRlLmdldENoaWxkS2V5KCdvd25lcicpLmdldENoaWxkS2V5KCdhY3RpdmUnKVxuICAgICAgQGV4YW1wbGUgYWN0aXZlUHJpdmF0ZS5nZXRDaGlsZEtleSgnbXljb250cmFjdCcpLmdldENoaWxkS2V5KCdteXBlcm0nKVxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q2hpbGRLZXkobmFtZSkge1xuICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdXQVJOSU5HOiBnZXRDaGlsZEtleSB1bnRlc3RlZCBhZ2FpbnN0IGVvc2QnKTsgLy8gbm8gZW9zZCBpbXBsIHlldFxuICAgICAgICB2YXIgaW5kZXggPSBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUodG9CdWZmZXIoKSkudXBkYXRlKG5hbWUpLmRpZ2VzdCgpO1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleShpbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkOiBkLFxuICAgICAgICB0b1dpZjogdG9XaWYsXG4gICAgICAgIHRvU3RyaW5nOiB0b1N0cmluZyxcbiAgICAgICAgdG9QdWJsaWM6IHRvUHVibGljLFxuICAgICAgICB0b0J1ZmZlcjogdG9CdWZmZXIsXG4gICAgICAgIGdldFNoYXJlZFNlY3JldDogZ2V0U2hhcmVkU2VjcmV0LFxuICAgICAgICBnZXRDaGlsZEtleTogZ2V0Q2hpbGRLZXlcbiAgICB9O1xufVxuXG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIHBhcnNlS2V5KHByaXZhdGVTdHIpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHByaXZhdGVTdHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByaXZhdGVTdHIpLCAnc3RyaW5nJywgJ3ByaXZhdGVTdHInKTtcbiAgICB2YXIgbWF0Y2ggPSBwcml2YXRlU3RyLm1hdGNoKC9eUFZUXyhbQS1aYS16MC05XSspXyhbQS1aYS16MC05XSspJC8pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIC8vIGxlZ2FjeSBXSUYgLSBjaGVja3N1bSBpbmNsdWRlcyB0aGUgdmVyc2lvblxuICAgICAgICB2YXIgdmVyc2lvbktleSA9IGtleVV0aWxzLmNoZWNrRGVjb2RlKHByaXZhdGVTdHIsICdzaGEyNTZ4MicpO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IHZlcnNpb25LZXkucmVhZFVJbnQ4KDApO1xuICAgICAgICBhc3NlcnQuZXF1YWwoMHg4MCwgdmVyc2lvbiwgJ0V4cGVjdGVkIHZlcnNpb24gJyArIDB4ODAgKyAnLCBpbnN0ZWFkIGdvdCAnICsgdmVyc2lvbik7XG4gICAgICAgIHZhciBfcHJpdmF0ZUtleSA9IFByaXZhdGVLZXkuZnJvbUJ1ZmZlcih2ZXJzaW9uS2V5LnNsaWNlKDEpKTtcbiAgICAgICAgdmFyIF9rZXlUeXBlID0gJ0sxJztcbiAgICAgICAgdmFyIGZvcm1hdCA9ICdXSUYnO1xuICAgICAgICByZXR1cm4geyBwcml2YXRlS2V5OiBfcHJpdmF0ZUtleSwgZm9ybWF0OiBmb3JtYXQsIGtleVR5cGU6IF9rZXlUeXBlIH07XG4gICAgfVxuXG4gICAgYXNzZXJ0KG1hdGNoLmxlbmd0aCA9PT0gMywgJ0V4cGVjdGluZyBwcml2YXRlIGtleSBsaWtlOiBQVlRfSzFfYmFzZTU4cHJpdmF0ZUtleS4uJyk7XG5cbiAgICB2YXIgX21hdGNoID0gX3NsaWNlZFRvQXJyYXkobWF0Y2gsIDMpLFxuICAgICAgICBrZXlUeXBlID0gX21hdGNoWzFdLFxuICAgICAgICBrZXlTdHJpbmcgPSBfbWF0Y2hbMl07XG5cbiAgICBhc3NlcnQuZXF1YWwoa2V5VHlwZSwgJ0sxJywgJ0sxIHByaXZhdGUga2V5IGV4cGVjdGVkJyk7XG4gICAgdmFyIHByaXZhdGVLZXkgPSBQcml2YXRlS2V5LmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG4gICAgcmV0dXJuIHsgcHJpdmF0ZUtleTogcHJpdmF0ZUtleSwgZm9ybWF0OiAnUFZUJywga2V5VHlwZToga2V5VHlwZSB9O1xufVxuXG5Qcml2YXRlS2V5LmZyb21IZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGhleCwgJ2hleCcpKTtcbn07XG5cblByaXZhdGVLZXkuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGluZyBwYXJhbWV0ZXIgdG8gYmUgYSBCdWZmZXIgdHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDMzICYmIGJ1ZlszMl0gPT09IDEpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGNvbXByZXNzaW9uIGZsYWdcbiAgICAgICAgYnVmID0gYnVmLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgaWYgKDMyICE9PSBidWYubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIDMyIGJ5dGVzLCBpbnN0ZWFkIGdvdCAnICsgYnVmLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlS2V5KEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWYpKTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gc2VlZCAtIGFueSBsZW5ndGggc3RyaW5nLiAgVGhpcyBpcyBwcml2YXRlLCB0aGUgc2FtZSBzZWVkXG4gICAgcHJvZHVjZXMgdGhlIHNhbWUgcHJpdmF0ZSBrZXkgZXZlcnkgdGltZS5cblxuICAgIEByZXR1cm4ge1ByaXZhdGVLZXl9XG4qL1xuUHJpdmF0ZUtleS5mcm9tU2VlZCA9IGZ1bmN0aW9uIChzZWVkKSB7XG4gICAgLy8gZ2VuZXJhdGVfcHJpdmF0ZV9rZXlcbiAgICBpZiAoISh0eXBlb2Ygc2VlZCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2VlZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21CdWZmZXIoaGFzaC5zaGEyNTYoc2VlZCkpO1xufTtcblxuLyoqXG4gIEBhcmcge3dpZn0ga2V5XG4gIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYga2V5IGlzIGluIHRoZSBXYWxsZXQgSW1wb3J0IEZvcm1hdFxuKi9cblByaXZhdGVLZXkuaXNXaWYgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHRyeSB7XG4gICAgICAgIGFzc2VydChwYXJzZUtleSh0ZXh0KS5mb3JtYXQgPT09ICdXSUYnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gIEBhcmcge3dpZnxCdWZmZXJ8UHJpdmF0ZUtleX0ga2V5XG4gIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYga2V5IGlzIGNvbnZlcnRhYmxlIHRvIGEgcHJpdmF0ZSBrZXkgb2JqZWN0LlxuKi9cblByaXZhdGVLZXkuaXNWYWxpZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBQcml2YXRlS2V5KGtleSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuUHJpdmF0ZUtleS5mcm9tV2lmID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGNvbnNvbGUubG9nKCdQcml2YXRlS2V5LmZyb21XaWYgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBQcml2YXRlS2V5LmZyb21TdHJpbmcnKTtcbiAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHN0cik7XG59O1xuXG4vKipcbiAgICBAdGhyb3dzIHtBc3NlcnRFcnJvcnxFcnJvcn0gcGFyc2luZyBrZXlcbiAgICBAYXJnIHtzdHJpbmd9IHByaXZhdGVTdHIgRW9zaW8gb3IgV2FsbGV0IEltcG9ydCBGb3JtYXQgKHdpZikgLS0gYSBzZWNyZXRcbiovXG5Qcml2YXRlS2V5LmZyb21TdHJpbmcgPSBmdW5jdGlvbiAocHJpdmF0ZVN0cikge1xuICAgIHJldHVybiBwYXJzZUtleShwcml2YXRlU3RyKS5wcml2YXRlS2V5O1xufTtcblxuLyoqXG4gIENyZWF0ZSBhIG5ldyByYW5kb20gcHJpdmF0ZSBrZXkuXG5cbiAgQ2FsbCBpbml0aWFsaXplKCkgZmlyc3QgdG8gcnVuIHNvbWUgc2VsZi1jaGVja2luZyBjb2RlIGFuZCBnYXRoZXIgc29tZSBDUFVcbiAgZW50cm9weS5cblxuICBAYXJnIHtudW1iZXJ9IFtjcHVFbnRyb3B5Qml0cyA9IDBdIC0gYWRkaXRpb25hbCBDUFUgZW50cm9weSwgdGhpcyBhbHJlYWR5XG4gIGhhcHBlbnMgb25jZSBzbyBpdCBzaG91bGQgbm90IGJlIG5lZWRlZCBhZ2Fpbi5cblxuICBAcmV0dXJuIHtQcm9taXNlPFByaXZhdGVLZXk+fSAtIHJhbmRvbSBwcml2YXRlIGtleVxuKi9cblByaXZhdGVLZXkucmFuZG9tS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjcHVFbnRyb3B5Qml0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgIHJldHVybiBQcml2YXRlS2V5LmluaXRpYWxpemUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5yYW5kb20zMkJ5dGVCdWZmZXIoeyBjcHVFbnRyb3B5Qml0czogY3B1RW50cm9weUJpdHMgfSkpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gIEByZXR1cm4ge1Byb21pc2U8UHJpdmF0ZUtleT59IGZvciB0ZXN0aW5nLCBkb2VzIG5vdCByZXF1aXJlIGluaXRpYWxpemUoKS5cbiovXG5Qcml2YXRlS2V5LnVuc2FmZVJhbmRvbUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5yYW5kb20zMkJ5dGVCdWZmZXIoeyBzYWZlOiBmYWxzZSB9KSkpO1xufTtcblxudmFyIGluaXRpYWxpemVkID0gZmFsc2UsXG4gICAgdW5pdFRlc3RlZCA9IGZhbHNlO1xuXG4vKipcbiAgUnVuIHNlbGYtY2hlY2tpbmcgY29kZSBhbmQgZ2F0aGVyIENQVSBlbnRyb3B5LlxuXG4gIEluaXRpYWxpemF0aW9uIGhhcHBlbnMgb25jZSBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cblxuICBAcmV0dXJuIHtQcm9taXNlfVxuKi9cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1bml0VGVzdCgpO1xuICAgIGtleVV0aWxzLmFkZEVudHJvcHkuYXBwbHkoa2V5VXRpbHMsIF90b0NvbnN1bWFibGVBcnJheShrZXlVdGlscy5jcHVFbnRyb3B5KCkpKTtcbiAgICBhc3NlcnQoa2V5VXRpbHMuZW50cm9weUNvdW50KCkgPj0gMTI4LCAnaW5zdWZmaWNpZW50IGVudHJvcHknKTtcblxuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbn1cblxuUHJpdmF0ZUtleS5pbml0aWFsaXplID0gcHJvbWlzZUFzeW5jKGluaXRpYWxpemUpO1xuXG4vKipcbiAgVW5pdCB0ZXN0IGJhc2ljIHByaXZhdGUgYW5kIHB1YmxpYyBrZXkgZnVuY3Rpb25hbGl0eS5cblxuICBAdGhyb3dzIHtBc3NlcnRFcnJvcn1cbiovXG5mdW5jdGlvbiB1bml0VGVzdCgpIHtcbiAgICB2YXIgcHZ0ID0gUHJpdmF0ZUtleShoYXNoLnNoYTI1NignJykpO1xuXG4gICAgdmFyIHB2dEVycm9yID0gJ2tleSBjb21wYXJpc29uIHRlc3QgZmFpbGVkIG9uIGEga25vd24gcHJpdmF0ZSBrZXknO1xuICAgIGFzc2VydC5lcXVhbChwdnQudG9XaWYoKSwgJzVLWVpkVUVvMzl6M0ZQcnR1WDJRYmJ3R25OUDV6VGQ3eXlyMlNDMWoyOTlzQkNuV2pzcycsIHB2dEVycm9yKTtcbiAgICBhc3NlcnQuZXF1YWwocHZ0LnRvU3RyaW5nKCksICc1S1laZFVFbzM5ejNGUHJ0dVgyUWJid0duTlA1elRkN3l5cjJTQzFqMjk5c0JDbldqc3MnLCBwdnRFcnJvcik7XG4gICAgLy8gYXNzZXJ0LmVxdWFsKHB2dC50b1N0cmluZygpLCAnUFZUX0sxXzJqSDNubmh4aFIzelBVY3NLYVdXWkM5Wm1aQW5LbTNHQW5GRDF4eW5HSkUxWm51dmpkJywgcHZ0RXJyb3IpXG5cbiAgICB2YXIgcHViID0gcHZ0LnRvUHVibGljKCk7XG4gICAgdmFyIHB1YkVycm9yID0gJ3B1YmtleSBzdHJpbmcgY29tcGFyaXNvbiB0ZXN0IGZhaWxlZCBvbiBhIGtub3duIHB1YmxpYyBrZXknO1xuICAgIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmcoKSwgJ0VPUzg1OWd4Zm5YeVVyaU1nVWVUaGgxZld2M29xY3BMRnlIYTNUZkZZQzRQSzJIcWhUb1ZNJywgcHViRXJyb3IpO1xuICAgIC8vIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmcoKSwgJ1BVQl9LMV84NTlneGZuWHlVcmlNZ1VlVGhoMWZXdjNvcWNwTEZ5SGEzVGZGWUM0UEsySHQ3YmVlWCcsIHB1YkVycm9yKVxuICAgIC8vIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmdMZWdhY3koKSwgJ0VPUzg1OWd4Zm5YeVVyaU1nVWVUaGgxZld2M29xY3BMRnlIYTNUZkZZQzRQSzJIcWhUb1ZNJywgcHViRXJyb3IpXG5cbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHB2dC50b1dpZigpKTtcbiAgICB9LCAnY29udmVydGluZyBrbm93biB3aWYgZnJvbSBzdHJpbmcnKTtcbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHB2dC50b1N0cmluZygpKTtcbiAgICB9LCAnY29udmVydGluZyBrbm93biBwdnQgZnJvbSBzdHJpbmcnKTtcbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvU3RyaW5nKCkpO1xuICAgIH0sICdjb252ZXJ0aW5nIGtub3duIHB1YmxpYyBrZXkgZnJvbSBzdHJpbmcnKTtcbiAgICAvLyBkb2VzTm90VGhyb3coKCkgPT4gUHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvU3RyaW5nTGVnYWN5KCkpLCAnY29udmVydGluZyBrbm93biBwdWJsaWMga2V5IGZyb20gc3RyaW5nJylcblxuICAgIHVuaXRUZXN0ZWQgPSB0cnVlO1xufVxuXG4vKiogQHByaXZhdGUgKi9cbnZhciBkb2VzTm90VGhyb3cgPSBmdW5jdGlvbiBkb2VzTm90VGhyb3coY2IsIG1zZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9IG1zZyArICcgPT0+ICcgKyBlcnJvci5tZXNzYWdlO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59OyIsImV4cG9ydCBmdW5jdGlvbiBmb3JNcyhtczogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKTtcbiAgfSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZm9yQ29uZGl0aW9uKGZuUHJlZGljdDogKCkgPT4gYm9vbGVhbiwgc3Bhbk1zOiBudW1iZXIgPSAxMDApIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoZm5QcmVkaWN0KCkpIHJldHVybjtcbiAgICBhd2FpdCBmb3JNcyhzcGFuTXMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG1lc3NhZ2U6IHN0cmluZywgcHVibGljIHJlYWRvbmx5IG1zPzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVGltZW91dEVycm9yJztcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0aW1lb3V0UHJvbWlzZTxUPihtczogbnVtYmVyLCBwcm9taXNlTGlrZTogUHJvbWlzZTxUPiwgb25DYW5jZWw/OiAoLi4uYXJnczogYW55W10pID0+IGFueVtdKSB7XG4gICAgbGV0IHRpbWVPdXQ6IE5vZGVKUy5UaW1lb3V0O1xuICAgIGNvbnN0IHRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aW1lT3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAob25DYW5jZWwpIHtcbiAgICAgICAgICAgICAgICBvbkNhbmNlbChtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWplY3QobmV3IFRpbWVvdXRFcnJvcihgVGltZWQgb3V0IGluICR7bXN9IG1zLmAsIG1zKSk7XG4gICAgICAgIH0sIG1zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHByb21pc2VMaWtlKSxcbiAgICAgICAgdFByb21pc2UsXG4gICAgXSkudGhlbigodikgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZU91dCk7XG4gICAgICAgIHJldHVybiB2O1xuICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVPdXQpO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG59IiwiZXhwb3J0ICogZnJvbSAnLi9lb3NOb2Rlcyc7IiwiZXhwb3J0ICogZnJvbSAnLi9wbGF5ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9tdWx0aVNvdXJjZVBsYXllcic7XG5leHBvcnQgKiBmcm9tICcuL291dE9mQm94JztcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9jb25maWdzJzsiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxuZnVuY3Rpb24gTUQ1ICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxufVxuXG5pbmhlcml0cyhNRDUsIEhhc2hCYXNlKVxuXG5NRDUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBNID0gQVJSQVkxNlxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIE1baV0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShpICogNClcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcblxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVszXSwgMHhjMWJkY2VlZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpXG5cbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzFdLCAweGY2MWUyNTYyLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bNl0sIDB4YzA0MGIzNDAsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxMV0sIDB4MjY1ZTVhNTEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMF0sIDB4ZTliNmM3YWEsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZDYyZjEwNWQsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxMF0sIDB4MDI0NDE0NTMsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxNV0sIDB4ZDhhMWU2ODEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bNF0sIDB4ZTdkM2ZiYzgsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bOV0sIDB4MjFlMWNkZTYsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxNF0sIDB4YzMzNzA3ZDYsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVszXSwgMHhmNGQ1MGQ4NywgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs4XSwgMHg0NTVhMTRlZCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxM10sIDB4YTllM2U5MDUsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsyXSwgMHhmY2VmYTNmOCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzddLCAweDY3NmYwMmQ5LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzEyXSwgMHg4ZDJhNGM4YSwgMjApXG5cbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzVdLCAweGZmZmEzOTQyLCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bOF0sIDB4ODc3MWY2ODEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTFdLCAweDZkOWQ2MTIyLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzE0XSwgMHhmZGU1MzgwYywgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxXSwgMHhhNGJlZWE0NCwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzRdLCAweDRiZGVjZmE5LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzddLCAweGY2YmI0YjYwLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzEwXSwgMHhiZWJmYmM3MCwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxM10sIDB4Mjg5YjdlYzYsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVswXSwgMHhlYWExMjdmYSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVszXSwgMHhkNGVmMzA4NSwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVs2XSwgMHgwNDg4MWQwNSwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs5XSwgMHhkOWQ0ZDAzOSwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzEyXSwgMHhlNmRiOTllNSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxNV0sIDB4MWZhMjdjZjgsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMl0sIDB4YzRhYzU2NjUsIDIzKVxuXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdlNGYsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzldLCAweGViODZkMzkxLCAyMSlcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkKSB8IDBcbn1cblxuTUQ1LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsInZhciBQb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKVxudmFyIEN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpXG5cbnZhciBnZXRDdXJ2ZUJ5TmFtZSA9IHJlcXVpcmUoJy4vbmFtZXMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ3VydmU6IEN1cnZlLFxuICBQb2ludDogUG9pbnQsXG4gIGdldEN1cnZlQnlOYW1lOiBnZXRDdXJ2ZUJ5TmFtZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxuZnVuY3Rpb24gSGFzaCAoaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBuZXcgTUQ1KClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKVxuXG4gIHJldHVybiBuZXcgSGFzaChzaGEoYWxnKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgVHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG52YXIgRmNidWZmZXIgPSByZXF1aXJlKCcuL2ZjYnVmZmVyJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBjcmVhdGUgPSBGY2J1ZmZlci5jcmVhdGU7XG5cbi8qKlxuICBAdHlwZWRlZiB7b2JqZWN0fSBTZXJpYWxpemVyQ29uZmlnXG4gIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW1NlcmlhbGl6ZXJDb25maWcuZGVmYXVsdHMgPSBmYWxzZV0gLSBJbnNlcnQgaW4gZGVmYXVsdHMgKGxpa2UgMCwgZmFsc2UsICcwMDAuLi4nLCBvciAnJykgZm9yIGFueSBtaXNzaW5nIHZhbHVlcy4gIFRoaXMgaGVscHMgdGVzdCBhbmQgaW5zcGVjdCB3aGF0IGEgZGVmaW5pdGlvbiBzaG91bGQgbG9vayBsaWtlLiAgRG8gbm90IGVuYWJsZSBpbiBwcm9kdWN0aW9uLlxuICBAcHJvcGVydHkge2Jvb2xlYW59IFtTZXJpYWxpemVyQ29uZmlnLmRlYnVnID0gZmFsc2VdIC0gUHJpbnRzIGxvdHMgb2YgSEVYIGFuZCBmaWVsZC1sZXZlbCBpbmZvcm1hdGlvbiB0byBoZWxwIGRlYnVnIGJpbmFyeSBzZXJpYWxpemF0aW9uLlxuICBAcHJvcGVydHkge29iamVjdH0gW2N1c3RvbVR5cGVzXSAtIEFkZCBvciBvdmVyd3JpdGUgbG93IGxldmVsIHR5cGVzIChzZWUgLi9zcmMvdHlwZXMuanMgYGNvbnN0IHR5cGVzID0gey4uLn1gKS5cbiovXG5cbi8qKlxuICBAdHlwZWRlZiB7b2JqZWN0fSBDcmVhdGVTdHJ1Y3RcbiAgQHByb3BlcnR5IHtBcnJheTxTdHJpbmc+fSBDcmVhdGVTdHJ1Y3QuZXJyb3JzIC0gSWYgYW55IGVycm9ycyBleGlzdHMsIG5vIHN0cnV0cyB3aWxsIGJlIGNyZWF0ZWQuXG4gIEBwcm9wZXJ0eSB7T2JqZWN0fSBDcmVhdGVTdHJ1Y3Quc3RydWN0IC0gU3RydWN0IG9iamVjdHMga2V5ZWQgYnkgZGVmaW5pdGlvbiBuYW1lLlxuICBAcHJvcGVydHkge1N0cmluZ30gQ3JlYXRlU3RydWN0LnN0cnVjdC5zdHJ1Y3ROYW1lIC0gU3RydWN0IG9iamVjdCB0aGF0IHdpbGwgc2VyaWFsaXplIHRoaXMgdHlwZS5cbiAgQHByb3BlcnR5IHtTdHJ1Y3R9IENyZWF0ZVN0cnVjdC5zdHJ1Y3Quc3RydWN0IC0gU3RydWN0IG9iamVjdCB0aGF0IHdpbGwgc2VyaWFsaXplIHRoaXMgdHlwZSAoc2VlIC4vc3JjL3N0cnVjdC5qcykuXG4qL1xuXG4vKipcbiAgQGFyZyB7b2JqZWN0fSBkZWZpbml0aW9ucyAtIGV4YW1wbGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9FT1NJTy9lb3Nqcy1qc29uL2Jsb2IvbWFzdGVyL3NjaGVtYVxuICBAYXJnIHtTZXJpYWxpemVyQ29uZmlnfSBjb25maWdcbiAgQHJldHVybiB7Q3JlYXRlU3RydWN0fVxuKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbnMpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKCh0eXBlb2YgZGVmaW5pdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGRlZmluaXRpb25zKSkgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGVmaW5pdGlvbnMgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIGlmIChjb25maWcuY3VzdG9tVHlwZXMpIHtcbiAgICBkZWZpbml0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmluaXRpb25zKTsgLy9jbG9uZVxuICAgIGZvciAodmFyIGtleSBpbiBjb25maWcuY3VzdG9tVHlwZXMpIHtcbiAgICAgIC8vIGN1c3RvbSB0eXBlcyBvdmVyd3JpdGUgZGVmaW5pdGlvbnNcbiAgICAgIGRlbGV0ZSBkZWZpbml0aW9uc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0eXBlcyA9IFR5cGVzKGNvbmZpZyk7XG5cbiAgdmFyIF9jcmVhdGUgPSBjcmVhdGUoZGVmaW5pdGlvbnMsIHR5cGVzKSxcbiAgICAgIGVycm9ycyA9IF9jcmVhdGUuZXJyb3JzLFxuICAgICAgc3RydWN0cyA9IF9jcmVhdGUuc3RydWN0cztcblxuICAvKiogRXh0ZW5kIHdpdGggbW9yZSBKU09OIHNjaGVtYSBhbmQgdHlwZSBkZWZpbml0aW9ucyAqL1xuXG5cbiAgdmFyIF9leHRlbmQgPSBmdW5jdGlvbiBfZXh0ZW5kKHBhcmVudCwgY2hpbGQpIHtcbiAgICB2YXIgY29tYmluZWQgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnQsIGNoaWxkKTtcblxuICAgIHZhciBfY3JlYXRlMiA9IGNyZWF0ZShjb21iaW5lZCwgdHlwZXMpLFxuICAgICAgICBzdHJ1Y3RzID0gX2NyZWF0ZTIuc3RydWN0cyxcbiAgICAgICAgZXJyb3JzID0gX2NyZWF0ZTIuZXJyb3JzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgc3RydWN0czogc3RydWN0cyxcbiAgICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kKGNvbWJpbmVkLCBjaGlsZCk7XG4gICAgICB9LFxuICAgICAgZnJvbUJ1ZmZlcjogZnJvbUJ1ZmZlcih0eXBlcywgc3RydWN0cyksXG4gICAgICB0b0J1ZmZlcjogdG9CdWZmZXIodHlwZXMsIHN0cnVjdHMpXG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGVycm9yczogZXJyb3JzLFxuICAgIHN0cnVjdHM6IHN0cnVjdHMsXG4gICAgdHlwZXM6IHR5cGVzLFxuICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKGNoaWxkKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZChkZWZpbml0aW9ucywgY2hpbGQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgIEBhcmcge3N0cmluZ30gdHlwZU5hbWUgbG9va3VwIHN0cnVjdCBvciB0eXBlIGJ5IG5hbWVcbiAgICAgIEBhcmcge0J1ZmZlcn0gYnVmIHNlcmlhbGl6ZWQgZGF0YSB0byBiZSBwYXJzZWRcbiAgICAgIEByZXR1cm4ge29iamVjdH0gZGVzZXJpYWxpemVkIG9iamVjdFxuICAgICovXG4gICAgZnJvbUJ1ZmZlcjogZnJvbUJ1ZmZlcih0eXBlcywgc3RydWN0cyksXG5cbiAgICAvKipcbiAgICAgIEBhcmcge3N0cmluZ30gdHlwZU5hbWUgbG9va3VwIHN0cnVjdCBvciB0eXBlIGJ5IG5hbWVcbiAgICAgIEBhcmcge09iamVjdH0gb2JqZWN0IGZvciBzZXJpYWxpemF0aW9uXG4gICAgICBAcmV0dXJuIHtCdWZmZXJ9IHNlcmlhbGl6ZWQgb2JqZWN0XG4gICAgKi9cbiAgICB0b0J1ZmZlcjogdG9CdWZmZXIodHlwZXMsIHN0cnVjdHMpXG4gIH07XG59O1xuXG52YXIgZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIGZyb21CdWZmZXIodHlwZXMsIHN0cnVjdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlTmFtZSwgYnVmKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB0eXBlTmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodHlwZU5hbWUpLCAnc3RyaW5nJywgJ3R5cGVOYW1lICh0eXBlIG9yIHN0cnVjdCBuYW1lKScpO1xuICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmID0gQnVmZmVyLmZyb20oYnVmLCAnaGV4Jyk7XG4gICAgfVxuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIoYnVmKSwgJ2V4cGVjdGluZyBidWY8aGV4fEJ1ZmZlcj4nKTtcblxuICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZU5hbWVdO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0eXBlID0gdHlwZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gc3RydWN0c1t0eXBlTmFtZV07XG4gICAgfVxuICAgIGFzc2VydCh0eXBlLCAnbWlzc2luZyB0eXBlIG9yIHN0cnVjdDogJyArIHR5cGVOYW1lKTtcbiAgICByZXR1cm4gRmNidWZmZXIuZnJvbUJ1ZmZlcih0eXBlLCBidWYpO1xuICB9O1xufTtcblxudmFyIHRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIodHlwZXMsIHN0cnVjdHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlTmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHR5cGVOYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0eXBlTmFtZSksICdzdHJpbmcnLCAndHlwZU5hbWUgKHR5cGUgb3Igc3RydWN0IG5hbWUpJyk7XG4gICAgYXNzZXJ0KHZhbHVlICE9IG51bGwsICd2YWx1ZSBpcyByZXF1aXJlZCcpO1xuXG4gICAgdmFyIHR5cGUgPSB0eXBlc1t0eXBlTmFtZV07XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHR5cGUgPSB0eXBlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSBzdHJ1Y3RzW3R5cGVOYW1lXTtcbiAgICB9XG4gICAgYXNzZXJ0KHR5cGUsICdtaXNzaW5nIHR5cGUgb3Igc3RydWN0OiAnICsgdHlwZU5hbWUpO1xuICAgIHJldHVybiBGY2J1ZmZlci50b0J1ZmZlcih0eXBlLCB2YWx1ZSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mcm9tQnVmZmVyID0gRmNidWZmZXIuZnJvbUJ1ZmZlcjtcbm1vZHVsZS5leHBvcnRzLnRvQnVmZmVyID0gRmNidWZmZXIudG9CdWZmZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXknKTtcblxudmFyIF9zbGljZWRUb0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlZFRvQXJyYXkyKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnZW9zanMtZWNjJyksXG4gICAgU2lnbmF0dXJlID0gX3JlcXVpcmUuU2lnbmF0dXJlLFxuICAgIFB1YmxpY0tleSA9IF9yZXF1aXJlLlB1YmxpY0tleTtcblxudmFyIEZjYnVmZmVyID0gcmVxdWlyZSgnZmNidWZmZXInKTtcbnZhciBCeXRlQnVmZmVyID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgc2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEnKTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vZm9ybWF0JyksXG4gICAgaXNOYW1lID0gX3JlcXVpcmUyLmlzTmFtZSxcbiAgICBlbmNvZGVOYW1lID0gX3JlcXVpcmUyLmVuY29kZU5hbWUsXG4gICAgZGVjb2RlTmFtZSA9IF9yZXF1aXJlMi5kZWNvZGVOYW1lLFxuICAgIERlY2ltYWxQYWQgPSBfcmVxdWlyZTIuRGVjaW1hbFBhZCxcbiAgICBEZWNpbWFsSW1wbHkgPSBfcmVxdWlyZTIuRGVjaW1hbEltcGx5LFxuICAgIERlY2ltYWxVbmltcGx5ID0gX3JlcXVpcmUyLkRlY2ltYWxVbmltcGx5LFxuICAgIHByaW50QXNzZXQgPSBfcmVxdWlyZTIucHJpbnRBc3NldCxcbiAgICBwYXJzZUFzc2V0ID0gX3JlcXVpcmUyLnBhcnNlQXNzZXQ7XG5cbi8qKiBDb25maWd1cmVzIEZjYnVmZmVyIGZvciBFT1Mgc3BlY2lmaWMgc3RydWN0cyBhbmQgdHlwZXMuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZXh0ZW5kZWRTY2hlbWEgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHN0cnVjdExvb2t1cCA9IGZ1bmN0aW9uIHN0cnVjdExvb2t1cChsb29rdXBOYW1lLCBhY2NvdW50KSB7XG4gICAgdmFyIGNhY2hlID0gY29uZmlnLmFiaUNhY2hlLmFiaShhY2NvdW50KTtcblxuICAgIC8vIExvb2t1cCBieSBBQkkgYWN0aW9uIFwibmFtZVwiXG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBjYWNoZS5hYmkuYWN0aW9uc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmIChhY3Rpb24ubmFtZSA9PT0gbG9va3VwTmFtZSkge1xuICAgICAgICAgIHZhciBfc3RydWN0ID0gY2FjaGUuc3RydWN0c1thY3Rpb24udHlwZV07XG4gICAgICAgICAgaWYgKF9zdHJ1Y3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdHJ1Y3Q7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIExvb2t1cCBzdHJ1Y3QgYnkgXCJ0eXBlXCJcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3RydWN0ID0gY2FjaGUuc3RydWN0c1tsb29rdXBOYW1lXTtcbiAgICBpZiAoc3RydWN0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBzdHJ1Y3Q7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIEFCSSBhY3Rpb246ICcgKyBsb29rdXBOYW1lKTtcbiAgfTtcblxuICAvLyBJZiBub2Rlb3MgZG9lcyBub3QgaGF2ZSBhbiBBQkkgc2V0dXAgZm9yIGEgY2VydGFpbiBhY3Rpb24udHlwZSwgaXQgd2lsbCB0aHJvd1xuICAvLyBhbiBlcnJvcjogYEludmFsaWQgY2FzdCBmcm9tIG9iamVjdF90eXBlIHRvIHN0cmluZ2AgLi4gZm9yY2VBY3Rpb25EYXRhSGV4XG4gIC8vIG1heSBiZSB1c2VkIHRvIHVudGlsIG5hdGl2ZSBBQkkgaXMgYWRkZWQgb3IgZml4ZWQuXG4gIHZhciBmb3JjZUFjdGlvbkRhdGFIZXggPSBjb25maWcuZm9yY2VBY3Rpb25EYXRhSGV4ICE9IG51bGwgPyBjb25maWcuZm9yY2VBY3Rpb25EYXRhSGV4IDogdHJ1ZTtcblxuICB2YXIgb3ZlcnJpZGUgPSBPYmplY3QuYXNzaWduKHt9LCBhdXRob3JpdHlPdmVycmlkZShjb25maWcpLCBhYmlPdmVycmlkZShzdHJ1Y3RMb29rdXApLCB3YXNtQ29kZU92ZXJyaWRlKGNvbmZpZyksIGFjdGlvbkRhdGFPdmVycmlkZShzdHJ1Y3RMb29rdXAsIGZvcmNlQWN0aW9uRGF0YUhleCksIGNvbmZpZy5vdmVycmlkZSk7XG5cbiAgdmFyIGVvc1R5cGVzID0ge1xuICAgIG5hbWU6IGZ1bmN0aW9uIG5hbWUoKSB7XG4gICAgICByZXR1cm4gW05hbWVdO1xuICAgIH0sXG4gICAgcHVibGljX2tleTogZnVuY3Rpb24gcHVibGljX2tleSgpIHtcbiAgICAgIHJldHVybiBbdmFyaWFudChQdWJsaWNLZXlFY2MpXTtcbiAgICB9LFxuXG4gICAgc3ltYm9sOiBmdW5jdGlvbiBzeW1ib2woKSB7XG4gICAgICByZXR1cm4gW19TeW1ib2xdO1xuICAgIH0sXG4gICAgc3ltYm9sX2NvZGU6IGZ1bmN0aW9uIHN5bWJvbF9jb2RlKCkge1xuICAgICAgcmV0dXJuIFtTeW1ib2xDb2RlXTtcbiAgICB9LFxuICAgIGV4dGVuZGVkX3N5bWJvbDogZnVuY3Rpb24gZXh0ZW5kZWRfc3ltYm9sKCkge1xuICAgICAgcmV0dXJuIFtFeHRlbmRlZFN5bWJvbF07XG4gICAgfSxcblxuICAgIGFzc2V0OiBmdW5jdGlvbiBhc3NldCgpIHtcbiAgICAgIHJldHVybiBbQXNzZXRdO1xuICAgIH0sIC8vIEFmdGVyIFN5bWJvbDogYW1vdW50LCBwcmVjaXNpb24sIHN5bWJvbCwgY29udHJhY3RcbiAgICBleHRlbmRlZF9hc3NldDogZnVuY3Rpb24gZXh0ZW5kZWRfYXNzZXQoKSB7XG4gICAgICByZXR1cm4gW0V4dGVuZGVkQXNzZXRdO1xuICAgIH0sIC8vIEFmdGVyIEFzc2V0OiBhbW91bnQsIHByZWNpc2lvbiwgc3ltYm9sLCBjb250cmFjdFxuXG4gICAgc2lnbmF0dXJlOiBmdW5jdGlvbiBzaWduYXR1cmUoKSB7XG4gICAgICByZXR1cm4gW3ZhcmlhbnQoU2lnbmF0dXJlVHlwZSldO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3VzdG9tVHlwZXMgPSBPYmplY3QuYXNzaWduKHt9LCBlb3NUeXBlcywgY29uZmlnLmN1c3RvbVR5cGVzKTtcbiAgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7IG92ZXJyaWRlOiBvdmVycmlkZSB9LCB7IGN1c3RvbVR5cGVzOiBjdXN0b21UeXBlcyB9LCBjb25maWcpO1xuXG4gIC8vIERvIG5vdCBzb3J0IHRyYW5zYWN0aW9uIGFjdGlvbnNcbiAgY29uZmlnLnNvcnQgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcuc29ydCk7XG4gIGNvbmZpZy5zb3J0WydhY3Rpb24uYXV0aG9yaXphdGlvbiddID0gdHJ1ZTtcbiAgY29uZmlnLnNvcnRbJ3NpZ25lZF90cmFuc2FjdGlvbi5zaWduYXR1cmUnXSA9IHRydWU7XG4gIGNvbmZpZy5zb3J0WydhdXRob3JpdHkuYWNjb3VudHMnXSA9IHRydWU7XG4gIGNvbmZpZy5zb3J0WydhdXRob3JpdHkua2V5cyddID0gdHJ1ZTtcblxuICB2YXIgZnVsbFNjaGVtYSA9IE9iamVjdC5hc3NpZ24oe30sIHNjaGVtYSwgZXh0ZW5kZWRTY2hlbWEpO1xuXG4gIHZhciBfRmNidWZmZXIgPSBGY2J1ZmZlcihmdWxsU2NoZW1hLCBjb25maWcpLFxuICAgICAgc3RydWN0cyA9IF9GY2J1ZmZlci5zdHJ1Y3RzLFxuICAgICAgdHlwZXMgPSBfRmNidWZmZXIudHlwZXMsXG4gICAgICBlcnJvcnMgPSBfRmNidWZmZXIuZXJyb3JzLFxuICAgICAgZnJvbUJ1ZmZlciA9IF9GY2J1ZmZlci5mcm9tQnVmZmVyLFxuICAgICAgdG9CdWZmZXIgPSBfRmNidWZmZXIudG9CdWZmZXI7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyb3JzLCBudWxsLCA0KSk7XG4gIH1cblxuICByZXR1cm4geyBzdHJ1Y3RzOiBzdHJ1Y3RzLCB0eXBlczogdHlwZXMsIGZyb21CdWZmZXI6IGZyb21CdWZmZXIsIHRvQnVmZmVyOiB0b0J1ZmZlciB9O1xufTtcblxuLyoqXG4gIE5hbWUgZW9zOjp0eXBlcyBuYXRpdmUuaHBwXG4qL1xudmFyIE5hbWUgPSBmdW5jdGlvbiBOYW1lKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIG4gPSBkZWNvZGVOYW1lKGIucmVhZFVpbnQ2NCgpLCBmYWxzZSk7IC8vIGIgaXMgYWxyZWFkeSBpbiBsaXR0bGVFbmRpYW5cbiAgICAgIC8vIGlmKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgIC8vICAgY29uc29sZS5lcnJvcihgJHtufWAsICcoTmFtZS5mcm9tQnl0ZUJ1ZmZlciknKVxuICAgICAgLy8gfVxuICAgICAgcmV0dXJuIG47XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAvLyAgIGNvbnNvbGUuZXJyb3IoYCR7dmFsdWV9YCwgKE5hbWUuYXBwZW5kQnl0ZUJ1ZmZlcikpXG4gICAgICAvLyB9XG4gICAgICBiLndyaXRlVWludDY0KGVuY29kZU5hbWUodmFsdWUsIGZhbHNlKSk7IC8vIGIgaXMgYWxyZWFkeSBpbiBsaXR0bGVFbmRpYW5cbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEEgdmFyaWFudCBpcyBsaWtlIGhhdmluZyBhIHZlcnNpb24gb2YgYW4gb2JqZWN0LiAgQSB2YXJpbnQgY29tZXNcbiAgZmlyc3QgYW5kIGlkZW50aWZpZXMgd2hpY2ggdHlwZSBvZiBvYmplY3QgdGhpcyBpcy5cblxuICBAYXJnIHtBcnJheX0gdmFyaWFudEFycmF5IGFycmF5IG9mIHR5cGVzXG4qL1xudmFyIHZhcmlhbnQgPSBmdW5jdGlvbiB2YXJpYW50KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFyaWFudEFycmF5ID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgdmFyaWFudEFycmF5W19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWxpZGF0aW9uLCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzKSB7XG4gICAgdmFyIHZhcmlhbnRzID0gdmFyaWFudEFycmF5Lm1hcChmdW5jdGlvbiAoVHlwZSkge1xuICAgICAgcmV0dXJuIFR5cGUodmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcyk7XG4gICAgfSk7XG4gICAgdmFyIHN0YXRpY1ZhcmlhbnQgPSBiYXNlVHlwZXMuc3RhdGljX3ZhcmlhbnQodmFyaWFudHMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNWYXJpYW50LmZyb21CeXRlQnVmZmVyKGIpO1xuICAgICAgfSxcbiAgICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gWzAsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWNWYXJpYW50LmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gWzAsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGljVmFyaWFudC5mcm9tT2JqZWN0KHZhbHVlKVsxXTtcbiAgICAgIH0sXG4gICAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gWzAsIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGljVmFyaWFudC50b09iamVjdCh2YWx1ZSlbMV07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBQdWJsaWNLZXlFY2MgPSBmdW5jdGlvbiBQdWJsaWNLZXlFY2ModmFsaWRhdGlvbikge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYmNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgMzMpO1xuICAgICAgYi5za2lwKDMzKTtcbiAgICAgIHZhciBwdWJidWYgPSBCdWZmZXIuZnJvbShiY29weS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG4gICAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIocHViYnVmKS50b1N0cmluZyh2YWxpZGF0aW9uLmtleVByZWZpeCk7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAvLyAgIGNvbnNvbGUuZXJyb3IoYCR7dmFsdWV9YCwgJ1B1YmxpY0tleVR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcicpXG4gICAgICAvLyB9XG4gICAgICB2YXIgYnVmID0gUHVibGljS2V5LmZyb21TdHJpbmdPclRocm93KHZhbHVlLCB2YWxpZGF0aW9uLmtleVByZWZpeCkudG9CdWZmZXIoKTtcbiAgICAgIGIuYXBwZW5kKGJ1Zi50b1N0cmluZygnYmluYXJ5JyksICdiaW5hcnknKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB2YXIga2V5UHJlZml4ID0gdmFsaWRhdGlvbi5rZXlQcmVmaXggPyB2YWxpZGF0aW9uLmtleVByZWZpeCA6ICdFT1MnO1xuICAgICAgICByZXR1cm4ga2V5UHJlZml4ICsgJzZNUnkuLic7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEludGVybmFsOiBwcmVjaXNpb24sIHN5bWJvbFxuICBFeHRlcm5hbDogc3ltYm9sXG4gIEBleGFtcGxlICdTWVMnXG4qL1xudmFyIF9TeW1ib2wgPSBmdW5jdGlvbiBfU3ltYm9sKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGJjb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIDgpO1xuICAgICAgYi5za2lwKDgpO1xuXG4gICAgICB2YXIgcHJlY2lzaW9uID0gYmNvcHkucmVhZFVpbnQ4KCk7XG4gICAgICB2YXIgYmluID0gYmNvcHkudG9CaW5hcnkoKTtcblxuICAgICAgdmFyIHN5bWJvbCA9ICcnO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBiaW5bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgY29kZSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgIGlmIChjb2RlID09ICdcXDAnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3ltYm9sICs9IGNvZGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZWNpc2lvbiArICcsJyArIHN5bWJvbDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhciBfcGFyc2VBc3NldCA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0LnN5bWJvbCxcbiAgICAgICAgICBwcmVjaXNpb24gPSBfcGFyc2VBc3NldC5wcmVjaXNpb247XG5cbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ1ByZWNpc2lvbiB1bmtub3duIGZvciBzeW1ib2w6ICcgKyB2YWx1ZSk7XG4gICAgICB2YXIgcGFkID0gJ1xcMCcucmVwZWF0KDcgLSBzeW1ib2wubGVuZ3RoKTtcbiAgICAgIGIuYXBwZW5kKFN0cmluZy5mcm9tQ2hhckNvZGUocHJlY2lzaW9uKSArIHN5bWJvbCArIHBhZCk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBhc3NlcnQodmFsdWUgIT0gbnVsbCwgJ1N5bWJvbCBpcyByZXF1aXJlZDogJyArIHZhbHVlKTtcblxuICAgICAgdmFyIF9wYXJzZUFzc2V0MiA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0Mi5zeW1ib2wsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQyLnByZWNpc2lvbjtcblxuICAgICAgaWYgKHByZWNpc2lvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbnRlcm5hbCBvYmplY3QsIHRoaXMgY2FuIGhhdmUgdGhlIHByZWNpc2lvbiBwcmVmaXhcbiAgICAgICAgcmV0dXJuIHByZWNpc2lvbiArICcsJyArIHN5bWJvbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ1NZUyc7XG4gICAgICB9XG4gICAgICAvLyBzeW1ib2wgb25seSAod2l0aG91dCBwcmVjaXNpb24gcHJlZml4KVxuICAgICAgcmV0dXJuIHBhcnNlQXNzZXQodmFsdWUpLnN5bWJvbDtcbiAgICB9XG4gIH07XG59O1xuXG4vKiogU3ltYm9sIHR5cGUgd2l0aG91dCB0aGUgcHJlY2lzaW9uICovXG52YXIgU3ltYm9sQ29kZSA9IGZ1bmN0aW9uIFN5bWJvbENvZGUodmFsaWRhdGlvbikge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYmNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgOCk7XG4gICAgICBiLnNraXAoOCk7XG5cbiAgICAgIHZhciBiaW4gPSBiY29weS50b0JpbmFyeSgpO1xuXG4gICAgICB2YXIgc3ltYm9sID0gJyc7XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IGJpbltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBjb2RlID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGNvZGUgPT0gJ1xcMCcpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzeW1ib2wgKz0gY29kZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gJycgKyBzeW1ib2w7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YXIgX3BhcnNlQXNzZXQzID0gcGFyc2VBc3NldCh2YWx1ZSksXG4gICAgICAgICAgc3ltYm9sID0gX3BhcnNlQXNzZXQzLnN5bWJvbDtcblxuICAgICAgdmFyIHBhZCA9ICdcXDAnLnJlcGVhdCg4IC0gc3ltYm9sLmxlbmd0aCk7XG4gICAgICBiLmFwcGVuZChzeW1ib2wgKyBwYWQpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgYXNzZXJ0KHZhbHVlICE9IG51bGwsICdTeW1ib2wgaXMgcmVxdWlyZWQ6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIHZhciBfcGFyc2VBc3NldDQgPSBwYXJzZUFzc2V0KHZhbHVlKSxcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDQuc3ltYm9sO1xuXG4gICAgICByZXR1cm4gc3ltYm9sO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnU1lTJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZUFzc2V0KHZhbHVlKS5zeW1ib2w7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEludGVybmFsOiBwcmVjaXNpb24sIHN5bWJvbCwgY29udHJhY3RcbiAgRXh0ZXJuYWw6IHN5bWJvbCwgY29udHJhY3RcbiAgQGV4YW1wbGUgJ1NZU0Bjb250cmFjdCdcbiovXG52YXIgRXh0ZW5kZWRTeW1ib2wgPSBmdW5jdGlvbiBFeHRlbmRlZFN5bWJvbCh2YWxpZGF0aW9uLCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzKSB7XG4gIHZhciBzeW1ib2xUeXBlID0gY3VzdG9tVHlwZXMuc3ltYm9sKHZhbGlkYXRpb24pO1xuICB2YXIgY29udHJhY3ROYW1lID0gY3VzdG9tVHlwZXMubmFtZSh2YWxpZGF0aW9uKTtcblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgc3ltYm9sID0gc3ltYm9sVHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHZhciBjb250cmFjdCA9IGNvbnRyYWN0TmFtZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHJldHVybiBzeW1ib2wgKyAnQCcgKyBjb250cmFjdDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpLCAnc3RyaW5nJywgJ0ludmFsaWQgZXh0ZW5kZWQgc3ltYm9sOiAnICsgdmFsdWUpO1xuXG4gICAgICB2YXIgX3ZhbHVlJHNwbGl0ID0gdmFsdWUuc3BsaXQoJ0AnKSxcbiAgICAgICAgICBfdmFsdWUkc3BsaXQyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfdmFsdWUkc3BsaXQsIDIpLFxuICAgICAgICAgIHN5bWJvbCA9IF92YWx1ZSRzcGxpdDJbMF0sXG4gICAgICAgICAgY29udHJhY3QgPSBfdmFsdWUkc3BsaXQyWzFdO1xuXG4gICAgICBhc3NlcnQoY29udHJhY3QgIT0gbnVsbCwgJ01pc3NpbmcgQGNvbnRyYWN0IHN1ZmZpeCBpbiBleHRlbmRlZCBzeW1ib2w6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIHN5bWJvbFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBzeW1ib2wpO1xuICAgICAgY29udHJhY3ROYW1lLmFwcGVuZEJ5dGVCdWZmZXIoYiwgY29udHJhY3QpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnU1lTQGNvbnRyYWN0JztcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAgSW50ZXJuYWw6IGFtb3VudCwgcHJlY2lzaW9uLCBzeW1ib2wsIGNvbnRyYWN0XG4gIEBleGFtcGxlICcxLjAwMDAgU1lTJ1xuKi9cbnZhciBBc3NldCA9IGZ1bmN0aW9uIEFzc2V0KHZhbGlkYXRpb24sIGJhc2VUeXBlcywgY3VzdG9tVHlwZXMpIHtcbiAgdmFyIGFtb3VudFR5cGUgPSBiYXNlVHlwZXMuaW50NjQodmFsaWRhdGlvbik7XG4gIHZhciBzeW1ib2xUeXBlID0gY3VzdG9tVHlwZXMuc3ltYm9sKHZhbGlkYXRpb24pO1xuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBhbW91bnQgPSBhbW91bnRUeXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuICAgICAgYXNzZXJ0KGFtb3VudCAhPSBudWxsLCAnYW1vdW50Jyk7XG5cbiAgICAgIHZhciBzeW0gPSBzeW1ib2xUeXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuXG4gICAgICB2YXIgX3BhcnNlQXNzZXQ1ID0gcGFyc2VBc3NldCgnJyArIHN5bSksXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ1LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDUuc3ltYm9sO1xuXG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdwcmVjaXNpb24nKTtcbiAgICAgIGFzc2VydChzeW1ib2wgIT0gbnVsbCwgJ3N5bWJvbCcpO1xuXG4gICAgICByZXR1cm4gRGVjaW1hbFVuaW1wbHkoYW1vdW50LCBwcmVjaXNpb24pICsgJyAnICsgc3ltYm9sO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFyIF9wYXJzZUFzc2V0NiA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIGFtb3VudCA9IF9wYXJzZUFzc2V0Ni5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ2LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDYuc3ltYm9sO1xuXG4gICAgICBhc3NlcnQoYW1vdW50ICE9IG51bGwsICdhbW91bnQnKTtcbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ3ByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnc3ltYm9sJyk7XG5cbiAgICAgIGFtb3VudFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBEZWNpbWFsSW1wbHkoYW1vdW50LCBwcmVjaXNpb24pKTtcbiAgICAgIHN5bWJvbFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBwcmVjaXNpb24gKyAnLCcgKyBzeW1ib2wpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIF9wYXJzZUFzc2V0NyA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIGFtb3VudCA9IF9wYXJzZUFzc2V0Ny5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ3LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDcuc3ltYm9sO1xuXG4gICAgICBhc3NlcnQoYW1vdW50ICE9IG51bGwsICdhbW91bnQnKTtcbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ3ByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnc3ltYm9sJyk7XG5cbiAgICAgIHJldHVybiBEZWNpbWFsUGFkKGFtb3VudCwgcHJlY2lzaW9uKSArICcgJyArIHN5bWJvbDtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJzAuMDAwMSBTWVMnO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3BhcnNlQXNzZXQ4ID0gcGFyc2VBc3NldCh2YWx1ZSksXG4gICAgICAgICAgYW1vdW50ID0gX3BhcnNlQXNzZXQ4LmFtb3VudCxcbiAgICAgICAgICBwcmVjaXNpb24gPSBfcGFyc2VBc3NldDgucHJlY2lzaW9uLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0OC5zeW1ib2w7XG5cbiAgICAgIGFzc2VydChhbW91bnQgIT0gbnVsbCwgJ2Ftb3VudCcpO1xuICAgICAgYXNzZXJ0KHByZWNpc2lvbiAhPSBudWxsLCAncHJlY2lzaW9uJyk7XG4gICAgICBhc3NlcnQoc3ltYm9sICE9IG51bGwsICdzeW1ib2wnKTtcblxuICAgICAgcmV0dXJuIERlY2ltYWxQYWQoYW1vdW50LCBwcmVjaXNpb24pICsgJyAnICsgc3ltYm9sO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICBAZXhhbXBsZSAnMS4wMDAwIFNZU0Bjb250cmFjdCdcbiovXG52YXIgRXh0ZW5kZWRBc3NldCA9IGZ1bmN0aW9uIEV4dGVuZGVkQXNzZXQodmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcykge1xuICB2YXIgYXNzZXRUeXBlID0gY3VzdG9tVHlwZXMuYXNzZXQodmFsaWRhdGlvbik7XG4gIHZhciBjb250cmFjdE5hbWUgPSBjdXN0b21UeXBlcy5uYW1lKHZhbGlkYXRpb24pO1xuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBhc3NldCA9IGFzc2V0VHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHZhciBjb250cmFjdCA9IGNvbnRyYWN0TmFtZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHJldHVybiBwYXJzZUFzc2V0KGFzc2V0ICsgJ0AnICsgY29udHJhY3QpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSksICdvYmplY3QnLCAnZXhwZWN0aW5nIGV4dGVuZGVkX2Fzc2V0IG9iamVjdCwgZ290ICcgKyAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkpO1xuXG4gICAgICB2YXIgYXNzZXQgPSBwcmludEFzc2V0KHZhbHVlKTtcblxuICAgICAgdmFyIF9hc3NldCRzcGxpdCA9IGFzc2V0LnNwbGl0KCdAJyksXG4gICAgICAgICAgX2Fzc2V0JHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX2Fzc2V0JHNwbGl0LCAyKSxcbiAgICAgICAgICBjb250cmFjdCA9IF9hc3NldCRzcGxpdDJbMV07XG5cbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgY29udHJhY3QgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY29udHJhY3QpLCAnc3RyaW5nJywgJ0ludmFsaWQgZXh0ZW5kZWQgYXNzZXQ6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIC8vIGFzc2V0IGluY2x1ZGVzIGNvbnRyYWN0IChhc3NldFR5cGUgbmVlZHMgdGhpcylcbiAgICAgIGFzc2V0VHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIGFzc2V0KTtcbiAgICAgIGNvbnRyYWN0TmFtZS5hcHBlbmRCeXRlQnVmZmVyKGIsIGNvbnRyYWN0KTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIC8vIGxpa2U6IDEuMDAwMCBTWVNAY29udHJhY3Qgb3IgMSBTWVNAY29udHJhY3RcbiAgICAgIHZhciBhc3NldCA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihhc3NldCwgcGFyc2VBc3NldCh2YWx1ZSkpO1xuICAgICAgfSBlbHNlIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXNzZXQsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgJ2V4cGVjdGluZyBleHRlbmRlZF9hc3NldDxvYmplY3R8c3RyaW5nPiwgZ290OiAnICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFtb3VudCA9IGFzc2V0LmFtb3VudCxcbiAgICAgICAgICBwcmVjaXNpb24gPSBhc3NldC5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gYXNzZXQuc3ltYm9sLFxuICAgICAgICAgIGNvbnRyYWN0ID0gYXNzZXQuY29udHJhY3Q7XG5cbiAgICAgIGFzc2VydChhbW91bnQgIT0gbnVsbCwgJ21pc3NpbmcgYW1vdW50Jyk7XG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdtaXNzaW5nIHByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnbWlzc2luZyBzeW1ib2wnKTtcbiAgICAgIGFzc2VydChjb250cmFjdCAhPSBudWxsLCAnbWlzc2luZyBjb250cmFjdCcpO1xuXG4gICAgICByZXR1cm4geyBhbW91bnQ6IGFtb3VudCwgcHJlY2lzaW9uOiBwcmVjaXNpb24sIHN5bWJvbDogc3ltYm9sLCBjb250cmFjdDogY29udHJhY3QgfTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFtb3VudDogJzEuMDAwMCcsXG4gICAgICAgICAgcHJlY2lzaW9uOiA0LFxuICAgICAgICAgIHN5bWJvbDogJ1NZUycsXG4gICAgICAgICAgY29udHJhY3Q6ICdlb3Npby50b2tlbidcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSksICdvYmplY3QnLCAnZXhwZWN0aW5nIGV4dGVuZGVkX2Fzc2V0IG9iamVjdCcpO1xuICAgICAgdmFyIGFtb3VudCA9IHZhbHVlLmFtb3VudCxcbiAgICAgICAgICBwcmVjaXNpb24gPSB2YWx1ZS5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gdmFsdWUuc3ltYm9sLFxuICAgICAgICAgIGNvbnRyYWN0ID0gdmFsdWUuY29udHJhY3Q7XG5cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYW1vdW50OiBEZWNpbWFsUGFkKGFtb3VudCwgcHJlY2lzaW9uKSxcbiAgICAgICAgcHJlY2lzaW9uOiBwcmVjaXNpb24sXG4gICAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgICBjb250cmFjdDogY29udHJhY3RcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxudmFyIFNpZ25hdHVyZVR5cGUgPSBmdW5jdGlvbiBTaWduYXR1cmVUeXBlKHZhbGlkYXRpb24sIGJhc2VUeXBlcykge1xuICB2YXIgc2lnbmF0dXJlVHlwZSA9IGJhc2VUeXBlcy5maXhlZF9ieXRlczY1KHZhbGlkYXRpb24pO1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgc2lnbmF0dXJlQnVmZmVyID0gc2lnbmF0dXJlVHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIHZhciBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmVCdWZmZXIpO1xuICAgICAgcmV0dXJuIHNpZ25hdHVyZS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFyIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHZhbHVlKTtcbiAgICAgIHNpZ25hdHVyZVR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBzaWduYXR1cmUudG9CdWZmZXIoKSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20odmFsdWUpO1xuICAgICAgcmV0dXJuIHNpZ25hdHVyZS50b1N0cmluZygpO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnU0lHX0sxX2JhczU4c2lnbmF0dXJlLi4nO1xuICAgICAgfVxuICAgICAgdmFyIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHZhbHVlKTtcbiAgICAgIHJldHVybiBzaWduYXR1cmUudG9TdHJpbmcoKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgYXV0aG9yaXR5T3ZlcnJpZGUgPSBmdW5jdGlvbiBhdXRob3JpdHlPdmVycmlkZShjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiogc2hvcnRoYW5kIGBFT1M2TVJ5QWouLmAgKi9cbiAgICAnYXV0aG9yaXR5LmZyb21PYmplY3QnOiBmdW5jdGlvbiBhdXRob3JpdHlGcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoUHVibGljS2V5LmZyb21TdHJpbmcodmFsdWUsIGNvbmZpZy5rZXlQcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGhyZXNob2xkOiAxLFxuICAgICAgICAgIGtleXM6IFt7IGtleTogdmFsdWUsIHdlaWdodDogMSB9XVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIF92YWx1ZSRzcGxpdDMgPSB2YWx1ZS5zcGxpdCgnQCcpLFxuICAgICAgICAgICAgX3ZhbHVlJHNwbGl0NCA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3ZhbHVlJHNwbGl0MywgMiksXG4gICAgICAgICAgICBhY2NvdW50ID0gX3ZhbHVlJHNwbGl0NFswXSxcbiAgICAgICAgICAgIF92YWx1ZSRzcGxpdDQkID0gX3ZhbHVlJHNwbGl0NFsxXSxcbiAgICAgICAgICAgIHBlcm1pc3Npb24gPSBfdmFsdWUkc3BsaXQ0JCA9PT0gdW5kZWZpbmVkID8gJ2FjdGl2ZScgOiBfdmFsdWUkc3BsaXQ0JDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRocmVzaG9sZDogMSxcbiAgICAgICAgICBhY2NvdW50czogW3tcbiAgICAgICAgICAgIHBlcm1pc3Npb246IHtcbiAgICAgICAgICAgICAgYWN0b3I6IGFjY291bnQsXG4gICAgICAgICAgICAgIHBlcm1pc3Npb246IHBlcm1pc3Npb25cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3ZWlnaHQ6IDFcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBhYmlPdmVycmlkZSA9IGZ1bmN0aW9uIGFiaU92ZXJyaWRlKHN0cnVjdExvb2t1cCkge1xuICByZXR1cm4ge1xuICAgICdhYmlfZGVmLmZyb21PYmplY3QnOiBmdW5jdGlvbiBhYmlfZGVmRnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGpzb24gPSBCdWZmZXIuZnJvbSh2YWx1ZSwgJ2hleCcpLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChqc29uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGpzb24gPSBCdWZmZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgIH1cbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7IC8vIGxldCB0aGUgZGVmYXVsdCB0eXBlIHRha2UgY2FyZSBvZiBpdFxuICAgIH0sXG5cbiAgICAnc2V0YWJpLmFiaS5hcHBlbmRCeXRlQnVmZmVyJzogZnVuY3Rpb24gc2V0YWJpQWJpQXBwZW5kQnl0ZUJ1ZmZlcihfcmVmKSB7XG4gICAgICB2YXIgZmllbGRzID0gX3JlZi5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZi5vYmplY3QsXG4gICAgICAgICAgYiA9IF9yZWYuYjtcblxuICAgICAgdmFyIHNlciA9IHN0cnVjdExvb2t1cCgnYWJpX2RlZicsICdlb3NpbycpO1xuICAgICAgdmFyIGIyID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuXG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iamVjdC5hYmkpKSB7XG4gICAgICAgIGIyLmFwcGVuZChvYmplY3QuYWJpKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9iamVjdC5hYmkpID09ICdvYmplY3QnKSB7XG4gICAgICAgIHNlci5hcHBlbmRCeXRlQnVmZmVyKGIyLCBvYmplY3QuYWJpKTtcbiAgICAgIH1cblxuICAgICAgYi53cml0ZVZhcmludDMyKGIyLm9mZnNldCk7IC8vIGxlbmd0aCBwcmVmaXhcbiAgICAgIGIuYXBwZW5kKGIyLmNvcHkoMCwgYjIub2Zmc2V0KSwgJ2JpbmFyeScpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciB3YXNtQ29kZU92ZXJyaWRlID0gZnVuY3Rpb24gd2FzbUNvZGVPdmVycmlkZShjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICAnc2V0Y29kZS5jb2RlLmZyb21PYmplY3QnOiBmdW5jdGlvbiBzZXRjb2RlQ29kZUZyb21PYmplY3QoX3JlZjIpIHtcbiAgICAgIHZhciBvYmplY3QgPSBfcmVmMi5vYmplY3QsXG4gICAgICAgICAgcmVzdWx0ID0gX3JlZjIucmVzdWx0O1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgY29kZSA9IG9iamVjdC5jb2RlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICgvXlxccypcXChtb2R1bGUvLnRlc3QoY29kZSkpIHtcbiAgICAgICAgICB2YXIgYmluYXJ5ZW4gPSBjb25maWcuYmluYXJ5ZW47XG5cbiAgICAgICAgICBhc3NlcnQoYmluYXJ5ZW4gIT0gbnVsbCwgJ3JlcXVpcmVkOiBjb25maWcuYmluYXJ5ZW4gPSByZXF1aXJlKFwiYmluYXJ5ZW5cIiknKTtcbiAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQXNzZW1ibGluZyBXQVNNLi4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHdhc20gPSBCdWZmZXIuZnJvbShiaW5hcnllbi5wYXJzZVRleHQoY29kZSkuZW1pdEJpbmFyeSgpKTtcbiAgICAgICAgICByZXN1bHQuY29kZSA9IHdhc207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LmNvZGUgPSBvYmplY3QuY29kZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvciwgb2JqZWN0LmNvZGUpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAgTmVzdGVkIHNlcmlhbGl6ZWQgc3RydWN0dXJlLiAgTmVzdGVkIHN0cnVjdCBtYXkgYmUgaW4gSEVYIG9yIG9iamVjdCBmb3JtYXQuXG4qL1xudmFyIGFjdGlvbkRhdGFPdmVycmlkZSA9IGZ1bmN0aW9uIGFjdGlvbkRhdGFPdmVycmlkZShzdHJ1Y3RMb29rdXAsIGZvcmNlQWN0aW9uRGF0YUhleCkge1xuICByZXR1cm4ge1xuICAgICdhY3Rpb24uZGF0YS5mcm9tQnl0ZUJ1ZmZlcic6IGZ1bmN0aW9uIGFjdGlvbkRhdGFGcm9tQnl0ZUJ1ZmZlcihfcmVmMykge1xuICAgICAgdmFyIGZpZWxkcyA9IF9yZWYzLmZpZWxkcyxcbiAgICAgICAgICBvYmplY3QgPSBfcmVmMy5vYmplY3QsXG4gICAgICAgICAgYiA9IF9yZWYzLmIsXG4gICAgICAgICAgY29uZmlnID0gX3JlZjMuY29uZmlnO1xuXG4gICAgICB2YXIgc2VyID0gKG9iamVjdC5uYW1lIHx8ICcnKSA9PSAnJyA/IGZpZWxkcy5kYXRhIDogc3RydWN0TG9va3VwKG9iamVjdC5uYW1lLCBvYmplY3QuYWNjb3VudCk7XG4gICAgICBpZiAoc2VyKSB7XG4gICAgICAgIGIucmVhZFZhcmludDMyKCk7IC8vIGxlbmd0aCBwcmVmaXggKHVzZWZ1bGwgaWYgb2JqZWN0Lm5hbWUgaXMgdW5rbm93bilcbiAgICAgICAgb2JqZWN0LmRhdGEgPSBzZXIuZnJvbUJ5dGVCdWZmZXIoYiwgY29uZmlnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBVbmtub3duIEFjdGlvbi5uYW1lICR7b2JqZWN0Lm5hbWV9YClcbiAgICAgICAgdmFyIGxlblByZWZpeCA9IGIucmVhZFZhcmludDMyKCk7XG4gICAgICAgIHZhciBiQ29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyBsZW5QcmVmaXgpO1xuICAgICAgICBiLnNraXAobGVuUHJlZml4KTtcbiAgICAgICAgb2JqZWN0LmRhdGEgPSBCdWZmZXIuZnJvbShiQ29weS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdhY3Rpb24uZGF0YS5hcHBlbmRCeXRlQnVmZmVyJzogZnVuY3Rpb24gYWN0aW9uRGF0YUFwcGVuZEJ5dGVCdWZmZXIoX3JlZjQpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfcmVmNC5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZjQub2JqZWN0LFxuICAgICAgICAgIGIgPSBfcmVmNC5iO1xuXG4gICAgICB2YXIgc2VyID0gKG9iamVjdC5uYW1lIHx8ICcnKSA9PSAnJyA/IGZpZWxkcy5kYXRhIDogc3RydWN0TG9va3VwKG9iamVjdC5uYW1lLCBvYmplY3QuYWNjb3VudCk7XG4gICAgICBpZiAoc2VyKSB7XG4gICAgICAgIHZhciBiMiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICAgICAgc2VyLmFwcGVuZEJ5dGVCdWZmZXIoYjIsIG9iamVjdC5kYXRhKTtcbiAgICAgICAgYi53cml0ZVZhcmludDMyKGIyLm9mZnNldCk7XG4gICAgICAgIGIuYXBwZW5kKGIyLmNvcHkoMCwgYjIub2Zmc2V0KSwgJ2JpbmFyeScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFVua25vd24gQWN0aW9uLm5hbWUgJHtvYmplY3QubmFtZX1gKVxuICAgICAgICB2YXIgZGF0YSA9IHR5cGVvZiBvYmplY3QuZGF0YSA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShvYmplY3QuZGF0YSwgJ2hleCcpIDogb2JqZWN0LmRhdGE7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBzdHJ1Y3QgXFwnJyArIG9iamVjdC5uYW1lICsgJ1xcJyBmb3IgY29udHJhY3QgXFwnJyArIG9iamVjdC5hY2NvdW50ICsgJ1xcJywgbG9jYXRlIHRoaXMgc3RydWN0IG9yIHByb3ZpZGUgc2VyaWFsaXplZCBhY3Rpb24uZGF0YScpO1xuICAgICAgICB9XG4gICAgICAgIGIud3JpdGVWYXJpbnQzMihkYXRhLmxlbmd0aCk7XG4gICAgICAgIGIuYXBwZW5kKGRhdGEudG9TdHJpbmcoJ2JpbmFyeScpLCAnYmluYXJ5Jyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdhY3Rpb24uZGF0YS5mcm9tT2JqZWN0JzogZnVuY3Rpb24gYWN0aW9uRGF0YUZyb21PYmplY3QoX3JlZjUpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfcmVmNS5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZjUub2JqZWN0LFxuICAgICAgICAgIHJlc3VsdCA9IF9yZWY1LnJlc3VsdDtcbiAgICAgIHZhciBkYXRhID0gb2JqZWN0LmRhdGEsXG4gICAgICAgICAgbmFtZSA9IG9iamVjdC5uYW1lO1xuXG4gICAgICB2YXIgc2VyID0gKG5hbWUgfHwgJycpID09ICcnID8gZmllbGRzLmRhdGEgOiBzdHJ1Y3RMb29rdXAobmFtZSwgb2JqZWN0LmFjY291bnQpO1xuICAgICAgaWYgKHNlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXN1bHQuZGF0YSA9IHNlci5mcm9tT2JqZWN0KGRhdGEpOyAvLyByZXNvbHZlIHNob3J0aGFuZFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhciBidWYgPSBCdWZmZXIuZnJvbShkYXRhLCAnaGV4Jyk7XG4gICAgICAgICAgcmVzdWx0LmRhdGEgPSBGY2J1ZmZlci5mcm9tQnVmZmVyKHNlciwgYnVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgaGV4IHN0cmluZyBvciBvYmplY3QgaW4gYWN0aW9uLmRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFVua25vd24gQWN0aW9uLm5hbWUgJHtvYmplY3QubmFtZX1gKVxuICAgICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdhY3Rpb24uZGF0YS50b09iamVjdCc6IGZ1bmN0aW9uIGFjdGlvbkRhdGFUb09iamVjdChfcmVmNikge1xuICAgICAgdmFyIGZpZWxkcyA9IF9yZWY2LmZpZWxkcyxcbiAgICAgICAgICBvYmplY3QgPSBfcmVmNi5vYmplY3QsXG4gICAgICAgICAgcmVzdWx0ID0gX3JlZjYucmVzdWx0LFxuICAgICAgICAgIGNvbmZpZyA9IF9yZWY2LmNvbmZpZztcblxuICAgICAgdmFyIF9yZWY3ID0gb2JqZWN0IHx8IHt9LFxuICAgICAgICAgIGRhdGEgPSBfcmVmNy5kYXRhLFxuICAgICAgICAgIG5hbWUgPSBfcmVmNy5uYW1lO1xuXG4gICAgICB2YXIgc2VyID0gKG5hbWUgfHwgJycpID09ICcnID8gZmllbGRzLmRhdGEgOiBzdHJ1Y3RMb29rdXAobmFtZSwgb2JqZWN0LmFjY291bnQpO1xuICAgICAgaWYgKCFzZXIpIHtcbiAgICAgICAgLy8gVHlwZXMgd2l0aG91dCBhbiBBQkkgd2lsbCBhY2NlcHQgaGV4XG4gICAgICAgIHJlc3VsdC5kYXRhID0gQnVmZmVyLmlzQnVmZmVyKGRhdGEpID8gZGF0YS50b1N0cmluZygnaGV4JykgOiBkYXRhO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZUFjdGlvbkRhdGFIZXgpIHtcbiAgICAgICAgdmFyIGIyID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHNlci5hcHBlbmRCeXRlQnVmZmVyKGIyLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuZGF0YSA9IGIyLmNvcHkoMCwgYjIub2Zmc2V0KS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXN1bHQuZGF0YScsIHJlc3VsdC5kYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNlcmlhbGl6YWJsZSBKU09OXG4gICAgICByZXN1bHQuZGF0YSA9IHNlci50b09iamVjdChkYXRhLCBjb25maWcpO1xuICAgIH1cbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXNJdGVyYWJsZTIgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9pcy1pdGVyYWJsZVwiKTtcblxudmFyIF9pc0l0ZXJhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSXRlcmFibGUyKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9nZXQtaXRlcmF0b3JcIik7XG5cbnZhciBfZ2V0SXRlcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SXRlcmF0b3IyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2kgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShhcnIpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gdHJ1ZTtcbiAgICAgIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2FycjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNJdGVyYWJsZTMuZGVmYXVsdCkoT2JqZWN0KGFycikpKSB7XG4gICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgICB9XG4gIH07XG59KCk7IiwiaW1wb3J0IEFzc2V0IGZyb20gJy4vbW9kZWwvYXNzZXQnO1xuaW1wb3J0IHtjcmVhdGVMb2dnZXJ9IGZyb20gJy4vdXRpbHMvbG9nJztcblxuaW1wb3J0IENoYWluSGVscGVyIGZyb20gJy4vaGVscGVycy9jaGFpbic7XG5pbXBvcnQgS2hIZWxwZXIgZnJvbSAnLi9oZWxwZXJzL2toJztcbmltcG9ydCBFb3NQcm92aWRlciBmcm9tICcuL21vZGVsL2Vvc1Byb3ZpZGVyJztcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi91dGlscy9ldmVudEhhbmRsZXInO1xuXG5jb25zdCBsb2cgPSBjcmVhdGVMb2dnZXIoJ2NoYWluJyk7XG5cbmNvbnN0IHBhY2thZ2VKc29uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5cbi8qKlxuICogZXZlbnQgbmFtZXMgc3VwcG9ydGVkIGluIHBsYXllclxuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICogQHR5cGUge3tFUlJfVFJBTlNDQUxfRkFJTEVEOiBzdHJpbmd9fVxuICovXG5jb25zdCBFVkVOVF9OQU1FUyA9IHtcbiAgICBFUlJfVFJBTlNGRVJfRkFJTEVEOiAnRVJSX1RSQU5TRkVSX0ZBSUxFRCcsXG4gICAgRVJSX1RSQU5TQ0FMX0ZBSUxFRDogJ0VSUl9UUkFOU0NBTF9GQUlMRUQnLFxuICAgIEVSUl9UUkFOU0VORF9GQUlMRUQ6ICdFUlJfVFJBTlNFTkRfRkFJTEVEJyxcbn07XG5cbi8qKlxuICogUGxheWVyXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBFb3NQcm92aWRlciB7XG5cbiAgICBwcm90ZWN0ZWQgX2V2ZW50czogRXZlbnRIYW5kbGVyID0gbmV3IEV2ZW50SGFuZGxlcigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZXZlbnRzLmVuYWJsZUV2ZW50cyhFVkVOVF9OQU1FUyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXIoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjaGFpbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFpbkhlbHBlcih0aGlzLmVvc0NsaWVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBraCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLaEhlbHBlcih0aGlzLmNoYWluKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWNjb3VudCBpbmZvIG9mIGFueSB1c2VyLCBpZiB0aGUgYWNjb3VudCBuYW1lIG5vdCBnaXZlbiwgYWNjb3VudCBpbmZvIG9mIGN1cnJlbnQgaWRlbnRpdHkgd2lsbCByZXR1cm5cbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7QWNjb3VudEluZm99Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYWluLmdldEFjY291bnRJbmZvKGFjY291bnRfbmFtZSB8fCAoYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpKS5uYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYmFsYW5jZSBvZiBzcGVjaWZpYyBhY2NvdW50XG4gICAgICogQHBhcmFtIGNvZGUgLSBBY2NvdW50IG9mIHRoZSBjdXJyZW5jeSBjb250cmFjdC4gVGhlIGRlZmF1bHQgY29kZSBpcyBcImVvc2lvLnRva2VuXCIsIHdoaWNoIGlzIHRoZSBjdXJyZW5jeSBjb2RlIG9mIGVvc1xuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSB1c2VyJ3MgYWNjb3VudCBuYW1lLCBuYW1lIG9mIGN1ciBpZGVudGl0eSBieSBkZWZhdWx0XG4gICAgICogQHBhcmFtIHN5bWJvbE5hbWUgLSB0aGUgdG9rZW4ncyBzeW1ib2wgbmFtZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nfHVuZGVmaW5lZD59IGFzc2V0IGZvcm1hdCAnMS4wMDAwIEVPUydcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QmFsYW5jZShhY2NvdW50X25hbWU/OiBzdHJpbmcsIGNvZGU6IHN0cmluZyA9ICdlb3Npby50b2tlbicsIHN5bWJvbE5hbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhaW4uZ2V0QmFsYW5jZShhY2NvdW50X25hbWUgfHwgKGF3YWl0IHRoaXMuZ2V0SWRlbnRpdHkoKSkubmFtZSwgY29kZSwgc3ltYm9sTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGJhbGFuY2VzIGxpc3Qgb2Ygc3BlY2lmaWMgYWNjb3VudFxuICAgICAqIEBwYXJhbSBjb2RlIC0gQWNjb3VudCBvZiB0aGUgY3VycmVuY3kgY29udHJhY3QuIFRoZSBkZWZhdWx0IGNvZGUgaXMgXCJlb3Npby50b2tlblwiXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIHVzZXIncyBhY2NvdW50IG5hbWUsIG5hbWUgb2YgY3VyIGlkZW50aXR5IGJ5IGRlZmF1bHRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5LjxzdHJpbmc+Pn0gYXNzZXQgZm9ybWF0ICcxLjAwMDAgRU9TJ1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRCYWxhbmNlcyhhY2NvdW50X25hbWU/OiBzdHJpbmcsIGNvZGU6IHN0cmluZyA9ICdlb3Npby50b2tlbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhaW4uZ2V0QmFsYW5jZXMoYWNjb3VudF9uYW1lIHx8IChhd2FpdCB0aGlzLmdldElkZW50aXR5KCkpLm5hbWUsIGNvZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIHZhbHVlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gY29kZSAtIEFjY291bnQgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0LiBUaGUgZGVmYXVsdCBjb2RlIGlzIFwiZW9zaW8udG9rZW5cIiwgd2hpY2ggaXMgdGhlIGN1cnJlbmN5IGNvZGUgb2YgZW9zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIHVzZXIncyBhY2NvdW50IG5hbWUsIG5hbWUgb2YgY3VyIGlkZW50aXR5IGJ5IGRlZmF1bHRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFzc2V0Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QmFsYW5jZUFzc2V0KGFjY291bnRfbmFtZT86IHN0cmluZywgY29kZSA9ICdlb3Npby50b2tlbicpIHtcbiAgICAgICAgY29uc3Qgc3RyQXNzZXQgPSBhd2FpdCB0aGlzLmdldEJhbGFuY2UoYWNjb3VudF9uYW1lLCBjb2RlKTtcbiAgICAgICAgcmV0dXJuIEFzc2V0LnBhcnNlKHN0ckFzc2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cmFuc2ZlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdHkgLSBlb3MgYXNzZXQgZm9ybWF0LCBlLnAuIFwiMS4wMDAwIEVPU1wiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lbW8gLSBtZW1vXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSB0cmFuc2FjdGlvbkRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgdHJhbnNmZXIodGFyZ2V0OiBzdHJpbmcsIHF1YW50aXR5OiBzdHJpbmcsIG1lbW86IHN0cmluZyA9ICcnKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYWluLnRyYW5zZmVyKFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcXVhbnRpdHksXG4gICAgICAgICAgICBtZW1vLFxuICAgICAgICAgICAgKGVycjogRXJyb3IpID0+IHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfVFJBTlNDQUxfRkFJTEVELCBlcnIpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNhbGwga2ggY29udHJhY3Qgd2l0aCB0cmFuc2ZlciAobWF0Y2ggZW9za2l0KVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdHkgLSBlb3MgYXNzZXQgZm9ybWF0LCBlLnAuIFwiMS4wMDAwIEVPU1wiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZ1bmMgLSBmdW5jdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJnc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gdHJhbnNhY3Rpb25EYXRhXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHRyYW5zY2FsKHRhcmdldDogc3RyaW5nLCBxdWFudGl0eTogc3RyaW5nLCBmdW5jOiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmtoLnRyYW5zY2FsKFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcXVhbnRpdHksXG4gICAgICAgICAgICBmdW5jLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgIChlcnI6IEVycm9yKSA9PiB0aGlzLmV2ZW50cy5lbWl0RXZlbnQoRVZFTlRfTkFNRVMuRVJSX1RSQU5TQ0FMX0ZBSUxFRCwgZXJyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VuZCBhY3Rpb24gdG8gYSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gYWNjb3VudCBvZiBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gZnVuY3Rpb24gbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0ganNvbkRhdGEgLSBkYXRhXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gLSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjYWxsKGNvZGU6IHN0cmluZywgZnVuYzogc3RyaW5nLCBqc29uRGF0YTogYW55KSB7XG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5KCk7XG4gICAgICAgIGNvbnN0IHRyeCA9IGF3YWl0IHRoaXMuY2hhaW4uY2FsbChjb2RlLCBmdW5jLCBqc29uRGF0YSwge1xuICAgICAgICAgICAgYWN0b3I6IGFjY291bnQubmFtZSxcbiAgICAgICAgICAgIHBlcm1pc3Npb246IGFjY291bnQuYXV0aG9yaXR5LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRyeCkge1xuICAgICAgICAgICAgbG9nLmluZm8oYGNhbGwgb3BlcmF0aW9uIGRlYWxlZCwgdHhJRDogJHt0cngudHJhbnNhY3Rpb25faWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBhY2NvdW50IHdpdGggcHVibGljIGtleVxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHBhcmFtIGFjdGl2ZUtleVxuICAgICAqIEBwYXJhbSBvd25lcktleVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIG5ld0FjY291bnQobmFtZTogc3RyaW5nLCBhY3RpdmVLZXk6IHN0cmluZywgb3duZXJLZXk6IHN0cmluZykge1xuICAgICAgICBpZiAoIWFjdGl2ZUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXdBY2NvdW50IDogYWN0aXZlIGtleSBlcnJvciAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW93bmVyS2V5KSB7XG4gICAgICAgICAgICBvd25lcktleSA9IGFjdGl2ZUtleTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjcmVhdG9yID0gYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpO1xuICAgICAgICBjb25zdCBlb3NDbGllbnQgPSB0aGlzLmVvc0NsaWVudDtcbiAgICAgICAgaWYgKCFlb3NDbGllbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW9zQ2xpZW50IGlzIG5vdCBleGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmVvc0NsaWVudC50cmFuc2FjdGlvbigodHI6IGFueSkgPT4ge1xuICAgICAgICAgICAgdHIubmV3YWNjb3VudCh7XG4gICAgICAgICAgICAgICAgY3JlYXRvcjogY3JlYXRvci5uYW1lLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgb3duZXI6IG93bmVyS2V5LFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlS2V5LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyLmJ1eXJhbWJ5dGVzKHtcbiAgICAgICAgICAgICAgICBwYXllcjogY3JlYXRvci5uYW1lLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVyOiBuYW1lLFxuICAgICAgICAgICAgICAgIGJ5dGVzOiA4MTkyLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRyLmRlbGVnYXRlYncoe1xuICAgICAgICAgICAgICAgIGZyb206IGNyZWF0b3IubmFtZSxcbiAgICAgICAgICAgICAgICByZWNlaXZlcjogbmFtZSxcbiAgICAgICAgICAgICAgICBzdGFrZV9uZXRfcXVhbnRpdHk6ICcxLjAwMDAgRU9TJyxcbiAgICAgICAgICAgICAgICBzdGFrZV9jcHVfcXVhbnRpdHk6ICcxLjAwMDAgRU9TJyxcbiAgICAgICAgICAgICAgICB0cmFuc2ZlcjogMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgZ2V0IHZlcnNpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgdmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIGAke3BhY2thZ2VKc29uLm5hbWV9ICMgJHtwYWNrYWdlSnNvbi52ZXJzaW9ufWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIGdldCBoZWxwIGluZm9cbiAgICAgKi9cbiAgICBwdWJsaWMgaGVscCgpIHtcbiAgICAgICAgcmV0dXJuIGBcblxcYFxcYFxcYGpzXG4gICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgICAgICAgIC0tLS0tICAgICAgLS0tLS0tICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgICAgICAgIC0tLS0tICAgICAtLS0tLSAgICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgICAgICAgLS0tLS0gICAtLS0tLSAgICAgICAgICAgIC0tLS0tLSAgICAgIC0tLS0tLS1cbiAgICAgICAgICAgIC0tLS0tICAtLS0tLSAgICAgICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgICAgIC0tLS0tLS0tLS0gICAgICAgICAgICAgICAgLS0tLS0gLS0tLSAtLS0tLS1cbiAgICAgICAgICAtLS0tLSAgLS0tLS0gICAgICAgICAgICAgIC0tLS0tIC0tLS0gLS0tLS0tXG4gICAgICAgICAtLS0tLSAgICAtLS0tLSAgICAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAtLS0tLSAgICAgIC0tLS0tLSAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgIC0tLS0tLSAgICAgICAtLS0tLS0tICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAtLS0tLS0tLSAgICAgIC0tLS0tLS0tLSAgLS0tLS0tICAgICAgLS0tLS0tLVxuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXFxgXFxgXFxgXG4tLS1cblxuIyBlb3NwbGF5ZXIgJHt0aGlzLnZlcnNpb259XG5cbiMjIFVzYWdlIG9mIGVvc3BsYXllclxuXG4jIyMgRXZlbnRzXG5cblxcYEVSUl9UUkFOU0ZFUl9GQUlMRURcXGBcblxcYEVSUl9UUkFOU0NBTF9GQUlMRURcXGBcblxcYEVSUl9UUkFOU0VORF9GQUlMRURcXGBcblxuIyMjIEFQSXNcblxuXFxgXFxgXFxganNcbntTdHJpbmd9IGdldCBoZWxwIC8vIGdldCBoZWxwIGluZm8gb2YgdXNhZ2VcbntTdHJpbmd9IGdldCB2ZXJzaW9uIC8vIGdldCB0aGUgdmVyc2lvbiBpbmZvXG57Q2hhaW5IZWxwZXJ9IGdldCBjaGFpbiAvLyBnZXQgdGhlIGNoYWluIGhlbHBlclxue0toSGVscGVyfSBnZXQga2ggLy8gZ2V0IHRoZSBraCBjb250cmFjdCBoZWxwZXJcblxue1ZvaWR9IGVvc3BsYXllci5ldmVudC5zZXRFdmVudChldmVudCwgZm5DYWxsYmFjaywgY29udGV4dCkgLy9saXN0ZW4gdG8gYSBldmVudFxuXG57RW9zfSBnZXQgZW9zcGxheWVyLmVvc0NsaWVudCAvLyBnZXQgZW9zIGluc3RhbmNlXG57SWRlbnRpdHl9IGFzeW5jIGVvc3BsYXllci5nZXRJZGVudGl0eSgpIC8vIGdldCBpZGVudGl0eVxuXG57QWNjb3VudEluZm99IGFzeW5jIGVvc3BsYXllci5nZXRBY2NvdW50SW5mbyhhY2NvdW50X25hbWUgPSBpZGVudGl0eS5uYW1lKVxuICAgIC8vIGdldCBhY2NvdW50IGluZm8gZm9yIGFueSB1c2VyXG5cbntTdHJpbmd9IGFzeW5jIGVvc3BsYXllci5nZXRCYWxhbmNlKGFjY291bnRfbmFtZSA9IHVuZGVmaW5lZCwgY29kZSA9IFwiZW9zaW8udG9rZW5cIiwgc3ltYm9sTmFtZSA9IHVuZGVmaW5lZClcbiAgICAvLyBnZXQgYmFsYW5jZSBzdHJpbmcgb2YgYSBhY2NvdW50LiBleC4gXCIxLjAwMDAgRU9TXCIsIG51bGwgbWVhbnMgdGhhdCB0aGUgYWNjb3VudCBkb3Nlbid0IGhhdmUgYW55IHRva2VuLFxuXG57QXJyYXkuPFN0cmluZz59IGFzeW5jIGdldEJhbGFuY2VzKGFjY291bnRfbmFtZSA9IHVuZGVmaW5lZCwgY29kZSA9IFwiZW9zaW8udG9rZW5cIilcbiAgICAvLyBnZXQgYmFsYW5jZXNcblxue1N0cmluZ30gYXN5bmMgZW9zcGxheWVyLmdldEJhbGFuY2VBc3NldChhY2NvdW50X25hbWUgPSB1bmRlZmluZWQsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIpXG4gICAgLy8gZ2V0IGJhbGFuY2Ugc3RydWN0dXJlIG9mIGEgYWNjb3VudC4gZXguIHt2YWw6MSwgc3ltOlwiRU9TXCIsIGRlY2ltYWw6NH1cblxue1R4fSBhc3luYyBlb3NwbGF5ZXIudHJhbnNmZXIodGFyZ2V0LCBxdWFudGl0eSwgbWVtbyA9IFwiXCIpXG4gICAgLy8gdHJhbnNmZXIgdG9rZW5zIHRvIHRhcmdldFxuXG57VHh9IGFzeW5jIGVvc3BsYXllci50cmFuc2NhbChjb2RlLCBxdWFudGl0eSwgZnVuYywgLi4uYXJncylcbiAgICAvLyBzZW5kIGEgYWN0aW9uIG9mIHRyYW5zY2FsIHRvIGNvbnRyYWN0XG5cbntUeH0gYXN5bmMgZW9zcGxheWVyLmNhbGwoY29kZSwgZnVuYywganNvbkRhdGEpXG4gICAgLy8gc2VuZCBhIGFjdGlvbiB0byBjb250cmFjdFxuXG57VHh9IGFzeW5jIGVvc3BsYXllci5uZXdBY2NvdW50KG5hbWUsIGFjdGl2ZUtleSwgb3duZXJLZXkpXG4gICAgLy8gY3JlYXRlIGEgYWNjb3VudCB3aXRoIHB1YmxpYyBrZXlcblxcYFxcYFxcYFxuXG4ke0NoYWluSGVscGVyLmhlbHAoKX1gO1xuICAgIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiaW1wb3J0IHtJRW9zTm9kZUNvbmZpZ30gZnJvbSAnLi9jb25maWdzJztcblxuaW1wb3J0IHtJUmVhZGluZ1BsYXllckNvbmZpZ30gZnJvbSAnLi9vdXRPZkJveCc7XG5pbXBvcnQge1BsYXllcn0gZnJvbSAnLi9wbGF5ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIElNdWx0aVNvdXJjZVBsYXllckNvbmZpZyB7XG4gICAgbm9kZTogSUVvc05vZGVDb25maWc7XG4gICAgdXJsczogc3RyaW5nW107XG59XG5cbmNvbnN0IGRlZmF1bHRDb25maWc6IElSZWFkaW5nUGxheWVyQ29uZmlnID0ge1xuICAgIG5vZGU6IHtcbiAgICAgICAgY2hhaW5JZDogJ2NmMDU3YmJmYjcyNjQwNDcxZmQ5MTBiY2I2NzYzOWMyMmRmOWY5MjQ3MDkzNmNkZGMxYWRlMGUyZjJlN2RjNGYnLFxuICAgICAgICBtb2NrVHJhbnNhY3Rpb25zOiAoKTogbnVsbCA9PiBudWxsLFxuICAgICAgICBleHBpcmVJblNlY29uZHM6IDYwLFxuICAgICAgICBicm9hZGNhc3Q6IHRydWUsXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgc2lnbjogdHJ1ZSxcbiAgICB9LFxuICAgIHVybHM6IFtcbiAgICAgICAgJ2h0dHBzOi8vbWFycy5mbi5lb3NiaXhpbi5jb20nLFxuICAgICAgICAnaHR0cHM6Ly9lb3MuZW9zY2FmZWJsb2NrLmNvbScsXG4gICAgICAgICdodHRwczovL2FwaS5lb3NkdWJsaW4uaW8nLFxuICAgIF0sXG59O1xuXG5leHBvcnQgY2xhc3MgTXVsdGlTb3VyY2VQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuXG4gICAgcHJvdGVjdGVkIF9jb25mOiBhbnk7XG4gICAgcHJvdGVjdGVkIF91cmxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHByb3RlY3RlZCBfbm9kZUNvbmZpZ3M6IElFb3NOb2RlQ29uZmlnW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmY6IElNdWx0aVNvdXJjZVBsYXllckNvbmZpZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCB7bm9kZSwgdXJsc30gPSBjb25mO1xuICAgICAgICB0aGlzLl9jb25mID0ge1xuICAgICAgICAgICAgLi4uZGVmYXVsdENvbmZpZy5ub2RlLFxuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdXJscyA9IHVybHM7XG4gICAgICAgIHRoaXMuX25vZGVDb25maWdzID0gdGhpcy5fdXJscy5tYXAodXJsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJldDogYW55ID0ge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6ICcnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2NvbmYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NvbmYuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSB0aGlzLl9jb25mW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXQuaHR0cEVuZHBvaW50ID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIHJldCBhcyBJRW9zTm9kZUNvbmZpZztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbmVlZCBpbXBsZW1lbnQgZW9zQ2xpZW50IGFuZCBnZXRJZGVudGl0eSBpbiBjaGlsZCBjbGFzc1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBlY2MgPSByZXF1aXJlKCdlb3Nqcy1lY2MnKTtcbnZhciBGY2J1ZmZlciA9IHJlcXVpcmUoJ2ZjYnVmZmVyJyk7XG52YXIgRW9zQXBpID0gcmVxdWlyZSgnZW9zanMtYXBpJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBTdHJ1Y3RzID0gcmVxdWlyZSgnLi9zdHJ1Y3RzJyk7XG52YXIgQWJpQ2FjaGUgPSByZXF1aXJlKCcuL2FiaS1jYWNoZScpO1xudmFyIHdyaXRlQXBpR2VuID0gcmVxdWlyZSgnLi93cml0ZS1hcGknKTtcbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xudmFyIHNjaGVtYSA9IHJlcXVpcmUoJy4vc2NoZW1hJyk7XG5cbnZhciB0b2tlbiA9IHJlcXVpcmUoJy4vc2NoZW1hL2Vvc2lvLnRva2VuLmFiaS5qc29uJyk7XG52YXIgc3lzdGVtID0gcmVxdWlyZSgnLi9zY2hlbWEvZW9zaW8uc3lzdGVtLmFiaS5qc29uJyk7XG52YXIgZW9zaW9fbnVsbCA9IHJlcXVpcmUoJy4vc2NoZW1hL2Vvc2lvLm51bGwuYWJpLmpzb24nKTtcblxudmFyIEVvcyA9IGZ1bmN0aW9uIEVvcygpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGNvbmZpZ0RlZmF1bHRzID0ge1xuICAgIGh0dHBFbmRwb2ludDogJ2h0dHA6Ly8xMjcuMC4wLjE6ODg4OCcsXG4gICAgZGVidWc6IGZhbHNlLFxuICAgIHZlcmJvc2U6IGZhbHNlLFxuICAgIGJyb2FkY2FzdDogdHJ1ZSxcbiAgICBsb2dnZXI6IHtcbiAgICAgIGxvZzogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy52ZXJib3NlID8gKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpIDogbnVsbDtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICAgIHZhciBfY29uc29sZTI7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy52ZXJib3NlID8gKF9jb25zb2xlMiA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlMiwgYXJndW1lbnRzKSA6IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaWduOiB0cnVlXG4gIH07XG5cbiAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyh0YXJnZXQsIGRlZmF1bHRzKSB7XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHRhcmdldFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXBwbHlEZWZhdWx0cyhjb25maWcsIGNvbmZpZ0RlZmF1bHRzKTtcbiAgYXBwbHlEZWZhdWx0cyhjb25maWcubG9nZ2VyLCBjb25maWdEZWZhdWx0cy5sb2dnZXIpO1xuICByZXR1cm4gY3JlYXRlRW9zKGNvbmZpZyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVvcztcblxuT2JqZWN0LmFzc2lnbihFb3MsIHtcbiAgdmVyc2lvbjogJzE2LjAuMCcsXG4gIG1vZHVsZXM6IHtcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBhcGk6IEVvc0FwaSxcbiAgICBlY2M6IGVjYyxcbiAgICBqc29uOiB7XG4gICAgICBhcGk6IEVvc0FwaS5hcGksXG4gICAgICBzY2hlbWE6IHNjaGVtYVxuICAgIH0sXG4gICAgRmNidWZmZXI6IEZjYnVmZmVyXG4gIH0sXG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIFRlc3RuZXQ6IGZ1bmN0aW9uIFRlc3RuZXQoY29uZmlnKSB7XG4gICAgY29uc29sZS5lcnJvcignZGVwcmVjYXRlZCwgY2hhbmdlIEVvcy5UZXN0bmV0KC4uKSB0byBqdXN0IEVvcyguLiknKTtcbiAgICByZXR1cm4gRW9zKGNvbmZpZyk7XG4gIH0sXG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIExvY2FsbmV0OiBmdW5jdGlvbiBMb2NhbG5ldChjb25maWcpIHtcbiAgICBjb25zb2xlLmVycm9yKCdkZXByZWNhdGVkLCBjaGFuZ2UgRW9zLkxvY2FsbmV0KC4uKSB0byBqdXN0IEVvcyguLiknKTtcbiAgICByZXR1cm4gRW9zKGNvbmZpZyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVFb3MoY29uZmlnKSB7XG4gIHZhciBuZXR3b3JrID0gY29uZmlnLmh0dHBFbmRwb2ludCAhPSBudWxsID8gRW9zQXBpKGNvbmZpZykgOiBudWxsO1xuICBjb25maWcubmV0d29yayA9IG5ldHdvcms7XG5cbiAgdmFyIGFiaXMgPSBbXTtcbiAgdmFyIGFiaUNhY2hlID0gQWJpQ2FjaGUobmV0d29yaywgY29uZmlnKTtcbiAgYWJpcy5wdXNoKGFiaUNhY2hlLmFiaSgnZW9zaW8ubnVsbCcsIGVvc2lvX251bGwpKTtcbiAgYWJpcy5wdXNoKGFiaUNhY2hlLmFiaSgnZW9zaW8udG9rZW4nLCB0b2tlbikpO1xuICBhYmlzLnB1c2goYWJpQ2FjaGUuYWJpKCdlb3NpbycsIHN5c3RlbSkpO1xuXG4gIGlmICghY29uZmlnLmNoYWluSWQpIHtcbiAgICBjb25maWcuY2hhaW5JZCA9ICdjZjA1N2JiZmI3MjY0MDQ3MWZkOTEwYmNiNjc2MzljMjJkZjlmOTI0NzA5MzZjZGRjMWFkZTBlMmYyZTdkYzRmJztcbiAgfVxuXG4gIGlmIChuZXR3b3JrKSB7XG4gICAgY2hlY2tDaGFpbklkKG5ldHdvcmssIGNvbmZpZy5jaGFpbklkLCBjb25maWcubG9nZ2VyKTtcbiAgfVxuXG4gIGlmIChjb25maWcubW9ja1RyYW5zYWN0aW9ucyAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcubW9ja1RyYW5zYWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBtb2NrID0gY29uZmlnLm1vY2tUcmFuc2FjdGlvbnM7XG4gICAgICBjb25maWcubW9ja1RyYW5zYWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG1vY2s7XG4gICAgICB9O1xuICAgIH1cbiAgICBhc3NlcnQuZXF1YWwoKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zKSwgJ2Z1bmN0aW9uJywgJ2NvbmZpZy5tb2NrVHJhbnNhY3Rpb25zJyk7XG4gIH1cblxuICB2YXIgX1N0cnVjdHMgPSBTdHJ1Y3RzKGNvbmZpZyksXG4gICAgICBzdHJ1Y3RzID0gX1N0cnVjdHMuc3RydWN0cyxcbiAgICAgIHR5cGVzID0gX1N0cnVjdHMudHlwZXMsXG4gICAgICBmcm9tQnVmZmVyID0gX1N0cnVjdHMuZnJvbUJ1ZmZlcixcbiAgICAgIHRvQnVmZmVyID0gX1N0cnVjdHMudG9CdWZmZXI7XG5cbiAgdmFyIGVvcyA9IG1lcmdlV3JpdGVGdW5jdGlvbnMoY29uZmlnLCBFb3NBcGksIHN0cnVjdHMsIGFiaXMpO1xuXG4gIE9iamVjdC5hc3NpZ24oZW9zLCB7XG4gICAgY29uZmlnOiBzYWZlQ29uZmlnKGNvbmZpZyksXG4gICAgZmM6IHtcbiAgICAgIHN0cnVjdHM6IHN0cnVjdHMsXG4gICAgICB0eXBlczogdHlwZXMsXG4gICAgICBmcm9tQnVmZmVyOiBmcm9tQnVmZmVyLFxuICAgICAgdG9CdWZmZXI6IHRvQnVmZmVyLFxuICAgICAgYWJpQ2FjaGU6IGFiaUNhY2hlXG4gICAgfSxcbiAgICAvLyBSZXBlYXQgb2Ygc3RhdGljIEVvcy5tb2R1bGVzLCBoZWxwIGFwcHMgdGhhdCB1c2UgZGVwZW5kZW5jeSBpbmplY3Rpb25cbiAgICBtb2R1bGVzOiB7XG4gICAgICBmb3JtYXQ6IGZvcm1hdFxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFjb25maWcuc2lnblByb3ZpZGVyKSB7XG4gICAgY29uZmlnLnNpZ25Qcm92aWRlciA9IGRlZmF1bHRTaWduUHJvdmlkZXIoZW9zLCBjb25maWcpO1xuICB9XG5cbiAgcmV0dXJuIGVvcztcbn1cblxuLyoqXG4gIFNldCBlYWNoIHByb3BlcnR5IGFzIHJlYWQtb25seSwgcmVhZC13cml0ZSwgbm8tYWNjZXNzLiAgVGhpcyBpcyBzaGFsbG93XG4gIGluIHRoYXQgaXQgYXBwbGllcyBvbmx5IHRvIHRoZSByb290IG9iamVjdCBhbmQgZG9lcyBub3QgbGltaXQgYWNjZXNzXG4gIHRvIHByb3BlcnRpZXMgdW5kZXIgYSBnaXZlbiBvYmplY3QuXG4qL1xuZnVuY3Rpb24gc2FmZUNvbmZpZyhjb25maWcpIHtcbiAgLy8gYWNjZXNzIGNvbnRyb2wgaXMgc2hhbGxvdyByZWZlcmVuY2VzIG9ubHlcbiAgdmFyIHJlYWRPbmx5ID0gbmV3IFNldChbJ2h0dHBFbmRwb2ludCcsICdhYmlDYWNoZScsICdjaGFpbklkJywgJ2V4cGlyZUluU2Vjb25kcyddKTtcbiAgdmFyIHJlYWRXcml0ZSA9IG5ldyBTZXQoWyd2ZXJib3NlJywgJ2RlYnVnJywgJ2Jyb2FkY2FzdCcsICdsb2dnZXInLCAnc2lnbiddKTtcbiAgdmFyIHByb3RlY3RlZENvbmZpZyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RlY3RlZENvbmZpZywga2V5LCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAocmVhZFdyaXRlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgY29uZmlnW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgICB9LFxuXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHJlYWRPbmx5LmhhcyhrZXkpIHx8IHJlYWRXcml0ZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjb25maWdba2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY2VzcyBkZW5pZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBwcm90ZWN0ZWRDb25maWc7XG59XG5cbi8qKlxuICBNZXJnZSBpbiB3cml0ZSBmdW5jdGlvbnMgKG9wZXJhdGlvbnMpLiAgVGVzdGVkIGFnYWluc3QgZXhpc3RpbmcgbWV0aG9kcyBmb3JcbiAgbmFtZSBjb25mbGljdHMuXG5cbiAgQGFyZyB7b2JqZWN0fSBjb25maWcubmV0d29yayAtIHJlYWQtb25seSBhcGkgY2FsbHNcbiAgQGFyZyB7b2JqZWN0fSBFb3NBcGkgLSBhcGlbRW9zQXBpXSByZWFkLW9ubHkgYXBpIGNhbGxzXG4gIEByZXR1cm4ge29iamVjdH0gLSByZWFkIGFuZCB3cml0ZSBtZXRob2QgY2FsbHMgKGNyZWF0ZSBhbmQgc2lnbiB0cmFuc2FjdGlvbnMpXG4gIEB0aHJvdyB7VHlwZUVycm9yfSBpZiBhIGZ1bmNpdG9uIG5hbWUgY29uZmxpY3RzXG4qL1xuZnVuY3Rpb24gbWVyZ2VXcml0ZUZ1bmN0aW9ucyhjb25maWcsIEVvc0FwaSwgc3RydWN0cywgYWJpcykge1xuICB2YXIgbmV0d29yayA9IGNvbmZpZy5uZXR3b3JrO1xuXG5cbiAgdmFyIG1lcmdlID0gT2JqZWN0LmFzc2lnbih7fSwgbmV0d29yayk7XG5cbiAgdmFyIHdyaXRlQXBpID0gd3JpdGVBcGlHZW4oRW9zQXBpLCBuZXR3b3JrLCBzdHJ1Y3RzLCBjb25maWcsIGFiaXMpO1xuICB0aHJvd09uRHVwbGljYXRlKG1lcmdlLCB3cml0ZUFwaSwgJ0NvbmZsaWN0aW5nIG1ldGhvZHMgaW4gRW9zQXBpIGFuZCBUcmFuc2FjdGlvbiBBcGknKTtcbiAgT2JqZWN0LmFzc2lnbihtZXJnZSwgd3JpdGVBcGkpO1xuXG4gIHJldHVybiBtZXJnZTtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkR1cGxpY2F0ZShvMSwgbzIsIG1zZykge1xuICBmb3IgKHZhciBrZXkgaW4gbzEpIHtcbiAgICBpZiAobzJba2V5XSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cgKyAnOiAnICsga2V5KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gIFRoZSBkZWZhdWx0IHNpZ24gcHJvdmlkZXIgaXMgZGVzaWduZWQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgYXZhaWxhYmxlIHB1YmxpY1xuICBrZXlzIChtYXliZSBqdXN0IG9uZSksIHRoZSB0cmFuc2FjdGlvbiwgYW5kIHRoZSBibG9ja2NoYWluIHRvIGZpZ3VyZSBvdXRcbiAgdGhlIG1pbmltdW0gc2V0IG9mIHNpZ25pbmcga2V5cy5cblxuICBJZiBvbmx5IG9uZSBrZXkgaXMgYXZhaWxhYmxlLCB0aGUgYmxvY2tjaGFpbiBBUEkgY2FsbHMgYXJlIHNraXBwZWQgYW5kIHRoYXRcbiAga2V5IGlzIHVzZWQgdG8gc2lnbiB0aGUgdHJhbnNhY3Rpb24uXG4qL1xudmFyIGRlZmF1bHRTaWduUHJvdmlkZXIgPSBmdW5jdGlvbiBkZWZhdWx0U2lnblByb3ZpZGVyKGVvcywgY29uZmlnKSB7XG4gIHJldHVybiBmdW5jdGlvbiBfY2FsbGVlKF9yZWYpIHtcbiAgICB2YXIgc2lnbiA9IF9yZWYuc2lnbixcbiAgICAgICAgYnVmID0gX3JlZi5idWYsXG4gICAgICAgIHRyYW5zYWN0aW9uID0gX3JlZi50cmFuc2FjdGlvbixcbiAgICAgICAgb3B0aW9uc0tleVByb3ZpZGVyID0gX3JlZi5vcHRpb25zS2V5UHJvdmlkZXI7XG5cbiAgICB2YXIga2V5UHJvdmlkZXIsIGtleXMsIHB2dCwgc2lncywgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiwgX2RpZEl0ZXJhdG9yRXJyb3IsIF9pdGVyYXRvckVycm9yLCBfaXRlcmF0b3IsIF9zdGVwLCBrZXksIGtleU1hcCwgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIsIF9kaWRJdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yRXJyb3IyLCBfaXRlcmF0b3IyLCBfc3RlcDIsIF9rZXksIGlzUHJpdmF0ZSwgaXNQdWJsaWMsIHB1YmtleXM7XG5cbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgLy8gb3B0aW9uc0tleVByb3ZpZGVyIGlzIGEgcGVyLWFjdGlvbiBrZXk6IGF3YWl0IGVvcy5zb21lQWN0aW9uKCd1c2VyMicgLi4sIHtrZXlQcm92aWRlcjogcHJpdmF0ZUtleTJ9KVxuICAgICAgICAgICAga2V5UHJvdmlkZXIgPSBvcHRpb25zS2V5UHJvdmlkZXIgPyBvcHRpb25zS2V5UHJvdmlkZXIgOiBjb25maWcua2V5UHJvdmlkZXI7XG5cbiAgICAgICAgICAgIGlmIChrZXlQcm92aWRlcikge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXMgdHJhbnNhY3Rpb24gcmVxdWlyZXMgYSBrZXlQcm92aWRlciBmb3Igc2lnbmluZycpO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAga2V5cyA9IGtleVByb3ZpZGVyO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleVByb3ZpZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGtleXMgPSBrZXlQcm92aWRlcih7IHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbiB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8ga2V5UHJvdmlkZXIgbWF5IHJldHVybiBrZXlzIG9yIFByb21pc2U8a2V5cz5cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xuICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hd3JhcChQcm9taXNlLnJlc29sdmUoa2V5cykpO1xuXG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAga2V5cyA9IF9jb250ZXh0LnNlbnQ7XG5cblxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICAgICAgICAgIGtleXMgPSBba2V5c107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXplIGZvcm1hdCAoV0lGID0+IFBWVF9LMV9iYXNlNThwcml2YXRlS2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHByaXZhdGU6IGVjYy5Qcml2YXRlS2V5KGtleSkudG9TdHJpbmcoKSB9O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXplIGZvcm1hdCAoRU9TS2V5ID0+IFBVQl9LMV9iYXNlNThwdWJsaWNLZXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcHVibGljOiBlY2MuUHVibGljS2V5KGtleSkudG9TdHJpbmcoKSB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgJ2V4cGVjdGluZyBwdWJsaWMgb3IgcHJpdmF0ZSBrZXlzIGZyb20ga2V5UHJvdmlkZXInKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGtleSwgY2hlY2sgeW91ciBrZXlQcm92aWRlcicpO1xuXG4gICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIGlmICghKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0ucHJpdmF0ZSkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHZ0ID0ga2V5c1swXS5wcml2YXRlO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgc2lnbihidWYsIHB2dCkpO1xuXG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIGlmICghKGNvbmZpZy5odHRwRW5kcG9pbnQgPT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM3O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2lncyA9IFtdO1xuICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjA7XG5cbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yID0ga2V5c1tTeW1ib2wuaXRlcmF0b3JdKCk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICBrZXkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICBzaWdzLnB1c2goc2lnbihidWYsIGtleS5wcml2YXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjQ7XG4gICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDIwKTtcbiAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gX2NvbnRleHQudDA7XG5cbiAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI4O1xuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI5O1xuXG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMxO1xuXG4gICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXG4gICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMzEpO1xuXG4gICAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMjgpO1xuXG4gICAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIHNpZ3MpO1xuXG4gICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIGtleU1hcCA9IG5ldyBNYXAoKTtcblxuICAgICAgICAgICAgLy8ga2V5cyBhcmUgZWl0aGVyIHB1YmxpYyBvciBwcml2YXRlIGtleXNcblxuICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNDE7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIgPSBrZXlzW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgICAgICBfa2V5ID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgICAgICBpc1ByaXZhdGUgPSBfa2V5LnByaXZhdGUgIT0gbnVsbDtcbiAgICAgICAgICAgICAgaXNQdWJsaWMgPSBfa2V5LnB1YmxpYyAhPSBudWxsO1xuXG5cbiAgICAgICAgICAgICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgICAgIGtleU1hcC5zZXQoZWNjLnByaXZhdGVUb1B1YmxpYyhfa2V5LnByaXZhdGUpLCBfa2V5LnByaXZhdGUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleU1hcC5zZXQoX2tleS5wdWJsaWMsIG51bGwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0NTtcbiAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbJ2NhdGNoJ10oNDEpO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IF9jb250ZXh0LnQxO1xuXG4gICAgICAgICAgY2FzZSA0OTpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0OTtcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1MDtcblxuICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSA1MjpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1MjtcblxuICAgICAgICAgICAgaWYgKCFfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuXG4gICAgICAgICAgY2FzZSA1NTpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNTIpO1xuXG4gICAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNDkpO1xuXG4gICAgICAgICAgY2FzZSA1NzpcbiAgICAgICAgICAgIHB1YmtleXMgPSBBcnJheS5mcm9tKGtleU1hcC5rZXlzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgZW9zLmdldFJlcXVpcmVkS2V5cyh0cmFuc2FjdGlvbiwgcHVia2V5cykudGhlbihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkX2tleXMgPSBfcmVmMi5yZXF1aXJlZF9rZXlzO1xuXG4gICAgICAgICAgICAgIGlmICghcmVxdWlyZWRfa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgcmVxdWlyZWQga2V5cyBmb3IgJyArIEpTT04uc3RyaW5naWZ5KHRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcHZ0cyA9IFtdLFxuICAgICAgICAgICAgICAgICAgbWlzc2luZ0tleXMgPSBbXTtcblxuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gcmVxdWlyZWRfa2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkS2V5ID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgKEVPU0tleS4uID0+IFBVQl9LMV9LZXkuLilcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkS2V5ID0gZWNjLlB1YmxpY0tleShyZXF1aXJlZEtleSkudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgICAgdmFyIHdpZiA9IGtleU1hcC5nZXQocmVxdWlyZWRLZXkpO1xuICAgICAgICAgICAgICAgICAgaWYgKHdpZikge1xuICAgICAgICAgICAgICAgICAgICBwdnRzLnB1c2god2lmKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdLZXlzLnB1c2gocmVxdWlyZWRLZXkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG1pc3NpbmdLZXlzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFzc2VydCh0eXBlb2Yga2V5UHJvdmlkZXIgPT09ICdmdW5jdGlvbicsICdrZXlQcm92aWRlciBmdW5jdGlvbiBpcyBuZWVkZWQgZm9yIHByaXZhdGUga2V5IGxvb2t1cCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgcHVia2V5cyA9IG1pc3NpbmdLZXlzLm1hcChrZXkgPT4gZWNjLlB1YmxpY0tleShrZXkpLnRvU3RyaW5nTGVnYWN5KCkpXG4gICAgICAgICAgICAgICAga2V5UHJvdmlkZXIoeyBwdWJrZXlzOiBtaXNzaW5nS2V5cyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChwdnQpIHtcbiAgICAgICAgICAgICAgICAgIHB2dHMucHVzaChwdnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHNpZ3MgPSBbXTtcbiAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHB2dHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBfcHZ0ID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICBzaWdzLnB1c2goc2lnbihidWYsIF9wdnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBzaWdzO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIG51bGwsIHRoaXMsIFtbMjAsIDI0LCAyOCwgMzZdLCBbMjksLCAzMSwgMzVdLCBbNDEsIDQ1LCA0OSwgNTddLCBbNTAsLCA1MiwgNTZdXSk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBjaGVja0NoYWluSWQobmV0d29yaywgY2hhaW5JZCwgbG9nZ2VyKSB7XG4gIG5ldHdvcmsuZ2V0SW5mbyh7fSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgIGlmIChpbmZvLmNoYWluX2lkICE9PSBjaGFpbklkKSB7XG4gICAgICBpZiAobG9nZ2VyLmxvZykge1xuICAgICAgICBsb2dnZXIubG9nKCdjaGFpbklkIG1pc21hdGNoLCBzaWduYXR1cmVzIHdpbGwgbm90IG1hdGNoIHRyYW5zYWN0aW9uIGF1dGhvcml0eS4gJyArICgnZXhwZWN0ZWQgJyArIGNoYWluSWQgKyAnICE9PSBhY3R1YWwgJyArIGluZm8uY2hhaW5faWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGlmIChsb2dnZXIuZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignV2FybmluZywgdW5hYmxlIHRvIHZhbGlkYXRlIGNoYWluSWQ6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH0pO1xufSIsIjsoZnVuY3Rpb24gKGdsb2JhbE9iamVjdCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbi8qXHJcbiAqICAgICAgYmlnbnVtYmVyLmpzIHY4LjAuMVxyXG4gKiAgICAgIEEgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBhcmJpdHJhcnktcHJlY2lzaW9uIGFyaXRobWV0aWMuXHJcbiAqICAgICAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnbnVtYmVyLmpzXHJcbiAqICAgICAgQ29weXJpZ2h0IChjKSAyMDE4IE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XHJcbiAqICAgICAgTUlUIExpY2Vuc2VkLlxyXG4gKlxyXG4gKiAgICAgIEJpZ051bWJlci5wcm90b3R5cGUgbWV0aG9kcyAgICAgfCAgQmlnTnVtYmVyIG1ldGhvZHNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBhYnNvbHV0ZVZhbHVlICAgICAgICAgICAgYWJzICAgIHwgIGNsb25lXHJcbiAqICAgICAgY29tcGFyZWRUbyAgICAgICAgICAgICAgICAgICAgICB8ICBjb25maWcgICAgICAgICAgICAgICBzZXRcclxuICogICAgICBkZWNpbWFsUGxhY2VzICAgICAgICAgICAgZHAgICAgIHwgICAgICBERUNJTUFMX1BMQUNFU1xyXG4gKiAgICAgIGRpdmlkZWRCeSAgICAgICAgICAgICAgICBkaXYgICAgfCAgICAgIFJPVU5ESU5HX01PREVcclxuICogICAgICBkaXZpZGVkVG9JbnRlZ2VyQnkgICAgICAgaWRpdiAgIHwgICAgICBFWFBPTkVOVElBTF9BVFxyXG4gKiAgICAgIGV4cG9uZW50aWF0ZWRCeSAgICAgICAgICBwb3cgICAgfCAgICAgIFJBTkdFXHJcbiAqICAgICAgaW50ZWdlclZhbHVlICAgICAgICAgICAgICAgICAgICB8ICAgICAgQ1JZUFRPXHJcbiAqICAgICAgaXNFcXVhbFRvICAgICAgICAgICAgICAgIGVxICAgICB8ICAgICAgTU9EVUxPX01PREVcclxuICogICAgICBpc0Zpbml0ZSAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICBQT1dfUFJFQ0lTSU9OXHJcbiAqICAgICAgaXNHcmVhdGVyVGhhbiAgICAgICAgICAgIGd0ICAgICB8ICAgICAgRk9STUFUXHJcbiAqICAgICAgaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyAgIGd0ZSAgICB8ICAgICAgQUxQSEFCRVRcclxuICogICAgICBpc0ludGVnZXIgICAgICAgICAgICAgICAgICAgICAgIHwgIGlzQmlnTnVtYmVyXHJcbiAqICAgICAgaXNMZXNzVGhhbiAgICAgICAgICAgICAgIGx0ICAgICB8ICBtYXhpbXVtICAgICAgICAgICAgICBtYXhcclxuICogICAgICBpc0xlc3NUaGFuT3JFcXVhbFRvICAgICAgbHRlICAgIHwgIG1pbmltdW0gICAgICAgICAgICAgIG1pblxyXG4gKiAgICAgIGlzTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgcmFuZG9tXHJcbiAqICAgICAgaXNOZWdhdGl2ZSAgICAgICAgICAgICAgICAgICAgICB8ICBzdW1cclxuICogICAgICBpc1Bvc2l0aXZlICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBpc1plcm8gICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBtaW51cyAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBtb2R1bG8gICAgICAgICAgICAgICAgICAgbW9kICAgIHxcclxuICogICAgICBtdWx0aXBsaWVkQnkgICAgICAgICAgICAgdGltZXMgIHxcclxuICogICAgICBuZWdhdGVkICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBwcmVjaXNpb24gICAgICAgICAgICAgICAgc2QgICAgIHxcclxuICogICAgICBzaGlmdGVkQnkgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBzcXVhcmVSb290ICAgICAgICAgICAgICAgc3FydCAgIHxcclxuICogICAgICB0b0V4cG9uZW50aWFsICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0ZpeGVkICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0Zvcm1hdCAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0ZyYWN0aW9uICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0pTT04gICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b051bWJlciAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b1ByZWNpc2lvbiAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b1N0cmluZyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB2YWx1ZU9mICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICpcclxuICovXHJcblxyXG5cclxuICB2YXIgQmlnTnVtYmVyLFxyXG4gICAgaXNOdW1lcmljID0gL14tPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8kL2ksXHJcblxyXG4gICAgbWF0aGNlaWwgPSBNYXRoLmNlaWwsXHJcbiAgICBtYXRoZmxvb3IgPSBNYXRoLmZsb29yLFxyXG5cclxuICAgIGJpZ251bWJlckVycm9yID0gJ1tCaWdOdW1iZXIgRXJyb3JdICcsXHJcbiAgICB0b29NYW55RGlnaXRzID0gYmlnbnVtYmVyRXJyb3IgKyAnTnVtYmVyIHByaW1pdGl2ZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czogJyxcclxuXHJcbiAgICBCQVNFID0gMWUxNCxcclxuICAgIExPR19CQVNFID0gMTQsXHJcbiAgICBNQVhfU0FGRV9JTlRFR0VSID0gMHgxZmZmZmZmZmZmZmZmZiwgICAgICAgICAvLyAyXjUzIC0gMVxyXG4gICAgLy8gTUFYX0lOVDMyID0gMHg3ZmZmZmZmZiwgICAgICAgICAgICAgICAgICAgLy8gMl4zMSAtIDFcclxuICAgIFBPV1NfVEVOID0gWzEsIDEwLCAxMDAsIDFlMywgMWU0LCAxZTUsIDFlNiwgMWU3LCAxZTgsIDFlOSwgMWUxMCwgMWUxMSwgMWUxMiwgMWUxM10sXHJcbiAgICBTUVJUX0JBU0UgPSAxZTcsXHJcblxyXG4gICAgLy8gRURJVEFCTEVcclxuICAgIC8vIFRoZSBsaW1pdCBvbiB0aGUgdmFsdWUgb2YgREVDSU1BTF9QTEFDRVMsIFRPX0VYUF9ORUcsIFRPX0VYUF9QT1MsIE1JTl9FWFAsIE1BWF9FWFAsIGFuZFxyXG4gICAgLy8gdGhlIGFyZ3VtZW50cyB0byB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCwgYW5kIHRvUHJlY2lzaW9uLlxyXG4gICAgTUFYID0gMUU5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhfSU5UMzJcclxuXHJcblxyXG4gIC8qXHJcbiAgICogQ3JlYXRlIGFuZCByZXR1cm4gYSBCaWdOdW1iZXIgY29uc3RydWN0b3IuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY2xvbmUoY29uZmlnT2JqZWN0KSB7XHJcbiAgICB2YXIgZGl2LCBjb252ZXJ0QmFzZSwgcGFyc2VOdW1lcmljLFxyXG4gICAgICBQID0gQmlnTnVtYmVyLnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IEJpZ051bWJlciwgdG9TdHJpbmc6IG51bGwsIHZhbHVlT2Y6IG51bGwgfSxcclxuICAgICAgT05FID0gbmV3IEJpZ051bWJlcigxKSxcclxuXHJcblxyXG4gICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVESVRBQkxFIENPTkZJRyBERUZBVUxUUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cclxuICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93IG11c3QgYmUgaW50ZWdlcnMgd2l0aGluIHRoZSBpbmNsdXNpdmUgcmFuZ2VzIHN0YXRlZC5cclxuICAgICAgLy8gVGhlIHZhbHVlcyBjYW4gYWxzbyBiZSBjaGFuZ2VkIGF0IHJ1bi10aW1lIHVzaW5nIEJpZ051bWJlci5zZXQuXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIG9wZXJhdGlvbnMgaW52b2x2aW5nIGRpdmlzaW9uLlxyXG4gICAgICBERUNJTUFMX1BMQUNFUyA9IDIwLCAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgICAvLyBUaGUgcm91bmRpbmcgbW9kZSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLCBhbmQgd2hlbiB1c2luZ1xyXG4gICAgICAvLyB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCBhbmQgdG9QcmVjaXNpb24sIGFuZCByb3VuZCAoZGVmYXVsdCB2YWx1ZSkuXHJcbiAgICAgIC8vIFVQICAgICAgICAgMCBBd2F5IGZyb20gemVyby5cclxuICAgICAgLy8gRE9XTiAgICAgICAxIFRvd2FyZHMgemVyby5cclxuICAgICAgLy8gQ0VJTCAgICAgICAyIFRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBGTE9PUiAgICAgIDMgVG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgIC8vIEhBTEZfVVAgICAgNCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdXAuXHJcbiAgICAgIC8vIEhBTEZfRE9XTiAgNSBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgZG93bi5cclxuICAgICAgLy8gSEFMRl9FVkVOICA2IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIGV2ZW4gbmVpZ2hib3VyLlxyXG4gICAgICAvLyBIQUxGX0NFSUwgIDcgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBIQUxGX0ZMT09SIDggVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgLUluZmluaXR5LlxyXG4gICAgICBST1VORElOR19NT0RFID0gNCwgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOFxyXG5cclxuICAgICAgLy8gRVhQT05FTlRJQUxfQVQgOiBbVE9fRVhQX05FRyAsIFRPX0VYUF9QT1NdXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGJlbmVhdGggd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAgLy8gTnVtYmVyIHR5cGU6IC03XHJcbiAgICAgIFRPX0VYUF9ORUcgPSAtNywgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byAtTUFYXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGFib3ZlIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgIC8vIE51bWJlciB0eXBlOiAyMVxyXG4gICAgICBUT19FWFBfUE9TID0gMjEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgICAvLyBSQU5HRSA6IFtNSU5fRVhQLCBNQVhfRVhQXVxyXG5cclxuICAgICAgLy8gVGhlIG1pbmltdW0gZXhwb25lbnQgdmFsdWUsIGJlbmVhdGggd2hpY2ggdW5kZXJmbG93IHRvIHplcm8gb2NjdXJzLlxyXG4gICAgICAvLyBOdW1iZXIgdHlwZTogLTMyNCAgKDVlLTMyNClcclxuICAgICAgTUlOX0VYUCA9IC0xZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtMSB0byAtTUFYXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBleHBvbmVudCB2YWx1ZSwgYWJvdmUgd2hpY2ggb3ZlcmZsb3cgdG8gSW5maW5pdHkgb2NjdXJzLlxyXG4gICAgICAvLyBOdW1iZXIgdHlwZTogIDMwOCAgKDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KVxyXG4gICAgICAvLyBGb3IgTUFYX0VYUCA+IDFlNywgZS5nLiBuZXcgQmlnTnVtYmVyKCcxZTEwMDAwMDAwMCcpLnBsdXMoMSkgbWF5IGJlIHNsb3cuXHJcbiAgICAgIE1BWF9FWFAgPSAxZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSB0byBNQVhcclxuXHJcbiAgICAgIC8vIFdoZXRoZXIgdG8gdXNlIGNyeXB0b2dyYXBoaWNhbGx5LXNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24sIGlmIGF2YWlsYWJsZS5cclxuICAgICAgQ1JZUFRPID0gZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVlIG9yIGZhbHNlXHJcblxyXG4gICAgICAvLyBUaGUgbW9kdWxvIG1vZGUgdXNlZCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBtb2R1bHVzOiBhIG1vZCBuLlxyXG4gICAgICAvLyBUaGUgcXVvdGllbnQgKHEgPSBhIC8gbikgaXMgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcm91bmRpbmcgbW9kZS5cclxuICAgICAgLy8gVGhlIHJlbWFpbmRlciAocikgaXMgY2FsY3VsYXRlZCBhczogciA9IGEgLSBuICogcS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVVAgICAgICAgIDAgVGhlIHJlbWFpbmRlciBpcyBwb3NpdGl2ZSBpZiB0aGUgZGl2aWRlbmQgaXMgbmVnYXRpdmUsIGVsc2UgaXMgbmVnYXRpdmUuXHJcbiAgICAgIC8vIERPV04gICAgICAxIFRoZSByZW1haW5kZXIgaGFzIHRoZSBzYW1lIHNpZ24gYXMgdGhlIGRpdmlkZW5kLlxyXG4gICAgICAvLyAgICAgICAgICAgICBUaGlzIG1vZHVsbyBtb2RlIGlzIGNvbW1vbmx5IGtub3duIGFzICd0cnVuY2F0ZWQgZGl2aXNpb24nIGFuZCBpc1xyXG4gICAgICAvLyAgICAgICAgICAgICBlcXVpdmFsZW50IHRvIChhICUgbikgaW4gSmF2YVNjcmlwdC5cclxuICAgICAgLy8gRkxPT1IgICAgIDMgVGhlIHJlbWFpbmRlciBoYXMgdGhlIHNhbWUgc2lnbiBhcyB0aGUgZGl2aXNvciAoUHl0aG9uICUpLlxyXG4gICAgICAvLyBIQUxGX0VWRU4gNiBUaGlzIG1vZHVsbyBtb2RlIGltcGxlbWVudHMgdGhlIElFRUUgNzU0IHJlbWFpbmRlciBmdW5jdGlvbi5cclxuICAgICAgLy8gRVVDTElEICAgIDkgRXVjbGlkaWFuIGRpdmlzaW9uLiBxID0gc2lnbihuKSAqIGZsb29yKGEgLyBhYnMobikpLlxyXG4gICAgICAvLyAgICAgICAgICAgICBUaGUgcmVtYWluZGVyIGlzIGFsd2F5cyBwb3NpdGl2ZS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVGhlIHRydW5jYXRlZCBkaXZpc2lvbiwgZmxvb3JlZCBkaXZpc2lvbiwgRXVjbGlkaWFuIGRpdmlzaW9uIGFuZCBJRUVFIDc1NCByZW1haW5kZXJcclxuICAgICAgLy8gbW9kZXMgYXJlIGNvbW1vbmx5IHVzZWQgZm9yIHRoZSBtb2R1bHVzIG9wZXJhdGlvbi5cclxuICAgICAgLy8gQWx0aG91Z2ggdGhlIG90aGVyIHJvdW5kaW5nIG1vZGVzIGNhbiBhbHNvIGJlIHVzZWQsIHRoZXkgbWF5IG5vdCBnaXZlIHVzZWZ1bCByZXN1bHRzLlxyXG4gICAgICBNT0RVTE9fTU9ERSA9IDEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOVxyXG5cclxuICAgICAgLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgcmVzdWx0IG9mIHRoZSBleHBvbmVudGlhdGVkQnkgb3BlcmF0aW9uLlxyXG4gICAgICAvLyBJZiBQT1dfUFJFQ0lTSU9OIGlzIDAsIHRoZXJlIHdpbGwgYmUgdW5saW1pdGVkIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgICAgUE9XX1BSRUNJU0lPTiA9IDAsICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIE1BWFxyXG5cclxuICAgICAgLy8gVGhlIGZvcm1hdCBzcGVjaWZpY2F0aW9uIHVzZWQgYnkgdGhlIEJpZ051bWJlci5wcm90b3R5cGUudG9Gb3JtYXQgbWV0aG9kLlxyXG4gICAgICBGT1JNQVQgPSB7XHJcbiAgICAgICAgcHJlZml4OiAnJyxcclxuICAgICAgICBncm91cFNpemU6IDMsXHJcbiAgICAgICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICAgIGdyb3VwU2VwYXJhdG9yOiAnLCcsXHJcbiAgICAgICAgZGVjaW1hbFNlcGFyYXRvcjogJy4nLFxyXG4gICAgICAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICAgIGZyYWN0aW9uR3JvdXBTZXBhcmF0b3I6ICdcXHhBMCcsICAgICAgLy8gbm9uLWJyZWFraW5nIHNwYWNlXHJcbiAgICAgICAgc3VmZml4OiAnJ1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gVGhlIGFscGhhYmV0IHVzZWQgZm9yIGJhc2UgY29udmVyc2lvbi4gSXQgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnMgbG9uZywgd2l0aCBubyAnKycsXHJcbiAgICAgIC8vICctJywgJy4nLCB3aGl0ZXNwYWNlLCBvciByZXBlYXRlZCBjaGFyYWN0ZXIuXHJcbiAgICAgIC8vICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWiRfJ1xyXG4gICAgICBBTFBIQUJFVCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xyXG5cclxuXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHJcbiAgICAvLyBDT05TVFJVQ1RPUlxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogVGhlIEJpZ051bWJlciBjb25zdHJ1Y3RvciBhbmQgZXhwb3J0ZWQgZnVuY3Rpb24uXHJcbiAgICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZ051bWJlciBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAqIFtiXSB7bnVtYmVyfSBUaGUgYmFzZSBvZiBuLiBJbnRlZ2VyLCAyIHRvIEFMUEhBQkVULmxlbmd0aCBpbmNsdXNpdmUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEJpZ051bWJlcihuLCBiKSB7XHJcbiAgICAgIHZhciBhbHBoYWJldCwgYywgY2FzZUNoYW5nZWQsIGUsIGksIGlzTnVtLCBsZW4sIHN0cixcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIC8vIEVuYWJsZSBjb25zdHJ1Y3RvciB1c2FnZSB3aXRob3V0IG5ldy5cclxuICAgICAgaWYgKCEoeCBpbnN0YW5jZW9mIEJpZ051bWJlcikpIHtcclxuXHJcbiAgICAgICAgLy8gRG9uJ3QgdGhyb3cgb24gY29uc3RydWN0b3IgY2FsbCB3aXRob3V0IG5ldyAoIzgxKS5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQ29uc3RydWN0b3IgY2FsbCB3aXRob3V0IG5ldzoge259J1xyXG4gICAgICAgIC8vdGhyb3cgRXJyb3IoYmlnbnVtYmVyRXJyb3IgKyAnIENvbnN0cnVjdG9yIGNhbGwgd2l0aG91dCBuZXc6ICcgKyBuKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihuLCBiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGIgPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAvLyBEdXBsaWNhdGUuXHJcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBCaWdOdW1iZXIpIHtcclxuICAgICAgICAgIHgucyA9IG4ucztcclxuICAgICAgICAgIHguZSA9IG4uZTtcclxuICAgICAgICAgIHguYyA9IChuID0gbi5jKSA/IG4uc2xpY2UoKSA6IG47XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc051bSA9IHR5cGVvZiBuID09ICdudW1iZXInO1xyXG5cclxuICAgICAgICBpZiAoaXNOdW0gJiYgbiAqIDAgPT0gMCkge1xyXG5cclxuICAgICAgICAgIC8vIFVzZSBgMSAvIG5gIHRvIGhhbmRsZSBtaW51cyB6ZXJvIGFsc28uXHJcbiAgICAgICAgICB4LnMgPSAxIC8gbiA8IDAgPyAobiA9IC1uLCAtMSkgOiAxO1xyXG5cclxuICAgICAgICAgIC8vIEZhc3RlciBwYXRoIGZvciBpbnRlZ2Vycy5cclxuICAgICAgICAgIGlmIChuID09PSB+fm4pIHtcclxuICAgICAgICAgICAgZm9yIChlID0gMCwgaSA9IG47IGkgPj0gMTA7IGkgLz0gMTAsIGUrKyk7XHJcbiAgICAgICAgICAgIHguZSA9IGU7XHJcbiAgICAgICAgICAgIHguYyA9IFtuXTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHN0ciA9IFN0cmluZyhuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RyID0gU3RyaW5nKG4pO1xyXG4gICAgICAgICAgaWYgKCFpc051bWVyaWMudGVzdChzdHIpKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0pO1xyXG4gICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT0gNDUgPyAoc3RyID0gc3RyLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGVjaW1hbCBwb2ludD9cclxuICAgICAgICBpZiAoKGUgPSBzdHIuaW5kZXhPZignLicpKSA+IC0xKSBzdHIgPSBzdHIucmVwbGFjZSgnLicsICcnKTtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRpYWwgZm9ybT9cclxuICAgICAgICBpZiAoKGkgPSBzdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAgICAgICAvLyBEZXRlcm1pbmUgZXhwb25lbnQuXHJcbiAgICAgICAgICBpZiAoZSA8IDApIGUgPSBpO1xyXG4gICAgICAgICAgZSArPSArc3RyLnNsaWNlKGkgKyAxKTtcclxuICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgICAgICAgIC8vIEludGVnZXIuXHJcbiAgICAgICAgICBlID0gc3RyLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICAgICAgaW50Q2hlY2soYiwgMiwgQUxQSEFCRVQubGVuZ3RoLCAnQmFzZScpO1xyXG4gICAgICAgIHN0ciA9IFN0cmluZyhuKTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYmUgdXNlZCB3aXRoIGJhc2UgMTAgYXJndW1lbnQsIHdoaWxlXHJcbiAgICAgICAgLy8gYWxzbyByb3VuZGluZyB0byBERUNJTUFMX1BMQUNFUyBhcyB3aXRoIG90aGVyIGJhc2VzLlxyXG4gICAgICAgIGlmIChiID09IDEwKSB7XHJcbiAgICAgICAgICB4ID0gbmV3IEJpZ051bWJlcihuIGluc3RhbmNlb2YgQmlnTnVtYmVyID8gbiA6IHN0cik7XHJcbiAgICAgICAgICByZXR1cm4gcm91bmQoeCwgREVDSU1BTF9QTEFDRVMgKyB4LmUgKyAxLCBST1VORElOR19NT0RFKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzTnVtID0gdHlwZW9mIG4gPT0gJ251bWJlcic7XHJcblxyXG4gICAgICAgIGlmIChpc051bSkge1xyXG5cclxuICAgICAgICAgIC8vIEF2b2lkIHBvdGVudGlhbCBpbnRlcnByZXRhdGlvbiBvZiBJbmZpbml0eSBhbmQgTmFOIGFzIGJhc2UgNDQrIHZhbHVlcy5cclxuICAgICAgICAgIGlmIChuICogMCAhPSAwKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0sIGIpO1xyXG5cclxuICAgICAgICAgIHgucyA9IDEgLyBuIDwgMCA/IChzdHIgPSBzdHIuc2xpY2UoMSksIC0xKSA6IDE7XHJcblxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE51bWJlciBwcmltaXRpdmUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHM6IHtufSdcclxuICAgICAgICAgIGlmIChCaWdOdW1iZXIuREVCVUcgJiYgc3RyLnJlcGxhY2UoL14wXFwuMCp8XFwuLywgJycpLmxlbmd0aCA+IDE1KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAodG9vTWFueURpZ2l0cyArIG4pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFByZXZlbnQgbGF0ZXIgY2hlY2sgZm9yIGxlbmd0aCBvbiBjb252ZXJ0ZWQgbnVtYmVyLlxyXG4gICAgICAgICAgaXNOdW0gPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT09IDQ1ID8gKHN0ciA9IHN0ci5zbGljZSgxKSwgLTEpIDogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFscGhhYmV0ID0gQUxQSEFCRVQuc2xpY2UoMCwgYik7XHJcbiAgICAgICAgZSA9IGkgPSAwO1xyXG5cclxuICAgICAgICAvLyBDaGVjayB0aGF0IHN0ciBpcyBhIHZhbGlkIGJhc2UgYiBudW1iZXIuXHJcbiAgICAgICAgLy8gRG9uJ3QgdXNlIFJlZ0V4cCBzbyBhbHBoYWJldCBjYW4gY29udGFpbiBzcGVjaWFsIGNoYXJhY3RlcnMuXHJcbiAgICAgICAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgIGlmIChhbHBoYWJldC5pbmRleE9mKGMgPSBzdHIuY2hhckF0KGkpKSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKGMgPT0gJy4nKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIElmICcuJyBpcyBub3QgdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgaXQgaGFzIG5vdCBiZSBmb3VuZCBiZWZvcmUuXHJcbiAgICAgICAgICAgICAgaWYgKGkgPiBlKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gbGVuO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFjYXNlQ2hhbmdlZCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBBbGxvdyBlLmcuIGhleGFkZWNpbWFsICdGRicgYXMgd2VsbCBhcyAnZmYnLlxyXG4gICAgICAgICAgICAgIGlmIChzdHIgPT0gc3RyLnRvVXBwZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICAgICAgICAgICAgICBzdHIgPT0gc3RyLnRvTG93ZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWMoeCwgU3RyaW5nKG4pLCBpc051bSwgYik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdHIgPSBjb252ZXJ0QmFzZShzdHIsIGIsIDEwLCB4LnMpO1xyXG5cclxuICAgICAgICAvLyBEZWNpbWFsIHBvaW50P1xyXG4gICAgICAgIGlmICgoZSA9IHN0ci5pbmRleE9mKCcuJykpID4gLTEpIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgIGVsc2UgZSA9IHN0ci5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIERldGVybWluZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKGkgPSAwOyBzdHIuY2hhckNvZGVBdChpKSA9PT0gNDg7IGkrKyk7XHJcblxyXG4gICAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAobGVuID0gc3RyLmxlbmd0aDsgc3RyLmNoYXJDb2RlQXQoLS1sZW4pID09PSA0ODspO1xyXG5cclxuICAgICAgc3RyID0gc3RyLnNsaWNlKGksICsrbGVuKTtcclxuXHJcbiAgICAgIGlmIChzdHIpIHtcclxuICAgICAgICBsZW4gLT0gaTtcclxuXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE51bWJlciBwcmltaXRpdmUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHM6IHtufSdcclxuICAgICAgICBpZiAoaXNOdW0gJiYgQmlnTnVtYmVyLkRFQlVHICYmXHJcbiAgICAgICAgICBsZW4gPiAxNSAmJiAobiA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgbiAhPT0gbWF0aGZsb29yKG4pKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvclxyXG4gICAgICAgICAgICAgKHRvb01hbnlEaWdpdHMgKyAoeC5zICogbikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZSA9IGUgLSBpIC0gMTtcclxuXHJcbiAgICAgICAgIC8vIE92ZXJmbG93P1xyXG4gICAgICAgIGlmIChlID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgICAgIC8vIEluZmluaXR5LlxyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gVW5kZXJmbG93P1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZSA8IE1JTl9FWFApIHtcclxuXHJcbiAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4LmUgPSBlO1xyXG4gICAgICAgICAgeC5jID0gW107XHJcblxyXG4gICAgICAgICAgLy8gVHJhbnNmb3JtIGJhc2VcclxuXHJcbiAgICAgICAgICAvLyBlIGlzIHRoZSBiYXNlIDEwIGV4cG9uZW50LlxyXG4gICAgICAgICAgLy8gaSBpcyB3aGVyZSB0byBzbGljZSBzdHIgdG8gZ2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2VmZmljaWVudCBhcnJheS5cclxuICAgICAgICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XHJcbiAgICAgICAgICBpZiAoZSA8IDApIGkgKz0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgaWYgKGkgPCBsZW4pIHtcclxuICAgICAgICAgICAgaWYgKGkpIHguYy5wdXNoKCtzdHIuc2xpY2UoMCwgaSkpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47KSB7XHJcbiAgICAgICAgICAgICAgeC5jLnB1c2goK3N0ci5zbGljZShpLCBpICs9IExPR19CQVNFKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZShpKTtcclxuICAgICAgICAgICAgaSA9IExPR19CQVNFIC0gc3RyLmxlbmd0aDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGkgLT0gbGVuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgeC5jLnB1c2goK3N0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDT05TVFJVQ1RPUiBQUk9QRVJUSUVTXHJcblxyXG5cclxuICAgIEJpZ051bWJlci5jbG9uZSA9IGNsb25lO1xyXG5cclxuICAgIEJpZ051bWJlci5ST1VORF9VUCA9IDA7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfRE9XTiA9IDE7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfQ0VJTCA9IDI7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfRkxPT1IgPSAzO1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfVVAgPSA0O1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRE9XTiA9IDU7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfSEFMRl9FVkVOID0gNjtcclxuICAgIEJpZ051bWJlci5ST1VORF9IQUxGX0NFSUwgPSA3O1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRkxPT1IgPSA4O1xyXG4gICAgQmlnTnVtYmVyLkVVQ0xJRCA9IDk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBDb25maWd1cmUgaW5mcmVxdWVudGx5LWNoYW5naW5nIGxpYnJhcnktd2lkZSBzZXR0aW5ncy5cclxuICAgICAqXHJcbiAgICAgKiBBY2NlcHQgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25hbCBwcm9wZXJ0aWVzIChpZiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBpc1xyXG4gICAgICogYSBudW1iZXIsIGl0IG11c3QgYmUgYW4gaW50ZWdlciB3aXRoaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBzdGF0ZWQpOlxyXG4gICAgICpcclxuICAgICAqICAgREVDSU1BTF9QTEFDRVMgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byBNQVhcclxuICAgICAqICAgUk9VTkRJTkdfTU9ERSAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA4XHJcbiAgICAgKiAgIEVYUE9ORU5USUFMX0FUICAge251bWJlcnxudW1iZXJbXX0gIC1NQVggdG8gTUFYICBvciAgWy1NQVggdG8gMCwgMCB0byBNQVhdXHJcbiAgICAgKiAgIFJBTkdFICAgICAgICAgICAge251bWJlcnxudW1iZXJbXX0gIC1NQVggdG8gTUFYIChub3QgemVybykgIG9yICBbLU1BWCB0byAtMSwgMSB0byBNQVhdXHJcbiAgICAgKiAgIENSWVBUTyAgICAgICAgICAge2Jvb2xlYW59ICAgICAgICAgIHRydWUgb3IgZmFsc2VcclxuICAgICAqICAgTU9EVUxPX01PREUgICAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA5XHJcbiAgICAgKiAgIFBPV19QUkVDSVNJT04gICAgICAge251bWJlcn0gICAgICAgICAgIDAgdG8gTUFYXHJcbiAgICAgKiAgIEFMUEhBQkVUICAgICAgICAge3N0cmluZ30gICAgICAgICAgIEEgc3RyaW5nIG9mIHR3byBvciBtb3JlIHVuaXF1ZSBjaGFyYWN0ZXJzIHdoaWNoIGRvZXNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGNvbnRhaW4gJy4nLlxyXG4gICAgICogICBGT1JNQVQgICAgICAgICAgIHtvYmplY3R9ICAgICAgICAgICBBbiBvYmplY3Qgd2l0aCBzb21lIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICBwcmVmaXggICAgICAgICAgICAgICAgIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgZ3JvdXBTaXplICAgICAgICAgICAgICB7bnVtYmVyfVxyXG4gICAgICogICAgIHNlY29uZGFyeUdyb3VwU2l6ZSAgICAge251bWJlcn1cclxuICAgICAqICAgICBncm91cFNlcGFyYXRvciAgICAgICAgIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgZGVjaW1hbFNlcGFyYXRvciAgICAgICB7c3RyaW5nfVxyXG4gICAgICogICAgIGZyYWN0aW9uR3JvdXBTaXplICAgICAge251bWJlcn1cclxuICAgICAqICAgICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgc3VmZml4ICAgICAgICAgICAgICAgICB7c3RyaW5nfVxyXG4gICAgICpcclxuICAgICAqIChUaGUgdmFsdWVzIGFzc2lnbmVkIHRvIHRoZSBhYm92ZSBGT1JNQVQgb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBjaGVja2VkIGZvciB2YWxpZGl0eS4pXHJcbiAgICAgKlxyXG4gICAgICogRS5nLlxyXG4gICAgICogQmlnTnVtYmVyLmNvbmZpZyh7IERFQ0lNQUxfUExBQ0VTIDogMjAsIFJPVU5ESU5HX01PREUgOiA0IH0pXHJcbiAgICAgKlxyXG4gICAgICogSWdub3JlIHByb3BlcnRpZXMvcGFyYW1ldGVycyBzZXQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGV4Y2VwdCBmb3IgQUxQSEFCRVQuXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJuIGFuIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGN1cnJlbnQgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBCaWdOdW1iZXIuY29uZmlnID0gQmlnTnVtYmVyLnNldCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgdmFyIHAsIHY7XHJcblxyXG4gICAgICBpZiAob2JqICE9IG51bGwpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcclxuXHJcbiAgICAgICAgICAvLyBERUNJTUFMX1BMQUNFUyB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gREVDSU1BTF9QTEFDRVMge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0RFQ0lNQUxfUExBQ0VTJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaW50Q2hlY2sodiwgMCwgTUFYLCBwKTtcclxuICAgICAgICAgICAgREVDSU1BTF9QTEFDRVMgPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJPVU5ESU5HX01PREUge251bWJlcn0gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBST1VORElOR19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdST1VORElOR19NT0RFJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaW50Q2hlY2sodiwgMCwgOCwgcCk7XHJcbiAgICAgICAgICAgIFJPVU5ESU5HX01PREUgPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEVYUE9ORU5USUFMX0FUIHtudW1iZXJ8bnVtYmVyW119XHJcbiAgICAgICAgICAvLyBJbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcclxuICAgICAgICAgIC8vIFtpbnRlZ2VyIC1NQVggdG8gMCBpbmNsdXNpdmUsIDAgdG8gTUFYIGluY2x1c2l2ZV0uXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gRVhQT05FTlRJQUxfQVQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0VYUE9ORU5USUFMX0FUJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaWYgKHYgJiYgdi5wb3ApIHtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzBdLCAtTUFYLCAwLCBwKTtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzFdLCAwLCBNQVgsIHApO1xyXG4gICAgICAgICAgICAgIFRPX0VYUF9ORUcgPSB2WzBdO1xyXG4gICAgICAgICAgICAgIFRPX0VYUF9QT1MgPSB2WzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgICAgVE9fRVhQX05FRyA9IC0oVE9fRVhQX1BPUyA9IHYgPCAwID8gLXYgOiB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJBTkdFIHtudW1iZXJ8bnVtYmVyW119IE5vbi16ZXJvIGludGVnZXIsIC1NQVggdG8gTUFYIGluY2x1c2l2ZSBvclxyXG4gICAgICAgICAgLy8gW2ludGVnZXIgLU1BWCB0byAtMSBpbmNsdXNpdmUsIGludGVnZXIgMSB0byBNQVggaW5jbHVzaXZlXS5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBSQU5HRSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V8Y2Fubm90IGJlIHplcm99OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUkFOR0UnKSkge1xyXG4gICAgICAgICAgICB2ID0gb2JqW3BdO1xyXG4gICAgICAgICAgICBpZiAodiAmJiB2LnBvcCkge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHZbMF0sIC1NQVgsIC0xLCBwKTtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzFdLCAxLCBNQVgsIHApO1xyXG4gICAgICAgICAgICAgIE1JTl9FWFAgPSB2WzBdO1xyXG4gICAgICAgICAgICAgIE1BWF9FWFAgPSB2WzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgIE1JTl9FWFAgPSAtKE1BWF9FWFAgPSB2IDwgMCA/IC12IDogdik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgcCArICcgY2Fubm90IGJlIHplcm86ICcgKyB2KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBDUllQVE8ge2Jvb2xlYW59IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQ1JZUFRPIG5vdCB0cnVlIG9yIGZhbHNlOiB7dn0nXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gY3J5cHRvIHVuYXZhaWxhYmxlJ1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0NSWVBUTycpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGlmICh2ID09PSAhIXYpIHtcclxuICAgICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvICYmXHJcbiAgICAgICAgICAgICAgICAgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgfHwgY3J5cHRvLnJhbmRvbUJ5dGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICBDUllQVE8gPSB2O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgQ1JZUFRPID0gIXY7XHJcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnY3J5cHRvIHVuYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIENSWVBUTyA9IHY7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIG5vdCB0cnVlIG9yIGZhbHNlOiAnICsgdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBNT0RVTE9fTU9ERSB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIDkgaW5jbHVzaXZlLlxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE1PRFVMT19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdNT0RVTE9fTU9ERScpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIDAsIDksIHApO1xyXG4gICAgICAgICAgICBNT0RVTE9fTU9ERSA9IHY7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUE9XX1BSRUNJU0lPTiB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gUE9XX1BSRUNJU0lPTiB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUE9XX1BSRUNJU0lPTicpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIDAsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIFBPV19QUkVDSVNJT04gPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEZPUk1BVCB7b2JqZWN0fVxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIEZPUk1BVCBub3QgYW4gb2JqZWN0OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnRk9STUFUJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdvYmplY3QnKSBGT1JNQVQgPSB2O1xyXG4gICAgICAgICAgICBlbHNlIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyBwICsgJyBub3QgYW4gb2JqZWN0OiAnICsgdik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQUxQSEFCRVQge3N0cmluZ31cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBBTFBIQUJFVCBpbnZhbGlkOiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnQUxQSEFCRVQnKSkge1xyXG4gICAgICAgICAgICB2ID0gb2JqW3BdO1xyXG5cclxuICAgICAgICAgICAgLy8gRGlzYWxsb3cgaWYgb25seSBvbmUgY2hhcmFjdGVyLFxyXG4gICAgICAgICAgICAvLyBvciBpZiBpdCBjb250YWlucyAnKycsICctJywgJy4nLCB3aGl0ZXNwYWNlLCBvciBhIHJlcGVhdGVkIGNoYXJhY3Rlci5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdzdHJpbmcnICYmICEvXi4kfFsrLS5cXHNdfCguKS4qXFwxLy50ZXN0KHYpKSB7XHJcbiAgICAgICAgICAgICAgQUxQSEFCRVQgPSB2O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIGludmFsaWQ6ICcgKyB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBPYmplY3QgZXhwZWN0ZWQ6IHt2fSdcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ09iamVjdCBleHBlY3RlZDogJyArIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIERFQ0lNQUxfUExBQ0VTOiBERUNJTUFMX1BMQUNFUyxcclxuICAgICAgICBST1VORElOR19NT0RFOiBST1VORElOR19NT0RFLFxyXG4gICAgICAgIEVYUE9ORU5USUFMX0FUOiBbVE9fRVhQX05FRywgVE9fRVhQX1BPU10sXHJcbiAgICAgICAgUkFOR0U6IFtNSU5fRVhQLCBNQVhfRVhQXSxcclxuICAgICAgICBDUllQVE86IENSWVBUTyxcclxuICAgICAgICBNT0RVTE9fTU9ERTogTU9EVUxPX01PREUsXHJcbiAgICAgICAgUE9XX1BSRUNJU0lPTjogUE9XX1BSRUNJU0lPTixcclxuICAgICAgICBGT1JNQVQ6IEZPUk1BVCxcclxuICAgICAgICBBTFBIQUJFVDogQUxQSEFCRVRcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB2IGlzIGEgQmlnTnVtYmVyIGluc3RhbmNlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICpcclxuICAgICAqIHYge2FueX1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLmlzQmlnTnVtYmVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgcmV0dXJuIHYgaW5zdGFuY2VvZiBCaWdOdW1iZXIgfHwgdiAmJiB2Ll9pc0JpZ051bWJlciA9PT0gdHJ1ZSB8fCBmYWxzZTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtYXhpbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLm1heGltdW0gPSBCaWdOdW1iZXIubWF4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmx0KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtaW5pbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLm1pbmltdW0gPSBCaWdOdW1iZXIubWluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmd0KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdpdGggYSByYW5kb20gdmFsdWUgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDAgYW5kIGxlc3MgdGhhbiAxLFxyXG4gICAgICogYW5kIHdpdGggZHAsIG9yIERFQ0lNQUxfUExBQ0VTIGlmIGRwIGlzIG9taXR0ZWQsIGRlY2ltYWwgcGxhY2VzIChvciBsZXNzIGlmIHRyYWlsaW5nXHJcbiAgICAgKiB6ZXJvcyBhcmUgcHJvZHVjZWQpLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfSdcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBjcnlwdG8gdW5hdmFpbGFibGUnXHJcbiAgICAgKi9cclxuICAgIEJpZ051bWJlci5yYW5kb20gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgcG93Ml81MyA9IDB4MjAwMDAwMDAwMDAwMDA7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gYSA1MyBiaXQgaW50ZWdlciBuLCB3aGVyZSAwIDw9IG4gPCA5MDA3MTk5MjU0NzQwOTkyLlxyXG4gICAgICAvLyBDaGVjayBpZiBNYXRoLnJhbmRvbSgpIHByb2R1Y2VzIG1vcmUgdGhhbiAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXHJcbiAgICAgIC8vIElmIGl0IGRvZXMsIGFzc3VtZSBhdCBsZWFzdCA1MyBiaXRzIGFyZSBwcm9kdWNlZCwgb3RoZXJ3aXNlIGFzc3VtZSBhdCBsZWFzdCAzMCBiaXRzLlxyXG4gICAgICAvLyAweDQwMDAwMDAwIGlzIDJeMzAsIDB4ODAwMDAwIGlzIDJeMjMsIDB4MWZmZmZmIGlzIDJeMjEgLSAxLlxyXG4gICAgICB2YXIgcmFuZG9tNTNiaXRJbnQgPSAoTWF0aC5yYW5kb20oKSAqIHBvdzJfNTMpICYgMHgxZmZmZmZcclxuICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0aGZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3cyXzUzKTsgfVxyXG4gICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoKE1hdGgucmFuZG9tKCkgKiAweDQwMDAwMDAwIHwgMCkgKiAweDgwMDAwMCkgK1xyXG4gICAgICAgICAoTWF0aC5yYW5kb20oKSAqIDB4ODAwMDAwIHwgMCk7IH07XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgdmFyIGEsIGIsIGUsIGssIHYsXHJcbiAgICAgICAgICBpID0gMCxcclxuICAgICAgICAgIGMgPSBbXSxcclxuICAgICAgICAgIHJhbmQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcblxyXG4gICAgICAgIGlmIChkcCA9PSBudWxsKSBkcCA9IERFQ0lNQUxfUExBQ0VTO1xyXG4gICAgICAgIGVsc2UgaW50Q2hlY2soZHAsIDAsIE1BWCk7XHJcblxyXG4gICAgICAgIGsgPSBtYXRoY2VpbChkcCAvIExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgaWYgKENSWVBUTykge1xyXG5cclxuICAgICAgICAgIC8vIEJyb3dzZXJzIHN1cHBvcnRpbmcgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5cclxuICAgICAgICAgIGlmIChjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcblxyXG4gICAgICAgICAgICBhID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoayAqPSAyKSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKDsgaSA8IGs7KSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIDUzIGJpdHM6XHJcbiAgICAgICAgICAgICAgLy8gKChNYXRoLnBvdygyLCAzMikgLSAxKSAqIE1hdGgucG93KDIsIDIxKSkudG9TdHJpbmcoMilcclxuICAgICAgICAgICAgICAvLyAxMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTEwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMFxyXG4gICAgICAgICAgICAgIC8vICgoTWF0aC5wb3coMiwgMzIpIC0gMSkgPj4+IDExKS50b1N0cmluZygyKVxyXG4gICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExMTExIDExMTExMTExIDExMTExMTExXHJcbiAgICAgICAgICAgICAgLy8gMHgyMDAwMCBpcyAyXjIxLlxyXG4gICAgICAgICAgICAgIHYgPSBhW2ldICogMHgyMDAwMCArIChhW2kgKyAxXSA+Pj4gMTEpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBSZWplY3Rpb24gc2FtcGxpbmc6XHJcbiAgICAgICAgICAgICAgLy8gMCA8PSB2IDwgOTAwNzE5OTI1NDc0MDk5MlxyXG4gICAgICAgICAgICAgIC8vIFByb2JhYmlsaXR5IHRoYXQgdiA+PSA5ZTE1LCBpc1xyXG4gICAgICAgICAgICAgIC8vIDcxOTkyNTQ3NDA5OTIgLyA5MDA3MTk5MjU0NzQwOTkyIH49IDAuMDAwOCwgaS5lLiAxIGluIDEyNTFcclxuICAgICAgICAgICAgICBpZiAodiA+PSA5ZTE1KSB7XHJcbiAgICAgICAgICAgICAgICBiID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMikpO1xyXG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbMF07XHJcbiAgICAgICAgICAgICAgICBhW2kgKyAxXSA9IGJbMV07XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwIDw9IHYgPD0gODk5OTk5OTk5OTk5OTk5OVxyXG4gICAgICAgICAgICAgICAgLy8gMCA8PSAodiAlIDFlMTQpIDw9IDk5OTk5OTk5OTk5OTk5XHJcbiAgICAgICAgICAgICAgICBjLnB1c2godiAlIDFlMTQpO1xyXG4gICAgICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gayAvIDI7XHJcblxyXG4gICAgICAgICAgLy8gTm9kZS5qcyBzdXBwb3J0aW5nIGNyeXB0by5yYW5kb21CeXRlcy5cclxuICAgICAgICAgIH0gZWxzZSBpZiAoY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBidWZmZXJcclxuICAgICAgICAgICAgYSA9IGNyeXB0by5yYW5kb21CeXRlcyhrICo9IDcpO1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IGkgPCBrOykge1xyXG5cclxuICAgICAgICAgICAgICAvLyAweDEwMDAwMDAwMDAwMDAgaXMgMl40OCwgMHgxMDAwMDAwMDAwMCBpcyAyXjQwXHJcbiAgICAgICAgICAgICAgLy8gMHgxMDAwMDAwMDAgaXMgMl4zMiwgMHgxMDAwMDAwIGlzIDJeMjRcclxuICAgICAgICAgICAgICAvLyAxMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMVxyXG4gICAgICAgICAgICAgIC8vIDAgPD0gdiA8IDkwMDcxOTkyNTQ3NDA5OTJcclxuICAgICAgICAgICAgICB2ID0gKChhW2ldICYgMzEpICogMHgxMDAwMDAwMDAwMDAwKSArIChhW2kgKyAxXSAqIDB4MTAwMDAwMDAwMDApICtcclxuICAgICAgICAgICAgICAgICAoYVtpICsgMl0gKiAweDEwMDAwMDAwMCkgKyAoYVtpICsgM10gKiAweDEwMDAwMDApICtcclxuICAgICAgICAgICAgICAgICAoYVtpICsgNF0gPDwgMTYpICsgKGFbaSArIDVdIDw8IDgpICsgYVtpICsgNl07XHJcblxyXG4gICAgICAgICAgICAgIGlmICh2ID49IDllMTUpIHtcclxuICAgICAgICAgICAgICAgIGNyeXB0by5yYW5kb21CeXRlcyg3KS5jb3B5KGEsIGkpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMCA8PSAodiAlIDFlMTQpIDw9IDk5OTk5OTk5OTk5OTk5XHJcbiAgICAgICAgICAgICAgICBjLnB1c2godiAlIDFlMTQpO1xyXG4gICAgICAgICAgICAgICAgaSArPSA3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gayAvIDc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBDUllQVE8gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdjcnlwdG8gdW5hdmFpbGFibGUnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVzZSBNYXRoLnJhbmRvbS5cclxuICAgICAgICBpZiAoIUNSWVBUTykge1xyXG5cclxuICAgICAgICAgIGZvciAoOyBpIDwgazspIHtcclxuICAgICAgICAgICAgdiA9IHJhbmRvbTUzYml0SW50KCk7XHJcbiAgICAgICAgICAgIGlmICh2IDwgOWUxNSkgY1tpKytdID0gdiAlIDFlMTQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrID0gY1stLWldO1xyXG4gICAgICAgIGRwICU9IExPR19CQVNFO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHRyYWlsaW5nIGRpZ2l0cyB0byB6ZXJvcyBhY2NvcmRpbmcgdG8gZHAuXHJcbiAgICAgICAgaWYgKGsgJiYgZHApIHtcclxuICAgICAgICAgIHYgPSBQT1dTX1RFTltMT0dfQkFTRSAtIGRwXTtcclxuICAgICAgICAgIGNbaV0gPSBtYXRoZmxvb3IoayAvIHYpICogdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBlbGVtZW50cyB3aGljaCBhcmUgemVyby5cclxuICAgICAgICBmb3IgKDsgY1tpXSA9PT0gMDsgYy5wb3AoKSwgaS0tKTtcclxuXHJcbiAgICAgICAgLy8gWmVybz9cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIGMgPSBbZSA9IDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgZWxlbWVudHMgd2hpY2ggYXJlIHplcm8gYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgICAgICAgIGZvciAoZSA9IC0xIDsgY1swXSA9PT0gMDsgYy5zcGxpY2UoMCwgMSksIGUgLT0gTE9HX0JBU0UpO1xyXG5cclxuICAgICAgICAgIC8vIENvdW50IHRoZSBkaWdpdHMgb2YgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYyB0byBkZXRlcm1pbmUgbGVhZGluZyB6ZXJvcywgYW5kLi4uXHJcbiAgICAgICAgICBmb3IgKGkgPSAxLCB2ID0gY1swXTsgdiA+PSAxMDsgdiAvPSAxMCwgaSsrKTtcclxuXHJcbiAgICAgICAgICAvLyBhZGp1c3QgdGhlIGV4cG9uZW50IGFjY29yZGluZ2x5LlxyXG4gICAgICAgICAgaWYgKGkgPCBMT0dfQkFTRSkgZSAtPSBMT0dfQkFTRSAtIGk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByYW5kLmUgPSBlO1xyXG4gICAgICAgIHJhbmQuYyA9IGM7XHJcbiAgICAgICAgcmV0dXJuIHJhbmQ7XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBzdW0gb2YgdGhlIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBCaWdOdW1iZXIuc3VtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgaSA9IDEsXHJcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcclxuICAgICAgICBzdW0gPSBuZXcgQmlnTnVtYmVyKGFyZ3NbMF0pO1xyXG4gICAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOykgc3VtID0gc3VtLnBsdXMoYXJnc1tpKytdKTtcclxuICAgICAgcmV0dXJuIHN1bTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIFBSSVZBVEUgRlVOQ1RJT05TXHJcblxyXG5cclxuICAgIC8vIENhbGxlZCBieSBCaWdOdW1iZXIgYW5kIEJpZ051bWJlci5wcm90b3R5cGUudG9TdHJpbmcuXHJcbiAgICBjb252ZXJ0QmFzZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBkZWNpbWFsID0gJzAxMjM0NTY3ODknO1xyXG5cclxuICAgICAgLypcclxuICAgICAgICogQ29udmVydCBzdHJpbmcgb2YgYmFzZUluIHRvIGFuIGFycmF5IG9mIG51bWJlcnMgb2YgYmFzZU91dC5cclxuICAgICAgICogRWcuIHRvQmFzZU91dCgnMjU1JywgMTAsIDE2KSByZXR1cm5zIFsxNSwgMTVdLlxyXG4gICAgICAgKiBFZy4gdG9CYXNlT3V0KCdmZicsIDE2LCAxMCkgcmV0dXJucyBbMiwgNSwgNV0uXHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiB0b0Jhc2VPdXQoc3RyLCBiYXNlSW4sIGJhc2VPdXQsIGFscGhhYmV0KSB7XHJcbiAgICAgICAgdmFyIGosXHJcbiAgICAgICAgICBhcnIgPSBbMF0sXHJcbiAgICAgICAgICBhcnJMLFxyXG4gICAgICAgICAgaSA9IDAsXHJcbiAgICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgICBmb3IgKDsgaSA8IGxlbjspIHtcclxuICAgICAgICAgIGZvciAoYXJyTCA9IGFyci5sZW5ndGg7IGFyckwtLTsgYXJyW2FyckxdICo9IGJhc2VJbik7XHJcblxyXG4gICAgICAgICAgYXJyWzBdICs9IGFscGhhYmV0LmluZGV4T2Yoc3RyLmNoYXJBdChpKyspKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJyW2pdID4gYmFzZU91dCAtIDEpIHtcclxuICAgICAgICAgICAgICBpZiAoYXJyW2ogKyAxXSA9PSBudWxsKSBhcnJbaiArIDFdID0gMDtcclxuICAgICAgICAgICAgICBhcnJbaiArIDFdICs9IGFycltqXSAvIGJhc2VPdXQgfCAwO1xyXG4gICAgICAgICAgICAgIGFycltqXSAlPSBiYXNlT3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJyLnJldmVyc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29udmVydCBhIG51bWVyaWMgc3RyaW5nIG9mIGJhc2VJbiB0byBhIG51bWVyaWMgc3RyaW5nIG9mIGJhc2VPdXQuXHJcbiAgICAgIC8vIElmIHRoZSBjYWxsZXIgaXMgdG9TdHJpbmcsIHdlIGFyZSBjb252ZXJ0aW5nIGZyb20gYmFzZSAxMCB0byBiYXNlT3V0LlxyXG4gICAgICAvLyBJZiB0aGUgY2FsbGVyIGlzIEJpZ051bWJlciwgd2UgYXJlIGNvbnZlcnRpbmcgZnJvbSBiYXNlSW4gdG8gYmFzZSAxMC5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIsIGJhc2VJbiwgYmFzZU91dCwgc2lnbiwgY2FsbGVySXNUb1N0cmluZykge1xyXG4gICAgICAgIHZhciBhbHBoYWJldCwgZCwgZSwgaywgciwgeCwgeGMsIHksXHJcbiAgICAgICAgICBpID0gc3RyLmluZGV4T2YoJy4nKSxcclxuICAgICAgICAgIGRwID0gREVDSU1BTF9QTEFDRVMsXHJcbiAgICAgICAgICBybSA9IFJPVU5ESU5HX01PREU7XHJcblxyXG4gICAgICAgIC8vIE5vbi1pbnRlZ2VyLlxyXG4gICAgICAgIGlmIChpID49IDApIHtcclxuICAgICAgICAgIGsgPSBQT1dfUFJFQ0lTSU9OO1xyXG5cclxuICAgICAgICAgIC8vIFVubGltaXRlZCBwcmVjaXNpb24uXHJcbiAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gMDtcclxuICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoYmFzZUluKTtcclxuICAgICAgICAgIHggPSB5LnBvdyhzdHIubGVuZ3RoIC0gaSk7XHJcbiAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gaztcclxuXHJcbiAgICAgICAgICAvLyBDb252ZXJ0IHN0ciBhcyBpZiBhbiBpbnRlZ2VyLCB0aGVuIHJlc3RvcmUgdGhlIGZyYWN0aW9uIHBhcnQgYnkgZGl2aWRpbmcgdGhlXHJcbiAgICAgICAgICAvLyByZXN1bHQgYnkgaXRzIGJhc2UgcmFpc2VkIHRvIGEgcG93ZXIuXHJcblxyXG4gICAgICAgICAgeS5jID0gdG9CYXNlT3V0KHRvRml4ZWRQb2ludChjb2VmZlRvU3RyaW5nKHguYyksIHguZSwgJzAnKSxcclxuICAgICAgICAgICAxMCwgYmFzZU91dCwgZGVjaW1hbCk7XHJcbiAgICAgICAgICB5LmUgPSB5LmMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCB0aGUgbnVtYmVyIGFzIGludGVnZXIuXHJcblxyXG4gICAgICAgIHhjID0gdG9CYXNlT3V0KHN0ciwgYmFzZUluLCBiYXNlT3V0LCBjYWxsZXJJc1RvU3RyaW5nXHJcbiAgICAgICAgID8gKGFscGhhYmV0ID0gQUxQSEFCRVQsIGRlY2ltYWwpXHJcbiAgICAgICAgIDogKGFscGhhYmV0ID0gZGVjaW1hbCwgQUxQSEFCRVQpKTtcclxuXHJcbiAgICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGFzIGFuIGludGVnZXIgYW5kIGNvbnZlcnRlZCB0byBiYXNlT3V0LiBlIGlzIHRoZSBleHBvbmVudC5cclxuICAgICAgICBlID0gayA9IHhjLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoOyB4Y1stLWtdID09IDA7IHhjLnBvcCgpKTtcclxuXHJcbiAgICAgICAgLy8gWmVybz9cclxuICAgICAgICBpZiAoIXhjWzBdKSByZXR1cm4gYWxwaGFiZXQuY2hhckF0KDApO1xyXG5cclxuICAgICAgICAvLyBEb2VzIHN0ciByZXByZXNlbnQgYW4gaW50ZWdlcj8gSWYgc28sIG5vIG5lZWQgZm9yIHRoZSBkaXZpc2lvbi5cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIC0tZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5jID0geGM7XHJcbiAgICAgICAgICB4LmUgPSBlO1xyXG5cclxuICAgICAgICAgIC8vIFRoZSBzaWduIGlzIG5lZWRlZCBmb3IgY29ycmVjdCByb3VuZGluZy5cclxuICAgICAgICAgIHgucyA9IHNpZ247XHJcbiAgICAgICAgICB4ID0gZGl2KHgsIHksIGRwLCBybSwgYmFzZU91dCk7XHJcbiAgICAgICAgICB4YyA9IHguYztcclxuICAgICAgICAgIHIgPSB4LnI7XHJcbiAgICAgICAgICBlID0geC5lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGNvbnZlcnRlZCB0byBiYXNlT3V0LlxyXG5cclxuICAgICAgICAvLyBUSGUgaW5kZXggb2YgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgIGQgPSBlICsgZHAgKyAxO1xyXG5cclxuICAgICAgICAvLyBUaGUgcm91bmRpbmcgZGlnaXQ6IHRoZSBkaWdpdCB0byB0aGUgcmlnaHQgb2YgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgaSA9IHhjW2RdO1xyXG5cclxuICAgICAgICAvLyBMb29rIGF0IHRoZSByb3VuZGluZyBkaWdpdHMgYW5kIG1vZGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcm91bmQgdXAuXHJcblxyXG4gICAgICAgIGsgPSBiYXNlT3V0IC8gMjtcclxuICAgICAgICByID0gciB8fCBkIDwgMCB8fCB4Y1tkICsgMV0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgciA9IHJtIDwgNCA/IChpICE9IG51bGwgfHwgcikgJiYgKHJtID09IDAgfHwgcm0gPT0gKHgucyA8IDAgPyAzIDogMikpXHJcbiAgICAgICAgICAgICAgOiBpID4gayB8fCBpID09IGsgJiYocm0gPT0gNCB8fCByIHx8IHJtID09IDYgJiYgeGNbZCAtIDFdICYgMSB8fFxyXG4gICAgICAgICAgICAgICBybSA9PSAoeC5zIDwgMCA/IDggOiA3KSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBpbmRleCBvZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgbm90IGdyZWF0ZXIgdGhhbiB6ZXJvLCBvciB4YyByZXByZXNlbnRzXHJcbiAgICAgICAgLy8gemVybywgdGhlbiB0aGUgcmVzdWx0IG9mIHRoZSBiYXNlIGNvbnZlcnNpb24gaXMgemVybyBvciwgaWYgcm91bmRpbmcgdXAsIGEgdmFsdWVcclxuICAgICAgICAvLyBzdWNoIGFzIDAuMDAwMDEuXHJcbiAgICAgICAgaWYgKGQgPCAxIHx8ICF4Y1swXSkge1xyXG5cclxuICAgICAgICAgIC8vIDFeLWRwIG9yIDBcclxuICAgICAgICAgIHN0ciA9IHIgPyB0b0ZpeGVkUG9pbnQoYWxwaGFiZXQuY2hhckF0KDEpLCAtZHAsIGFscGhhYmV0LmNoYXJBdCgwKSkgOiBhbHBoYWJldC5jaGFyQXQoMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBUcnVuY2F0ZSB4YyB0byB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICAgICAgeGMubGVuZ3RoID0gZDtcclxuXHJcbiAgICAgICAgICAvLyBSb3VuZCB1cD9cclxuICAgICAgICAgIGlmIChyKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBSb3VuZGluZyB1cCBtYXkgbWVhbiB0aGUgcHJldmlvdXMgZGlnaXQgaGFzIHRvIGJlIHJvdW5kZWQgdXAgYW5kIHNvIG9uLlxyXG4gICAgICAgICAgICBmb3IgKC0tYmFzZU91dDsgKyt4Y1stLWRdID4gYmFzZU91dDspIHtcclxuICAgICAgICAgICAgICB4Y1tkXSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgIGlmICghZCkge1xyXG4gICAgICAgICAgICAgICAgKytlO1xyXG4gICAgICAgICAgICAgICAgeGMgPSBbMV0uY29uY2F0KHhjKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICBmb3IgKGsgPSB4Yy5sZW5ndGg7ICF4Y1stLWtdOyk7XHJcblxyXG4gICAgICAgICAgLy8gRS5nLiBbNCwgMTEsIDE1XSBiZWNvbWVzIDRiZi5cclxuICAgICAgICAgIGZvciAoaSA9IDAsIHN0ciA9ICcnOyBpIDw9IGs7IHN0ciArPSBhbHBoYWJldC5jaGFyQXQoeGNbaSsrXSkpO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCBsZWFkaW5nIHplcm9zLCBkZWNpbWFsIHBvaW50IGFuZCB0cmFpbGluZyB6ZXJvcyBhcyByZXF1aXJlZC5cclxuICAgICAgICAgIHN0ciA9IHRvRml4ZWRQb2ludChzdHIsIGUsIGFscGhhYmV0LmNoYXJBdCgwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgY2FsbGVyIHdpbGwgYWRkIHRoZSBzaWduLlxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvLyBQZXJmb3JtIGRpdmlzaW9uIGluIHRoZSBzcGVjaWZpZWQgYmFzZS4gQ2FsbGVkIGJ5IGRpdiBhbmQgY29udmVydEJhc2UuXHJcbiAgICBkaXYgPSAoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgLy8gQXNzdW1lIG5vbi16ZXJvIHggYW5kIGsuXHJcbiAgICAgIGZ1bmN0aW9uIG11bHRpcGx5KHgsIGssIGJhc2UpIHtcclxuICAgICAgICB2YXIgbSwgdGVtcCwgeGxvLCB4aGksXHJcbiAgICAgICAgICBjYXJyeSA9IDAsXHJcbiAgICAgICAgICBpID0geC5sZW5ndGgsXHJcbiAgICAgICAgICBrbG8gPSBrICUgU1FSVF9CQVNFLFxyXG4gICAgICAgICAga2hpID0gayAvIFNRUlRfQkFTRSB8IDA7XHJcblxyXG4gICAgICAgIGZvciAoeCA9IHguc2xpY2UoKTsgaS0tOykge1xyXG4gICAgICAgICAgeGxvID0geFtpXSAlIFNRUlRfQkFTRTtcclxuICAgICAgICAgIHhoaSA9IHhbaV0gLyBTUVJUX0JBU0UgfCAwO1xyXG4gICAgICAgICAgbSA9IGtoaSAqIHhsbyArIHhoaSAqIGtsbztcclxuICAgICAgICAgIHRlbXAgPSBrbG8gKiB4bG8gKyAoKG0gJSBTUVJUX0JBU0UpICogU1FSVF9CQVNFKSArIGNhcnJ5O1xyXG4gICAgICAgICAgY2FycnkgPSAodGVtcCAvIGJhc2UgfCAwKSArIChtIC8gU1FSVF9CQVNFIHwgMCkgKyBraGkgKiB4aGk7XHJcbiAgICAgICAgICB4W2ldID0gdGVtcCAlIGJhc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FycnkpIHggPSBbY2FycnldLmNvbmNhdCh4KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYiwgYUwsIGJMKSB7XHJcbiAgICAgICAgdmFyIGksIGNtcDtcclxuXHJcbiAgICAgICAgaWYgKGFMICE9IGJMKSB7XHJcbiAgICAgICAgICBjbXAgPSBhTCA+IGJMID8gMSA6IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgZm9yIChpID0gY21wID0gMDsgaSA8IGFMOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChhW2ldICE9IGJbaV0pIHtcclxuICAgICAgICAgICAgICBjbXAgPSBhW2ldID4gYltpXSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNtcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc3VidHJhY3QoYSwgYiwgYUwsIGJhc2UpIHtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IGIgZnJvbSBhLlxyXG4gICAgICAgIGZvciAoOyBhTC0tOykge1xyXG4gICAgICAgICAgYVthTF0gLT0gaTtcclxuICAgICAgICAgIGkgPSBhW2FMXSA8IGJbYUxdID8gMSA6IDA7XHJcbiAgICAgICAgICBhW2FMXSA9IGkgKiBiYXNlICsgYVthTF0gLSBiW2FMXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7IGEuc3BsaWNlKDAsIDEpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8geDogZGl2aWRlbmQsIHk6IGRpdmlzb3IuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSwgZHAsIHJtLCBiYXNlKSB7XHJcbiAgICAgICAgdmFyIGNtcCwgZSwgaSwgbW9yZSwgbiwgcHJvZCwgcHJvZEwsIHEsIHFjLCByZW0sIHJlbUwsIHJlbTAsIHhpLCB4TCwgeWMwLFxyXG4gICAgICAgICAgeUwsIHl6LFxyXG4gICAgICAgICAgcyA9IHgucyA9PSB5LnMgPyAxIDogLTEsXHJcbiAgICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICAgIHljID0geS5jO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgTmFOLCBJbmZpbml0eSBvciAwP1xyXG4gICAgICAgIGlmICgheGMgfHwgIXhjWzBdIHx8ICF5YyB8fCAheWNbMF0pIHtcclxuXHJcbiAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihcclxuXHJcbiAgICAgICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgTmFOLCBvciBib3RoIEluZmluaXR5IG9yIDAuXHJcbiAgICAgICAgICAgIXgucyB8fCAheS5zIHx8ICh4YyA/IHljICYmIHhjWzBdID09IHljWzBdIDogIXljKSA/IE5hTiA6XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gwrEwIGlmIHggaXMgwrEwIG9yIHkgaXMgwrFJbmZpbml0eSwgb3IgcmV0dXJuIMKxSW5maW5pdHkgYXMgeSBpcyDCsTAuXHJcbiAgICAgICAgICAgIHhjICYmIHhjWzBdID09IDAgfHwgIXljID8gcyAqIDAgOiBzIC8gMFxyXG4gICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcSA9IG5ldyBCaWdOdW1iZXIocyk7XHJcbiAgICAgICAgcWMgPSBxLmMgPSBbXTtcclxuICAgICAgICBlID0geC5lIC0geS5lO1xyXG4gICAgICAgIHMgPSBkcCArIGUgKyAxO1xyXG5cclxuICAgICAgICBpZiAoIWJhc2UpIHtcclxuICAgICAgICAgIGJhc2UgPSBCQVNFO1xyXG4gICAgICAgICAgZSA9IGJpdEZsb29yKHguZSAvIExPR19CQVNFKSAtIGJpdEZsb29yKHkuZSAvIExPR19CQVNFKTtcclxuICAgICAgICAgIHMgPSBzIC8gTE9HX0JBU0UgfCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVzdWx0IGV4cG9uZW50IG1heSBiZSBvbmUgbGVzcyB0aGVuIHRoZSBjdXJyZW50IHZhbHVlIG9mIGUuXHJcbiAgICAgICAgLy8gVGhlIGNvZWZmaWNpZW50cyBvZiB0aGUgQmlnTnVtYmVycyBmcm9tIGNvbnZlcnRCYXNlIG1heSBoYXZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoaSA9IDA7IHljW2ldID09ICh4Y1tpXSB8fCAwKTsgaSsrKTtcclxuXHJcbiAgICAgICAgaWYgKHljW2ldID4gKHhjW2ldIHx8IDApKSBlLS07XHJcblxyXG4gICAgICAgIGlmIChzIDwgMCkge1xyXG4gICAgICAgICAgcWMucHVzaCgxKTtcclxuICAgICAgICAgIG1vcmUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4TCA9IHhjLmxlbmd0aDtcclxuICAgICAgICAgIHlMID0geWMubGVuZ3RoO1xyXG4gICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICBzICs9IDI7XHJcblxyXG4gICAgICAgICAgLy8gTm9ybWFsaXNlIHhjIGFuZCB5YyBzbyBoaWdoZXN0IG9yZGVyIGRpZ2l0IG9mIHljIGlzID49IGJhc2UgLyAyLlxyXG5cclxuICAgICAgICAgIG4gPSBtYXRoZmxvb3IoYmFzZSAvICh5Y1swXSArIDEpKTtcclxuXHJcbiAgICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5LCBidXQgdG8gaGFuZGxlIG9kZCBiYXNlcyB3aGVyZSB5Y1swXSA9PSAoYmFzZSAvIDIpIC0gMS5cclxuICAgICAgICAgIC8vIGlmIChuID4gMSB8fCBuKysgPT0gMSAmJiB5Y1swXSA8IGJhc2UgLyAyKSB7XHJcbiAgICAgICAgICBpZiAobiA+IDEpIHtcclxuICAgICAgICAgICAgeWMgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICAgIHhjID0gbXVsdGlwbHkoeGMsIG4sIGJhc2UpO1xyXG4gICAgICAgICAgICB5TCA9IHljLmxlbmd0aDtcclxuICAgICAgICAgICAgeEwgPSB4Yy5sZW5ndGg7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgeGkgPSB5TDtcclxuICAgICAgICAgIHJlbSA9IHhjLnNsaWNlKDAsIHlMKTtcclxuICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCB6ZXJvcyB0byBtYWtlIHJlbWFpbmRlciBhcyBsb25nIGFzIGRpdmlzb3IuXHJcbiAgICAgICAgICBmb3IgKDsgcmVtTCA8IHlMOyByZW1bcmVtTCsrXSA9IDApO1xyXG4gICAgICAgICAgeXogPSB5Yy5zbGljZSgpO1xyXG4gICAgICAgICAgeXogPSBbMF0uY29uY2F0KHl6KTtcclxuICAgICAgICAgIHljMCA9IHljWzBdO1xyXG4gICAgICAgICAgaWYgKHljWzFdID49IGJhc2UgLyAyKSB5YzArKztcclxuICAgICAgICAgIC8vIE5vdCBuZWNlc3NhcnksIGJ1dCB0byBwcmV2ZW50IHRyaWFsIGRpZ2l0IG4gPiBiYXNlLCB3aGVuIHVzaW5nIGJhc2UgMy5cclxuICAgICAgICAgIC8vIGVsc2UgaWYgKGJhc2UgPT0gMyAmJiB5YzAgPT0gMSkgeWMwID0gMSArIDFlLTE1O1xyXG5cclxuICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgbiA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgY21wID0gY29tcGFyZSh5YywgcmVtLCB5TCwgcmVtTCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBkaXZpc29yIDwgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBpZiAoY21wIDwgMCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdHJpYWwgZGlnaXQsIG4uXHJcblxyXG4gICAgICAgICAgICAgIHJlbTAgPSByZW1bMF07XHJcbiAgICAgICAgICAgICAgaWYgKHlMICE9IHJlbUwpIHJlbTAgPSByZW0wICogYmFzZSArIChyZW1bMV0gfHwgMCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIG4gaXMgaG93IG1hbnkgdGltZXMgdGhlIGRpdmlzb3IgZ29lcyBpbnRvIHRoZSBjdXJyZW50IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBuID0gbWF0aGZsb29yKHJlbTAgLyB5YzApO1xyXG5cclxuICAgICAgICAgICAgICAvLyAgQWxnb3JpdGhtOlxyXG4gICAgICAgICAgICAgIC8vICBwcm9kdWN0ID0gZGl2aXNvciBtdWx0aXBsaWVkIGJ5IHRyaWFsIGRpZ2l0IChuKS5cclxuICAgICAgICAgICAgICAvLyAgQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgLy8gIElmIHByb2R1Y3QgaXMgZ3JlYXRlciB0aGFuIHJlbWFpbmRlcjpcclxuICAgICAgICAgICAgICAvLyAgICBTdWJ0cmFjdCBkaXZpc29yIGZyb20gcHJvZHVjdCwgZGVjcmVtZW50IHRyaWFsIGRpZ2l0LlxyXG4gICAgICAgICAgICAgIC8vICBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIC8vICBJZiBwcm9kdWN0IHdhcyBsZXNzIHRoYW4gcmVtYWluZGVyIGF0IHRoZSBsYXN0IGNvbXBhcmU6XHJcbiAgICAgICAgICAgICAgLy8gICAgQ29tcGFyZSBuZXcgcmVtYWluZGVyIGFuZCBkaXZpc29yLlxyXG4gICAgICAgICAgICAgIC8vICAgIElmIHJlbWFpbmRlciBpcyBncmVhdGVyIHRoYW4gZGl2aXNvcjpcclxuICAgICAgICAgICAgICAvLyAgICAgIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIsIGluY3JlbWVudCB0cmlhbCBkaWdpdC5cclxuXHJcbiAgICAgICAgICAgICAgaWYgKG4gPiAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbiBtYXkgYmUgPiBiYXNlIG9ubHkgd2hlbiBiYXNlIGlzIDMuXHJcbiAgICAgICAgICAgICAgICBpZiAobiA+PSBiYXNlKSBuID0gYmFzZSAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3IgKiB0cmlhbCBkaWdpdC5cclxuICAgICAgICAgICAgICAgIHByb2QgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0ID4gcmVtYWluZGVyIHRoZW4gdHJpYWwgZGlnaXQgbiB0b28gaGlnaC5cclxuICAgICAgICAgICAgICAgIC8vIG4gaXMgMSB0b28gaGlnaCBhYm91dCA1JSBvZiB0aGUgdGltZSwgYW5kIGlzIG5vdCBrbm93biB0byBoYXZlXHJcbiAgICAgICAgICAgICAgICAvLyBldmVyIGJlZW4gbW9yZSB0aGFuIDEgdG9vIGhpZ2guXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY29tcGFyZShwcm9kLCByZW0sIHByb2RMLCByZW1MKSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSBwcm9kdWN0LlxyXG4gICAgICAgICAgICAgICAgICBzdWJ0cmFjdChwcm9kLCB5TCA8IHByb2RMID8geXogOiB5YywgcHJvZEwsIGJhc2UpO1xyXG4gICAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICBjbXAgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbiBpcyAwIG9yIDEsIGNtcCBpcyAtMS5cclxuICAgICAgICAgICAgICAgIC8vIElmIG4gaXMgMCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjb21wYXJlIHljIGFuZCByZW0gYWdhaW4gYmVsb3csXHJcbiAgICAgICAgICAgICAgICAvLyBzbyBjaGFuZ2UgY21wIHRvIDEgdG8gYXZvaWQgaXQuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBuIGlzIDEsIGxlYXZlIGNtcCBhcyAtMSwgc28geWMgYW5kIHJlbSBhcmUgY29tcGFyZWQgYWdhaW4uXHJcbiAgICAgICAgICAgICAgICBpZiAobiA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBkaXZpc29yIDwgcmVtYWluZGVyLCBzbyBuIG11c3QgYmUgYXQgbGVhc3QgMS5cclxuICAgICAgICAgICAgICAgICAgY21wID0gbiA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3JcclxuICAgICAgICAgICAgICAgIHByb2QgPSB5Yy5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChwcm9kTCA8IHJlbUwpIHByb2QgPSBbMF0uY29uY2F0KHByb2QpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIHN1YnRyYWN0KHJlbSwgcHJvZCwgcmVtTCwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0IHdhcyA8IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBpZiAoY21wID09IC0xKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCBuZXcgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgICAgLy8gSWYgZGl2aXNvciA8IG5ldyByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBUcmlhbCBkaWdpdCBuIHRvbyBsb3cuXHJcbiAgICAgICAgICAgICAgICAvLyBuIGlzIDEgdG9vIGxvdyBhYm91dCA1JSBvZiB0aGUgdGltZSwgYW5kIHZlcnkgcmFyZWx5IDIgdG9vIGxvdy5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChjb21wYXJlKHljLCByZW0sIHlMLCByZW1MKSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgbisrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZGl2aXNvciBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICAgICAgc3VidHJhY3QocmVtLCB5TCA8IHJlbUwgPyB5eiA6IHljLCByZW1MLCBiYXNlKTtcclxuICAgICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIG4rKztcclxuICAgICAgICAgICAgICByZW0gPSBbMF07XHJcbiAgICAgICAgICAgIH0gLy8gZWxzZSBjbXAgPT09IDEgYW5kIG4gd2lsbCBiZSAwXHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIG5leHQgZGlnaXQsIG4sIHRvIHRoZSByZXN1bHQgYXJyYXkuXHJcbiAgICAgICAgICAgIHFjW2krK10gPSBuO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIGlmIChyZW1bMF0pIHtcclxuICAgICAgICAgICAgICByZW1bcmVtTCsrXSA9IHhjW3hpXSB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlbSA9IFt4Y1t4aV1dO1xyXG4gICAgICAgICAgICAgIHJlbUwgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IHdoaWxlICgoeGkrKyA8IHhMIHx8IHJlbVswXSAhPSBudWxsKSAmJiBzLS0pO1xyXG5cclxuICAgICAgICAgIG1vcmUgPSByZW1bMF0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgICAvLyBMZWFkaW5nIHplcm8/XHJcbiAgICAgICAgICBpZiAoIXFjWzBdKSBxYy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmFzZSA9PSBCQVNFKSB7XHJcblxyXG4gICAgICAgICAgLy8gVG8gY2FsY3VsYXRlIHEuZSwgZmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHFjWzBdLlxyXG4gICAgICAgICAgZm9yIChpID0gMSwgcyA9IHFjWzBdOyBzID49IDEwOyBzIC89IDEwLCBpKyspO1xyXG5cclxuICAgICAgICAgIHJvdW5kKHEsIGRwICsgKHEuZSA9IGkgKyBlICogTE9HX0JBU0UgLSAxKSArIDEsIHJtLCBtb3JlKTtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGVyIGlzIGNvbnZlcnRCYXNlLlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBxLmUgPSBlO1xyXG4gICAgICAgICAgcS5yID0gK21vcmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcTtcclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIgbiBpbiBmaXhlZC1wb2ludCBvciBleHBvbmVudGlhbFxyXG4gICAgICogbm90YXRpb24gcm91bmRlZCB0byB0aGUgc3BlY2lmaWVkIGRlY2ltYWwgcGxhY2VzIG9yIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgICAqXHJcbiAgICAgKiBuOiBhIEJpZ051bWJlci5cclxuICAgICAqIGk6IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBkaWdpdCByZXF1aXJlZCAoaS5lLiB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cCkuXHJcbiAgICAgKiBybTogdGhlIHJvdW5kaW5nIG1vZGUuXHJcbiAgICAgKiBpZDogMSAodG9FeHBvbmVudGlhbCkgb3IgMiAodG9QcmVjaXNpb24pLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmb3JtYXQobiwgaSwgcm0sIGlkKSB7XHJcbiAgICAgIHZhciBjMCwgZSwgbmUsIGxlbiwgc3RyO1xyXG5cclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICBpZiAoIW4uYykgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIGMwID0gbi5jWzBdO1xyXG4gICAgICBuZSA9IG4uZTtcclxuXHJcbiAgICAgIGlmIChpID09IG51bGwpIHtcclxuICAgICAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKG4uYyk7XHJcbiAgICAgICAgc3RyID0gaWQgPT0gMSB8fCBpZCA9PSAyICYmIG5lIDw9IFRPX0VYUF9ORUdcclxuICAgICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgbmUpXHJcbiAgICAgICAgIDogdG9GaXhlZFBvaW50KHN0ciwgbmUsICcwJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbiA9IHJvdW5kKG5ldyBCaWdOdW1iZXIobiksIGksIHJtKTtcclxuXHJcbiAgICAgICAgLy8gbi5lIG1heSBoYXZlIGNoYW5nZWQgaWYgdGhlIHZhbHVlIHdhcyByb3VuZGVkIHVwLlxyXG4gICAgICAgIGUgPSBuLmU7XHJcblxyXG4gICAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyB0b1ByZWNpc2lvbiByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzXHJcbiAgICAgICAgLy8gc3BlY2lmaWVkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBpbnRlZ2VyXHJcbiAgICAgICAgLy8gcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24uXHJcblxyXG4gICAgICAgIC8vIEV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAgICAgIGlmIChpZCA9PSAxIHx8IGlkID09IDIgJiYgKGkgPD0gZSB8fCBlIDw9IFRPX0VYUF9ORUcpKSB7XHJcblxyXG4gICAgICAgICAgLy8gQXBwZW5kIHplcm9zP1xyXG4gICAgICAgICAgZm9yICg7IGxlbiA8IGk7IHN0ciArPSAnMCcsIGxlbisrKTtcclxuICAgICAgICAgIHN0ciA9IHRvRXhwb25lbnRpYWwoc3RyLCBlKTtcclxuXHJcbiAgICAgICAgLy8gRml4ZWQtcG9pbnQgbm90YXRpb24uXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGkgLT0gbmU7XHJcbiAgICAgICAgICBzdHIgPSB0b0ZpeGVkUG9pbnQoc3RyLCBlLCAnMCcpO1xyXG5cclxuICAgICAgICAgIC8vIEFwcGVuZCB6ZXJvcz9cclxuICAgICAgICAgIGlmIChlICsgMSA+IGxlbikge1xyXG4gICAgICAgICAgICBpZiAoLS1pID4gMCkgZm9yIChzdHIgKz0gJy4nOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaSArPSBlIC0gbGVuO1xyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICBpZiAoZSArIDEgPT0gbGVuKSBzdHIgKz0gJy4nO1xyXG4gICAgICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbi5zIDwgMCAmJiBjMCA/ICctJyArIHN0ciA6IHN0cjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSGFuZGxlIEJpZ051bWJlci5tYXggYW5kIEJpZ051bWJlci5taW4uXHJcbiAgICBmdW5jdGlvbiBtYXhPck1pbihhcmdzLCBtZXRob2QpIHtcclxuICAgICAgdmFyIG4sXHJcbiAgICAgICAgaSA9IDEsXHJcbiAgICAgICAgbSA9IG5ldyBCaWdOdW1iZXIoYXJnc1swXSk7XHJcblxyXG4gICAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBuID0gbmV3IEJpZ051bWJlcihhcmdzW2ldKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYW55IG51bWJlciBpcyBOYU4sIHJldHVybiBOYU4uXHJcbiAgICAgICAgaWYgKCFuLnMpIHtcclxuICAgICAgICAgIG0gPSBuO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QuY2FsbChtLCBuKSkge1xyXG4gICAgICAgICAgbSA9IG47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFN0cmlwIHRyYWlsaW5nIHplcm9zLCBjYWxjdWxhdGUgYmFzZSAxMCBleHBvbmVudCBhbmQgY2hlY2sgYWdhaW5zdCBNSU5fRVhQIGFuZCBNQVhfRVhQLlxyXG4gICAgICogQ2FsbGVkIGJ5IG1pbnVzLCBwbHVzIGFuZCB0aW1lcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbm9ybWFsaXNlKG4sIGMsIGUpIHtcclxuICAgICAgdmFyIGkgPSAxLFxyXG4gICAgICAgIGogPSBjLmxlbmd0aDtcclxuXHJcbiAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAoOyAhY1stLWpdOyBjLnBvcCgpKTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYmFzZSAxMCBleHBvbmVudC4gRmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIGNbMF0uXHJcbiAgICAgIGZvciAoaiA9IGNbMF07IGogPj0gMTA7IGogLz0gMTAsIGkrKyk7XHJcblxyXG4gICAgICAvLyBPdmVyZmxvdz9cclxuICAgICAgaWYgKChlID0gaSArIGUgKiBMT0dfQkFTRSAtIDEpID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgICAvLyBJbmZpbml0eS5cclxuICAgICAgICBuLmMgPSBuLmUgPSBudWxsO1xyXG5cclxuICAgICAgLy8gVW5kZXJmbG93P1xyXG4gICAgICB9IGVsc2UgaWYgKGUgPCBNSU5fRVhQKSB7XHJcblxyXG4gICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgbi5jID0gW24uZSA9IDBdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG4uZSA9IGU7XHJcbiAgICAgICAgbi5jID0gYztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEhhbmRsZSB2YWx1ZXMgdGhhdCBmYWlsIHRoZSB2YWxpZGl0eSB0ZXN0IGluIEJpZ051bWJlci5cclxuICAgIHBhcnNlTnVtZXJpYyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaSxcclxuICAgICAgICBkb3RBZnRlciA9IC9eKFteLl0rKVxcLiQvLFxyXG4gICAgICAgIGRvdEJlZm9yZSA9IC9eXFwuKFteLl0rKSQvLFxyXG4gICAgICAgIGlzSW5maW5pdHlPck5hTiA9IC9eLT8oSW5maW5pdHl8TmFOKSQvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VPclBsdXMgPSAvXlxccypcXCsoPz1bXFx3Ll0pfF5cXHMrfFxccyskL2c7XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgsIHN0ciwgaXNOdW0sIGIpIHtcclxuICAgICAgICB2YXIgYmFzZSxcclxuICAgICAgICAgIHMgPSBpc051bSA/IHN0ciA6IHN0ci5yZXBsYWNlKHdoaXRlc3BhY2VPclBsdXMsICcnKTtcclxuXHJcbiAgICAgICAgLy8gTm8gZXhjZXB0aW9uIG9uIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICAgIGlmIChpc0luZmluaXR5T3JOYU4udGVzdChzKSkge1xyXG4gICAgICAgICAgeC5zID0gaXNOYU4ocykgPyBudWxsIDogcyA8IDAgPyAtMSA6IDE7XHJcbiAgICAgICAgICB4LmMgPSB4LmUgPSBudWxsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoIWlzTnVtKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaVxyXG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKGJhc2VQcmVmaXgsIGZ1bmN0aW9uIChtLCBwMSwgcDIpIHtcclxuICAgICAgICAgICAgICBiYXNlID0gKHAyID0gcDIudG9Mb3dlckNhc2UoKSkgPT0gJ3gnID8gMTYgOiBwMiA9PSAnYicgPyAyIDogODtcclxuICAgICAgICAgICAgICByZXR1cm4gIWIgfHwgYiA9PSBiYXNlID8gcDEgOiBtO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChiKSB7XHJcbiAgICAgICAgICAgICAgYmFzZSA9IGI7XHJcblxyXG4gICAgICAgICAgICAgIC8vIEUuZy4gJzEuJyB0byAnMScsICcuMScgdG8gJzAuMSdcclxuICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlKGRvdEFmdGVyLCAnJDEnKS5yZXBsYWNlKGRvdEJlZm9yZSwgJzAuJDEnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHN0ciAhPSBzKSByZXR1cm4gbmV3IEJpZ051bWJlcihzLCBiYXNlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgYmFzZSB7Yn0gbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgICBpZiAoQmlnTnVtYmVyLkRFQlVHKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ05vdCBhJyArIChiID8gJyBiYXNlICcgKyBiIDogJycpICsgJyBudW1iZXI6ICcgKyBzdHIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIE5hTlxyXG4gICAgICAgICAgeC5jID0geC5lID0geC5zID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSb3VuZCB4IHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLiBDaGVjayBmb3Igb3Zlci91bmRlci1mbG93LlxyXG4gICAgICogSWYgciBpcyB0cnV0aHksIGl0IGlzIGtub3duIHRoYXQgdGhlcmUgYXJlIG1vcmUgZGlnaXRzIGFmdGVyIHRoZSByb3VuZGluZyBkaWdpdC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcm91bmQoeCwgc2QsIHJtLCByKSB7XHJcbiAgICAgIHZhciBkLCBpLCBqLCBrLCBuLCBuaSwgcmQsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgcG93czEwID0gUE9XU19URU47XHJcblxyXG4gICAgICAvLyBpZiB4IGlzIG5vdCBJbmZpbml0eSBvciBOYU4uLi5cclxuICAgICAgaWYgKHhjKSB7XHJcblxyXG4gICAgICAgIC8vIHJkIGlzIHRoZSByb3VuZGluZyBkaWdpdCwgaS5lLiB0aGUgZGlnaXQgYWZ0ZXIgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgLy8gbiBpcyBhIGJhc2UgMWUxNCBudW1iZXIsIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBvZiBhcnJheSB4LmMgY29udGFpbmluZyByZC5cclxuICAgICAgICAvLyBuaSBpcyB0aGUgaW5kZXggb2YgbiB3aXRoaW4geC5jLlxyXG4gICAgICAgIC8vIGQgaXMgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAvLyBpIGlzIHRoZSBpbmRleCBvZiByZCB3aXRoaW4gbiBpbmNsdWRpbmcgbGVhZGluZyB6ZXJvcy5cclxuICAgICAgICAvLyBqIGlzIHRoZSBhY3R1YWwgaW5kZXggb2YgcmQgd2l0aGluIG4gKGlmIDwgMCwgcmQgaXMgYSBsZWFkaW5nIHplcm8pLlxyXG4gICAgICAgIG91dDoge1xyXG5cclxuICAgICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiB4Yy5cclxuICAgICAgICAgIGZvciAoZCA9IDEsIGsgPSB4Y1swXTsgayA+PSAxMDsgayAvPSAxMCwgZCsrKTtcclxuICAgICAgICAgIGkgPSBzZCAtIGQ7XHJcblxyXG4gICAgICAgICAgLy8gSWYgdGhlIHJvdW5kaW5nIGRpZ2l0IGlzIGluIHRoZSBmaXJzdCBlbGVtZW50IG9mIHhjLi4uXHJcbiAgICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgICAgaSArPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgaiA9IHNkO1xyXG4gICAgICAgICAgICBuID0geGNbbmkgPSAwXTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcm91bmRpbmcgZGlnaXQgYXQgaW5kZXggaiBvZiBuLlxyXG4gICAgICAgICAgICByZCA9IG4gLyBwb3dzMTBbZCAtIGogLSAxXSAlIDEwIHwgMDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5pID0gbWF0aGNlaWwoKGkgKyAxKSAvIExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuaSA+PSB4Yy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkZWQgYnkgc3FydC5cclxuICAgICAgICAgICAgICAgIGZvciAoOyB4Yy5sZW5ndGggPD0gbmk7IHhjLnB1c2goMCkpO1xyXG4gICAgICAgICAgICAgICAgbiA9IHJkID0gMDtcclxuICAgICAgICAgICAgICAgIGQgPSAxO1xyXG4gICAgICAgICAgICAgICAgaSAlPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgICAgIGogPSBpIC0gTE9HX0JBU0UgKyAxO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhayBvdXQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIG4gPSBrID0geGNbbmldO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAgICAgICBmb3IgKGQgPSAxOyBrID49IDEwOyBrIC89IDEwLCBkKyspO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHJkIHdpdGhpbiBuLlxyXG4gICAgICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIG4sIGFkanVzdGVkIGZvciBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyBvZiBuIGlzIGdpdmVuIGJ5IExPR19CQVNFIC0gZC5cclxuICAgICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgZDtcclxuXHJcbiAgICAgICAgICAgICAgLy8gR2V0IHRoZSByb3VuZGluZyBkaWdpdCBhdCBpbmRleCBqIG9mIG4uXHJcbiAgICAgICAgICAgICAgcmQgPSBqIDwgMCA/IDAgOiBuIC8gcG93czEwW2QgLSBqIC0gMV0gJSAxMCB8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByID0gciB8fCBzZCA8IDAgfHxcclxuXHJcbiAgICAgICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XHJcbiAgICAgICAgICAvLyBUaGUgZXhwcmVzc2lvbiAgbiAlIHBvd3MxMFtkIC0gaiAtIDFdICByZXR1cm5zIGFsbCBkaWdpdHMgb2YgbiB0byB0aGUgcmlnaHRcclxuICAgICAgICAgIC8vIG9mIHRoZSBkaWdpdCBhdCBqLCBlLmcuIGlmIG4gaXMgOTA4NzE0IGFuZCBqIGlzIDIsIHRoZSBleHByZXNzaW9uIGdpdmVzIDcxNC5cclxuICAgICAgICAgICB4Y1tuaSArIDFdICE9IG51bGwgfHwgKGogPCAwID8gbiA6IG4gJSBwb3dzMTBbZCAtIGogLSAxXSk7XHJcblxyXG4gICAgICAgICAgciA9IHJtIDwgNFxyXG4gICAgICAgICAgID8gKHJkIHx8IHIpICYmIChybSA9PSAwIHx8IHJtID09ICh4LnMgPCAwID8gMyA6IDIpKVxyXG4gICAgICAgICAgIDogcmQgPiA1IHx8IHJkID09IDUgJiYgKHJtID09IDQgfHwgciB8fCBybSA9PSA2ICYmXHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBkaWdpdCB0byB0aGUgbGVmdCBvZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgb2RkLlxyXG4gICAgICAgICAgICAoKGkgPiAwID8gaiA+IDAgPyBuIC8gcG93czEwW2QgLSBqXSA6IDAgOiB4Y1tuaSAtIDFdKSAlIDEwKSAmIDEgfHxcclxuICAgICAgICAgICAgIHJtID09ICh4LnMgPCAwID8gOCA6IDcpKTtcclxuXHJcbiAgICAgICAgICBpZiAoc2QgPCAxIHx8ICF4Y1swXSkge1xyXG4gICAgICAgICAgICB4Yy5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gQ29udmVydCBzZCB0byBkZWNpbWFsIHBsYWNlcy5cclxuICAgICAgICAgICAgICBzZCAtPSB4LmUgKyAxO1xyXG5cclxuICAgICAgICAgICAgICAvLyAxLCAwLjEsIDAuMDEsIDAuMDAxLCAwLjAwMDEgZXRjLlxyXG4gICAgICAgICAgICAgIHhjWzBdID0gcG93czEwWyhMT0dfQkFTRSAtIHNkICUgTE9HX0JBU0UpICUgTE9HX0JBU0VdO1xyXG4gICAgICAgICAgICAgIHguZSA9IC1zZCB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgICAgIHhjWzBdID0geC5lID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGV4Y2VzcyBkaWdpdHMuXHJcbiAgICAgICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pO1xyXG4gICAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgICAgbmktLTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pICsgMTtcclxuICAgICAgICAgICAgayA9IHBvd3MxMFtMT0dfQkFTRSAtIGldO1xyXG5cclxuICAgICAgICAgICAgLy8gRS5nLiA1NjcwMCBiZWNvbWVzIDU2MDAwIGlmIDcgaXMgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgICAgICAvLyBqID4gMCBtZWFucyBpID4gbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2Ygbi5cclxuICAgICAgICAgICAgeGNbbmldID0gaiA+IDAgPyBtYXRoZmxvb3IobiAvIHBvd3MxMFtkIC0gal0gJSBwb3dzMTBbal0pICogayA6IDA7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUm91bmQgdXA/XHJcbiAgICAgICAgICBpZiAocikge1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IDspIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGRpZ2l0IHRvIGJlIHJvdW5kZWQgdXAgaXMgaW4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgeGMuLi5cclxuICAgICAgICAgICAgICBpZiAobmkgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGkgd2lsbCBiZSB0aGUgbGVuZ3RoIG9mIHhjWzBdIGJlZm9yZSBrIGlzIGFkZGVkLlxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMSwgaiA9IHhjWzBdOyBqID49IDEwOyBqIC89IDEwLCBpKyspO1xyXG4gICAgICAgICAgICAgICAgaiA9IHhjWzBdICs9IGs7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAxOyBqID49IDEwOyBqIC89IDEwLCBrKyspO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGkgIT0gayB0aGUgbGVuZ3RoIGhhcyBpbmNyZWFzZWQuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSBrKSB7XHJcbiAgICAgICAgICAgICAgICAgIHguZSsrO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoeGNbMF0gPT0gQkFTRSkgeGNbMF0gPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB4Y1tuaV0gKz0gaztcclxuICAgICAgICAgICAgICAgIGlmICh4Y1tuaV0gIT0gQkFTRSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB4Y1tuaS0tXSA9IDA7XHJcbiAgICAgICAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICBmb3IgKGkgPSB4Yy5sZW5ndGg7IHhjWy0taV0gPT09IDA7IHhjLnBvcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE92ZXJmbG93PyBJbmZpbml0eS5cclxuICAgICAgICBpZiAoeC5lID4gTUFYX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gVW5kZXJmbG93PyBaZXJvLlxyXG4gICAgICAgIH0gZWxzZSBpZiAoeC5lIDwgTUlOX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbHVlT2Yobikge1xyXG4gICAgICB2YXIgc3RyLFxyXG4gICAgICAgIGUgPSBuLmU7XHJcblxyXG4gICAgICBpZiAoZSA9PT0gbnVsbCkgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuXHJcbiAgICAgIHN0ciA9IGUgPD0gVE9fRVhQX05FRyB8fCBlID49IFRPX0VYUF9QT1NcclxuICAgICAgICA/IHRvRXhwb25lbnRpYWwoc3RyLCBlKVxyXG4gICAgICAgIDogdG9GaXhlZFBvaW50KHN0ciwgZSwgJzAnKTtcclxuXHJcbiAgICAgIHJldHVybiBuLnMgPCAwID8gJy0nICsgc3RyIDogc3RyO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBQUk9UT1RZUEUvSU5TVEFOQ0UgTUVUSE9EU1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIuXHJcbiAgICAgKi9cclxuICAgIFAuYWJzb2x1dGVWYWx1ZSA9IFAuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgeCA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XHJcbiAgICAgIGlmICh4LnMgPCAwKSB4LnMgPSAxO1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm5cclxuICAgICAqICAgMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICAgKiAgIC0xIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcclxuICAgICAqICAgMCBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUsXHJcbiAgICAgKiAgIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIGVpdGhlciBpcyBOYU4uXHJcbiAgICAgKi9cclxuICAgIFAuY29tcGFyZWRUbyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIElmIGRwIGlzIHVuZGVmaW5lZCBvciBudWxsIG9yIHRydWUgb3IgZmFsc2UsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9mIHRoZVxyXG4gICAgICogdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICpcclxuICAgICAqIE90aGVyd2lzZSwgaWYgZHAgaXMgYSBudW1iZXIsIHJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXNcclxuICAgICAqIEJpZ051bWJlciByb3VuZGVkIHRvIGEgbWF4aW11bSBvZiBkcCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAgICogUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXM6IGludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfHJtfSdcclxuICAgICAqL1xyXG4gICAgUC5kZWNpbWFsUGxhY2VzID0gUC5kcCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgdmFyIGMsIG4sIHYsXHJcbiAgICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICAgIGlmIChybSA9PSBudWxsKSBybSA9IFJPVU5ESU5HX01PREU7XHJcbiAgICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3VuZChuZXcgQmlnTnVtYmVyKHgpLCBkcCArIHguZSArIDEsIHJtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCEoYyA9IHguYykpIHJldHVybiBudWxsO1xyXG4gICAgICBuID0gKCh2ID0gYy5sZW5ndGggLSAxKSAtIGJpdEZsb29yKHRoaXMuZSAvIExPR19CQVNFKSkgKiBMT0dfQkFTRTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3QgbnVtYmVyLlxyXG4gICAgICBpZiAodiA9IGNbdl0pIGZvciAoOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tKTtcclxuICAgICAgaWYgKG4gPCAwKSBuID0gMDtcclxuXHJcbiAgICAgIHJldHVybiBuO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuIC8gMCA9IElcclxuICAgICAqICBuIC8gTiA9IE5cclxuICAgICAqICBuIC8gSSA9IDBcclxuICAgICAqICAwIC8gbiA9IDBcclxuICAgICAqICAwIC8gMCA9IE5cclxuICAgICAqICAwIC8gTiA9IE5cclxuICAgICAqICAwIC8gSSA9IDBcclxuICAgICAqICBOIC8gbiA9IE5cclxuICAgICAqICBOIC8gMCA9IE5cclxuICAgICAqICBOIC8gTiA9IE5cclxuICAgICAqICBOIC8gSSA9IE5cclxuICAgICAqICBJIC8gbiA9IElcclxuICAgICAqICBJIC8gMCA9IElcclxuICAgICAqICBJIC8gTiA9IE5cclxuICAgICAqICBJIC8gSSA9IE5cclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBkaXZpZGVkIGJ5IHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLCByb3VuZGVkIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmQgUk9VTkRJTkdfTU9ERS5cclxuICAgICAqL1xyXG4gICAgUC5kaXZpZGVkQnkgPSBQLmRpdiA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBkaXYodGhpcywgbmV3IEJpZ051bWJlcih5LCBiKSwgREVDSU1BTF9QTEFDRVMsIFJPVU5ESU5HX01PREUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIGludGVnZXIgcGFydCBvZiBkaXZpZGluZyB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAgICogQmlnTnVtYmVyIGJ5IHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYikuXHJcbiAgICAgKi9cclxuICAgIFAuZGl2aWRlZFRvSW50ZWdlckJ5ID0gUC5pZGl2ID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgICAgcmV0dXJuIGRpdih0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpLCAwLCAxKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGV4cG9uZW50aWF0ZWQgYnkgbi5cclxuICAgICAqXHJcbiAgICAgKiBJZiBtIGlzIHByZXNlbnQsIHJldHVybiB0aGUgcmVzdWx0IG1vZHVsbyBtLlxyXG4gICAgICogSWYgbiBpcyBuZWdhdGl2ZSByb3VuZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKiBJZiBQT1dfUFJFQ0lTSU9OIGlzIG5vbi16ZXJvIGFuZCBtIGlzIG5vdCBwcmVzZW50LCByb3VuZCB0byBQT1dfUFJFQ0lTSU9OIHVzaW5nIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIG1vZHVsYXIgcG93ZXIgb3BlcmF0aW9uIHdvcmtzIGVmZmljaWVudGx5IHdoZW4geCwgbiwgYW5kIG0gYXJlIGludGVnZXJzLCBvdGhlcndpc2UgaXRcclxuICAgICAqIGlzIGVxdWl2YWxlbnQgdG8gY2FsY3VsYXRpbmcgeC5leHBvbmVudGlhdGVkQnkobikubW9kdWxvKG0pIHdpdGggYSBQT1dfUFJFQ0lTSU9OIG9mIDAuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBleHBvbmVudC4gQW4gaW50ZWdlci5cclxuICAgICAqIFttXSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBtb2R1bHVzLlxyXG4gICAgICpcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBFeHBvbmVudCBub3QgYW4gaW50ZWdlcjoge259J1xyXG4gICAgICovXHJcbiAgICBQLmV4cG9uZW50aWF0ZWRCeSA9IFAucG93ID0gZnVuY3Rpb24gKG4sIG0pIHtcclxuICAgICAgdmFyIGhhbGYsIGlzTW9kRXhwLCBpLCBrLCBtb3JlLCBuSXNCaWcsIG5Jc05lZywgbklzT2RkLCB5LFxyXG4gICAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobik7XHJcblxyXG4gICAgICAvLyBBbGxvdyBOYU4gYW5kIMKxSW5maW5pdHksIGJ1dCBub3Qgb3RoZXIgbm9uLWludGVnZXJzLlxyXG4gICAgICBpZiAobi5jICYmICFuLmlzSW50ZWdlcigpKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdFeHBvbmVudCBub3QgYW4gaW50ZWdlcjogJyArIHZhbHVlT2YobikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobSAhPSBudWxsKSBtID0gbmV3IEJpZ051bWJlcihtKTtcclxuXHJcbiAgICAgIC8vIEV4cG9uZW50IG9mIE1BWF9TQUZFX0lOVEVHRVIgaXMgMTUuXHJcbiAgICAgIG5Jc0JpZyA9IG4uZSA+IDE0O1xyXG5cclxuICAgICAgLy8gSWYgeCBpcyBOYU4sIMKxSW5maW5pdHksIMKxMCBvciDCsTEsIG9yIG4gaXMgwrFJbmZpbml0eSwgTmFOIG9yIMKxMC5cclxuICAgICAgaWYgKCF4LmMgfHwgIXguY1swXSB8fCB4LmNbMF0gPT0gMSAmJiAheC5lICYmIHguYy5sZW5ndGggPT0gMSB8fCAhbi5jIHx8ICFuLmNbMF0pIHtcclxuXHJcbiAgICAgICAgLy8gVGhlIHNpZ24gb2YgdGhlIHJlc3VsdCBvZiBwb3cgd2hlbiB4IGlzIG5lZ2F0aXZlIGRlcGVuZHMgb24gdGhlIGV2ZW5uZXNzIG9mIG4uXHJcbiAgICAgICAgLy8gSWYgK24gb3ZlcmZsb3dzIHRvIMKxSW5maW5pdHksIHRoZSBldmVubmVzcyBvZiBuIHdvdWxkIGJlIG5vdCBiZSBrbm93bi5cclxuICAgICAgICB5ID0gbmV3IEJpZ051bWJlcihNYXRoLnBvdygrdmFsdWVPZih4KSwgbklzQmlnID8gMiAtIGlzT2RkKG4pIDogK3ZhbHVlT2YobikpKTtcclxuICAgICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogeTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbklzTmVnID0gbi5zIDwgMDtcclxuXHJcbiAgICAgIGlmIChtKSB7XHJcblxyXG4gICAgICAgIC8vIHggJSBtIHJldHVybnMgTmFOIGlmIGFicyhtKSBpcyB6ZXJvLCBvciBtIGlzIE5hTi5cclxuICAgICAgICBpZiAobS5jID8gIW0uY1swXSA6ICFtLnMpIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgICAgIGlzTW9kRXhwID0gIW5Jc05lZyAmJiB4LmlzSW50ZWdlcigpICYmIG0uaXNJbnRlZ2VyKCk7XHJcblxyXG4gICAgICAgIGlmIChpc01vZEV4cCkgeCA9IHgubW9kKG0pO1xyXG5cclxuICAgICAgLy8gT3ZlcmZsb3cgdG8gwrFJbmZpbml0eTogPj0yKioxZTEwIG9yID49MS4wMDAwMDI0KioxZTE1LlxyXG4gICAgICAvLyBVbmRlcmZsb3cgdG8gwrEwOiA8PTAuNzkqKjFlMTAgb3IgPD0wLjk5OTk5NzUqKjFlMTUuXHJcbiAgICAgIH0gZWxzZSBpZiAobi5lID4gOSAmJiAoeC5lID4gMCB8fCB4LmUgPCAtMSB8fCAoeC5lID09IDBcclxuICAgICAgICAvLyBbMSwgMjQwMDAwMDAwXVxyXG4gICAgICAgID8geC5jWzBdID4gMSB8fCBuSXNCaWcgJiYgeC5jWzFdID49IDI0ZTdcclxuICAgICAgICAvLyBbODAwMDAwMDAwMDAwMDBdICBbOTk5OTk3NTAwMDAwMDBdXHJcbiAgICAgICAgOiB4LmNbMF0gPCA4ZTEzIHx8IG5Jc0JpZyAmJiB4LmNbMF0gPD0gOTk5OTk3NWU3KSkpIHtcclxuXHJcbiAgICAgICAgLy8gSWYgeCBpcyBuZWdhdGl2ZSBhbmQgbiBpcyBvZGQsIGsgPSAtMCwgZWxzZSBrID0gMC5cclxuICAgICAgICBrID0geC5zIDwgMCAmJiBpc09kZChuKSA/IC0wIDogMDtcclxuXHJcbiAgICAgICAgLy8gSWYgeCA+PSAxLCBrID0gwrFJbmZpbml0eS5cclxuICAgICAgICBpZiAoeC5lID4gLTEpIGsgPSAxIC8gaztcclxuXHJcbiAgICAgICAgLy8gSWYgbiBpcyBuZWdhdGl2ZSByZXR1cm4gwrEwLCBlbHNlIHJldHVybiDCsUluZmluaXR5LlxyXG4gICAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKG5Jc05lZyA/IDEgLyBrIDogayk7XHJcblxyXG4gICAgICB9IGVsc2UgaWYgKFBPV19QUkVDSVNJT04pIHtcclxuXHJcbiAgICAgICAgLy8gVHJ1bmNhdGluZyBlYWNoIGNvZWZmaWNpZW50IGFycmF5IHRvIGEgbGVuZ3RoIG9mIGsgYWZ0ZXIgZWFjaCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIC8vIGVxdWF0ZXMgdG8gdHJ1bmNhdGluZyBzaWduaWZpY2FudCBkaWdpdHMgdG8gUE9XX1BSRUNJU0lPTiArIFsyOCwgNDFdLFxyXG4gICAgICAgIC8vIGkuZS4gdGhlcmUgd2lsbCBiZSBhIG1pbmltdW0gb2YgMjggZ3VhcmQgZGlnaXRzIHJldGFpbmVkLlxyXG4gICAgICAgIGsgPSBtYXRoY2VpbChQT1dfUFJFQ0lTSU9OIC8gTE9HX0JBU0UgKyAyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5Jc0JpZykge1xyXG4gICAgICAgIGhhbGYgPSBuZXcgQmlnTnVtYmVyKDAuNSk7XHJcbiAgICAgICAgaWYgKG5Jc05lZykgbi5zID0gMTtcclxuICAgICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpID0gTWF0aC5hYnMoK3ZhbHVlT2YobikpO1xyXG4gICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB5ID0gbmV3IEJpZ051bWJlcihPTkUpO1xyXG5cclxuICAgICAgLy8gUGVyZm9ybXMgNTQgbG9vcCBpdGVyYXRpb25zIGZvciBuIG9mIDkwMDcxOTkyNTQ3NDA5OTEuXHJcbiAgICAgIGZvciAoOyA7KSB7XHJcblxyXG4gICAgICAgIGlmIChuSXNPZGQpIHtcclxuICAgICAgICAgIHkgPSB5LnRpbWVzKHgpO1xyXG4gICAgICAgICAgaWYgKCF5LmMpIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGlmIChrKSB7XHJcbiAgICAgICAgICAgIGlmICh5LmMubGVuZ3RoID4gaykgeS5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9kRXhwKSB7XHJcbiAgICAgICAgICAgIHkgPSB5Lm1vZChtKTsgICAgLy95ID0geS5taW51cyhkaXYoeSwgbSwgMCwgTU9EVUxPX01PREUpLnRpbWVzKG0pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICBpID0gbWF0aGZsb29yKGkgLyAyKTtcclxuICAgICAgICAgIGlmIChpID09PSAwKSBicmVhaztcclxuICAgICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuID0gbi50aW1lcyhoYWxmKTtcclxuICAgICAgICAgIHJvdW5kKG4sIG4uZSArIDEsIDEpO1xyXG5cclxuICAgICAgICAgIGlmIChuLmUgPiAxNCkge1xyXG4gICAgICAgICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGkgPSArdmFsdWVPZihuKTtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICBuSXNPZGQgPSBpICUgMjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHggPSB4LnRpbWVzKHgpO1xyXG5cclxuICAgICAgICBpZiAoaykge1xyXG4gICAgICAgICAgaWYgKHguYyAmJiB4LmMubGVuZ3RoID4gaykgeC5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc01vZEV4cCkge1xyXG4gICAgICAgICAgeCA9IHgubW9kKG0pOyAgICAvL3ggPSB4Lm1pbnVzKGRpdih4LCBtLCAwLCBNT0RVTE9fTU9ERSkudGltZXMobSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzTW9kRXhwKSByZXR1cm4geTtcclxuICAgICAgaWYgKG5Jc05lZykgeSA9IE9ORS5kaXYoeSk7XHJcblxyXG4gICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogayA/IHJvdW5kKHksIFBPV19QUkVDSVNJT04sIFJPVU5ESU5HX01PREUsIG1vcmUpIDogeTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIGFuIGludGVnZXJcclxuICAgICAqIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIFJPVU5ESU5HX01PREUgaWYgcm0gaXMgb21pdHRlZC5cclxuICAgICAqXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtybX0nXHJcbiAgICAgKi9cclxuICAgIFAuaW50ZWdlclZhbHVlID0gZnVuY3Rpb24gKHJtKSB7XHJcbiAgICAgIHZhciBuID0gbmV3IEJpZ051bWJlcih0aGlzKTtcclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcbiAgICAgIHJldHVybiByb3VuZChuLCBuLmUgKyAxLCBybSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzRXF1YWxUbyA9IFAuZXEgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZSh0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpKSA9PT0gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgYSBmaW5pdGUgbnVtYmVyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzRmluaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gISF0aGlzLmM7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyKHksIGIpLFxyXG4gICAgICogb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5pc0dyZWF0ZXJUaGFuID0gUC5ndCA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpID4gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzR3JlYXRlclRoYW5PckVxdWFsVG8gPSBQLmd0ZSA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiAoYiA9IGNvbXBhcmUodGhpcywgbmV3IEJpZ051bWJlcih5LCBiKSkpID09PSAxIHx8IGIgPT09IDA7XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBhbiBpbnRlZ2VyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzSW50ZWdlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICEhdGhpcy5jICYmIGJpdEZsb29yKHRoaXMuZSAvIExPR19CQVNFKSA+IHRoaXMuYy5sZW5ndGggLSAyO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcclxuICAgICAqIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuaXNMZXNzVGhhbiA9IFAubHQgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZSh0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpKSA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5pc0xlc3NUaGFuT3JFcXVhbFRvID0gUC5sdGUgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gKGIgPSBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpKSA9PT0gLTEgfHwgYiA9PT0gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgTmFOLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzTmFOID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gIXRoaXMucztcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbmVnYXRpdmUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucyA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIHBvc2l0aXZlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnMgPiAwO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyAwIG9yIC0wLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICEhdGhpcy5jICYmIHRoaXMuY1swXSA9PSAwO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuIC0gMCA9IG5cclxuICAgICAqICBuIC0gTiA9IE5cclxuICAgICAqICBuIC0gSSA9IC1JXHJcbiAgICAgKiAgMCAtIG4gPSAtblxyXG4gICAgICogIDAgLSAwID0gMFxyXG4gICAgICogIDAgLSBOID0gTlxyXG4gICAgICogIDAgLSBJID0gLUlcclxuICAgICAqICBOIC0gbiA9IE5cclxuICAgICAqICBOIC0gMCA9IE5cclxuICAgICAqICBOIC0gTiA9IE5cclxuICAgICAqICBOIC0gSSA9IE5cclxuICAgICAqICBJIC0gbiA9IElcclxuICAgICAqICBJIC0gMCA9IElcclxuICAgICAqICBJIC0gTiA9IE5cclxuICAgICAqICBJIC0gSSA9IE5cclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBtaW51cyB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKS5cclxuICAgICAqL1xyXG4gICAgUC5taW51cyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBpLCBqLCB0LCB4TFR5LFxyXG4gICAgICAgIHggPSB0aGlzLFxyXG4gICAgICAgIGEgPSB4LnM7XHJcblxyXG4gICAgICB5ID0gbmV3IEJpZ051bWJlcih5LCBiKTtcclxuICAgICAgYiA9IHkucztcclxuXHJcbiAgICAgIC8vIEVpdGhlciBOYU4/XHJcbiAgICAgIGlmICghYSB8fCAhYikgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgICAgaWYgKGEgIT0gYikge1xyXG4gICAgICAgIHkucyA9IC1iO1xyXG4gICAgICAgIHJldHVybiB4LnBsdXMoeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxyXG4gICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgSW5maW5pdHk/XHJcbiAgICAgICAgaWYgKCF4YyB8fCAheWMpIHJldHVybiB4YyA/ICh5LnMgPSAtYiwgeSkgOiBuZXcgQmlnTnVtYmVyKHljID8geCA6IE5hTik7XHJcblxyXG4gICAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICAgIGlmICgheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgICAgLy8gUmV0dXJuIHkgaWYgeSBpcyBub24temVybywgeCBpZiB4IGlzIG5vbi16ZXJvLCBvciB6ZXJvIGlmIGJvdGggYXJlIHplcm8uXHJcbiAgICAgICAgICByZXR1cm4geWNbMF0gPyAoeS5zID0gLWIsIHkpIDogbmV3IEJpZ051bWJlcih4Y1swXSA/IHggOlxyXG5cclxuICAgICAgICAgICAvLyBJRUVFIDc1NCAoMjAwOCkgNi4zOiBuIC0gbiA9IC0wIHdoZW4gcm91bmRpbmcgdG8gLUluZmluaXR5XHJcbiAgICAgICAgICAgUk9VTkRJTkdfTU9ERSA9PSAzID8gLTAgOiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHhlID0gYml0Rmxvb3IoeGUpO1xyXG4gICAgICB5ZSA9IGJpdEZsb29yKHllKTtcclxuICAgICAgeGMgPSB4Yy5zbGljZSgpO1xyXG5cclxuICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGlzIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG4gICAgICBpZiAoYSA9IHhlIC0geWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHhMVHkgPSBhIDwgMCkge1xyXG4gICAgICAgICAgYSA9IC1hO1xyXG4gICAgICAgICAgdCA9IHhjO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdC5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLlxyXG4gICAgICAgIGZvciAoYiA9IGE7IGItLTsgdC5wdXNoKDApKTtcclxuICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRzIGVxdWFsLiBDaGVjayBkaWdpdCBieSBkaWdpdC5cclxuICAgICAgICBqID0gKHhMVHkgPSAoYSA9IHhjLmxlbmd0aCkgPCAoYiA9IHljLmxlbmd0aCkpID8gYSA6IGI7XHJcblxyXG4gICAgICAgIGZvciAoYSA9IGIgPSAwOyBiIDwgajsgYisrKSB7XHJcblxyXG4gICAgICAgICAgaWYgKHhjW2JdICE9IHljW2JdKSB7XHJcbiAgICAgICAgICAgIHhMVHkgPSB4Y1tiXSA8IHljW2JdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHggPCB5PyBQb2ludCB4YyB0byB0aGUgYXJyYXkgb2YgdGhlIGJpZ2dlciBudW1iZXIuXHJcbiAgICAgIGlmICh4TFR5KSB0ID0geGMsIHhjID0geWMsIHljID0gdCwgeS5zID0gLXkucztcclxuXHJcbiAgICAgIGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCk7XHJcblxyXG4gICAgICAvLyBBcHBlbmQgemVyb3MgdG8geGMgaWYgc2hvcnRlci5cclxuICAgICAgLy8gTm8gbmVlZCB0byBhZGQgemVyb3MgdG8geWMgaWYgc2hvcnRlciBhcyBzdWJ0cmFjdCBvbmx5IG5lZWRzIHRvIHN0YXJ0IGF0IHljLmxlbmd0aC5cclxuICAgICAgaWYgKGIgPiAwKSBmb3IgKDsgYi0tOyB4Y1tpKytdID0gMCk7XHJcbiAgICAgIGIgPSBCQVNFIC0gMTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuXHJcbiAgICAgIGZvciAoOyBqID4gYTspIHtcclxuXHJcbiAgICAgICAgaWYgKHhjWy0tal0gPCB5Y1tqXSkge1xyXG4gICAgICAgICAgZm9yIChpID0gajsgaSAmJiAheGNbLS1pXTsgeGNbaV0gPSBiKTtcclxuICAgICAgICAgIC0teGNbaV07XHJcbiAgICAgICAgICB4Y1tqXSArPSBCQVNFO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeGNbal0gLT0geWNbal07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuXHJcbiAgICAgIGZvciAoOyB4Y1swXSA9PSAwOyB4Yy5zcGxpY2UoMCwgMSksIC0teWUpO1xyXG5cclxuICAgICAgLy8gWmVybz9cclxuICAgICAgaWYgKCF4Y1swXSkge1xyXG5cclxuICAgICAgICAvLyBGb2xsb3dpbmcgSUVFRSA3NTQgKDIwMDgpIDYuMyxcclxuICAgICAgICAvLyBuIC0gbiA9ICswICBidXQgIG4gLSBuID0gLTAgIHdoZW4gcm91bmRpbmcgdG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgICAgeS5zID0gUk9VTkRJTkdfTU9ERSA9PSAzID8gLTEgOiAxO1xyXG4gICAgICAgIHkuYyA9IFt5LmUgPSAwXTtcclxuICAgICAgICByZXR1cm4geTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgSW5maW5pdHkgYXMgK3ggLSAreSAhPSBJbmZpbml0eSAmJiAteCAtIC15ICE9IEluZmluaXR5XHJcbiAgICAgIC8vIGZvciBmaW5pdGUgeCBhbmQgeS5cclxuICAgICAgcmV0dXJuIG5vcm1hbGlzZSh5LCB4YywgeWUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICAgbiAlIDAgPSAgTlxyXG4gICAgICogICBuICUgTiA9ICBOXHJcbiAgICAgKiAgIG4gJSBJID0gIG5cclxuICAgICAqICAgMCAlIG4gPSAgMFxyXG4gICAgICogIC0wICUgbiA9IC0wXHJcbiAgICAgKiAgIDAgJSAwID0gIE5cclxuICAgICAqICAgMCAlIE4gPSAgTlxyXG4gICAgICogICAwICUgSSA9ICAwXHJcbiAgICAgKiAgIE4gJSBuID0gIE5cclxuICAgICAqICAgTiAlIDAgPSAgTlxyXG4gICAgICogICBOICUgTiA9ICBOXHJcbiAgICAgKiAgIE4gJSBJID0gIE5cclxuICAgICAqICAgSSAlIG4gPSAgTlxyXG4gICAgICogICBJICUgMCA9ICBOXHJcbiAgICAgKiAgIEkgJSBOID0gIE5cclxuICAgICAqICAgSSAlIEkgPSAgTlxyXG4gICAgICpcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG1vZHVsbyB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKS4gVGhlIHJlc3VsdCBkZXBlbmRzIG9uIHRoZSB2YWx1ZSBvZiBNT0RVTE9fTU9ERS5cclxuICAgICAqL1xyXG4gICAgUC5tb2R1bG8gPSBQLm1vZCA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBxLCBzLFxyXG4gICAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoeSwgYik7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gTmFOIGlmIHggaXMgSW5maW5pdHkgb3IgTmFOLCBvciB5IGlzIE5hTiBvciB6ZXJvLlxyXG4gICAgICBpZiAoIXguYyB8fCAheS5zIHx8IHkuYyAmJiAheS5jWzBdKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIC8vIFJldHVybiB4IGlmIHkgaXMgSW5maW5pdHkgb3IgeCBpcyB6ZXJvLlxyXG4gICAgICB9IGVsc2UgaWYgKCF5LmMgfHwgeC5jICYmICF4LmNbMF0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcih4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKE1PRFVMT19NT0RFID09IDkpIHtcclxuXHJcbiAgICAgICAgLy8gRXVjbGlkaWFuIGRpdmlzaW9uOiBxID0gc2lnbih5KSAqIGZsb29yKHggLyBhYnMoeSkpXHJcbiAgICAgICAgLy8gciA9IHggLSBxeSAgICB3aGVyZSAgMCA8PSByIDwgYWJzKHkpXHJcbiAgICAgICAgcyA9IHkucztcclxuICAgICAgICB5LnMgPSAxO1xyXG4gICAgICAgIHEgPSBkaXYoeCwgeSwgMCwgMyk7XHJcbiAgICAgICAgeS5zID0gcztcclxuICAgICAgICBxLnMgKj0gcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBxID0gZGl2KHgsIHksIDAsIE1PRFVMT19NT0RFKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgeSA9IHgubWludXMocS50aW1lcyh5KSk7XHJcblxyXG4gICAgICAvLyBUbyBtYXRjaCBKYXZhU2NyaXB0ICUsIGVuc3VyZSBzaWduIG9mIHplcm8gaXMgc2lnbiBvZiBkaXZpZGVuZC5cclxuICAgICAgaWYgKCF5LmNbMF0gJiYgTU9EVUxPX01PREUgPT0gMSkgeS5zID0geC5zO1xyXG5cclxuICAgICAgcmV0dXJuIHk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogIG4gKiAwID0gMFxyXG4gICAgICogIG4gKiBOID0gTlxyXG4gICAgICogIG4gKiBJID0gSVxyXG4gICAgICogIDAgKiBuID0gMFxyXG4gICAgICogIDAgKiAwID0gMFxyXG4gICAgICogIDAgKiBOID0gTlxyXG4gICAgICogIDAgKiBJID0gTlxyXG4gICAgICogIE4gKiBuID0gTlxyXG4gICAgICogIE4gKiAwID0gTlxyXG4gICAgICogIE4gKiBOID0gTlxyXG4gICAgICogIE4gKiBJID0gTlxyXG4gICAgICogIEkgKiBuID0gSVxyXG4gICAgICogIEkgKiAwID0gTlxyXG4gICAgICogIEkgKiBOID0gTlxyXG4gICAgICogIEkgKiBJID0gSVxyXG4gICAgICpcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG11bHRpcGxpZWQgYnkgdGhlIHZhbHVlXHJcbiAgICAgKiBvZiBCaWdOdW1iZXIoeSwgYikuXHJcbiAgICAgKi9cclxuICAgIFAubXVsdGlwbGllZEJ5ID0gUC50aW1lcyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBjLCBlLCBpLCBqLCBrLCBtLCB4Y0wsIHhsbywgeGhpLCB5Y0wsIHlsbywgeWhpLCB6YyxcclxuICAgICAgICBiYXNlLCBzcXJ0QmFzZSxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICB5YyA9ICh5ID0gbmV3IEJpZ051bWJlcih5LCBiKSkuYztcclxuXHJcbiAgICAgIC8vIEVpdGhlciBOYU4sIMKxSW5maW5pdHkgb3IgwrEwP1xyXG4gICAgICBpZiAoIXhjIHx8ICF5YyB8fCAheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBOYU4gaWYgZWl0aGVyIGlzIE5hTiwgb3Igb25lIGlzIDAgYW5kIHRoZSBvdGhlciBpcyBJbmZpbml0eS5cclxuICAgICAgICBpZiAoIXgucyB8fCAheS5zIHx8IHhjICYmICF4Y1swXSAmJiAheWMgfHwgeWMgJiYgIXljWzBdICYmICF4Yykge1xyXG4gICAgICAgICAgeS5jID0geS5lID0geS5zID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeS5zICo9IHgucztcclxuXHJcbiAgICAgICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgaXMgwrFJbmZpbml0eS5cclxuICAgICAgICAgIGlmICgheGMgfHwgIXljKSB7XHJcbiAgICAgICAgICAgIHkuYyA9IHkuZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgLy8gUmV0dXJuIMKxMCBpZiBlaXRoZXIgaXMgwrEwLlxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeS5jID0gWzBdO1xyXG4gICAgICAgICAgICB5LmUgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGUgPSBiaXRGbG9vcih4LmUgLyBMT0dfQkFTRSkgKyBiaXRGbG9vcih5LmUgLyBMT0dfQkFTRSk7XHJcbiAgICAgIHkucyAqPSB4LnM7XHJcbiAgICAgIHhjTCA9IHhjLmxlbmd0aDtcclxuICAgICAgeWNMID0geWMubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gRW5zdXJlIHhjIHBvaW50cyB0byBsb25nZXIgYXJyYXkgYW5kIHhjTCB0byBpdHMgbGVuZ3RoLlxyXG4gICAgICBpZiAoeGNMIDwgeWNMKSB6YyA9IHhjLCB4YyA9IHljLCB5YyA9IHpjLCBpID0geGNMLCB4Y0wgPSB5Y0wsIHljTCA9IGk7XHJcblxyXG4gICAgICAvLyBJbml0aWFsaXNlIHRoZSByZXN1bHQgYXJyYXkgd2l0aCB6ZXJvcy5cclxuICAgICAgZm9yIChpID0geGNMICsgeWNMLCB6YyA9IFtdOyBpLS07IHpjLnB1c2goMCkpO1xyXG5cclxuICAgICAgYmFzZSA9IEJBU0U7XHJcbiAgICAgIHNxcnRCYXNlID0gU1FSVF9CQVNFO1xyXG5cclxuICAgICAgZm9yIChpID0geWNMOyAtLWkgPj0gMDspIHtcclxuICAgICAgICBjID0gMDtcclxuICAgICAgICB5bG8gPSB5Y1tpXSAlIHNxcnRCYXNlO1xyXG4gICAgICAgIHloaSA9IHljW2ldIC8gc3FydEJhc2UgfCAwO1xyXG5cclxuICAgICAgICBmb3IgKGsgPSB4Y0wsIGogPSBpICsgazsgaiA+IGk7KSB7XHJcbiAgICAgICAgICB4bG8gPSB4Y1stLWtdICUgc3FydEJhc2U7XHJcbiAgICAgICAgICB4aGkgPSB4Y1trXSAvIHNxcnRCYXNlIHwgMDtcclxuICAgICAgICAgIG0gPSB5aGkgKiB4bG8gKyB4aGkgKiB5bG87XHJcbiAgICAgICAgICB4bG8gPSB5bG8gKiB4bG8gKyAoKG0gJSBzcXJ0QmFzZSkgKiBzcXJ0QmFzZSkgKyB6Y1tqXSArIGM7XHJcbiAgICAgICAgICBjID0gKHhsbyAvIGJhc2UgfCAwKSArIChtIC8gc3FydEJhc2UgfCAwKSArIHloaSAqIHhoaTtcclxuICAgICAgICAgIHpjW2otLV0gPSB4bG8gJSBiYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgemNbal0gPSBjO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYykge1xyXG4gICAgICAgICsrZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB6Yy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBub3JtYWxpc2UoeSwgemMsIGUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG5lZ2F0ZWQsXHJcbiAgICAgKiBpLmUuIG11bHRpcGxpZWQgYnkgLTEuXHJcbiAgICAgKi9cclxuICAgIFAubmVnYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHggPSBuZXcgQmlnTnVtYmVyKHRoaXMpO1xyXG4gICAgICB4LnMgPSAteC5zIHx8IG51bGw7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuICsgMCA9IG5cclxuICAgICAqICBuICsgTiA9IE5cclxuICAgICAqICBuICsgSSA9IElcclxuICAgICAqICAwICsgbiA9IG5cclxuICAgICAqICAwICsgMCA9IDBcclxuICAgICAqICAwICsgTiA9IE5cclxuICAgICAqICAwICsgSSA9IElcclxuICAgICAqICBOICsgbiA9IE5cclxuICAgICAqICBOICsgMCA9IE5cclxuICAgICAqICBOICsgTiA9IE5cclxuICAgICAqICBOICsgSSA9IE5cclxuICAgICAqICBJICsgbiA9IElcclxuICAgICAqICBJICsgMCA9IElcclxuICAgICAqICBJICsgTiA9IE5cclxuICAgICAqICBJICsgSSA9IElcclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBwbHVzIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLlxyXG4gICAgICovXHJcbiAgICBQLnBsdXMgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICB2YXIgdCxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICBhID0geC5zO1xyXG5cclxuICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoeSwgYik7XHJcbiAgICAgIGIgPSB5LnM7XHJcblxyXG4gICAgICAvLyBFaXRoZXIgTmFOP1xyXG4gICAgICBpZiAoIWEgfHwgIWIpIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICAgICBpZiAoYSAhPSBiKSB7XHJcbiAgICAgICAgeS5zID0gLWI7XHJcbiAgICAgICAgcmV0dXJuIHgubWludXMoeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxyXG4gICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgwrFJbmZpbml0eS5cclxuICAgICAgICBpZiAoIXhjIHx8ICF5YykgcmV0dXJuIG5ldyBCaWdOdW1iZXIoYSAvIDApO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgemVybz9cclxuICAgICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLCB4IGlmIHggaXMgbm9uLXplcm8sIG9yIHplcm8gaWYgYm90aCBhcmUgemVyby5cclxuICAgICAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgcmV0dXJuIHljWzBdID8geSA6IG5ldyBCaWdOdW1iZXIoeGNbMF0gPyB4IDogYSAqIDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB4ZSA9IGJpdEZsb29yKHhlKTtcclxuICAgICAgeWUgPSBiaXRGbG9vcih5ZSk7XHJcbiAgICAgIHhjID0geGMuc2xpY2UoKTtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLiBGYXN0ZXIgdG8gdXNlIHJldmVyc2UgdGhlbiBkbyB1bnNoaWZ0cy5cclxuICAgICAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcbiAgICAgICAgaWYgKGEgPiAwKSB7XHJcbiAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgICB0ID0geGM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgICBmb3IgKDsgYS0tOyB0LnB1c2goMCkpO1xyXG4gICAgICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhID0geGMubGVuZ3RoO1xyXG4gICAgICBiID0geWMubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gUG9pbnQgeGMgdG8gdGhlIGxvbmdlciBhcnJheSwgYW5kIGIgdG8gdGhlIHNob3J0ZXIgbGVuZ3RoLlxyXG4gICAgICBpZiAoYSAtIGIgPCAwKSB0ID0geWMsIHljID0geGMsIHhjID0gdCwgYiA9IGE7XHJcblxyXG4gICAgICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5Yy5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4YyBjYW4gYmUgaWdub3JlZC5cclxuICAgICAgZm9yIChhID0gMDsgYjspIHtcclxuICAgICAgICBhID0gKHhjWy0tYl0gPSB4Y1tiXSArIHljW2JdICsgYSkgLyBCQVNFIHwgMDtcclxuICAgICAgICB4Y1tiXSA9IEJBU0UgPT09IHhjW2JdID8gMCA6IHhjW2JdICUgQkFTRTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGEpIHtcclxuICAgICAgICB4YyA9IFthXS5jb25jYXQoeGMpO1xyXG4gICAgICAgICsreWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgZm9yIHplcm8sIGFzICt4ICsgK3kgIT0gMCAmJiAteCArIC15ICE9IDBcclxuICAgICAgLy8geWUgPSBNQVhfRVhQICsgMSBwb3NzaWJsZVxyXG4gICAgICByZXR1cm4gbm9ybWFsaXNlKHksIHhjLCB5ZSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogSWYgc2QgaXMgdW5kZWZpbmVkIG9yIG51bGwgb3IgdHJ1ZSBvciBmYWxzZSwgcmV0dXJuIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzIG9mXHJcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICogSWYgc2QgaXMgdHJ1ZSBpbmNsdWRlIGludGVnZXItcGFydCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgY291bnQuXHJcbiAgICAgKlxyXG4gICAgICogT3RoZXJ3aXNlLCBpZiBzZCBpcyBhIG51bWJlciwgcmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAgICogQmlnTnVtYmVyIHJvdW5kZWQgdG8gYSBtYXhpbXVtIG9mIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAgICogUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAgICpcclxuICAgICAqIHNkIHtudW1iZXJ8Ym9vbGVhbn0gbnVtYmVyOiBzaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDEgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbjogd2hldGhlciB0byBjb3VudCBpbnRlZ2VyLXBhcnQgdHJhaWxpbmcgemVyb3M6IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtzZHxybX0nXHJcbiAgICAgKi9cclxuICAgIFAucHJlY2lzaW9uID0gUC5zZCA9IGZ1bmN0aW9uIChzZCwgcm0pIHtcclxuICAgICAgdmFyIGMsIG4sIHYsXHJcbiAgICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2QgIT0gbnVsbCAmJiBzZCAhPT0gISFzZCkge1xyXG4gICAgICAgIGludENoZWNrKHNkLCAxLCBNQVgpO1xyXG4gICAgICAgIGlmIChybSA9PSBudWxsKSBybSA9IFJPVU5ESU5HX01PREU7XHJcbiAgICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3VuZChuZXcgQmlnTnVtYmVyKHgpLCBzZCwgcm0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIShjID0geC5jKSkgcmV0dXJuIG51bGw7XHJcbiAgICAgIHYgPSBjLmxlbmd0aCAtIDE7XHJcbiAgICAgIG4gPSB2ICogTE9HX0JBU0UgKyAxO1xyXG5cclxuICAgICAgaWYgKHYgPSBjW3ZdKSB7XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3QgZWxlbWVudC5cclxuICAgICAgICBmb3IgKDsgdiAlIDEwID09IDA7IHYgLz0gMTAsIG4tLSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgICAgICBmb3IgKHYgPSBjWzBdOyB2ID49IDEwOyB2IC89IDEwLCBuKyspO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2QgJiYgeC5lICsgMSA+IG4pIG4gPSB4LmUgKyAxO1xyXG5cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgc2hpZnRlZCBieSBrIHBsYWNlc1xyXG4gICAgICogKHBvd2VycyBvZiAxMCkuIFNoaWZ0IHRvIHRoZSByaWdodCBpZiBuID4gMCwgYW5kIHRvIHRoZSBsZWZ0IGlmIG4gPCAwLlxyXG4gICAgICpcclxuICAgICAqIGsge251bWJlcn0gSW50ZWdlciwgLU1BWF9TQUZFX0lOVEVHRVIgdG8gTUFYX1NBRkVfSU5URUdFUiBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtrfSdcclxuICAgICAqL1xyXG4gICAgUC5zaGlmdGVkQnkgPSBmdW5jdGlvbiAoaykge1xyXG4gICAgICBpbnRDaGVjayhrLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUik7XHJcbiAgICAgIHJldHVybiB0aGlzLnRpbWVzKCcxZScgKyBrKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiAgc3FydCgtbikgPSAgTlxyXG4gICAgICogIHNxcnQoTikgPSAgTlxyXG4gICAgICogIHNxcnQoLUkpID0gIE5cclxuICAgICAqICBzcXJ0KEkpID0gIElcclxuICAgICAqICBzcXJ0KDApID0gIDBcclxuICAgICAqICBzcXJ0KC0wKSA9IC0wXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLFxyXG4gICAgICogcm91bmRlZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKi9cclxuICAgIFAuc3F1YXJlUm9vdCA9IFAuc3FydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIG0sIG4sIHIsIHJlcCwgdCxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICBjID0geC5jLFxyXG4gICAgICAgIHMgPSB4LnMsXHJcbiAgICAgICAgZSA9IHguZSxcclxuICAgICAgICBkcCA9IERFQ0lNQUxfUExBQ0VTICsgNCxcclxuICAgICAgICBoYWxmID0gbmV3IEJpZ051bWJlcignMC41Jyk7XHJcblxyXG4gICAgICAvLyBOZWdhdGl2ZS9OYU4vSW5maW5pdHkvemVybz9cclxuICAgICAgaWYgKHMgIT09IDEgfHwgIWMgfHwgIWNbMF0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcighcyB8fCBzIDwgMCAmJiAoIWMgfHwgY1swXSkgPyBOYU4gOiBjID8geCA6IDEgLyAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSW5pdGlhbCBlc3RpbWF0ZS5cclxuICAgICAgcyA9IE1hdGguc3FydCgrdmFsdWVPZih4KSk7XHJcblxyXG4gICAgICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xyXG4gICAgICAvLyBQYXNzIHggdG8gTWF0aC5zcXJ0IGFzIGludGVnZXIsIHRoZW4gYWRqdXN0IHRoZSBleHBvbmVudCBvZiB0aGUgcmVzdWx0LlxyXG4gICAgICBpZiAocyA9PSAwIHx8IHMgPT0gMSAvIDApIHtcclxuICAgICAgICBuID0gY29lZmZUb1N0cmluZyhjKTtcclxuICAgICAgICBpZiAoKG4ubGVuZ3RoICsgZSkgJSAyID09IDApIG4gKz0gJzAnO1xyXG4gICAgICAgIHMgPSBNYXRoLnNxcnQoK24pO1xyXG4gICAgICAgIGUgPSBiaXRGbG9vcigoZSArIDEpIC8gMikgLSAoZSA8IDAgfHwgZSAlIDIpO1xyXG5cclxuICAgICAgICBpZiAocyA9PSAxIC8gMCkge1xyXG4gICAgICAgICAgbiA9ICcxZScgKyBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XHJcbiAgICAgICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoJ2UnKSArIDEpICsgZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHIgPSBuZXcgQmlnTnVtYmVyKG4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHIgPSBuZXcgQmlnTnVtYmVyKHMgKyAnJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGZvciB6ZXJvLlxyXG4gICAgICAvLyByIGNvdWxkIGJlIHplcm8gaWYgTUlOX0VYUCBpcyBjaGFuZ2VkIGFmdGVyIHRoZSB0aGlzIHZhbHVlIHdhcyBjcmVhdGVkLlxyXG4gICAgICAvLyBUaGlzIHdvdWxkIGNhdXNlIGEgZGl2aXNpb24gYnkgemVybyAoeC90KSBhbmQgaGVuY2UgSW5maW5pdHkgYmVsb3csIHdoaWNoIHdvdWxkIGNhdXNlXHJcbiAgICAgIC8vIGNvZWZmVG9TdHJpbmcgdG8gdGhyb3cuXHJcbiAgICAgIGlmIChyLmNbMF0pIHtcclxuICAgICAgICBlID0gci5lO1xyXG4gICAgICAgIHMgPSBlICsgZHA7XHJcbiAgICAgICAgaWYgKHMgPCAzKSBzID0gMDtcclxuXHJcbiAgICAgICAgLy8gTmV3dG9uLVJhcGhzb24gaXRlcmF0aW9uLlxyXG4gICAgICAgIGZvciAoOyA7KSB7XHJcbiAgICAgICAgICB0ID0gcjtcclxuICAgICAgICAgIHIgPSBoYWxmLnRpbWVzKHQucGx1cyhkaXYoeCwgdCwgZHAsIDEpKSk7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZWZmVG9TdHJpbmcodC5jKS5zbGljZSgwLCBzKSA9PT0gKG4gPSBjb2VmZlRvU3RyaW5nKHIuYykpLnNsaWNlKDAsIHMpKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGUgZXhwb25lbnQgb2YgciBtYXkgaGVyZSBiZSBvbmUgbGVzcyB0aGFuIHRoZSBmaW5hbCByZXN1bHQgZXhwb25lbnQsXHJcbiAgICAgICAgICAgIC8vIGUuZyAwLjAwMDk5OTkgKGUtNCkgLS0+IDAuMDAxIChlLTMpLCBzbyBhZGp1c3QgcyBzbyB0aGUgcm91bmRpbmcgZGlnaXRzXHJcbiAgICAgICAgICAgIC8vIGFyZSBpbmRleGVkIGNvcnJlY3RseS5cclxuICAgICAgICAgICAgaWYgKHIuZSA8IGUpIC0tcztcclxuICAgICAgICAgICAgbiA9IG4uc2xpY2UocyAtIDMsIHMgKyAxKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZSA0dGggcm91bmRpbmcgZGlnaXQgbWF5IGJlIGluIGVycm9yIGJ5IC0xIHNvIGlmIHRoZSA0IHJvdW5kaW5nIGRpZ2l0c1xyXG4gICAgICAgICAgICAvLyBhcmUgOTk5OSBvciA0OTk5IChpLmUuIGFwcHJvYWNoaW5nIGEgcm91bmRpbmcgYm91bmRhcnkpIGNvbnRpbnVlIHRoZVxyXG4gICAgICAgICAgICAvLyBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgIGlmIChuID09ICc5OTk5JyB8fCAhcmVwICYmIG4gPT0gJzQ5OTknKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIE9uIHRoZSBmaXJzdCBpdGVyYXRpb24gb25seSwgY2hlY2sgdG8gc2VlIGlmIHJvdW5kaW5nIHVwIGdpdmVzIHRoZVxyXG4gICAgICAgICAgICAgIC8vIGV4YWN0IHJlc3VsdCBhcyB0aGUgbmluZXMgbWF5IGluZmluaXRlbHkgcmVwZWF0LlxyXG4gICAgICAgICAgICAgIGlmICghcmVwKSB7XHJcbiAgICAgICAgICAgICAgICByb3VuZCh0LCB0LmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0LnRpbWVzKHQpLmVxKHgpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHIgPSB0O1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGRwICs9IDQ7XHJcbiAgICAgICAgICAgICAgcyArPSA0O1xyXG4gICAgICAgICAgICAgIHJlcCA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIElmIHJvdW5kaW5nIGRpZ2l0cyBhcmUgbnVsbCwgMHswLDR9IG9yIDUwezAsM30sIGNoZWNrIGZvciBleGFjdFxyXG4gICAgICAgICAgICAgIC8vIHJlc3VsdC4gSWYgbm90LCB0aGVuIHRoZXJlIGFyZSBmdXJ0aGVyIGRpZ2l0cyBhbmQgbSB3aWxsIGJlIHRydXRoeS5cclxuICAgICAgICAgICAgICBpZiAoIStuIHx8ICErbi5zbGljZSgxKSAmJiBuLmNoYXJBdCgwKSA9PSAnNScpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUcnVuY2F0ZSB0byB0aGUgZmlyc3Qgcm91bmRpbmcgZGlnaXQuXHJcbiAgICAgICAgICAgICAgICByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDEpO1xyXG4gICAgICAgICAgICAgICAgbSA9ICFyLnRpbWVzKHIpLmVxKHgpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDEsIFJPVU5ESU5HX01PREUsIG0pO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGV4cG9uZW50aWFsIG5vdGF0aW9uIGFuZFxyXG4gICAgICogcm91bmRlZCB1c2luZyBST1VORElOR19NT0RFIHRvIGRwIGZpeGVkIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfHJtfSdcclxuICAgICAqL1xyXG4gICAgUC50b0V4cG9uZW50aWFsID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gICAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICAgIGRwKys7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZvcm1hdCh0aGlzLCBkcCwgcm0sIDEpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGZpeGVkLXBvaW50IG5vdGF0aW9uIHJvdW5kaW5nXHJcbiAgICAgKiB0byBkcCBmaXhlZCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBST1VORElOR19NT0RFIGlmIHJtIGlzIG9taXR0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogYXMgd2l0aCBKYXZhU2NyaXB0J3MgbnVtYmVyIHR5cGUsICgtMCkudG9GaXhlZCgwKSBpcyAnMCcsXHJcbiAgICAgKiBidXQgZS5nLiAoLTAuMDAwMDEpLnRvRml4ZWQoMCkgaXMgJy0wJy5cclxuICAgICAqXHJcbiAgICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICAgKi9cclxuICAgIFAudG9GaXhlZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgaWYgKGRwICE9IG51bGwpIHtcclxuICAgICAgICBpbnRDaGVjayhkcCwgMCwgTUFYKTtcclxuICAgICAgICBkcCA9IGRwICsgdGhpcy5lICsgMTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZm9ybWF0KHRoaXMsIGRwLCBybSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24gcm91bmRlZFxyXG4gICAgICogdXNpbmcgcm0gb3IgUk9VTkRJTkdfTU9ERSB0byBkcCBkZWNpbWFsIHBsYWNlcywgYW5kIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHByb3BlcnRpZXNcclxuICAgICAqIG9mIHRoZSBmb3JtYXQgb3IgRk9STUFUIG9iamVjdCAoc2VlIEJpZ051bWJlci5zZXQpLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBmb3JtYXR0aW5nIG9iamVjdCBtYXkgY29udGFpbiBzb21lIG9yIGFsbCBvZiB0aGUgcHJvcGVydGllcyBzaG93biBiZWxvdy5cclxuICAgICAqXHJcbiAgICAgKiBGT1JNQVQgPSB7XHJcbiAgICAgKiAgIHByZWZpeDogJycsXHJcbiAgICAgKiAgIGdyb3VwU2l6ZTogMyxcclxuICAgICAqICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICogICBncm91cFNlcGFyYXRvcjogJywnLFxyXG4gICAgICogICBkZWNpbWFsU2VwYXJhdG9yOiAnLicsXHJcbiAgICAgKiAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICogICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yOiAnXFx4QTAnLCAgICAgIC8vIG5vbi1icmVha2luZyBzcGFjZVxyXG4gICAgICogICBzdWZmaXg6ICcnXHJcbiAgICAgKiB9O1xyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqIFtmb3JtYXRdIHtvYmplY3R9IEZvcm1hdHRpbmcgb3B0aW9ucy4gU2VlIEZPUk1BVCBwYmplY3QgYWJvdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQgbm90IGFuIG9iamVjdDoge2Zvcm1hdH0nXHJcbiAgICAgKi9cclxuICAgIFAudG9Gb3JtYXQgPSBmdW5jdGlvbiAoZHAsIHJtLCBmb3JtYXQpIHtcclxuICAgICAgdmFyIHN0cixcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIGlmIChmb3JtYXQgPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChkcCAhPSBudWxsICYmIHJtICYmIHR5cGVvZiBybSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgZm9ybWF0ID0gcm07XHJcbiAgICAgICAgICBybSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkcCAmJiB0eXBlb2YgZHAgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIGZvcm1hdCA9IGRwO1xyXG4gICAgICAgICAgZHAgPSBybSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvcm1hdCA9IEZPUk1BVDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnQXJndW1lbnQgbm90IGFuIG9iamVjdDogJyArIGZvcm1hdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0ciA9IHgudG9GaXhlZChkcCwgcm0pO1xyXG5cclxuICAgICAgaWYgKHguYykge1xyXG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgYXJyID0gc3RyLnNwbGl0KCcuJyksXHJcbiAgICAgICAgICBnMSA9ICtmb3JtYXQuZ3JvdXBTaXplLFxyXG4gICAgICAgICAgZzIgPSArZm9ybWF0LnNlY29uZGFyeUdyb3VwU2l6ZSxcclxuICAgICAgICAgIGdyb3VwU2VwYXJhdG9yID0gZm9ybWF0Lmdyb3VwU2VwYXJhdG9yIHx8ICcnLFxyXG4gICAgICAgICAgaW50UGFydCA9IGFyclswXSxcclxuICAgICAgICAgIGZyYWN0aW9uUGFydCA9IGFyclsxXSxcclxuICAgICAgICAgIGlzTmVnID0geC5zIDwgMCxcclxuICAgICAgICAgIGludERpZ2l0cyA9IGlzTmVnID8gaW50UGFydC5zbGljZSgxKSA6IGludFBhcnQsXHJcbiAgICAgICAgICBsZW4gPSBpbnREaWdpdHMubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoZzIpIGkgPSBnMSwgZzEgPSBnMiwgZzIgPSBpLCBsZW4gLT0gaTtcclxuXHJcbiAgICAgICAgaWYgKGcxID4gMCAmJiBsZW4gPiAwKSB7XHJcbiAgICAgICAgICBpID0gbGVuICUgZzEgfHwgZzE7XHJcbiAgICAgICAgICBpbnRQYXJ0ID0gaW50RGlnaXRzLnN1YnN0cigwLCBpKTtcclxuICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpICs9IGcxKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnN1YnN0cihpLCBnMSk7XHJcbiAgICAgICAgICBpZiAoZzIgPiAwKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnNsaWNlKGkpO1xyXG4gICAgICAgICAgaWYgKGlzTmVnKSBpbnRQYXJ0ID0gJy0nICsgaW50UGFydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0ciA9IGZyYWN0aW9uUGFydFxyXG4gICAgICAgICA/IGludFBhcnQgKyAoZm9ybWF0LmRlY2ltYWxTZXBhcmF0b3IgfHwgJycpICsgKChnMiA9ICtmb3JtYXQuZnJhY3Rpb25Hcm91cFNpemUpXHJcbiAgICAgICAgICA/IGZyYWN0aW9uUGFydC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxkeycgKyBnMiArICd9XFxcXEInLCAnZycpLFxyXG4gICAgICAgICAgICckJicgKyAoZm9ybWF0LmZyYWN0aW9uR3JvdXBTZXBhcmF0b3IgfHwgJycpKVxyXG4gICAgICAgICAgOiBmcmFjdGlvblBhcnQpXHJcbiAgICAgICAgIDogaW50UGFydDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIChmb3JtYXQucHJlZml4IHx8ICcnKSArIHN0ciArIChmb3JtYXQuc3VmZml4IHx8ICcnKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgdHdvIEJpZ051bWJlcnMgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBhcyBhIHNpbXBsZVxyXG4gICAgICogZnJhY3Rpb24gd2l0aCBhbiBpbnRlZ2VyIG51bWVyYXRvciBhbmQgYW4gaW50ZWdlciBkZW5vbWluYXRvci5cclxuICAgICAqIFRoZSBkZW5vbWluYXRvciB3aWxsIGJlIGEgcG9zaXRpdmUgbm9uLXplcm8gdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWRcclxuICAgICAqIG1heGltdW0gZGVub21pbmF0b3IuIElmIGEgbWF4aW11bSBkZW5vbWluYXRvciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZGVub21pbmF0b3Igd2lsbCBiZVxyXG4gICAgICogdGhlIGxvd2VzdCB2YWx1ZSBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBudW1iZXIgZXhhY3RseS5cclxuICAgICAqXHJcbiAgICAgKiBbbWRdIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gSW50ZWdlciA+PSAxLCBvciBJbmZpbml0eS4gVGhlIG1heGltdW0gZGVub21pbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9IDoge21kfSdcclxuICAgICAqL1xyXG4gICAgUC50b0ZyYWN0aW9uID0gZnVuY3Rpb24gKG1kKSB7XHJcbiAgICAgIHZhciBkLCBkMCwgZDEsIGQyLCBlLCBleHAsIG4sIG4wLCBuMSwgcSwgciwgcyxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICB4YyA9IHguYztcclxuXHJcbiAgICAgIGlmIChtZCAhPSBudWxsKSB7XHJcbiAgICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobWQpO1xyXG5cclxuICAgICAgICAvLyBUaHJvdyBpZiBtZCBpcyBsZXNzIHRoYW4gb25lIG9yIGlzIG5vdCBhbiBpbnRlZ2VyLCB1bmxlc3MgaXQgaXMgSW5maW5pdHkuXHJcbiAgICAgICAgaWYgKCFuLmlzSW50ZWdlcigpICYmIChuLmMgfHwgbi5zICE9PSAxKSB8fCBuLmx0KE9ORSkpIHtcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdBcmd1bWVudCAnICtcclxuICAgICAgICAgICAgICAobi5pc0ludGVnZXIoKSA/ICdvdXQgb2YgcmFuZ2U6ICcgOiAnbm90IGFuIGludGVnZXI6ICcpICsgdmFsdWVPZihuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXhjKSByZXR1cm4gbmV3IEJpZ051bWJlcih4KTtcclxuXHJcbiAgICAgIGQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIG4xID0gZDAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIGQxID0gbjAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIHMgPSBjb2VmZlRvU3RyaW5nKHhjKTtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSBpbml0aWFsIGRlbm9taW5hdG9yLlxyXG4gICAgICAvLyBkIGlzIGEgcG93ZXIgb2YgMTAgYW5kIHRoZSBtaW5pbXVtIG1heCBkZW5vbWluYXRvciB0aGF0IHNwZWNpZmllcyB0aGUgdmFsdWUgZXhhY3RseS5cclxuICAgICAgZSA9IGQuZSA9IHMubGVuZ3RoIC0geC5lIC0gMTtcclxuICAgICAgZC5jWzBdID0gUE9XU19URU5bKGV4cCA9IGUgJSBMT0dfQkFTRSkgPCAwID8gTE9HX0JBU0UgKyBleHAgOiBleHBdO1xyXG4gICAgICBtZCA9ICFtZCB8fCBuLmNvbXBhcmVkVG8oZCkgPiAwID8gKGUgPiAwID8gZCA6IG4xKSA6IG47XHJcblxyXG4gICAgICBleHAgPSBNQVhfRVhQO1xyXG4gICAgICBNQVhfRVhQID0gMSAvIDA7XHJcbiAgICAgIG4gPSBuZXcgQmlnTnVtYmVyKHMpO1xyXG5cclxuICAgICAgLy8gbjAgPSBkMSA9IDBcclxuICAgICAgbjAuY1swXSA9IDA7XHJcblxyXG4gICAgICBmb3IgKDsgOykgIHtcclxuICAgICAgICBxID0gZGl2KG4sIGQsIDAsIDEpO1xyXG4gICAgICAgIGQyID0gZDAucGx1cyhxLnRpbWVzKGQxKSk7XHJcbiAgICAgICAgaWYgKGQyLmNvbXBhcmVkVG8obWQpID09IDEpIGJyZWFrO1xyXG4gICAgICAgIGQwID0gZDE7XHJcbiAgICAgICAgZDEgPSBkMjtcclxuICAgICAgICBuMSA9IG4wLnBsdXMocS50aW1lcyhkMiA9IG4xKSk7XHJcbiAgICAgICAgbjAgPSBkMjtcclxuICAgICAgICBkID0gbi5taW51cyhxLnRpbWVzKGQyID0gZCkpO1xyXG4gICAgICAgIG4gPSBkMjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZDIgPSBkaXYobWQubWludXMoZDApLCBkMSwgMCwgMSk7XHJcbiAgICAgIG4wID0gbjAucGx1cyhkMi50aW1lcyhuMSkpO1xyXG4gICAgICBkMCA9IGQwLnBsdXMoZDIudGltZXMoZDEpKTtcclxuICAgICAgbjAucyA9IG4xLnMgPSB4LnM7XHJcbiAgICAgIGUgPSBlICogMjtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSB3aGljaCBmcmFjdGlvbiBpcyBjbG9zZXIgdG8geCwgbjAvZDAgb3IgbjEvZDFcclxuICAgICAgciA9IGRpdihuMSwgZDEsIGUsIFJPVU5ESU5HX01PREUpLm1pbnVzKHgpLmFicygpLmNvbXBhcmVkVG8oXHJcbiAgICAgICAgICBkaXYobjAsIGQwLCBlLCBST1VORElOR19NT0RFKS5taW51cyh4KS5hYnMoKSkgPCAxID8gW24xLCBkMV0gOiBbbjAsIGQwXTtcclxuXHJcbiAgICAgIE1BWF9FWFAgPSBleHA7XHJcblxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGNvbnZlcnRlZCB0byBhIG51bWJlciBwcmltaXRpdmUuXHJcbiAgICAgKi9cclxuICAgIFAudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiArdmFsdWVPZih0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0c1xyXG4gICAgICogdXNpbmcgcm91bmRpbmcgbW9kZSBybSBvciBST1VORElOR19NT0RFLiBJZiBzZCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHNcclxuICAgICAqIG5lY2Vzc2FyeSB0byByZXByZXNlbnQgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24sIHRoZW4gdXNlXHJcbiAgICAgKiBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVggaW5jbHVzaXZlLlxyXG4gICAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAgICpcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7c2R8cm19J1xyXG4gICAgICovXHJcbiAgICBQLnRvUHJlY2lzaW9uID0gZnVuY3Rpb24gKHNkLCBybSkge1xyXG4gICAgICBpZiAoc2QgIT0gbnVsbCkgaW50Q2hlY2soc2QsIDEsIE1BWCk7XHJcbiAgICAgIHJldHVybiBmb3JtYXQodGhpcywgc2QsIHJtLCAyKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpbiBiYXNlIGIsIG9yIGJhc2UgMTAgaWYgYiBpc1xyXG4gICAgICogb21pdHRlZC4gSWYgYSBiYXNlIGlzIHNwZWNpZmllZCwgaW5jbHVkaW5nIGJhc2UgMTAsIHJvdW5kIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmRcclxuICAgICAqIFJPVU5ESU5HX01PREUuIElmIGEgYmFzZSBpcyBub3Qgc3BlY2lmaWVkLCBhbmQgdGhpcyBCaWdOdW1iZXIgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnRcclxuICAgICAqIHRoYXQgaXMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIFRPX0VYUF9QT1MsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuXHJcbiAgICAgKiBUT19FWFBfTkVHLCByZXR1cm4gZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogW2JdIHtudW1iZXJ9IEludGVnZXIsIDIgdG8gQUxQSEFCRVQubGVuZ3RoIGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICAgKi9cclxuICAgIFAudG9TdHJpbmcgPSBmdW5jdGlvbiAoYikge1xyXG4gICAgICB2YXIgc3RyLFxyXG4gICAgICAgIG4gPSB0aGlzLFxyXG4gICAgICAgIHMgPSBuLnMsXHJcbiAgICAgICAgZSA9IG4uZTtcclxuXHJcbiAgICAgIC8vIEluZmluaXR5IG9yIE5hTj9cclxuICAgICAgaWYgKGUgPT09IG51bGwpIHtcclxuICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgc3RyID0gJ0luZmluaXR5JztcclxuICAgICAgICAgIGlmIChzIDwgMCkgc3RyID0gJy0nICsgc3RyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdHIgPSAnTmFOJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyID0gY29lZmZUb1N0cmluZyhuLmMpO1xyXG5cclxuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XHJcbiAgICAgICAgICBzdHIgPSBlIDw9IFRPX0VYUF9ORUcgfHwgZSA+PSBUT19FWFBfUE9TXHJcbiAgICAgICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgZSlcclxuICAgICAgICAgICA6IHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGludENoZWNrKGIsIDIsIEFMUEhBQkVULmxlbmd0aCwgJ0Jhc2UnKTtcclxuICAgICAgICAgIHN0ciA9IGNvbnZlcnRCYXNlKHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyksIDEwLCBiLCBzLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzIDwgMCAmJiBuLmNbMF0pIHN0ciA9ICctJyArIHN0cjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYXMgdG9TdHJpbmcsIGJ1dCBkbyBub3QgYWNjZXB0IGEgYmFzZSBhcmd1bWVudCwgYW5kIGluY2x1ZGUgdGhlIG1pbnVzIHNpZ24gZm9yXHJcbiAgICAgKiBuZWdhdGl2ZSB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBQLnZhbHVlT2YgPSBQLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlT2YodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBQLl9pc0JpZ051bWJlciA9IHRydWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnKSB7XHJcbiAgICAgIFBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdCaWdOdW1iZXInO1xyXG4gICAgICAvLyBOb2RlLmpzIHYxMC4xMi4wK1xyXG4gICAgICBQW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gUC52YWx1ZU9mO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb25maWdPYmplY3QgIT0gbnVsbCkgQmlnTnVtYmVyLnNldChjb25maWdPYmplY3QpO1xyXG5cclxuICAgIHJldHVybiBCaWdOdW1iZXI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUFJJVkFURSBIRUxQRVIgRlVOQ1RJT05TXHJcblxyXG5cclxuICBmdW5jdGlvbiBiaXRGbG9vcihuKSB7XHJcbiAgICB2YXIgaSA9IG4gfCAwO1xyXG4gICAgcmV0dXJuIG4gPiAwIHx8IG4gPT09IGkgPyBpIDogaSAtIDE7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUmV0dXJuIGEgY29lZmZpY2llbnQgYXJyYXkgYXMgYSBzdHJpbmcgb2YgYmFzZSAxMCBkaWdpdHMuXHJcbiAgZnVuY3Rpb24gY29lZmZUb1N0cmluZyhhKSB7XHJcbiAgICB2YXIgcywgeixcclxuICAgICAgaSA9IDEsXHJcbiAgICAgIGogPSBhLmxlbmd0aCxcclxuICAgICAgciA9IGFbMF0gKyAnJztcclxuXHJcbiAgICBmb3IgKDsgaSA8IGo7KSB7XHJcbiAgICAgIHMgPSBhW2krK10gKyAnJztcclxuICAgICAgeiA9IExPR19CQVNFIC0gcy5sZW5ndGg7XHJcbiAgICAgIGZvciAoOyB6LS07IHMgPSAnMCcgKyBzKTtcclxuICAgICAgciArPSBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoaiA9IHIubGVuZ3RoOyByLmNoYXJDb2RlQXQoLS1qKSA9PT0gNDg7KTtcclxuXHJcbiAgICByZXR1cm4gci5zbGljZSgwLCBqICsgMSB8fCAxKTtcclxuICB9XHJcblxyXG5cclxuICAvLyBDb21wYXJlIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXJzIHggYW5kIHkuXHJcbiAgZnVuY3Rpb24gY29tcGFyZSh4LCB5KSB7XHJcbiAgICB2YXIgYSwgYixcclxuICAgICAgeGMgPSB4LmMsXHJcbiAgICAgIHljID0geS5jLFxyXG4gICAgICBpID0geC5zLFxyXG4gICAgICBqID0geS5zLFxyXG4gICAgICBrID0geC5lLFxyXG4gICAgICBsID0geS5lO1xyXG5cclxuICAgIC8vIEVpdGhlciBOYU4/XHJcbiAgICBpZiAoIWkgfHwgIWopIHJldHVybiBudWxsO1xyXG5cclxuICAgIGEgPSB4YyAmJiAheGNbMF07XHJcbiAgICBiID0geWMgJiYgIXljWzBdO1xyXG5cclxuICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgaWYgKGEgfHwgYikgcmV0dXJuIGEgPyBiID8gMCA6IC1qIDogaTtcclxuXHJcbiAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICBpZiAoaSAhPSBqKSByZXR1cm4gaTtcclxuXHJcbiAgICBhID0gaSA8IDA7XHJcbiAgICBiID0gayA9PSBsO1xyXG5cclxuICAgIC8vIEVpdGhlciBJbmZpbml0eT9cclxuICAgIGlmICgheGMgfHwgIXljKSByZXR1cm4gYiA/IDAgOiAheGMgXiBhID8gMSA6IC0xO1xyXG5cclxuICAgIC8vIENvbXBhcmUgZXhwb25lbnRzLlxyXG4gICAgaWYgKCFiKSByZXR1cm4gayA+IGwgXiBhID8gMSA6IC0xO1xyXG5cclxuICAgIGogPSAoayA9IHhjLmxlbmd0aCkgPCAobCA9IHljLmxlbmd0aCkgPyBrIDogbDtcclxuXHJcbiAgICAvLyBDb21wYXJlIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gICAgZm9yIChpID0gMDsgaSA8IGo7IGkrKykgaWYgKHhjW2ldICE9IHljW2ldKSByZXR1cm4geGNbaV0gPiB5Y1tpXSBeIGEgPyAxIDogLTE7XHJcblxyXG4gICAgLy8gQ29tcGFyZSBsZW5ndGhzLlxyXG4gICAgcmV0dXJuIGsgPT0gbCA/IDAgOiBrID4gbCBeIGEgPyAxIDogLTE7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBDaGVjayB0aGF0IG4gaXMgYSBwcmltaXRpdmUgbnVtYmVyLCBhbiBpbnRlZ2VyLCBhbmQgaW4gcmFuZ2UsIG90aGVyd2lzZSB0aHJvdy5cclxuICAgKi9cclxuICBmdW5jdGlvbiBpbnRDaGVjayhuLCBtaW4sIG1heCwgbmFtZSkge1xyXG4gICAgaWYgKG4gPCBtaW4gfHwgbiA+IG1heCB8fCBuICE9PSAobiA8IDAgPyBtYXRoY2VpbChuKSA6IG1hdGhmbG9vcihuKSkpIHtcclxuICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgIChiaWdudW1iZXJFcnJvciArIChuYW1lIHx8ICdBcmd1bWVudCcpICsgKHR5cGVvZiBuID09ICdudW1iZXInXHJcbiAgICAgICAgID8gbiA8IG1pbiB8fCBuID4gbWF4ID8gJyBvdXQgb2YgcmFuZ2U6ICcgOiAnIG5vdCBhbiBpbnRlZ2VyOiAnXHJcbiAgICAgICAgIDogJyBub3QgYSBwcmltaXRpdmUgbnVtYmVyOiAnKSArIFN0cmluZyhuKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQXNzdW1lcyBmaW5pdGUgbi5cclxuICBmdW5jdGlvbiBpc09kZChuKSB7XHJcbiAgICB2YXIgayA9IG4uYy5sZW5ndGggLSAxO1xyXG4gICAgcmV0dXJuIGJpdEZsb29yKG4uZSAvIExPR19CQVNFKSA9PSBrICYmIG4uY1trXSAlIDIgIT0gMDtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKHN0ciwgZSkge1xyXG4gICAgcmV0dXJuIChzdHIubGVuZ3RoID4gMSA/IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSkgOiBzdHIpICtcclxuICAgICAoZSA8IDAgPyAnZScgOiAnZSsnKSArIGU7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gdG9GaXhlZFBvaW50KHN0ciwgZSwgeikge1xyXG4gICAgdmFyIGxlbiwgenM7XHJcblxyXG4gICAgLy8gTmVnYXRpdmUgZXhwb25lbnQ/XHJcbiAgICBpZiAoZSA8IDApIHtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MuXHJcbiAgICAgIGZvciAoenMgPSB6ICsgJy4nOyArK2U7IHpzICs9IHopO1xyXG4gICAgICBzdHIgPSB6cyArIHN0cjtcclxuXHJcbiAgICAvLyBQb3NpdGl2ZSBleHBvbmVudFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIEFwcGVuZCB6ZXJvcy5cclxuICAgICAgaWYgKCsrZSA+IGxlbikge1xyXG4gICAgICAgIGZvciAoenMgPSB6LCBlIC09IGxlbjsgLS1lOyB6cyArPSB6KTtcclxuICAgICAgICBzdHIgKz0genM7XHJcbiAgICAgIH0gZWxzZSBpZiAoZSA8IGxlbikge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCBlKSArICcuJyArIHN0ci5zbGljZShlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gRVhQT1JUXHJcblxyXG5cclxuICBCaWdOdW1iZXIgPSBjbG9uZSgpO1xyXG4gIEJpZ051bWJlclsnZGVmYXVsdCddID0gQmlnTnVtYmVyLkJpZ051bWJlciA9IEJpZ051bWJlcjtcclxuXHJcbiAgLy8gQU1ELlxyXG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpZ051bWJlcjsgfSk7XHJcblxyXG4gIC8vIE5vZGUuanMgYW5kIG90aGVyIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMuXHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJpZ051bWJlcjtcclxuXHJcbiAgLy8gQnJvd3Nlci5cclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKCFnbG9iYWxPYmplY3QpIHtcclxuICAgICAgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiA/IHNlbGYgOiB3aW5kb3c7XHJcbiAgICB9XHJcblxyXG4gICAgZ2xvYmFsT2JqZWN0LkJpZ051bWJlciA9IEJpZ051bWJlcjtcclxuICB9XHJcbn0pKHRoaXMpO1xyXG4iLCJpbXBvcnQge0Vvc30gZnJvbSAnLi4vLi4vdHlwZXMvbGlicyc7XG5cbmltcG9ydCBEQiBmcm9tICcuL2RiJztcblxuaW1wb3J0IHtQbGF5ZXJ9IGZyb20gJy4uLy4uL3BsYXllcic7XG5pbXBvcnQge2ZvckNvbmRpdGlvbiwgZm9yTXN9IGZyb20gJy4uLy4uL3V0aWxzL3dhaXQnO1xuXG5pbXBvcnQge0lFb3NOb2RlQ29uZmlnLCBJRW9zTm9kZUNvbmZpZ1RhYmxlfSBmcm9tICcuLi8uLi9jb25maWdzJztcbmltcG9ydCB7R2V0U2lnbktleURlbGVnYXRlLCBJU2lnblBsdWdpbn0gZnJvbSAnLi4vLi4vcGx1Z2lucy9pbnRlcmZhY2UnO1xuaW1wb3J0IHtJRW9zQ2xpZW50LCBJSWRlbnRpdHl9IGZyb20gJy4uLy4uL3R5cGVzL2Vvcyc7XG5pbXBvcnQge0lTY2F0dGVyfSBmcm9tICcuLi8uLi90eXBlcy9zY2F0dGVyJztcbmltcG9ydCB7Y3JlYXRlTG9nZ2VyfSBmcm9tICcuLi8uLi91dGlscy9sb2cnO1xuXG5jb25zdCBsb2cgPSBjcmVhdGVMb2dnZXIoJ3NjYXR0ZXJQbGF5ZXInKTtcblxuLyoqXG4gKiBFdmVudCBuYW1lcyBzdXBwb3J0ZWQgaW4gc2NhdHRlciBwbGF5ZXJcbiAqIEB0eXBlIHt7RVJSX0dFVF9TQ0FUVEVSX0ZBSUxFRDogc3RyaW5nLCBFUlJfR0VUX0lERU5USVRZX0ZBSUxFRDogc3RyaW5nfX1cbiAqL1xuY29uc3QgRVZFTlRfTkFNRVMgPSB7XG4gICAgRVJSX0dFVF9TQ0FUVEVSX0ZBSUxFRDogJ0VSUl9HRVRfU0NBVFRFUl9GQUlMRUQnLFxuICAgIEVSUl9HRVRfSURFTlRJVFlfRkFJTEVEOiAnRVJSX0dFVF9JREVOVElUWV9GQUlMRUQnLFxuICAgIEVSUl9MT0dPVVRfRkFJTEVEOiAnRVJSX0xPR09VVF9GQUlMRUQnLFxuICAgIEVSUl9DT05GX05PVF9GT1VORDogJ0VSUl9DT05GX05PVF9GT1VORCcsXG59O1xuXG4vKipcbiAqIFBsYXllciBvbiBicm93c2VyIChuZWVkIHNjYXR0ZXIpXG4gKiBAYXV0aG9yIGtpbmdoYW5kQGZveG1haWwuY29tXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2F0dGVyUGxheWVyIGV4dGVuZHMgUGxheWVyIHtcblxuICAgIHByb3RlY3RlZCBpZGVudGl0eVJlY2VpdmVyOiAoKF9pZGVudGl0eTogSUlkZW50aXR5IHwgRXJyb3IpID0+IGFueSlbXSA9IFtdO1xuICAgIHB1YmxpYyByZWFkb25seSBzdG9yYWdlOiBEQiA9IG5ldyBEQih7XG4gICAgICAgIG5ldHdvcmtfbmFtZTogJ2RldicsXG4gICAgICAgIGxhbmc6ICdjaCcsXG4gICAgfSk7XG4gICAgcHJvdGVjdGVkIF9lb3NDbGllbnQ/OiBJRW9zQ2xpZW50O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIF9uZXR3b3JrczogSUVvc05vZGVDb25maWdUYWJsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmV2ZW50cy5lbmFibGVFdmVudHMoRVZFTlRfTkFNRVMpO1xuICAgICAgICBsb2cuaW5mbyhgZW9zIHBsYXllciBjcmVhdGVkOiBcXG4ke3RoaXMubmV0TmFtZX0gXFxuJHtKU09OLnN0cmluZ2lmeSh0aGlzLm5ldENvbmYsIG51bGwsIDIpfWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHN3aXRjaCB0byBhbiBuZXR3b3JrIHdpdGggbmFtZVxuICAgICAqIEBwYXJhbSBrZXlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3dpdGNoTmV0d29yayhrZXk6IHN0cmluZykge1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuX25ldHdvcmtzKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0KCduZXR3b3JrX25hbWUnLCBrZXkpO1xuICAgICAgICAgICAgdGhpcy5fZW9zQ2xpZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbG9nLmluZm8oYG5ldHdvcmsgY2hhbmdlZCB0byAke3RoaXMubmV0TmFtZX0gJHt0aGlzLm5ldENvbmZ9LmApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nLndhcm5pbmcoYG5ldHdvcmsgJHtrZXl9IGNhbm5vdCBmaW5kLmApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIG5ldCBjb25maWcgdG8gdGFibGUgYXQgcnVudGltZVxuICAgICAqIEBwYXJhbSBuZXROYW1lXG4gICAgICogQHBhcmFtIGNvbmZcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TmV0Q29uZihuZXROYW1lOiBzdHJpbmcsIGNvbmY6IGFueSkge1xuICAgICAgICB0aGlzLl9uZXR3b3Jrc1tuZXROYW1lXSA9IGNvbmY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5ldHdvcmsgbmFtZSBpbiB1c2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG5ldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQoJ25ldHdvcmtfbmFtZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBuZXR3b3JrIGNvbmZpZyBvZiBjdXIgbmV0TmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgbmV0Q29uZigpOiBJRW9zTm9kZUNvbmZpZyB7XG4gICAgICAgIGNvbnN0IGNvbmYgPSB0aGlzLl9uZXR3b3Jrc1t0aGlzLm5ldE5hbWVdO1xuICAgICAgICBpZiAoIWNvbmYpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfQ09ORl9OT1RfRk9VTkQsIG5ldyBFcnJvcihgY2Fubm90IGZpbmQgY29uZmlnIG9mICR7dGhpcy5uZXROYW1lfWApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cnkgZ2V0IHNjYXR0ZXJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2V0LXNjYXR0ZXIuY29tL2RvY3MvZXhhbXBsZXMtaW50ZXJhY3Rpb24tZmxvd1xuICAgICAqIEByZXR1cm4ge1NjYXR0ZXJ9XG4gICAgICovXG4gICAgcHVibGljIGdldCBzY2F0dGVyKCk6IElTY2F0dGVyIHtcbiAgICAgICAgY29uc3Qgc2NhdHRlciA9ICh3aW5kb3cgYXMgYW55KS5zY2F0dGVyO1xuICAgICAgICBpZiAoIXNjYXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcignc2NhdHRlciBjYW5ub3QgZm91bmQnKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfR0VUX1NDQVRURVJfRkFJTEVELCBlcnIpO1xuICAgICAgICAgICAgLy8gdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY2F0dGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyeSBnZXQgc2NhdHRlciBhc3luYyAtIGlmIG5vdCBmaW5kXG4gICAgICogQHNlZSBodHRwczovL2dldC1zY2F0dGVyLmNvbS9kb2NzL2V4YW1wbGVzLWludGVyYWN0aW9uLWZsb3dcbiAgICAgKiBAcmV0dXJuIHtTY2F0dGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRTY2F0dGVyQXN5bmMobWF4VHJ5ID0gMTAwKTogUHJvbWlzZTxJU2NhdHRlcj4ge1xuICAgICAgICB3aGlsZSAoISh3aW5kb3cgYXMgYW55KS5zY2F0dGVyICYmIG1heFRyeS0tKSB7XG4gICAgICAgICAgICBsb2cudmVyYm9zZSgnZ2V0IHNjYXR0ZXIgZmFpbGVkLCByZXRyeSA6JywgbWF4VHJ5KTtcbiAgICAgICAgICAgIGF3YWl0IGZvck1zKDEwMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEod2luZG93IGFzIGFueSkuc2NhdHRlcikge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdzY2F0dGVyIGNhbm5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdEV2ZW50KEVWRU5UX05BTUVTLkVSUl9HRVRfU0NBVFRFUl9GQUlMRUQsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh3aW5kb3cgYXMgYW55KS5zY2F0dGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvZ2luIC0gcmVxdWlyZSBhY2NvdW50IGlkZW50aXR5IGZyb20gc2NhdHRlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8e0lkZW50aXR5fT59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGxvZ2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJZGVudGl0eSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvZ291dFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGxvZ291dCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IGF3YWl0IChhd2FpdCB0aGlzLmdldFNjYXR0ZXJBc3luYygpKS5mb3JnZXRJZGVudGl0eSgpO1xuICAgICAgICAgICAgbG9nLmluZm8oYGxvZyBvdXQgZnJvbSAke3RoaXMuc3RvcmFnZS5nZXQoJ2xhdGVzdF9jaGFpbl9pZCcpfWApO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0RXZlbnQoRVZFTlRfTkFNRVMuRVJSX0xPR09VVF9GQUlMRUQsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgb3IgY3JlYXRlIHNjYXR0ZXJcbiAgICAgKiBAcmV0dXJuIHtlb3NBUEl9XG4gICAgICovXG4gICAgcHVibGljIGdldCBlb3NDbGllbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZW9zQ2xpZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjb25mID0gdGhpcy5uZXRDb25mIGFzIGFueTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGlzLnNjYXR0ZXInLCB0aGlzLnNjYXR0ZXIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RoaXMuc2NhdHRlci5lb3MnLCB0aGlzLnNjYXR0ZXIuZW9zKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdFb3MnLCBFb3MpXG4gICAgICAgICAgICBjb25zdCBmaXJzdENvbG9uID0gY29uZi5odHRwRW5kcG9pbnQuaW5kZXhPZignOicpO1xuICAgICAgICAgICAgY29uc3QgbmV4dENvbG9uID0gY29uZi5odHRwRW5kcG9pbnQuaW5kZXhPZignOicsIGZpcnN0Q29sb24gKyAxKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3RvY29sID0gY29uZi5odHRwRW5kcG9pbnQuc3Vic3RyKDAsIGZpcnN0Q29sb24pO1xuICAgICAgICAgICAgY29uc3QgaG9zdCA9IG5leHRDb2xvbiA8IDAgP1xuICAgICAgICAgICAgICAgIGNvbmYuaHR0cEVuZHBvaW50LnN1YnN0cihmaXJzdENvbG9uICsgMykgOlxuICAgICAgICAgICAgICAgIGNvbmYuaHR0cEVuZHBvaW50LnN1YnN0cihmaXJzdENvbG9uICsgMywgbmV4dENvbG9uIC0gZmlyc3RDb2xvbiAtIDMpO1xuICAgICAgICAgICAgY29uc3QgcG9ydCA9IG5leHRDb2xvbiA8IDAgPyAocHJvdG9jb2wgPT09ICdodHRwcycgPyAnNDQzJyA6ICc4MCcpIDogY29uZi5odHRwRW5kcG9pbnQuc3Vic3RyKG5leHRDb2xvbiArIDEpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncHJvdG9jb2wnLCBwcm90b2NvbCwgaG9zdCwgcG9ydCk7XG5cbiAgICAgICAgICAgIGNvbmYuaG9zdCA9IGhvc3Q7XG4gICAgICAgICAgICBjb25mLnBvcnQgPSBwb3J0O1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbmYnLCBjb25mKTtcbiAgICAgICAgICAgIHRoaXMuX2Vvc0NsaWVudCA9IHRoaXMuc2NhdHRlci5lb3MoY29uZiwgRW9zLCB7fSwgcHJvdG9jb2wpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZW9zQ2xpZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjcmVhdGUgX2Vvc0NsaWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lb3NDbGllbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0SWRlbnRpdHkgb2YgY3VyIHNjYXR0ZXIgdXNlclxuICAgICAqIEBhdHRlbnRpb24gV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgY29uY3VycmVudCBnZXRJZGVudGl0eSByZXF1ZXN0cywgc2NhdHRlciB3aWxsIG9ubHkgcmV0dXJuIHRoZSBmaXJzdCBvbmUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7SWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0SWRlbnRpdHkoKSB7XG4gICAgICAgIGNvbnN0IF9zY2F0dGVyID0gYXdhaXQgdGhpcy5nZXRTY2F0dGVyQXN5bmMoKTtcblxuICAgICAgICBjb25zdCBvcmlnaW5DaGFpbklEID0gdGhpcy5zdG9yYWdlLmdldCgnbGF0ZXN0X2NoYWluX2lkJyk7XG4gICAgICAgIGNvbnN0IGNoYWluSUQgPSB0aGlzLm5ldENvbmYuY2hhaW5JZDtcblxuICAgICAgICBpZiAoKCEhb3JpZ2luQ2hhaW5JRCkgJiYgY2hhaW5JRCAhPT0gb3JpZ2luQ2hhaW5JRCkge1xuICAgICAgICAgICAgbG9nLmluZm8oYGEgY2hhbmdpbmcgb2YgY2hhaW5faWQgZGV0ZWN0ZWQ6ICR7b3JpZ2luQ2hhaW5JRH0gLT4gJHtjaGFpbklEfSBgKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nb3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldCgnbGF0ZXN0X2NoYWluX2lkJywgY2hhaW5JRCk7XG5cbiAgICAgICAgLy8gdXNpbmcgbWVzc2FnZSBxdWV1ZSB0byBkZWxcbiAgICAgICAgbGV0IGlkZW50aXR5OiBJSWRlbnRpdHkgfCBFcnJvciB8IGFueTtcblxuICAgICAgICBmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2VPckVycm9yKF9pZGVudGl0eTogSUlkZW50aXR5IHwgRXJyb3IpIHtcbiAgICAgICAgICAgIGlkZW50aXR5ID0gX2lkZW50aXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZGVudGl0eVJlY2VpdmVyLnB1c2gocmVjZWl2ZUluc3RhbmNlT3JFcnJvcik7XG5cbiAgICAgICAgaWYgKHRoaXMuaWRlbnRpdHlSZWNlaXZlci5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgX3NjYXR0ZXIuZ2V0SWRlbnRpdHkoe1xuICAgICAgICAgICAgICAgIGFjY291bnRzOiBbdGhpcy5uZXRDb25mXSwgLy8gbmVlZCBzbG90ICdjaGFpbmlkJyBhbmQgJ2Jsb2NrY2hhaW4nXG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5UmVjZWl2ZXIuZm9yRWFjaChcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXIgPT4gcmVjZWl2ZXIoX3NjYXR0ZXIuaWRlbnRpdHkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NjYXR0ZXIuaWRlbnRpdHkuYWNjb3VudHMuZmluZCgoYWNjOiBhbnkpID0+IGFjYy5ibG9ja2NoYWluID09PSAnZW9zJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5UmVjZWl2ZXIgPSBbXTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eVJlY2VpdmVyLmZvckVhY2gocmVjZWl2ZXIgPT4gcmVjZWl2ZXIoZXJyKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eVJlY2VpdmVyID0gW107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBmb3JDb25kaXRpb24oKCkgPT4gISFpZGVudGl0eSk7IC8vIHVzaW5nIHVuZGVmaW5lZCB0byBibG9jayBvcGVyYXRpb24sIHVzaW5nIG51bGwgdG8gaGFuZGxlIGVycm9yXG5cbiAgICAgICAgaWYgKGlkZW50aXR5IGluc3RhbmNlb2YgRXJyb3IgfHwgKGlkZW50aXR5LmlzRXJyb3IpKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0RXZlbnQoRVZFTlRfTkFNRVMuRVJSX0dFVF9JREVOVElUWV9GQUlMRUQsIGlkZW50aXR5KTtcbiAgICAgICAgICAgIHRocm93IGlkZW50aXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNpZ24gYSBtZXNzYWdlIHdpdGggY3VycmVudCBpZGVudGl0eVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gbWVzc2FnZSB0byBzaWduXG4gICAgICogQHBhcmFtIHsuLi4gSVNpZ25QbHVnaW5bXX0gc2lnblBsdWdpbnMgLSBzaWduZXIgbWFwJ3MgbGlzdFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59IC0gc2lnbmVkIGRhdGFcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgc2lnbihtZXNzYWdlOiBzdHJpbmcsIC4uLnNpZ25QbHVnaW5zOiBJU2lnblBsdWdpbltdKSB7XG4gICAgICAgIGNvbnN0IGlkZW50aXR5ID0gYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpO1xuICAgICAgICBjb25zdCBhY2NvdW50ID0gaWRlbnRpdHkubmFtZTtcblxuICAgICAgICBjb25zdCB7cGVybWlzc2lvbnN9ID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50SW5mbyhhY2NvdW50KTtcbiAgICAgICAgaWYgKCFwZXJtaXNzaW9ucykge1xuICAgICAgICAgICAgbG9nLndhcm5pbmcoYHBlcm1pc3Npb25zIG9mIGFjY291bnQgJHthY2NvdW50fSBhcmUgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGVybSA9IHBlcm1pc3Npb25zLmZpbmQocCA9PiBwLnBlcm1fbmFtZSA9PT0gaWRlbnRpdHkuYXV0aG9yaXR5KTtcbiAgICAgICAgbG9nLmluZm8oYHBlcm0gOiAke0pTT04uc3RyaW5naWZ5KHBlcm0pfWApO1xuICAgICAgICBjb25zdCB7YWNjb3VudHMsIGtleXN9ID0gcGVybS5yZXF1aXJlZF9hdXRoO1xuXG4gICAgICAgIGxldCBwdWJLZXlzOiBBcnJheTx7IGtleTogc3RyaW5nIH0+ID0ga2V5cyB8fCBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IHNpZ25QbHVnaW5zICYmIGkgPCBzaWduUGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2lnblBsdWdpbjogSVNpZ25QbHVnaW4gPSBzaWduUGx1Z2luc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZDogc3RyaW5nW10gPSBhd2FpdCBQcm9taXNlLmFsbChhY2NvdW50c1xuICAgICAgICAgICAgICAgIC5tYXAoYWNjID0+IGAke2FjYy5wZXJtaXNzaW9uLmFjdG9yfUAke2FjYy5wZXJtaXNzaW9uLnBlcm1pc3Npb259YClcbiAgICAgICAgICAgICAgICAubWFwKGFjY1N0ciA9PiBzaWduUGx1Z2luLnNpZ25LZXlQcm92aWRlclthY2NTdHJdKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoXyA9PiBfKVxuICAgICAgICAgICAgICAgIC5tYXAoc2lnbktleVByb3ZpZGVyID0+IFByb21pc2UucmVzb2x2ZShzaWduS2V5UHJvdmlkZXIoYWNjb3VudCwgdGhpcy5jaGFpbikpKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwdWJLZXlzID0gW1xuICAgICAgICAgICAgICAgIC4uLnB1YktleXMsXG4gICAgICAgICAgICAgICAgLi4uY29udmVydGVkLm1hcChrZXkgPT4gKHtrZXl9KSksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJldCA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHB1YktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbG9nLmluZm8oYHRyeSBzaWduICgke0pTT04uc3RyaW5naWZ5KHB1YktleXNbaV0pfSkgOiAke21lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5zY2F0dGVyLmdldEFyYml0cmFyeVNpZ25hdHVyZShwdWJLZXlzW2ldLmtleSwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuaW5nKGB0cnkgcHViIGtleSBmYWlsZWQgJHtwdWJLZXlzW2ldfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcHVibGljIGhlbHAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmhlbHAoKSArIGBcblxuIyMgVXNhZ2Ugb2YgZW9zcGxheWVyIChmb3IgYnJvc3dlcilcblxuIyMjIEV2ZW50c1xuXG5FUlJfR0VUX1NDQVRURVJfRkFJTEVEXG5FUlJfR0VUX0lERU5USVRZX0ZBSUxFRFxuRVJSX0xPR09VVF9GQUlMRURcblxuIyMjIEFQSXNcblxuXFxgXFxgXFxganNcbnt2b2lkfSBlb3NwbGF5ZXIuc3dpdGNoTmV0d29yayh2YWwpIC8vIHN3aXRjaCBuZXR3b3JrXG57dm9pZH0gZW9zcGxheWVyLnNldE5ldENvbmYobmV0d29ya19uYW1lLCBjb25mKSAvLyBhZGQgYSBuZXR3b3JrIGNvbmZpZyBhdCBydW50aW1lXG5cbmdldCB7U2NhdHRlcn0gZW9zcGxheWVyLnNjYXR0ZXIgLy8gZ2V0IHNjYXR0ZXIgaW5zdGFuY2VcbmdldCB7U2NhdHRlcn0gYXN5bmMgZ2V0U2NhdHRlckFzeW5jKG1heFRyeSA9IDEwMCkgLy8gZ2V0IHNjYXR0ZXIgaW5zdGFuY2VcblxuZ2V0IHtzdHJpbmd9IGVvc3BsYXllci5uZXROYW1lIC8vIGdldCBjdXJyZW50IG5ldHdvcmsgbmFtZVxuZ2V0IHtzdHJpbmd9IGVvc3BsYXllci5uZXRDb25mIC8vIGdldCBjdXJyZW50IG5ldHdvcmsgY29uZmlnXG5cbmFzeW5jIHtJZGVudGl0eX0gZW9zcGxheWVyLmxvZ2luKCkgLy8gbGV0IHVzZXIgYWxsb3cgeW91IHVzaW5nIGlkZW50aXR5XG5hc3luYyB7dm9pZH0gZW9zcGxheWVyLmxvZ291dCgpIC8vIHJldHVybiBiYWNrIHRoZSBpZGVudGl0eVxuXG5hc3luYyB7c3RyaW5nfSBzaWduKG1lc3NhZ2UpIC8vIHNpZ24gYSBtZXNzYWdlIHdpdGggY3VycmVudCBpZGVudGl0eVxuXFxgXFxgXFxgXG5cbiMjIEltcG9ydGVkIGxpYnNcblxuXFxgXFxgXFxganNcbndpbmRvdy5lb3NqcyA9IEVvczsgLyoqIHRoZSBlb3NqcyBsaWIgQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9lb3Nqc30gKi9cbndpbmRvdy5lbnYgPSBlbnY7IC8qKiB7aXNQY30gKi9cbndpbmRvdy5pZGIgPSBpZGI7IC8qKiBpZGIgbGliIGZvciBicm93c2VyIHN0b3JhZ2UgQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9pZGIgfSAqL1xud2luZG93LkJpZ051bWJlciA9IEJpZ051bWJlcjsgLyoqIGJpZyBudW1iZXIgQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iaWdudW1iZXIuanN9ICovXG5cbndpbmRvdy5raC5lb3MuUGxheWVyXG53aW5kb3cua2guZW9zLlNjYXR0ZXJQbGF5ZXJcbndpbmRvdy5lb3NwbGF5ZXIgPSBuZXcgU2NhdHRlclBsYXllcihuZXR3b3Jrcyk7XG5cXGBcXGBcXGBcbmA7XG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbnZhciBCeXRlQnVmZmVyID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgUHVibGljS2V5ID0gcmVxdWlyZSgnLi9rZXlfcHVibGljJyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4va2V5X3ByaXZhdGUnKTtcbnZhciBoYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG5cbnZhciBMb25nID0gQnl0ZUJ1ZmZlci5Mb25nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBlbmNyeXB0OiBlbmNyeXB0LFxuICAgIGRlY3J5cHQ6IGRlY3J5cHRcblxuICAgIC8qKlxuICAgICAgICBTcGVjOiBodHRwOi8vbG9jYWxob3N0OjMwMDIvc3RlZW0vQGRhbnRoZW1hbi9ob3ctdG8tZW5jcnlwdC1hLW1lbW8td2hlbi10cmFuc2ZlcnJpbmctc3RlZW1cbiAgICBcbiAgICAgICAgQHRocm93cyB7RXJyb3J8VHlwZUVycm9yfSAtIFwiSW52YWxpZCBLZXksIC4uLlwiXG4gICAgXG4gICAgICAgIEBhcmcge1ByaXZhdGVLZXl9IHByaXZhdGVfa2V5IC0gcmVxdWlyZWQgYW5kIHVzZWQgZm9yIGRlY3J5cHRpb25cbiAgICAgICAgQGFyZyB7UHVibGljS2V5fSBwdWJsaWNfa2V5IC0gcmVxdWlyZWQgYW5kIHVzZWQgdG8gY2FsY3VhbHRlIHRoZSBzaGFyZWQgc2VjcmV0XG4gICAgICAgIEBhcmcge3N0cmluZ30gW25vbmNlID0gdW5pcXVlTm9uY2UoKV0gLSBhc3NpZ25lZCBhIHJhbmRvbSB1bmlxdWUgdWludDY0XG4gICAgXG4gICAgICAgIEByZXR1cm4ge29iamVjdH1cbiAgICAgICAgQHByb3BlcnR5IHtzdHJpbmd9IG5vbmNlIC0gcmFuZG9tIG9yIHVuaXF1ZSB1aW50NjQsIHByb3ZpZGVzIGVudHJvcHkgd2hlbiByZS11c2luZyB0aGUgc2FtZSBwcml2YXRlL3B1YmxpYyBrZXlzLlxuICAgICAgICBAcHJvcGVydHkge0J1ZmZlcn0gbWVzc2FnZSAtIFBsYWluIHRleHQgbWVzc2FnZVxuICAgICAgICBAcHJvcGVydHkge251bWJlcn0gY2hlY2tzdW0gLSBzaGFyZWQgc2VjcmV0IGNoZWNrc3VtXG4gICAgKi9cbn07ZnVuY3Rpb24gZW5jcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbWVzc2FnZSkge1xuICAgIHZhciBub25jZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdW5pcXVlTm9uY2UoKTtcblxuICAgIHJldHVybiBjcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbm9uY2UsIG1lc3NhZ2UpO1xufVxuXG4vKipcbiAgICBTcGVjOiBodHRwOi8vbG9jYWxob3N0OjMwMDIvc3RlZW0vQGRhbnRoZW1hbi9ob3ctdG8tZW5jcnlwdC1hLW1lbW8td2hlbi10cmFuc2ZlcnJpbmctc3RlZW1cblxuICAgIEBhcmcge1ByaXZhdGVLZXl9IHByaXZhdGVfa2V5IC0gcmVxdWlyZWQgYW5kIHVzZWQgZm9yIGRlY3J5cHRpb25cbiAgICBAYXJnIHtQdWJsaWNLZXl9IHB1YmxpY19rZXkgLSByZXF1aXJlZCBhbmQgdXNlZCB0byBjYWxjdWFsdGUgdGhlIHNoYXJlZCBzZWNyZXRcbiAgICBAYXJnIHtzdHJpbmd9IG5vbmNlIC0gcmFuZG9tIG9yIHVuaXF1ZSB1aW50NjQsIHByb3ZpZGVzIGVudHJvcHkgd2hlbiByZS11c2luZyB0aGUgc2FtZSBwcml2YXRlL3B1YmxpYyBrZXlzLlxuICAgIEBhcmcge0J1ZmZlcn0gbWVzc2FnZSAtIEVuY3J5cHRlZCBvciBwbGFpbiB0ZXh0IG1lc3NhZ2VcbiAgICBAYXJnIHtudW1iZXJ9IGNoZWNrc3VtIC0gc2hhcmVkIHNlY3JldCBjaGVja3N1bVxuXG4gICAgQHRocm93cyB7RXJyb3J8VHlwZUVycm9yfSAtIFwiSW52YWxpZCBLZXksIC4uLlwiXG5cbiAgICBAcmV0dXJuIHtCdWZmZXJ9IC0gbWVzc2FnZVxuKi9cbmZ1bmN0aW9uIGRlY3J5cHQocHJpdmF0ZV9rZXksIHB1YmxpY19rZXksIG5vbmNlLCBtZXNzYWdlLCBjaGVja3N1bSkge1xuICAgIHJldHVybiBjcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbm9uY2UsIG1lc3NhZ2UsIGNoZWNrc3VtKS5tZXNzYWdlO1xufVxuXG4vKipcbiAgICBAYXJnIHtCdWZmZXJ9IG1lc3NhZ2UgLSBFbmNyeXB0ZWQgb3IgcGxhaW4gdGV4dCBtZXNzYWdlIChzZWUgY2hlY2tzdW0pXG4gICAgQGFyZyB7bnVtYmVyfSBjaGVja3N1bSAtIHNoYXJlZCBzZWNyZXQgY2hlY2tzdW0gKG51bGwgdG8gZW5jcnlwdCwgbm9uLW51bGwgdG8gZGVjcnlwdClcbiAgICBAcHJpdmF0ZVxuKi9cbmZ1bmN0aW9uIGNyeXB0KHByaXZhdGVfa2V5LCBwdWJsaWNfa2V5LCBub25jZSwgbWVzc2FnZSwgY2hlY2tzdW0pIHtcbiAgICBwcml2YXRlX2tleSA9IFByaXZhdGVLZXkocHJpdmF0ZV9rZXkpO1xuICAgIGlmICghcHJpdmF0ZV9rZXkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByaXZhdGVfa2V5IGlzIHJlcXVpcmVkJyk7XG5cbiAgICBwdWJsaWNfa2V5ID0gUHVibGljS2V5KHB1YmxpY19rZXkpO1xuICAgIGlmICghcHVibGljX2tleSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncHVibGljX2tleSBpcyByZXF1aXJlZCcpO1xuXG4gICAgbm9uY2UgPSB0b0xvbmdPYmoobm9uY2UpO1xuICAgIGlmICghbm9uY2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vbmNlIGlzIHJlcXVpcmVkJyk7XG5cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihtZXNzYWdlKSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdtZXNzYWdlIHNob3VsZCBiZSBidWZmZXIgb3Igc3RyaW5nJyk7XG4gICAgICAgIG1lc3NhZ2UgPSBuZXcgQnVmZmVyKG1lc3NhZ2UsICdiaW5hcnknKTtcbiAgICB9XG4gICAgaWYgKGNoZWNrc3VtICYmIHR5cGVvZiBjaGVja3N1bSAhPT0gJ251bWJlcicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NoZWNrc3VtIHNob3VsZCBiZSBhIG51bWJlcicpO1xuXG4gICAgdmFyIFMgPSBwcml2YXRlX2tleS5nZXRTaGFyZWRTZWNyZXQocHVibGljX2tleSk7XG4gICAgdmFyIGVidWYgPSBuZXcgQnl0ZUJ1ZmZlcihCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFksIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTik7XG4gICAgZWJ1Zi53cml0ZVVpbnQ2NChub25jZSk7XG4gICAgZWJ1Zi5hcHBlbmQoUy50b1N0cmluZygnYmluYXJ5JyksICdiaW5hcnknKTtcbiAgICBlYnVmID0gbmV3IEJ1ZmZlcihlYnVmLmNvcHkoMCwgZWJ1Zi5vZmZzZXQpLnRvQmluYXJ5KCksICdiaW5hcnknKTtcbiAgICB2YXIgZW5jcnlwdGlvbl9rZXkgPSBoYXNoLnNoYTUxMihlYnVmKTtcblxuICAgIC8vIEQgRSBCIFUgR1xuICAgIC8vIGNvbnNvbGUubG9nKCdjcnlwdCcsIHtcbiAgICAvLyAgICAgcHJpdl90b19wdWI6IHByaXZhdGVfa2V5LnRvUHVibGljKCkudG9TdHJpbmcoKSxcbiAgICAvLyAgICAgcHViOiBwdWJsaWNfa2V5LnRvU3RyaW5nKCksXG4gICAgLy8gICAgIG5vbmNlOiBub25jZS50b1N0cmluZygpLFxuICAgIC8vICAgICBtZXNzYWdlOiBtZXNzYWdlLmxlbmd0aCxcbiAgICAvLyAgICAgY2hlY2tzdW0sXG4gICAgLy8gICAgIFM6IFMudG9TdHJpbmcoJ2hleCcpLFxuICAgIC8vICAgICBlbmNyeXB0aW9uX2tleTogZW5jcnlwdGlvbl9rZXkudG9TdHJpbmcoJ2hleCcpLFxuICAgIC8vIH0pXG5cbiAgICB2YXIgaXYgPSBlbmNyeXB0aW9uX2tleS5zbGljZSgzMiwgNDgpO1xuICAgIHZhciBrZXkgPSBlbmNyeXB0aW9uX2tleS5zbGljZSgwLCAzMik7XG5cbiAgICAvLyBjaGVjayBpcyBmaXJzdCA2NCBiaXQgb2Ygc2hhMjU2IGhhc2ggdHJlYXRlZCBhcyB1aW50NjRfdCB0cnVuY2F0ZWQgdG8gMzIgYml0cy5cbiAgICB2YXIgY2hlY2sgPSBoYXNoLnNoYTI1NihlbmNyeXB0aW9uX2tleSk7XG4gICAgY2hlY2sgPSBjaGVjay5zbGljZSgwLCA0KTtcbiAgICB2YXIgY2J1ZiA9IEJ5dGVCdWZmZXIuZnJvbUJpbmFyeShjaGVjay50b1N0cmluZygnYmluYXJ5JyksIEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICBjaGVjayA9IGNidWYucmVhZFVpbnQzMigpO1xuXG4gICAgaWYgKGNoZWNrc3VtKSB7XG4gICAgICAgIGlmIChjaGVjayAhPT0gY2hlY2tzdW0pIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBrZXknKTtcbiAgICAgICAgbWVzc2FnZSA9IGNyeXB0b0pzRGVjcnlwdChtZXNzYWdlLCBrZXksIGl2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gY3J5cHRvSnNFbmNyeXB0KG1lc3NhZ2UsIGtleSwgaXYpO1xuICAgIH1cbiAgICByZXR1cm4geyBub25jZTogbm9uY2UsIG1lc3NhZ2U6IG1lc3NhZ2UsIGNoZWNrc3VtOiBjaGVjayB9O1xufVxuXG4vKiogVGhpcyBtZXRob2QgZG9lcyBub3QgdXNlIGEgY2hlY2tzdW0sIHRoZSByZXR1cm5lZCBkYXRhIG11c3QgYmUgdmFsaWRhdGVkIHNvbWUgb3RoZXIgd2F5LlxuXG4gICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gbWVzc2FnZSAtIGNpcGhlcnRleHQgYmluYXJ5IGZvcm1hdFxuICAgIEBhcmcge3N0cmluZzx1dGY4PnxCdWZmZXJ9IGtleSAtIDI1NmJpdFxuICAgIEBhcmcge3N0cmluZzx1dGY4PnxCdWZmZXJ9IGl2IC0gMTI4Yml0XG5cbiAgICBAcmV0dXJuIHtCdWZmZXJ9XG4qL1xuZnVuY3Rpb24gY3J5cHRvSnNEZWNyeXB0KG1lc3NhZ2UsIGtleSwgaXYpIHtcbiAgICBhc3NlcnQobWVzc2FnZSwgXCJNaXNzaW5nIGNpcGhlciB0ZXh0XCIpO1xuICAgIG1lc3NhZ2UgPSB0b0JpbmFyeUJ1ZmZlcihtZXNzYWdlKTtcbiAgICB2YXIgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdignYWVzLTI1Ni1jYmMnLCBrZXksIGl2KTtcbiAgICAvLyBkZWNpcGhlci5zZXRBdXRvUGFkZGluZyh0cnVlKVxuICAgIG1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KFtkZWNpcGhlci51cGRhdGUobWVzc2FnZSksIGRlY2lwaGVyLmZpbmFsKCldKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHVzZSBhIGNoZWNrc3VtLCB0aGUgcmV0dXJuZWQgZGF0YSBtdXN0IGJlIHZhbGlkYXRlZCBzb21lIG90aGVyIHdheS5cbiAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBtZXNzYWdlIC0gcGxhaW50ZXh0IGJpbmFyeSBmb3JtYXRcbiAgICBAYXJnIHtzdHJpbmc8dXRmOD58QnVmZmVyfSBrZXkgLSAyNTZiaXRcbiAgICBAYXJnIHtzdHJpbmc8dXRmOD58QnVmZmVyfSBpdiAtIDEyOGJpdFxuXG4gICAgQHJldHVybiB7QnVmZmVyfVxuKi9cbmZ1bmN0aW9uIGNyeXB0b0pzRW5jcnlwdChtZXNzYWdlLCBrZXksIGl2KSB7XG4gICAgYXNzZXJ0KG1lc3NhZ2UsIFwiTWlzc2luZyBwbGFpbiB0ZXh0XCIpO1xuICAgIG1lc3NhZ2UgPSB0b0JpbmFyeUJ1ZmZlcihtZXNzYWdlKTtcbiAgICB2YXIgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpO1xuICAgIC8vIGNpcGhlci5zZXRBdXRvUGFkZGluZyh0cnVlKVxuICAgIG1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KFtjaXBoZXIudXBkYXRlKG1lc3NhZ2UpLCBjaXBoZXIuZmluYWwoKV0pO1xuICAgIHJldHVybiBtZXNzYWdlO1xufVxuXG4vKiogQHJldHVybiB7c3RyaW5nfSB1bmlxdWUgNjQgYml0IHVuc2lnbmVkIG51bWJlciBzdHJpbmcuICBCZWluZyB0aW1lIGJhc2VkLCB0aGlzIGlzIGNhcmVmdWwgdG8gbmV2ZXIgY2hvb3NlIHRoZSBzYW1lIG5vbmNlIHR3aWNlLiAgVGhpcyB2YWx1ZSBjb3VsZCBiZSByZWNvcmRlZCBpbiB0aGUgYmxvY2tjaGFpbiBmb3IgYSBsb25nIHRpbWUuXG4qL1xuZnVuY3Rpb24gdW5pcXVlTm9uY2UoKSB7XG4gICAgaWYgKHVuaXF1ZV9ub25jZV9lbnRyb3B5ID09PSBudWxsKSB7XG4gICAgICAgIHZhciBiID0gbmV3IFVpbnQ4QXJyYXkocmFuZG9tQnl0ZXMoMikpO1xuICAgICAgICB1bmlxdWVfbm9uY2VfZW50cm9weSA9IHBhcnNlSW50KGJbMF0gPDwgOCB8IGJbMV0sIDEwKTtcbiAgICB9XG4gICAgdmFyIGxvbmcgPSBMb25nLmZyb21OdW1iZXIoRGF0ZS5ub3coKSk7XG4gICAgdmFyIGVudHJvcHkgPSArK3VuaXF1ZV9ub25jZV9lbnRyb3B5ICUgMHhGRkZGO1xuICAgIC8vIGNvbnNvbGUubG9nKCd1bmlxdWVOb25jZSBkYXRlXFx0JywgQnl0ZUJ1ZmZlci5hbGxvY2F0ZSg4KS53cml0ZVVpbnQ2NChsb25nKS50b0hleCgwKSlcbiAgICAvLyBjb25zb2xlLmxvZygndW5pcXVlTm9uY2UgZW50cm9weVxcdCcsIEJ5dGVCdWZmZXIuYWxsb2NhdGUoOCkud3JpdGVVaW50NjQoTG9uZy5mcm9tTnVtYmVyKGVudHJvcHkpKS50b0hleCgwKSlcbiAgICBsb25nID0gbG9uZy5zaGlmdExlZnQoMTYpLm9yKExvbmcuZnJvbU51bWJlcihlbnRyb3B5KSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3VuaXF1ZU5vbmNlIGZpbmFsXFx0JywgQnl0ZUJ1ZmZlci5hbGxvY2F0ZSg4KS53cml0ZVVpbnQ2NChsb25nKS50b0hleCgwKSlcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxudmFyIHVuaXF1ZV9ub25jZV9lbnRyb3B5ID0gbnVsbDtcbi8vIGZvcihsZXQgaT0xOyBpIDwgMTA7IGkrKykga2V5LnVuaXF1ZU5vbmNlKClcblxudmFyIHRvTG9uZ09iaiA9IGZ1bmN0aW9uIHRvTG9uZ09iaihvKSB7XG4gICAgcmV0dXJuIG8gPyBMb25nLmlzTG9uZyhvKSA/IG8gOiBMb25nLmZyb21TdHJpbmcobykgOiBvO1xufTtcbnZhciB0b0JpbmFyeUJ1ZmZlciA9IGZ1bmN0aW9uIHRvQmluYXJ5QnVmZmVyKG8pIHtcbiAgICByZXR1cm4gbyA/IEJ1ZmZlci5pc0J1ZmZlcihvKSA/IG8gOiBuZXcgQnVmZmVyKG8sICdiaW5hcnknKSA6IG87XG59OyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXFxuVXNlIENocm9tZSwgRmlyZWZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IDY1NTM2KSB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVlc3RlZCB0b28gbWFueSByYW5kb20gYnl0ZXMnKVxuICAvLyBpbiBjYXNlIGJyb3dzZXJpZnkgIGlzbid0IHVzaW5nIHRoZSBVaW50OEFycmF5IHZlcnNpb25cbiAgdmFyIHJhd0J5dGVzID0gbmV3IGdsb2JhbC5VaW50OEFycmF5KHNpemUpXG5cbiAgLy8gVGhpcyB3aWxsIG5vdCB3b3JrIGluIG9sZGVyIGJyb3dzZXJzLlxuICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gIGlmIChzaXplID4gMCkgeyAgLy8gZ2V0UmFuZG9tVmFsdWVzIGZhaWxzIG9uIElFIGlmIHNpemUgPT0gMFxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocmF3Qnl0ZXMpXG4gIH1cblxuICAvLyBYWFg6IHBoYW50b21qcyBkb2Vzbid0IGxpa2UgYSBidWZmZXIgYmVpbmcgcGFzc2VkIGhlcmVcbiAgdmFyIGJ5dGVzID0gQnVmZmVyLmZyb20ocmF3Qnl0ZXMuYnVmZmVyKVxuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcylcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi4vaW5jcjMyJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2tSYXcoc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxudmFyIGJsb2NrU2l6ZSA9IDE2XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgdmFyIGNodW5rTnVtID0gTWF0aC5jZWlsKGNodW5rLmxlbmd0aCAvIGJsb2NrU2l6ZSlcbiAgdmFyIHN0YXJ0ID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fY2FjaGUsXG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlKGNodW5rTnVtICogYmxvY2tTaXplKVxuICBdKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rTnVtOyBpKyspIHtcbiAgICB2YXIgb3V0ID0gZ2V0QmxvY2soc2VsZilcbiAgICB2YXIgb2Zmc2V0ID0gc3RhcnQgKyBpICogYmxvY2tTaXplXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMF0sIG9mZnNldCArIDApXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMV0sIG9mZnNldCArIDQpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMl0sIG9mZnNldCArIDgpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbM10sIG9mZnNldCArIDEyKVxuICB9XG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJmdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBpbmNyMzJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuL2luY3IzMicpXG5cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgb3V0KytcblxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gY2FsY0l2IChzZWxmLCBpdiwgY2spIHtcbiAgaWYgKGl2Lmxlbmd0aCA9PT0gMTIpIHtcbiAgICBzZWxmLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMV0pXSlcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAyXSldKVxuICB9XG4gIHZhciBnaGFzaCA9IG5ldyBHSEFTSChjaylcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgdG9QYWQgPSBsZW4gJSAxNlxuICBnaGFzaC51cGRhdGUoaXYpXG4gIGlmICh0b1BhZCkge1xuICAgIHRvUGFkID0gMTYgLSB0b1BhZFxuICAgIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2ModG9QYWQsIDApKVxuICB9XG4gIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2MoOCwgMCkpXG4gIHZhciBpdkJpdHMgPSBsZW4gKiA4XG4gIHZhciB0YWlsID0gQnVmZmVyLmFsbG9jKDgpXG4gIHRhaWwud3JpdGVVSW50QkUoaXZCaXRzLCAwLCA4KVxuICBnaGFzaC51cGRhdGUodGFpbClcbiAgc2VsZi5fZmluSUQgPSBnaGFzaC5zdGF0ZVxuICB2YXIgb3V0ID0gQnVmZmVyLmZyb20oc2VsZi5fZmluSUQpXG4gIGluY3IzMihvdXQpXG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHZhciBoID0gQnVmZmVyLmFsbG9jKDQsIDApXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB2YXIgY2sgPSB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKGNrKVxuICBpdiA9IGNhbGNJdih0aGlzLCBpdiwgY2spXG5cbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIHRoaXMuX21vZGUgPSBtb2RlXG5cbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IEJ1ZmZlci5hbGxvYyhydW1wLCAwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmIHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0IHx8ICFCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHJldHVybiB0aGlzLl9hdXRoVGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAodGhpcy5fY2FsbGVkKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5Qml0cywgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgaWYgKHNhbHQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsICdiaW5hcnknKVxuICAgIGlmIChzYWx0Lmxlbmd0aCAhPT0gOCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NhbHQgc2hvdWxkIGJlIEJ1ZmZlciB3aXRoIDggYnl0ZSBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGtleUxlbiA9IGtleUJpdHMgLyA4XG4gIHZhciBrZXkgPSBCdWZmZXIuYWxsb2Moa2V5TGVuKVxuICB2YXIgaXYgPSBCdWZmZXIuYWxsb2MoaXZMZW4gfHwgMClcbiAgdmFyIHRtcCA9IEJ1ZmZlci5hbGxvYygwKVxuXG4gIHdoaWxlIChrZXlMZW4gPiAwIHx8IGl2TGVuID4gMCkge1xuICAgIHZhciBoYXNoID0gbmV3IE1ENSgpXG4gICAgaGFzaC51cGRhdGUodG1wKVxuICAgIGhhc2gudXBkYXRlKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSBoYXNoLnVwZGF0ZShzYWx0KVxuICAgIHRtcCA9IGhhc2guZGlnZXN0KClcblxuICAgIHZhciB1c2VkID0gMFxuXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHZhciBrZXlTdGFydCA9IGtleS5sZW5ndGggLSBrZXlMZW5cbiAgICAgIHVzZWQgPSBNYXRoLm1pbihrZXlMZW4sIHRtcC5sZW5ndGgpXG4gICAgICB0bXAuY29weShrZXksIGtleVN0YXJ0LCAwLCB1c2VkKVxuICAgICAga2V5TGVuIC09IHVzZWRcbiAgICB9XG5cbiAgICBpZiAodXNlZCA8IHRtcC5sZW5ndGggJiYgaXZMZW4gPiAwKSB7XG4gICAgICB2YXIgaXZTdGFydCA9IGl2Lmxlbmd0aCAtIGl2TGVuXG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oaXZMZW4sIHRtcC5sZW5ndGggLSB1c2VkKVxuICAgICAgdG1wLmNvcHkoaXYsIGl2U3RhcnQsIHVzZWQsIHVzZWQgKyBsZW5ndGgpXG4gICAgICBpdkxlbiAtPSBsZW5ndGhcbiAgICB9XG4gIH1cblxuICB0bXAuZmlsbCgwKVxuICByZXR1cm4geyBrZXk6IGtleSwgaXY6IGl2IH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyICh2YWwsIHByZWZpeCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWwpICYmIHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwcmVmaXggKyAnIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBidWZmZXInKVxuICB9XG59XG5cbmZ1bmN0aW9uIEhhc2hCYXNlIChibG9ja1NpemUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja1NpemUpXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgdGhpcy5fbGVuZ3RoID0gWzAsIDAsIDAsIDBdXG5cbiAgdGhpcy5fZmluYWxpemVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoSGFzaEJhc2UsIFRyYW5zZm9ybSlcblxuSGFzaEJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy51cGRhdGUoY2h1bmssIGVuY29kaW5nKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLmRpZ2VzdCgpKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvciA9IGVyclxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3IpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcpIHtcbiAgdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyKGRhdGEsICdEYXRhJylcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKVxuXG4gIC8vIGNvbnN1bWUgZGF0YVxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgb2Zmc2V0ID0gMFxuICB3aGlsZSAodGhpcy5fYmxvY2tPZmZzZXQgKyBkYXRhLmxlbmd0aCAtIG9mZnNldCA+PSB0aGlzLl9ibG9ja1NpemUpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5fYmxvY2tPZmZzZXQ7IGkgPCB0aGlzLl9ibG9ja1NpemU7KSBibG9ja1tpKytdID0gZGF0YVtvZmZzZXQrK11cbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG4gIHdoaWxlIChvZmZzZXQgPCBkYXRhLmxlbmd0aCkgYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSBkYXRhW29mZnNldCsrXVxuXG4gIC8vIHVwZGF0ZSBsZW5ndGhcbiAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gZGF0YS5sZW5ndGggKiA4OyBjYXJyeSA+IDA7ICsraikge1xuICAgIHRoaXMuX2xlbmd0aFtqXSArPSBjYXJyeVxuICAgIGNhcnJ5ID0gKHRoaXMuX2xlbmd0aFtqXSAvIDB4MDEwMDAwMDAwMCkgfCAwXG4gICAgaWYgKGNhcnJ5ID4gMCkgdGhpcy5fbGVuZ3RoW2pdIC09IDB4MDEwMDAwMDAwMCAqIGNhcnJ5XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKVxuICB0aGlzLl9maW5hbGl6ZWQgPSB0cnVlXG5cbiAgdmFyIGRpZ2VzdCA9IHRoaXMuX2RpZ2VzdCgpXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSBkaWdlc3QgPSBkaWdlc3QudG9TdHJpbmcoZW5jb2RpbmcpXG5cbiAgLy8gcmVzZXQgc3RhdGVcbiAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHRoaXMuX2xlbmd0aFtpXSA9IDBcblxuICByZXR1cm4gZGlnZXN0XG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ19kaWdlc3QgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoQmFzZVxuIiwidmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpXG5cbnZhciBUSFJFRSA9IEJpZ0ludGVnZXIudmFsdWVPZigzKVxuXG5mdW5jdGlvbiBQb2ludCAoY3VydmUsIHgsIHksIHopIHtcbiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKHosIHVuZGVmaW5lZCwgJ01pc3NpbmcgWiBjb29yZGluYXRlJylcblxuICB0aGlzLmN1cnZlID0gY3VydmVcbiAgdGhpcy54ID0geFxuICB0aGlzLnkgPSB5XG4gIHRoaXMueiA9IHpcbiAgdGhpcy5fekludiA9IG51bGxcblxuICB0aGlzLmNvbXByZXNzZWQgPSB0cnVlXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICd6SW52Jywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fekludiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fekludiA9IHRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fekludlxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUG9pbnQucHJvdG90eXBlLCAnYWZmaW5lWCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMueC5tdWx0aXBseSh0aGlzLnpJbnYpLm1vZCh0aGlzLmN1cnZlLnApXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICdhZmZpbmVZJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy55Lm11bHRpcGx5KHRoaXMuekludikubW9kKHRoaXMuY3VydmUucClcbiAgfVxufSlcblxuUG9pbnQuZnJvbUFmZmluZSA9IGZ1bmN0aW9uIChjdXJ2ZSwgeCwgeSkge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCB4LCB5LCBCaWdJbnRlZ2VyLk9ORSlcbn1cblxuUG9pbnQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBpZiAob3RoZXIgPT09IHRoaXMpIHJldHVybiB0cnVlXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiB0aGlzLmN1cnZlLmlzSW5maW5pdHkob3RoZXIpXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkob3RoZXIpKSByZXR1cm4gdGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpXG5cbiAgLy8gdSA9IFkyICogWjEgLSBZMSAqIFoyXG4gIHZhciB1ID0gb3RoZXIueS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucClcblxuICBpZiAodS5zaWdudW0oKSAhPT0gMCkgcmV0dXJuIGZhbHNlXG5cbiAgLy8gdiA9IFgyICogWjEgLSBYMSAqIFoyXG4gIHZhciB2ID0gb3RoZXIueC5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC5tdWx0aXBseShvdGhlci56KSkubW9kKHRoaXMuY3VydmUucClcblxuICByZXR1cm4gdi5zaWdudW0oKSA9PT0gMFxufVxuXG5Qb2ludC5wcm90b3R5cGUubmVnYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IHRoaXMuY3VydmUucC5zdWJ0cmFjdCh0aGlzLnkpXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB0aGlzLngsIHksIHRoaXMueilcbn1cblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChiKSB7XG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiBiXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkoYikpIHJldHVybiB0aGlzXG5cbiAgdmFyIHgxID0gdGhpcy54XG4gIHZhciB5MSA9IHRoaXMueVxuICB2YXIgeDIgPSBiLnhcbiAgdmFyIHkyID0gYi55XG5cbiAgLy8gdSA9IFkyICogWjEgLSBZMSAqIFoyXG4gIHZhciB1ID0geTIubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh5MS5tdWx0aXBseShiLnopKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgdmFyIHYgPSB4Mi5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHgxLm11bHRpcGx5KGIueikpLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgaWYgKHYuc2lnbnVtKCkgPT09IDApIHtcbiAgICBpZiAodS5zaWdudW0oKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMudHdpY2UoKSAvLyB0aGlzID09IGIsIHNvIGRvdWJsZVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5IC8vIHRoaXMgPSAtYiwgc28gaW5maW5pdHlcbiAgfVxuXG4gIHZhciB2MiA9IHYuc3F1YXJlKClcbiAgdmFyIHYzID0gdjIubXVsdGlwbHkodilcbiAgdmFyIHgxdjIgPSB4MS5tdWx0aXBseSh2MilcbiAgdmFyIHp1MiA9IHUuc3F1YXJlKCkubXVsdGlwbHkodGhpcy56KVxuXG4gIC8vIHgzID0gdiAqICh6MiAqICh6MSAqIHVeMiAtIDIgKiB4MSAqIHZeMikgLSB2XjMpXG4gIHZhciB4MyA9IHp1Mi5zdWJ0cmFjdCh4MXYyLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkoYi56KS5zdWJ0cmFjdCh2MykubXVsdGlwbHkodikubW9kKHRoaXMuY3VydmUucClcbiAgLy8geTMgPSB6MiAqICgzICogeDEgKiB1ICogdl4yIC0geTEgKiB2XjMgLSB6MSAqIHVeMykgKyB1ICogdl4zXG4gIHZhciB5MyA9IHgxdjIubXVsdGlwbHkoVEhSRUUpLm11bHRpcGx5KHUpLnN1YnRyYWN0KHkxLm11bHRpcGx5KHYzKSkuc3VidHJhY3QoenUyLm11bHRpcGx5KHUpKS5tdWx0aXBseShiLnopLmFkZCh1Lm11bHRpcGx5KHYzKSkubW9kKHRoaXMuY3VydmUucClcbiAgLy8gejMgPSB2XjMgKiB6MSAqIHoyXG4gIHZhciB6MyA9IHYzLm11bHRpcGx5KHRoaXMueikubXVsdGlwbHkoYi56KS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIHJldHVybiBuZXcgUG9pbnQodGhpcy5jdXJ2ZSwgeDMsIHkzLCB6Mylcbn1cblxuUG9pbnQucHJvdG90eXBlLnR3aWNlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gdGhpc1xuICBpZiAodGhpcy55LnNpZ251bSgpID09PSAwKSByZXR1cm4gdGhpcy5jdXJ2ZS5pbmZpbml0eVxuXG4gIHZhciB4MSA9IHRoaXMueFxuICB2YXIgeTEgPSB0aGlzLnlcblxuICB2YXIgeTF6MSA9IHkxLm11bHRpcGx5KHRoaXMueikubW9kKHRoaXMuY3VydmUucClcbiAgdmFyIHkxc3F6MSA9IHkxejEubXVsdGlwbHkoeTEpLm1vZCh0aGlzLmN1cnZlLnApXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hXG5cbiAgLy8gdyA9IDMgKiB4MV4yICsgYSAqIHoxXjJcbiAgdmFyIHcgPSB4MS5zcXVhcmUoKS5tdWx0aXBseShUSFJFRSlcblxuICBpZiAoYS5zaWdudW0oKSAhPT0gMCkge1xuICAgIHcgPSB3LmFkZCh0aGlzLnouc3F1YXJlKCkubXVsdGlwbHkoYSkpXG4gIH1cblxuICB3ID0gdy5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB4MyA9IDIgKiB5MSAqIHoxICogKHdeMiAtIDggKiB4MSAqIHkxXjIgKiB6MSlcbiAgdmFyIHgzID0gdy5zcXVhcmUoKS5zdWJ0cmFjdCh4MS5zaGlmdExlZnQoMykubXVsdGlwbHkoeTFzcXoxKSkuc2hpZnRMZWZ0KDEpLm11bHRpcGx5KHkxejEpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHkzID0gNCAqIHkxXjIgKiB6MSAqICgzICogdyAqIHgxIC0gMiAqIHkxXjIgKiB6MSkgLSB3XjNcbiAgdmFyIHkzID0gdy5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkoeDEpLnN1YnRyYWN0KHkxc3F6MS5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseSh5MXNxejEpLnN1YnRyYWN0KHcucG93KDMpKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB6MyA9IDggKiAoeTEgKiB6MSleM1xuICB2YXIgejMgPSB5MXoxLnBvdygzKS5zaGlmdExlZnQoMykubW9kKHRoaXMuY3VydmUucClcblxuICByZXR1cm4gbmV3IFBvaW50KHRoaXMuY3VydmUsIHgzLCB5MywgejMpXG59XG5cbi8vIFNpbXBsZSBOQUYgKE5vbi1BZGphY2VudCBGb3JtKSBtdWx0aXBsaWNhdGlvbiBhbGdvcml0aG1cbi8vIFRPRE86IG1vZHVsYXJpemUgdGhlIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuUG9pbnQucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKGspIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIHRoaXNcbiAgaWYgKGsuc2lnbnVtKCkgPT09IDApIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5XG5cbiAgdmFyIGUgPSBrXG4gIHZhciBoID0gZS5tdWx0aXBseShUSFJFRSlcblxuICB2YXIgbmVnID0gdGhpcy5uZWdhdGUoKVxuICB2YXIgUiA9IHRoaXNcblxuICBmb3IgKHZhciBpID0gaC5iaXRMZW5ndGgoKSAtIDI7IGkgPiAwOyAtLWkpIHtcbiAgICB2YXIgaEJpdCA9IGgudGVzdEJpdChpKVxuICAgIHZhciBlQml0ID0gZS50ZXN0Qml0KGkpXG5cbiAgICBSID0gUi50d2ljZSgpXG5cbiAgICBpZiAoaEJpdCAhPT0gZUJpdCkge1xuICAgICAgUiA9IFIuYWRkKGhCaXQgPyB0aGlzIDogbmVnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSXG59XG5cbi8vIENvbXB1dGUgdGhpcypqICsgeCprIChzaW11bHRhbmVvdXMgbXVsdGlwbGljYXRpb24pXG5Qb2ludC5wcm90b3R5cGUubXVsdGlwbHlUd28gPSBmdW5jdGlvbiAoaiwgeCwgaykge1xuICB2YXIgaSA9IE1hdGgubWF4KGouYml0TGVuZ3RoKCksIGsuYml0TGVuZ3RoKCkpIC0gMVxuICB2YXIgUiA9IHRoaXMuY3VydmUuaW5maW5pdHlcbiAgdmFyIGJvdGggPSB0aGlzLmFkZCh4KVxuXG4gIHdoaWxlIChpID49IDApIHtcbiAgICB2YXIgakJpdCA9IGoudGVzdEJpdChpKVxuICAgIHZhciBrQml0ID0gay50ZXN0Qml0KGkpXG5cbiAgICBSID0gUi50d2ljZSgpXG5cbiAgICBpZiAoakJpdCkge1xuICAgICAgaWYgKGtCaXQpIHtcbiAgICAgICAgUiA9IFIuYWRkKGJvdGgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSID0gUi5hZGQodGhpcylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtCaXQpIHtcbiAgICAgIFIgPSBSLmFkZCh4KVxuICAgIH1cbiAgICAtLWlcbiAgfVxuXG4gIHJldHVybiBSXG59XG5cblBvaW50LnByb3RvdHlwZS5nZXRFbmNvZGVkID0gZnVuY3Rpb24gKGNvbXByZXNzZWQpIHtcbiAgaWYgKGNvbXByZXNzZWQgPT0gbnVsbCkgY29tcHJlc3NlZCA9IHRoaXMuY29tcHJlc3NlZFxuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gQnVmZmVyLmFsbG9jKDEsIDApIC8vIEluZmluaXR5IHBvaW50IGVuY29kZWQgaXMgc2ltcGx5ICcwMCdcblxuICB2YXIgeCA9IHRoaXMuYWZmaW5lWFxuICB2YXIgeSA9IHRoaXMuYWZmaW5lWVxuICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuY3VydmUucExlbmd0aFxuICB2YXIgYnVmZmVyXG5cbiAgLy8gMHgwMi8weDAzIHwgWFxuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgYnl0ZUxlbmd0aClcbiAgICBidWZmZXIud3JpdGVVSW50OCh5LmlzRXZlbigpID8gMHgwMiA6IDB4MDMsIDApXG5cbiAgLy8gMHgwNCB8IFggfCBZXG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aClcbiAgICBidWZmZXIud3JpdGVVSW50OCgweDA0LCAwKVxuXG4gICAgeS50b0J1ZmZlcihieXRlTGVuZ3RoKS5jb3B5KGJ1ZmZlciwgMSArIGJ5dGVMZW5ndGgpXG4gIH1cblxuICB4LnRvQnVmZmVyKGJ5dGVMZW5ndGgpLmNvcHkoYnVmZmVyLCAxKVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxuUG9pbnQuZGVjb2RlRnJvbSA9IGZ1bmN0aW9uIChjdXJ2ZSwgYnVmZmVyKSB7XG4gIHZhciB0eXBlID0gYnVmZmVyLnJlYWRVSW50OCgwKVxuICB2YXIgY29tcHJlc3NlZCA9ICh0eXBlICE9PSA0KVxuXG4gIHZhciBieXRlTGVuZ3RoID0gTWF0aC5mbG9vcigoY3VydmUucC5iaXRMZW5ndGgoKSArIDcpIC8gOClcbiAgdmFyIHggPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEsIDEgKyBieXRlTGVuZ3RoKSlcblxuICB2YXIgUVxuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIGFzc2VydC5lcXVhbChidWZmZXIubGVuZ3RoLCBieXRlTGVuZ3RoICsgMSwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJylcbiAgICBhc3NlcnQodHlwZSA9PT0gMHgwMiB8fCB0eXBlID09PSAweDAzLCAnSW52YWxpZCBzZXF1ZW5jZSB0YWcnKVxuXG4gICAgdmFyIGlzT2RkID0gKHR5cGUgPT09IDB4MDMpXG4gICAgUSA9IGN1cnZlLnBvaW50RnJvbVgoaXNPZGQsIHgpXG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5sZW5ndGgsIDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aCwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJylcblxuICAgIHZhciB5ID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1ZmZlci5zbGljZSgxICsgYnl0ZUxlbmd0aCkpXG4gICAgUSA9IFBvaW50LmZyb21BZmZpbmUoY3VydmUsIHgsIHkpXG4gIH1cblxuICBRLmNvbXByZXNzZWQgPSBjb21wcmVzc2VkXG4gIHJldHVybiBRXG59XG5cblBvaW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuICcoSU5GSU5JVFkpJ1xuXG4gIHJldHVybiAnKCcgKyB0aGlzLmFmZmluZVgudG9TdHJpbmcoKSArICcsJyArIHRoaXMuYWZmaW5lWS50b1N0cmluZygpICsgJyknXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnRcbiIsIi8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG5mdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJpZ0ludGVnZXIpKVxuICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihhLCBiLCBjKVxuXG4gIGlmIChhICE9IG51bGwpIHtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSkgdGhpcy5mcm9tTnVtYmVyKGEsIGIsIGMpXG4gICAgZWxzZSBpZiAoYiA9PSBudWxsICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIGEpIHRoaXMuZnJvbVN0cmluZyhhLCAyNTYpXG4gICAgZWxzZSB0aGlzLmZyb21TdHJpbmcoYSwgYilcbiAgfVxufVxuXG52YXIgcHJvdG8gPSBCaWdJbnRlZ2VyLnByb3RvdHlwZVxuXG4vLyBkdWNrLXR5cGVkIGlzQmlnSW50ZWdlclxucHJvdG8uX19iaWdpID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIgPSBmdW5jdGlvbiAob2JqLCBjaGVja192ZXIpIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19iaWdpICYmICghY2hlY2tfdmVyIHx8IG9iai5fX2JpZ2kgPT09IHByb3RvLl9fYmlnaSlcbn1cblxuLy8gQml0cyBwZXIgZGlnaXRcbnZhciBkYml0c1xuXG4vLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG4vLyBjIGlzIGluaXRpYWwgY2FycnksIHJldHVybnMgZmluYWwgY2FycnkuXG4vLyBjIDwgMypkdmFsdWUsIHggPCAyKmR2YWx1ZSwgdGhpc19pIDwgZHZhbHVlXG4vLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxuXG4vLyBhbTE6IHVzZSBhIHNpbmdsZSBtdWx0IGFuZCBkaXZpZGUgdG8gZ2V0IHRoZSBoaWdoIGJpdHMsXG4vLyBtYXggZGlnaXQgYml0cyBzaG91bGQgYmUgMjYgYmVjYXVzZVxuLy8gbWF4IGludGVybmFsIHZhbHVlID0gMipkdmFsdWVeMi0yKmR2YWx1ZSAoPCAyXjUzKVxuZnVuY3Rpb24gYW0xKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGNcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKVxuICAgIHdbaisrXSA9IHYgJiAweDNmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuXG4vLyBNYXggZGlnaXQgYml0cyBzaG91bGQgYmUgPD0gMzAgYmVjYXVzZSB3ZSBkbyBiaXR3aXNlIG9wc1xuLy8gb24gdmFsdWVzIHVwIHRvIDIqaGR2YWx1ZV4yLWhkdmFsdWUtMSAoPCAyXjMxKVxuZnVuY3Rpb24gYW0yKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgdmFyIHhsID0geCAmIDB4N2ZmZixcbiAgICB4aCA9IHggPj4gMTVcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldICYgMHg3ZmZmXG4gICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTVcbiAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bFxuICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDdmZmYpIDw8IDE1KSArIHdbal0gKyAoYyAmIDB4M2ZmZmZmZmYpXG4gICAgYyA9IChsID4+PiAzMCkgKyAobSA+Pj4gMTUpICsgeGggKiBoICsgKGMgPj4+IDMwKVxuICAgIHdbaisrXSA9IGwgJiAweDNmZmZmZmZmXG4gIH1cbiAgcmV0dXJuIGNcbn1cbi8vIEFsdGVybmF0ZWx5LCBzZXQgbWF4IGRpZ2l0IGJpdHMgdG8gMjggc2luY2Ugc29tZVxuLy8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuZnVuY3Rpb24gYW0zKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgdmFyIHhsID0geCAmIDB4M2ZmZixcbiAgICB4aCA9IHggPj4gMTRcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldICYgMHgzZmZmXG4gICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTRcbiAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bFxuICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDNmZmYpIDw8IDE0KSArIHdbal0gKyBjXG4gICAgYyA9IChsID4+IDI4KSArIChtID4+IDE0KSArIHhoICogaFxuICAgIHdbaisrXSA9IGwgJiAweGZmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuXG4vLyB3dGY/XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMVxuZGJpdHMgPSAyNlxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQiA9IGRiaXRzXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5ETSA9ICgoMSA8PCBkYml0cykgLSAxKVxudmFyIERWID0gQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMSA8PCBkYml0cylcblxudmFyIEJJX0ZQID0gNTJcbkJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5GMSA9IEJJX0ZQIC0gZGJpdHNcbkJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMiAqIGRiaXRzIC0gQklfRlBcblxuLy8gRGlnaXQgY29udmVyc2lvbnNcbnZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJcbnZhciBCSV9SQyA9IG5ldyBBcnJheSgpXG52YXIgcnIsIHZ2XG5yciA9IFwiMFwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2XG5yciA9IFwiYVwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2dlxucnIgPSBcIkFcIi5jaGFyQ29kZUF0KDApXG5mb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnZcblxuZnVuY3Rpb24gaW50MmNoYXIobikge1xuICByZXR1cm4gQklfUk0uY2hhckF0KG4pXG59XG5cbmZ1bmN0aW9uIGludEF0KHMsIGkpIHtcbiAgdmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldXG4gIHJldHVybiAoYyA9PSBudWxsKSA/IC0xIDogY1xufVxuXG4vLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuZnVuY3Rpb24gYm5wQ29weVRvKHIpIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gdGhpc1tpXVxuICByLnQgPSB0aGlzLnRcbiAgci5zID0gdGhpcy5zXG59XG5cbi8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIGludGVnZXIgdmFsdWUgeCwgLURWIDw9IHggPCBEVlxuZnVuY3Rpb24gYm5wRnJvbUludCh4KSB7XG4gIHRoaXMudCA9IDFcbiAgdGhpcy5zID0gKHggPCAwKSA/IC0xIDogMFxuICBpZiAoeCA+IDApIHRoaXNbMF0gPSB4XG4gIGVsc2UgaWYgKHggPCAtMSkgdGhpc1swXSA9IHggKyBEVlxuICBlbHNlIHRoaXMudCA9IDBcbn1cblxuLy8gcmV0dXJuIGJpZ2ludCBpbml0aWFsaXplZCB0byB2YWx1ZVxuZnVuY3Rpb24gbmJ2KGkpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHIuZnJvbUludChpKVxuICByZXR1cm4gclxufVxuXG4vLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG5mdW5jdGlvbiBibnBGcm9tU3RyaW5nKHMsIGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgdmFyIGtcbiAgaWYgKGIgPT0gMTYpIGsgPSA0XG4gIGVsc2UgaWYgKGIgPT0gOCkgayA9IDNcbiAgZWxzZSBpZiAoYiA9PSAyNTYpIGsgPSA4OyAvLyBieXRlIGFycmF5XG4gIGVsc2UgaWYgKGIgPT0gMikgayA9IDFcbiAgZWxzZSBpZiAoYiA9PSAzMikgayA9IDVcbiAgZWxzZSBpZiAoYiA9PSA0KSBrID0gMlxuICBlbHNlIHtcbiAgICBzZWxmLmZyb21SYWRpeChzLCBiKVxuICAgIHJldHVyblxuICB9XG4gIHNlbGYudCA9IDBcbiAgc2VsZi5zID0gMFxuICB2YXIgaSA9IHMubGVuZ3RoLFxuICAgIG1pID0gZmFsc2UsXG4gICAgc2ggPSAwXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHZhciB4ID0gKGsgPT0gOCkgPyBzW2ldICYgMHhmZiA6IGludEF0KHMsIGkpXG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBpZiAocy5jaGFyQXQoaSkgPT0gXCItXCIpIG1pID0gdHJ1ZVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgbWkgPSBmYWxzZVxuICAgIGlmIChzaCA9PSAwKVxuICAgICAgc2VsZltzZWxmLnQrK10gPSB4XG4gICAgZWxzZSBpZiAoc2ggKyBrID4gc2VsZi5EQikge1xuICAgICAgc2VsZltzZWxmLnQgLSAxXSB8PSAoeCAmICgoMSA8PCAoc2VsZi5EQiAtIHNoKSkgLSAxKSkgPDwgc2hcbiAgICAgIHNlbGZbc2VsZi50KytdID0gKHggPj4gKHNlbGYuREIgLSBzaCkpXG4gICAgfSBlbHNlXG4gICAgICBzZWxmW3NlbGYudCAtIDFdIHw9IHggPDwgc2hcbiAgICBzaCArPSBrXG4gICAgaWYgKHNoID49IHNlbGYuREIpIHNoIC09IHNlbGYuREJcbiAgfVxuICBpZiAoayA9PSA4ICYmIChzWzBdICYgMHg4MCkgIT0gMCkge1xuICAgIHNlbGYucyA9IC0xXG4gICAgaWYgKHNoID4gMCkgc2VsZltzZWxmLnQgLSAxXSB8PSAoKDEgPDwgKHNlbGYuREIgLSBzaCkpIC0gMSkgPDwgc2hcbiAgfVxuICBzZWxmLmNsYW1wKClcbiAgaWYgKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oc2VsZiwgc2VsZilcbn1cblxuLy8gKHByb3RlY3RlZCkgY2xhbXAgb2ZmIGV4Y2VzcyBoaWdoIHdvcmRzXG5mdW5jdGlvbiBibnBDbGFtcCgpIHtcbiAgdmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNXG4gIHdoaWxlICh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50IC0gMV0gPT0gYyktLXRoaXMudFxufVxuXG4vLyAocHVibGljKSByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGF0aW9uIGluIGdpdmVuIHJhZGl4XG5mdW5jdGlvbiBiblRvU3RyaW5nKGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLnMgPCAwKSByZXR1cm4gXCItXCIgKyBzZWxmLm5lZ2F0ZSgpXG4gICAgLnRvU3RyaW5nKGIpXG4gIHZhciBrXG4gIGlmIChiID09IDE2KSBrID0gNFxuICBlbHNlIGlmIChiID09IDgpIGsgPSAzXG4gIGVsc2UgaWYgKGIgPT0gMikgayA9IDFcbiAgZWxzZSBpZiAoYiA9PSAzMikgayA9IDVcbiAgZWxzZSBpZiAoYiA9PSA0KSBrID0gMlxuICBlbHNlIHJldHVybiBzZWxmLnRvUmFkaXgoYilcbiAgdmFyIGttID0gKDEgPDwgaykgLSAxLFxuICAgIGQsIG0gPSBmYWxzZSxcbiAgICByID0gXCJcIixcbiAgICBpID0gc2VsZi50XG4gIHZhciBwID0gc2VsZi5EQiAtIChpICogc2VsZi5EQikgJSBrXG4gIGlmIChpLS0gPiAwKSB7XG4gICAgaWYgKHAgPCBzZWxmLkRCICYmIChkID0gc2VsZltpXSA+PiBwKSA+IDApIHtcbiAgICAgIG0gPSB0cnVlXG4gICAgICByID0gaW50MmNoYXIoZClcbiAgICB9XG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgaWYgKHAgPCBrKSB7XG4gICAgICAgIGQgPSAoc2VsZltpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoayAtIHApXG4gICAgICAgIGQgfD0gc2VsZlstLWldID4+IChwICs9IHNlbGYuREIgLSBrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZCA9IChzZWxmW2ldID4+IChwIC09IGspKSAmIGttXG4gICAgICAgIGlmIChwIDw9IDApIHtcbiAgICAgICAgICBwICs9IHNlbGYuREJcbiAgICAgICAgICAtLWlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGQgPiAwKSBtID0gdHJ1ZVxuICAgICAgaWYgKG0pIHIgKz0gaW50MmNoYXIoZClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG0gPyByIDogXCIwXCJcbn1cblxuLy8gKHB1YmxpYykgLXRoaXNcbmZ1bmN0aW9uIGJuTmVnYXRlKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHx0aGlzfFxuZnVuY3Rpb24gYm5BYnMoKSB7XG4gIHJldHVybiAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpc1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gKyBpZiB0aGlzID4gYSwgLSBpZiB0aGlzIDwgYSwgMCBpZiBlcXVhbFxuZnVuY3Rpb24gYm5Db21wYXJlVG8oYSkge1xuICB2YXIgciA9IHRoaXMucyAtIGEuc1xuICBpZiAociAhPSAwKSByZXR1cm4gclxuICB2YXIgaSA9IHRoaXMudFxuICByID0gaSAtIGEudFxuICBpZiAociAhPSAwKSByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByXG4gIHdoaWxlICgtLWkgPj0gMClcbiAgICBpZiAoKHIgPSB0aGlzW2ldIC0gYVtpXSkgIT0gMCkgcmV0dXJuIHJcbiAgcmV0dXJuIDBcbn1cblxuLy8gcmV0dXJucyBiaXQgbGVuZ3RoIG9mIHRoZSBpbnRlZ2VyIHhcbmZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgdmFyIHIgPSAxLFxuICAgIHRcbiAgaWYgKCh0ID0geCA+Pj4gMTYpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMTZcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDgpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gOFxuICB9XG4gIGlmICgodCA9IHggPj4gNCkgIT0gMCkge1xuICAgIHggPSB0XG4gICAgciArPSA0XG4gIH1cbiAgaWYgKCh0ID0geCA+PiAyKSAhPSAwKSB7XG4gICAgeCA9IHRcbiAgICByICs9IDJcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDEpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMVxuICB9XG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHJldHVybiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gXCJ0aGlzXCJcbmZ1bmN0aW9uIGJuQml0TGVuZ3RoKCkge1xuICBpZiAodGhpcy50IDw9IDApIHJldHVybiAwXG4gIHJldHVybiB0aGlzLkRCICogKHRoaXMudCAtIDEpICsgbmJpdHModGhpc1t0aGlzLnQgLSAxXSBeICh0aGlzLnMgJiB0aGlzLkRNKSlcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gXCJ0aGlzXCJcbmZ1bmN0aW9uIGJuQnl0ZUxlbmd0aCgpIHtcbiAgcmV0dXJuIHRoaXMuYml0TGVuZ3RoKCkgPj4gM1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuKkRCXG5mdW5jdGlvbiBibnBETFNoaWZ0VG8obiwgcikge1xuICB2YXIgaVxuICBmb3IgKGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkgcltpICsgbl0gPSB0aGlzW2ldXG4gIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkgcltpXSA9IDBcbiAgci50ID0gdGhpcy50ICsgblxuICByLnMgPSB0aGlzLnNcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gbipEQlxuZnVuY3Rpb24gYm5wRFJTaGlmdFRvKG4sIHIpIHtcbiAgZm9yICh2YXIgaSA9IG47IGkgPCB0aGlzLnQ7ICsraSkgcltpIC0gbl0gPSB0aGlzW2ldXG4gIHIudCA9IE1hdGgubWF4KHRoaXMudCAtIG4sIDApXG4gIHIucyA9IHRoaXMuc1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG5mdW5jdGlvbiBibnBMU2hpZnRUbyhuLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgYnMgPSBuICUgc2VsZi5EQlxuICB2YXIgY2JzID0gc2VsZi5EQiAtIGJzXG4gIHZhciBibSA9ICgxIDw8IGNicykgLSAxXG4gIHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHNlbGYuREIpLFxuICAgIGMgPSAoc2VsZi5zIDw8IGJzKSAmIHNlbGYuRE0sXG4gICAgaVxuICBmb3IgKGkgPSBzZWxmLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgIHJbaSArIGRzICsgMV0gPSAoc2VsZltpXSA+PiBjYnMpIHwgY1xuICAgIGMgPSAoc2VsZltpXSAmIGJtKSA8PCBic1xuICB9XG4gIGZvciAoaSA9IGRzIC0gMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSAwXG4gIHJbZHNdID0gY1xuICByLnQgPSBzZWxmLnQgKyBkcyArIDFcbiAgci5zID0gc2VsZi5zXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuXG5mdW5jdGlvbiBibnBSU2hpZnRUbyhuLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByLnMgPSBzZWxmLnNcbiAgdmFyIGRzID0gTWF0aC5mbG9vcihuIC8gc2VsZi5EQilcbiAgaWYgKGRzID49IHNlbGYudCkge1xuICAgIHIudCA9IDBcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYnMgPSBuICUgc2VsZi5EQlxuICB2YXIgY2JzID0gc2VsZi5EQiAtIGJzXG4gIHZhciBibSA9ICgxIDw8IGJzKSAtIDFcbiAgclswXSA9IHNlbGZbZHNdID4+IGJzXG4gIGZvciAodmFyIGkgPSBkcyArIDE7IGkgPCBzZWxmLnQ7ICsraSkge1xuICAgIHJbaSAtIGRzIC0gMV0gfD0gKHNlbGZbaV0gJiBibSkgPDwgY2JzXG4gICAgcltpIC0gZHNdID0gc2VsZltpXSA+PiBic1xuICB9XG4gIGlmIChicyA+IDApIHJbc2VsZi50IC0gZHMgLSAxXSB8PSAoc2VsZi5zICYgYm0pIDw8IGNic1xuICByLnQgPSBzZWxmLnQgLSBkc1xuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgLSBhXG5mdW5jdGlvbiBibnBTdWJUbyhhLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSA9IDAsXG4gICAgYyA9IDAsXG4gICAgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBjICs9IHNlbGZbaV0gLSBhW2ldXG4gICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICBjID4+PSBzZWxmLkRCXG4gIH1cbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGMgLT0gYS5zXG4gICAgd2hpbGUgKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBzZWxmLnNcbiAgfSBlbHNlIHtcbiAgICBjICs9IHNlbGYuc1xuICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICBjIC09IGFbaV1cbiAgICAgIHJbaSsrXSA9IGMgJiBzZWxmLkRNXG4gICAgICBjID4+PSBzZWxmLkRCXG4gICAgfVxuICAgIGMgLT0gYS5zXG4gIH1cbiAgci5zID0gKGMgPCAwKSA/IC0xIDogMFxuICBpZiAoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWICsgY1xuICBlbHNlIGlmIChjID4gMCkgcltpKytdID0gY1xuICByLnQgPSBpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVRvKGEsIHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpLFxuICAgIHkgPSBhLmFicygpXG4gIHZhciBpID0geC50XG4gIHIudCA9IGkgKyB5LnRcbiAgd2hpbGUgKC0taSA+PSAwKSByW2ldID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgeS50OyArK2kpIHJbaSArIHgudF0gPSB4LmFtKDAsIHlbaV0sIHIsIGksIDAsIHgudClcbiAgci5zID0gMFxuICByLmNsYW1wKClcbiAgaWYgKHRoaXMucyAhPSBhLnMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbmZ1bmN0aW9uIGJucFNxdWFyZVRvKHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpXG4gIHZhciBpID0gci50ID0gMiAqIHgudFxuICB3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwXG4gIGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpIHtcbiAgICB2YXIgYyA9IHguYW0oaSwgeFtpXSwgciwgMiAqIGksIDAsIDEpXG4gICAgaWYgKChyW2kgKyB4LnRdICs9IHguYW0oaSArIDEsIDIgKiB4W2ldLCByLCAyICogaSArIDEsIGMsIHgudCAtIGkgLSAxKSkgPj0geC5EVikge1xuICAgICAgcltpICsgeC50XSAtPSB4LkRWXG4gICAgICByW2kgKyB4LnQgKyAxXSA9IDFcbiAgICB9XG4gIH1cbiAgaWYgKHIudCA+IDApIHJbci50IC0gMV0gKz0geC5hbShpLCB4W2ldLCByLCAyICogaSwgMCwgMSlcbiAgci5zID0gMFxuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgZGl2aWRlIHRoaXMgYnkgbSwgcXVvdGllbnQgYW5kIHJlbWFpbmRlciB0byBxLCByIChIQUMgMTQuMjApXG4vLyByICE9IHEsIHRoaXMgIT0gbS4gIHEgb3IgciBtYXkgYmUgbnVsbC5cbmZ1bmN0aW9uIGJucERpdlJlbVRvKG0sIHEsIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBwbSA9IG0uYWJzKClcbiAgaWYgKHBtLnQgPD0gMCkgcmV0dXJuXG4gIHZhciBwdCA9IHNlbGYuYWJzKClcbiAgaWYgKHB0LnQgPCBwbS50KSB7XG4gICAgaWYgKHEgIT0gbnVsbCkgcS5mcm9tSW50KDApXG4gICAgaWYgKHIgIT0gbnVsbCkgc2VsZi5jb3B5VG8ocilcbiAgICByZXR1cm5cbiAgfVxuICBpZiAociA9PSBudWxsKSByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB2YXIgeSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgdHMgPSBzZWxmLnMsXG4gICAgbXMgPSBtLnNcbiAgdmFyIG5zaCA9IHNlbGYuREIgLSBuYml0cyhwbVtwbS50IC0gMV0pOyAvLyBub3JtYWxpemUgbW9kdWx1c1xuICBpZiAobnNoID4gMCkge1xuICAgIHBtLmxTaGlmdFRvKG5zaCwgeSlcbiAgICBwdC5sU2hpZnRUbyhuc2gsIHIpXG4gIH0gZWxzZSB7XG4gICAgcG0uY29weVRvKHkpXG4gICAgcHQuY29weVRvKHIpXG4gIH1cbiAgdmFyIHlzID0geS50XG4gIHZhciB5MCA9IHlbeXMgLSAxXVxuICBpZiAoeTAgPT0gMCkgcmV0dXJuXG4gIHZhciB5dCA9IHkwICogKDEgPDwgc2VsZi5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gc2VsZi5GMiA6IDApXG4gIHZhciBkMSA9IHNlbGYuRlYgLyB5dCxcbiAgICBkMiA9ICgxIDw8IHNlbGYuRjEpIC8geXQsXG4gICAgZSA9IDEgPDwgc2VsZi5GMlxuICB2YXIgaSA9IHIudCxcbiAgICBqID0gaSAtIHlzLFxuICAgIHQgPSAocSA9PSBudWxsKSA/IG5ldyBCaWdJbnRlZ2VyKCkgOiBxXG4gIHkuZGxTaGlmdFRvKGosIHQpXG4gIGlmIChyLmNvbXBhcmVUbyh0KSA+PSAwKSB7XG4gICAgcltyLnQrK10gPSAxXG4gICAgci5zdWJUbyh0LCByKVxuICB9XG4gIEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbyh5cywgdClcbiAgdC5zdWJUbyh5LCB5KTsgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcbiAgd2hpbGUgKHkudCA8IHlzKSB5W3kudCsrXSA9IDBcbiAgd2hpbGUgKC0taiA+PSAwKSB7XG4gICAgLy8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXRcbiAgICB2YXIgcWQgPSAoclstLWldID09IHkwKSA/IHNlbGYuRE0gOiBNYXRoLmZsb29yKHJbaV0gKiBkMSArIChyW2kgLSAxXSArIGUpICogZDIpXG4gICAgaWYgKChyW2ldICs9IHkuYW0oMCwgcWQsIHIsIGosIDAsIHlzKSkgPCBxZCkgeyAvLyBUcnkgaXQgb3V0XG4gICAgICB5LmRsU2hpZnRUbyhqLCB0KVxuICAgICAgci5zdWJUbyh0LCByKVxuICAgICAgd2hpbGUgKHJbaV0gPCAtLXFkKSByLnN1YlRvKHQsIHIpXG4gICAgfVxuICB9XG4gIGlmIChxICE9IG51bGwpIHtcbiAgICByLmRyU2hpZnRUbyh5cywgcSlcbiAgICBpZiAodHMgIT0gbXMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhxLCBxKVxuICB9XG4gIHIudCA9IHlzXG4gIHIuY2xhbXAoKVxuICBpZiAobnNoID4gMCkgci5yU2hpZnRUbyhuc2gsIHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcbiAgaWYgKHRzIDwgMCkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIsIHIpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbmZ1bmN0aW9uIGJuTW9kKGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuYWJzKClcbiAgICAuZGl2UmVtVG8oYSwgbnVsbCwgcilcbiAgaWYgKHRoaXMucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIGEuc3ViVG8ociwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gTW9kdWxhciByZWR1Y3Rpb24gdXNpbmcgXCJjbGFzc2ljXCIgYWxnb3JpdGhtXG5mdW5jdGlvbiBDbGFzc2ljKG0pIHtcbiAgdGhpcy5tID0gbVxufVxuXG5mdW5jdGlvbiBjQ29udmVydCh4KSB7XG4gIGlmICh4LnMgPCAwIHx8IHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkgcmV0dXJuIHgubW9kKHRoaXMubSlcbiAgZWxzZSByZXR1cm4geFxufVxuXG5mdW5jdGlvbiBjUmV2ZXJ0KHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuZnVuY3Rpb24gY1JlZHVjZSh4KSB7XG4gIHguZGl2UmVtVG8odGhpcy5tLCBudWxsLCB4KVxufVxuXG5mdW5jdGlvbiBjTXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuZnVuY3Rpb24gY1NxclRvKHgsIHIpIHtcbiAgeC5zcXVhcmVUbyhyKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5DbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0ID0gY0NvbnZlcnRcbkNsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGNSZXZlcnRcbkNsYXNzaWMucHJvdG90eXBlLnJlZHVjZSA9IGNSZWR1Y2VcbkNsYXNzaWMucHJvdG90eXBlLm11bFRvID0gY011bFRvXG5DbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUb1xuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuLy8ganVzdGlmaWNhdGlvbjpcbi8vICAgICAgICAgeHkgPT0gMSAobW9kIG0pXG4vLyAgICAgICAgIHh5ID0gIDEra21cbi8vICAgeHkoMi14eSkgPSAoMStrbSkoMS1rbSlcbi8vIHhbeSgyLXh5KV0gPSAxLWteMm1eMlxuLy8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuLy8gaWYgeSBpcyAxL3ggbW9kIG0sIHRoZW4geSgyLXh5KSBpcyAxL3ggbW9kIG1eMlxuLy8gc2hvdWxkIHJlZHVjZSB4IGFuZCB5KDIteHkpIGJ5IG1eMiBhdCBlYWNoIHN0ZXAgdG8ga2VlcCBzaXplIGJvdW5kZWQuXG4vLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG5mdW5jdGlvbiBibnBJbnZEaWdpdCgpIHtcbiAgaWYgKHRoaXMudCA8IDEpIHJldHVybiAwXG4gIHZhciB4ID0gdGhpc1swXVxuICBpZiAoKHggJiAxKSA9PSAwKSByZXR1cm4gMFxuICB2YXIgeSA9IHggJiAzOyAvLyB5ID09IDEveCBtb2QgMl4yXG4gIHkgPSAoeSAqICgyIC0gKHggJiAweGYpICogeSkpICYgMHhmOyAvLyB5ID09IDEveCBtb2QgMl40XG4gIHkgPSAoeSAqICgyIC0gKHggJiAweGZmKSAqIHkpKSAmIDB4ZmY7IC8vIHkgPT0gMS94IG1vZCAyXjhcbiAgeSA9ICh5ICogKDIgLSAoKCh4ICYgMHhmZmZmKSAqIHkpICYgMHhmZmZmKSkpICYgMHhmZmZmOyAvLyB5ID09IDEveCBtb2QgMl4xNlxuICAvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHlcbiAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG4gIHkgPSAoeSAqICgyIC0geCAqIHkgJSB0aGlzLkRWKSkgJSB0aGlzLkRWOyAvLyB5ID09IDEveCBtb2QgMl5kYml0c1xuICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVlxuICByZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXlcbn1cblxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbmZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICB0aGlzLm0gPSBtXG4gIHRoaXMubXAgPSBtLmludkRpZ2l0KClcbiAgdGhpcy5tcGwgPSB0aGlzLm1wICYgMHg3ZmZmXG4gIHRoaXMubXBoID0gdGhpcy5tcCA+PiAxNVxuICB0aGlzLnVtID0gKDEgPDwgKG0uREIgLSAxNSkpIC0gMVxuICB0aGlzLm10MiA9IDIgKiBtLnRcbn1cblxuLy8geFIgbW9kIG1cbmZ1bmN0aW9uIG1vbnRDb252ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHguYWJzKClcbiAgICAuZGxTaGlmdFRvKHRoaXMubS50LCByKVxuICByLmRpdlJlbVRvKHRoaXMubSwgbnVsbCwgcilcbiAgaWYgKHgucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIHRoaXMubS5zdWJUbyhyLCByKVxuICByZXR1cm4gclxufVxuXG4vLyB4L1IgbW9kIG1cbmZ1bmN0aW9uIG1vbnRSZXZlcnQoeCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgeC5jb3B5VG8ocilcbiAgdGhpcy5yZWR1Y2UocilcbiAgcmV0dXJuIHJcbn1cblxuLy8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7XG4gIHdoaWxlICh4LnQgPD0gdGhpcy5tdDIpIC8vIHBhZCB4IHNvIGFtIGhhcyBlbm91Z2ggcm9vbSBsYXRlclxuICAgIHhbeC50KytdID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubS50OyArK2kpIHtcbiAgICAvLyBmYXN0ZXIgd2F5IG9mIGNhbGN1bGF0aW5nIHUwID0geFtpXSptcCBtb2QgRFZcbiAgICB2YXIgaiA9IHhbaV0gJiAweDdmZmZcbiAgICB2YXIgdTAgPSAoaiAqIHRoaXMubXBsICsgKCgoaiAqIHRoaXMubXBoICsgKHhbaV0gPj4gMTUpICogdGhpcy5tcGwpICYgdGhpcy51bSkgPDwgMTUpKSAmIHguRE1cbiAgICAvLyB1c2UgYW0gdG8gY29tYmluZSB0aGUgbXVsdGlwbHktc2hpZnQtYWRkIGludG8gb25lIGNhbGxcbiAgICBqID0gaSArIHRoaXMubS50XG4gICAgeFtqXSArPSB0aGlzLm0uYW0oMCwgdTAsIHgsIGksIDAsIHRoaXMubS50KVxuICAgIC8vIHByb3BhZ2F0ZSBjYXJyeVxuICAgIHdoaWxlICh4W2pdID49IHguRFYpIHtcbiAgICAgIHhbal0gLT0geC5EVlxuICAgICAgeFsrK2pdKytcbiAgICB9XG4gIH1cbiAgeC5jbGFtcCgpXG4gIHguZHJTaGlmdFRvKHRoaXMubS50LCB4KVxuICBpZiAoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSwgeClcbn1cblxuLy8gciA9IFwieF4yL1IgbW9kIG1cIjsgeCAhPSByXG5mdW5jdGlvbiBtb250U3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbi8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcbmZ1bmN0aW9uIG1vbnRNdWxUbyh4LCB5LCByKSB7XG4gIHgubXVsdGlwbHlUbyh5LCByKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5Nb250Z29tZXJ5LnByb3RvdHlwZS5jb252ZXJ0ID0gbW9udENvbnZlcnRcbk1vbnRnb21lcnkucHJvdG90eXBlLnJldmVydCA9IG1vbnRSZXZlcnRcbk1vbnRnb21lcnkucHJvdG90eXBlLnJlZHVjZSA9IG1vbnRSZWR1Y2Vcbk1vbnRnb21lcnkucHJvdG90eXBlLm11bFRvID0gbW9udE11bFRvXG5Nb250Z29tZXJ5LnByb3RvdHlwZS5zcXJUbyA9IG1vbnRTcXJUb1xuXG4vLyAocHJvdGVjdGVkKSB0cnVlIGlmZiB0aGlzIGlzIGV2ZW5cbmZ1bmN0aW9uIGJucElzRXZlbigpIHtcbiAgcmV0dXJuICgodGhpcy50ID4gMCkgPyAodGhpc1swXSAmIDEpIDogdGhpcy5zKSA9PSAwXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXNeZSwgZSA8IDJeMzIsIGRvaW5nIHNxciBhbmQgbXVsIHdpdGggXCJyXCIgKEhBQyAxNC43OSlcbmZ1bmN0aW9uIGJucEV4cChlLCB6KSB7XG4gIGlmIChlID4gMHhmZmZmZmZmZiB8fCBlIDwgMSkgcmV0dXJuIEJpZ0ludGVnZXIuT05FXG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICByMiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgZyA9IHouY29udmVydCh0aGlzKSxcbiAgICBpID0gbmJpdHMoZSkgLSAxXG4gIGcuY29weVRvKHIpXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHouc3FyVG8ociwgcjIpXG4gICAgaWYgKChlICYgKDEgPDwgaSkpID4gMCkgei5tdWxUbyhyMiwgZywgcilcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0ID0gclxuICAgICAgciA9IHIyXG4gICAgICByMiA9IHRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpXG59XG5cbi8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbmZ1bmN0aW9uIGJuTW9kUG93SW50KGUsIG0pIHtcbiAgdmFyIHpcbiAgaWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkgeiA9IG5ldyBDbGFzc2ljKG0pXG4gIGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pXG4gIHJldHVybiB0aGlzLmV4cChlLCB6KVxufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNvcHlUbyA9IGJucENvcHlUb1xucHJvdG8uZnJvbUludCA9IGJucEZyb21JbnRcbnByb3RvLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nXG5wcm90by5jbGFtcCA9IGJucENsYW1wXG5wcm90by5kbFNoaWZ0VG8gPSBibnBETFNoaWZ0VG9cbnByb3RvLmRyU2hpZnRUbyA9IGJucERSU2hpZnRUb1xucHJvdG8ubFNoaWZ0VG8gPSBibnBMU2hpZnRUb1xucHJvdG8uclNoaWZ0VG8gPSBibnBSU2hpZnRUb1xucHJvdG8uc3ViVG8gPSBibnBTdWJUb1xucHJvdG8ubXVsdGlwbHlUbyA9IGJucE11bHRpcGx5VG9cbnByb3RvLnNxdWFyZVRvID0gYm5wU3F1YXJlVG9cbnByb3RvLmRpdlJlbVRvID0gYm5wRGl2UmVtVG9cbnByb3RvLmludkRpZ2l0ID0gYm5wSW52RGlnaXRcbnByb3RvLmlzRXZlbiA9IGJucElzRXZlblxucHJvdG8uZXhwID0gYm5wRXhwXG5cbi8vIHB1YmxpY1xucHJvdG8udG9TdHJpbmcgPSBiblRvU3RyaW5nXG5wcm90by5uZWdhdGUgPSBibk5lZ2F0ZVxucHJvdG8uYWJzID0gYm5BYnNcbnByb3RvLmNvbXBhcmVUbyA9IGJuQ29tcGFyZVRvXG5wcm90by5iaXRMZW5ndGggPSBibkJpdExlbmd0aFxucHJvdG8uYnl0ZUxlbmd0aCA9IGJuQnl0ZUxlbmd0aFxucHJvdG8ubW9kID0gYm5Nb2RcbnByb3RvLm1vZFBvd0ludCA9IGJuTW9kUG93SW50XG5cbi8vIChwdWJsaWMpXG5mdW5jdGlvbiBibkNsb25lKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5jb3B5VG8ocilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGludGVnZXJcbmZ1bmN0aW9uIGJuSW50VmFsdWUoKSB7XG4gIGlmICh0aGlzLnMgPCAwKSB7XG4gICAgaWYgKHRoaXMudCA9PSAxKSByZXR1cm4gdGhpc1swXSAtIHRoaXMuRFZcbiAgICBlbHNlIGlmICh0aGlzLnQgPT0gMCkgcmV0dXJuIC0xXG4gIH0gZWxzZSBpZiAodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdXG4gIGVsc2UgaWYgKHRoaXMudCA9PSAwKSByZXR1cm4gMFxuICAvLyBhc3N1bWVzIDE2IDwgREIgPCAzMlxuICByZXR1cm4gKCh0aGlzWzFdICYgKCgxIDw8ICgzMiAtIHRoaXMuREIpKSAtIDEpKSA8PCB0aGlzLkRCKSB8IHRoaXNbMF1cbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGJ5dGVcbmZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCkge1xuICByZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDI0KSA+PiAyNFxufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuZnVuY3Rpb24gYm5TaG9ydFZhbHVlKCkge1xuICByZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDE2KSA+PiAxNlxufVxuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4geCBzLnQuIHJeeCA8IERWXG5mdW5jdGlvbiBibnBDaHVua1NpemUocikge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMiAqIHRoaXMuREIgLyBNYXRoLmxvZyhyKSlcbn1cblxuLy8gKHB1YmxpYykgMCBpZiB0aGlzID09IDAsIDEgaWYgdGhpcyA+IDBcbmZ1bmN0aW9uIGJuU2lnTnVtKCkge1xuICBpZiAodGhpcy5zIDwgMCkgcmV0dXJuIC0xXG4gIGVsc2UgaWYgKHRoaXMudCA8PSAwIHx8ICh0aGlzLnQgPT0gMSAmJiB0aGlzWzBdIDw9IDApKSByZXR1cm4gMFxuICBlbHNlIHJldHVybiAxXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5mdW5jdGlvbiBibnBUb1JhZGl4KGIpIHtcbiAgaWYgKGIgPT0gbnVsbCkgYiA9IDEwXG4gIGlmICh0aGlzLnNpZ251bSgpID09IDAgfHwgYiA8IDIgfHwgYiA+IDM2KSByZXR1cm4gXCIwXCJcbiAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYilcbiAgdmFyIGEgPSBNYXRoLnBvdyhiLCBjcylcbiAgdmFyIGQgPSBuYnYoYSksXG4gICAgeSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgeiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgciA9IFwiXCJcbiAgdGhpcy5kaXZSZW1UbyhkLCB5LCB6KVxuICB3aGlsZSAoeS5zaWdudW0oKSA+IDApIHtcbiAgICByID0gKGEgKyB6LmludFZhbHVlKCkpXG4gICAgICAudG9TdHJpbmcoYilcbiAgICAgIC5zdWJzdHIoMSkgKyByXG4gICAgeS5kaXZSZW1UbyhkLCB5LCB6KVxuICB9XG4gIHJldHVybiB6LmludFZhbHVlKClcbiAgICAudG9TdHJpbmcoYikgKyByXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgZnJvbSByYWRpeCBzdHJpbmdcbmZ1bmN0aW9uIGJucEZyb21SYWRpeChzLCBiKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLmZyb21JbnQoMClcbiAgaWYgKGIgPT0gbnVsbCkgYiA9IDEwXG4gIHZhciBjcyA9IHNlbGYuY2h1bmtTaXplKGIpXG4gIHZhciBkID0gTWF0aC5wb3coYiwgY3MpLFxuICAgIG1pID0gZmFsc2UsXG4gICAgaiA9IDAsXG4gICAgdyA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHggPSBpbnRBdChzLCBpKVxuICAgIGlmICh4IDwgMCkge1xuICAgICAgaWYgKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHNlbGYuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICB3ID0gYiAqIHcgKyB4XG4gICAgaWYgKCsraiA+PSBjcykge1xuICAgICAgc2VsZi5kTXVsdGlwbHkoZClcbiAgICAgIHNlbGYuZEFkZE9mZnNldCh3LCAwKVxuICAgICAgaiA9IDBcbiAgICAgIHcgPSAwXG4gICAgfVxuICB9XG4gIGlmIChqID4gMCkge1xuICAgIHNlbGYuZE11bHRpcGx5KE1hdGgucG93KGIsIGopKVxuICAgIHNlbGYuZEFkZE9mZnNldCh3LCAwKVxuICB9XG4gIGlmIChtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHNlbGYsIHNlbGYpXG59XG5cbi8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gYm5wRnJvbU51bWJlcihhLCBiLCBjKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYikge1xuICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxpbnQsUk5HKVxuICAgIGlmIChhIDwgMikgc2VsZi5mcm9tSW50KDEpXG4gICAgZWxzZSB7XG4gICAgICBzZWxmLmZyb21OdW1iZXIoYSwgYylcbiAgICAgIGlmICghc2VsZi50ZXN0Qml0KGEgLSAxKSkgLy8gZm9yY2UgTVNCIHNldFxuICAgICAgICBzZWxmLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCBvcF9vciwgc2VsZilcbiAgICAgIGlmIChzZWxmLmlzRXZlbigpKSBzZWxmLmRBZGRPZmZzZXQoMSwgMCk7IC8vIGZvcmNlIG9kZFxuICAgICAgd2hpbGUgKCFzZWxmLmlzUHJvYmFibGVQcmltZShiKSkge1xuICAgICAgICBzZWxmLmRBZGRPZmZzZXQoMiwgMClcbiAgICAgICAgaWYgKHNlbGYuYml0TGVuZ3RoKCkgPiBhKSBzZWxmLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIHNlbGYpXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxSTkcpXG4gICAgdmFyIHggPSBuZXcgQXJyYXkoKSxcbiAgICAgIHQgPSBhICYgN1xuICAgIHgubGVuZ3RoID0gKGEgPj4gMykgKyAxXG4gICAgYi5uZXh0Qnl0ZXMoeClcbiAgICBpZiAodCA+IDApIHhbMF0gJj0gKCgxIDw8IHQpIC0gMSlcbiAgICBlbHNlIHhbMF0gPSAwXG4gICAgc2VsZi5mcm9tU3RyaW5nKHgsIDI1NilcbiAgfVxufVxuXG4vLyAocHVibGljKSBjb252ZXJ0IHRvIGJpZ2VuZGlhbiBieXRlIGFycmF5XG5mdW5jdGlvbiBiblRvQnl0ZUFycmF5KCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGkgPSBzZWxmLnQsXG4gICAgciA9IG5ldyBBcnJheSgpXG4gIHJbMF0gPSBzZWxmLnNcbiAgdmFyIHAgPSBzZWxmLkRCIC0gKGkgKiBzZWxmLkRCKSAlIDgsXG4gICAgZCwgayA9IDBcbiAgaWYgKGktLSA+IDApIHtcbiAgICBpZiAocCA8IHNlbGYuREIgJiYgKGQgPSBzZWxmW2ldID4+IHApICE9IChzZWxmLnMgJiBzZWxmLkRNKSA+PiBwKVxuICAgICAgcltrKytdID0gZCB8IChzZWxmLnMgPDwgKHNlbGYuREIgLSBwKSlcbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICBpZiAocCA8IDgpIHtcbiAgICAgICAgZCA9IChzZWxmW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8ICg4IC0gcClcbiAgICAgICAgZCB8PSBzZWxmWy0taV0gPj4gKHAgKz0gc2VsZi5EQiAtIDgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkID0gKHNlbGZbaV0gPj4gKHAgLT0gOCkpICYgMHhmZlxuICAgICAgICBpZiAocCA8PSAwKSB7XG4gICAgICAgICAgcCArPSBzZWxmLkRCXG4gICAgICAgICAgLS1pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgoZCAmIDB4ODApICE9IDApIGQgfD0gLTI1NlxuICAgICAgaWYgKGsgPT09IDAgJiYgKHNlbGYucyAmIDB4ODApICE9IChkICYgMHg4MCkpKytrXG4gICAgICBpZiAoayA+IDAgfHwgZCAhPSBzZWxmLnMpIHJbaysrXSA9IGRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuZnVuY3Rpb24gYm5FcXVhbHMoYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID09IDApXG59XG5cbmZ1bmN0aW9uIGJuTWluKGEpIHtcbiAgcmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA8IDApID8gdGhpcyA6IGFcbn1cblxuZnVuY3Rpb24gYm5NYXgoYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyBvcCBhIChiaXR3aXNlKVxuZnVuY3Rpb24gYm5wQml0d2lzZVRvKGEsIG9wLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3Aoc2VsZltpXSwgYVtpXSlcbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGYgPSBhLnMgJiBzZWxmLkRNXG4gICAgZm9yIChpID0gbTsgaSA8IHNlbGYudDsgKytpKSByW2ldID0gb3Aoc2VsZltpXSwgZilcbiAgICByLnQgPSBzZWxmLnRcbiAgfSBlbHNlIHtcbiAgICBmID0gc2VsZi5zICYgc2VsZi5ETVxuICAgIGZvciAoaSA9IG07IGkgPCBhLnQ7ICsraSkgcltpXSA9IG9wKGYsIGFbaV0pXG4gICAgci50ID0gYS50XG4gIH1cbiAgci5zID0gb3Aoc2VsZi5zLCBhLnMpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHVibGljKSB0aGlzICYgYVxuZnVuY3Rpb24gb3BfYW5kKHgsIHkpIHtcbiAgcmV0dXJuIHggJiB5XG59XG5cbmZ1bmN0aW9uIGJuQW5kKGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyB8IGFcbmZ1bmN0aW9uIG9wX29yKHgsIHkpIHtcbiAgcmV0dXJuIHggfCB5XG59XG5cbmZ1bmN0aW9uIGJuT3IoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgXiBhXG5mdW5jdGlvbiBvcF94b3IoeCwgeSkge1xuICByZXR1cm4geCBeIHlcbn1cblxuZnVuY3Rpb24gYm5Yb3IoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfeG9yLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzICYgfmFcbmZ1bmN0aW9uIG9wX2FuZG5vdCh4LCB5KSB7XG4gIHJldHVybiB4ICYgfnlcbn1cblxuZnVuY3Rpb24gYm5BbmROb3QoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB+dGhpc1xuZnVuY3Rpb24gYm5Ob3QoKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gdGhpcy5ETSAmIH50aGlzW2ldXG4gIHIudCA9IHRoaXMudFxuICByLnMgPSB+dGhpcy5zXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgPDwgblxuZnVuY3Rpb24gYm5TaGlmdExlZnQobikge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgaWYgKG4gPCAwKSB0aGlzLnJTaGlmdFRvKC1uLCByKVxuICBlbHNlIHRoaXMubFNoaWZ0VG8obiwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyA+PiBuXG5mdW5jdGlvbiBiblNoaWZ0UmlnaHQobikge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgaWYgKG4gPCAwKSB0aGlzLmxTaGlmdFRvKC1uLCByKVxuICBlbHNlIHRoaXMuclNoaWZ0VG8obiwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuZnVuY3Rpb24gbGJpdCh4KSB7XG4gIGlmICh4ID09IDApIHJldHVybiAtMVxuICB2YXIgciA9IDBcbiAgaWYgKCh4ICYgMHhmZmZmKSA9PSAwKSB7XG4gICAgeCA+Pj0gMTZcbiAgICByICs9IDE2XG4gIH1cbiAgaWYgKCh4ICYgMHhmZikgPT0gMCkge1xuICAgIHggPj49IDhcbiAgICByICs9IDhcbiAgfVxuICBpZiAoKHggJiAweGYpID09IDApIHtcbiAgICB4ID4+PSA0XG4gICAgciArPSA0XG4gIH1cbiAgaWYgKCh4ICYgMykgPT0gMCkge1xuICAgIHggPj49IDJcbiAgICByICs9IDJcbiAgfVxuICBpZiAoKHggJiAxKSA9PSAwKSsrclxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSByZXR1cm5zIGluZGV4IG9mIGxvd2VzdCAxLWJpdCAob3IgLTEgaWYgbm9uZSlcbmZ1bmN0aW9uIGJuR2V0TG93ZXN0U2V0Qml0KCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKVxuICAgIGlmICh0aGlzW2ldICE9IDApIHJldHVybiBpICogdGhpcy5EQiArIGxiaXQodGhpc1tpXSlcbiAgaWYgKHRoaXMucyA8IDApIHJldHVybiB0aGlzLnQgKiB0aGlzLkRCXG4gIHJldHVybiAtMVxufVxuXG4vLyByZXR1cm4gbnVtYmVyIG9mIDEgYml0cyBpbiB4XG5mdW5jdGlvbiBjYml0KHgpIHtcbiAgdmFyIHIgPSAwXG4gIHdoaWxlICh4ICE9IDApIHtcbiAgICB4ICY9IHggLSAxXG4gICAgKytyXG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIG51bWJlciBvZiBzZXQgYml0c1xuZnVuY3Rpb24gYm5CaXRDb3VudCgpIHtcbiAgdmFyIHIgPSAwLFxuICAgIHggPSB0aGlzLnMgJiB0aGlzLkRNXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHIgKz0gY2JpdCh0aGlzW2ldIF4geClcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdHJ1ZSBpZmYgbnRoIGJpdCBpcyBzZXRcbmZ1bmN0aW9uIGJuVGVzdEJpdChuKSB7XG4gIHZhciBqID0gTWF0aC5mbG9vcihuIC8gdGhpcy5EQilcbiAgaWYgKGogPj0gdGhpcy50KSByZXR1cm4gKHRoaXMucyAhPSAwKVxuICByZXR1cm4gKCh0aGlzW2pdICYgKDEgPDwgKG4gJSB0aGlzLkRCKSkpICE9IDApXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXMgb3AgKDE8PG4pXG5mdW5jdGlvbiBibnBDaGFuZ2VCaXQobiwgb3ApIHtcbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQobilcbiAgdGhpcy5iaXR3aXNlVG8ociwgb3AsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgfCAoMTw8bilcbmZ1bmN0aW9uIGJuU2V0Qml0KG4pIHtcbiAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKVxufVxuXG4vLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuZnVuY3Rpb24gYm5DbGVhckJpdChuKSB7XG4gIHJldHVybiB0aGlzLmNoYW5nZUJpdChuLCBvcF9hbmRub3QpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbmZ1bmN0aW9uIGJuRmxpcEJpdChuKSB7XG4gIHJldHVybiB0aGlzLmNoYW5nZUJpdChuLCBvcF94b3IpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICsgYVxuZnVuY3Rpb24gYm5wQWRkVG8oYSwgcikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICB2YXIgaSA9IDAsXG4gICAgYyA9IDAsXG4gICAgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBjICs9IHNlbGZbaV0gKyBhW2ldXG4gICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICBjID4+PSBzZWxmLkRCXG4gIH1cbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGMgKz0gYS5zXG4gICAgd2hpbGUgKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBzZWxmLnNcbiAgfSBlbHNlIHtcbiAgICBjICs9IHNlbGYuc1xuICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICBjICs9IGFbaV1cbiAgICAgIHJbaSsrXSA9IGMgJiBzZWxmLkRNXG4gICAgICBjID4+PSBzZWxmLkRCXG4gICAgfVxuICAgIGMgKz0gYS5zXG4gIH1cbiAgci5zID0gKGMgPCAwKSA/IC0xIDogMFxuICBpZiAoYyA+IDApIHJbaSsrXSA9IGNcbiAgZWxzZSBpZiAoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWICsgY1xuICByLnQgPSBpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHVibGljKSB0aGlzICsgYVxuZnVuY3Rpb24gYm5BZGQoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5hZGRUbyhhLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIC0gYVxuZnVuY3Rpb24gYm5TdWJ0cmFjdChhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnN1YlRvKGEsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgKiBhXG5mdW5jdGlvbiBibk11bHRpcGx5KGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMubXVsdGlwbHlUbyhhLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzXjJcbmZ1bmN0aW9uIGJuU3F1YXJlKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5zcXVhcmVUbyhyKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIC8gYVxuZnVuY3Rpb24gYm5EaXZpZGUoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzICUgYVxuZnVuY3Rpb24gYm5SZW1haW5kZXIoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCBudWxsLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSBbdGhpcy9hLHRoaXMlYV1cbmZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGEpIHtcbiAgdmFyIHEgPSBuZXcgQmlnSW50ZWdlcigpLFxuICAgIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuZGl2UmVtVG8oYSwgcSwgcilcbiAgcmV0dXJuIG5ldyBBcnJheShxLCByKVxufVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzICo9IG4sIHRoaXMgPj0gMCwgMSA8IG4gPCBEVlxuZnVuY3Rpb24gYm5wRE11bHRpcGx5KG4pIHtcbiAgdGhpc1t0aGlzLnRdID0gdGhpcy5hbSgwLCBuIC0gMSwgdGhpcywgMCwgMCwgdGhpcy50KVxuICArK3RoaXMudFxuICB0aGlzLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyArPSBuIDw8IHcgd29yZHMsIHRoaXMgPj0gMFxuZnVuY3Rpb24gYm5wREFkZE9mZnNldChuLCB3KSB7XG4gIGlmIChuID09IDApIHJldHVyblxuICB3aGlsZSAodGhpcy50IDw9IHcpIHRoaXNbdGhpcy50KytdID0gMFxuICB0aGlzW3ddICs9IG5cbiAgd2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVikge1xuICAgIHRoaXNbd10gLT0gdGhpcy5EVlxuICAgIGlmICgrK3cgPj0gdGhpcy50KSB0aGlzW3RoaXMudCsrXSA9IDBcbiAgICArK3RoaXNbd11cbiAgfVxufVxuXG4vLyBBIFwibnVsbFwiIHJlZHVjZXJcbmZ1bmN0aW9uIE51bGxFeHAoKSB7fVxuXG5mdW5jdGlvbiBuTm9wKHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuZnVuY3Rpb24gbk11bFRvKHgsIHksIHIpIHtcbiAgeC5tdWx0aXBseVRvKHksIHIpXG59XG5cbmZ1bmN0aW9uIG5TcXJUbyh4LCByKSB7XG4gIHguc3F1YXJlVG8ocilcbn1cblxuTnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3Bcbk51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3Bcbk51bGxFeHAucHJvdG90eXBlLm11bFRvID0gbk11bFRvXG5OdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUb1xuXG4vLyAocHVibGljKSB0aGlzXmVcbmZ1bmN0aW9uIGJuUG93KGUpIHtcbiAgcmV0dXJuIHRoaXMuZXhwKGUsIG5ldyBOdWxsRXhwKCkpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSBsb3dlciBuIHdvcmRzIG9mIFwidGhpcyAqIGFcIiwgYS50IDw9IG5cbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLCBuLCByKSB7XG4gIHZhciBpID0gTWF0aC5taW4odGhpcy50ICsgYS50LCBuKVxuICByLnMgPSAwOyAvLyBhc3N1bWVzIGEsdGhpcyA+PSAwXG4gIHIudCA9IGlcbiAgd2hpbGUgKGkgPiAwKSByWy0taV0gPSAwXG4gIHZhciBqXG4gIGZvciAoaiA9IHIudCAtIHRoaXMudDsgaSA8IGo7ICsraSkgcltpICsgdGhpcy50XSA9IHRoaXMuYW0oMCwgYVtpXSwgciwgaSwgMCwgdGhpcy50KVxuICBmb3IgKGogPSBNYXRoLm1pbihhLnQsIG4pOyBpIDwgajsgKytpKSB0aGlzLmFtKDAsIGFbaV0sIHIsIGksIDAsIG4gLSBpKVxuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IFwidGhpcyAqIGFcIiB3aXRob3V0IGxvd2VyIG4gd29yZHMsIG4gPiAwXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYSwgbiwgcikge1xuICAtLW5cbiAgdmFyIGkgPSByLnQgPSB0aGlzLnQgKyBhLnQgLSBuXG4gIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgd2hpbGUgKC0taSA+PSAwKSByW2ldID0gMFxuICBmb3IgKGkgPSBNYXRoLm1heChuIC0gdGhpcy50LCAwKTsgaSA8IGEudDsgKytpKVxuICAgIHJbdGhpcy50ICsgaSAtIG5dID0gdGhpcy5hbShuIC0gaSwgYVtpXSwgciwgMCwgMCwgdGhpcy50ICsgaSAtIG4pXG4gIHIuY2xhbXAoKVxuICByLmRyU2hpZnRUbygxLCByKVxufVxuXG4vLyBCYXJyZXR0IG1vZHVsYXIgcmVkdWN0aW9uXG5mdW5jdGlvbiBCYXJyZXR0KG0pIHtcbiAgLy8gc2V0dXAgQmFycmV0dFxuICB0aGlzLnIyID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnEzID0gbmV3IEJpZ0ludGVnZXIoKVxuICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiAqIG0udCwgdGhpcy5yMilcbiAgdGhpcy5tdSA9IHRoaXMucjIuZGl2aWRlKG0pXG4gIHRoaXMubSA9IG1cbn1cblxuZnVuY3Rpb24gYmFycmV0dENvbnZlcnQoeCkge1xuICBpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHJldHVybiB4Lm1vZCh0aGlzLm0pXG4gIGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSByZXR1cm4geFxuICBlbHNlIHtcbiAgICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgICB4LmNvcHlUbyhyKVxuICAgIHRoaXMucmVkdWNlKHIpXG4gICAgcmV0dXJuIHJcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuLy8geCA9IHggbW9kIG0gKEhBQyAxNC40MilcbmZ1bmN0aW9uIGJhcnJldHRSZWR1Y2UoeCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgeC5kclNoaWZ0VG8oc2VsZi5tLnQgLSAxLCBzZWxmLnIyKVxuICBpZiAoeC50ID4gc2VsZi5tLnQgKyAxKSB7XG4gICAgeC50ID0gc2VsZi5tLnQgKyAxXG4gICAgeC5jbGFtcCgpXG4gIH1cbiAgc2VsZi5tdS5tdWx0aXBseVVwcGVyVG8oc2VsZi5yMiwgc2VsZi5tLnQgKyAxLCBzZWxmLnEzKVxuICBzZWxmLm0ubXVsdGlwbHlMb3dlclRvKHNlbGYucTMsIHNlbGYubS50ICsgMSwgc2VsZi5yMilcbiAgd2hpbGUgKHguY29tcGFyZVRvKHNlbGYucjIpIDwgMCkgeC5kQWRkT2Zmc2V0KDEsIHNlbGYubS50ICsgMSlcbiAgeC5zdWJUbyhzZWxmLnIyLCB4KVxuICB3aGlsZSAoeC5jb21wYXJlVG8oc2VsZi5tKSA+PSAwKSB4LnN1YlRvKHNlbGYubSwgeClcbn1cblxuLy8gciA9IHheMiBtb2QgbTsgeCAhPSByXG5mdW5jdGlvbiBiYXJyZXR0U3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbi8vIHIgPSB4KnkgbW9kIG07IHgseSAhPSByXG5mdW5jdGlvbiBiYXJyZXR0TXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuQmFycmV0dC5wcm90b3R5cGUuY29udmVydCA9IGJhcnJldHRDb252ZXJ0XG5CYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQgPSBiYXJyZXR0UmV2ZXJ0XG5CYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlXG5CYXJyZXR0LnByb3RvdHlwZS5tdWxUbyA9IGJhcnJldHRNdWxUb1xuQmFycmV0dC5wcm90b3R5cGUuc3FyVG8gPSBiYXJyZXR0U3FyVG9cblxuLy8gKHB1YmxpYykgdGhpc15lICUgbSAoSEFDIDE0Ljg1KVxuZnVuY3Rpb24gYm5Nb2RQb3coZSwgbSkge1xuICB2YXIgaSA9IGUuYml0TGVuZ3RoKCksXG4gICAgaywgciA9IG5idigxKSxcbiAgICB6XG4gIGlmIChpIDw9IDApIHJldHVybiByXG4gIGVsc2UgaWYgKGkgPCAxOCkgayA9IDFcbiAgZWxzZSBpZiAoaSA8IDQ4KSBrID0gM1xuICBlbHNlIGlmIChpIDwgMTQ0KSBrID0gNFxuICBlbHNlIGlmIChpIDwgNzY4KSBrID0gNVxuICBlbHNlIGsgPSA2XG4gIGlmIChpIDwgOClcbiAgICB6ID0gbmV3IENsYXNzaWMobSlcbiAgZWxzZSBpZiAobS5pc0V2ZW4oKSlcbiAgICB6ID0gbmV3IEJhcnJldHQobSlcbiAgZWxzZVxuICAgIHogPSBuZXcgTW9udGdvbWVyeShtKVxuXG4gIC8vIHByZWNvbXB1dGF0aW9uXG4gIHZhciBnID0gbmV3IEFycmF5KCksXG4gICAgbiA9IDMsXG4gICAgazEgPSBrIC0gMSxcbiAgICBrbSA9ICgxIDw8IGspIC0gMVxuICBnWzFdID0gei5jb252ZXJ0KHRoaXMpXG4gIGlmIChrID4gMSkge1xuICAgIHZhciBnMiA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgICB6LnNxclRvKGdbMV0sIGcyKVxuICAgIHdoaWxlIChuIDw9IGttKSB7XG4gICAgICBnW25dID0gbmV3IEJpZ0ludGVnZXIoKVxuICAgICAgei5tdWxUbyhnMiwgZ1tuIC0gMl0sIGdbbl0pXG4gICAgICBuICs9IDJcbiAgICB9XG4gIH1cblxuICB2YXIgaiA9IGUudCAtIDEsXG4gICAgdywgaXMxID0gdHJ1ZSxcbiAgICByMiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgdFxuICBpID0gbmJpdHMoZVtqXSkgLSAxXG4gIHdoaWxlIChqID49IDApIHtcbiAgICBpZiAoaSA+PSBrMSkgdyA9IChlW2pdID4+IChpIC0gazEpKSAmIGttXG4gICAgZWxzZSB7XG4gICAgICB3ID0gKGVbal0gJiAoKDEgPDwgKGkgKyAxKSkgLSAxKSkgPDwgKGsxIC0gaSlcbiAgICAgIGlmIChqID4gMCkgdyB8PSBlW2ogLSAxXSA+PiAodGhpcy5EQiArIGkgLSBrMSlcbiAgICB9XG5cbiAgICBuID0ga1xuICAgIHdoaWxlICgodyAmIDEpID09IDApIHtcbiAgICAgIHcgPj49IDFcbiAgICAgIC0tblxuICAgIH1cbiAgICBpZiAoKGkgLT0gbikgPCAwKSB7XG4gICAgICBpICs9IHRoaXMuREJcbiAgICAgIC0talxuICAgIH1cbiAgICBpZiAoaXMxKSB7IC8vIHJldCA9PSAxLCBkb24ndCBib3RoZXIgc3F1YXJpbmcgb3IgbXVsdGlwbHlpbmcgaXRcbiAgICAgIGdbd10uY29weVRvKHIpXG4gICAgICBpczEgPSBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAobiA+IDEpIHtcbiAgICAgICAgei5zcXJUbyhyLCByMilcbiAgICAgICAgei5zcXJUbyhyMiwgcilcbiAgICAgICAgbiAtPSAyXG4gICAgICB9XG4gICAgICBpZiAobiA+IDApIHouc3FyVG8ociwgcjIpXG4gICAgICBlbHNlIHtcbiAgICAgICAgdCA9IHJcbiAgICAgICAgciA9IHIyXG4gICAgICAgIHIyID0gdFxuICAgICAgfVxuICAgICAgei5tdWxUbyhyMiwgZ1t3XSwgcilcbiAgICB9XG5cbiAgICB3aGlsZSAoaiA+PSAwICYmIChlW2pdICYgKDEgPDwgaSkpID09IDApIHtcbiAgICAgIHouc3FyVG8ociwgcjIpXG4gICAgICB0ID0gclxuICAgICAgciA9IHIyXG4gICAgICByMiA9IHRcbiAgICAgIGlmICgtLWkgPCAwKSB7XG4gICAgICAgIGkgPSB0aGlzLkRCIC0gMVxuICAgICAgICAtLWpcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpXG59XG5cbi8vIChwdWJsaWMpIGdjZCh0aGlzLGEpIChIQUMgMTQuNTQpXG5mdW5jdGlvbiBibkdDRChhKSB7XG4gIHZhciB4ID0gKHRoaXMucyA8IDApID8gdGhpcy5uZWdhdGUoKSA6IHRoaXMuY2xvbmUoKVxuICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKClcbiAgaWYgKHguY29tcGFyZVRvKHkpIDwgMCkge1xuICAgIHZhciB0ID0geFxuICAgIHggPSB5XG4gICAgeSA9IHRcbiAgfVxuICB2YXIgaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCksXG4gICAgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KClcbiAgaWYgKGcgPCAwKSByZXR1cm4geFxuICBpZiAoaSA8IGcpIGcgPSBpXG4gIGlmIChnID4gMCkge1xuICAgIHguclNoaWZ0VG8oZywgeClcbiAgICB5LnJTaGlmdFRvKGcsIHkpXG4gIH1cbiAgd2hpbGUgKHguc2lnbnVtKCkgPiAwKSB7XG4gICAgaWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB4LnJTaGlmdFRvKGksIHgpXG4gICAgaWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGksIHkpXG4gICAgaWYgKHguY29tcGFyZVRvKHkpID49IDApIHtcbiAgICAgIHguc3ViVG8oeSwgeClcbiAgICAgIHguclNoaWZ0VG8oMSwgeClcbiAgICB9IGVsc2Uge1xuICAgICAgeS5zdWJUbyh4LCB5KVxuICAgICAgeS5yU2hpZnRUbygxLCB5KVxuICAgIH1cbiAgfVxuICBpZiAoZyA+IDApIHkubFNoaWZ0VG8oZywgeSlcbiAgcmV0dXJuIHlcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyAlIG4sIG4gPCAyXjI2XG5mdW5jdGlvbiBibnBNb2RJbnQobikge1xuICBpZiAobiA8PSAwKSByZXR1cm4gMFxuICB2YXIgZCA9IHRoaXMuRFYgJSBuLFxuICAgIHIgPSAodGhpcy5zIDwgMCkgPyBuIC0gMSA6IDBcbiAgaWYgKHRoaXMudCA+IDApXG4gICAgaWYgKGQgPT0gMCkgciA9IHRoaXNbMF0gJSBuXG4gICAgZWxzZVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByID0gKGQgKiByICsgdGhpc1tpXSkgJSBuXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcbmZ1bmN0aW9uIGJuTW9kSW52ZXJzZShtKSB7XG4gIHZhciBhYyA9IG0uaXNFdmVuKClcbiAgaWYgKHRoaXMuc2lnbnVtKCkgPT09IDApIHRocm93IG5ldyBFcnJvcignZGl2aXNpb24gYnkgemVybycpXG4gIGlmICgodGhpcy5pc0V2ZW4oKSAmJiBhYykgfHwgbS5zaWdudW0oKSA9PSAwKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPXG4gIHZhciB1ID0gbS5jbG9uZSgpLFxuICAgIHYgPSB0aGlzLmNsb25lKClcbiAgdmFyIGEgPSBuYnYoMSksXG4gICAgYiA9IG5idigwKSxcbiAgICBjID0gbmJ2KDApLFxuICAgIGQgPSBuYnYoMSlcbiAgd2hpbGUgKHUuc2lnbnVtKCkgIT0gMCkge1xuICAgIHdoaWxlICh1LmlzRXZlbigpKSB7XG4gICAgICB1LnJTaGlmdFRvKDEsIHUpXG4gICAgICBpZiAoYWMpIHtcbiAgICAgICAgaWYgKCFhLmlzRXZlbigpIHx8ICFiLmlzRXZlbigpKSB7XG4gICAgICAgICAgYS5hZGRUbyh0aGlzLCBhKVxuICAgICAgICAgIGIuc3ViVG8obSwgYilcbiAgICAgICAgfVxuICAgICAgICBhLnJTaGlmdFRvKDEsIGEpXG4gICAgICB9IGVsc2UgaWYgKCFiLmlzRXZlbigpKSBiLnN1YlRvKG0sIGIpXG4gICAgICBiLnJTaGlmdFRvKDEsIGIpXG4gICAgfVxuICAgIHdoaWxlICh2LmlzRXZlbigpKSB7XG4gICAgICB2LnJTaGlmdFRvKDEsIHYpXG4gICAgICBpZiAoYWMpIHtcbiAgICAgICAgaWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKSB7XG4gICAgICAgICAgYy5hZGRUbyh0aGlzLCBjKVxuICAgICAgICAgIGQuc3ViVG8obSwgZClcbiAgICAgICAgfVxuICAgICAgICBjLnJTaGlmdFRvKDEsIGMpXG4gICAgICB9IGVsc2UgaWYgKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sIGQpXG4gICAgICBkLnJTaGlmdFRvKDEsIGQpXG4gICAgfVxuICAgIGlmICh1LmNvbXBhcmVUbyh2KSA+PSAwKSB7XG4gICAgICB1LnN1YlRvKHYsIHUpXG4gICAgICBpZiAoYWMpIGEuc3ViVG8oYywgYSlcbiAgICAgIGIuc3ViVG8oZCwgYilcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zdWJUbyh1LCB2KVxuICAgICAgaWYgKGFjKSBjLnN1YlRvKGEsIGMpXG4gICAgICBkLnN1YlRvKGIsIGQpXG4gICAgfVxuICB9XG4gIGlmICh2LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCkgcmV0dXJuIEJpZ0ludGVnZXIuWkVST1xuICB3aGlsZSAoZC5jb21wYXJlVG8obSkgPj0gMCkgZC5zdWJUbyhtLCBkKVxuICB3aGlsZSAoZC5zaWdudW0oKSA8IDApIGQuYWRkVG8obSwgZClcbiAgcmV0dXJuIGRcbn1cblxudmFyIGxvd3ByaW1lcyA9IFtcbiAgMiwgMywgNSwgNywgMTEsIDEzLCAxNywgMTksIDIzLCAyOSwgMzEsIDM3LCA0MSwgNDMsIDQ3LCA1MywgNTksIDYxLCA2NywgNzEsXG4gIDczLCA3OSwgODMsIDg5LCA5NywgMTAxLCAxMDMsIDEwNywgMTA5LCAxMTMsIDEyNywgMTMxLCAxMzcsIDEzOSwgMTQ5LCAxNTEsXG4gIDE1NywgMTYzLCAxNjcsIDE3MywgMTc5LCAxODEsIDE5MSwgMTkzLCAxOTcsIDE5OSwgMjExLCAyMjMsIDIyNywgMjI5LCAyMzMsXG4gIDIzOSwgMjQxLCAyNTEsIDI1NywgMjYzLCAyNjksIDI3MSwgMjc3LCAyODEsIDI4MywgMjkzLCAzMDcsIDMxMSwgMzEzLCAzMTcsXG4gIDMzMSwgMzM3LCAzNDcsIDM0OSwgMzUzLCAzNTksIDM2NywgMzczLCAzNzksIDM4MywgMzg5LCAzOTcsIDQwMSwgNDA5LCA0MTksXG4gIDQyMSwgNDMxLCA0MzMsIDQzOSwgNDQzLCA0NDksIDQ1NywgNDYxLCA0NjMsIDQ2NywgNDc5LCA0ODcsIDQ5MSwgNDk5LCA1MDMsXG4gIDUwOSwgNTIxLCA1MjMsIDU0MSwgNTQ3LCA1NTcsIDU2MywgNTY5LCA1NzEsIDU3NywgNTg3LCA1OTMsIDU5OSwgNjAxLCA2MDcsXG4gIDYxMywgNjE3LCA2MTksIDYzMSwgNjQxLCA2NDMsIDY0NywgNjUzLCA2NTksIDY2MSwgNjczLCA2NzcsIDY4MywgNjkxLCA3MDEsXG4gIDcwOSwgNzE5LCA3MjcsIDczMywgNzM5LCA3NDMsIDc1MSwgNzU3LCA3NjEsIDc2OSwgNzczLCA3ODcsIDc5NywgODA5LCA4MTEsXG4gIDgyMSwgODIzLCA4MjcsIDgyOSwgODM5LCA4NTMsIDg1NywgODU5LCA4NjMsIDg3NywgODgxLCA4ODMsIDg4NywgOTA3LCA5MTEsXG4gIDkxOSwgOTI5LCA5MzcsIDk0MSwgOTQ3LCA5NTMsIDk2NywgOTcxLCA5NzcsIDk4MywgOTkxLCA5OTdcbl1cblxudmFyIGxwbGltID0gKDEgPDwgMjYpIC8gbG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGggLSAxXVxuXG4vLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbmZ1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKHQpIHtcbiAgdmFyIGksIHggPSB0aGlzLmFicygpXG4gIGlmICh4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbG93cHJpbWVzLmxlbmd0aDsgKytpKVxuICAgICAgaWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmICh4LmlzRXZlbigpKSByZXR1cm4gZmFsc2VcbiAgaSA9IDFcbiAgd2hpbGUgKGkgPCBsb3dwcmltZXMubGVuZ3RoKSB7XG4gICAgdmFyIG0gPSBsb3dwcmltZXNbaV0sXG4gICAgICBqID0gaSArIDFcbiAgICB3aGlsZSAoaiA8IGxvd3ByaW1lcy5sZW5ndGggJiYgbSA8IGxwbGltKSBtICo9IGxvd3ByaW1lc1tqKytdXG4gICAgbSA9IHgubW9kSW50KG0pXG4gICAgd2hpbGUgKGkgPCBqKSBpZiAobSAlIGxvd3ByaW1lc1tpKytdID09IDApIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB4Lm1pbGxlclJhYmluKHQpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRydWUgaWYgcHJvYmFibHkgcHJpbWUgKEhBQyA0LjI0LCBNaWxsZXItUmFiaW4pXG5mdW5jdGlvbiBibnBNaWxsZXJSYWJpbih0KSB7XG4gIHZhciBuMSA9IHRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpXG4gIHZhciBrID0gbjEuZ2V0TG93ZXN0U2V0Qml0KClcbiAgaWYgKGsgPD0gMCkgcmV0dXJuIGZhbHNlXG4gIHZhciByID0gbjEuc2hpZnRSaWdodChrKVxuICB0ID0gKHQgKyAxKSA+PiAxXG4gIGlmICh0ID4gbG93cHJpbWVzLmxlbmd0aCkgdCA9IGxvd3ByaW1lcy5sZW5ndGhcbiAgdmFyIGEgPSBuZXcgQmlnSW50ZWdlcihudWxsKVxuICB2YXIgaiwgYmFzZXMgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHQ7ICsraSkge1xuICAgIGZvciAoOzspIHtcbiAgICAgIGogPSBsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbG93cHJpbWVzLmxlbmd0aCldXG4gICAgICBpZiAoYmFzZXMuaW5kZXhPZihqKSA9PSAtMSkgYnJlYWtcbiAgICB9XG4gICAgYmFzZXMucHVzaChqKVxuICAgIGEuZnJvbUludChqKVxuICAgIHZhciB5ID0gYS5tb2RQb3cociwgdGhpcylcbiAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDAgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgIHZhciBqID0gMVxuICAgICAgd2hpbGUgKGorKyA8IGsgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgeSA9IHkubW9kUG93SW50KDIsIHRoaXMpXG4gICAgICAgIGlmICh5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgPT0gMCkgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZVxucHJvdG8udG9SYWRpeCA9IGJucFRvUmFkaXhcbnByb3RvLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeFxucHJvdG8uZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXJcbnByb3RvLmJpdHdpc2VUbyA9IGJucEJpdHdpc2VUb1xucHJvdG8uY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0XG5wcm90by5hZGRUbyA9IGJucEFkZFRvXG5wcm90by5kTXVsdGlwbHkgPSBibnBETXVsdGlwbHlcbnByb3RvLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0XG5wcm90by5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG9cbnByb3RvLm11bHRpcGx5VXBwZXJUbyA9IGJucE11bHRpcGx5VXBwZXJUb1xucHJvdG8ubW9kSW50ID0gYm5wTW9kSW50XG5wcm90by5taWxsZXJSYWJpbiA9IGJucE1pbGxlclJhYmluXG5cbi8vIHB1YmxpY1xucHJvdG8uY2xvbmUgPSBibkNsb25lXG5wcm90by5pbnRWYWx1ZSA9IGJuSW50VmFsdWVcbnByb3RvLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlXG5wcm90by5zaG9ydFZhbHVlID0gYm5TaG9ydFZhbHVlXG5wcm90by5zaWdudW0gPSBiblNpZ051bVxucHJvdG8udG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5XG5wcm90by5lcXVhbHMgPSBibkVxdWFsc1xucHJvdG8ubWluID0gYm5NaW5cbnByb3RvLm1heCA9IGJuTWF4XG5wcm90by5hbmQgPSBibkFuZFxucHJvdG8ub3IgPSBibk9yXG5wcm90by54b3IgPSBiblhvclxucHJvdG8uYW5kTm90ID0gYm5BbmROb3RcbnByb3RvLm5vdCA9IGJuTm90XG5wcm90by5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdFxucHJvdG8uc2hpZnRSaWdodCA9IGJuU2hpZnRSaWdodFxucHJvdG8uZ2V0TG93ZXN0U2V0Qml0ID0gYm5HZXRMb3dlc3RTZXRCaXRcbnByb3RvLmJpdENvdW50ID0gYm5CaXRDb3VudFxucHJvdG8udGVzdEJpdCA9IGJuVGVzdEJpdFxucHJvdG8uc2V0Qml0ID0gYm5TZXRCaXRcbnByb3RvLmNsZWFyQml0ID0gYm5DbGVhckJpdFxucHJvdG8uZmxpcEJpdCA9IGJuRmxpcEJpdFxucHJvdG8uYWRkID0gYm5BZGRcbnByb3RvLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdFxucHJvdG8ubXVsdGlwbHkgPSBibk11bHRpcGx5XG5wcm90by5kaXZpZGUgPSBibkRpdmlkZVxucHJvdG8ucmVtYWluZGVyID0gYm5SZW1haW5kZXJcbnByb3RvLmRpdmlkZUFuZFJlbWFpbmRlciA9IGJuRGl2aWRlQW5kUmVtYWluZGVyXG5wcm90by5tb2RQb3cgPSBibk1vZFBvd1xucHJvdG8ubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZVxucHJvdG8ucG93ID0gYm5Qb3dcbnByb3RvLmdjZCA9IGJuR0NEXG5wcm90by5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZVxuXG4vLyBKU0JOLXNwZWNpZmljIGV4dGVuc2lvblxucHJvdG8uc3F1YXJlID0gYm5TcXVhcmVcblxuLy8gY29uc3RhbnRzXG5CaWdJbnRlZ2VyLlpFUk8gPSBuYnYoMClcbkJpZ0ludGVnZXIuT05FID0gbmJ2KDEpXG5CaWdJbnRlZ2VyLnZhbHVlT2YgPSBuYnZcblxubW9kdWxlLmV4cG9ydHMgPSBCaWdJbnRlZ2VyXG4iLCJ2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpXG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKVxuXG5mdW5jdGlvbiBDdXJ2ZSAocCwgYSwgYiwgR3gsIEd5LCBuLCBoKSB7XG4gIHRoaXMucCA9IHBcbiAgdGhpcy5hID0gYVxuICB0aGlzLmIgPSBiXG4gIHRoaXMuRyA9IFBvaW50LmZyb21BZmZpbmUodGhpcywgR3gsIEd5KVxuICB0aGlzLm4gPSBuXG4gIHRoaXMuaCA9IGhcblxuICB0aGlzLmluZmluaXR5ID0gbmV3IFBvaW50KHRoaXMsIG51bGwsIG51bGwsIEJpZ0ludGVnZXIuWkVSTylcblxuICAvLyByZXN1bHQgY2FjaGluZ1xuICB0aGlzLnBPdmVyRm91ciA9IHAuYWRkKEJpZ0ludGVnZXIuT05FKS5zaGlmdFJpZ2h0KDIpXG5cbiAgLy8gZGV0ZXJtaW5lIHNpemUgb2YgcCBpbiBieXRlc1xuICB0aGlzLnBMZW5ndGggPSBNYXRoLmZsb29yKCh0aGlzLnAuYml0TGVuZ3RoKCkgKyA3KSAvIDgpXG59XG5cbkN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gKGlzT2RkLCB4KSB7XG4gIHZhciBhbHBoYSA9IHgucG93KDMpLmFkZCh0aGlzLmEubXVsdGlwbHkoeCkpLmFkZCh0aGlzLmIpLm1vZCh0aGlzLnApXG4gIHZhciBiZXRhID0gYWxwaGEubW9kUG93KHRoaXMucE92ZXJGb3VyLCB0aGlzLnApIC8vIFhYWDogbm90IGNvbXBhdGlibGUgd2l0aCBhbGwgY3VydmVzXG5cbiAgdmFyIHkgPSBiZXRhXG4gIGlmIChiZXRhLmlzRXZlbigpIF4gIWlzT2RkKSB7XG4gICAgeSA9IHRoaXMucC5zdWJ0cmFjdCh5KSAvLyAteSAlIHBcbiAgfVxuXG4gIHJldHVybiBQb2ludC5mcm9tQWZmaW5lKHRoaXMsIHgsIHkpXG59XG5cbkN1cnZlLnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gKFEpIHtcbiAgaWYgKFEgPT09IHRoaXMuaW5maW5pdHkpIHJldHVybiB0cnVlXG5cbiAgcmV0dXJuIFEuei5zaWdudW0oKSA9PT0gMCAmJiBRLnkuc2lnbnVtKCkgIT09IDBcbn1cblxuQ3VydmUucHJvdG90eXBlLmlzT25DdXJ2ZSA9IGZ1bmN0aW9uIChRKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoUSkpIHJldHVybiB0cnVlXG5cbiAgdmFyIHggPSBRLmFmZmluZVhcbiAgdmFyIHkgPSBRLmFmZmluZVlcbiAgdmFyIGEgPSB0aGlzLmFcbiAgdmFyIGIgPSB0aGlzLmJcbiAgdmFyIHAgPSB0aGlzLnBcblxuICAvLyBDaGVjayB0aGF0IHhRIGFuZCB5USBhcmUgaW50ZWdlcnMgaW4gdGhlIGludGVydmFsIFswLCBwIC0gMV1cbiAgaWYgKHguc2lnbnVtKCkgPCAwIHx8IHguY29tcGFyZVRvKHApID49IDApIHJldHVybiBmYWxzZVxuICBpZiAoeS5zaWdudW0oKSA8IDAgfHwgeS5jb21wYXJlVG8ocCkgPj0gMCkgcmV0dXJuIGZhbHNlXG5cbiAgLy8gYW5kIGNoZWNrIHRoYXQgeV4yID0geF4zICsgYXggKyBiIChtb2QgcClcbiAgdmFyIGxocyA9IHkuc3F1YXJlKCkubW9kKHApXG4gIHZhciByaHMgPSB4LnBvdygzKS5hZGQoYS5tdWx0aXBseSh4KSkuYWRkKGIpLm1vZChwKVxuICByZXR1cm4gbGhzLmVxdWFscyhyaHMpXG59XG5cbi8qKlxuICogVmFsaWRhdGUgYW4gZWxsaXB0aWMgY3VydmUgcG9pbnQuXG4gKlxuICogU2VlIFNFQyAxLCBzZWN0aW9uIDMuMi4yLjE6IEVsbGlwdGljIEN1cnZlIFB1YmxpYyBLZXkgVmFsaWRhdGlvbiBQcmltaXRpdmVcbiAqL1xuQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKFEpIHtcbiAgLy8gQ2hlY2sgUSAhPSBPXG4gIGFzc2VydCghdGhpcy5pc0luZmluaXR5KFEpLCAnUG9pbnQgaXMgYXQgaW5maW5pdHknKVxuICBhc3NlcnQodGhpcy5pc09uQ3VydmUoUSksICdQb2ludCBpcyBub3Qgb24gdGhlIGN1cnZlJylcblxuICAvLyBDaGVjayBuUSA9IE8gKHdoZXJlIFEgaXMgYSBzY2FsYXIgbXVsdGlwbGUgb2YgRylcbiAgdmFyIG5RID0gUS5tdWx0aXBseSh0aGlzLm4pXG4gIGFzc2VydCh0aGlzLmlzSW5maW5pdHkoblEpLCAnUG9pbnQgaXMgbm90IGEgc2NhbGFyIG11bHRpcGxlIG9mIEcnKVxuXG4gIHJldHVybiB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3VydmVcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXVxudmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd29yZHMgPSBBUlJBWTE2XG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgd29yZHNbal0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShqICogNClcblxuICB2YXIgYWwgPSB0aGlzLl9hIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9iIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lIHwgMFxuXG4gIHZhciBhciA9IHRoaXMuX2EgfCAwXG4gIHZhciBiciA9IHRoaXMuX2IgfCAwXG4gIHZhciBjciA9IHRoaXMuX2MgfCAwXG4gIHZhciBkciA9IHRoaXMuX2QgfCAwXG4gIHZhciBlciA9IHRoaXMuX2UgfCAwXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdmFyIHRsXG4gICAgdmFyIHRyXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdGwgPSBmbjEoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzBdLCBzbFtpXSlcbiAgICAgIHRyID0gZm41KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclswXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0bCA9IGZuMyhhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMl0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzJdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdGwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzNdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4yKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclszXSwgc3JbaV0pXG4gICAgfSBlbHNlIHsgLy8gaWYgKGk8ODApIHtcbiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKVxuICAgIH1cblxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0bFxuXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRyXG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9lLCAxNilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm4xIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4yIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjMgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiIHwgKH5jKSkgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNCAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm41IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gKGMgfCAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJJUEVNRDE2MFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2doLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oaCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgZWNkc2EgPSByZXF1aXJlKCcuL2VjZHNhJyk7XG52YXIgaGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIGN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJykuZ2V0Q3VydmVCeU5hbWUoJ3NlY3AyNTZrMScpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJyk7XG52YXIga2V5VXRpbHMgPSByZXF1aXJlKCcuL2tleV91dGlscycpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoJy4va2V5X3B1YmxpYycpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL2tleV9wcml2YXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBTaWduYXR1cmUociwgcywgaSkge1xuICAgIGFzc2VydC5lcXVhbChyICE9IG51bGwsIHRydWUsICdNaXNzaW5nIHBhcmFtZXRlcicpO1xuICAgIGFzc2VydC5lcXVhbChzICE9IG51bGwsIHRydWUsICdNaXNzaW5nIHBhcmFtZXRlcicpO1xuICAgIGFzc2VydC5lcXVhbChpICE9IG51bGwsIHRydWUsICdNaXNzaW5nIHBhcmFtZXRlcicpO1xuXG4gICAgLyoqXG4gICAgICAgIFZlcmlmeSBzaWduZWQgZGF0YS5cbiAgICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGEgLSBmdWxsIGRhdGFcbiAgICAgICAgQGFyZyB7cHVia2V5fFB1YmxpY0tleX0gcHVia2V5IC0gRU9TS2V5Li5cbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAndXRmOCddIC0gZGF0YSBlbmNvZGluZyAoaWYgZGF0YSBpcyBhIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgKi9cbiAgICBmdW5jdGlvbiB2ZXJpZnkoZGF0YSwgcHVia2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ3V0ZjgnO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSwgJ2RhdGEgaXMgYSByZXF1aXJlZCBTdHJpbmcgb3IgQnVmZmVyJyk7XG4gICAgICAgIGRhdGEgPSBoYXNoLnNoYTI1NihkYXRhKTtcbiAgICAgICAgcmV0dXJuIHZlcmlmeUhhc2goZGF0YSwgcHVia2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICAgVmVyaWZ5IGEgYnVmZmVyIG9mIGV4YWN0YWxseSAzMiBieXRlcyBpbiBzaXplIChzaGEyNTYodGV4dCkpXG4gICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBkYXRhU2hhMjU2IC0gMzIgYnl0ZSBidWZmZXIgb3Igc3RyaW5nXG4gICAgICAgIEBhcmcge1N0cmluZ3xQdWJsaWNLZXl9IHB1YmtleSAtIEVPU0tleS4uXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7Ym9vbGVhbn1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeUhhc2goZGF0YVNoYTI1NiwgcHVia2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2hleCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhU2hhMjU2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YVNoYTI1NiA9IEJ1ZmZlci5mcm9tKGRhdGFTaGEyNTYsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVNoYTI1Ni5sZW5ndGggIT09IDMyIHx8ICFCdWZmZXIuaXNCdWZmZXIoZGF0YVNoYTI1NikpIHRocm93IG5ldyBFcnJvcihcImRhdGFTaGEyNTY6IDMyIGJ5dGVzIHJlcXVpcmVkXCIpO1xuXG4gICAgICAgIHZhciBwdWJsaWNLZXkgPSBQdWJsaWNLZXkocHVia2V5KTtcbiAgICAgICAgYXNzZXJ0KHB1YmxpY0tleSwgJ3B1YmtleSByZXF1aXJlZCcpO1xuXG4gICAgICAgIHJldHVybiBlY2RzYS52ZXJpZnkoY3VydmUsIGRhdGFTaGEyNTYsIHsgcjogciwgczogcyB9LCBwdWJsaWNLZXkuUSk7XG4gICAgfTtcblxuICAgIC8qKiBAZGVwcmVjYXRlZFxuICAgICAgICAgVmVyaWZ5IGhleCBkYXRhIGJ5IGNvbnZlcnRpbmcgdG8gYSBidWZmZXIgdGhlbiBoYXNoaW5nLlxuICAgICAgICAgQHJldHVybiB7Ym9vbGVhbn1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeUhleChoZXgsIHB1YmtleSkge1xuICAgICAgICBjb25zb2xlLmxvZygnRGVwcmVjYXRlZDogdXNlIHZlcmlmeShkYXRhLCBwdWJrZXksIFwiaGV4XCIpJyk7XG5cbiAgICAgICAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKGhleCwgJ2hleCcpO1xuICAgICAgICByZXR1cm4gdmVyaWZ5KGJ1ZiwgcHVia2V5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgIFJlY292ZXIgdGhlIHB1YmxpYyBrZXkgdXNlZCB0byBjcmVhdGUgdGhpcyBzaWduYXR1cmUgdXNpbmcgZnVsbCBkYXRhLlxuICAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGZ1bGwgZGF0YVxuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICd1dGY4J10gLSBkYXRhIGVuY29kaW5nIChpZiBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtQdWJsaWNLZXl9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZWNvdmVyKGRhdGEpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndXRmOCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGRhdGEpLCAnZGF0YSBpcyBhIHJlcXVpcmVkIFN0cmluZyBvciBCdWZmZXInKTtcbiAgICAgICAgZGF0YSA9IGhhc2guc2hhMjU2KGRhdGEpO1xuXG4gICAgICAgIHJldHVybiByZWNvdmVySGFzaChkYXRhKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGFTaGEyNTYgLSBzaGEyNTYgaGFzaCAzMiBieXRlIGJ1ZmZlciBvciBoZXggc3RyaW5nXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7UHVibGljS2V5fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVjb3Zlckhhc2goZGF0YVNoYTI1Nikge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdoZXgnO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVNoYTI1NiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRhdGFTaGEyNTYgPSBCdWZmZXIuZnJvbShkYXRhU2hhMjU2LCBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFTaGEyNTYubGVuZ3RoICE9PSAzMiB8fCAhQnVmZmVyLmlzQnVmZmVyKGRhdGFTaGEyNTYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkYXRhU2hhMjU2OiAzMiBieXRlIFN0cmluZyBvciBidWZmZXIgcmVxdXJlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGRhdGFTaGEyNTYpO1xuICAgICAgICB2YXIgaTIgPSBpO1xuICAgICAgICBpMiAtPSAyNztcbiAgICAgICAgaTIgPSBpMiAmIDM7XG4gICAgICAgIHZhciBRID0gZWNkc2EucmVjb3ZlclB1YktleShjdXJ2ZSwgZSwgeyByOiByLCBzOiBzLCBpOiBpIH0sIGkyKTtcbiAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tUG9pbnQoUSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRvQnVmZmVyKCkge1xuICAgICAgICB2YXIgYnVmO1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyKDY1KTtcbiAgICAgICAgYnVmLndyaXRlVUludDgoaSwgMCk7XG4gICAgICAgIHIudG9CdWZmZXIoMzIpLmNvcHkoYnVmLCAxKTtcbiAgICAgICAgcy50b0J1ZmZlcigzMikuY29weShidWYsIDMzKTtcbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIH07XG5cbiAgICB2YXIgc2lnbmF0dXJlQ2FjaGUgPSB2b2lkIDA7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgaWYgKHNpZ25hdHVyZUNhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbmF0dXJlQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgc2lnbmF0dXJlQ2FjaGUgPSAnU0lHX0sxXycgKyBrZXlVdGlscy5jaGVja0VuY29kZSh0b0J1ZmZlcigpLCAnSzEnKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZUNhY2hlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHI6IHIsIHM6IHMsIGk6IGksXG4gICAgICAgIHRvQnVmZmVyOiB0b0J1ZmZlcixcbiAgICAgICAgdmVyaWZ5OiB2ZXJpZnksXG4gICAgICAgIHZlcmlmeUhhc2g6IHZlcmlmeUhhc2gsXG4gICAgICAgIHZlcmlmeUhleDogdmVyaWZ5SGV4LCAvLyBkZXByZWNhdGVkXG4gICAgICAgIHJlY292ZXI6IHJlY292ZXIsXG4gICAgICAgIHJlY292ZXJIYXNoOiByZWNvdmVySGFzaCxcbiAgICAgICAgdG9IZXg6IHRvSGV4LFxuICAgICAgICB0b1N0cmluZzogdG9TdHJpbmcsXG5cbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSB2ZXJpZnkgKHNhbWUgYXJndW1lbnRzIGFuZCByZXR1cm4pICovXG4gICAgICAgIHZlcmlmeUJ1ZmZlcjogZnVuY3Rpb24gdmVyaWZ5QnVmZmVyKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlcHJlY2F0ZWQ6IHVzZSBzaWduYXR1cmUudmVyaWZ5IGluc3RlYWQgKHNhbWUgYXJndW1lbnRzKScpO1xuICAgICAgICAgICAgcmV0dXJuIHZlcmlmeS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSByZWNvdmVyIChzYW1lIGFyZ3VtZW50cyBhbmQgcmV0dXJuKSAqL1xuICAgICAgICByZWNvdmVyUHVibGljS2V5OiBmdW5jdGlvbiByZWNvdmVyUHVibGljS2V5KCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlcHJlY2F0ZWQ6IHVzZSBzaWduYXR1cmUucmVjb3ZlciBpbnN0ZWFkIChzYW1lIGFyZ3VtZW50cyknKTtcbiAgICAgICAgICAgIHJldHVybiByZWNvdmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHJlY292ZXJIYXNoIChzYW1lIGFyZ3VtZW50cyBhbmQgcmV0dXJuKSAqL1xuICAgICAgICByZWNvdmVyUHVibGljS2V5RnJvbUJ1ZmZlcjogZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleUZyb21CdWZmZXIoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVwcmVjYXRlZDogdXNlIHNpZ25hdHVyZS5yZWNvdmVySGFzaCBpbnN0ZWFkIChzYW1lIGFyZ3VtZW50cyknKTtcbiAgICAgICAgICAgIHJldHVybiByZWNvdmVySGFzaC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKipcbiAgICBIYXNoIGFuZCBzaWduIGFyYml0cmFyeSBkYXRhLlxuXG4gICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGZ1bGwgZGF0YVxuICAgIEBhcmcge3dpZnxQcml2YXRlS2V5fSBwcml2YXRlS2V5XG4gICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAndXRmOCddIC0gZGF0YSBlbmNvZGluZyAoaWYgc3RyaW5nKVxuXG4gICAgQHJldHVybiB7U2lnbmF0dXJlfVxuKi9cblNpZ25hdHVyZS5zaWduID0gZnVuY3Rpb24gKGRhdGEsIHByaXZhdGVLZXkpIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICd1dGY4JztcblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTtcbiAgICB9XG4gICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSwgJ2RhdGEgaXMgYSByZXF1aXJlZCBTdHJpbmcgb3IgQnVmZmVyJyk7XG4gICAgZGF0YSA9IGhhc2guc2hhMjU2KGRhdGEpO1xuICAgIHJldHVybiBTaWduYXR1cmUuc2lnbkhhc2goZGF0YSwgcHJpdmF0ZUtleSk7XG59O1xuXG4vKipcbiAgICBTaWduIGEgYnVmZmVyIG9mIGV4YWN0YWxseSAzMiBieXRlcyBpbiBzaXplIChzaGEyNTYodGV4dCkpXG5cbiAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhU2hhMjU2IC0gMzIgYnl0ZSBidWZmZXIgb3Igc3RyaW5nXG4gICAgQGFyZyB7d2lmfFByaXZhdGVLZXl9IHByaXZhdGVLZXlcbiAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICdoZXgnXSAtIGRhdGFTaGEyNTYgZW5jb2RpbmcgKGlmIHN0cmluZylcblxuICAgIEByZXR1cm4ge1NpZ25hdHVyZX1cbiovXG5TaWduYXR1cmUuc2lnbkhhc2ggPSBmdW5jdGlvbiAoZGF0YVNoYTI1NiwgcHJpdmF0ZUtleSkge1xuICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2hleCc7XG5cbiAgICBpZiAodHlwZW9mIGRhdGFTaGEyNTYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGFTaGEyNTYgPSBCdWZmZXIuZnJvbShkYXRhU2hhMjU2LCBlbmNvZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXRhU2hhMjU2Lmxlbmd0aCAhPT0gMzIgfHwgIUJ1ZmZlci5pc0J1ZmZlcihkYXRhU2hhMjU2KSkgdGhyb3cgbmV3IEVycm9yKFwiZGF0YVNoYTI1NjogMzIgYnl0ZSBidWZmZXIgcmVxdXJlZFwiKTtcblxuICAgIHByaXZhdGVLZXkgPSBQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xuICAgIGFzc2VydChwcml2YXRlS2V5LCAncHJpdmF0ZUtleSByZXF1aXJlZCcpO1xuXG4gICAgdmFyIGRlciwgZSwgZWNzaWduYXR1cmUsIGksIGxlblIsIGxlblMsIG5vbmNlO1xuICAgIGkgPSBudWxsO1xuICAgIG5vbmNlID0gMDtcbiAgICBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGRhdGFTaGEyNTYpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGVjc2lnbmF0dXJlID0gZWNkc2Euc2lnbihjdXJ2ZSwgZGF0YVNoYTI1NiwgcHJpdmF0ZUtleS5kLCBub25jZSsrKTtcbiAgICAgICAgZGVyID0gZWNzaWduYXR1cmUudG9ERVIoKTtcbiAgICAgICAgbGVuUiA9IGRlclszXTtcbiAgICAgICAgbGVuUyA9IGRlcls1ICsgbGVuUl07XG4gICAgICAgIGlmIChsZW5SID09PSAzMiAmJiBsZW5TID09PSAzMikge1xuICAgICAgICAgICAgaSA9IGVjZHNhLmNhbGNQdWJLZXlSZWNvdmVyeVBhcmFtKGN1cnZlLCBlLCBlY3NpZ25hdHVyZSwgcHJpdmF0ZUtleS50b1B1YmxpYygpLlEpO1xuICAgICAgICAgICAgaSArPSA0OyAvLyBjb21wcmVzc2VkXG4gICAgICAgICAgICBpICs9IDI3OyAvLyBjb21wYWN0ICAvLyAgMjQgb3IgMjcgOiggZm9yY2luZyBvZGQteSAybmQga2V5IGNhbmRpZGF0ZSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub25jZSAlIDEwID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldBUk46IFwiICsgbm9uY2UgKyBcIiBhdHRlbXB0cyB0byBmaW5kIGNhbm9uaWNhbCBzaWduYXR1cmVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFNpZ25hdHVyZShlY3NpZ25hdHVyZS5yLCBlY3NpZ25hdHVyZS5zLCBpKTtcbn07XG5cblNpZ25hdHVyZS5mcm9tQnVmZmVyID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIHZhciBpLCByLCBzO1xuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIoYnVmKSwgJ0J1ZmZlciBpcyByZXF1aXJlZCcpO1xuICAgIGFzc2VydC5lcXVhbChidWYubGVuZ3RoLCA2NSwgJ0ludmFsaWQgc2lnbmF0dXJlIGxlbmd0aCcpO1xuICAgIGkgPSBidWYucmVhZFVJbnQ4KDApO1xuICAgIGFzc2VydC5lcXVhbChpIC0gMjcsIGkgLSAyNyAmIDcsICdJbnZhbGlkIHNpZ25hdHVyZSBwYXJhbWV0ZXInKTtcbiAgICByID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1Zi5zbGljZSgxLCAzMykpO1xuICAgIHMgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmLnNsaWNlKDMzKSk7XG4gICAgcmV0dXJuIFNpZ25hdHVyZShyLCBzLCBpKTtcbn07XG5cblNpZ25hdHVyZS5mcm9tSGV4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHJldHVybiBTaWduYXR1cmUuZnJvbUJ1ZmZlcihCdWZmZXIuZnJvbShoZXgsIFwiaGV4XCIpKTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gc2lnbmF0dXJlIC0gbGlrZSBTSUdfSzFfYmFzZTU4c2lnbmF0dXJlLi5cbiAgICBAcmV0dXJuIHtTaWduYXR1cmV9IG9yIGBudWxsYCAoaW52YWxpZClcbiovXG5TaWduYXR1cmUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21TdHJpbmdPclRocm93KHNpZ25hdHVyZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAgICBAYXJnIHtzdHJpbmd9IHNpZ25hdHVyZSAtIGxpa2UgU0lHX0sxX2Jhc2U1OHNpZ25hdHVyZS4uXG4gICAgQHRocm93cyB7RXJyb3J9IGludmFsaWRcbiAgICBAcmV0dXJuIHtTaWduYXR1cmV9XG4qL1xuU2lnbmF0dXJlLmZyb21TdHJpbmdPclRocm93ID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygc2lnbmF0dXJlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzaWduYXR1cmUpLCAnc3RyaW5nJywgJ3NpZ25hdHVyZScpO1xuICAgIHZhciBtYXRjaCA9IHNpZ25hdHVyZS5tYXRjaCgvXlNJR18oW0EtWmEtejAtOV0rKV8oW0EtWmEtejAtOV0rKSQvKTtcbiAgICBhc3NlcnQobWF0Y2ggIT0gbnVsbCAmJiBtYXRjaC5sZW5ndGggPT09IDMsICdFeHBlY3Rpbmcgc2lnbmF0dXJlIGxpa2U6IFNJR19LMV9iYXNlNThzaWduYXR1cmUuLicpO1xuXG4gICAgdmFyIF9tYXRjaCA9IF9zbGljZWRUb0FycmF5KG1hdGNoLCAzKSxcbiAgICAgICAga2V5VHlwZSA9IF9tYXRjaFsxXSxcbiAgICAgICAga2V5U3RyaW5nID0gX21hdGNoWzJdO1xuXG4gICAgYXNzZXJ0LmVxdWFsKGtleVR5cGUsICdLMScsICdLMSBzaWduYXR1cmUgZXhwZWN0ZWQnKTtcbiAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG59O1xuXG4vKipcbiAgICBAYXJnIHtTdHJpbmd8U2lnbmF0dXJlfSBvIC0gaGV4IHN0cmluZ1xuICAgIEByZXR1cm4ge1NpZ25hdHVyZX1cbiovXG5TaWduYXR1cmUuZnJvbSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIHNpZ25hdHVyZSA9IG8gPyBvLnIgJiYgby5zICYmIG8uaSA/IG8gOiB0eXBlb2YgbyA9PT0gJ3N0cmluZycgJiYgby5sZW5ndGggPT09IDEzMCA/IFNpZ25hdHVyZS5mcm9tSGV4KG8pIDogdHlwZW9mIG8gPT09ICdzdHJpbmcnICYmIG8ubGVuZ3RoICE9PSAxMzAgPyBTaWduYXR1cmUuZnJvbVN0cmluZ09yVGhyb3cobykgOiBCdWZmZXIuaXNCdWZmZXIobykgPyBTaWduYXR1cmUuZnJvbUJ1ZmZlcihvKSA6IG51bGwgOiBvOyAvKm51bGwgb3IgdW5kZWZpbmVkKi9cblxuICAgIGlmICghc2lnbmF0dXJlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpZ25hdHVyZSBzaG91bGQgYmUgYSBoZXggc3RyaW5nIG9yIGJ1ZmZlcicpO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmF0dXJlO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5mb3JjZSh0eXBlLCB2YWx1ZSkge1xuICAvLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbmpzL2JpdGNvaW5qcy1saWJcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnQnVmZmVyJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdOdW1iZXInOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgaWYgKGdldE5hbWUodmFsdWUuY29uc3RydWN0b3IpID09PSBnZXROYW1lKHR5cGUpKSByZXR1cm47XG4gICAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCAnICsgKGdldE5hbWUodHlwZSkgfHwgdHlwZSkgKyAnLCBnb3QgJyArIHZhbHVlKTtcbn07XG5cbmZ1bmN0aW9uIGdldE5hbWUoZm4pIHtcbiAgLy8gV2h5IG5vdCBmbi5uYW1lOiBodHRwczovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8jZnVuY3Rpb25fbmFtZV9wcm9wZXJ0eVxuICB2YXIgbWF0Y2ggPSBmbi50b1N0cmluZygpLm1hdGNoKC9mdW5jdGlvbiAoLio/KVxcKC8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IG51bGw7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBpID0gcmVxdWlyZSgnLi9hcGkvdjEnKTtcbnZhciBhcGlHZW4gPSByZXF1aXJlKCcuL2FwaWdlbicpO1xudmFyIHByb2Nlc3NBcmdzID0gcmVxdWlyZSgnLi9wcm9jZXNzLWFyZ3MnKTtcblxudmFyIEVvc0FwaSA9IGZ1bmN0aW9uIEVvc0FwaShjb25maWcpIHtcbiAgcmV0dXJuIGFwaUdlbigndjEnLCBhcGksIGNvbmZpZyk7XG59O1xuXG5PYmplY3QuYXNzaWduKEVvc0FwaSwge1xuICBwcm9jZXNzQXJnczogcHJvY2Vzc0FyZ3MsXG4gIGFwaTogYXBpLFxuXG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBUZXN0bmV0OiBmdW5jdGlvbiBUZXN0bmV0KGNvbmZpZykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2RlcHJlY2F0ZWQsIGNoYW5nZSBFb3NBcGkuVGVzdG5ldCguLikgdG8ganVzdCBFb3NBcGkoLi4pJyk7XG4gICAgcmV0dXJuIEVvc0FwaShjb25maWcpO1xuICB9LFxuXG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBMb2NhbG5ldDogZnVuY3Rpb24gTG9jYWxuZXQoY29uZmlnKSB7XG4gICAgY29uc29sZS5lcnJvcignZGVwcmVjYXRlZCwgY2hhbmdlIEVvc0FwaS5Mb2NhbG5ldCguLikgdG8ganVzdCBFb3NBcGkoLi4pJyk7XG4gICAgcmV0dXJuIEVvc0FwaShjb25maWcpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFb3NBcGk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc0FyZ3M7XG5cbi8qKlxuICBAdHlwZWRlZiB7b2JqZWN0fSBwcm9jZXNzZWRBcmdzIC0gTm9ybWFsaXplZCBvYmplY3QgY29udGFpbmluZyBhcmd1bWVudHMsIGFuZFxuICBhIGNoYWluZWQgcHJvbWlzZSBhbmQgYSBjYWxsYmFjay5cblxuICBAcHJvcGVydHkge29iamVjdH0gcGFyYW1zIC0gbm9ybWFsaXplZCBhcmdzIG9ubHksIHBhcmFtZXRlcnMgYnkgbmFtZSwgbm8gZXh0cmEgb3B0aW9ucyBvciBjYWxsYmFjay5cblxuICBAcHJvcGVydHkge29iamVjdH0gb3B0aW9ucyAtIG5vbi1udWxsIG9yIG5vbi11bmRlZmluZWQgcmV0dXJuIHZhbHVlIGZyb20gaW52b2NhdGlvbiBvZlxuICBvcHRpb25zRm9ybWF0dGVyKG9wdGlvbnNQYXJhbSkuXG5cbiAgQHByb3BlcnR5IHtmdW5jdGlvbn0gY2FsbGJhY2sgLWNoYWluZWQgdG8gb3B0aW9uYWwgY2FsbGJhY2sgcHJvdmlkZWQgaW4gYXJncy4gIFJlc29sdmVzXG4gIG9yIHJlamVjdHMgcmV0dXJuUHJvbWlzZS5cblxuICBAcHJvcGVydHkge1Byb21pc2V9IHJldHVyblByb21pc2UgLSBwcm9taXNlIGlzIHJldHVybmVkIHdoZW4gbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQgaW5cbiAgYXJnc1thcmdzLmxlbmd0aCAtIDFdLiAgVW5kZWZpbmVkIHdoZW4gYSBjYWxsYmFjayBpcyBwcm92aWRlZC5cbiovXG4vKipcbiAgQ29udmVydCBhcmdzIGFycmF5IG9yIG9iamVjdCBpbnRvIGEgbm9ybWFsaXplZCB2YWx1ZSBvYmplY3QuICBTdXBwb29ydHMgZXh0cmFcbiAgb3B0aW9ucyBhbmQob3IpIGNhbGxiYWNrIHBhcmFtZXRlcnMuXG5cbiAgUGVyIHRoZSBQcm9taXNlIEFQSSBmZWF0dXJlIHByb21pc2lmeUFsbCAoc2VlIGFsc28gc2ItcHJvbWlzaWZ5KSwgdGhlIGNhbGxiYWNrXG4gIChpZiBwcm92aWRlZCkgbXVzdCBhbHdheXMgYmUgbGFzdC5cblxuICBAYXJnIHtBcnJheXxvYmplY3R9IGFyZ3MgLSBVc2VyLXByb3ZpZGVkIHBhcmFtZXRlciBvYmplY3Qgb3IgYXJyYXkgb2YgcGFyYW1ldGVyc1xuICBAYXJnIHtBcnJheX0gZGVmUGFyYW1zIC0gTmFtZXMgZm9yIHRoZSBwYXJhbWV0ZXJzLlxuICBAYXJnIHtzdHJpbmd9IG1ldGhvZE5hbWUgLSBmb3IgZXJyb3IgcmVwb3J0aW5nXG4gIEBhcmcge2Z1bmN0aW9ufSBbb3B0aW9uc0Zvcm1hdHRlcihleHRyYVBhcmFtKSA9IG51bGxdIC0gb3B0aW9uYWwgY2FsbGJhY2sgdXNlZCBpZiBhblxuICAgIGV4dHJhIG9wdGlvbmFsIChub24tY2FsbGJhY2spIHBhcmFtZXRlciBpcyBwcm92aWRlZC5cblxuXG4gIEByZXR1cm4ge3Byb2Nlc3NlZEFyZ3N9IHByb2Nlc3NlZEFyZ3NcbiAgQHRocm93cyBUeXBlRXJyb3IgLSB3aGVuIHBhcmFtZXRlciBjb3VudCBpcyBub3QgZXhhY3QgKGFmdGVyIGFkanVzdGluZyBmb3JcbiAgb3B0aW9ucyBhbmQgY2FsbGJhY2spXG5cbiAgQGV4YW1wbGUgYXBpLnByb2Nlc3NBcmdzKGFyZ3MsIFsnYWNjb3VudCddLCAnY29udHJhY3QnLCBvcHRpb25zRm9ybWF0dGVyKVxuKi9cbmZ1bmN0aW9uIHByb2Nlc3NBcmdzKGFyZ3MsIGRlZlBhcmFtcykge1xuICB2YXIgbWV0aG9kTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ21ldGhvZCc7XG4gIHZhciBvcHRpb25zRm9ybWF0dGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBwYXJhbXMgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICB2YXIgZXhwZWN0ZWRBcmdDb3VudCA9IGRlZlBhcmFtcy5sZW5ndGg7XG5cbiAgLy8gRXh0cmEgY2FsbGJhY2sgYXJndW1lbnQ/ICBMYXN0IHBlciBwcm9taXNpZnlBbGwgc3RhbmRhcmQuXG4gIHZhciBjYWxsYmFja0FyZyA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFja0FyZyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgdmFyIGNhbGxiYWNrID0gdm9pZCAwO1xuICB2YXIgcmV0dXJuUHJvbWlzZSA9IHZvaWQgMDtcbiAgaWYgKGNhbGxiYWNrQXJnKSB7XG4gICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFja0FyZyhlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2tBcmcobnVsbCwgcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVyblByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBMb29rIGZvciB0aGUgb3B0aW9ucyBwYXJhbWV0ZXIgKGFmdGVyIHBvdGVudGlhbCBjYWxsYmFjayB3YXMgcmVtb3ZlZClcbiAgaWYgKHR5cGVvZiBvcHRpb25zRm9ybWF0dGVyID09PSAnZnVuY3Rpb24nICYmIGFyZ3MubGVuZ3RoID4gMCAmJiAoX3R5cGVvZihhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiYgYXJncy5sZW5ndGggPT09IDIgfHwgYXJncy5sZW5ndGggPT09IGV4cGVjdGVkQXJnQ291bnQgKyAxKSkge1xuICAgIC8vQW4gZXh0cmEgb3B0aW9ucyBhcmd1bWVudFxuICAgIG9wdGlvbnMgPSBvcHRpb25zRm9ybWF0dGVyKGFyZ3NbYXJncy5sZW5ndGggLSAxXSk7XG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgLy8gSXQgaXMgdmFsaWQsIHJlbW92ZSBpdCB0byBhdm9pZCBwYXJhbWV0ZXIgY291bnQgYW4gZXJyb3IgYmVsb3dcbiAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyYW1ldGV0ZXJzIChhcmdzKSBjYW4gYmUgb3JkZXJlZCBvciBhbiBvYmplY3RcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIF90eXBlb2YoYXJnc1swXSkgPT09ICdvYmplY3QnKSB7XG4gICAgcGFyYW1zID0gYXJnc1swXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBnaXZlIG9yZGVyZWQgcGFyYW1hdGVycyBuYW1lc1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gZXhwZWN0ZWRBcmdDb3VudCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ3R5cGVvZiBkZWZQYXJhbXNbZXhwZWN0ZWRBcmdDb3VudF0nLCBhcmdzKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtZXRob2ROYW1lICsgJyBpcyBleHBlY3RpbmcgJyArIGV4cGVjdGVkQXJnQ291bnQgKyAnIHBhcmFtZXRlcnMgYnV0ICcgKyBhcmdzLmxlbmd0aCArICcgd2hlcmUgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IG9yZGVyZWQgcGFyYW1ldGVycyBpbnRvIGEgdmFsdWUgb2JqZWN0IGJ5IHBhcmFtZXRlciBuYW1lXG4gICAgdmFyIHBvcyA9IDA7XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBkZWZQYXJhbXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgIHZhciBkZWZQYXJhbSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIHBhcmFtc1tkZWZQYXJhbV0gPSBhcmdzW3Bvc107XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4geyBwYXJhbXM6IHBhcmFtcywgb3B0aW9uczogb3B0aW9ucywgY2FsbGJhY2s6IGNhbGxiYWNrLCByZXR1cm5Qcm9taXNlOiByZXR1cm5Qcm9taXNlIH07XG59IiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxdWlyZSgnLi9jaGFpbl90eXBlcy5qc29uJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNjaGVtYTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkVG9BcnJheTIpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J5dGVidWZmZXInKSxcbiAgICBMb25nID0gX3JlcXVpcmUuTG9uZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVMb25nOiBVTG9uZyxcbiAgaXNOYW1lOiBpc05hbWUsXG4gIGVuY29kZU5hbWU6IGVuY29kZU5hbWUsIC8vIGVuY29kZSBodW1hbiByZWFkYWJsZSBuYW1lIHRvIHVpbnQ2NCAobnVtYmVyIHN0cmluZylcbiAgZGVjb2RlTmFtZTogZGVjb2RlTmFtZSwgLy8gZGVjb2RlIGZyb20gdWludDY0IHRvIGh1bWFuIHJlYWRhYmxlXG4gIGVuY29kZU5hbWVIZXg6IGZ1bmN0aW9uIGVuY29kZU5hbWVIZXgobmFtZSkge1xuICAgIHJldHVybiBMb25nLmZyb21TdHJpbmcoZW5jb2RlTmFtZShuYW1lKSwgdHJ1ZSkudG9TdHJpbmcoMTYpO1xuICB9LFxuICBkZWNvZGVOYW1lSGV4OiBmdW5jdGlvbiBkZWNvZGVOYW1lSGV4KGhleCkge1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgcmV0dXJuIGRlY29kZU5hbWUoTG9uZy5mcm9tU3RyaW5nKGhleCwgdHJ1ZSwgMTYpLnRvU3RyaW5nKCksIGxpdHRsZUVuZGlhbik7XG4gIH0sXG4gIERlY2ltYWxTdHJpbmc6IERlY2ltYWxTdHJpbmcsXG4gIERlY2ltYWxQYWQ6IERlY2ltYWxQYWQsXG4gIERlY2ltYWxJbXBseTogRGVjaW1hbEltcGx5LFxuICBEZWNpbWFsVW5pbXBseTogRGVjaW1hbFVuaW1wbHksXG4gIHByaW50QXNzZXQ6IHByaW50QXNzZXQsXG4gIHBhcnNlQXNzZXQ6IHBhcnNlQXNzZXRcblxuICAvKiogQHByaXZhdGUgKi9cbn07dmFyIHNpZ25lZCA9IGZ1bmN0aW9uIHNpZ25lZChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge307XG59O1xuXG5mdW5jdGlvbiBVTG9uZyh2YWx1ZSkge1xuICB2YXIgdW5zaWduZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gIHZhciByYWRpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTA7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBTb21lIEpTT04gbGlicyB1c2UgbnVtYmVycyBmb3IgdmFsdWVzIHVuZGVyIDUzIGJpdHMgb3Igc3RyaW5ncyBmb3IgbGFyZ2VyLlxuICAgIC8vIEFjY29taWRhdGUgYnV0IGRvdWJsZS1jaGVjayBpdC4uXG4gICAgaWYgKHZhbHVlID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIHBhcmFtZXRlciBvdmVyZmxvdycpO1xuXG4gICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcoU3RyaW5nKHZhbHVlKSwgdW5zaWduZWQsIHJhZGl4KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUsIHVuc2lnbmVkLCByYWRpeCk7XG4gIH0gZWxzZSBpZiAoIUxvbmcuaXNMb25nKHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIHBhcmFtZXRlciBpcyBhIHJlcXVpZWQgTG9uZywgTnVtYmVyIG9yIFN0cmluZycpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gaXNOYW1lKHN0ciwgZXJyKSB7XG4gIHRyeSB7XG4gICAgZW5jb2RlTmFtZShzdHIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGVycihlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG52YXIgY2hhcm1hcCA9ICcuMTIzNDVhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XG52YXIgY2hhcmlkeCA9IGZ1bmN0aW9uIGNoYXJpZHgoY2gpIHtcbiAgdmFyIGlkeCA9IGNoYXJtYXAuaW5kZXhPZihjaCk7XG4gIGlmIChpZHggPT09IC0xKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlcjogXFwnJyArIGNoICsgJ1xcJycpO1xuXG4gIHJldHVybiBpZHg7XG59O1xuXG4vKiogT3JpZ2luYWwgTmFtZSBlbmNvZGUgYW5kIGRlY29kZSBsb2dpYyBpcyBpbiBnaXRodWIuY29tL2Vvc2lvL2VvcyAgbmF0aXZlLmhwcCAqL1xuXG4vKipcbiAgRW5jb2RlIGEgbmFtZSAoYSBiYXNlMzIgc3RyaW5nKSB0byBhIG51bWJlci5cblxuICBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgdGhlIGJsb2NrY2hhaW4gdXNlcyB0aGUgbnVtZXJpY2FsIGVuY29kaW5nIG9mIHN0cmluZ3NcbiAgZm9yIHZlcnkgY29tbW9uIHR5cGVzIGxpa2UgYWNjb3VudCBuYW1lcy5cblxuICBAc2VlIHR5cGVzLmhwcCBzdHJpbmdfdG9fbmFtZVxuXG4gIEBhcmcge3N0cmluZ30gbmFtZSAtIEEgc3RyaW5nIHRvIGVuY29kZSwgdXAgdG8gMTIgY2hhcmFjdGVycyBsb25nLlxuICBAYXJnIHtzdHJpbmd9IFtsaXR0bGVFbmRpYW4gPSB0cnVlXSAtIExpdHRsZSBvciBCaWdlbmRpYW4gZW5jb2RpbmdcblxuICBAcmV0dXJuIHtzdHJpbmc8dWludDY0Pn0gLSBjb21wcmVzc2VkIHN0cmluZyAoZnJvbSBuYW1lIGFyZykuICBBIHN0cmluZyBpc1xuICAgIGFsd2F5cyB1c2VkIGJlY2F1c2UgYSBudW1iZXIgY291bGQgZXhjZWVkIEphdmFTY3JpcHQncyA1MiBiaXQgbGltaXQuXG4qL1xuZnVuY3Rpb24gZW5jb2RlTmFtZShuYW1lKSB7XG4gIHZhciBsaXR0bGVFbmRpYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignbmFtZSBwYXJhbWV0ZXIgaXMgYSByZXF1aXJlZCBzdHJpbmcnKTtcblxuICBpZiAobmFtZS5sZW5ndGggPiAxMikgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBuYW1lIGNhbiBiZSB1cCB0byAxMiBjaGFyYWN0ZXJzIGxvbmcnKTtcblxuICB2YXIgYml0c3RyID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IDEyOyBpKyspIHtcbiAgICAvLyBwcm9jZXNzIGFsbCA2NCBiaXRzIChldmVuIGlmIG5hbWUgaXMgc2hvcnQpXG4gICAgdmFyIGMgPSBpIDwgbmFtZS5sZW5ndGggPyBjaGFyaWR4KG5hbWVbaV0pIDogMDtcbiAgICB2YXIgYml0bGVuID0gaSA8IDEyID8gNSA6IDQ7XG4gICAgdmFyIGJpdHMgPSBOdW1iZXIoYykudG9TdHJpbmcoMik7XG4gICAgaWYgKGJpdHMubGVuZ3RoID4gYml0bGVuKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5hbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBiaXRzID0gJzAnLnJlcGVhdChiaXRsZW4gLSBiaXRzLmxlbmd0aCkgKyBiaXRzO1xuICAgIGJpdHN0ciArPSBiaXRzO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKGJpdHN0ciwgdHJ1ZSwgMik7XG5cbiAgLy8gY29udmVydCB0byBMSVRUTEVfRU5ESUFOXG4gIHZhciBsZUhleCA9ICcnO1xuICB2YXIgYnl0ZXMgPSBsaXR0bGVFbmRpYW4gPyB2YWx1ZS50b0J5dGVzTEUoKSA6IHZhbHVlLnRvQnl0ZXNCRSgpO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBieXRlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBiID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHZhciBuID0gTnVtYmVyKGIpLnRvU3RyaW5nKDE2KTtcbiAgICAgIGxlSGV4ICs9IChuLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIG47XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciB1bE5hbWUgPSBMb25nLmZyb21TdHJpbmcobGVIZXgsIHRydWUsIDE2KS50b1N0cmluZygpO1xuXG4gIC8vIGNvbnNvbGUubG9nKCdlbmNvZGVOYW1lJywgbmFtZSwgdmFsdWUudG9TdHJpbmcoKSwgdWxOYW1lLnRvU3RyaW5nKCksIEpTT04uc3RyaW5naWZ5KGJpdHN0ci5zcGxpdCgvKC4uLi4uKS8pLnNsaWNlKDEpKSlcblxuICByZXR1cm4gdWxOYW1lLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICBAYXJnIHtMb25nfFN0cmluZ3xudW1iZXJ9IHZhbHVlIHVpbnQ2NFxuICBAYXJnIHtzdHJpbmd9IFtsaXR0bGVFbmRpYW4gPSB0cnVlXSAtIExpdHRsZSBvciBCaWdlbmRpYW4gZW5jb2RpbmdcblxuICBAcmV0dXJuIHtzdHJpbmd9XG4qL1xuZnVuY3Rpb24gZGVjb2RlTmFtZSh2YWx1ZSkge1xuICB2YXIgbGl0dGxlRW5kaWFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIHZhbHVlID0gVUxvbmcodmFsdWUpO1xuXG4gIC8vIGNvbnZlcnQgZnJvbSBMSVRUTEVfRU5ESUFOXG4gIHZhciBiZUhleCA9ICcnO1xuICB2YXIgYnl0ZXMgPSBsaXR0bGVFbmRpYW4gPyB2YWx1ZS50b0J5dGVzTEUoKSA6IHZhbHVlLnRvQnl0ZXNCRSgpO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gYnl0ZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgIHZhciBiID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICB2YXIgbiA9IE51bWJlcihiKS50b1N0cmluZygxNik7XG4gICAgICBiZUhleCArPSAobi5sZW5ndGggPT09IDEgPyAnMCcgOiAnJykgKyBuO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYmVIZXggKz0gJzAnLnJlcGVhdCgxNiAtIGJlSGV4Lmxlbmd0aCk7XG5cbiAgdmFyIGZpdmVCaXRzID0gTG9uZy5mcm9tTnVtYmVyKDB4MWYsIHRydWUpO1xuICB2YXIgZm91ckJpdHMgPSBMb25nLmZyb21OdW1iZXIoMHgwZiwgdHJ1ZSk7XG4gIHZhciBiZVZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKGJlSGV4LCB0cnVlLCAxNik7XG5cbiAgdmFyIHN0ciA9ICcnO1xuICB2YXIgdG1wID0gYmVWYWx1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8PSAxMjsgaSsrKSB7XG4gICAgdmFyIGMgPSBjaGFybWFwW3RtcC5hbmQoaSA9PT0gMCA/IGZvdXJCaXRzIDogZml2ZUJpdHMpXTtcbiAgICBzdHIgPSBjICsgc3RyO1xuICAgIHRtcCA9IHRtcC5zaGlmdFJpZ2h0KGkgPT09IDAgPyA0IDogNSk7XG4gIH1cbiAgc3RyID0gc3RyLnJlcGxhY2UoL1xcLiskLywgJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgZG90cyAoYWxsIG9mIHRoZW0pXG5cbiAgLy8gY29uc29sZS5sb2coJ2RlY29kZU5hbWUnLCBzdHIsIGJlVmFsdWUudG9TdHJpbmcoKSwgdmFsdWUudG9TdHJpbmcoKSwgSlNPTi5zdHJpbmdpZnkoYmVWYWx1ZS50b1N0cmluZygyKS5zcGxpdCgvKC4uLi4uKS8pLnNsaWNlKDEpKSlcblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAgTm9ybWFsaXplIGFuZCB2YWxpZGF0ZSBkZWNpbWFsIHN0cmluZyAocG90ZW50aWFsbHkgbGFyZ2UgdmFsdWVzKS4gIFNob3VsZFxuICBhdm9pZCBpbnRlcm5hdGlvbmFsaXphdGlvbiBpc3N1ZXMgaWYgcG9zc2libGUgYnV0IHdpbGwgYmUgc2FmZSBhbmRcbiAgdGhyb3cgYW4gZXJyb3IgZm9yIGFuIGludmFsaWQgbnVtYmVyLlxuXG4gIE5vcm1hbGl6YXRpb24gcmVtb3ZlcyBleHRyYSB6ZXJvcyBvciBkZWNpbWFsLlxuXG4gIEByZXR1cm4ge3N0cmluZ30gdmFsdWVcbiovXG5mdW5jdGlvbiBEZWNpbWFsU3RyaW5nKHZhbHVlKSB7XG4gIGFzc2VydCh2YWx1ZSAhPSBudWxsLCAndmFsdWUgaXMgcmVxdWlyZWQnKTtcbiAgdmFsdWUgPSB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUudG9TdHJpbmcgPyB2YWx1ZS50b1N0cmluZygpIDogU3RyaW5nKHZhbHVlKTtcblxuICB2YXIgbmVnID0gL14tLy50ZXN0KHZhbHVlKTtcbiAgaWYgKG5lZykge1xuICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgaWYgKHZhbHVlWzBdID09PSAnLicpIHtcbiAgICB2YWx1ZSA9ICcwJyArIHZhbHVlO1xuICB9XG5cbiAgdmFyIHBhcnQgPSB2YWx1ZS5zcGxpdCgnLicpO1xuICBhc3NlcnQocGFydC5sZW5ndGggPD0gMiwgJ2ludmFsaWQgZGVjaW1hbCAnICsgdmFsdWUpO1xuICBhc3NlcnQoL15cXGQrKCw/XFxkKSpcXGQqJC8udGVzdChwYXJ0WzBdKSwgJ2ludmFsaWQgZGVjaW1hbCAnICsgdmFsdWUpO1xuXG4gIGlmIChwYXJ0Lmxlbmd0aCA9PT0gMikge1xuICAgIGFzc2VydCgvXlxcZCokLy50ZXN0KHBhcnRbMV0pLCAnaW52YWxpZCBkZWNpbWFsICcgKyB2YWx1ZSk7XG4gICAgcGFydFsxXSA9IHBhcnRbMV0ucmVwbGFjZSgvMCskLywgJycpOyAvLyByZW1vdmUgc3VmZml4aW5nIHplcm9zXG4gICAgaWYgKHBhcnRbMV0gPT09ICcnKSB7XG4gICAgICBwYXJ0LnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnRbMF0gPSBwYXJ0WzBdLnJlcGxhY2UoL14wKi8sICcnKTsgLy8gcmVtb3ZlIGxlYWRpbmcgemVyb3NcbiAgaWYgKHBhcnRbMF0gPT09ICcnKSB7XG4gICAgcGFydFswXSA9ICcwJztcbiAgfVxuICByZXR1cm4gKG5lZyA/ICctJyA6ICcnKSArIHBhcnQuam9pbignLicpO1xufVxuXG4vKipcbiAgRW5zdXJlIGEgZml4ZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLiAgU2FmZSBmb3IgbGFyZ2UgbnVtYmVycy5cblxuICBAc2VlIC4vZm9ybWF0LnRlc3QuanNcblxuICBAZXhhbXBsZSBEZWNpbWFsUGFkKDEwLjIsIDMpID09PSAnMTAuMjAwJ1xuXG4gIEBhcmcge251bWJlcnxzdHJpbmd8b2JqZWN0LnRvU3RyaW5nfSBudW1cbiAgQGFyZyB7bnVtYmVyfSBbcHJlY2lzaW9uID0gbnVsbF0gLSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMuICBOdWxsIHNraXBzXG4gICAgcGFkZGluZyBzdWZmaXggYnV0IHN0aWxsIGFwcGxpZXMgbnVtYmVyIGZvcm1hdCBub3JtYWxpemF0aW9uLlxuICBAcmV0dXJuIHtzdHJpbmd9IGRlY2ltYWwgcGFydCBpcyBhZGRlZCBhbmQgemVybyBwYWRkZWQgdG8gbWF0Y2ggcHJlY2lzaW9uXG4qL1xuZnVuY3Rpb24gRGVjaW1hbFBhZChudW0sIHByZWNpc2lvbikge1xuICB2YXIgdmFsdWUgPSBEZWNpbWFsU3RyaW5nKG51bSk7XG4gIGlmIChwcmVjaXNpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGFzc2VydChwcmVjaXNpb24gPj0gMCAmJiBwcmVjaXNpb24gPD0gMTgsICdQcmVjaXNpb24gc2hvdWxkIGJlIDE4IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuXG4gIHZhciBwYXJ0ID0gdmFsdWUuc3BsaXQoJy4nKTtcblxuICBpZiAocHJlY2lzaW9uID09PSAwICYmIHBhcnQubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHBhcnRbMF07XG4gIH1cblxuICBpZiAocGFydC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcGFydFswXSArICcuJyArICcwJy5yZXBlYXQocHJlY2lzaW9uKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFkID0gcHJlY2lzaW9uIC0gcGFydFsxXS5sZW5ndGg7XG4gICAgYXNzZXJ0KHBhZCA+PSAwLCAnZGVjaW1hbCBcXCcnICsgdmFsdWUgKyAnXFwnIGV4Y2VlZHMgcHJlY2lzaW9uICcgKyBwcmVjaXNpb24pO1xuICAgIHJldHVybiBwYXJ0WzBdICsgJy4nICsgcGFydFsxXSArICcwJy5yZXBlYXQocGFkKTtcbiAgfVxufVxuXG4vKiogRW5zdXJlcyBwcm9wZXIgdHJhaWxpbmcgemVyb3MgdGhlbiByZW1vdmVzIGRlY2ltYWwgcGxhY2UuICovXG5mdW5jdGlvbiBEZWNpbWFsSW1wbHkodmFsdWUsIHByZWNpc2lvbikge1xuICByZXR1cm4gRGVjaW1hbFBhZCh2YWx1ZSwgcHJlY2lzaW9uKS5yZXBsYWNlKCcuJywgJycpO1xufVxuXG4vKipcbiAgUHV0IHRoZSBkZWNpbWFsIHBsYWNlIGJhY2sgaW4gaXRzIHBvc2l0aW9uIGFuZCByZXR1cm4gdGhlIG5vcm1hbGl6ZWQgbnVtYmVyXG4gIHN0cmluZyAod2l0aCBhbnkgdW5uZWNlc3NhcnkgemVyb3Mgb3IgYW4gdW5uZWNlc3NhcnkgZGVjaW1hbCByZW1vdmVkKS5cblxuICBAYXJnIHtzdHJpbmd8bnVtYmVyfHZhbHVlLnRvU3RyaW5nfSB2YWx1ZSAxMDAwMFxuICBAYXJnIHtudW1iZXJ9IHByZWNpc2lvbiA0XG4gIEByZXR1cm4ge251bWJlcn0gMS4wMDAwXG4qL1xuZnVuY3Rpb24gRGVjaW1hbFVuaW1wbHkodmFsdWUsIHByZWNpc2lvbikge1xuICBhc3NlcnQodmFsdWUgIT0gbnVsbCwgJ3ZhbHVlIGlzIHJlcXVpcmVkJyk7XG4gIHZhbHVlID0gdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLnRvU3RyaW5nID8gdmFsdWUudG9TdHJpbmcoKSA6IFN0cmluZyh2YWx1ZSk7XG4gIHZhciBuZWcgPSAvXi0vLnRlc3QodmFsdWUpO1xuICBpZiAobmVnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSk7XG4gIH1cbiAgYXNzZXJ0KC9eXFxkKyQvLnRlc3QodmFsdWUpLCAnaW52YWxpZCB3aG9sZSBudW1iZXIgJyArIHZhbHVlKTtcbiAgYXNzZXJ0KHByZWNpc2lvbiAhPSBudWxsLCAncHJlY2lzaW9uIHJlcXVpcmVkJyk7XG4gIGFzc2VydChwcmVjaXNpb24gPj0gMCAmJiBwcmVjaXNpb24gPD0gMTgsICdQcmVjaXNpb24gc2hvdWxkIGJlIDE4IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuXG4gIC8vIEVuc3VyZSBtaW5pbXVtIGxlbmd0aFxuICB2YXIgcGFkID0gcHJlY2lzaW9uIC0gdmFsdWUubGVuZ3RoO1xuICBpZiAocGFkID4gMCkge1xuICAgIHZhbHVlID0gJycgKyAnMCcucmVwZWF0KHBhZCkgKyB2YWx1ZTtcbiAgfVxuXG4gIHZhciBkb3RJZHggPSB2YWx1ZS5sZW5ndGggLSBwcmVjaXNpb247XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgZG90SWR4KSArICcuJyArIHZhbHVlLnNsaWNlKGRvdElkeCk7XG4gIHJldHVybiAobmVnID8gJy0nIDogJycpICsgRGVjaW1hbFBhZCh2YWx1ZSwgcHJlY2lzaW9uKTsgLy8gTm9ybWFsaXplXG59XG5cbi8qKiBAcHJpdmF0ZSBmb3Igbm93LCBzdXBwb3J0IGZvciBhc3NldCBzdHJpbmdzIGlzIGxpbWl0ZWRcbiovXG5mdW5jdGlvbiBwcmludEFzc2V0KF9yZWYpIHtcbiAgdmFyIGFtb3VudCA9IF9yZWYuYW1vdW50LFxuICAgICAgcHJlY2lzaW9uID0gX3JlZi5wcmVjaXNpb24sXG4gICAgICBzeW1ib2wgPSBfcmVmLnN5bWJvbCxcbiAgICAgIGNvbnRyYWN0ID0gX3JlZi5jb250cmFjdDtcblxuICBhc3NlcnQuZXF1YWwodHlwZW9mIHN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzeW1ib2wpLCAnc3RyaW5nJywgJ3N5bWJvbCBpcyBhIHJlcXVpcmVkIHN0cmluZycpO1xuXG4gIGlmIChhbW91bnQgIT0gbnVsbCAmJiBwcmVjaXNpb24gIT0gbnVsbCkge1xuICAgIGFtb3VudCA9IERlY2ltYWxQYWQoYW1vdW50LCBwcmVjaXNpb24pO1xuICB9XG5cbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKGUxLCBlMikge1xuICAgIHJldHVybiBlMSA9PSBudWxsID8gJycgOiBlMiA9PSBudWxsID8gJycgOiBlMSArIGUyO1xuICB9O1xuXG4gIGlmIChhbW91bnQgIT0gbnVsbCkge1xuICAgIC8vIHRoZSBhbW91bnQgY29udGFpbnMgdGhlIHByZWNpc2lvblxuICAgIHJldHVybiBqb2luKGFtb3VudCwgJyAnKSArIHN5bWJvbCArIGpvaW4oJ0AnLCBjb250cmFjdCk7XG4gIH1cblxuICByZXR1cm4gam9pbihwcmVjaXNpb24sICcsJykgKyBzeW1ib2wgKyBqb2luKCdAJywgY29udHJhY3QpO1xufVxuXG4vKipcbiAgQXR0ZW1wdHMgdG8gcGFyc2UgYWxsIGZvcm1zIG9mIHRoZSBhc3NldCBzdHJpbmdzIChzeW1ib2wsIGFzc2V0LCBvciBleHRlbmRlZFxuICB2ZXJzaW9ucykuICBJZiB0aGUgcHJvdmlkZWQgc3RyaW5nIGNvbnRhaW5zIGFueSBhZGRpdGlvbmFsIG9yIGFwcGVhcnMgdG8gaGF2ZVxuICBpbnZhbGlkIGluZm9ybWF0aW9uIGFuIGVycm9yIGlzIHRocm93bi5cblxuICBAcmV0dXJuIHtvYmplY3R9IHthbW91bnQsIHByZWNpc2lvbiwgc3ltYm9sLCBjb250cmFjdH1cbiAgQHRocm93cyBBc3NlcnRpb25FcnJvclxuKi9cbmZ1bmN0aW9uIHBhcnNlQXNzZXQoc3RyKSB7XG4gIHZhciBfc3RyJHNwbGl0ID0gc3RyLnNwbGl0KCcgJyksXG4gICAgICBfc3RyJHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3N0ciRzcGxpdCwgMSksXG4gICAgICBhbW91bnRSYXcgPSBfc3RyJHNwbGl0MlswXTtcblxuICB2YXIgYW1vdW50TWF0Y2ggPSBhbW91bnRSYXcubWF0Y2goL14oLT9bMC05XSsoXFwuWzAtOV0rKT8pKCB8JCkvKTtcbiAgdmFyIGFtb3VudCA9IGFtb3VudE1hdGNoID8gYW1vdW50TWF0Y2hbMV0gOiBudWxsO1xuXG4gIHZhciBwcmVjaXNpb25NYXRjaCA9IHN0ci5tYXRjaCgvKF58ICkoWzAtOV0rKSwoW0EtWl0rKShAfCQpLyk7XG4gIHZhciBwcmVjaXNpb25TeW1ib2wgPSBwcmVjaXNpb25NYXRjaCA/IE51bWJlcihwcmVjaXNpb25NYXRjaFsyXSkgOiBudWxsO1xuICB2YXIgcHJlY2lzaW9uQW1vdW50ID0gYW1vdW50ID8gKGFtb3VudC5zcGxpdCgnLicpWzFdIHx8ICcnKS5sZW5ndGggOiBudWxsO1xuICB2YXIgcHJlY2lzaW9uID0gcHJlY2lzaW9uU3ltYm9sICE9IG51bGwgPyBwcmVjaXNpb25TeW1ib2wgOiBwcmVjaXNpb25BbW91bnQ7XG5cbiAgdmFyIHN5bWJvbE1hdGNoID0gc3RyLm1hdGNoKC8oXnwgfCwpKFtBLVpdKykoQHwkKS8pO1xuICB2YXIgc3ltYm9sID0gc3ltYm9sTWF0Y2ggPyBzeW1ib2xNYXRjaFsyXSA6IG51bGw7XG5cbiAgdmFyIF9zdHIkc3BsaXQzID0gc3RyLnNwbGl0KCdAJyksXG4gICAgICBfc3RyJHNwbGl0NCA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3N0ciRzcGxpdDMsIDIpLFxuICAgICAgX3N0ciRzcGxpdDQkID0gX3N0ciRzcGxpdDRbMV0sXG4gICAgICBjb250cmFjdFJhdyA9IF9zdHIkc3BsaXQ0JCA9PT0gdW5kZWZpbmVkID8gJycgOiBfc3RyJHNwbGl0NCQ7XG5cbiAgdmFyIGNvbnRyYWN0ID0gL15bYS16MC01XSsoXFwuW2EtejAtNV0rKSokLy50ZXN0KGNvbnRyYWN0UmF3KSA/IGNvbnRyYWN0UmF3IDogbnVsbDtcblxuICB2YXIgY2hlY2sgPSBwcmludEFzc2V0KHsgYW1vdW50OiBhbW91bnQsIHByZWNpc2lvbjogcHJlY2lzaW9uLCBzeW1ib2w6IHN5bWJvbCwgY29udHJhY3Q6IGNvbnRyYWN0IH0pO1xuXG4gIGFzc2VydC5lcXVhbChzdHIsIGNoZWNrLCAnSW52YWxpZCBhc3NldCBzdHJpbmc6ICcgKyBzdHIgKyAnICE9PSAnICsgY2hlY2spO1xuXG4gIGlmIChwcmVjaXNpb24gIT0gbnVsbCkge1xuICAgIGFzc2VydChwcmVjaXNpb24gPj0gMCAmJiBwcmVjaXNpb24gPD0gMTgsICdQcmVjaXNpb24gc2hvdWxkIGJlIDE4IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuICB9XG4gIGlmIChzeW1ib2wgIT0gbnVsbCkge1xuICAgIGFzc2VydChzeW1ib2wubGVuZ3RoIDw9IDcsICdBc3NldCBzeW1ib2wgaXMgNyBjaGFyYWN0ZXJzIG9yIGxlc3MnKTtcbiAgfVxuICBpZiAoY29udHJhY3QgIT0gbnVsbCkge1xuICAgIGFzc2VydChjb250cmFjdC5sZW5ndGggPD0gMTIsICdDb250cmFjdCBpcyAxMiBjaGFyYWN0ZXJzIG9yIGxlc3MnKTtcbiAgfVxuXG4gIHJldHVybiB7IGFtb3VudDogYW1vdW50LCBwcmVjaXNpb246IHByZWNpc2lvbiwgc3ltYm9sOiBzeW1ib2wsIGNvbnRyYWN0OiBjb250cmFjdCB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBc3NldCAtIGFzc2V0IHR5cGUgb2YgZW9zXG4gKiBAYXV0aG9yIGtpbmdoYW5kQGZveG1haWwuY29tXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2V0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX3ZhbDogbnVtYmVyLCBwcm90ZWN0ZWQgX3N5bTogc3RyaW5nLCBwcm90ZWN0ZWQgX2RlY2ltYWwgPSA0KSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHZhbHVlXG4gICAgICogQHJldHVybiB7Kn1cbiAgICAgKi9cbiAgICBnZXQgdmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzeW1ib2xcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIGdldCBzeW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zeW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGRlY2ltYWxcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ8Kn1cbiAgICAgKi9cbiAgICBnZXQgZGVjaW1hbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlY2ltYWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IFN0cmluZyB2YWwgd2l0aG91dCBzeW1ib2xcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmcgfCAqfVxuICAgICAqL1xuICAgIGdldCB2YWxTdHIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWwudG9GaXhlZCh0aGlzLmRlY2ltYWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBzdHJpbmcgdmFsIHdpdGggc3ltYm9sLCBzdWNoIGFzICcxLjAwMDAgRU9TJ1xuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnZhbFN0cn0gJHt0aGlzLnN5bX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIGFzc2V0IGJ5IGFzc2V0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhc3NldFN0clxuICAgICAqIEByZXR1cm4ge0Fzc2V0fVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2UoYXNzZXRTdHI6IHN0cmluZykge1xuICAgICAgICBpZiAoIWFzc2V0U3RyKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBhc3NldFN0ciA9IGFzc2V0U3RyLnRyaW0oKTtcbiAgICAgICAgY29uc3QgYmxhbmtQb3MgPSBhc3NldFN0ci5pbmRleE9mKCcgJyk7XG4gICAgICAgIGlmIChibGFua1BvcyA8IDApIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IHN0clZhbCA9IGFzc2V0U3RyLnNsaWNlKDAsIGJsYW5rUG9zKTtcbiAgICAgICAgY29uc3Qgc3RyU3ltID0gYXNzZXRTdHIuc2xpY2UoMSArIGJsYW5rUG9zKTtcbiAgICAgICAgaWYgKCFzdHJWYWwgfHwgIXN0clN5bSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGRlY2ltYWxQb3MgPSBhc3NldFN0ci5pbmRleE9mKCcuJyk7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSBkZWNpbWFsUG9zIDwgMCA/IDAgOiBibGFua1BvcyAtIGRlY2ltYWxQb3MgLSAxO1xuICAgICAgICBjb25zdCB2YWwgPSBwYXJzZUZsb2F0KHN0clZhbCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBBc3NldCh2YWwsIHN0clN5bSwgZGVjaW1hbCk7XG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xuICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBwLnJlcXVlc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlQcm9wZXJ0aWVzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdGhpc1t0YXJnZXRQcm9wXVtwcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ211bHRpRW50cnknLFxuICAgICd1bmlxdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdnZXQnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgW1xuICAgICdkaXJlY3Rpb24nLFxuICAgICdrZXknLFxuICAgICdwcmltYXJ5S2V5JyxcbiAgICAndmFsdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgW1xuICAgICd1cGRhdGUnLFxuICAgICdkZWxldGUnXG4gIF0pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvciA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmNyZWF0ZUluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnaW5kZXhOYW1lcycsXG4gICAgJ2F1dG9JbmNyZW1lbnQnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdwdXQnLFxuICAgICdhZGQnLFxuICAgICdkZWxldGUnLFxuICAgICdjbGVhcicsXG4gICAgJ2dldCcsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEtleScsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdkZWxldGVJbmRleCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90eCA9IGlkYlRyYW5zYWN0aW9uO1xuICAgIHRoaXMuY29tcGxldGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl90eC5vYmplY3RTdG9yZS5hcHBseSh0aGlzLl90eCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFRyYW5zYWN0aW9uLCAnX3R4JywgW1xuICAgICdvYmplY3RTdG9yZU5hbWVzJyxcbiAgICAnbW9kZSdcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFtcbiAgICAnYWJvcnQnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFVwZ3JhZGVEQihkYiwgb2xkVmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBVcGdyYWRlREIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl9kYi5jcmVhdGVPYmplY3RTdG9yZS5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFVwZ3JhZGVEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVXBncmFkZURCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnZGVsZXRlT2JqZWN0U3RvcmUnLFxuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gREIoZGIpIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICB9XG5cbiAgREIucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICAvLyBBZGQgY3Vyc29yIGl0ZXJhdG9yc1xuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyB3aXRoIHByb21pc2VzXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xuICAgIFtPYmplY3RTdG9yZSwgSW5kZXhdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICAgIC8vIERvbid0IGNyZWF0ZSBpdGVyYXRlS2V5Q3Vyc29yIGlmIG9wZW5LZXlDdXJzb3IgZG9lc24ndCBleGlzdC5cbiAgICAgIGlmICghKGZ1bmNOYW1lIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcblxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW2Z1bmNOYW1lLnJlcGxhY2UoJ29wZW4nLCAnaXRlcmF0ZScpXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgbmF0aXZlT2JqZWN0ID0gdGhpcy5fc3RvcmUgfHwgdGhpcy5faW5kZXg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmF0aXZlT2JqZWN0W2Z1bmNOYW1lXS5hcHBseShuYXRpdmVPYmplY3QsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwb2x5ZmlsbCBnZXRBbGxcbiAgW0luZGV4LCBPYmplY3RTdG9yZV0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsKSByZXR1cm47XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKHF1ZXJ5LCBjb3VudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbihjdXJzb3IpIHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKTtcblxuICAgICAgICAgIGlmIChjb3VudCAhPT0gdW5kZWZpbmVkICYmIGl0ZW1zLmxlbmd0aCA9PSBjb3VudCkge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIHZhciBleHAgPSB7XG4gICAgb3BlbjogZnVuY3Rpb24obmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ29wZW4nLCBbbmFtZSwgdmVyc2lvbl0pO1xuICAgICAgdmFyIHJlcXVlc3QgPSBwLnJlcXVlc3Q7XG5cbiAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAodXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB1cGdyYWRlQ2FsbGJhY2sobmV3IFVwZ3JhZGVEQihyZXF1ZXN0LnJlc3VsdCwgZXZlbnQub2xkVmVyc2lvbiwgcmVxdWVzdC50cmFuc2FjdGlvbikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbihkYikge1xuICAgICAgICByZXR1cm4gbmV3IERCKGRiKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVsZXRlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdENhbGwoaW5kZXhlZERCLCAnZGVsZXRlRGF0YWJhc2UnLCBbbmFtZV0pO1xuICAgIH1cbiAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cDtcbiAgICBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHM7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VsZi5pZGIgPSBleHA7XG4gIH1cbn0oKSk7XG4iLCJleHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZSc7XG5leHBvcnQgKiBmcm9tICcuL215a2V5JzsiLCJpbXBvcnQgaWRiIGZyb20gJ2lkYidcbmltcG9ydCBFb3MgZnJvbSAnZW9zanMnXG5pbXBvcnQgRWNjIGZyb20gJ2Vvc2pzLWVjYydcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJ1xuXG5pbXBvcnQgeyBlb3NOb2RlQ29uZmlncyB9IGZyb20gJy4vc3JjL2NvbmZpZ3MnXG5cbmltcG9ydCB7IFNjYXR0ZXJQbGF5ZXIgfSBmcm9tICcuL3NyYy9vdXRPZkJveC9zY2F0dGVyUGxheWVyL3NjYXR0ZXJQbGF5ZXInXG5pbXBvcnQgeyBQbGF5ZXIsIFNpZ25QbGF5ZXIsIFJlYWRpbmdQbGF5ZXIgfSBmcm9tICcuL3NyYydcblxuaW1wb3J0IHsgTXlrZXlQbHVnaW4gfSBmcm9tICcuL3NyYy9wbHVnaW5zJ1xuXG5jb25zb2xlLmxvZygnZW9zcGxheWVyID4+PiBjb25maWdzIGxvYWRlZC4nKVxuY29uc29sZS5sb2coJzonLCBlb3NOb2RlQ29uZmlncylcblxuLyoqXG4gKiBlbnYgb2YgYnJvd3NlclxuICogQHR5cGUge2lzUGN9XG4gKi9cbndpbmRvdy5lbnYgPSBjbGFzcyBlbnYge1xuICBzdGF0aWMgZ2V0IGlzUGMgKCkge1xuICAgIHJldHVybiAhL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQb2R8QmxhY2tCZXJyeS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfVxufVxuXG4vKipcbiAqIGVvc2pzXG4gKiBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Vvc2pzfVxuICogQHR5cGUge0Vvc31cbiAqL1xud2luZG93LmVvc2pzID0gRW9zXG5cbi8qKlxuICogZW9zanNfZWNjXG4gKiBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Vvc2pzLWVjY31cbiAqIEB0eXBlIHtFY2N9XG4gKi9cbndpbmRvdy5lb3Nqc19lY2MgPSBFY2NcblxuLyoqXG4gKiBiaWcgbnVtYmVyXG4gKiBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JpZ251bWJlci5qc31cbiAqIEB0eXBlIHtCaWdOdW1iZXJ9XG4gKi9cbndpbmRvdy5CaWdOdW1iZXIgPSBCaWdOdW1iZXJcblxuLyoqXG4gKiBpbmRleCBkYXRhIGJhc2VcbiAqIEBzZWUge0B1cmwgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaWRiIH1cbiAqL1xud2luZG93LmlkYiA9IGlkYlxuXG4vKipcbiAqIHRoZSBlb3MgcGxheWVyXG4gKiBAdHlwZSB7UGxheWVyfVxuICovXG53aW5kb3cuZW9zcGxheWVyID0gbmV3IFNjYXR0ZXJQbGF5ZXIoZW9zTm9kZUNvbmZpZ3MpXG5cbmlmICghd2luZG93LmtoKSB7XG4gIHdpbmRvdy5raCA9IHt9XG59XG5cbmNvbnNvbGUubG9nKCdlb3NwbGF5ZXIgPj4+IHNjYXR0ZXIgcGxheWVyIGNyZWF0ZWQuJylcblxud2luZG93LmtoLmVvcyA9IHtcbiAgUGxheWVyLFxuICBTY2F0dGVyUGxheWVyLFxuICBTaWduUGxheWVyLFxuICBSZWFkaW5nUGxheWVyLFxuICBQbHVnaW5zOiB7XG4gICAgbXlrZXk6IG5ldyBNeWtleVBsdWdpbigpXG4gIH1cbn1cblxuY29uc29sZS5sb2coJ2Vvc3BsYXllciA+Pj4gcGx1Z2lucyBsb2FkZWQuJylcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgQWVzID0gcmVxdWlyZShcIi4vYWVzXCIpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKFwiLi9rZXlfcHJpdmF0ZVwiKTtcbnZhciBQdWJsaWNLZXkgPSByZXF1aXJlKFwiLi9rZXlfcHVibGljXCIpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoXCIuL3NpZ25hdHVyZVwiKTtcbnZhciBrZXlfdXRpbHMgPSByZXF1aXJlKFwiLi9rZXlfdXRpbHNcIik7XG52YXIgaGFzaCA9IHJlcXVpcmUoXCIuL2hhc2hcIik7XG5cbi8qKlxuICAgIFtXYWxsZXQgSW1wb3J0IEZvcm1hdF0oaHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvV2FsbGV0X2ltcG9ydF9mb3JtYXQpXG4gICAgQHR5cGVkZWYge3N0cmluZ30gd2lmXG4qL1xuLyoqXG4gICAgRU9TS2V5Li5cbiAgICBAdHlwZWRlZiB7c3RyaW5nfSBwdWJrZXlcbiovXG5cbi8qKiBAbmFtZXNwYWNlICovXG52YXIgZWNjID0ge1xuICAgIC8qKlxuICAgICAgSW5pdGlhbGl6ZSBieSBydW5uaW5nIHNvbWUgc2VsZi1jaGVja2luZyBjb2RlLiAgVGhpcyBzaG91bGQgdGFrZSBhXG4gICAgICBzZWNvbmQgdG8gZ2F0aGVyIGFkZGl0aW9uYWwgQ1BVIGVudHJvcHkgdXNlZCBkdXJpbmcgcHJpdmF0ZSBrZXlcbiAgICAgIGdlbmVyYXRpb24uXG4gICAgICAgSW5pdGlhbGl6YXRpb24gaGFwcGVucyBvbmNlIGV2ZW4gaWYgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICAgKi9cbiAgICBpbml0aWFsaXplOiBQcml2YXRlS2V5LmluaXRpYWxpemUsXG5cbiAgICAvKipcbiAgICAgIERvZXMgbm90IHBhdXNlIHRvIGdhdGhlciBDUFUgZW50cm9weS5cbiAgICAgIEByZXR1cm4ge1Byb21pc2U8UHJpdmF0ZUtleT59IHRlc3Qga2V5XG4gICAgKi9cbiAgICB1bnNhZmVSYW5kb21LZXk6IGZ1bmN0aW9uIHVuc2FmZVJhbmRvbUtleSgpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkudW5zYWZlUmFuZG9tS2V5KCkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7bnVtYmVyfSBbY3B1RW50cm9weUJpdHMgPSAwXSBnYXRoZXIgYWRkaXRpb25hbCBlbnRyb3B5XG4gICAgICAgIGZyb20gYSBDUFUgbWluaW5nIGFsZ29yaXRobS4gIFRoaXMgd2lsbCBhbHJlYWR5IGhhcHBlbiBvbmNlIGJ5XG4gICAgICAgIGRlZmF1bHQuXG4gICAgICAgICBAcmV0dXJuIHtQcm9taXNlPHdpZj59XG4gICAgICAgICBAZXhhbXBsZVxuICAgIGVjYy5yYW5kb21LZXkoKS50aGVuKHByaXZhdGVLZXkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdQcml2YXRlIEtleTpcXHQnLCBwcml2YXRlS2V5KSAvLyB3aWZcbiAgICBjb25zb2xlLmxvZygnUHVibGljIEtleTpcXHQnLCBlY2MucHJpdmF0ZVRvUHVibGljKHByaXZhdGVLZXkpKSAvLyBFT1NrZXkuLi5cbiAgICB9KVxuICAgICovXG4gICAgcmFuZG9tS2V5OiBmdW5jdGlvbiByYW5kb21LZXkoY3B1RW50cm9weUJpdHMpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkucmFuZG9tS2V5KGNwdUVudHJvcHlCaXRzKS50aGVuKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICAgQGFyZyB7c3RyaW5nfSBzZWVkIC0gYW55IGxlbmd0aCBzdHJpbmcuICBUaGlzIGlzIHByaXZhdGUuICBUaGUgc2FtZVxuICAgICAgICBzZWVkIHByb2R1Y2VzIHRoZSBzYW1lIHByaXZhdGUga2V5IGV2ZXJ5IHRpbWUuICBBdCBsZWFzdCAxMjggcmFuZG9tXG4gICAgICAgIGJpdHMgc2hvdWxkIGJlIHVzZWQgdG8gcHJvZHVjZSBhIGdvb2QgcHJpdmF0ZSBrZXkuXG4gICAgICAgIEByZXR1cm4ge3dpZn1cbiAgICAgICAgIEBleGFtcGxlIGVjYy5zZWVkUHJpdmF0ZSgnc2VjcmV0JykgPT09IHdpZlxuICAgICovXG4gICAgc2VlZFByaXZhdGU6IGZ1bmN0aW9uIHNlZWRQcml2YXRlKHNlZWQpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbVNlZWQoc2VlZCkudG9TdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge3dpZn0gd2lmXG4gICAgICAgIEBhcmcge3N0cmluZ30gW3B1YmtleV9wcmVmaXggPSAnRU9TJ10gLSBwdWJsaWMga2V5IHByZWZpeFxuICAgICAgICAgQHJldHVybiB7cHVia2V5fVxuICAgICAgICAgQGV4YW1wbGUgZWNjLnByaXZhdGVUb1B1YmxpYyh3aWYpID09PSBwdWJrZXlcbiAgICAqL1xuICAgIHByaXZhdGVUb1B1YmxpYzogZnVuY3Rpb24gcHJpdmF0ZVRvUHVibGljKHdpZikge1xuICAgICAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5KHdpZikudG9QdWJsaWMoKS50b1N0cmluZyhwdWJrZXlfcHJlZml4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge3B1YmtleX0gcHVia2V5IC0gbGlrZSBFT1NLZXkuLlxuICAgICAgICBAYXJnIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddXG4gICAgICAgICBAcmV0dXJuIHtib29sZWFufSB2YWxpZFxuICAgICAgICAgQGV4YW1wbGUgZWNjLmlzVmFsaWRQdWJsaWMocHVia2V5KSA9PT0gdHJ1ZVxuICAgICovXG4gICAgaXNWYWxpZFB1YmxpYzogZnVuY3Rpb24gaXNWYWxpZFB1YmxpYyhwdWJrZXkpIHtcbiAgICAgICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdFT1MnO1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmlzVmFsaWQocHVia2V5LCBwdWJrZXlfcHJlZml4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge3dpZn0gd2lmXG4gICAgICAgIEByZXR1cm4ge2Jvb2xlYW59IHZhbGlkXG4gICAgICAgICBAZXhhbXBsZSBlY2MuaXNWYWxpZFByaXZhdGUod2lmKSA9PT0gdHJ1ZVxuICAgICovXG4gICAgaXNWYWxpZFByaXZhdGU6IGZ1bmN0aW9uIGlzVmFsaWRQcml2YXRlKHdpZikge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5pc1ZhbGlkKHdpZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBDcmVhdGUgYSBzaWduYXR1cmUgdXNpbmcgZGF0YSBvciBhIGhhc2guXG4gICAgICAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhXG4gICAgICAgIEBhcmcge3dpZnxQcml2YXRlS2V5fSBwcml2YXRlS2V5XG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ3V0ZjgnXSAtIGRhdGEgZW5jb2RpbmcgKGlmIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge3N0cmluZ30gc3RyaW5nIHNpZ25hdHVyZVxuICAgICAgICAgQGV4YW1wbGUgZWNjLnNpZ24oJ0kgYW0gYWxpdmUnLCB3aWYpXG4gICAgKi9cbiAgICBzaWduOiBmdW5jdGlvbiBzaWduKGRhdGEsIHByaXZhdGVLZXkpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAndXRmOCc7XG5cbiAgICAgICAgaWYgKGVuY29kaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBUEkgY2hhbmdlZCwgdXNlIHNpZ25IYXNoKC4uKSBpbnN0ZWFkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1dhcm5pbmc6IGVjYy5zaWduIGhhc2hEYXRhIHBhcmFtZXRlciB3YXMgcmVtb3ZlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTaWduYXR1cmUuc2lnbihkYXRhLCBwcml2YXRlS2V5LCBlbmNvZGluZykudG9TdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGFTaGEyNTYgLSBzaGEyNTYgaGFzaCAzMiBieXRlIGJ1ZmZlciBvciBzdHJpbmdcbiAgICAgICAgQGFyZyB7d2lmfFByaXZhdGVLZXl9IHByaXZhdGVLZXlcbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAnaGV4J10gLSBkYXRhU2hhMjU2IGVuY29kaW5nIChpZiBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtzdHJpbmd9IHN0cmluZyBzaWduYXR1cmVcbiAgICAqL1xuICAgIHNpZ25IYXNoOiBmdW5jdGlvbiBzaWduSGFzaChkYXRhU2hhMjU2LCBwcml2YXRlS2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2hleCc7XG5cbiAgICAgICAgcmV0dXJuIFNpZ25hdHVyZS5zaWduSGFzaChkYXRhU2hhMjU2LCBwcml2YXRlS2V5LCBlbmNvZGluZykudG9TdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIFZlcmlmeSBzaWduZWQgZGF0YS5cbiAgICAgICAgIEBhcmcge3N0cmluZ3xCdWZmZXJ9IHNpZ25hdHVyZSAtIGJ1ZmZlciBvciBoZXggc3RyaW5nXG4gICAgICAgIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGFcbiAgICAgICAgQGFyZyB7cHVia2V5fFB1YmxpY0tleX0gcHVia2V5XG4gICAgICAgIEBhcmcge2Jvb2xlYW59IFtoYXNoRGF0YSA9IHRydWVdIC0gc2hhMjU2IGhhc2ggZGF0YSBiZWZvcmUgdmVyaWZ5XG4gICAgICAgIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICAgICBAZXhhbXBsZSBlY2MudmVyaWZ5KHNpZ25hdHVyZSwgJ0kgYW0gYWxpdmUnLCBwdWJrZXkpID09PSB0cnVlXG4gICAgKi9cbiAgICB2ZXJpZnk6IGZ1bmN0aW9uIHZlcmlmeShzaWduYXR1cmUsIGRhdGEsIHB1YmtleSkge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICd1dGY4JztcblxuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FQSSBjaGFuZ2VkLCB1c2UgdmVyaWZ5SGFzaCguLikgaW5zdGVhZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXYXJuaW5nOiBlY2MudmVyaWZ5IGhhc2hEYXRhIHBhcmFtZXRlciB3YXMgcmVtb3ZlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHNpZ25hdHVyZSk7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmUudmVyaWZ5KGRhdGEsIHB1YmtleSwgZW5jb2RpbmcpO1xuICAgIH0sXG5cbiAgICB2ZXJpZnlIYXNoOiBmdW5jdGlvbiB2ZXJpZnlIYXNoKHNpZ25hdHVyZSwgZGF0YVNoYTI1NiwgcHVia2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJ2hleCc7XG5cbiAgICAgICAgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20oc2lnbmF0dXJlKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS52ZXJpZnlIYXNoKGRhdGFTaGEyNTYsIHB1YmtleSwgZW5jb2RpbmcpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAgICBSZWNvdmVyIHRoZSBwdWJsaWMga2V5IHVzZWQgdG8gY3JlYXRlIHRoZSBzaWduYXR1cmUuXG4gICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBzaWduYXR1cmUgKEVPU2Jhc2U1OHNpZy4uLCBIZXgsIEJ1ZmZlcilcbiAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGZ1bGwgZGF0YVxuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICd1dGY4J10gLSBkYXRhIGVuY29kaW5nIChpZiBkYXRhIGlzIGEgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7cHVia2V5fVxuICAgICAgICAgQGV4YW1wbGUgZWNjLnJlY292ZXIoc2lnbmF0dXJlLCAnSSBhbSBhbGl2ZScpID09PSBwdWJrZXlcbiAgICAqL1xuICAgIHJlY292ZXI6IGZ1bmN0aW9uIHJlY292ZXIoc2lnbmF0dXJlLCBkYXRhKSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ3V0ZjgnO1xuXG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQVBJIGNoYW5nZWQsIHVzZSByZWNvdmVySGFzaChzaWduYXR1cmUsIGRhdGEpIGluc3RlYWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnV2FybmluZzogZWNjLnJlY292ZXIgaGFzaERhdGEgcGFyYW1ldGVyIHdhcyByZW1vdmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20oc2lnbmF0dXJlKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVyKGRhdGEsIGVuY29kaW5nKS50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gc2lnbmF0dXJlIChFT1NiYXNlNThzaWcuLiwgSGV4LCBCdWZmZXIpXG4gICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGFTaGEyNTYgLSBzaGEyNTYgaGFzaCAzMiBieXRlIGJ1ZmZlciBvciBoZXggc3RyaW5nXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgZGF0YVNoYTI1NiBpcyBhIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge1B1YmxpY0tleX1cbiAgICAqL1xuICAgIHJlY292ZXJIYXNoOiBmdW5jdGlvbiByZWNvdmVySGFzaChzaWduYXR1cmUsIGRhdGFTaGEyNTYpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaGV4JztcblxuICAgICAgICBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmUpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJIYXNoKGRhdGFTaGEyNTYsIGVuY29kaW5nKS50b1N0cmluZygpO1xuICAgIH0sXG5cbiAgICAvKiogQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGFsd2F5cyBiaW5hcnksIHlvdSBtYXkgbmVlZCBCdWZmZXIuZnJvbShkYXRhLCAnaGV4JylcbiAgICAgICAgQGFyZyB7c3RyaW5nfSBbZW5jb2RpbmcgPSAnaGV4J10gLSByZXN1bHQgZW5jb2RpbmcgJ2hleCcsICdiaW5hcnknIG9yICdiYXNlNjQnXG4gICAgICAgIEByZXR1cm4ge3N0cmluZ3xCdWZmZXJ9IC0gQnVmZmVyIHdoZW4gZW5jb2RpbmcgaXMgbnVsbCwgb3Igc3RyaW5nXG4gICAgICAgICBAZXhhbXBsZSBlY2Muc2hhMjU2KCdoYXNobWUnKSA9PT0gJzAyMjA4Yi4uJ1xuICAgICAgICBAZXhhbXBsZSBlY2Muc2hhMjU2KEJ1ZmZlci5mcm9tKCcwMjIwOGInLCAnaGV4JykpID09PSAnMjlhMjMuLidcbiAgICAqL1xuICAgIHNoYTI1NjogZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgICAgICAgdmFyIHJlc3VsdEVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnaGV4JztcbiAgICAgICAgcmV0dXJuIGhhc2guc2hhMjU2KGRhdGEsIHJlc3VsdEVuY29kaW5nKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVjYzsiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIi8qXHJcbiBDb3B5cmlnaHQgMjAxMyBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gQ29weXJpZ2h0IDIwMDkgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuXHJcbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXHJcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbGljZW5zZSBsb25nLmpzIChjKSAyMDEzIERhbmllbCBXaXJ0eiA8ZGNvZGVAZGNvZGUuaW8+XHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBcclxuICogc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9sb25nLmpzIGZvciBkZXRhaWxzXHJcbiAqL1xyXG4oZnVuY3Rpb24oZ2xvYmFsLCBmYWN0b3J5KSB7XHJcblxyXG4gICAgLyogQU1EICovIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVtcImFtZFwiXSlcclxuICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xyXG4gICAgLyogQ29tbW9uSlMgKi8gZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUgJiYgbW9kdWxlW1wiZXhwb3J0c1wiXSlcclxuICAgICAgICBtb2R1bGVbXCJleHBvcnRzXCJdID0gZmFjdG9yeSgpO1xyXG4gICAgLyogR2xvYmFsICovIGVsc2VcclxuICAgICAgICAoZ2xvYmFsW1wiZGNvZGVJT1wiXSA9IGdsb2JhbFtcImRjb2RlSU9cIl0gfHwge30pW1wiTG9uZ1wiXSA9IGZhY3RvcnkoKTtcclxuXHJcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RzIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciwgZ2l2ZW4gaXRzIGxvdyBhbmQgaGlnaCAzMiBiaXQgdmFsdWVzIGFzICpzaWduZWQqIGludGVnZXJzLlxyXG4gICAgICogIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBtb3JlIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgTG9uZ3MuXHJcbiAgICAgKiBAZXhwb3J0cyBMb25nXHJcbiAgICAgKiBAY2xhc3MgQSBMb25nIGNsYXNzIGZvciByZXByZXNlbnRpbmcgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBMb25nKGxvdywgaGlnaCwgdW5zaWduZWQpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5sb3cgPSBsb3cgfCAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaGlnaCAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5oaWdoID0gaGlnaCB8IDA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudW5zaWduZWQgPSAhIXVuc2lnbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBhIGxvbmcgaXMgdGhlIHR3byBnaXZlbiBzaWduZWQsIDMyLWJpdCB2YWx1ZXMuXHJcbiAgICAvLyBXZSB1c2UgMzItYml0IHBpZWNlcyBiZWNhdXNlIHRoZXNlIGFyZSB0aGUgc2l6ZSBvZiBpbnRlZ2VycyBvbiB3aGljaFxyXG4gICAgLy8gSmF2YXNjcmlwdCBwZXJmb3JtcyBiaXQtb3BlcmF0aW9ucy4gIEZvciBvcGVyYXRpb25zIGxpa2UgYWRkaXRpb24gYW5kXHJcbiAgICAvLyBtdWx0aXBsaWNhdGlvbiwgd2Ugc3BsaXQgZWFjaCBudW1iZXIgaW50byAxNiBiaXQgcGllY2VzLCB3aGljaCBjYW4gZWFzaWx5IGJlXHJcbiAgICAvLyBtdWx0aXBsaWVkIHdpdGhpbiBKYXZhc2NyaXB0J3MgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gd2l0aG91dCBvdmVyZmxvd1xyXG4gICAgLy8gb3IgY2hhbmdlIGluIHNpZ24uXHJcbiAgICAvL1xyXG4gICAgLy8gSW4gdGhlIGFsZ29yaXRobXMgYmVsb3csIHdlIGZyZXF1ZW50bHkgcmVkdWNlIHRoZSBuZWdhdGl2ZSBjYXNlIHRvIHRoZVxyXG4gICAgLy8gcG9zaXRpdmUgY2FzZSBieSBuZWdhdGluZyB0aGUgaW5wdXQocykgYW5kIHRoZW4gcG9zdC1wcm9jZXNzaW5nIHRoZSByZXN1bHQuXHJcbiAgICAvLyBOb3RlIHRoYXQgd2UgbXVzdCBBTFdBWVMgY2hlY2sgc3BlY2lhbGx5IHdoZXRoZXIgdGhvc2UgdmFsdWVzIGFyZSBNSU5fVkFMVUVcclxuICAgIC8vICgtMl42MykgYmVjYXVzZSAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRSAoc2luY2UgMl42MyBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYXNcclxuICAgIC8vIGEgcG9zaXRpdmUgbnVtYmVyLCBpdCBvdmVyZmxvd3MgYmFjayBpbnRvIGEgbmVnYXRpdmUpLiAgTm90IGhhbmRsaW5nIHRoaXNcclxuICAgIC8vIGNhc2Ugd291bGQgb2Z0ZW4gcmVzdWx0IGluIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuICAgIC8vXHJcbiAgICAvLyBDb21tb24gY29uc3RhbnQgdmFsdWVzIFpFUk8sIE9ORSwgTkVHX09ORSwgZXRjLiBhcmUgZGVmaW5lZCBiZWxvdyB0aGUgZnJvbSpcclxuICAgIC8vIG1ldGhvZHMgb24gd2hpY2ggdGhleSBkZXBlbmQuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBpbmRpY2F0b3IgdXNlZCB0byByZWxpYWJseSBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgTG9uZyBvciBub3QuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgTG9uZy5wcm90b3R5cGUuX19pc0xvbmdfXztcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9uZy5wcm90b3R5cGUsIFwiX19pc0xvbmdfX1wiLCB7XHJcbiAgICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXNMb25nKG9iaikge1xyXG4gICAgICAgIHJldHVybiAob2JqICYmIG9ialtcIl9faXNMb25nX19cIl0pID09PSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBMb25nLlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nLmlzTG9uZyA9IGlzTG9uZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIGludGVnZXIgdmFsdWVzLlxyXG4gICAgICogQHR5cGUgeyFPYmplY3R9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIElOVF9DQUNIRSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBjYWNoZSBvZiB0aGUgTG9uZyByZXByZXNlbnRhdGlvbnMgb2Ygc21hbGwgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuXHJcbiAgICAgKiBAdHlwZSB7IU9iamVjdH1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVUlOVF9DQUNIRSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZyb21JbnQodmFsdWUsIHVuc2lnbmVkKSB7XHJcbiAgICAgICAgdmFyIG9iaiwgY2FjaGVkT2JqLCBjYWNoZTtcclxuICAgICAgICBpZiAodW5zaWduZWQpIHtcclxuICAgICAgICAgICAgdmFsdWUgPj4+PSAwO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUgPSAoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDI1NikpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlZE9iaiA9IFVJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkT2JqO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCAodmFsdWUgfCAwKSA8IDAgPyAtMSA6IDAsIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUpXHJcbiAgICAgICAgICAgICAgICBVSU5UX0NBQ0hFW3ZhbHVlXSA9IG9iajtcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZSB8PSAwO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUgPSAoLTEyOCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDEyOCkpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlZE9iaiA9IElOVF9DQUNIRVt2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqID0gZnJvbUJpdHModmFsdWUsIHZhbHVlIDwgMCA/IC0xIDogMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUpXHJcbiAgICAgICAgICAgICAgICBJTlRfQ0FDSEVbdmFsdWVdID0gb2JqO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gMzIgYml0IGludGVnZXIgdmFsdWUuXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgMzIgYml0IGludGVnZXIgaW4gcXVlc3Rpb25cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21JbnQgPSBmcm9tSW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZyb21OdW1iZXIodmFsdWUsIHVuc2lnbmVkKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICAgICAgaWYgKHVuc2lnbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVVpFUk87XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBUV09fUFdSXzY0X0RCTClcclxuICAgICAgICAgICAgICAgIHJldHVybiBNQVhfVU5TSUdORURfVkFMVUU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDw9IC1UV09fUFdSXzYzX0RCTClcclxuICAgICAgICAgICAgICAgIHJldHVybiBNSU5fVkFMVUU7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSArIDEgPj0gVFdPX1BXUl82M19EQkwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTUFYX1ZBTFVFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbU51bWJlcigtdmFsdWUsIHVuc2lnbmVkKS5uZWcoKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMoKHZhbHVlICUgVFdPX1BXUl8zMl9EQkwpIHwgMCwgKHZhbHVlIC8gVFdPX1BXUl8zMl9EQkwpIHwgMCwgdW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiB2YWx1ZSwgcHJvdmlkZWQgdGhhdCBpdCBpcyBhIGZpbml0ZSBudW1iZXIuIE90aGVyd2lzZSwgemVybyBpcyByZXR1cm5lZC5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBudW1iZXIgaW4gcXVlc3Rpb25cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21OdW1iZXIgPSBmcm9tTnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHNcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0c1xyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmcm9tQml0cyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExvbmcobG93Qml0cywgaGlnaEJpdHMsIHVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgNjQgYml0IGludGVnZXIgdGhhdCBjb21lcyBieSBjb25jYXRlbmF0aW5nIHRoZSBnaXZlbiBsb3cgYW5kIGhpZ2ggYml0cy4gRWFjaCBpc1xyXG4gICAgICogIGFzc3VtZWQgdG8gdXNlIDMyIGJpdHMuXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dCaXRzIFRoZSBsb3cgMzIgYml0c1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzIFRoZSBoaWdoIDMyIGJpdHNcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21CaXRzID0gZnJvbUJpdHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZXhwb25lbnRcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIHBvd19kYmwgPSBNYXRoLnBvdzsgLy8gVXNlZCA0IHRpbWVzICg0KjggdG8gMTUrNClcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICAgICAqIEBwYXJhbSB7KGJvb2xlYW58bnVtYmVyKT19IHVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHJhZGl4XHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyhzdHIsIHVuc2lnbmVkLCByYWRpeCkge1xyXG4gICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW1wdHkgc3RyaW5nJyk7XHJcbiAgICAgICAgaWYgKHN0ciA9PT0gXCJOYU5cIiB8fCBzdHIgPT09IFwiSW5maW5pdHlcIiB8fCBzdHIgPT09IFwiK0luZmluaXR5XCIgfHwgc3RyID09PSBcIi1JbmZpbml0eVwiKVxyXG4gICAgICAgICAgICByZXR1cm4gWkVSTztcclxuICAgICAgICBpZiAodHlwZW9mIHVuc2lnbmVkID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAvLyBGb3IgZ29vZy5tYXRoLmxvbmcgY29tcGF0aWJpbGl0eVxyXG4gICAgICAgICAgICByYWRpeCA9IHVuc2lnbmVkLFxyXG4gICAgICAgICAgICB1bnNpZ25lZCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVuc2lnbmVkID0gISEgdW5zaWduZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJhZGl4ID0gcmFkaXggfHwgMTA7XHJcbiAgICAgICAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKCdyYWRpeCcpO1xyXG5cclxuICAgICAgICB2YXIgcDtcclxuICAgICAgICBpZiAoKHAgPSBzdHIuaW5kZXhPZignLScpKSA+IDApXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdpbnRlcmlvciBoeXBoZW4nKTtcclxuICAgICAgICBlbHNlIGlmIChwID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHN0ci5zdWJzdHJpbmcoMSksIHVuc2lnbmVkLCByYWRpeCkubmVnKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEbyBzZXZlcmFsICg4KSBkaWdpdHMgZWFjaCB0aW1lIHRocm91Z2ggdGhlIGxvb3AsIHNvIGFzIHRvXHJcbiAgICAgICAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXHJcbiAgICAgICAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgOCkpO1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gWkVSTztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gOCkge1xyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IE1hdGgubWluKDgsIHN0ci5sZW5ndGggLSBpKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhpLCBpICsgc2l6ZSksIHJhZGl4KTtcclxuICAgICAgICAgICAgaWYgKHNpemUgPCA4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIHNpemUpKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tdWwocG93ZXIpLmFkZChmcm9tTnVtYmVyKHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsKHJhZGl4VG9Qb3dlcik7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuYWRkKGZyb21OdW1iZXIodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQudW5zaWduZWQgPSB1bnNpZ25lZDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHN0cmluZywgd3JpdHRlbiB1c2luZyB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSB0ZXh0dWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBMb25nXHJcbiAgICAgKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gYGZhbHNlYCBmb3Igc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFRoZSByYWRpeCBpbiB3aGljaCB0aGUgdGV4dCBpcyB3cml0dGVuICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBMb25nLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd8IXtsb3c6IG51bWJlciwgaGlnaDogbnVtYmVyLCB1bnNpZ25lZDogYm9vbGVhbn19IHZhbFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZyb21WYWx1ZSh2YWwpIHtcclxuICAgICAgICBpZiAodmFsIC8qIGlzIGNvbXBhdGlibGUgKi8gaW5zdGFuY2VvZiBMb25nKVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21OdW1iZXIodmFsKTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbCk7XHJcbiAgICAgICAgLy8gVGhyb3dzIGZvciBub24tb2JqZWN0cywgY29udmVydHMgbm9uLWluc3RhbmNlb2YgTG9uZzpcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModmFsLmxvdywgdmFsLmhpZ2gsIHZhbC51bnNpZ25lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHZhbHVlIHRvIGEgTG9uZy5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfCF7bG93OiBudW1iZXIsIGhpZ2g6IG51bWJlciwgdW5zaWduZWQ6IGJvb2xlYW59fSB2YWwgVmFsdWVcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tVmFsdWUgPSBmcm9tVmFsdWU7XHJcblxyXG4gICAgLy8gTk9URTogdGhlIGNvbXBpbGVyIHNob3VsZCBpbmxpbmUgdGhlc2UgY29uc3RhbnQgdmFsdWVzIGJlbG93IGFuZCB0aGVuIHJlbW92ZSB0aGVzZSB2YXJpYWJsZXMsIHNvIHRoZXJlIHNob3VsZCBiZVxyXG4gICAgLy8gbm8gcnVudGltZSBwZW5hbHR5IGZvciB0aGVzZS5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl8xNl9EQkwgPSAxIDw8IDE2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzI0X0RCTCA9IDEgPDwgMjQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfMzJfREJMID0gVFdPX1BXUl8xNl9EQkwgKiBUV09fUFdSXzE2X0RCTDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl82NF9EQkwgPSBUV09fUFdSXzMyX0RCTCAqIFRXT19QV1JfMzJfREJMO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzYzX0RCTCA9IFRXT19QV1JfNjRfREJMIC8gMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzI0ID0gZnJvbUludChUV09fUFdSXzI0X0RCTCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFpFUk8gPSBmcm9tSW50KDApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2lnbmVkIHplcm8uXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuWkVSTyA9IFpFUk87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFVaRVJPID0gZnJvbUludCgwLCB0cnVlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc2lnbmVkIHplcm8uXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuVVpFUk8gPSBVWkVSTztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgT05FID0gZnJvbUludCgxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNpZ25lZCBvbmUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuT05FID0gT05FO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBVT05FID0gZnJvbUludCgxLCB0cnVlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc2lnbmVkIG9uZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5VT05FID0gVU9ORTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgTkVHX09ORSA9IGZyb21JbnQoLTEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2lnbmVkIG5lZ2F0aXZlIG9uZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5ORUdfT05FID0gTkVHX09ORTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgTUFYX1ZBTFVFID0gZnJvbUJpdHMoMHhGRkZGRkZGRnwwLCAweDdGRkZGRkZGfDAsIGZhbHNlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLk1BWF9WQUxVRSA9IE1BWF9WQUxVRTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgTUFYX1VOU0lHTkVEX1ZBTFVFID0gZnJvbUJpdHMoMHhGRkZGRkZGRnwwLCAweEZGRkZGRkZGfDAsIHRydWUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWF4aW11bSB1bnNpZ25lZCB2YWx1ZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5NQVhfVU5TSUdORURfVkFMVUUgPSBNQVhfVU5TSUdORURfVkFMVUU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIE1JTl9WQUxVRSA9IGZyb21CaXRzKDAsIDB4ODAwMDAwMDB8MCwgZmFsc2UpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWluaW11bSBzaWduZWQgdmFsdWUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuTUlOX1ZBTFVFID0gTUlOX1ZBTFVFO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGFsaWFzIExvbmcucHJvdG90eXBlXHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIExvbmdQcm90b3R5cGUgPSBMb25nLnByb3RvdHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgMzIgYml0IGludGVnZXIsIGFzc3VtaW5nIGl0IGlzIGEgMzIgYml0IGludGVnZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24gdG9JbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyB0aGlzLmxvdyA+Pj4gMCA6IHRoaXMubG93O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgdGhlIG5lYXJlc3QgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZSAoZG91YmxlLCA1MyBiaXQgbWFudGlzc2EpLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gKCh0aGlzLmhpZ2ggPj4+IDApICogVFdPX1BXUl8zMl9EQkwpICsgKHRoaXMubG93ID4+PiAwKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoICogVFdPX1BXUl8zMl9EQkwgKyAodGhpcy5sb3cgPj4+IDApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgc3RyaW5nIHdyaXR0ZW4gaW4gdGhlIHNwZWNpZmllZCByYWRpeC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXggUmFkaXggKDItMzYpLCBkZWZhdWx0cyB0byAxMFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqIEBvdmVycmlkZVxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYHJhZGl4YCBpcyBvdXQgb2YgcmFuZ2VcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKHJhZGl4KSB7XHJcbiAgICAgICAgcmFkaXggPSByYWRpeCB8fCAxMDtcclxuICAgICAgICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpXHJcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ3JhZGl4Jyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiAnMCc7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7IC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoYW5nZSB0aGUgTG9uZyB2YWx1ZSBiZWZvcmUgaXQgY2FuIGJlIG5lZ2F0ZWQsIHNvIHdlIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGJvdHRvbS1tb3N0IGRpZ2l0IGluIHRoaXMgYmFzZSBhbmQgdGhlbiByZWN1cnNlIHRvIGRvIHRoZSByZXN0LlxyXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl4TG9uZyA9IGZyb21OdW1iZXIocmFkaXgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpdiA9IHRoaXMuZGl2KHJhZGl4TG9uZyksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtMSA9IGRpdi5tdWwocmFkaXhMb25nKS5zdWIodGhpcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGl2LnRvU3RyaW5nKHJhZGl4KSArIHJlbTEudG9JbnQoKS50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICctJyArIHRoaXMubmVnKCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRG8gc2V2ZXJhbCAoNikgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgICAgIHZhciByYWRpeFRvUG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIDYpLCB0aGlzLnVuc2lnbmVkKSxcclxuICAgICAgICAgICAgcmVtID0gdGhpcztcclxuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgdmFyIHJlbURpdiA9IHJlbS5kaXYocmFkaXhUb1Bvd2VyKSxcclxuICAgICAgICAgICAgICAgIGludHZhbCA9IHJlbS5zdWIocmVtRGl2Lm11bChyYWRpeFRvUG93ZXIpKS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgZGlnaXRzID0gaW50dmFsLnRvU3RyaW5nKHJhZGl4KTtcclxuICAgICAgICAgICAgcmVtID0gcmVtRGl2O1xyXG4gICAgICAgICAgICBpZiAocmVtLmlzWmVybygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZ2l0cyArIHJlc3VsdDtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA8IDYpXHJcbiAgICAgICAgICAgICAgICAgICAgZGlnaXRzID0gJzAnICsgZGlnaXRzO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gJycgKyBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgaGlnaCAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgaGlnaCBiaXRzXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ2V0SGlnaEJpdHMgPSBmdW5jdGlvbiBnZXRIaWdoQml0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgaGlnaCBiaXRzXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ2V0SGlnaEJpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzVW5zaWduZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCA+Pj4gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGxvdyBiaXRzXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ2V0TG93Qml0cyA9IGZ1bmN0aW9uIGdldExvd0JpdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG93O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGxvdyAzMiBiaXRzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCBsb3cgYml0c1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdldExvd0JpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uIGdldExvd0JpdHNVbnNpZ25lZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb3cgPj4+IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHJlcHJlc2VudCB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBMb25nLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24gZ2V0TnVtQml0c0FicygpIHtcclxuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcShNSU5fVkFMVUUpID8gNjQgOiB0aGlzLm5lZygpLmdldE51bUJpdHNBYnMoKTtcclxuICAgICAgICB2YXIgdmFsID0gdGhpcy5oaWdoICE9IDAgPyB0aGlzLmhpZ2ggOiB0aGlzLmxvdztcclxuICAgICAgICBmb3IgKHZhciBiaXQgPSAzMTsgYml0ID4gMDsgYml0LS0pXHJcbiAgICAgICAgICAgIGlmICgodmFsICYgKDEgPDwgYml0KSkgIT0gMClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2ggIT0gMCA/IGJpdCArIDMzIDogYml0ICsgMTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoID09PSAwICYmIHRoaXMubG93ID09PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG5lZ2F0aXZlLlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uIGlzTmVnYXRpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnVuc2lnbmVkICYmIHRoaXMuaGlnaCA8IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgcG9zaXRpdmUuXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5pc1Bvc2l0aXZlID0gZnVuY3Rpb24gaXNQb3NpdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51bnNpZ25lZCB8fCB0aGlzLmhpZ2ggPj0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBvZGQuXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBldmVuLlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICAgICAgaWYgKHRoaXMudW5zaWduZWQgIT09IG90aGVyLnVuc2lnbmVkICYmICh0aGlzLmhpZ2ggPj4+IDMxKSA9PT0gMSAmJiAob3RoZXIuaGlnaCA+Pj4gMzEpID09PSAxKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCA9PT0gb3RoZXIuaGlnaCAmJiB0aGlzLmxvdyA9PT0gb3RoZXIubG93O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZXF1YWxzfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZXEgPSBMb25nUHJvdG90eXBlLmVxdWFscztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbiBub3RFcXVhbHMob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZXEoLyogdmFsaWRhdGVzICovIG90aGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI25vdEVxdWFsc30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm5lcSA9IExvbmdQcm90b3R5cGUubm90RXF1YWxzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmxlc3NUaGFuID0gZnVuY3Rpb24gbGVzc1RoYW4ob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPCAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW59LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5sdCA9IExvbmdQcm90b3R5cGUubGVzc1RoYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubGVzc1RoYW5PckVxdWFsID0gZnVuY3Rpb24gbGVzc1RoYW5PckVxdWFsKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDw9IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbk9yRXF1YWx9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5sdGUgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpID4gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFufS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ3QgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcXVhbChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW5PckVxdWFsfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ3RlID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcclxuICAgICAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZShvdGhlcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLmVxKG90aGVyKSlcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgdmFyIHRoaXNOZWcgPSB0aGlzLmlzTmVnYXRpdmUoKSxcclxuICAgICAgICAgICAgb3RoZXJOZWcgPSBvdGhlci5pc05lZ2F0aXZlKCk7XHJcbiAgICAgICAgaWYgKHRoaXNOZWcgJiYgIW90aGVyTmVnKVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgaWYgKCF0aGlzTmVnICYmIG90aGVyTmVnKVxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBzaWduIGJpdHMgYXJlIHRoZSBzYW1lXHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWIob3RoZXIpLmlzTmVnYXRpdmUoKSA/IC0xIDogMTtcclxuICAgICAgICAvLyBCb3RoIGFyZSBwb3NpdGl2ZSBpZiBhdCBsZWFzdCBvbmUgaXMgdW5zaWduZWRcclxuICAgICAgICByZXR1cm4gKG90aGVyLmhpZ2ggPj4+IDApID4gKHRoaXMuaGlnaCA+Pj4gMCkgfHwgKG90aGVyLmhpZ2ggPT09IHRoaXMuaGlnaCAmJiAob3RoZXIubG93ID4+PiAwKSA+ICh0aGlzLmxvdyA+Pj4gMCkpID8gLTEgOiAxO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmVzIHRoaXMgTG9uZydzIHZhbHVlIHdpdGggdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2NvbXBhcmV9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lLCAxIGlmIHRoZSB0aGlzIGlzIGdyZWF0ZXIgYW5kIC0xXHJcbiAgICAgKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuY29tcCA9IExvbmdQcm90b3R5cGUuY29tcGFyZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IE5lZ2F0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQgJiYgdGhpcy5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vdCgpLmFkZChPTkUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbmVnYXRlfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5uZWcgPSBMb25nUHJvdG90eXBlLm5lZ2F0ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGFkZGVuZCBBZGRlbmRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU3VtXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKGFkZGVuZCkge1xyXG4gICAgICAgIGlmICghaXNMb25nKGFkZGVuZCkpXHJcbiAgICAgICAgICAgIGFkZGVuZCA9IGZyb21WYWx1ZShhZGRlbmQpO1xyXG5cclxuICAgICAgICAvLyBEaXZpZGUgZWFjaCBudW1iZXIgaW50byA0IGNodW5rcyBvZiAxNiBiaXRzLCBhbmQgdGhlbiBzdW0gdGhlIGNodW5rcy5cclxuXHJcbiAgICAgICAgdmFyIGE0OCA9IHRoaXMuaGlnaCA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xyXG4gICAgICAgIHZhciBhMDAgPSB0aGlzLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICAgICAgdmFyIGI0OCA9IGFkZGVuZC5oaWdoID4+PiAxNjtcclxuICAgICAgICB2YXIgYjMyID0gYWRkZW5kLmhpZ2ggJiAweEZGRkY7XHJcbiAgICAgICAgdmFyIGIxNiA9IGFkZGVuZC5sb3cgPj4+IDE2O1xyXG4gICAgICAgIHZhciBiMDAgPSBhZGRlbmQubG93ICYgMHhGRkZGO1xyXG5cclxuICAgICAgICB2YXIgYzQ4ID0gMCwgYzMyID0gMCwgYzE2ID0gMCwgYzAwID0gMDtcclxuICAgICAgICBjMDAgKz0gYTAwICsgYjAwO1xyXG4gICAgICAgIGMxNiArPSBjMDAgPj4+IDE2O1xyXG4gICAgICAgIGMwMCAmPSAweEZGRkY7XHJcbiAgICAgICAgYzE2ICs9IGExNiArIGIxNjtcclxuICAgICAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgICAgICBjMTYgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMzMiArPSBhMzIgKyBiMzI7XHJcbiAgICAgICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICAgICAgYzMyICY9IDB4RkZGRjtcclxuICAgICAgICBjNDggKz0gYTQ4ICsgYjQ4O1xyXG4gICAgICAgIGM0OCAmPSAweEZGRkY7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMiwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiBzdWJ0cmFjdChzdWJ0cmFoZW5kKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcoc3VidHJhaGVuZCkpXHJcbiAgICAgICAgICAgIHN1YnRyYWhlbmQgPSBmcm9tVmFsdWUoc3VidHJhaGVuZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKHN1YnRyYWhlbmQubmVnKCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3N1YnRyYWN0fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBzdWJ0cmFoZW5kIFN1YnRyYWhlbmRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gRGlmZmVyZW5jZVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnN1YiA9IExvbmdQcm90b3R5cGUuc3VidHJhY3Q7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gbXVsdGlwbGllciBNdWx0aXBsaWVyXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFByb2R1Y3RcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uIG11bHRpcGx5KG11bHRpcGxpZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICAgICAgaWYgKCFpc0xvbmcobXVsdGlwbGllcikpXHJcbiAgICAgICAgICAgIG11bHRpcGxpZXIgPSBmcm9tVmFsdWUobXVsdGlwbGllcik7XHJcbiAgICAgICAgaWYgKG11bHRpcGxpZXIuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBaRVJPO1xyXG4gICAgICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgIHJldHVybiBtdWx0aXBsaWVyLmlzT2RkKCkgPyBNSU5fVkFMVUUgOiBaRVJPO1xyXG4gICAgICAgIGlmIChtdWx0aXBsaWVyLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzT2RkKCkgPyBNSU5fVkFMVUUgOiBaRVJPO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHtcclxuICAgICAgICAgICAgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIubmVnKCkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllcikubmVnKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXVsKG11bHRpcGxpZXIubmVnKCkpLm5lZygpO1xyXG5cclxuICAgICAgICAvLyBJZiBib3RoIGxvbmdzIGFyZSBzbWFsbCwgdXNlIGZsb2F0IG11bHRpcGxpY2F0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMubHQoVFdPX1BXUl8yNCkgJiYgbXVsdGlwbGllci5sdChUV09fUFdSXzI0KSlcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21OdW1iZXIodGhpcy50b051bWJlcigpICogbXVsdGlwbGllci50b051bWJlcigpLCB0aGlzLnVuc2lnbmVkKTtcclxuXHJcbiAgICAgICAgLy8gRGl2aWRlIGVhY2ggbG9uZyBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIGFkZCB1cCA0eDQgcHJvZHVjdHMuXHJcbiAgICAgICAgLy8gV2UgY2FuIHNraXAgcHJvZHVjdHMgdGhhdCB3b3VsZCBvdmVyZmxvdy5cclxuXHJcbiAgICAgICAgdmFyIGE0OCA9IHRoaXMuaGlnaCA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xyXG4gICAgICAgIHZhciBhMDAgPSB0aGlzLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICAgICAgdmFyIGI0OCA9IG11bHRpcGxpZXIuaGlnaCA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGIzMiA9IG11bHRpcGxpZXIuaGlnaCAmIDB4RkZGRjtcclxuICAgICAgICB2YXIgYjE2ID0gbXVsdGlwbGllci5sb3cgPj4+IDE2O1xyXG4gICAgICAgIHZhciBiMDAgPSBtdWx0aXBsaWVyLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICAgICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICAgICAgYzAwICs9IGEwMCAqIGIwMDtcclxuICAgICAgICBjMTYgKz0gYzAwID4+PiAxNjtcclxuICAgICAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMxNiArPSBhMTYgKiBiMDA7XHJcbiAgICAgICAgYzMyICs9IGMxNiA+Pj4gMTY7XHJcbiAgICAgICAgYzE2ICY9IDB4RkZGRjtcclxuICAgICAgICBjMTYgKz0gYTAwICogYjE2O1xyXG4gICAgICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzMyICs9IGEzMiAqIGIwMDtcclxuICAgICAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgICAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMzMiArPSBhMTYgKiBiMTY7XHJcbiAgICAgICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICAgICAgYzMyICY9IDB4RkZGRjtcclxuICAgICAgICBjMzIgKz0gYTAwICogYjMyO1xyXG4gICAgICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzQ4ICs9IGE0OCAqIGIwMCArIGEzMiAqIGIxNiArIGExNiAqIGIzMiArIGEwMCAqIGI0ODtcclxuICAgICAgICBjNDggJj0gMHhGRkZGO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI211bHRpcGx5fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUHJvZHVjdFxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm11bCA9IExvbmdQcm90b3R5cGUubXVsdGlwbHk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyBkaXZpZGVkIGJ5IHRoZSBzcGVjaWZpZWQuIFRoZSByZXN1bHQgaXMgc2lnbmVkIGlmIHRoaXMgTG9uZyBpcyBzaWduZWQgb3JcclxuICAgICAqICB1bnNpZ25lZCBpZiB0aGlzIExvbmcgaXMgdW5zaWduZWQuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBRdW90aWVudFxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmRpdmlkZSA9IGZ1bmN0aW9uIGRpdmlkZShkaXZpc29yKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcoZGl2aXNvcikpXHJcbiAgICAgICAgICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XHJcbiAgICAgICAgaWYgKGRpdmlzb3IuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdkaXZpc2lvbiBieSB6ZXJvJyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgICAgIHZhciBhcHByb3gsIHJlbSwgcmVzO1xyXG4gICAgICAgIGlmICghdGhpcy51bnNpZ25lZCkge1xyXG4gICAgICAgICAgICAvLyBUaGlzIHNlY3Rpb24gaXMgb25seSByZWxldmFudCBmb3Igc2lnbmVkIGxvbmdzIGFuZCBpcyBkZXJpdmVkIGZyb20gdGhlXHJcbiAgICAgICAgICAgIC8vIGNsb3N1cmUgbGlicmFyeSBhcyBhIHdob2xlLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGl2aXNvci5lcShPTkUpIHx8IGRpdmlzb3IuZXEoTkVHX09ORSkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTsgIC8vIHJlY2FsbCB0aGF0IC1NSU5fVkFMVUUgPT0gTUlOX1ZBTFVFXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkaXZpc29yLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9ORTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgfG90aGVyfCA+PSAyLCBzbyB8dGhpcy9vdGhlcnwgPCB8TUlOX1ZBTFVFfC5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFsZlRoaXMgPSB0aGlzLnNocigxKTtcclxuICAgICAgICAgICAgICAgICAgICBhcHByb3ggPSBoYWxmVGhpcy5kaXYoZGl2aXNvcikuc2hsKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHByb3guZXEoWkVSTykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpdmlzb3IuaXNOZWdhdGl2ZSgpID8gT05FIDogTkVHX09ORTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW0gPSB0aGlzLnN1YihkaXZpc29yLm11bChhcHByb3gpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gYXBwcm94LmFkZChyZW0uZGl2KGRpdmlzb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpdmlzb3IuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yLm5lZygpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yKS5uZWcoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXZpc29yLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpdihkaXZpc29yLm5lZygpKS5uZWcoKTtcclxuICAgICAgICAgICAgcmVzID0gWkVSTztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBUaGUgYWxnb3JpdGhtIGJlbG93IGhhcyBub3QgYmVlbiBtYWRlIGZvciB1bnNpZ25lZCBsb25ncy4gSXQncyB0aGVyZWZvcmVcclxuICAgICAgICAgICAgLy8gcmVxdWlyZWQgdG8gdGFrZSBzcGVjaWFsIGNhcmUgb2YgdGhlIE1TQiBwcmlvciB0byBydW5uaW5nIGl0LlxyXG4gICAgICAgICAgICBpZiAoIWRpdmlzb3IudW5zaWduZWQpXHJcbiAgICAgICAgICAgICAgICBkaXZpc29yID0gZGl2aXNvci50b1Vuc2lnbmVkKCk7XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmd0KHRoaXMpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVaRVJPO1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5ndCh0aGlzLnNocnUoMSkpKSAvLyAxNSA+Pj4gMSA9IDcgOyB3aXRoIGRpdmlzb3IgPSA4IDsgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVPTkU7XHJcbiAgICAgICAgICAgIHJlcyA9IFVaRVJPO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVwZWF0IHRoZSBmb2xsb3dpbmcgdW50aWwgdGhlIHJlbWFpbmRlciBpcyBsZXNzIHRoYW4gb3RoZXI6ICBmaW5kIGFcclxuICAgICAgICAvLyBmbG9hdGluZy1wb2ludCB0aGF0IGFwcHJveGltYXRlcyByZW1haW5kZXIgLyBvdGhlciAqZnJvbSBiZWxvdyosIGFkZCB0aGlzXHJcbiAgICAgICAgLy8gaW50byB0aGUgcmVzdWx0LCBhbmQgc3VidHJhY3QgaXQgZnJvbSB0aGUgcmVtYWluZGVyLiAgSXQgaXMgY3JpdGljYWwgdGhhdFxyXG4gICAgICAgIC8vIHRoZSBhcHByb3hpbWF0ZSB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHJlYWwgdmFsdWUgc28gdGhhdCB0aGVcclxuICAgICAgICAvLyByZW1haW5kZXIgbmV2ZXIgYmVjb21lcyBuZWdhdGl2ZS5cclxuICAgICAgICByZW0gPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlIChyZW0uZ3RlKGRpdmlzb3IpKSB7XHJcbiAgICAgICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSByZXN1bHQgb2YgZGl2aXNpb24uIFRoaXMgbWF5IGJlIGEgbGl0dGxlIGdyZWF0ZXIgb3JcclxuICAgICAgICAgICAgLy8gc21hbGxlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXHJcbiAgICAgICAgICAgIGFwcHJveCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IocmVtLnRvTnVtYmVyKCkgLyBkaXZpc29yLnRvTnVtYmVyKCkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgdHdlYWsgdGhlIGFwcHJveGltYXRlIHJlc3VsdCBieSBjaGFuZ2luZyBpdCBpbiB0aGUgNDgtdGggZGlnaXQgb3JcclxuICAgICAgICAgICAgLy8gdGhlIHNtYWxsZXN0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0LCB3aGljaGV2ZXIgaXMgbGFyZ2VyLlxyXG4gICAgICAgICAgICB2YXIgbG9nMiA9IE1hdGguY2VpbChNYXRoLmxvZyhhcHByb3gpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICAgICAgZGVsdGEgPSAobG9nMiA8PSA0OCkgPyAxIDogcG93X2RibCgyLCBsb2cyIC0gNDgpLFxyXG5cclxuICAgICAgICAgICAgLy8gRGVjcmVhc2UgdGhlIGFwcHJveGltYXRpb24gdW50aWwgaXQgaXMgc21hbGxlciB0aGFuIHRoZSByZW1haW5kZXIuICBOb3RlXHJcbiAgICAgICAgICAgIC8vIHRoYXQgaWYgaXQgaXMgdG9vIGxhcmdlLCB0aGUgcHJvZHVjdCBvdmVyZmxvd3MgYW5kIGlzIG5lZ2F0aXZlLlxyXG4gICAgICAgICAgICAgICAgYXBwcm94UmVzID0gZnJvbU51bWJlcihhcHByb3gpLFxyXG4gICAgICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcclxuICAgICAgICAgICAgd2hpbGUgKGFwcHJveFJlbS5pc05lZ2F0aXZlKCkgfHwgYXBwcm94UmVtLmd0KHJlbSkpIHtcclxuICAgICAgICAgICAgICAgIGFwcHJveCAtPSBkZWx0YTtcclxuICAgICAgICAgICAgICAgIGFwcHJveFJlcyA9IGZyb21OdW1iZXIoYXBwcm94LCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWwoZGl2aXNvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIGFuc3dlciBjYW4ndCBiZSB6ZXJvLi4uIGFuZCBhY3R1YWxseSwgemVybyB3b3VsZCBjYXVzZVxyXG4gICAgICAgICAgICAvLyBpbmZpbml0ZSByZWN1cnNpb24gc2luY2Ugd2Ugd291bGQgbWFrZSBubyBwcm9ncmVzcy5cclxuICAgICAgICAgICAgaWYgKGFwcHJveFJlcy5pc1plcm8oKSlcclxuICAgICAgICAgICAgICAgIGFwcHJveFJlcyA9IE9ORTtcclxuXHJcbiAgICAgICAgICAgIHJlcyA9IHJlcy5hZGQoYXBwcm94UmVzKTtcclxuICAgICAgICAgICAgcmVtID0gcmVtLnN1YihhcHByb3hSZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIGRpdmlkZWQgYnkgdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNkaXZpZGV9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBRdW90aWVudFxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmRpdiA9IExvbmdQcm90b3R5cGUuZGl2aWRlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgbW9kdWxvIHRoZSBzcGVjaWZpZWQuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5tb2R1bG8gPSBmdW5jdGlvbiBtb2R1bG8oZGl2aXNvcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKGRpdmlzb3IpKVxyXG4gICAgICAgICAgICBkaXZpc29yID0gZnJvbVZhbHVlKGRpdmlzb3IpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1Yih0aGlzLmRpdihkaXZpc29yKS5tdWwoZGl2aXNvcikpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI21vZHVsb30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm1vZCA9IExvbmdQcm90b3R5cGUubW9kdWxvO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBOT1Qgb2YgdGhpcyBMb25nLlxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uIG5vdCgpIHtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMofnRoaXMubG93LCB+dGhpcy5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBiaXR3aXNlIEFORCBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQob3RoZXIpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgJiBvdGhlci5sb3csIHRoaXMuaGlnaCAmIG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGJpdHdpc2UgT1Igb2YgdGhpcyBMb25nIGFuZCB0aGUgc3BlY2lmaWVkLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvcihvdGhlcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyB8IG90aGVyLmxvdywgdGhpcy5oaWdoIHwgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBYT1Igb2YgdGhpcyBMb25nIGFuZCB0aGUgZ2l2ZW4gb25lLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IF4gb3RoZXIubG93LCB0aGlzLmhpZ2ggXiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc2hpZnRMZWZ0ID0gZnVuY3Rpb24gc2hpZnRMZWZ0KG51bUJpdHMpIHtcclxuICAgICAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgICAgIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGVsc2UgaWYgKG51bUJpdHMgPCAzMilcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IDw8IG51bUJpdHMsICh0aGlzLmhpZ2ggPDwgbnVtQml0cykgfCAodGhpcy5sb3cgPj4+ICgzMiAtIG51bUJpdHMpKSwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoMCwgdGhpcy5sb3cgPDwgKG51bUJpdHMgLSAzMiksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRMZWZ0fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc2hsID0gTG9uZ1Byb3RvdHlwZS5zaGlmdExlZnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgYXJpdGhtZXRpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbiBzaGlmdFJpZ2h0KG51bUJpdHMpIHtcclxuICAgICAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgICAgIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGVsc2UgaWYgKG51bUJpdHMgPCAzMilcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKCh0aGlzLmxvdyA+Pj4gbnVtQml0cykgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgdGhpcy5oaWdoID4+IG51bUJpdHMsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMuaGlnaCA+PiAobnVtQml0cyAtIDMyKSwgdGhpcy5oaWdoID49IDAgPyAwIDogLTEsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0UmlnaHR9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zaHIgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQgPSBmdW5jdGlvbiBzaGlmdFJpZ2h0VW5zaWduZWQobnVtQml0cykge1xyXG4gICAgICAgIGlmIChpc0xvbmcobnVtQml0cykpXHJcbiAgICAgICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICAgICAgbnVtQml0cyAmPSA2MztcclxuICAgICAgICBpZiAobnVtQml0cyA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBoaWdoID0gdGhpcy5oaWdoO1xyXG4gICAgICAgICAgICBpZiAobnVtQml0cyA8IDMyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gdGhpcy5sb3c7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoKGxvdyA+Pj4gbnVtQml0cykgfCAoaGlnaCA8PCAoMzIgLSBudW1CaXRzKSksIGhpZ2ggPj4+IG51bUJpdHMsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bUJpdHMgPT09IDMyKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKGhpZ2gsIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoaGlnaCA+Pj4gKG51bUJpdHMgLSAzMiksIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodFVuc2lnbmVkfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc2hydSA9IExvbmdQcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhpcyBMb25nIHRvIHNpZ25lZC5cclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2lnbmVkIGxvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b1NpZ25lZCA9IGZ1bmN0aW9uIHRvU2lnbmVkKCkge1xyXG4gICAgICAgIGlmICghdGhpcy51bnNpZ25lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIGZhbHNlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gdW5zaWduZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFVuc2lnbmVkIGxvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b1Vuc2lnbmVkID0gZnVuY3Rpb24gdG9VbnNpZ25lZCgpIHtcclxuICAgICAgICBpZiAodGhpcy51bnNpZ25lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxlIFdoZXRoZXIgbGl0dGxlIG9yIGJpZyBlbmRpYW4sIGRlZmF1bHRzIHRvIGJpZyBlbmRpYW5cclxuICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJ5dGUgcmVwcmVzZW50YXRpb25cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24obGUpIHtcclxuICAgICAgICByZXR1cm4gbGUgPyB0aGlzLnRvQnl0ZXNMRSgpIDogdGhpcy50b0J5dGVzQkUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgbGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gTGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9CeXRlc0xFID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhpID0gdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICBsbyA9IHRoaXMubG93O1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICBsbyAgICAgICAgICYgMHhmZixcclxuICAgICAgICAgICAgKGxvID4+PiAgOCkgJiAweGZmLFxyXG4gICAgICAgICAgICAobG8gPj4+IDE2KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChsbyA+Pj4gMjQpICYgMHhmZixcclxuICAgICAgICAgICAgIGhpICAgICAgICAgJiAweGZmLFxyXG4gICAgICAgICAgICAoaGkgPj4+ICA4KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChoaSA+Pj4gMTYpICYgMHhmZixcclxuICAgICAgICAgICAgKGhpID4+PiAyNCkgJiAweGZmXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gICAgICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gQmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9CeXRlc0JFID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhpID0gdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICBsbyA9IHRoaXMubG93O1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIChoaSA+Pj4gMjQpICYgMHhmZixcclxuICAgICAgICAgICAgKGhpID4+PiAxNikgJiAweGZmLFxyXG4gICAgICAgICAgICAoaGkgPj4+ICA4KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgICBoaSAgICAgICAgICYgMHhmZixcclxuICAgICAgICAgICAgKGxvID4+PiAyNCkgJiAweGZmLFxyXG4gICAgICAgICAgICAobG8gPj4+IDE2KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChsbyA+Pj4gIDgpICYgMHhmZixcclxuICAgICAgICAgICAgIGxvICAgICAgICAgJiAweGZmXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTG9uZztcclxufSk7XHJcbiIsInZhciBjaXBoZXJzID0gcmVxdWlyZSgnLi9lbmNyeXB0ZXInKVxudmFyIGRlY2lwaGVycyA9IHJlcXVpcmUoJy4vZGVjcnlwdGVyJylcbnZhciBtb2RlcyA9IHJlcXVpcmUoJy4vbW9kZXMvbGlzdC5qc29uJylcblxuZnVuY3Rpb24gZ2V0Q2lwaGVycyAoKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhtb2Rlcylcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNpcGhlcnMuY3JlYXRlQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNpcGhlcnMuY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsInZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuXG5DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cblxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbnZhciBQQURESU5HID0gQnVmZmVyLmFsbG9jKDE2LCAweDEwKVxuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgaWYgKCFjaHVuay5lcXVhbHMoUEFERElORykpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTUpIHtcbiAgICB2YXIgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICByZXR1cm4gb3V0XG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBwYWRCdWZmXSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIGlmIChjb25maWcubW9kZSAhPT0gJ0dDTScgJiYgaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaXYgbGVuZ3RoICcgKyBpdi5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbiAgfVxuXG4gIHJldHVybiBuZXcgQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGNyZWF0ZUNpcGhlclxuIiwiZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGJsb2NrKVxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgZGF0YSA9IHhvcihibG9jaywgc2VsZi5fcHJldilcblxuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhkYXRhKVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIHBhZCA9IHNlbGYuX3ByZXZcblxuICBzZWxmLl9wcmV2ID0gYmxvY2tcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG5cbiAgcmV0dXJuIHhvcihvdXQsIHBhZClcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9wcmV2LnNsaWNlKDEpLFxuICAgIEJ1ZmZlci5mcm9tKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSlcbiAgXSlcblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnVmZmVyLmxlbmd0aClcbiAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCBCdWZmZXIuZnJvbShbdmFsdWVdKV0pXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGJ1ZmZlcltpXSA8PCAxIHwgYnVmZmVyW2kgKyAxXSA+PiAoNylcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB3aGlsZSAoc2VsZi5fY2FjaGUubGVuZ3RoIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9jYWNoZSwgZ2V0QmxvY2soc2VsZildKVxuICB9XG5cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5UcmFuc2Zvcm1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlBhc3NUaHJvdWdoXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5IChvdXQpIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdID4+PiAwLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0gPj4+IDAsIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSA+Pj4gMCwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdID4+PiAwLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSAoaSAlIDgpKSkpICE9PSAwXG4gICAgaWYgKHhpKSB7XG4gICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaVxuICAgICAgWmlbMF0gXj0gVmlbMF1cbiAgICAgIFppWzFdIF49IFZpWzFdXG4gICAgICBaaVsyXSBePSBWaVsyXVxuICAgICAgWmlbM10gXj0gVmlbM11cbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JWaSA9IChWaVszXSAmIDEpICE9PSAwXG5cbiAgICAvLyBWX2krMSA9IFZfaSA+PiAxXG4gICAgZm9yIChqID0gMzsgaiA+IDA7IGotLSkge1xuICAgICAgVmlbal0gPSAoVmlbal0gPj4+IDEpIHwgKChWaVtqIC0gMV0gJiAxKSA8PCAzMSlcbiAgICB9XG4gICAgVmlbMF0gPSBWaVswXSA+Pj4gMVxuXG4gICAgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUlxuICAgIGlmIChsc2JWaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuXG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5cbkdIQVNILnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIChhYmwsIGJsKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuZ2hhc2goQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgWkVST0VTXSwgMTYpKVxuICB9XG5cbiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSlcbiAgcmV0dXJuIHRoaXMuc3RhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHJldHVyblxuXG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH1cblxuICByZXR1cm4gbmV3IERlY2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIEZJWE1FOiBLaW5kIG9mIGEgd2VpcmQgd2F5IHRvIHRocm93IGV4Y2VwdGlvbnMsIGNvbnNpZGVyIHJlbW92aW5nXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnLi9iaWdpJylcblxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byBhIGJpZyBpbnRlZ2VyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBpbnRlcnByZXQgYSBieXRlIGFycmF5IGFzIGEgYmlnIGludGVnZXIgaW4gYmlnXG4gKiBlbmRpYW4gbm90YXRpb24uXG4gKi9cbkJpZ0ludGVnZXIuZnJvbUJ5dGVBcnJheVVuc2lnbmVkID0gZnVuY3Rpb24oYnl0ZUFycmF5KSB7XG4gIC8vIEJpZ0ludGVnZXIgZXhwZWN0cyBhIERFUiBpbnRlZ2VyIGNvbmZvcm1hbnQgYnl0ZSBhcnJheVxuICBpZiAoYnl0ZUFycmF5WzBdICYgMHg4MCkge1xuICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihbMF0uY29uY2F0KGJ5dGVBcnJheSkpXG4gIH1cblxuICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYnl0ZUFycmF5KVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBieXRlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBiaWcgaW50ZWdlci5cbiAqXG4gKiBUaGlzIHJldHVybnMgdGhlIGFic29sdXRlIG9mIHRoZSBjb250YWluZWQgdmFsdWUgaW4gYmlnIGVuZGlhblxuICogZm9ybS4gQSB2YWx1ZSBvZiB6ZXJvIHJlc3VsdHMgaW4gYW4gZW1wdHkgYXJyYXkuXG4gKi9cbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5VW5zaWduZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IHRoaXMudG9CeXRlQXJyYXkoKVxuICByZXR1cm4gYnl0ZUFycmF5WzBdID09PSAwID8gYnl0ZUFycmF5LnNsaWNlKDEpIDogYnl0ZUFycmF5XG59XG5cbkJpZ0ludGVnZXIuZnJvbURFUkludGVnZXIgPSBmdW5jdGlvbihieXRlQXJyYXkpIHtcbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGJ5dGVBcnJheSlcbn1cblxuLypcbiAqIENvbnZlcnRzIEJpZ0ludGVnZXIgdG8gYSBERVIgaW50ZWdlciByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBUaGUgZm9ybWF0IGZvciB0aGlzIHZhbHVlIHVzZXMgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IGFzIGEgc2lnblxuICogYml0LiAgSWYgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IGlzIGFscmVhZHkgc2V0IGFuZCB0aGUgaW50ZWdlciBpc1xuICogcG9zaXRpdmUsIGEgMHgwMCBpcyBwcmVwZW5kZWQuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICAwID0+ICAgICAweDAwXG4gKiAgICAgIDEgPT4gICAgIDB4MDFcbiAqICAgICAtMSA9PiAgICAgMHhmZlxuICogICAgMTI3ID0+ICAgICAweDdmXG4gKiAgIC0xMjcgPT4gICAgIDB4ODFcbiAqICAgIDEyOCA9PiAgIDB4MDA4MFxuICogICAtMTI4ID0+ICAgICAweDgwXG4gKiAgICAyNTUgPT4gICAweDAwZmZcbiAqICAgLTI1NSA9PiAgIDB4ZmYwMVxuICogIDE2MzAwID0+ICAgMHgzZmFjXG4gKiAtMTYzMDAgPT4gICAweGMwNTRcbiAqICA2MjMwMCA9PiAweDAwZjM1Y1xuICogLTYyMzAwID0+IDB4ZmYwY2E0XG4qL1xuQmlnSW50ZWdlci5wcm90b3R5cGUudG9ERVJJbnRlZ2VyID0gQmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXlcblxuQmlnSW50ZWdlci5mcm9tQnVmZmVyID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gIC8vIEJpZ0ludGVnZXIgZXhwZWN0cyBhIERFUiBpbnRlZ2VyIGNvbmZvcm1hbnQgYnl0ZSBhcnJheVxuICBpZiAoYnVmZmVyWzBdICYgMHg4MCkge1xuICAgIHZhciBieXRlQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChidWZmZXIpXG5cbiAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoWzBdLmNvbmNhdChieXRlQXJyYXkpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGJ1ZmZlcilcbn1cblxuQmlnSW50ZWdlci5mcm9tSGV4ID0gZnVuY3Rpb24oaGV4KSB7XG4gIGlmIChoZXggPT09ICcnKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPXG5cbiAgYXNzZXJ0LmVxdWFsKGhleCwgaGV4Lm1hdGNoKC9eW0EtRmEtZjAtOV0rLyksICdJbnZhbGlkIGhleCBzdHJpbmcnKVxuICBhc3NlcnQuZXF1YWwoaGV4Lmxlbmd0aCAlIDIsIDAsICdJbmNvbXBsZXRlIGhleCcpXG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihoZXgsIDE2KVxufVxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IHRoaXMudG9CeXRlQXJyYXlVbnNpZ25lZCgpXG4gIHZhciB6ZXJvcyA9IFtdXG5cbiAgdmFyIHBhZGRpbmcgPSBzaXplIC0gYnl0ZUFycmF5Lmxlbmd0aFxuICB3aGlsZSAoemVyb3MubGVuZ3RoIDwgcGFkZGluZykgemVyb3MucHVzaCgwKVxuXG4gIHJldHVybiBuZXcgQnVmZmVyKHplcm9zLmNvbmNhdChieXRlQXJyYXkpKVxufVxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgcmV0dXJuIHRoaXMudG9CdWZmZXIoc2l6ZSkudG9TdHJpbmcoJ2hleCcpXG59XG4iLCJ2YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKVxuXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG52YXIgQ3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJylcblxuZnVuY3Rpb24gZ2V0Q3VydmVCeU5hbWUgKG5hbWUpIHtcbiAgdmFyIGN1cnZlID0gY3VydmVzW25hbWVdXG4gIGlmICghY3VydmUpIHJldHVybiBudWxsXG5cbiAgdmFyIHAgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5wLCAxNilcbiAgdmFyIGEgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5hLCAxNilcbiAgdmFyIGIgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5iLCAxNilcbiAgdmFyIG4gPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5uLCAxNilcbiAgdmFyIGggPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5oLCAxNilcbiAgdmFyIEd4ID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuR3gsIDE2KVxuICB2YXIgR3kgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5HeSwgMTYpXG5cbiAgcmV0dXJuIG5ldyBDdXJ2ZShwLCBhLCBiLCBHeCwgR3ksIG4sIGgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q3VydmVCeU5hbWVcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkXG4gIHRoaXMuX2JoID0gMHg2MjlhMjkyYVxuICB0aGlzLl9jaCA9IDB4OTE1OTAxNWFcbiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4XG4gIHRoaXMuX2VoID0gMHg2NzMzMjY2N1xuICB0aGlzLl9maCA9IDB4OGViNDRhODdcbiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkXG4gIHRoaXMuX2hoID0gMHg0N2I1NDgxZFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhN1xuICB0aGlzLl9obCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIExlZ2FjeSA9IHJlcXVpcmUoJy4vbGVnYWN5JylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxuXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICB2YXIgaGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICAgIGtleSA9IGhhc2gudXBkYXRlKGtleSkuZGlnZXN0KClcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuICB0aGlzLl9oYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gIHRoaXMuX2hhc2gudXBkYXRlKGlwYWQpXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2FsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEodGhpcy5fYWxnKVxuICByZXR1cm4gaGFzaC51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyAoYWxnLCBrZXkpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykge1xuICAgIHJldHVybiBuZXcgSG1hYygncm1kMTYwJywga2V5KVxuICB9XG4gIGlmIChhbGcgPT09ICdtZDUnKSB7XG4gICAgcmV0dXJuIG5ldyBMZWdhY3kobWQ1LCBrZXkpXG4gIH1cbiAgcmV0dXJuIG5ldyBIbWFjKGFsZywga2V5KVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgYmxvY2tzaXplID0gNjRcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBhbGcoa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IFtpcGFkXVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC5wdXNoKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdCh0aGlzLl9oYXNoKSlcbiAgcmV0dXJuIHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KFt0aGlzLl9vcGFkLCBoXSkpXG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNcbiIsInZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBNRDUoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuIiwidmFyIGJhc2V4ID0gcmVxdWlyZSgnYmFzZS14JylcbnZhciBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2V4KEFMUEhBQkVUKVxuIiwiLy8gYmFzZS14IGVuY29kaW5nXG4vLyBGb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL2JzNThcbi8vIE9yaWdpbmFsbHkgd3JpdHRlbiBieSBNaWtlIEhlYXJuIGZvciBCaXRjb2luSlxuLy8gQ29weXJpZ2h0IChjKSAyMDExIEdvb2dsZSBJbmNcbi8vIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IFN0ZWZhbiBUaG9tYXNcbi8vIE1lcmdlZCBCdWZmZXIgcmVmYWN0b3JpbmdzIGZyb20gYmFzZTU4LW5hdGl2ZSBieSBTdGVwaGVuIFBhaXJcbi8vIENvcHlyaWdodCAoYykgMjAxMyBCaXRQYXkgSW5jXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJhc2UgKEFMUEhBQkVUKSB7XG4gIHZhciBBTFBIQUJFVF9NQVAgPSB7fVxuICB2YXIgQkFTRSA9IEFMUEhBQkVULmxlbmd0aFxuICB2YXIgTEVBREVSID0gQUxQSEFCRVQuY2hhckF0KDApXG5cbiAgLy8gcHJlLWNvbXB1dGUgbG9va3VwIHRhYmxlXG4gIGZvciAodmFyIHogPSAwOyB6IDwgQUxQSEFCRVQubGVuZ3RoOyB6KyspIHtcbiAgICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdCh6KVxuXG4gICAgaWYgKEFMUEhBQkVUX01BUFt4XSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpXG4gICAgQUxQSEFCRVRfTUFQW3hdID0gelxuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlIChzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG5cbiAgICB2YXIgZGlnaXRzID0gWzBdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IHNvdXJjZVtpXTsgaiA8IGRpZ2l0cy5sZW5ndGg7ICsraikge1xuICAgICAgICBjYXJyeSArPSBkaWdpdHNbal0gPDwgOFxuICAgICAgICBkaWdpdHNbal0gPSBjYXJyeSAlIEJBU0VcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSB8IDBcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGNhcnJ5ID4gMCkge1xuICAgICAgICBkaWdpdHMucHVzaChjYXJyeSAlIEJBU0UpXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gQkFTRSkgfCAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9ICcnXG5cbiAgICAvLyBkZWFsIHdpdGggbGVhZGluZyB6ZXJvc1xuICAgIGZvciAodmFyIGsgPSAwOyBzb3VyY2Vba10gPT09IDAgJiYgayA8IHNvdXJjZS5sZW5ndGggLSAxOyArK2spIHN0cmluZyArPSBMRUFERVJcbiAgICAvLyBjb252ZXJ0IGRpZ2l0cyB0byBhIHN0cmluZ1xuICAgIGZvciAodmFyIHEgPSBkaWdpdHMubGVuZ3RoIC0gMTsgcSA+PSAwOyAtLXEpIHN0cmluZyArPSBBTFBIQUJFVFtkaWdpdHNbcV1dXG5cbiAgICByZXR1cm4gc3RyaW5nXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUgKHN0cmluZykge1xuICAgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgU3RyaW5nJylcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuXG4gICAgdmFyIGJ5dGVzID0gWzBdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IEFMUEhBQkVUX01BUFtzdHJpbmdbaV1dXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuXG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IHZhbHVlOyBqIDwgYnl0ZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgY2FycnkgKz0gYnl0ZXNbal0gKiBCQVNFXG4gICAgICAgIGJ5dGVzW2pdID0gY2FycnkgJiAweGZmXG4gICAgICAgIGNhcnJ5ID4+PSA4XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChjYXJyeSA+IDApIHtcbiAgICAgICAgYnl0ZXMucHVzaChjYXJyeSAmIDB4ZmYpXG4gICAgICAgIGNhcnJ5ID4+PSA4XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGVhbCB3aXRoIGxlYWRpbmcgemVyb3NcbiAgICBmb3IgKHZhciBrID0gMDsgc3RyaW5nW2tdID09PSBMRUFERVIgJiYgayA8IHN0cmluZy5sZW5ndGggLSAxOyArK2spIHtcbiAgICAgIGJ5dGVzLnB1c2goMClcbiAgICB9XG5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZXMucmV2ZXJzZSgpKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgICB2YXIgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZylcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gYnVmZmVyXG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1iYXNlJyArIEJBU0UgKyAnIGNoYXJhY3RlcicpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAgQ29udmVydCBhIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gYSBhc3luY2hyb25vdXMgb25lICh2aWEgc2V0VGltZW91dClcbiAgd3JhcHBpbmcgaXQgaW4gYSBwcm9taXNlLiAgVGhpcyBkb2VzIG5vdCBleHBlY3QgdGhlIGZ1bmN0aW9uIHRvIGhhdmUgYVxuICBjYWxsYmFjayBwYXJhbXRlci5cblxuICBAYXJnIHtmdW5jdGlvbn0gZnVuYyAtIG5vbi1jYWxsYmFjayBmdW5jdGlvblxuXG4gIEBleGFtcGxlIHByb21pc2VBc3luYyhteWZ1bmN0aW9uKVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzb2x2ZShmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncykpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOyAvLyBmcm9tIGdpdGh1Yi5jb20vYml0Y29pbmpzL2JpdGNvaW5qcy1saWIgZnJvbSBnaXRodWIuY29tL2NyeXB0b2NvaW5qcy9lY2RzYVxudmFyIGNyeXB0byA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIGVuZm9yY2VUeXBlID0gcmVxdWlyZSgnLi9lbmZvcmNlX3R5cGVzJyk7XG5cbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xudmFyIEVDU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9lY3NpZ25hdHVyZScpO1xuXG4vLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjk3OSNzZWN0aW9uLTMuMlxuZnVuY3Rpb24gZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSyhjdXJ2ZSwgaGFzaCwgZCwgY2hlY2tTaWcsIG5vbmNlKSB7XG5cbiAgZW5mb3JjZVR5cGUoJ0J1ZmZlcicsIGhhc2gpO1xuICBlbmZvcmNlVHlwZShCaWdJbnRlZ2VyLCBkKTtcblxuICBpZiAobm9uY2UpIHtcbiAgICBoYXNoID0gY3J5cHRvLnNoYTI1NihCdWZmZXIuY29uY2F0KFtoYXNoLCBuZXcgQnVmZmVyKG5vbmNlKV0pKTtcbiAgfVxuXG4gIC8vIHNhbml0eSBjaGVja1xuICBhc3NlcnQuZXF1YWwoaGFzaC5sZW5ndGgsIDMyLCAnSGFzaCBtdXN0IGJlIDI1NiBiaXQnKTtcblxuICB2YXIgeCA9IGQudG9CdWZmZXIoMzIpO1xuICB2YXIgayA9IG5ldyBCdWZmZXIoMzIpO1xuICB2YXIgdiA9IG5ldyBCdWZmZXIoMzIpO1xuXG4gIC8vIFN0ZXAgQlxuICB2LmZpbGwoMSk7XG5cbiAgLy8gU3RlcCBDXG4gIGsuZmlsbCgwKTtcblxuICAvLyBTdGVwIERcbiAgayA9IGNyeXB0by5IbWFjU0hBMjU2KEJ1ZmZlci5jb25jYXQoW3YsIG5ldyBCdWZmZXIoWzBdKSwgeCwgaGFzaF0pLCBrKTtcblxuICAvLyBTdGVwIEVcbiAgdiA9IGNyeXB0by5IbWFjU0hBMjU2KHYsIGspO1xuXG4gIC8vIFN0ZXAgRlxuICBrID0gY3J5cHRvLkhtYWNTSEEyNTYoQnVmZmVyLmNvbmNhdChbdiwgbmV3IEJ1ZmZlcihbMV0pLCB4LCBoYXNoXSksIGspO1xuXG4gIC8vIFN0ZXAgR1xuICB2ID0gY3J5cHRvLkhtYWNTSEEyNTYodiwgayk7XG5cbiAgLy8gU3RlcCBIMS9IMmEsIGlnbm9yZWQgYXMgdGxlbiA9PT0gcWxlbiAoMjU2IGJpdClcbiAgLy8gU3RlcCBIMmJcbiAgdiA9IGNyeXB0by5IbWFjU0hBMjU2KHYsIGspO1xuXG4gIHZhciBUID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKHYpO1xuXG4gIC8vIFN0ZXAgSDMsIHJlcGVhdCB1bnRpbCBUIGlzIHdpdGhpbiB0aGUgaW50ZXJ2YWwgWzEsIG4gLSAxXVxuICB3aGlsZSAoVC5zaWdudW0oKSA8PSAwIHx8IFQuY29tcGFyZVRvKGN1cnZlLm4pID49IDAgfHwgIWNoZWNrU2lnKFQpKSB7XG4gICAgayA9IGNyeXB0by5IbWFjU0hBMjU2KEJ1ZmZlci5jb25jYXQoW3YsIG5ldyBCdWZmZXIoWzBdKV0pLCBrKTtcbiAgICB2ID0gY3J5cHRvLkhtYWNTSEEyNTYodiwgayk7XG5cbiAgICAvLyBTdGVwIEgxL0gyYSwgYWdhaW4sIGlnbm9yZWQgYXMgdGxlbiA9PT0gcWxlbiAoMjU2IGJpdClcbiAgICAvLyBTdGVwIEgyYiBhZ2FpblxuICAgIHYgPSBjcnlwdG8uSG1hY1NIQTI1Nih2LCBrKTtcblxuICAgIFQgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIodik7XG4gIH1cblxuICByZXR1cm4gVDtcbn1cblxuZnVuY3Rpb24gc2lnbihjdXJ2ZSwgaGFzaCwgZCwgbm9uY2UpIHtcblxuICB2YXIgZSA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihoYXNoKTtcbiAgdmFyIG4gPSBjdXJ2ZS5uO1xuICB2YXIgRyA9IGN1cnZlLkc7XG5cbiAgdmFyIHIsIHM7XG4gIHZhciBrID0gZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSyhjdXJ2ZSwgaGFzaCwgZCwgZnVuY3Rpb24gKGspIHtcbiAgICAvLyBmaW5kIGNhbm9uaWNhbGx5IHZhbGlkIHNpZ25hdHVyZVxuICAgIHZhciBRID0gRy5tdWx0aXBseShrKTtcblxuICAgIGlmIChjdXJ2ZS5pc0luZmluaXR5KFEpKSByZXR1cm4gZmFsc2U7XG5cbiAgICByID0gUS5hZmZpbmVYLm1vZChuKTtcbiAgICBpZiAoci5zaWdudW0oKSA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcyA9IGsubW9kSW52ZXJzZShuKS5tdWx0aXBseShlLmFkZChkLm11bHRpcGx5KHIpKSkubW9kKG4pO1xuICAgIGlmIChzLnNpZ251bSgpID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgbm9uY2UpO1xuXG4gIHZhciBOX09WRVJfVFdPID0gbi5zaGlmdFJpZ2h0KDEpO1xuXG4gIC8vIGVuZm9yY2UgbG93IFMgdmFsdWVzLCBzZWUgYmlwNjI6ICdsb3cgcyB2YWx1ZXMgaW4gc2lnbmF0dXJlcydcbiAgaWYgKHMuY29tcGFyZVRvKE5fT1ZFUl9UV08pID4gMCkge1xuICAgIHMgPSBuLnN1YnRyYWN0KHMpO1xuICB9XG5cbiAgcmV0dXJuIEVDU2lnbmF0dXJlKHIsIHMpO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlSYXcoY3VydmUsIGUsIHNpZ25hdHVyZSwgUSkge1xuICB2YXIgbiA9IGN1cnZlLm47XG4gIHZhciBHID0gY3VydmUuRztcblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIDEuNC4xIEVuZm9yY2UgciBhbmQgcyBhcmUgYm90aCBpbnRlZ2VycyBpbiB0aGUgaW50ZXJ2YWwgWzEsIG4g4oiSIDFdXG4gIGlmIChyLnNpZ251bSgpIDw9IDAgfHwgci5jb21wYXJlVG8obikgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5zaWdudW0oKSA8PSAwIHx8IHMuY29tcGFyZVRvKG4pID49IDApIHJldHVybiBmYWxzZTtcblxuICAvLyBjID0gc14tMSBtb2QgblxuICB2YXIgYyA9IHMubW9kSW52ZXJzZShuKTtcblxuICAvLyAxLjQuNCBDb21wdXRlIHUxID0gZXNe4oiSMSBtb2QgblxuICAvLyAgICAgICAgICAgICAgIHUyID0gcnNe4oiSMSBtb2QgblxuICB2YXIgdTEgPSBlLm11bHRpcGx5KGMpLm1vZChuKTtcbiAgdmFyIHUyID0gci5tdWx0aXBseShjKS5tb2Qobik7XG5cbiAgLy8gMS40LjUgQ29tcHV0ZSBSID0gKHhSLCB5UikgPSB1MUcgKyB1MlFcbiAgdmFyIFIgPSBHLm11bHRpcGx5VHdvKHUxLCBRLCB1Mik7XG5cbiAgLy8gMS40LjUgKGNvbnQuKSBFbmZvcmNlIFIgaXMgbm90IGF0IGluZmluaXR5XG4gIGlmIChjdXJ2ZS5pc0luZmluaXR5KFIpKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gMS40LjYgQ29udmVydCB0aGUgZmllbGQgZWxlbWVudCBSLnggdG8gYW4gaW50ZWdlclxuICB2YXIgeFIgPSBSLmFmZmluZVg7XG5cbiAgLy8gMS40LjcgU2V0IHYgPSB4UiBtb2QgblxuICB2YXIgdiA9IHhSLm1vZChuKTtcblxuICAvLyAxLjQuOCBJZiB2ID0gciwgb3V0cHV0IFwidmFsaWRcIiwgYW5kIGlmIHYgIT0gciwgb3V0cHV0IFwiaW52YWxpZFwiXG4gIHJldHVybiB2LmVxdWFscyhyKTtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5KGN1cnZlLCBoYXNoLCBzaWduYXR1cmUsIFEpIHtcbiAgLy8gMS40LjIgSCA9IEhhc2goTSksIGFscmVhZHkgZG9uZSBieSB0aGUgdXNlclxuICAvLyAxLjQuMyBlID0gSFxuICB2YXIgZSA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihoYXNoKTtcbiAgcmV0dXJuIHZlcmlmeVJhdyhjdXJ2ZSwgZSwgc2lnbmF0dXJlLCBRKTtcbn1cblxuLyoqXG4gICogUmVjb3ZlciBhIHB1YmxpYyBrZXkgZnJvbSBhIHNpZ25hdHVyZS5cbiAgKlxuICAqIFNlZSBTRUMgMTogRWxsaXB0aWMgQ3VydmUgQ3J5cHRvZ3JhcGh5LCBzZWN0aW9uIDQuMS42LCBcIlB1YmxpY1xuICAqIEtleSBSZWNvdmVyeSBPcGVyYXRpb25cIi5cbiAgKlxuICAqIGh0dHA6Ly93d3cuc2VjZy5vcmcvZG93bmxvYWQvYWlkLTc4MC9zZWMxLXYyLnBkZlxuICAqL1xuZnVuY3Rpb24gcmVjb3ZlclB1YktleShjdXJ2ZSwgZSwgc2lnbmF0dXJlLCBpKSB7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChpICYgMywgaSwgJ1JlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuXG4gIHZhciBuID0gY3VydmUubjtcbiAgdmFyIEcgPSBjdXJ2ZS5HO1xuXG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG5cbiAgYXNzZXJ0KHIuc2lnbnVtKCkgPiAwICYmIHIuY29tcGFyZVRvKG4pIDwgMCwgJ0ludmFsaWQgciB2YWx1ZScpO1xuICBhc3NlcnQocy5zaWdudW0oKSA+IDAgJiYgcy5jb21wYXJlVG8obikgPCAwLCAnSW52YWxpZCBzIHZhbHVlJyk7XG5cbiAgLy8gQSBzZXQgTFNCIHNpZ25pZmllcyB0aGF0IHRoZSB5LWNvb3JkaW5hdGUgaXMgb2RkXG4gIHZhciBpc1lPZGQgPSBpICYgMTtcblxuICAvLyBUaGUgbW9yZSBzaWduaWZpY2FudCBiaXQgc3BlY2lmaWVzIHdoZXRoZXIgd2Ugc2hvdWxkIHVzZSB0aGVcbiAgLy8gZmlyc3Qgb3Igc2Vjb25kIGNhbmRpZGF0ZSBrZXkuXG4gIHZhciBpc1NlY29uZEtleSA9IGkgPj4gMTtcblxuICAvLyAxLjEgTGV0IHggPSByICsgam5cbiAgdmFyIHggPSBpc1NlY29uZEtleSA/IHIuYWRkKG4pIDogcjtcbiAgdmFyIFIgPSBjdXJ2ZS5wb2ludEZyb21YKGlzWU9kZCwgeCk7XG5cbiAgLy8gMS40IENoZWNrIHRoYXQgblIgaXMgYXQgaW5maW5pdHlcbiAgdmFyIG5SID0gUi5tdWx0aXBseShuKTtcbiAgYXNzZXJ0KGN1cnZlLmlzSW5maW5pdHkoblIpLCAnblIgaXMgbm90IGEgdmFsaWQgY3VydmUgcG9pbnQnKTtcblxuICAvLyBDb21wdXRlIC1lIGZyb20gZVxuICB2YXIgZU5lZyA9IGUubmVnYXRlKCkubW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgdmFyIHJJbnYgPSByLm1vZEludmVyc2Uobik7XG5cbiAgdmFyIFEgPSBSLm11bHRpcGx5VHdvKHMsIEcsIGVOZWcpLm11bHRpcGx5KHJJbnYpO1xuICBjdXJ2ZS52YWxpZGF0ZShRKTtcblxuICByZXR1cm4gUTtcbn1cblxuLyoqXG4gICogQ2FsY3VsYXRlIHB1YmtleSBleHRyYWN0aW9uIHBhcmFtZXRlci5cbiAgKlxuICAqIFdoZW4gZXh0cmFjdGluZyBhIHB1YmtleSBmcm9tIGEgc2lnbmF0dXJlLCB3ZSBoYXZlIHRvXG4gICogZGlzdGluZ3Vpc2ggZm91ciBkaWZmZXJlbnQgY2FzZXMuIFJhdGhlciB0aGFuIHB1dHRpbmcgdGhpc1xuICAqIGJ1cmRlbiBvbiB0aGUgdmVyaWZpZXIsIEJpdGNvaW4gaW5jbHVkZXMgYSAyLWJpdCB2YWx1ZSB3aXRoIHRoZVxuICAqIHNpZ25hdHVyZS5cbiAgKlxuICAqIFRoaXMgZnVuY3Rpb24gc2ltcGx5IHRyaWVzIGFsbCBmb3VyIGNhc2VzIGFuZCByZXR1cm5zIHRoZSB2YWx1ZVxuICAqIHRoYXQgcmVzdWx0ZWQgaW4gYSBzdWNjZXNzZnVsIHB1YmtleSByZWNvdmVyeS5cbiAgKi9cbmZ1bmN0aW9uIGNhbGNQdWJLZXlSZWNvdmVyeVBhcmFtKGN1cnZlLCBlLCBzaWduYXR1cmUsIFEpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lID0gcmVjb3ZlclB1YktleShjdXJ2ZSwgZSwgc2lnbmF0dXJlLCBpKTtcblxuICAgIC8vIDEuNi4yIFZlcmlmeSBRXG4gICAgaWYgKFFwcmltZS5lcXVhbHMoUSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjUHViS2V5UmVjb3ZlcnlQYXJhbTogY2FsY1B1YktleVJlY292ZXJ5UGFyYW0sXG4gIGRldGVybWluaXN0aWNHZW5lcmF0ZUs6IGRldGVybWluaXN0aWNHZW5lcmF0ZUssXG4gIHJlY292ZXJQdWJLZXk6IHJlY292ZXJQdWJLZXksXG4gIHNpZ246IHNpZ24sXG4gIHZlcmlmeTogdmVyaWZ5LFxuICB2ZXJpZnlSYXc6IHZlcmlmeVJhd1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTsgLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbmpzL2JpdGNvaW5qcy1saWJcbnZhciBlbmZvcmNlVHlwZSA9IHJlcXVpcmUoJy4vZW5mb3JjZV90eXBlcycpO1xuXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKTtcblxuZnVuY3Rpb24gRUNTaWduYXR1cmUociwgcykge1xuICBlbmZvcmNlVHlwZShCaWdJbnRlZ2VyLCByKTtcbiAgZW5mb3JjZVR5cGUoQmlnSW50ZWdlciwgcyk7XG5cbiAgZnVuY3Rpb24gdG9Db21wYWN0KGksIGNvbXByZXNzZWQpIHtcbiAgICBpZiAoY29tcHJlc3NlZCkgaSArPSA0O1xuICAgIGkgKz0gMjc7XG5cbiAgICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcig2NSk7XG4gICAgYnVmZmVyLndyaXRlVUludDgoaSwgMCk7XG5cbiAgICByLnRvQnVmZmVyKDMyKS5jb3B5KGJ1ZmZlciwgMSk7XG4gICAgcy50b0J1ZmZlcigzMikuY29weShidWZmZXIsIDMzKTtcblxuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICBmdW5jdGlvbiB0b0RFUigpIHtcbiAgICB2YXIgckJhID0gci50b0RFUkludGVnZXIoKTtcbiAgICB2YXIgc0JhID0gcy50b0RFUkludGVnZXIoKTtcblxuICAgIHZhciBzZXF1ZW5jZSA9IFtdO1xuXG4gICAgLy8gSU5URUdFUlxuICAgIHNlcXVlbmNlLnB1c2goMHgwMiwgckJhLmxlbmd0aCk7XG4gICAgc2VxdWVuY2UgPSBzZXF1ZW5jZS5jb25jYXQockJhKTtcblxuICAgIC8vIElOVEVHRVJcbiAgICBzZXF1ZW5jZS5wdXNoKDB4MDIsIHNCYS5sZW5ndGgpO1xuICAgIHNlcXVlbmNlID0gc2VxdWVuY2UuY29uY2F0KHNCYSk7XG5cbiAgICAvLyBTRVFVRU5DRVxuICAgIHNlcXVlbmNlLnVuc2hpZnQoMHgzMCwgc2VxdWVuY2UubGVuZ3RoKTtcblxuICAgIHJldHVybiBuZXcgQnVmZmVyKHNlcXVlbmNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvU2NyaXB0U2lnbmF0dXJlKGhhc2hUeXBlKSB7XG4gICAgdmFyIGhhc2hUeXBlQnVmZmVyID0gbmV3IEJ1ZmZlcigxKTtcbiAgICBoYXNoVHlwZUJ1ZmZlci53cml0ZVVJbnQ4KGhhc2hUeXBlLCAwKTtcblxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFt0b0RFUigpLCBoYXNoVHlwZUJ1ZmZlcl0pO1xuICB9XG5cbiAgcmV0dXJuIHsgcjogciwgczogcywgdG9Db21wYWN0OiB0b0NvbXBhY3QsIHRvREVSOiB0b0RFUiwgdG9TY3JpcHRTaWduYXR1cmU6IHRvU2NyaXB0U2lnbmF0dXJlIH07XG59XG5cbi8vIEltcG9ydCBvcGVyYXRpb25zXG5FQ1NpZ25hdHVyZS5wYXJzZUNvbXBhY3QgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIGFzc2VydC5lcXVhbChidWZmZXIubGVuZ3RoLCA2NSwgJ0ludmFsaWQgc2lnbmF0dXJlIGxlbmd0aCcpO1xuICB2YXIgaSA9IGJ1ZmZlci5yZWFkVUludDgoMCkgLSAyNztcblxuICAvLyBBdCBtb3N0IDMgYml0c1xuICBhc3NlcnQuZXF1YWwoaSwgaSAmIDcsICdJbnZhbGlkIHNpZ25hdHVyZSBwYXJhbWV0ZXInKTtcbiAgdmFyIGNvbXByZXNzZWQgPSAhIShpICYgNCk7XG5cbiAgLy8gUmVjb3ZlcnkgcGFyYW0gb25seVxuICBpID0gaSAmIDM7XG5cbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEsIDMzKSk7XG4gIHZhciBzID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1ZmZlci5zbGljZSgzMykpO1xuXG4gIHJldHVybiB7XG4gICAgY29tcHJlc3NlZDogY29tcHJlc3NlZCxcbiAgICBpOiBpLFxuICAgIHNpZ25hdHVyZTogRUNTaWduYXR1cmUociwgcylcbiAgfTtcbn07XG5cbkVDU2lnbmF0dXJlLmZyb21ERVIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIGFzc2VydC5lcXVhbChidWZmZXIucmVhZFVJbnQ4KDApLCAweDMwLCAnTm90IGEgREVSIHNlcXVlbmNlJyk7XG4gIGFzc2VydC5lcXVhbChidWZmZXIucmVhZFVJbnQ4KDEpLCBidWZmZXIubGVuZ3RoIC0gMiwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJyk7XG4gIGFzc2VydC5lcXVhbChidWZmZXIucmVhZFVJbnQ4KDIpLCAweDAyLCAnRXhwZWN0ZWQgYSBERVIgaW50ZWdlcicpO1xuXG4gIHZhciByTGVuID0gYnVmZmVyLnJlYWRVSW50OCgzKTtcbiAgYXNzZXJ0KHJMZW4gPiAwLCAnUiBsZW5ndGggaXMgemVybycpO1xuXG4gIHZhciBvZmZzZXQgPSA0ICsgckxlbjtcbiAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5yZWFkVUludDgob2Zmc2V0KSwgMHgwMiwgJ0V4cGVjdGVkIGEgREVSIGludGVnZXIgKDIpJyk7XG5cbiAgdmFyIHNMZW4gPSBidWZmZXIucmVhZFVJbnQ4KG9mZnNldCArIDEpO1xuICBhc3NlcnQoc0xlbiA+IDAsICdTIGxlbmd0aCBpcyB6ZXJvJyk7XG5cbiAgdmFyIHJCID0gYnVmZmVyLnNsaWNlKDQsIG9mZnNldCk7XG4gIHZhciBzQiA9IGJ1ZmZlci5zbGljZShvZmZzZXQgKyAyKTtcbiAgb2Zmc2V0ICs9IDIgKyBzTGVuO1xuXG4gIGlmIChyTGVuID4gMSAmJiByQi5yZWFkVUludDgoMCkgPT09IDB4MDApIHtcbiAgICBhc3NlcnQockIucmVhZFVJbnQ4KDEpICYgMHg4MCwgJ1IgdmFsdWUgZXhjZXNzaXZlbHkgcGFkZGVkJyk7XG4gIH1cblxuICBpZiAoc0xlbiA+IDEgJiYgc0IucmVhZFVJbnQ4KDApID09PSAweDAwKSB7XG4gICAgYXNzZXJ0KHNCLnJlYWRVSW50OCgxKSAmIDB4ODAsICdTIHZhbHVlIGV4Y2Vzc2l2ZWx5IHBhZGRlZCcpO1xuICB9XG5cbiAgYXNzZXJ0LmVxdWFsKG9mZnNldCwgYnVmZmVyLmxlbmd0aCwgJ0ludmFsaWQgREVSIGVuY29kaW5nJyk7XG4gIHZhciByID0gQmlnSW50ZWdlci5mcm9tREVSSW50ZWdlcihyQik7XG4gIHZhciBzID0gQmlnSW50ZWdlci5mcm9tREVSSW50ZWdlcihzQik7XG5cbiAgYXNzZXJ0KHIuc2lnbnVtKCkgPj0gMCwgJ1IgdmFsdWUgaXMgbmVnYXRpdmUnKTtcbiAgYXNzZXJ0KHMuc2lnbnVtKCkgPj0gMCwgJ1MgdmFsdWUgaXMgbmVnYXRpdmUnKTtcblxuICByZXR1cm4gRUNTaWduYXR1cmUociwgcyk7XG59O1xuXG4vLyBGSVhNRTogMHgwMCwgMHgwNCwgMHg4MCBhcmUgU0lHSEFTSF8qIGJvdW5kYXJ5IGNvbnN0YW50cywgaW1wb3J0aW5nIFRyYW5zYWN0aW9uIGNhdXNlcyBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbkVDU2lnbmF0dXJlLnBhcnNlU2NyaXB0U2lnbmF0dXJlID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICB2YXIgaGFzaFR5cGUgPSBidWZmZXIucmVhZFVJbnQ4KGJ1ZmZlci5sZW5ndGggLSAxKTtcbiAgdmFyIGhhc2hUeXBlTW9kID0gaGFzaFR5cGUgJiB+MHg4MDtcblxuICBhc3NlcnQoaGFzaFR5cGVNb2QgPiAweDAwICYmIGhhc2hUeXBlTW9kIDwgMHgwNCwgJ0ludmFsaWQgaGFzaFR5cGUnKTtcblxuICByZXR1cm4ge1xuICAgIHNpZ25hdHVyZTogRUNTaWduYXR1cmUuZnJvbURFUihidWZmZXIuc2xpY2UoMCwgLTEpKSxcbiAgICBoYXNoVHlwZTogaGFzaFR5cGVcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRUNTaWduYXR1cmU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBZXMgPSByZXF1aXJlKFwiLi9hZXNcIik7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoXCIuL2tleV9wcml2YXRlXCIpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoXCIuL2tleV9wdWJsaWNcIik7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZShcIi4vc2lnbmF0dXJlXCIpO1xudmFyIGtleV91dGlscyA9IHJlcXVpcmUoXCIuL2tleV91dGlsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQWVzOiBBZXMsIFByaXZhdGVLZXk6IFByaXZhdGVLZXksIFB1YmxpY0tleTogUHVibGljS2V5LFxuICAgIFNpZ25hdHVyZTogU2lnbmF0dXJlLCBrZXlfdXRpbHM6IGtleV91dGlsc1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpLFxuICAgIExvbmcgPSBfcmVxdWlyZS5Mb25nO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciB0eXBlcyA9IHtcbiAgYnl0ZXM6IGZ1bmN0aW9uIGJ5dGVzKCkge1xuICAgIHJldHVybiBbYnl0ZWJ1Zl07XG4gIH0sXG4gIHN0cmluZzogZnVuY3Rpb24gc3RyaW5nKCkge1xuICAgIHJldHVybiBbX3N0cmluZ107XG4gIH0sXG4gIHZlY3RvcjogZnVuY3Rpb24gdmVjdG9yKHR5cGUpIHtcbiAgICB2YXIgc29ydGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgIHJldHVybiBbX3ZlY3RvciwgeyB0eXBlOiB0eXBlLCBzb3J0ZWQ6IHNvcnRlZCB9XTtcbiAgfSxcbiAgb3B0aW9uYWw6IGZ1bmN0aW9uIG9wdGlvbmFsKHR5cGUpIHtcbiAgICByZXR1cm4gW19vcHRpb25hbCwgeyB0eXBlOiB0eXBlIH1dO1xuICB9LFxuICB0aW1lOiBmdW5jdGlvbiB0aW1lKCkge1xuICAgIHJldHVybiBbX3RpbWUyXTtcbiAgfSxcbiAgbWFwOiBmdW5jdGlvbiBtYXAoYW5ub3RhdGlvbikge1xuICAgIHJldHVybiBbX21hcCwgeyBhbm5vdGF0aW9uOiBhbm5vdGF0aW9uIH1dO1xuICB9LFxuICBzdGF0aWNfdmFyaWFudDogZnVuY3Rpb24gc3RhdGljX3ZhcmlhbnQodHlwZXMpIHtcbiAgICByZXR1cm4gW19zdGF0aWNfdmFyaWFudCwgeyB0eXBlczogdHlwZXMgfV07XG4gIH0sXG5cbiAgZml4ZWRfc3RyaW5nMTY6IGZ1bmN0aW9uIGZpeGVkX3N0cmluZzE2KCkge1xuICAgIHJldHVybiBbX3N0cmluZywgeyBtYXhMZW46IDE2IH1dO1xuICB9LFxuICBmaXhlZF9zdHJpbmczMjogZnVuY3Rpb24gZml4ZWRfc3RyaW5nMzIoKSB7XG4gICAgcmV0dXJuIFtfc3RyaW5nLCB7IG1heExlbjogMzIgfV07XG4gIH0sXG5cbiAgZml4ZWRfYnl0ZXMxNjogZnVuY3Rpb24gZml4ZWRfYnl0ZXMxNigpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiAxNiB9XTtcbiAgfSxcbiAgZml4ZWRfYnl0ZXMyMDogZnVuY3Rpb24gZml4ZWRfYnl0ZXMyMCgpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiAyMCB9XTtcbiAgfSxcbiAgZml4ZWRfYnl0ZXMyODogZnVuY3Rpb24gZml4ZWRfYnl0ZXMyOCgpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiAyOCB9XTtcbiAgfSxcbiAgZml4ZWRfYnl0ZXMzMjogZnVuY3Rpb24gZml4ZWRfYnl0ZXMzMigpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiAzMiB9XTtcbiAgfSxcbiAgZml4ZWRfYnl0ZXMzMzogZnVuY3Rpb24gZml4ZWRfYnl0ZXMzMygpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiAzMyB9XTtcbiAgfSxcbiAgZml4ZWRfYnl0ZXM2NDogZnVuY3Rpb24gZml4ZWRfYnl0ZXM2NCgpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiA2NCB9XTtcbiAgfSxcbiAgZml4ZWRfYnl0ZXM2NTogZnVuY3Rpb24gZml4ZWRfYnl0ZXM2NSgpIHtcbiAgICByZXR1cm4gW2J5dGVidWYsIHsgbGVuOiA2NSB9XTtcbiAgfSxcblxuICB1aW50ODogZnVuY3Rpb24gdWludDgoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgYml0czogOCB9XTtcbiAgfSxcbiAgdWludDE2OiBmdW5jdGlvbiB1aW50MTYoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgYml0czogMTYgfV07XG4gIH0sXG4gIHVpbnQzMjogZnVuY3Rpb24gdWludDMyKCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IGJpdHM6IDMyIH1dO1xuICB9LFxuICB1aW50NjQ6IGZ1bmN0aW9uIHVpbnQ2NCgpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBiaXRzOiA2NCB9XTtcbiAgfSxcbiAgdWludDEyODogZnVuY3Rpb24gdWludDEyOCgpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IGJpdHM6IDEyOCB9XTtcbiAgfSxcbiAgdWludDIyNDogZnVuY3Rpb24gdWludDIyNCgpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IGJpdHM6IDIyNCB9XTtcbiAgfSxcbiAgdWludDI1NjogZnVuY3Rpb24gdWludDI1NigpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IGJpdHM6IDI1NiB9XTtcbiAgfSxcbiAgdWludDUxMjogZnVuY3Rpb24gdWludDUxMigpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IGJpdHM6IDUxMiB9XTtcbiAgfSxcblxuICB2YXJ1aW50MzI6IGZ1bmN0aW9uIHZhcnVpbnQzMigpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBiaXRzOiAzMiwgdmFyaWFibGU6IHRydWUgfV07XG4gIH0sXG5cbiAgaW50ODogZnVuY3Rpb24gaW50OCgpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDggfV07XG4gIH0sXG4gIGludDE2OiBmdW5jdGlvbiBpbnQxNigpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDE2IH1dO1xuICB9LFxuICBpbnQzMjogZnVuY3Rpb24gaW50MzIoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiAzMiB9XTtcbiAgfSxcbiAgaW50NjQ6IGZ1bmN0aW9uIGludDY0KCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogNjQgfV07XG4gIH0sXG4gIGludDEyODogZnVuY3Rpb24gaW50MTI4KCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiAxMjggfV07XG4gIH0sXG4gIGludDIyNDogZnVuY3Rpb24gaW50MjI0KCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiAyMjQgfV07XG4gIH0sXG4gIGludDI1NjogZnVuY3Rpb24gaW50MjU2KCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiAyNTYgfV07XG4gIH0sXG4gIGludDUxMjogZnVuY3Rpb24gaW50NTEyKCkge1xuICAgIHJldHVybiBbYm5idWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiA1MTIgfV07XG4gIH0sXG5cbiAgdmFyaW50MzI6IGZ1bmN0aW9uIHZhcmludDMyKCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogMzIsIHZhcmlhYmxlOiB0cnVlIH1dO1xuICB9LFxuXG4gIGZsb2F0MzI6IGZ1bmN0aW9uIGZsb2F0MzIoKSB7XG4gICAgcmV0dXJuIFtmbG9hdCwgeyBiaXRzOiAzMiB9XTtcbiAgfSxcbiAgZmxvYXQ2NDogZnVuY3Rpb24gZmxvYXQ2NCgpIHtcbiAgICByZXR1cm4gW2Zsb2F0LCB7IGJpdHM6IDY0IH1dO1xuICB9XG5cbiAgLypcbiAgICBAYXJnIHtTZXJpYWxpemVyQ29uZmlnfSBjb25maWdcbiAgICBAcmV0dXJuIHtvYmplY3R9IHtbdHlwZU5hbWVdOiBmdW5jdGlvbihhcmdzKX1cbiAgKi9cbn07bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oeyBkZWZhdWx0czogZmFsc2UsIGRlYnVnOiBmYWxzZSwgY3VzdG9tVHlwZXM6IHt9IH0sIGNvbmZpZyk7XG5cbiAgdmFyIGFsbFR5cGVzID0gT2JqZWN0LmFzc2lnbih7fSwgdHlwZXMsIGNvbmZpZy5jdXN0b21UeXBlcyk7XG5cbiAgdmFyIGNyZWF0ZVR5cGVSZWR1Y2VyID0gZnVuY3Rpb24gY3JlYXRlVHlwZVJlZHVjZXIoYmFzZVR5cGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjdXN0b21UeXBlcywgbmFtZSkge1xuICAgICAgY3VzdG9tVHlwZXNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0eXBlID0gY3JlYXRlVHlwZShuYW1lLCBjb25maWcsIGFyZ3MsIGJhc2VUeXBlcywgYWxsVHlwZXMsIGN1c3RvbVR5cGVzKTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGN1c3RvbVR5cGVzO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGJhc2VUeXBlcyA9IE9iamVjdC5rZXlzKHR5cGVzKS5yZWR1Y2UoY3JlYXRlVHlwZVJlZHVjZXIoKSwge30pO1xuXG4gIHZhciBjdXN0b21UeXBlcyA9IE9iamVjdC5rZXlzKGNvbmZpZy5jdXN0b21UeXBlcyB8fCB7fSkucmVkdWNlKGNyZWF0ZVR5cGVSZWR1Y2VyKGJhc2VUeXBlcyksIHt9KTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcywgeyBjb25maWc6IGNvbmZpZyB9KTtcbn07XG5cbi8qKlxuICAgIEBhcmdzIHtzdHJpbmd9IHR5cGVOYW1lIC0gbWF0Y2hlcyB0eXBlc1tdXG4gICAgQGFyZ3Mge3N0cmluZ30gY29uZmlnIC0gQWRkaXRpb25hbCBhcmd1bWVudHMgZm9yIHR5cGVzXG4qL1xuZnVuY3Rpb24gY3JlYXRlVHlwZSh0eXBlTmFtZSwgY29uZmlnLCBhcmdzLCBiYXNlVHlwZXMsIGFsbFR5cGVzLCBjdXN0b21UeXBlcykge1xuICB2YXIgVHlwZSA9IGJhc2VUeXBlcyA/IGFsbFR5cGVzW3R5cGVOYW1lXSA6IHR5cGVzW3R5cGVOYW1lXTtcblxuICB2YXIgX1R5cGUgPSBUeXBlLmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKSxcbiAgICAgIF9UeXBlMiA9IF9zbGljZWRUb0FycmF5KF9UeXBlLCAyKSxcbiAgICAgIGZuID0gX1R5cGUyWzBdLFxuICAgICAgX1R5cGUyJCA9IF9UeXBlMlsxXSxcbiAgICAgIHYgPSBfVHlwZTIkID09PSB1bmRlZmluZWQgPyB7fSA6IF9UeXBlMiQ7XG5cbiAgdmFyIHZhbGlkYXRpb24gPSBPYmplY3QuYXNzaWduKHYsIGNvbmZpZyk7XG4gIHZhbGlkYXRpb24udHlwZU5hbWUgPSB0eXBlTmFtZTtcbiAgdmFyIHR5cGUgPSBmbih2YWxpZGF0aW9uLCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzKTtcbiAgdHlwZS50eXBlTmFtZSA9IHR5cGVOYW1lO1xuICByZXR1cm4gdHlwZTtcbn1cblxudmFyIF9tYXAgPSBmdW5jdGlvbiBfbWFwKHZhbGlkYXRpb24pIHtcbiAgdmFyIF92YWxpZGF0aW9uJGFubm90YXRpbyA9IF9zbGljZWRUb0FycmF5KHZhbGlkYXRpb24uYW5ub3RhdGlvbiwgMiksXG4gICAgICB0eXBlMSA9IF92YWxpZGF0aW9uJGFubm90YXRpb1swXSxcbiAgICAgIHR5cGUyID0gX3ZhbGlkYXRpb24kYW5ub3RhdGlvWzFdO1xuXG4gIGlmICghaXNTZXJpYWxpemVyKHR5cGUxKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21hcDx0eXBlMSwgPiB1bmtub3duJyk7XG4gIH1cbiAgaWYgKCFpc1NlcmlhbGl6ZXIodHlwZTIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFwPCwgdHlwZTI+IHVua25vd24nKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBzaXplID0gYi5yZWFkVmFyaW50MzIoKTtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHJlc3VsdFt0eXBlMS5mcm9tQnl0ZUJ1ZmZlcihiKV0gPSB0eXBlMi5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcweCcgKyBzaXplLnRvU3RyaW5nKDE2KSwgJyhtYXAuZnJvbUJ5dGVCdWZmZXIgbGVuZ3RoKScsIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICBiLndyaXRlVmFyaW50MzIoa2V5cy5sZW5ndGgpO1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJzB4JyArIGtleXMubGVuZ3RoLnRvU3RyaW5nKDE2KSwgJyhtYXAuYXBwZW5kQnl0ZUJ1ZmZlciBsZW5ndGgpJywga2V5cyk7XG4gICAgICB9XG4gICAgICAvLyBpZihzb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgIC8vICAgdmFsdWUgPSBzb3J0S2V5cyh0eXBlMSwgT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpKVxuICAgICAgLy8gfVxuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGtleXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIG8gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIHZhciB2YWx1ZTIgPSB2YWx1ZVtvXTtcbiAgICAgICAgICB0eXBlMS5hcHBlbmRCeXRlQnVmZmVyKGIsIG8pO1xuICAgICAgICAgIHR5cGUyLmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUyKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAvLyBpZihzb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgIC8vICAgdmFsdWUgPSBzb3J0S2V5cyh0eXBlMSwgT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpKVxuICAgICAgLy8gfVxuICAgICAgZm9yICh2YXIgbyBpbiB2YWx1ZSkge1xuICAgICAgICByZXN1bHRbdHlwZTEuZnJvbU9iamVjdChvKV0gPSB0eXBlMi5mcm9tT2JqZWN0KHZhbHVlW29dKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgdHlwZTEudG9PYmplY3QobnVsbCksIHR5cGUyLnRvT2JqZWN0KG51bGwpKTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIC8vIGlmKHNvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gICB2YWx1ZSA9IHNvcnRLZXkodHlwZTEsIE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKSlcbiAgICAgIC8vIH1cbiAgICAgIGZvciAodmFyIG8gaW4gdmFsdWUpIHtcbiAgICAgICAgcmVzdWx0W3R5cGUxLnRvT2JqZWN0KG8pXSA9IHR5cGUyLnRvT2JqZWN0KHZhbHVlW29dKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufTtcblxudmFyIF9zdGF0aWNfdmFyaWFudCA9IGZ1bmN0aW9uIF9zdGF0aWNfdmFyaWFudCh2YWxpZGF0aW9uKSB7XG4gIHZhciB0eXBlcyA9IHZhbGlkYXRpb24udHlwZXM7XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIHR5cGVQb3NpdGlvbiA9IGIucmVhZFZhcmludDMyKCk7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVzW3R5cGVQb3NpdGlvbl07XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdzdGF0aWNfdmFyaWFudCBpZCAnICsgdHlwZVBvc2l0aW9uICsgJyAoMHgnICsgdHlwZVBvc2l0aW9uLnRvU3RyaW5nKDE2KSArICcpJyk7XG4gICAgICB9XG4gICAgICBhc3NlcnQodHlwZSwgJ3N0YXRpY192YXJpYW50IGludmFsaWQgdHlwZSBwb3NpdGlvbiAnICsgdHlwZVBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBbdHlwZVBvc2l0aW9uLCB0eXBlLmZyb21CeXRlQnVmZmVyKGIpXTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgb2JqZWN0KSB7XG4gICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5sZW5ndGggPT09IDIsICdSZXF1aXJlZCB0dXBsZScpO1xuICAgICAgdmFyIHR5cGVQb3NpdGlvbiA9IG9iamVjdFswXTtcbiAgICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZVBvc2l0aW9uXTtcbiAgICAgIGFzc2VydCh0eXBlLCAndHlwZSAnICsgdHlwZVBvc2l0aW9uKTtcbiAgICAgIGIud3JpdGVWYXJpbnQzMih0eXBlUG9zaXRpb24pO1xuICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIG9iamVjdFsxXSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KG9iamVjdCkge1xuICAgICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkob2JqZWN0KSAmJiBvYmplY3QubGVuZ3RoID09PSAyLCAnUmVxdWlyZWQgdHVwbGUnKTtcbiAgICAgIHZhciB0eXBlUG9zaXRpb24gPSBvYmplY3RbMF07XG4gICAgICB2YXIgdHlwZSA9IHR5cGVzW3R5cGVQb3NpdGlvbl07XG4gICAgICBhc3NlcnQodHlwZSwgJ3R5cGUgJyArIHR5cGVQb3NpdGlvbik7XG4gICAgICByZXR1cm4gW3R5cGVQb3NpdGlvbiwgdHlwZS5mcm9tT2JqZWN0KG9iamVjdFsxXSldO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KG9iamVjdCkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgb2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFswLCB0eXBlc1swXS50b09iamVjdChudWxsLCBkZWJ1ZyldO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkob2JqZWN0KSAmJiBvYmplY3QubGVuZ3RoID09PSAyLCAnUmVxdWlyZWQgdHVwbGUnKTtcbiAgICAgIHZhciB0eXBlUG9zaXRpb24gPSBvYmplY3RbMF07XG4gICAgICB2YXIgdHlwZSA9IHR5cGVzW3R5cGVQb3NpdGlvbl07XG4gICAgICBhc3NlcnQodHlwZSwgJ3R5cGUgJyArIHR5cGVQb3NpdGlvbik7XG4gICAgICByZXR1cm4gW3R5cGVQb3NpdGlvbiwgdHlwZS50b09iamVjdChvYmplY3RbMV0pXTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgX3ZlY3RvciA9IGZ1bmN0aW9uIF92ZWN0b3IodmFsaWRhdGlvbikge1xuICB2YXIgdHlwZSA9IHZhbGlkYXRpb24udHlwZSxcbiAgICAgIHNvcnRlZCA9IHZhbGlkYXRpb24uc29ydGVkO1xuXG4gIGlmICghaXNTZXJpYWxpemVyKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmVjdG9yIHR5cGUgc2hvdWxkIGJlIGEgc2VyaWFsaXplcicpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIHNpemUgPSBiLnJlYWRWYXJpbnQzMigpO1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Zyb21CeXRlQnVmZmVyIHZlY3RvciBsZW5ndGgnLCBzaXplLCAnKDB4JyArIHNpemUudG9TdHJpbmcoMTYpICsgJyknKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHR5cGUuZnJvbUJ5dGVCdWZmZXIoYikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICBiLndyaXRlVmFyaW50MzIodmFsdWUubGVuZ3RoKTtcbiAgICAgIGlmIChzb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgdmFsdWUgPSBzb3J0KHR5cGUsIE9iamVjdC5hc3NpZ24oW10sIHZhbHVlKSk7XG4gICAgICB9XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygnMHgnICsgdmFsdWUubGVuZ3RoLnRvU3RyaW5nKDE2KSwgJyh2ZWN0b3IuYXBwZW5kQnl0ZUJ1ZmZlciBsZW5ndGgpJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBvID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIG8pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBvID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgcmVzdWx0LnB1c2godHlwZS5mcm9tT2JqZWN0KG8pKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc29ydGVkID09PSB0cnVlKSB7XG4gICAgICAgIHJlc3VsdCA9IHNvcnQodHlwZSwgT2JqZWN0LmFzc2lnbihbXSwgcmVzdWx0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbdHlwZS50b09iamVjdCh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIGlmIChzb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgdmFsdWUgPSBzb3J0KHR5cGUsIE9iamVjdC5hc3NpZ24oW10sIHZhbHVlKSk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIG8gPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICByZXN1bHQucHVzaCh0eXBlLnRvT2JqZWN0KG8pKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfb3B0aW9uYWwgPSBmdW5jdGlvbiBfb3B0aW9uYWwodmFsaWRhdGlvbikge1xuICB2YXIgdHlwZSA9IHZhbGlkYXRpb24udHlwZTtcblxuICBpZiAoIWlzU2VyaWFsaXplcih0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbmFsIHBhcmFtZXRlciBzaG91bGQgYmUgYSBzZXJpYWxpemVyJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICBpZiAoIShiLnJlYWRVaW50OCgpID09PSAxKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgYi53cml0ZVVpbnQ4KDEpO1xuICAgICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi53cml0ZVVpbnQ4KDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZS5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgLy8gdG9PYmplY3QgaXMgb25seSBudWxsIHNhdmUgaWYgZGVmYXVsdHMgaXMgdHJ1ZVxuICAgICAgdmFyIHJlc3VsdFZhbHVlID0gdm9pZCAwO1xuICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXZhbGlkYXRpb24uZGVmYXVsdHMpIHtcbiAgICAgICAgcmVzdWx0VmFsdWUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0VmFsdWUgPSB0eXBlLnRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRWYWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaW50YnVmVHlwZSA9IGZ1bmN0aW9uIGludGJ1ZlR5cGUoX3JlZjIpIHtcbiAgdmFyIF9yZWYyJHNpZ25lZCA9IF9yZWYyLnNpZ25lZCxcbiAgICAgIHNpZ25lZCA9IF9yZWYyJHNpZ25lZCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmMiRzaWduZWQsXG4gICAgICBiaXRzID0gX3JlZjIuYml0cyxcbiAgICAgIHZhcmlhYmxlID0gX3JlZjIudmFyaWFibGU7XG4gIHJldHVybiB2YXJpYWJsZSA/ICdWYXJpbnQnICsgYml0cyArIChzaWduZWQgPyAnWmlnWmFnJyA6ICcnKSA6ICcnICsgKHNpZ25lZCA/ICdJbnQnIDogJ1VpbnQnKSArIGJpdHM7XG59O1xuXG52YXIgaW50YnVmID0gZnVuY3Rpb24gaW50YnVmKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIHZhbHVlID0gYlsncmVhZCcgKyBpbnRidWZUeXBlKHZhbGlkYXRpb24pXSgpO1xuICAgICAgcmV0dXJuIExvbmcuaXNMb25nKHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIC8vIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKVxuICAgICAgLy8gdmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKSA6IHZhbHVlXG4gICAgICBiWyd3cml0ZScgKyBpbnRidWZUeXBlKHZhbGlkYXRpb24pXSh2YWx1ZSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmJpdHMgPiA1MyAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgLy8gICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb24uYml0cyA+IDUzID8gJzAnIDogMDtcbiAgICAgIH1cblxuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgLy8gaWYodmFsaWRhdGlvbi5iaXRzID4gNTMgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgIC8vICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcblxuICAgICAgcmV0dXJuIExvbmcuaXNMb25nKHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG4vKiogQmlnIE51bWJlcnMgKD4gNjQgYml0cykgKi9cbnZhciBibmJ1ZiA9IGZ1bmN0aW9uIGJuYnVmKHZhbGlkYXRpb24pIHtcbiAgdmFyIF92YWxpZGF0aW9uJHNpZ25lZCA9IHZhbGlkYXRpb24uc2lnbmVkLFxuICAgICAgc2lnbmVkID0gX3ZhbGlkYXRpb24kc2lnbmVkID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF92YWxpZGF0aW9uJHNpZ25lZCxcbiAgICAgIGJpdHMgPSB2YWxpZGF0aW9uLmJpdHM7XG5cbiAgdmFyIHNpemUgPSBiaXRzIC8gODtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGJjb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIHNpemUpO1xuICAgICAgYi5za2lwKHNpemUpO1xuXG4gICAgICB2YXIgYm4gPSBuZXcgQk4oYmNvcHkudG9IZXgoKSwgJ2hleCcpO1xuICAgICAgdmFyIGJ1ZiA9IGJuLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2xlJywgc2l6ZSk7IC8vIGNvbnZlcnQgdG8gbGl0dGxlIGVuZGlhblxuICAgICAgYm4gPSBuZXcgQk4oYnVmLnRvU3RyaW5nKCdoZXgnKSwgJ2hleCcpO1xuICAgICAgaWYgKHNpZ25lZCkge1xuICAgICAgICBibiA9IGJuLmZyb21Ud29zKGJpdHMpO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYm4udG9TdHJpbmcoKTtcbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiBiaXRzID4gNTMgPyB2YWx1ZSA6IGJuLnRvTnVtYmVyKCk7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICB2YXIgYm4gPSBuZXcgQk4odmFsdWUpO1xuICAgICAgaWYgKHNpZ25lZCkge1xuICAgICAgICBibiA9IGJuLnRvVHdvcyhiaXRzKTtcbiAgICAgIH1cbiAgICAgIHZhciBidWYgPSBibi50b0FycmF5TGlrZShCdWZmZXIsICdsZScsIHNpemUpO1xuICAgICAgYi5hcHBlbmQoYnVmLnRvU3RyaW5nKCdiaW5hcnknKSwgJ2JpbmFyeScpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uLmJpdHMgPiA1MyA/ICcwJyA6IDA7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGZsb2F0UG9pbnQgPSByZXF1aXJlKCdpZWVlLWZsb2F0Jyk7XG5cbnZhciBmbG9hdCA9IGZ1bmN0aW9uIGZsb2F0KHZhbGlkYXRpb24pIHtcbiAgdmFyIGJpdHMgPSB2YWxpZGF0aW9uLmJpdHM7XG5cbiAgLy8gYXNzZXJ0KGJpdHMgPT09IDMyIHx8IGJpdHMgPT09IDY0LCAndW5zdXBwb3J0ZWQgZmxvYXQgYml0IHNpemU6ICcgKyBiaXRzKVxuXG4gIHZhciBzaXplTmFtZSA9IGJpdHMgPT09IDMyID8gJ0Zsb2F0JyA6IGJpdHMgPT09IDY0ID8gJ0RvdWJsZScgOiBudWxsO1xuICBhc3NlcnQoc2l6ZU5hbWUsICd1bnN1cHBvcnRlZCBmbG9hdCBiaXQgc2l6ZTogJyArIGJpdHMpO1xuICB2YXIgc2l6ZSA9IGJpdHMgLyA4O1xuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBiY29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyBzaXplKTtcbiAgICAgIGIuc2tpcChzaXplKTtcbiAgICAgIHZhciBmYiA9IEJ1ZmZlci5mcm9tKGJjb3B5LnRvQmluYXJ5KCksICdiaW5hcnknKTtcbiAgICAgIHJldHVybiBmbG9hdFBvaW50WydyZWFkJyArIHNpemVOYW1lICsgJ0xFJ10oZmIpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgZmxvYXRQb2ludFsnd3JpdGUnICsgc2l6ZU5hbWUgKyAnTEUnXShvdXRwdXQsIHZhbHVlKTtcbiAgICAgIGIuYXBwZW5kKG91dHB1dCk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgYnl0ZWJ1ZiA9IGZ1bmN0aW9uIGJ5dGVidWYodmFsaWRhdGlvbikge1xuICB2YXIgX2J5dGVidWYgPSB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBsZW4gPSB2YWxpZGF0aW9uLmxlbjtcblxuICAgICAgdmFyIGJDb3B5ID0gdm9pZCAwO1xuICAgICAgaWYgKGxlbiA9PSBudWxsKSB7XG4gICAgICAgIHZhciBsZW5QcmVmaXggPSBiLnJlYWRWYXJpbnQzMigpO1xuICAgICAgICBiQ29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyBsZW5QcmVmaXgpO1xuICAgICAgICBiLnNraXAobGVuUHJlZml4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJDb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIGxlbik7XG4gICAgICAgIGIuc2tpcChsZW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJDb3B5LnRvQmluYXJ5KCksICdiaW5hcnknKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIC8vIHZhbHVlID0gX2J5dGVidWYuZnJvbU9iamVjdCh2YWx1ZSlcblxuICAgICAgdmFyIGxlbiA9IHZhbGlkYXRpb24ubGVuO1xuXG4gICAgICBpZiAobGVuID09IG51bGwpIHtcbiAgICAgICAgYi53cml0ZVZhcmludDMyKHZhbHVlLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBiLmFwcGVuZCh2YWx1ZS50b1N0cmluZygnYmluYXJ5JyksICdiaW5hcnknKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlID0gQnVmZmVyLmZyb20odmFsdWUsICdoZXgnKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YWx1ZSA9IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHZhbHVlID0gQnVmZmVyLmZyb20odmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciBkZWZhdWx0cyA9IHZhbGlkYXRpb24uZGVmYXVsdHMsXG4gICAgICAgICAgbGVuID0gdmFsaWRhdGlvbi5sZW47XG5cbiAgICAgIGlmIChkZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBBcnJheShsZW4gPyBsZW4gKyAxIDogMSkuam9pbignMDAnKTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygnaGV4Jyk7XG4gICAgfSxcbiAgICBjb21wYXJlOiBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgIHJldHVybiBCdWZmZXIuY29tcGFyZShhLCBiKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBfYnl0ZWJ1Zjtcbn07XG5cbnZhciBfc3RyaW5nID0gZnVuY3Rpb24gX3N0cmluZyh2YWxpZGF0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHJldHVybiBiLnJlYWRWU3RyaW5nKCk7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICBiLndyaXRlVlN0cmluZyh2YWx1ZS50b1N0cmluZygpKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxudmFyIF90aW1lMiA9IGZ1bmN0aW9uIF90aW1lMih2YWxpZGF0aW9uKSB7XG4gIHZhciBfdGltZSA9IHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgcmV0dXJuIGIucmVhZFVpbnQzMigpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgLy8gaWYodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKVxuICAgICAgLy8gICAgIHZhbHVlID0gX3RpbWUuZnJvbU9iamVjdCh2YWx1ZSlcblxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgYi53cml0ZVVpbnQzMih2YWx1ZSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmdldFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsdWUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBkYXRlIHR5cGU6ICcgKyB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENocm9tZSBhc3N1bWVzIFp1bHUgd2hlbiBtaXNzaW5nLCBGaXJlZm94IGRvZXMgbm90XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhL1okLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSArPSAnWic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLmZsb29yKG5ldyBEYXRlKHZhbHVlKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoMCkudG9JU09TdHJpbmcoKS5zcGxpdCgnLicpWzBdO1xuICAgICAgfVxuXG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG5cbiAgICAgIC8vIGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gICAgIGlmKCEvWiQvLnRlc3QodmFsdWUpKVxuICAgICAgLy8gICAgICAgICB2YWx1ZSArPSBcIlpcIlxuICAgICAgLy9cbiAgICAgIC8vICAgICByZXR1cm4gdmFsdWVcbiAgICAgIC8vIH1cblxuICAgICAgLy8gaWYodmFsdWUuZ2V0VGltZSlcbiAgICAgIC8vICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKS5zcGxpdCgnLicpWzBdICsgJ1onXG5cbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCBzcHJlYWQodmFsaWRhdGlvbiwgeyBiaXRzOiAzMiB9KSk7XG4gICAgICB2YXIgaW50ID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGludCAqIDEwMDApLnRvSVNPU3RyaW5nKCkuc3BsaXQoJy4nKVswXTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBfdGltZTtcbn07XG5cbnZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKSB7XG4gIGlmIChpc0VtcHR5KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgJyArIHZhbGlkYXRpb24udHlwZU5hbWUpO1xuICB9XG5cbiAgaWYgKHZhbGlkYXRpb24ubGVuICE9IG51bGwpIHtcbiAgICBpZiAodmFsdWUubGVuZ3RoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbGVuIHZhbGlkYXRpb24gcmVxdXJpZXMgYSBcImxlbmd0aFwiIHByb3BlcnR5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IHZhbGlkYXRpb24ubGVuO1xuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvbi50eXBlTmFtZSArICcgbGVuZ3RoICcgKyB2YWx1ZS5sZW5ndGggKyAnIGRvZXMgbm90IGVxdWFsICcgKyBsZW4pO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YWxpZGF0aW9uLm1heExlbiAhPSBudWxsKSB7XG4gICAgdmFyIG1heExlbiA9IHZhbGlkYXRpb24ubWF4TGVuO1xuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21heExlbiB2YWxpZGF0aW9uIHJlcXVyaWVzIGEgXCJsZW5ndGhcIiBwcm9wZXJ0eScpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiBtYXhMZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih2YWxpZGF0aW9uLnR5cGVOYW1lICsgJyBsZW5ndGggJyArIHZhbHVlLmxlbmd0aCArICcgZXhjZWVkcyBtYXhMZW4gJyArIG1heExlbik7XG4gICAgfVxuICB9XG59O1xuXG52YXIgWkVSTyA9IG5ldyBCTigpO1xudmFyIE9ORSA9IG5ldyBCTignMScpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbikge1xuICBpZiAoaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyB2YWxpZGF0aW9uLnR5cGVOYW1lKTtcbiAgfVxuICB2YXIgX3ZhbGlkYXRpb24kc2lnbmVkMiA9IHZhbGlkYXRpb24uc2lnbmVkLFxuICAgICAgc2lnbmVkID0gX3ZhbGlkYXRpb24kc2lnbmVkMiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfdmFsaWRhdGlvbiRzaWduZWQyLFxuICAgICAgX3ZhbGlkYXRpb24kYml0cyA9IHZhbGlkYXRpb24uYml0cyxcbiAgICAgIGJpdHMgPSBfdmFsaWRhdGlvbiRiaXRzID09PSB1bmRlZmluZWQgPyA1NCA6IF92YWxpZGF0aW9uJGJpdHM7XG5cblxuICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSkudHJpbSgpO1xuICBpZiAoc2lnbmVkICYmICEvXi0/WzAtOV0rJC8udGVzdCh2YWx1ZSkgfHwgIXNpZ25lZCAmJiAhL15bMC05XSskLy50ZXN0KHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTnVtYmVyIGZvcm1hdCAnICsgdmFsaWRhdGlvbi50eXBlTmFtZSArICcgJyArIHZhbHVlKTtcbiAgfVxuXG4gIHZhciBtYXggPSBzaWduZWQgPyBtYXhTaWduZWQoYml0cykgOiBtYXhVbnNpZ25lZChiaXRzKTtcbiAgdmFyIG1pbiA9IHNpZ25lZCA/IG1pblNpZ25lZChiaXRzKSA6IFpFUk87XG4gIHZhciBpID0gbmV3IEJOKHZhbHVlKTtcblxuICAvLyBjb25zb2xlLmxvZygnaS50b1N0cmluZygpLCBtaW4udG9TdHJpbmcoKScsIGkudG9TdHJpbmcoKSwgbWluLnRvU3RyaW5nKCkpXG4gIGlmIChpLmNtcChtaW4pIDwgMCB8fCBpLmNtcChtYXgpID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignT3ZlcmZsb3cgJyArIHZhbGlkYXRpb24udHlwZU5hbWUgKyAnICcgKyB2YWx1ZSArICcsICcgKyAoJ21heCAnICsgbWF4LnRvU3RyaW5nKCkgKyAnLCBtaW4gJyArIG1pbi50b1N0cmluZygpICsgJywgc2lnbmVkICcgKyBzaWduZWQgKyAnLCBiaXRzICcgKyBiaXRzKSk7XG4gIH1cbn1cblxudmFyIGlzU2VyaWFsaXplciA9IGZ1bmN0aW9uIGlzU2VyaWFsaXplcih0eXBlKSB7XG4gIHJldHVybiAodHlwZW9mIHR5cGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHR5cGUpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR5cGUuZnJvbUJ5dGVCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5mcm9tT2JqZWN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLnRvT2JqZWN0ID09PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIHRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUsIGVuY29kaW5nKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZyA/IHZhbHVlLnRvU3RyaW5nKGVuY29kaW5nKSA6IHZhbHVlO1xufTtcblxudmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHR5cGUsIHZhbHVlcykge1xuICByZXR1cm4gdHlwZS5jb21wYXJlID8gdmFsdWVzLnNvcnQodHlwZS5jb21wYXJlKSA6IC8vIGN1c3RvbSBjb21wYXJlXG4gIHZhbHVlcy5zb3J0KCk7XG59O1xuXG52YXIgc3ByZWFkID0gZnVuY3Rpb24gc3ByZWFkKCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbi5hcHBseShPYmplY3QsIGFyZ3VtZW50cyk7XG59O1xudmFyIGlzRW1wdHkgPSBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsO1xufTtcblxuLy8gMSA8PCBOID09PSBNYXRoLnBvdygyLCBOKVxudmFyIG1heFVuc2lnbmVkID0gZnVuY3Rpb24gbWF4VW5zaWduZWQoYml0cykge1xuICByZXR1cm4gbmV3IEJOKDEpLmlzaGxuKGJpdHMpLmlzdWIoT05FKTtcbn07XG52YXIgbWF4U2lnbmVkID0gZnVuY3Rpb24gbWF4U2lnbmVkKGJpdHMpIHtcbiAgcmV0dXJuIG5ldyBCTigxKS5pc2hsbihiaXRzIC0gMSkuaXN1YihPTkUpO1xufTtcbnZhciBtaW5TaWduZWQgPSBmdW5jdGlvbiBtaW5TaWduZWQoYml0cykge1xuICByZXR1cm4gbmV3IEJOKDEpLmlzaGxuKGJpdHMgLSAxKS5pbmVnKCk7XG59OyIsIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4IChzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciA8PD0gNDtcblxuICAgICAgLy8gJ2EnIC0gJ2YnXG4gICAgICBpZiAoYyA+PSA0OSAmJiBjIDw9IDU0KSB7XG4gICAgICAgIHIgfD0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQScgLSAnRidcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7XG4gICAgICAgIHIgfD0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgfD0gYyAmIDB4ZjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0KSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgLy8gU2NhbiAyNC1iaXQgY2h1bmtzIGFuZCBhZGQgdGhlbSB0byB0aGUgbnVtYmVyXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDYsIGogPSAwOyBpID49IHN0YXJ0OyBpIC09IDYpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIGksIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIC8vIE5PVEU6IGAweDNmZmZmZmAgaXMgaW50ZW50aW9uYWwgaGVyZSwgMjZiaXRzIG1heCBzaGlmdCArIDI0Yml0IGhleCBsaW1iXG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgICBvZmYgKz0gMjQ7XG4gICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSArIDYgIT09IHN0YXJ0KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgIH1cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgciArPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciArPSBjO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nO1xuICB9O1xuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZG4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTtcbiAgICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1tncm91cFNpemUgLSByLmxlbmd0aF0gKyByICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHIgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGFzc2VydChmYWxzZSwgJ0Jhc2Ugc2hvdWxkIGJlIGJldHdlZW4gMiBhbmQgMzYnKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlciAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMud29yZHNbMF07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXQgKz0gdGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHtcbiAgICAgIC8vIE5PVEU6IGF0IHRoaXMgc3RhZ2UgaXQgaXMga25vd24gdGhhdCB0aGUgdG9wIGJpdCBpcyBzZXRcbiAgICAgIHJldCArPSAweDEwMDAwMDAwMDAwMDAwICsgKHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiAyKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLm5lZ2F0aXZlICE9PSAwKSA/IC1yZXQgOiByZXQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgIGFzc2VydCh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyk7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UgKEFycmF5VHlwZSwgZW5kaWFuLCBsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gICAgdmFyIGxpdHRsZUVuZGlhbiA9IGVuZGlhbiA9PT0gJ2xlJztcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5VHlwZShyZXFMZW5ndGgpO1xuXG4gICAgdmFyIGIsIGk7XG4gICAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKCFsaXR0bGVFbmRpYW4pIHtcbiAgICAgIC8vIEFzc3VtZSBiaWctZW5kaWFuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVxTGVuZ3RoIC0gYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tyZXFMZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbaV0gPSBiO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IHJlcUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBpZiAoTWF0aC5jbHozMikge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgdmFyIHQgPSB3O1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7XG4gICAgICAgIHIgKz0gMTM7XG4gICAgICAgIHQgPj4+PSAxMztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4NDApIHtcbiAgICAgICAgciArPSA3O1xuICAgICAgICB0ID4+Pj0gNztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgICByICs9IDQ7XG4gICAgICAgIHQgPj4+PSA0O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHgwMikge1xuICAgICAgICByICs9IDI7XG4gICAgICAgIHQgPj4+PSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIgKyB0O1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3plcm9CaXRzID0gZnVuY3Rpb24gX3plcm9CaXRzICh3KSB7XG4gICAgLy8gU2hvcnQtY3V0XG4gICAgaWYgKHcgPT09IDApIHJldHVybiAyNjtcblxuICAgIHZhciB0ID0gdztcbiAgICB2YXIgciA9IDA7XG4gICAgaWYgKCh0ICYgMHgxZmZmKSA9PT0gMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNztcbiAgICAgIHQgPj4+PSA3O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweGYpID09PSAwKSB7XG4gICAgICByICs9IDQ7XG4gICAgICB0ID4+Pj0gNDtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgzKSA9PT0gMCkge1xuICAgICAgciArPSAyO1xuICAgICAgdCA+Pj49IDI7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MSkgPT09IDApIHtcbiAgICAgIHIrKztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiB1c2VkIGJpdHMgaW4gYSBCTlxuICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoICgpIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpICogMjYgKyBoaTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b0JpdEFycmF5IChudW0pIHtcbiAgICB2YXIgdyA9IG5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO1xuXG4gICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7XG4gICAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgICB3W2JpdF0gPSAobnVtLndvcmRzW29mZl0gJiAoMSA8PCB3Yml0KSkgPj4+IHdiaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdW9yKG51bSk7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW9yID0gZnVuY3Rpb24gdW9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQgKG51bSkge1xuICAgIC8vIGIgPSBtaW4tbGVuZ3RoKG51bSwgdGhpcylcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubm90biA9IGZ1bmN0aW9uIG5vdG4gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCk7XG4gIH07XG5cbiAgLy8gU2V0IGBiaXRgIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4gKGJpdCwgdmFsKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcblxuICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgdGhpcy5fZXhwYW5kKG9mZiArIDEpO1xuXG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSAmIH4oMSA8PCB3Yml0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkXG4gIC8vIHRvIHdvcmsgd2l0aCAyNTYtYml0IG51bWJlcnMsIG90aGVyd2lzZSBpdCBnaXZlcyAyMCUgaW1wcm92ZW1lbnQgZm9yIDI1Ni1iaXRcbiAgLy8gbXVsdGlwbGljYXRpb24gKGxpa2UgZWxsaXB0aWMgc2VjcDI1NmsxKS5cbiAgdmFyIGNvbWIxME11bFRvID0gZnVuY3Rpb24gY29tYjEwTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGEgPSBzZWxmLndvcmRzO1xuICAgIHZhciBiID0gbnVtLndvcmRzO1xuICAgIHZhciBvID0gb3V0LndvcmRzO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIG1pZDtcbiAgICB2YXIgaGk7XG4gICAgdmFyIGEwID0gYVswXSB8IDA7XG4gICAgdmFyIGFsMCA9IGEwICYgMHgxZmZmO1xuICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7XG4gICAgdmFyIGExID0gYVsxXSB8IDA7XG4gICAgdmFyIGFsMSA9IGExICYgMHgxZmZmO1xuICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7XG4gICAgdmFyIGEyID0gYVsyXSB8IDA7XG4gICAgdmFyIGFsMiA9IGEyICYgMHgxZmZmO1xuICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7XG4gICAgdmFyIGEzID0gYVszXSB8IDA7XG4gICAgdmFyIGFsMyA9IGEzICYgMHgxZmZmO1xuICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7XG4gICAgdmFyIGE0ID0gYVs0XSB8IDA7XG4gICAgdmFyIGFsNCA9IGE0ICYgMHgxZmZmO1xuICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7XG4gICAgdmFyIGE1ID0gYVs1XSB8IDA7XG4gICAgdmFyIGFsNSA9IGE1ICYgMHgxZmZmO1xuICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7XG4gICAgdmFyIGE2ID0gYVs2XSB8IDA7XG4gICAgdmFyIGFsNiA9IGE2ICYgMHgxZmZmO1xuICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7XG4gICAgdmFyIGE3ID0gYVs3XSB8IDA7XG4gICAgdmFyIGFsNyA9IGE3ICYgMHgxZmZmO1xuICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7XG4gICAgdmFyIGE4ID0gYVs4XSB8IDA7XG4gICAgdmFyIGFsOCA9IGE4ICYgMHgxZmZmO1xuICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7XG4gICAgdmFyIGE5ID0gYVs5XSB8IDA7XG4gICAgdmFyIGFsOSA9IGE5ICYgMHgxZmZmO1xuICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7XG4gICAgdmFyIGIwID0gYlswXSB8IDA7XG4gICAgdmFyIGJsMCA9IGIwICYgMHgxZmZmO1xuICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7XG4gICAgdmFyIGIxID0gYlsxXSB8IDA7XG4gICAgdmFyIGJsMSA9IGIxICYgMHgxZmZmO1xuICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7XG4gICAgdmFyIGIyID0gYlsyXSB8IDA7XG4gICAgdmFyIGJsMiA9IGIyICYgMHgxZmZmO1xuICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7XG4gICAgdmFyIGIzID0gYlszXSB8IDA7XG4gICAgdmFyIGJsMyA9IGIzICYgMHgxZmZmO1xuICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7XG4gICAgdmFyIGI0ID0gYls0XSB8IDA7XG4gICAgdmFyIGJsNCA9IGI0ICYgMHgxZmZmO1xuICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7XG4gICAgdmFyIGI1ID0gYls1XSB8IDA7XG4gICAgdmFyIGJsNSA9IGI1ICYgMHgxZmZmO1xuICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7XG4gICAgdmFyIGI2ID0gYls2XSB8IDA7XG4gICAgdmFyIGJsNiA9IGI2ICYgMHgxZmZmO1xuICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7XG4gICAgdmFyIGI3ID0gYls3XSB8IDA7XG4gICAgdmFyIGJsNyA9IGI3ICYgMHgxZmZmO1xuICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7XG4gICAgdmFyIGI4ID0gYls4XSB8IDA7XG4gICAgdmFyIGJsOCA9IGI4ICYgMHgxZmZmO1xuICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7XG4gICAgdmFyIGI5ID0gYls5XSB8IDA7XG4gICAgdmFyIGJsOSA9IGI5ICYgMHgxZmZmO1xuICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7XG5cbiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSAxOTtcbiAgICAvKiBrID0gMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgwLCBiaDApO1xuICAgIHZhciB3MCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzAgPj4+IDI2KSkgfCAwO1xuICAgIHcwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwxLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMSkpIHwgMDtcbiAgICB2YXIgdzEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxID4+PiAyNikpIHwgMDtcbiAgICB3MSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgyKSkgfCAwO1xuICAgIHZhciB3MiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzIgPj4+IDI2KSkgfCAwO1xuICAgIHcyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgzLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSkgfCAwO1xuICAgIHZhciB3MyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzMgPj4+IDI2KSkgfCAwO1xuICAgIHczICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw0LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNCkpIHwgMDtcbiAgICB2YXIgdzQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc0ID4+PiAyNikpIHwgMDtcbiAgICB3NCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg1KSkgfCAwO1xuICAgIHZhciB3NSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzUgPj4+IDI2KSkgfCAwO1xuICAgIHc1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg2LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSkgfCAwO1xuICAgIHZhciB3NiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzYgPj4+IDI2KSkgfCAwO1xuICAgIHc2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw3LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNykpIHwgMDtcbiAgICB2YXIgdzcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc3ID4+PiAyNikpIHwgMDtcbiAgICB3NyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg4KSkgfCAwO1xuICAgIHZhciB3OCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzggPj4+IDI2KSkgfCAwO1xuICAgIHc4ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSkgfCAwO1xuICAgIHZhciB3OSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzkgPj4+IDI2KSkgfCAwO1xuICAgIHc5ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgxKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwxKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMCA+Pj4gMjYpKSB8IDA7XG4gICAgdzEwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgyKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgyKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzExID4+PiAyNikpIHwgMDtcbiAgICB3MTEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwzKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDMpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDMpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMiA+Pj4gMjYpKSB8IDA7XG4gICAgdzEyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg0KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw0KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMyA+Pj4gMjYpKSB8IDA7XG4gICAgdzEzICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg1KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg1KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE0ID4+PiAyNikpIHwgMDtcbiAgICB3MTQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw2KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDYpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDYpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNSA+Pj4gMjYpKSB8IDA7XG4gICAgdzE1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg3KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw3KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNiA+Pj4gMjYpKSB8IDA7XG4gICAgdzE2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg4KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg4KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE3ID4+PiAyNikpIHwgMDtcbiAgICB3MTcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw5KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDkpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDkpO1xuICAgIHZhciB3MTggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxOCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE4ICY9IDB4M2ZmZmZmZjtcbiAgICBvWzBdID0gdzA7XG4gICAgb1sxXSA9IHcxO1xuICAgIG9bMl0gPSB3MjtcbiAgICBvWzNdID0gdzM7XG4gICAgb1s0XSA9IHc0O1xuICAgIG9bNV0gPSB3NTtcbiAgICBvWzZdID0gdzY7XG4gICAgb1s3XSA9IHc3O1xuICAgIG9bOF0gPSB3ODtcbiAgICBvWzldID0gdzk7XG4gICAgb1sxMF0gPSB3MTA7XG4gICAgb1sxMV0gPSB3MTE7XG4gICAgb1sxMl0gPSB3MTI7XG4gICAgb1sxM10gPSB3MTM7XG4gICAgb1sxNF0gPSB3MTQ7XG4gICAgb1sxNV0gPSB3MTU7XG4gICAgb1sxNl0gPSB3MTY7XG4gICAgb1sxN10gPSB3MTc7XG4gICAgb1sxOF0gPSB3MTg7XG4gICAgaWYgKGMgIT09IDApIHtcbiAgICAgIG9bMTldID0gYztcbiAgICAgIG91dC5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICAvLyBQb2x5ZmlsbCBjb21iXG4gIGlmICghTWF0aC5pbXVsKSB7XG4gICAgY29tYjEwTXVsVG8gPSBzbWFsbE11bFRvO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICB2YXIgaG5jYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBvdXQubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgICBobmNhcnJ5ID0gMDtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICAgIHZhciBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2O1xuICAgICAgICBuY2FycnkgJj0gMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgICBjYXJyeSA9IG5jYXJyeTtcbiAgICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uIG11bFRvIChudW0sIG91dCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEwICYmIG51bS5sZW5ndGggPT09IDEwKSB7XG4gICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCA2Mykge1xuICAgICAgcmVzID0gc21hbGxNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7XG4gICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUXG4gIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb25cblxuICBmdW5jdGlvbiBGRlRNICh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgRkZUTS5wcm90b3R5cGUubWFrZVJCVCA9IGZ1bmN0aW9uIG1ha2VSQlQgKE4pIHtcbiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbCA9IEJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YFxuICBGRlRNLnByb3RvdHlwZS5yZXZCaW4gPSBmdW5jdGlvbiByZXZCaW4gKHgsIGwsIE4pIHtcbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7XG5cbiAgICB2YXIgcmIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByYiB8PSAoeCAmIDEpIDw8IChsIC0gaSAtIDEpO1xuICAgICAgeCA+Pj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmI7XG4gIH07XG5cbiAgLy8gUGVyZm9ybXMgXCJ0d2VlZGxpbmdcIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnXG4gIC8vIGJlaGF2aW91ciBvZiB0aGUgcmVjdXJzaXZlIGFsZ29yaXRobVxuICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZSAocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydHdzW2ldID0gcndzW3JidFtpXV07XG4gICAgICBpdHdzW2ldID0gaXdzW3JidFtpXV07XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybSAocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkge1xuICAgIHRoaXMucGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKTtcblxuICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkge1xuICAgICAgdmFyIGwgPSBzIDw8IDE7XG5cbiAgICAgIHZhciBydHdkZiA9IE1hdGguY29zKDIgKiBNYXRoLlBJIC8gbCk7XG4gICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAvIGwpO1xuXG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IE47IHAgKz0gbCkge1xuICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7XG4gICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykge1xuICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdO1xuICAgICAgICAgIHZhciBpZSA9IGl0d3NbcCArIGpdO1xuXG4gICAgICAgICAgdmFyIHJvID0gcnR3c1twICsgaiArIHNdO1xuICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTtcblxuICAgICAgICAgIHZhciByeCA9IHJ0d2RmXyAqIHJvIC0gaXR3ZGZfICogaW87XG5cbiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87XG4gICAgICAgICAgcm8gPSByeDtcblxuICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybztcbiAgICAgICAgICBpdHdzW3AgKyBqXSA9IGllICsgaW87XG5cbiAgICAgICAgICBydHdzW3AgKyBqICsgc10gPSByZSAtIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87XG5cbiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqL1xuICAgICAgICAgIGlmIChqICE9PSBsKSB7XG4gICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZfIC0gaXR3ZGYgKiBpdHdkZl87XG5cbiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87XG4gICAgICAgICAgICBydHdkZl8gPSByeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYiAobiwgbSkge1xuICAgIHZhciBOID0gTWF0aC5tYXgobSwgbikgfCAxO1xuICAgIHZhciBvZGQgPSBOICYgMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0gTiA+Pj4gMSkge1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiAxIDw8IGkgKyAxICsgb2RkO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIGNvbmp1Z2F0ZSAocndzLCBpd3MsIE4pIHtcbiAgICBpZiAoTiA8PSAxKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcndzW2ldO1xuXG4gICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTtcbiAgICAgIHJ3c1tOIC0gaSAtIDFdID0gdDtcblxuICAgICAgdCA9IGl3c1tpXTtcblxuICAgICAgaXdzW2ldID0gLWl3c1tOIC0gaSAtIDFdO1xuICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiICh3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICtcbiAgICAgICAgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArXG4gICAgICAgIGNhcnJ5O1xuXG4gICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7XG5cbiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdzO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiICh3cywgbGVuLCByd3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTtcblxuICAgICAgcndzWzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICAgIHJ3c1syICogaSArIDFdID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgIH1cblxuICAgIC8vIFBhZCB3aXRoIHplcm9lc1xuICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHtcbiAgICAgIHJ3c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTtcbiAgICBhc3NlcnQoKGNhcnJ5ICYgfjB4MWZmZikgPT09IDApO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnN0dWIgPSBmdW5jdGlvbiBzdHViIChOKSB7XG4gICAgdmFyIHBoID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBwaFtpXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBoO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm11bHAgPSBmdW5jdGlvbiBtdWxwICh4LCB5LCBvdXQpIHtcbiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cbiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pO1xuXG4gICAgdmFyIF8gPSB0aGlzLnN0dWIoTik7XG5cbiAgICB2YXIgcndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5yd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBybXdzID0gb3V0LndvcmRzO1xuICAgIHJtd3MubGVuZ3RoID0gTjtcblxuICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTtcbiAgICB0aGlzLmNvbnZlcnQxM2IoeS53b3JkcywgeS5sZW5ndGgsIG5yd3MsIE4pO1xuXG4gICAgdGhpcy50cmFuc2Zvcm0ocndzLCBfLCByd3N0LCBpd3N0LCBOLCByYnQpO1xuICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07XG4gICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldO1xuICAgICAgcndzdFtpXSA9IHJ4O1xuICAgIH1cblxuICAgIHRoaXMuY29uanVnYXRlKHJ3c3QsIGl3c3QsIE4pO1xuICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7XG4gICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7XG4gICAgdGhpcy5ub3JtYWxpemUxM2Iocm13cywgTik7XG5cbiAgICBvdXQubmVnYXRpdmUgPSB4Lm5lZ2F0aXZlIF4geS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDtcbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcblxuICAgIC8vIENhcnJ5XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSAqIG51bTtcbiAgICAgIHZhciBsbyA9ICh3ICYgMHgzZmZmZmZmKSArIChjYXJyeSAmIDB4M2ZmZmZmZik7XG4gICAgICBjYXJyeSA+Pj0gMjY7XG4gICAgICBjYXJyeSArPSAodyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgLy8gTk9URTogbG8gaXMgMjdiaXQgbWF4aW11bVxuICAgICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaHJuID0gZnVuY3Rpb24gaXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdFxuICBCTi5wcm90b3R5cGUuc2hsbiA9IGZ1bmN0aW9uIHNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hsbiA9IGZ1bmN0aW9uIHVzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHRcbiAgQk4ucHJvdG90eXBlLnNocm4gPSBmdW5jdGlvbiBzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNocm4gPSBmdW5jdGlvbiB1c2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0XG4gIEJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdO1xuXG4gICAgcmV0dXJuICEhKHcgJiBxKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKVxuICBCTi5wcm90b3R5cGUuaW1hc2tuID0gZnVuY3Rpb24gaW1hc2tuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgcysrO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWluKHMsIHRoaXMubGVuZ3RoKTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSAmPSBtYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPCBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFicyA9IGZ1bmN0aW9uIGlhYnMgKCkge1xuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWJzKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bCA9IGZ1bmN0aW9uIF9pc2hsbnN1Ym11bCAobnVtLCBtdWwsIHNoaWZ0KSB7XG4gICAgdmFyIGxlbiA9IG51bS5sZW5ndGggKyBzaGlmdDtcbiAgICB2YXIgaTtcblxuICAgIHRoaXMuX2V4cGFuZChsZW4pO1xuXG4gICAgdmFyIHc7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7XG4gICAgICB3IC09IHJpZ2h0ICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSAodyA+PiAyNikgLSAoKHJpZ2h0IC8gMHg0MDAwMDAwKSB8IDApO1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLnN0cmlwKCk7XG4gICAgfVxuICAgIGEuc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnZGl2JywgZmFsc2UpLmRpdjtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAlIGBudW1gXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gdW1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIHRydWUpLm1vZDtcbiAgfTtcblxuICAvLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZCAobnVtKSB7XG4gICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTtcblxuICAgIC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uXG4gICAgaWYgKGRtLm1vZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kO1xuXG4gICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7XG4gICAgdmFyIHIyID0gbnVtLmFuZGxuKDEpO1xuICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gICAgLy8gUm91bmQgZG93blxuICAgIGlmIChjbXAgPCAwIHx8IHIyID09PSAxICYmIGNtcCA9PT0gMCkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kbiA9IGZ1bmN0aW9uIG1vZG4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcbiAgICB2YXIgcCA9ICgxIDw8IDI2KSAlIG51bTtcblxuICAgIHZhciBhY2MgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgeCA9IHRoaXM7XG4gICAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgeCA9IHgudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHguY2xvbmUoKTtcbiAgICB9XG5cbiAgICAvLyBBICogeCArIEIgKiB5ID0geFxuICAgIHZhciBBID0gbmV3IEJOKDEpO1xuICAgIHZhciBCID0gbmV3IEJOKDApO1xuXG4gICAgLy8gQyAqIHggKyBEICogeSA9IHlcbiAgICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgICB2YXIgRCA9IG5ldyBCTigxKTtcblxuICAgIHZhciBnID0gMDtcblxuICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICAgIHguaXVzaHJuKDEpO1xuICAgICAgeS5pdXNocm4oMSk7XG4gICAgICArK2c7XG4gICAgfVxuXG4gICAgdmFyIHlwID0geS5jbG9uZSgpO1xuICAgIHZhciB4cCA9IHguY2xvbmUoKTtcblxuICAgIHdoaWxlICgheC5pc1plcm8oKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB4Lml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoQS5pc09kZCgpIHx8IEIuaXNPZGQoKSkge1xuICAgICAgICAgICAgQS5pYWRkKHlwKTtcbiAgICAgICAgICAgIEIuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQS5pdXNocm4oMSk7XG4gICAgICAgICAgQi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB5Lml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkge1xuICAgICAgICAgICAgQy5pYWRkKHlwKTtcbiAgICAgICAgICAgIEQuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQy5pdXNocm4oMSk7XG4gICAgICAgICAgRC5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgICAgeC5pc3ViKHkpO1xuICAgICAgICBBLmlzdWIoQyk7XG4gICAgICAgIEIuaXN1YihEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkuaXN1Yih4KTtcbiAgICAgICAgQy5pc3ViKEEpO1xuICAgICAgICBELmlzdWIoQik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEMsXG4gICAgICBiOiBELFxuICAgICAgZ2NkOiB5Lml1c2hsbihnKVxuICAgIH07XG4gIH07XG5cbiAgLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4gIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZVxuICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZFxuICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGIgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgYSA9IGEudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIHgyID0gbmV3IEJOKDApO1xuXG4gICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBhLml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDEuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDEuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgYi5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgyLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgyLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYS5jbXAoYikgPj0gMCkge1xuICAgICAgICBhLmlzdWIoYik7XG4gICAgICAgIHgxLmlzdWIoeDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5pc3ViKGEpO1xuICAgICAgICB4Mi5pc3ViKHgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmIChhLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIHJlcyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB4MjtcbiAgICB9XG5cbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZChwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5nY2QgPSBmdW5jdGlvbiBnY2QgKG51bSkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpO1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiB0aGlzLmFicygpO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW0uY2xvbmUoKTtcbiAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICBiLm5lZ2F0aXZlID0gMDtcblxuICAgIC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3b1xuICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgICBhLml1c2hybigxKTtcbiAgICAgIGIuaXVzaHJuKDEpO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIHtcbiAgICAgICAgYi5pdXNocm4oMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByID0gYS5jbXAoYik7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICAgIHZhciB0ID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSB0O1xuICAgICAgfSBlbHNlIGlmIChyID09PSAwIHx8IGIuY21wbigxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYS5pc3ViKGIpO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTtcbiAgfTtcblxuICAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSlcbiAgQk4ucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQgKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAxO1xuICB9O1xuXG4gIC8vIEFuZCBmaXJzdCB3b3JkIGFuZCBudW1cbiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtO1xuICB9O1xuXG4gIC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmVcbiAgQk4ucHJvdG90eXBlLmJpbmNuID0gZnVuY3Rpb24gYmluY24gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTtcbiAgICAgIHRoaXMud29yZHNbc10gfD0gcTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkXG4gICAgdmFyIGNhcnJ5ID0gcTtcbiAgICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB3ICs9IGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuIChudW0pIHtcbiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICByLnN0cmlwKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKlxuICogcHVyZSBqYXZhc2NyaXB0IGZ1bmN0aW9ucyB0byByZWFkIGFuZCB3cml0ZSAzMi1iaXQgYW5kIDY0LWJpdCBJRUVFIDc1NCBmbG9hdGluZy1wb2ludFxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNyBBbmRyYXMgUmFkaWNzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNCaWdlQ3B1ID0gZmFsc2U7XG52YXIgcmVhZEZsb2F0MzJBcnJheSwgd3JpdGVGbG9hdDMyQXJyYXksIHJlYWRGbG9hdDMyQXJyYXlSZXYsIHdyaXRlRmxvYXQzMkFycmF5UmV2O1xudmFyIHJlYWRGbG9hdDY0QXJyYXksIHdyaXRlRmxvYXQ2NEFycmF5LCByZWFkRmxvYXQ2NEFycmF5UmV2LCB3cml0ZUZsb2F0NjRBcnJheVJldjtcblxuXG4vLyB0ZXN0IEZsb2F0QXJyYXkgZXhpc3RlbmNlIHdpdGggJiYgdG8gbm90IHRocm93IG9mZiBjb2RlIGNvdmVyYWdlXG4odHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJykgJiYgKGZ1bmN0aW9uKCl7XG4gICAgdmFyIF9mcDMyID0gbmV3IEZsb2F0MzJBcnJheSgxKTtcbiAgICB2YXIgX2IzMiA9IG5ldyBVaW50OEFycmF5KF9mcDMyLmJ1ZmZlcik7XG5cbiAgICBfZnAzMlswXSA9IC0xO1xuICAgIGlzQmlnZUNwdSA9IF9iMzJbM10gPT09IDA7XG5cbiAgICByZWFkRmxvYXQzMkFycmF5ID0gZnVuY3Rpb24gcmVhZEZsb2F0MzJBcnJheSggYnVmLCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBpZiAocG9zIDwgMCB8fCBwb3MgKyA0ID4gYnVmLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIF9iMzJbMF0gPSBidWZbcG9zKytdOyBfYjMyWzFdID0gYnVmW3BvcysrXTsgX2IzMlsyXSA9IGJ1Zltwb3MrK107X2IzMlszXSA9IGJ1Zltwb3NdO1xuICAgICAgICAvL19iMzJbMF0gPSBidWZbcG9zKzBdOyBfYjMyWzFdID0gYnVmW3BvcysxXTsgX2IzMlsyXSA9IGJ1Zltwb3MrMl07IF9iMzJbM10gPSBidWZbcG9zKzNdO1xuICAgICAgICByZXR1cm4gX2ZwMzJbMF07XG4gICAgfVxuXG4gICAgcmVhZEZsb2F0MzJBcnJheVJldiA9IGZ1bmN0aW9uIHJlYWRGbG9hdDMyQXJyYXlSZXYoIGJ1ZiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgaWYgKHBvcyA8IDAgfHwgcG9zICsgNCA+IGJ1Zi5sZW5ndGgpIHJldHVybiAwO1xuICAgICAgICBfYjMyWzNdID0gYnVmW3BvcysrXTsgX2IzMlsyXSA9IGJ1Zltwb3MrK107IF9iMzJbMV0gPSBidWZbcG9zKytdOyBfYjMyWzBdID0gYnVmW3Bvc107XG4gICAgICAgIC8vX2IzMlszXSA9IGJ1Zltwb3MrMF07IF9iMzJbMl0gPSBidWZbcG9zKzFdOyBfYjMyWzFdID0gYnVmW3BvcysyXTsgX2IzMlswXSA9IGJ1Zltwb3MrM107XG4gICAgICAgIHJldHVybiBfZnAzMlswXTtcbiAgICB9XG5cbiAgICB3cml0ZUZsb2F0MzJBcnJheSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXQzMkFycmF5KCBidWYsIHYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIF9mcDMyWzBdID0gdjtcbiAgICAgICAgYnVmW3BvcysrXSA9IF9iMzJbMF07IGJ1Zltwb3MrK10gPSBfYjMyWzFdOyBidWZbcG9zKytdID0gX2IzMlsyXTsgYnVmW3Bvc10gPSBfYjMyWzNdO1xuICAgICAgICAvL2J1Zltwb3MrMF0gPSBfYjMyWzBdOyBidWZbcG9zKzFdID0gX2IzMlsxXTsgYnVmW3BvcysyXSA9IF9iMzJbMl07IGJ1Zltwb3MrM10gPSBfYjMyWzNdO1xuICAgIH1cblxuICAgIHdyaXRlRmxvYXQzMkFycmF5UmV2ID0gZnVuY3Rpb24gd3JpdGVGbG9hdDMyQXJyYXlSZXYoIGJ1ZiwgdiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgX2ZwMzJbMF0gPSB2O1xuICAgICAgICBidWZbcG9zKytdID0gX2IzMlszXTsgYnVmW3BvcysrXSA9IF9iMzJbMl07IGJ1Zltwb3MrK10gPSBfYjMyWzFdOyBidWZbcG9zXSA9IF9iMzJbMF07XG4gICAgICAgIC8vYnVmW3BvcyswXSA9IF9iMzJbM107IGJ1Zltwb3MrMV0gPSBfYjMyWzJdOyBidWZbcG9zKzJdID0gX2IzMlsxXTsgYnVmW3BvcyszXSA9IF9iMzJbMF07XG4gICAgfVxufSkoKTtcblxuKHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICdmdW5jdGlvbicpICYmIChmdW5jdGlvbigpe1xuICAgIHZhciBfZnA2NCA9IG5ldyBGbG9hdDY0QXJyYXkoMSk7XG4gICAgdmFyIF9iNjQgPSBuZXcgVWludDhBcnJheShfZnA2NC5idWZmZXIpO1xuXG4gICAgcmVhZEZsb2F0NjRBcnJheSA9IGZ1bmN0aW9uIHJlYWRGbG9hdDY0QXJyYXkoIGJ1ZiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgaWYgKHBvcyA8IDAgfHwgcG9zICsgOCA+IGJ1Zi5sZW5ndGgpIHJldHVybiAwO1xuICAgICAgICAvL19iNjRbMF0gPSBidWZbcG9zKytdOyBfYjY0WzFdID0gYnVmW3BvcysrXTsgX2I2NFsyXSA9IGJ1Zltwb3MrK107IF9iNjRbM10gPSBidWZbcG9zKytdO1xuICAgICAgICAvL19iNjRbNF0gPSBidWZbcG9zKytdOyBfYjY0WzVdID0gYnVmW3BvcysrXTsgX2I2NFs2XSA9IGJ1Zltwb3MrK107IF9iNjRbN10gPSBidWZbcG9zXTtcbiAgICAgICAgX2I2NFswXSA9IGJ1Zltwb3MrMF07IF9iNjRbMV0gPSBidWZbcG9zKzFdOyBfYjY0WzJdID0gYnVmW3BvcysyXTsgX2I2NFszXSA9IGJ1Zltwb3MrM107XG4gICAgICAgIF9iNjRbNF0gPSBidWZbcG9zKzRdOyBfYjY0WzVdID0gYnVmW3Bvcys1XTsgX2I2NFs2XSA9IGJ1Zltwb3MrNl07IF9iNjRbN10gPSBidWZbcG9zKzddO1xuICAgICAgICByZXR1cm4gX2ZwNjRbMF07XG4gICAgfVxuXG4gICAgcmVhZEZsb2F0NjRBcnJheVJldiA9IGZ1bmN0aW9uIHJlYWRGbG9hdDY0QXJyYXlSZXYoIGJ1ZiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgaWYgKHBvcyA8IDAgfHwgcG9zICsgOCA+IGJ1Zi5sZW5ndGgpIHJldHVybiAwO1xuICAgICAgICAvL19iNjRbN10gPSBidWZbcG9zKytdOyBfYjY0WzZdID0gYnVmW3BvcysrXTsgX2I2NFs1XSA9IGJ1Zltwb3MrK107IF9iNjRbNF0gPSBidWZbcG9zKytdO1xuICAgICAgICAvL19iNjRbM10gPSBidWZbcG9zKytdOyBfYjY0WzJdID0gYnVmW3BvcysrXTsgX2I2NFsxXSA9IGJ1Zltwb3MrK107IF9iNjRbMF0gPSBidWZbcG9zXTtcbiAgICAgICAgX2I2NFs3XSA9IGJ1Zltwb3MrMF07IF9iNjRbNl0gPSBidWZbcG9zKzFdOyBfYjY0WzVdID0gYnVmW3BvcysyXTsgX2I2NFs0XSA9IGJ1Zltwb3MrM107XG4gICAgICAgIF9iNjRbM10gPSBidWZbcG9zKzRdOyBfYjY0WzJdID0gYnVmW3Bvcys1XTsgX2I2NFsxXSA9IGJ1Zltwb3MrNl07IF9iNjRbMF0gPSBidWZbcG9zKzddO1xuICAgICAgICByZXR1cm4gX2ZwNjRbMF07XG4gICAgfVxuXG4gICAgd3JpdGVGbG9hdDY0QXJyYXkgPSBmdW5jdGlvbiB3cml0ZUZsb2F0NjRBcnJheSggYnVmLCB2LCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBfZnA2NFswXSA9IHY7XG4gICAgICAgIGJ1Zltwb3MgKyAwXSA9IF9iNjRbMF07IGJ1Zltwb3MgKyAxXSA9IF9iNjRbMV07IGJ1Zltwb3MgKyAyXSA9IF9iNjRbMl07IGJ1Zltwb3MgKyAzXSA9IF9iNjRbM107XG4gICAgICAgIGJ1Zltwb3MgKyA0XSA9IF9iNjRbNF07IGJ1Zltwb3MgKyA1XSA9IF9iNjRbNV07IGJ1Zltwb3MgKyA2XSA9IF9iNjRbNl07IGJ1Zltwb3MgKyA3XSA9IF9iNjRbN107XG4gICAgfVxuXG4gICAgd3JpdGVGbG9hdDY0QXJyYXlSZXYgPSBmdW5jdGlvbiB3cml0ZUZsb2F0NjRBcnJheVJldiggYnVmLCB2LCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBfZnA2NFswXSA9IHY7XG4gICAgICAgIGJ1Zltwb3MgKyAwXSA9IF9iNjRbN107IGJ1Zltwb3MgKyAxXSA9IF9iNjRbNl07IGJ1Zltwb3MgKyAyXSA9IF9iNjRbNV07IGJ1Zltwb3MgKyAzXSA9IF9iNjRbNF07XG4gICAgICAgIGJ1Zltwb3MgKyA0XSA9IF9iNjRbM107IGJ1Zltwb3MgKyA1XSA9IF9iNjRbMl07IGJ1Zltwb3MgKyA2XSA9IF9iNjRbMV07IGJ1Zltwb3MgKyA3XSA9IF9iNjRbMF07XG4gICAgfVxufSkoKTtcblxuXG4vLyBhcml0aG1ldGljIG9wZXJhdGlvbnMgcHJlc2VydmUgTmFOLCBidXQgbG9naWNhbCBvcHMgKCwgPj4sIGV0YykgY29udmVydCB0aGVtIHRvIHplcm9cbi8vIEFzc2VtYmxlIHRoZSB3b3JkIHRvIGdlbmVyYXRlIE5hTiBpZiBhbnkgcmVhZHMgYXJlIHVuZGVmaW5lZCAob3V0c2lkZSB0aGUgYm91bmRzIG9mIHRoZSBhcnJheSkuXG5mdW5jdGlvbiByZWFkV29yZCggYnVmLCBvZmZzLCBkaXJuICkge1xuICAgIHZhciBhID0gYnVmW29mZnMrK10sIGIgPSBidWZbb2ZmcysrXSwgYyA9IGJ1ZltvZmZzKytdLCBkID0gYnVmW29mZnNdO1xuICAgIHJldHVybiAoZGlybiA9PT0gJ2JpZ2UnKVxuICAgICAgICA/ICgoKCgoYSAqIDI1NikgKyBiKSAqIDI1NikgKyBjKSAqIDI1NikgKyBkXG4gICAgICAgIDogKCgoKChkICogMjU2KSArIGMpICogMjU2KSArIGIpICogMjU2KSArIGE7XG59XG5cbmZ1bmN0aW9uIHdyaXRlV29yZCggYnVmLCB2LCBvZmZzLCBkaXJuICkge1xuICAgIHZhciBhID0gKHYgPj4+IDI0KSAmIDB4ZmYsIGIgPSAodiA+PiAxNikgJiAweGZmLCBjID0gKHYgPj4gOCkgJiAweGZmLCBkID0gKHYpICYgMHhmZjtcbiAgICAoZGlybiA9PT0gJ2JpZ2UnKVxuICAgICAgICA/IChidWZbb2ZmcysrXSA9IGEsIGJ1ZltvZmZzKytdID0gYiwgYnVmW29mZnMrK10gPSBjLCBidWZbb2Zmc10gPSBkKVxuICAgICAgICA6IChidWZbb2ZmcysrXSA9IGQsIGJ1ZltvZmZzKytdID0gYywgYnVmW29mZnMrK10gPSBiLCBidWZbb2Zmc10gPSBhKVxufVxuXG4vLyB3cml0ZSB0aGUgdHdvLXdvcmQgdmFsdWUgW2hpLGxvXSB3aGVyZSBoaSBob2xkcyB0aGUgMzIgbXNiIGJpdHMgYW5kIGxvIHRoZSAzMiBsc2IgYml0c1xuZnVuY3Rpb24gd3JpdGVEb3VibGVXb3JkKCBidWYsIGhpLCBsbywgb2ZmcywgZGlybiApIHtcbiAgICBpZiAoZGlybiA9PT0gJ2JpZ2UnKSB7XG4gICAgICAgIHdyaXRlV29yZChidWYsIGhpLCBvZmZzLCBkaXJuKTtcbiAgICAgICAgd3JpdGVXb3JkKGJ1ZiwgbG8sIG9mZnMgKyA0LCBkaXJuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdyaXRlV29yZChidWYsIGxvLCBvZmZzLCBkaXJuKTtcbiAgICAgICAgd3JpdGVXb3JkKGJ1ZiwgaGksIG9mZnMgKyA0LCBkaXJuKTtcbiAgICB9XG59XG5cbi8vIGdpdmVuIGFuIGV4cG9uZW50IG4sIHJldHVybiAyKipuXG4vLyBuIGlzIGFsd2F5cyBhbiBpbnRlZ2VyLCBmYXN0ZXIgdG8gc2hpZnQgd2hlbiBwb3NzaWJsZVxuLy8gTm90ZSB0aGF0IG5vZGVqcyBNYXRoLnBvdygpIGlzIGZhc3RlciB0aGFuIGEgbG9va3VwIHRhYmxlIChtYXkgYmUgY2FjaGluZylcbnZhciBfMmVYcCA9IG5ldyBBcnJheSgpOyBmb3IgKHZhciBpPTA7IGk8MTIwMDsgaSsrKSBfMmVYcFtpXSA9IE1hdGgucG93KDIsIGkpO1xudmFyIF8yZVhuID0gbmV3IEFycmF5KCk7IGZvciAodmFyIGk9MDsgaTwxMjAwOyBpKyspIF8yZVhuW2ldID0gTWF0aC5wb3coMiwgLWkpO1xuZnVuY3Rpb24gcG93MiggZXhwICkge1xuICAgIHJldHVybiAoZXhwID49IDApID8gXzJlWHBbZXhwXSA6IF8yZVhuWy1leHBdO1xuICAgIC8vcmV0dXJuIChleHAgPj0gMCkgPyAoZXhwIDwgIDMxID8gKDEgPDwgZXhwKSA6ICAgICAgICBNYXRoLnBvdygyLCBleHApKVxuICAgIC8vICAgICAgICAgICAgICAgICAgOiAoZXhwID4gLTMxID8gKDEgLyAoMSA8PCAtZXhwKSkgOiBNYXRoLnBvdygyLCBleHApKTtcbn1cblxuXG4vLyBnZXRGbG9hdCgpIGZyb20gcWJzb24sIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyYXNxL25vZGUtcWJzb246XG4vKlxuICogZXh0cmFjdCB0aGUgNjQtYml0IGxpdHRsZS1lbmRpYW4gaWVlZSA3NTQgZmxvYXRpbmctcG9pbnQgdmFsdWVcbiAqICAgc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG91YmxlLXByZWNpc2lvbl9mbG9hdGluZy1wb2ludF9mb3JtYXRcbiAqICAgMSBiaXQgc2lnbiArIDExIGJpdHMgZXhwb25lbnQgKyAoMSBpbXBsaWNpdCBtYW50aXNzYSAxIGJpdCkgKyA1MiBtYW50aXNzYSBiaXRzXG4gKi9cbnZhciBfcnNoaWZ0MzIgPSAoMSAvIDB4MTAwMDAwMDAwKTsgICAgICAvLyA+PiAzMiBmb3IgZmxvYXRzXG52YXIgX3JzaGlmdDIwID0gKDEgLyAweDEwMDAwMCk7ICAgICAgICAgLy8gPj4gMjAgZm9yIGZsb2F0c1xudmFyIF9sc2hpZnQzMiA9ICgxICogMHgxMDAwMDAwMDApOyAgICAgIC8vIDw8IDMyXG52YXIgX3JzaGlmdDUyID0gKDEgKiBfcnNoaWZ0MzIgKiBfcnNoaWZ0MjApOyAgICAvLyA+PiA1MlxudmFyIF9yc2hpZnQxMDIzID0gcG93MigtMTAyMyk7ICAgICAgICAgIC8vIDJeLTEwMjNcbmZ1bmN0aW9uIHJlYWREb3VibGUoIGJ1Ziwgb2Zmc2V0LCBkaXJuICkge1xuICAgIHZhciB3MCA9IHJlYWRXb3JkKGJ1Ziwgb2Zmc2V0LCBkaXJuKTtcbiAgICB2YXIgdzEgPSByZWFkV29yZChidWYsIG9mZnNldCArIDQsIGRpcm4pO1xuICAgIHZhciBoaWdoV29yZCwgbG93V29yZDtcbiAgICAoZGlybiA9PT0gJ2JpZ2UnKSA/IChoaWdoV29yZCA9IHcwLCBsb3dXb3JkID0gdzEpIDogKGhpZ2hXb3JkID0gdzEsIGxvd1dvcmQgPSB3MCk7XG5cbiAgICB2YXIgbWFudGlzc2EgPSAoaGlnaFdvcmQgJiAweDAwMEZGRkZGKSAqIF9sc2hpZnQzMiArIGxvd1dvcmQ7XG4gICAgdmFyIGV4cG9uZW50ID0gKGhpZ2hXb3JkICYgMHg3RkYwMDAwMCkgPj4+IDIwO1xuICAgIHZhciBzaWduID0gKGhpZ2hXb3JkID4+IDMxKSB8fCAxOyAgIC8vIC0xLCAxLCBvciAxIGlmIE5hTlxuXG4gICAgdmFyIHZhbHVlO1xuICAgIGlmIChleHBvbmVudCA9PT0gMHgwMDApIHtcbiAgICAgICAgLy8gemVybyBpZiAhbWFudGlzc2EsIGVsc2Ugc3Vibm9ybWFsIChub24tbm9ybWFsaXplZCByZWR1Y2VkIHByZWNpc2lvbiBzbWFsbCB2YWx1ZSlcbiAgICAgICAgLy8gcmVjb3ZlciBuZWdhdGl2ZSB6ZXJvIC0wLjAgYXMgZGlzdGluY3QgZnJvbSAwLjBcbiAgICAgICAgLy8gc3Vibm9ybWFscyBkbyBub3QgaGF2ZSBhbiBpbXBsaWVkIGxlYWRpbmcgMSBiaXQgYW5kIGFyZSBwb3NpdGlvbmVkIDEgYml0IHRvIHRoZSBsZWZ0XG4gICAgICAgIHZhbHVlID0gbWFudGlzc2EgPyAobWFudGlzc2EgKiBwb3cyKC01MiArIDEgLTEwMjMpKSA6IDAuMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwb25lbnQgPCAweDdmZikge1xuICAgICAgICAvLyBub3JtYWxpemVkIHZhbHVlIHdpdGggYW4gaW1wbGllZCBsZWFkaW5nIDEgYml0IGFuZCAxMDIzIGJpYXNlZCBleHBvbmVudFxuICAgICAgICAvLyB0ZXN0IGZvciBOYU4gd2l0aCAobWFudGlzc2EgPj0gMCksIGFuZCByZXR1cm4gMCBpZiBOYU4gaWUgcmVhZCBmcm9tIG91dHNpZGUgYnVmZmVyIGJvdW5kc1xuICAgICAgICB2YWx1ZSA9IChtYW50aXNzYSA+PSAwKSA/ICgxICsgbWFudGlzc2EgKiBfcnNoaWZ0NTIpICogcG93MihleHBvbmVudCAtIDEwMjMpIDogMC4wO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSW5maW5pdHkgaWYgemVybyBtYW50aXNzYSAoKy8tIHBlciBzaWduKSwgTmFOIGlmIG5vbnplcm8gbWFudGlzc2FcbiAgICAgICAgdmFsdWUgPSBtYW50aXNzYSA/IE5hTiA6IEluZmluaXR5O1xuICAgIH1cblxuICAgIHJldHVybiBzaWduICogdmFsdWU7XG59XG5cbi8vXG4vLyBOb3RlOiBub2RlLXY5IHByZWZlcnMgKzI4JSAoc2lnbiAqIHZhbHVlKSwgbm9kZSB2NiBkb2VzbnQgY2FyZSwgbm9kZSB2OCBsaWtlcyArMTYlICgtdmFsdWUgOiB2YWx1ZSlcbi8vXG4vLyBmbG9hdDMyOiAxIHNpZ24gKyA4IGV4cG9uZW50ICsgMjQgbWFudGlzc2EgKDIzIHN0b3JlZCwgMSBpbXBsaWVkKVxuLy8gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpbmdsZS1wcmVjaXNpb25fZmxvYXRpbmctcG9pbnRfZm9ybWF0XG4vL1xuLy8gRXhwb25lbnQgICAgIE1hbnRpc3NhID09IDAgICBNYW50aXNzYSA+IDAgICAgVmFsdWVcbi8vIDAwICAgICAgICAgICArMCwgLTAgICAgICAgICAgZGVub3JtYWxpemVkICAgIDJeKCAgMS0xMjcpICogKDAuICsgKG1hbnRpc3NhIC8gMl4yMykpXG4vLyAwMC4uIEZFICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWQgICAgICAyXihleHAtMTI3KSAqICgxLiArIChtYW50aXNzYSAvIDJeMjMpKVxuLy8gRkYgICAgICAgICAgICsvLUluZmluaXR5ICAgICBOYU4gICAgICAgICAgICAgLVxuLy9cbnZhciBfcnNoaWZ0MjMgPSBNYXRoLnBvdygyLCAtMjMpOyAgICAgIC8vID4+IDIzIGZvciBmbG9hdHNcbnZhciBfcnNoaWZ0MTI3ID0gTWF0aC5wb3coMiwgLTEyNyk7ICAgIC8vIDJeLTEyN1xuZnVuY3Rpb24gcmVhZEZsb2F0KCBidWYsIG9mZnNldCwgZGlybiApIHtcbiAgICB2YXIgd29yZCA9IHJlYWRXb3JkKGJ1Ziwgb2Zmc2V0LCBkaXJuKTtcbiAgICB2YXIgbWFudGlzc2EgPSAod29yZCAmIDB4MDA3RkZGRkYpO1xuICAgIHZhciBleHBvbmVudCA9ICh3b3JkICYgMHg3RjgwMDAwMCkgPj4+IDIzO1xuICAgIHZhciBzaWduID0gKHdvcmQgPj4gMzEpIHx8IDE7ICAgICAgIC8vIC0xLCAxLCBvciAxIGlmIE5hTlxuXG4gICAgdmFyIHZhbHVlO1xuICAgIGlmIChleHBvbmVudCA9PT0gMHgwMDApIHtcbiAgICAgICAgdmFsdWUgPSBtYW50aXNzYSA/IG1hbnRpc3NhICogX3JzaGlmdDIzICogMiAqIF9yc2hpZnQxMjcgOiAwLjA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cG9uZW50IDwgMHhmZikge1xuICAgICAgICB2YWx1ZSA9ICgxICsgbWFudGlzc2EgKiBfcnNoaWZ0MjMpICogcG93MihleHBvbmVudCAtIDEyNykgLy8gKiBfcnNoaWZ0MTI3O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBtYW50aXNzYSA/IE5hTiA6IEluZmluaXR5O1xuICAgIH1cblxuICAgIHJldHVybiBzaWduICogdmFsdWU7XG4gICAgLy9yZXR1cm4gKHdvcmQgPj4+IDMxKSA/IC12YWx1ZSA6IHZhbHVlO1xufVxuXG4vLyBnaXZlbiBhIHBvc2l0aXZlIHZhbHVlIHYsIG5vcm1hbGl6ZSBpdCB0byBiZXR3ZWVuIDEgYW5kIGxlc3MgdGhhbiAyIHdpdGggYSBiaW5hcnkgZXhwb25lbnRcbi8vIFRoZSBleHBvbmVudCBpcyB0aGUgbnVtYmVyIG9mIGJpdCBwbGFjZXMgaXQgd2FzIHNoaWZ0ZWQsIHBvc2l0aXZlIGlmIHYgd2FzID49IDIuXG4vLyBUaGUgc3BlY2lhbCB2YWx1ZXMgMCwgLTAsIE5hTiwgK0luZmluaXR5IGFuZCAtSW5maW5pdHkgYXJlIG5vdCBoYW5kbGVkIGhlcmUuXG4vLyBMb29waW5nIGlzIGZhc3RlciB0aGFuIChNYXRoLmxvZyh2KSAvIE1hdGguTE4yKSBpbiBub2RlLXY2LCB2OCwgYW5kIHY5LlxuLy8gVGhpcyBmdW5jdGlvbiBjYW4gYWNjb3VudCBmb3IgaGFsZiB0aGUgdGltZSB0YWtlbiB0byB3cml0ZSBhIGRvdWJsZS5cbnZhciBfcGFydHMgPSB7IGV4cDogMCwgbWFudDogMCB9O1xuZnVuY3Rpb24gbm9ybWFsaXplKCB2ICkge1xuICAgIHZhciBleHAgPSAwO1xuXG4gICAgaWYgKHYgPj0gMikge1xuICAgICAgICBleHAgPSBjb3VudERvdWJsaW5ncygxLCB2KTtcbiAgICAgICAgdiAqPSBwb3cyKC1leHApO1xuICAgICAgICAvLyBpZiBkb3VibGVkIHRvIGV4YWN0bHkgdi8yLCBhZGp1c3QgdXAgdG8gdlxuICAgICAgICBpZiAodiA+PSAyKSB7IHYgLz0gMjsgZXhwICs9IDEgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2IDwgMSkge1xuICAgICAgICBleHAgPSBjb3VudERvdWJsaW5ncyh2LCAyKTtcbiAgICAgICAgLy8gYXZvaWQgdXNpbmcgcG93MiBleHBvbmVudHMgPiAxMDIzLCB0aGV5IG92ZXJmbG93IHRvIEluZmluaXR5XG4gICAgICAgIGlmIChleHAgPD0gMTAyMykgdiAqPSBwb3cyKGV4cCk7XG4gICAgICAgIGVsc2UgeyB2ICo9IHBvdzIoZXhwIC0gMTAwKTsgdiAqPSBwb3cyKDEwMCk7IH1cbiAgICAgICAgZXhwID0gLWV4cDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBwYXNzIGluIG51bSBiaXRzLCBhbmQgbm9ybWFsaXplIHN0cmFpZ2h0IHRvIG1hbnRpc3NhIC8gZGVub3JtXG5cbiAgICBfcGFydHMuZXhwID0gZXhwO1xuICAgIF9wYXJ0cy5tYW50ID0gdjtcbiAgICByZXR1cm4gX3BhcnRzO1xufVxuXG4vLyBjb3VudCBob3cgbWFueSBkb3VibGluZ3Mgb2YgYSBhcmUgbmVlZGVkIGZvciBpdCBiZSBjbG9zZSB0byBiLlxuLy8gUmV0dXJucyBhIHNoaWZ0IGNvdW50IHRoYXQgZ3Jvd3MgKGEpIHRvIGF0IGxlYXN0IChiLzIpIGJ1dCBsZXNzIHRoYW4gKGIpLlxuLy8gRG91YmxpbmcgMSB0b3dhcmQgdiBlbnN1cmVzIHRoYXQgKHYgPj4gbikgPj0gMSA8IDIsXG4vLyBhbmQgZG91YmxpbmcgZnJvbSB2IHRvd2FyZCAyIGVuc3VyZXMgdGhhdCAodiA8PCBuKSA+PSAxIDwgMi5cbnZhciBfMmUxOTIgPSBNYXRoLnBvdygyLCAxOTIpO1xuZnVuY3Rpb24gY291bnREb3VibGluZ3MoIGEsIGIgKSB7XG4gICAgdmFyIG4gPSAwO1xuXG4gICAgd2hpbGUgKGEgKiBfMmUxOTIgPCBiKSB7IGEgKj0gXzJlMTkyOyBuICs9IDE5MiB9XG4gICAgd2hpbGUgKGEgKiAweDEwMDAwMDAwMDAwMDAwMDAwIDwgYikgeyBhICo9IDB4MTAwMDAwMDAwMDAwMDAwMDA7IG4gKz0gNjQgfVxuICAgIHdoaWxlIChhICogMHgxMDAwMCA8IGIpIHsgYSAqPSAweDEwMDAwOyBuICs9IDE2IH1cbiAgICB3aGlsZSAoYSAqIDB4NDAgPCBiKSB7IGEgKj0gMHg0MDsgbiArPSA2IH1cbiAgICB3aGlsZSAoYSAqIDIgPCBiKSB7IGEgKj0gMjsgbiArPSAxIH1cblxuICAgIHJldHVybiBuO1xufVxuXG4vLyByb3VuZCB0aGUgZnJhY3Rpb24gaW4gdiBhbmQgc2NhbGUgdXAgdG8gc2NhbGUgPSAyXm4gYml0c1xuLy8gaHR0cHM6Ly9ibG9nLmFuZ3VsYXJpbmRlcHRoLmNvbS9ob3ctdG8tcm91bmQtYmluYXJ5LWZyYWN0aW9ucy02MjVjOGZhM2ExYWZcbi8vIFJvdW5kaW5nIGNhbiBjYXVzZSB0aGUgc2NhbGVkIHZhbHVlIHRvIGV4Y2VlZCAyXm4uXG5mdW5jdGlvbiByb3VuZE1hbnRpc3NhKCB2LCBzY2FsZSApIHtcbiAgICB2ICo9IHNjYWxlO1xuICAgIC8vIHJvdW5kIHRvIG5lYXJlc3QsIGJ1dCByb3VuZCBhIDAuNSB0aWUgdG8gZXZlbiAoMC41IHRvIDAuMCBhbmQgMS41IHRvIDIuMClcbiAgICAvLyByb3VuZCBhbGwgbnVtYmVycyB3aXRoIGEgZnJhY3Rpb24gb3RoZXIgdGhhbiAxLzIsIGFuZCByb3VuZCB1cCBvZGQgbnVtYmVycyB3aXRoXG4gICAgcmV0dXJuICgodiAtIE1hdGguZmxvb3IodikgIT09IDAuNSkgfHwgKHYgJiAxKSkgPyB2ICsgMC41IDogdjtcbn1cblxuLy8gZmxvYXQzMjogMSBzaWduICsgOCBleHBvbmVudCArICgxIGltcGxpZWQgbWFudGlzc2EgMSBiaXQpICsgMjMgc3RvcmVkIG1hbnRpc3NhIGJpdHNcbi8vIE5hTiB0eXBlczogcXVpZXQgTmFuID0geC5mZi44eHh4LCBzaWduYWxpbmcgTmFOID0geC5mZi4weHgxIChtc2IgemVybywgYXQgbGVhc3Qgb25lIG90aGVyIGJpdCBzZXQpXG4vLyBKYXZhU2NyaXB0IGJ1aWx0LWluIE5hTiBpcyB0aGUgbm9uLXNpZ25hbGluZyA3ZmMwMDAwMCwgYnV0IGFyaXRobWV0aWMgY2FuIHlpZWxkIGEgbmVnYXRpdmUgTmFOIGZmYzAwMDAwLlxuZnVuY3Rpb24gd3JpdGVGbG9hdCggYnVmLCB2LCBvZmZzZXQsIGRpcm4gKSB7XG4gICAgdmFyIG5vcm0sIHdvcmQsIHNpZ24gPSAwO1xuICAgIGlmICh2IDwgMCkgeyBzaWduID0gMHg4MDAwMDAwMDsgdiA9IC12OyB9XG5cbiAgICBpZiAoISAodiAmJiB2IDwgSW5maW5pdHkpKSB7XG4gICAgICAgIGlmICh2ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgLy8gLTAsICswXG4gICAgICAgICAgICB3b3JkID0gKDEvdiA8IDApID8gMHg4MDAwMDAwMCA6IDB4MDAwMDAwMDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA9PT0gSW5maW5pdHkpIHsgICAgICAvLyAtSW5maW5pdHksICtJbmZpbml0eVxuICAgICAgICAgICAgd29yZCA9IHNpZ24gfCAweDdGODAwMDAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFOIC0gcG9zaXRpdmUsIG5vbi1zaWduYWxpbmdcbiAgICAgICAgICAgIHdvcmQgPSAweDdGQzAwMDAwO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlV29yZChidWYsIHdvcmQsIG9mZnNldCwgZGlybik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub3JtID0gbm9ybWFsaXplKHYpOyAgICAgICAgICAgIC8vIHNlcGFyYXRlIGV4cG9uZW50IGFuZCBtYW50aXNzYVxuICAgICAgICBub3JtLmV4cCArPSAxMjc7ICAgICAgICAgICAgICAgIC8vIGJpYXMgZXhwb25lbnRcblxuICAgICAgICBpZiAobm9ybS5leHAgPD0gMCkgeyAgICAgICAgICAgIC8vIGRlbm9ybWFsaXplZCBudW1iZXJcbiAgICAgICAgICAgIGlmIChub3JtLmV4cCA8PSAtMjUpIHsgICAgICAvLyB0b28gc21hbGwsIHVuZGVyZmxvdyB0byB6ZXJvLiAgLTI0IG1pZ2h0IHJvdW5kIHVwIHRob3VnaC5cbiAgICAgICAgICAgICAgICBub3JtLm1hbnQgPSAwO1xuICAgICAgICAgICAgICAgIG5vcm0uZXhwID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvLyBkZW5vcm1hbGl6ZVxuICAgICAgICAgICAgICAgIG5vcm0ubWFudCA9IHJvdW5kTWFudGlzc2Eobm9ybS5tYW50LCBwb3cyKDIyICsgbm9ybS5leHApKTtcbiAgICAgICAgICAgICAgICBub3JtLmV4cCA9IDA7ICAgICAgICAgICAvLyByb3VuZGluZyBjYW4gY2Fycnkgb3V0IGFuZCByZS1ub3JtYWxpemUgdGhlIG51bWJlclxuICAgICAgICAgICAgICAgIGlmIChub3JtLm1hbnQgPj0gMHg4MDAwMDApIHsgbm9ybS5tYW50IC09IDB4ODAwMDAwOyBub3JtLmV4cCArPSAxIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm0ubWFudCA9IHJvdW5kTWFudGlzc2Eobm9ybS5tYW50IC0gMSwgMHg4MDAwMDApO1xuICAgICAgICAgICAgLy8gaWYgcm91bmRpbmcgb3ZlcmZsb3dlZCBpbnRvIHRoZSBoaWRkZW4gMXMgcGxhY2UsIGhpZGUgaXQgYW5kIGFkanVzdCB0aGUgZXhwb25lbnRcbiAgICAgICAgICAgIGlmIChub3JtLm1hbnQgPj0gMHg4MDAwMDApIHsgbm9ybS5tYW50IC09IDB4ODAwMDAwOyBub3JtLmV4cCArPSAxIH1cbiAgICAgICAgICAgIGlmIChub3JtLmV4cCA+IDI1NCkgeyAgICAgICAvLyBvdmVyZmxvdyB0byBJbmZpbml0eVxuICAgICAgICAgICAgICAgIG5vcm0ubWFudCA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybS5leHAgPSAyNTU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3b3JkID0gc2lnbiB8IChub3JtLmV4cCA8PCAyMykgfCBub3JtLm1hbnQ7XG4gICAgICAgIHdyaXRlV29yZChidWYsIHdvcmQsIG9mZnNldCwgZGlybik7XG4gICAgfVxufVxuXG4vLyBkb3VibGU2NDogMSBiaXQgc2lnbiArIDExIGJpdHMgZXhwb25lbnQgKyAoMSBpbXBsaWVkIG1hbnRpc3NhIDEgYml0KSArIDUyIHN0b3JlZCBtYW50aXNzYSBiaXRzXG4vLyBXcml0aW5nIGRvdWJsZXMgaXMgc2ltcGxlciB0aGFuIGZsb2F0cywgYmVjYXVzZSB0aGUgaW50ZXJuYWwgamF2YXNjcmlwdCA2NC1iaXQgZmxvYXRzXG4vLyBhcmUgaWRlbnRpY2FsIHRvIHRoZSBzdG9yZWQgcmVwcmVzZW50YXRpb24sIGFuZCB0aHVzIHdpbGwgbm90IG92ZXJmbG93IG9yIHVuZGVyZmxvdy5cbnZhciBkb3VibGVBcnJheSA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBkb3VibGVCdWYgPSBuZXcgQnVmZmVyKDgpO1xudmFyIF8yZTUyID0gTWF0aC5wb3coMiwgNTIpO1xuZnVuY3Rpb24gd3JpdGVEb3VibGUoIGJ1Ziwgdiwgb2Zmc2V0LCBkaXJuICkge1xuICAgIHZhciBub3JtLCBoaWdoV29yZCwgbG93V29yZCwgc2lnbiA9IDA7XG4gICAgaWYgKHYgPCAwKSB7IHNpZ24gPSAweDgwMDAwMDAwOyB2ID0gLXY7IH1cblxuICAgIGlmICghICh2ICYmIHYgPCBJbmZpbml0eSkpIHtcbiAgICAgICAgaWYgKHYgPT09IDApIHsgICAgICAgICAgICAgICAgICAvLyAtMCwgKzBcbiAgICAgICAgICAgIGhpZ2hXb3JkID0gKDEvdiA8IDApID8gMHg4MDAwMDAwMCA6IDA7XG4gICAgICAgICAgICBsb3dXb3JkID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ID09PSBJbmZpbml0eSkgeyAgICAgIC8vIC1JbmZpbml0eSwgK0luZmluaXR5XG4gICAgICAgICAgICBoaWdoV29yZCA9IChzaWduICsgMHg3RkYwMDAwMCk7XG4gICAgICAgICAgICBsb3dXb3JkID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5hTiAtIHBvc2l0aXZlLCBub24tc2lnbmFsaW5nXG4gICAgICAgICAgICBoaWdoV29yZCA9IDB4N0ZGODAwMDA7XG4gICAgICAgICAgICBsb3dXb3JkID0gMDtcbiAgICAgICAgfVxuICAgICAgICB3cml0ZURvdWJsZVdvcmQoYnVmLCBoaWdoV29yZCwgbG93V29yZCwgb2Zmc2V0LCBkaXJuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vcm0gPSBub3JtYWxpemUodik7ICAgICAgICAgICAgLy8gc2VwYXJhdGUgZXhwb25lbnQgYW5kIG1hbnRpc3NhXG4gICAgICAgIG5vcm0uZXhwICs9IDEwMjM7ICAgICAgICAgICAgICAgLy8gYmlhcyBleHBvbmVudFxuXG4gICAgICAgIGlmIChub3JtLmV4cCA8PSAwKSB7ICAgICAgICAgICAgLy8gZGVub3JtYWxpemVkXG4gICAgICAgICAgICAvLyBKYXZhU2NyaXB0IG51bWJlcnMgY2FuIG5vdCBob2xkIHZhbHVlcyBzbWFsbCBlbm91Z2ggdG8gdW5kZXJmbG93XG4gICAgICAgICAgICAvLyBhbmQgbm8gbmVlZCB0byByb3VuZCwgYWxsIGJpdHMgd2lsbCBiZSB3cml0dGVuXG4gICAgICAgICAgICBub3JtLm1hbnQgKj0gcG93Mig1MSArIG5vcm0uZXhwKTtcbiAgICAgICAgICAgIG5vcm0uZXhwID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcm91bmQsIGFsbCBiaXRzIHdpbGwgYmUgd3JpdHRlblxuICAgICAgICAgICAgbm9ybS5tYW50ID0gKG5vcm0ubWFudCAtIDEpICogXzJlNTI7XG4gICAgICAgIH1cblxuICAgICAgICBoaWdoV29yZCA9IHNpZ24gfCAobm9ybS5leHAgPDwgMjApIHwgKG5vcm0ubWFudCAvIDB4MTAwMDAwMDAwKTtcbiAgICAgICAgbG93V29yZCA9IG5vcm0ubWFudCA+Pj4gMDtcbiAgICAgICAgd3JpdGVEb3VibGVXb3JkKGJ1ZiwgaGlnaFdvcmQsIGxvd1dvcmQsIG9mZnNldCwgZGlybik7XG4gICAgfVxufVxuXG5cbjsoZnVuY3Rpb24gaW5zdGFsbCgpIHtcbiAgICB2YXIgZXhwb3J0cyA9IHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzIHx8IHRoaXM7XG5cbiAgICBleHBvcnRzLnJlYWRXb3JkID0gcmVhZFdvcmQ7XG4gICAgZXhwb3J0cy53cml0ZVdvcmQgPSB3cml0ZVdvcmQ7XG4gICAgZXhwb3J0cy53cml0ZURvdWJsZVdvcmQgPSB3cml0ZURvdWJsZVdvcmQ7XG5cbiAgICBleHBvcnRzLnJlYWRGbG9hdCA9IHJlYWRGbG9hdDtcbiAgICBleHBvcnRzLndyaXRlRmxvYXQgPSB3cml0ZUZsb2F0O1xuICAgIGV4cG9ydHMucmVhZERvdWJsZSA9IHJlYWREb3VibGU7XG4gICAgZXhwb3J0cy53cml0ZURvdWJsZSA9IHdyaXRlRG91YmxlO1xuXG4gICAgLy8gZXhwb3NlIHRoZSBpbXBsZW1lbnRhdGlvbiB0byB0aGUgdGVzdHNcbiAgICBleHBvcnRzLl91c2VGbG9hdEFycmF5ID0gZnVuY3Rpb24oIHllc25vICkge1xuICAgICAgICBleHBvcnRzLl91c2luZ0Zsb2F0QXJyYXkgPSB5ZXNubztcbiAgICAgICAgaWYgKHllc25vKSB7XG4gICAgICAgICAgICAvLyBzb2Z0d2FyZSBjb252ZXJzaW9uIGlzIGZhc3RlciBmb3IgZmxvYXQzMiB0aGFuIEZsb2F0MzJBcnJheVxuICAgICAgICAgICAgLy8gT25seSByZWFkIHZpYSBGbG9hdDMyQXJyYXkgaWYgeWVzbm8gPT0gJ2Z1bGwnLlxuICAgICAgICAgICAgaWYgKHllc25vID09ICdmdWxsJykgZXhwb3J0cy5yZWFkRmxvYXRMRSA9IGlzQmlnZUNwdSA/IHJlYWRGbG9hdDMyQXJyYXlSZXYgOiByZWFkRmxvYXQzMkFycmF5O1xuICAgICAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSBpc0JpZ2VDcHUgPyB3cml0ZUZsb2F0MzJBcnJheVJldiA6IHdyaXRlRmxvYXQzMkFycmF5O1xuICAgICAgICAgICAgaWYgKHllc25vID09ICdmdWxsJykgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGlzQmlnZUNwdSA/IHJlYWRGbG9hdDMyQXJyYXkgOiByZWFkRmxvYXQzMkFycmF5UmV2O1xuICAgICAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBpc0JpZ2VDcHUgPyB3cml0ZUZsb2F0MzJBcnJheSA6IHdyaXRlRmxvYXQzMkFycmF5UmV2O1xuXG4gICAgICAgICAgICBleHBvcnRzLnJlYWREb3VibGVMRSA9IGlzQmlnZUNwdSA/IHJlYWRGbG9hdDY0QXJyYXlSZXYgOiByZWFkRmxvYXQ2NEFycmF5O1xuICAgICAgICAgICAgZXhwb3J0cy53cml0ZURvdWJsZUxFID0gaXNCaWdlQ3B1ID8gd3JpdGVGbG9hdDY0QXJyYXlSZXYgOiB3cml0ZUZsb2F0NjRBcnJheTtcbiAgICAgICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUJFID0gaXNCaWdlQ3B1ID8gcmVhZEZsb2F0NjRBcnJheSA6IHJlYWRGbG9hdDY0QXJyYXlSZXY7XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBpc0JpZ2VDcHUgPyB3cml0ZUZsb2F0NjRBcnJheSA6IHdyaXRlRmxvYXQ2NEFycmF5UmV2O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwb3J0cy5fdXNpbmdGbG9hdEFycmF5ID0gJyc7XG4gICAgICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUoIGJ1Ziwgb2Zmc2V0ICkgeyByZXR1cm4gZXhwb3J0cy5yZWFkRmxvYXQoYnVmLCBvZmZzZXQgfHwgMCwgJ2xlJyk7IH1cbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFKCBidWYsIHYsIG9mZnNldCApIHsgZXhwb3J0cy53cml0ZUZsb2F0KGJ1Ziwgdiwgb2Zmc2V0IHx8IDAsICdsZScpOyB9O1xuICAgICAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFKCBidWYsIG9mZnNldCApIHsgcmV0dXJuIGV4cG9ydHMucmVhZEZsb2F0KGJ1Ziwgb2Zmc2V0IHx8IDAsICdiaWdlJyk7IH1cbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFKCBidWYsIHYsIG9mZnNldCApIHsgZXhwb3J0cy53cml0ZUZsb2F0KGJ1Ziwgdiwgb2Zmc2V0IHx8IDAsICdiaWdlJyk7IH1cblxuICAgICAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUoIGJ1Ziwgb2Zmc2V0ICkgeyByZXR1cm4gZXhwb3J0cy5yZWFkRG91YmxlKGJ1Ziwgb2Zmc2V0IHx8IDAsICdsZScpOyB9XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFKCBidWYsIHYsIG9mZnNldCApIHsgZXhwb3J0cy53cml0ZURvdWJsZShidWYsIHYsIG9mZnNldCB8fCAwLCAnbGUnKTsgfVxuICAgICAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUoIGJ1Ziwgb2Zmc2V0ICkgeyByZXR1cm4gZXhwb3J0cy5yZWFkRG91YmxlKGJ1Ziwgb2Zmc2V0IHx8IDAsICdiaWdlJyk7IH1cbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUoIGJ1Ziwgdiwgb2Zmc2V0ICkgeyBleHBvcnRzLndyaXRlRG91YmxlKGJ1Ziwgdiwgb2Zmc2V0IHx8IDAsICdiaWdlJyk7IH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGV4cG9zZSB0aGUgY3B1IGVuZGlhbmlzbSB0byB0aGUgdGVzdHNcbiAgICBleHBvcnRzLl9nZXRCaWdlQ3B1ID0gZnVuY3Rpb24oKSB7IHJldHVybiBpc0JpZ2VDcHUgfTtcbiAgICBleHBvcnRzLl9zZXRCaWdlQ3B1ID0gZnVuY3Rpb24oeWVzbm8pIHsgaXNCaWdlQ3B1ID0geWVzbm8gfTtcblxuICAgIC8vIGJ5IGRlZmF1bHQgZXhwb3J0IHRoZSBzb2Z0d2FyZSBjb252ZXJzaW9uIGZ1bmN0aW9ucywgdGhlblxuICAgIC8vIGlmIGF2YWlsYWJsZSwgY29udmVydCBieSBjYXN0aW5nIGEgRmxvYXRBcnJheSB0byBhIGJ5dGUgYXJyYXlcbiAgICBleHBvcnRzLl91c2VGbG9hdEFycmF5KGZhbHNlKTtcbiAgICBleHBvcnRzLl91c2VGbG9hdEFycmF5KHJlYWRGbG9hdDMyQXJyYXkgJiYgcmVhZEZsb2F0NjRBcnJheSAmJiAnZmFzdGVzdCcpO1xuXG4gICAgLy8gYWNjZWxlcmF0ZSBhY2Nlc3NcbiAgICBpbnN0YWxsLnByb3RvdHlwZSA9IGV4cG9ydHM7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIEJ5dGVCdWZmZXIgPSByZXF1aXJlKCdieXRlYnVmZmVyJyk7XG52YXIgU3RydWN0ID0gcmVxdWlyZSgnLi9zdHJ1Y3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICB0b0J1ZmZlcjogdG9CdWZmZXIsXG4gIGZyb21CdWZmZXI6IGZyb21CdWZmZXJcblxuICAvKipcbiAgICBAc3VtbWFyeSBDcmVhdGUgYSBzZXJpYWxpemVyIGZvciBlYWNoIGRlZmluaXRpb24uXG4gICAgQHJldHVybiB7Q3JlYXRlU3RydWN0fVxuICAqL1xufTtmdW5jdGlvbiBjcmVhdGUoZGVmaW5pdGlvbnMsIHR5cGVzKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHR5cGVzLmNvbmZpZztcblxuICB2YXIgZXJyb3JzID0gW107XG4gIGlmICghY29uZmlnLnNvcnQpIHtcbiAgICBjb25maWcuc29ydCA9IHt9O1xuICB9XG5cbiAgLy8gQmFzaWMgc3RydWN0dXJlIHZhbGlkYXRpb25cbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb25zKSB7XG4gICAgdmFyIHZhbHVlID0gZGVmaW5pdGlvbnNba2V5XTtcbiAgICB2YXIgYmFzZSA9IHZhbHVlLmJhc2UsXG4gICAgICAgIGZpZWxkcyA9IHZhbHVlLmZpZWxkcztcblxuICAgIHZhciB0eXBlT2ZWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpO1xuICAgIGlmICh0eXBlT2ZWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICghYmFzZSAmJiAhZmllbGRzKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdFeHBlY3RpbmcgJyArIGtleSArICcuZmllbGRzIG9yICcgKyBrZXkgKyAnLmJhc2UnKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZSAmJiB0eXBlb2YgYmFzZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ0V4cGVjdGluZyBzdHJpbmcgJyArIGtleSArICcuYmFzZScpO1xuICAgICAgfVxuICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICBpZiAoKHR5cGVvZiBmaWVsZHMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGZpZWxkcykpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGVycm9ycy5wdXNoKCdFeHBlY3Rpbmcgb2JqZWN0ICcgKyBrZXkgKyAnLmZpZWxkcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAodmFyIGZpZWxkIGluIGZpZWxkcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHNbZmllbGRdICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBlcnJvcnMucHVzaCgnRXhwZWN0aW5nIHN0cmluZyBpbiAnICsga2V5ICsgJy5maWVsZHMuJyArIGZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVPZlZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgZXJyb3JzLnB1c2goJ0V4cGVjdGluZyBvYmplY3Qgb3Igc3RyaW5nIHVuZGVyICcgKyBrZXkgKyAnLCBpbnN0ZWFkIGdvdCAnICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gIH1cblxuICAvLyBLZXlzIHdpdGggb2JqZWN0cyBhcmUgc3RydWN0c1xuICB2YXIgc3RydWN0cyA9IHt9O1xuICBmb3IgKHZhciBfa2V5IGluIGRlZmluaXRpb25zKSB7XG4gICAgdmFyIF92YWx1ZSA9IGRlZmluaXRpb25zW19rZXldO1xuICAgIGlmICgodHlwZW9mIF92YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3ZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICBzdHJ1Y3RzW19rZXldID0gU3RydWN0KF9rZXksIGNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzb2x2ZSB1c2VyLWZyaWVuZGx5IHR5cGVkZWYgbmFtZXMgcG9pbnRpbmcgdG8gYSBuYXRpdmUgdHlwZSAob3IgYW5vdGhlciB0eXBlZGVmKVxuICBmb3IgKHZhciBfa2V5MiBpbiBkZWZpbml0aW9ucykge1xuICAgIHZhciBfdmFsdWUyID0gZGVmaW5pdGlvbnNbX2tleTJdO1xuICAgIGlmICh0eXBlb2YgX3ZhbHVlMiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZXNbX3ZhbHVlMl07XG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICB0eXBlc1tfa2V5Ml0gPSB0eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXhhbXBsZToga2V5ID09PSAnZmllbGRzJyAmJiB2YWx1ZSA9PT0gZmllbGRbXVxuICAgICAgICB2YXIgc3RydWN0ID0gZ2V0VHlwZU9yU3RydWN0KF9rZXkyLCBfdmFsdWUyKTsgLy8gdHlwZSA9IHZlY3RvcihmaWVsZClcbiAgICAgICAgaWYgKHN0cnVjdCkge1xuICAgICAgICAgIHN0cnVjdHNbX2tleTJdID0gc3RydWN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9ycy5wdXNoKCdVbnJlY29nbml6ZWQgdHlwZSBvciBzdHJ1Y3QgJyArIF9rZXkyICsgJy4nICsgX3ZhbHVlMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBTdHJ1Y3RzIGNhbiBpbmhlcml0IGFub3RoZXIgc3RydWN0LCB0aGV5IHdpbGwgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2VcbiAgZm9yICh2YXIgX2tleTMgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICB2YXIgdGhpc1N0cnVjdCA9IHN0cnVjdHNbX2tleTNdO1xuICAgIGlmICghdGhpc1N0cnVjdCkgY29udGludWU7XG4gICAgdmFyIF92YWx1ZTMgPSBkZWZpbml0aW9uc1tfa2V5M107XG4gICAgaWYgKCh0eXBlb2YgX3ZhbHVlMyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3ZhbHVlMykpID09PSAnb2JqZWN0JyAmJiBfdmFsdWUzLmJhc2UpIHtcbiAgICAgIHZhciBiYXNlID0gX3ZhbHVlMy5iYXNlO1xuICAgICAgdmFyIGJhc2VTdHJ1Y3QgPSBzdHJ1Y3RzW2Jhc2VdO1xuICAgICAgaWYgKCFiYXNlU3RydWN0KSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdNaXNzaW5nICcgKyBiYXNlICsgJyBpbiAnICsgX2tleTMgKyAnLmJhc2UnKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzU3RydWN0LmFkZCgnJywgc3RydWN0UHRyKGJhc2VTdHJ1Y3QpKTtcbiAgICB9XG4gIH1cblxuICAvLyBDcmVhdGUgdHlwZXMgZnJvbSBhIHN0cmluZyAoZXggdmVjdG9yW1R5cGVdKVxuICBmdW5jdGlvbiBnZXRUeXBlT3JTdHJ1Y3Qoa2V5LCBUeXBlLCB0eXBlQXJncywgZmllbGROYW1lKSB7XG4gICAgdmFyIHR5cGVhdHR5ID0gcGFyc2VUeXBlKFR5cGUpO1xuICAgIGlmICghdHlwZWF0dHkpIHJldHVybiBudWxsO1xuICAgIHZhciBuYW1lID0gdHlwZWF0dHkubmFtZSxcbiAgICAgICAgYW5ub3RhdGlvbiA9IHR5cGVhdHR5LmFubm90YXRpb24sXG4gICAgICAgIGFycmF5VHlwZSA9IHR5cGVhdHR5LmFycmF5VHlwZTtcblxuICAgIHZhciByZXQgPSB2b2lkIDA7XG4gICAgaWYgKGFubm90YXRpb24pIHtcbiAgICAgIC8vIGFueV90eXBlPGZpZWxkX25hbWUsIHR5cGVfbmFtZT5cbiAgICAgIHZhciBfdHlwZSA9IHR5cGVzW25hbWVdO1xuICAgICAgaWYgKF90eXBlID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ01pc3NpbmcgJyArIG5hbWUgKyAnIGluICcgKyBUeXBlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgYW5uVHlwZXMgPSBbXTtcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhbm5vdGF0aW9uW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBhbm5UeXBlTmFtZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgdmFyIGFublR5cGUgPSBnZXRUeXBlT3JTdHJ1Y3Qoa2V5LCBhbm5UeXBlTmFtZSwgbnVsbCwgZmllbGROYW1lKTtcbiAgICAgICAgICBpZiAoIWFublR5cGUpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdNaXNzaW5nICcgKyBhbm5UeXBlTmFtZSArICcgaW4gJyArIFR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFublR5cGVzLnB1c2goYW5uVHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXQgPSBfdHlwZShhbm5UeXBlcyk7XG4gICAgfSBlbHNlIGlmIChhcnJheVR5cGUgPT0gbnVsbCkge1xuICAgICAgLy8gQW55VHlwZVxuICAgICAgdmFyIGZpZWxkU3RydWN0ID0gc3RydWN0c1tuYW1lXTtcbiAgICAgIGlmIChmaWVsZFN0cnVjdCkge1xuICAgICAgICByZXR1cm4gZmllbGRTdHJ1Y3Q7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdHlwZTIgPSB0eXBlc1tuYW1lXTtcbiAgICAgIGlmICghX3R5cGUyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyB0eXBlcyBuZWVkIHRvIGJlIGluc3RhbnRpYXRlZFxuICAgICAgcmV0ID0gX3R5cGUyKHR5cGVBcmdzKTtcbiAgICB9IGVsc2UgaWYgKGFycmF5VHlwZSA9PT0gJycpIHtcbiAgICAgIC8vIEFueVR5cGVbXVxuICAgICAgdmFyIG5hbWVUeXBlID0gZ2V0VHlwZU9yU3RydWN0KGtleSwgdHlwZWF0dHkubmFtZSwgbnVsbCwgZmllbGROYW1lKTtcbiAgICAgIGlmICghbmFtZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3J0ID0gY29uZmlnLnNvcnRba2V5ICsgJy4nICsgZmllbGROYW1lXSB8fCBmYWxzZTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzb3J0PycsIGAke2tleX0uJHtmaWVsZE5hbWV9YCwgc29ydCwgY29uZmlnLnNvcnQpXG4gICAgICByZXQgPSB0eXBlcy52ZWN0b3IobmFtZVR5cGUsIHNvcnQpO1xuICAgIH0gZWxzZSBpZiAoYXJyYXlUeXBlLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHZlY3RvcltUeXBlXVxuICAgICAgdmFyIGFycmF5VHMgPSBnZXRUeXBlT3JTdHJ1Y3Qoa2V5LCB0eXBlYXR0eS5hcnJheVR5cGUsIG51bGwsIGZpZWxkTmFtZSk7XG4gICAgICBpZiAoIWFycmF5VHMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ01pc3NpbmcgJyArIHR5cGVhdHR5LmFycmF5VHlwZSArICcgaW4gJyArIFR5cGUpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBiYXNlVHMgPSBnZXRUeXBlT3JTdHJ1Y3Qoa2V5LCB0eXBlYXR0eS5uYW1lLCBhcnJheVRzLCBmaWVsZE5hbWUpO1xuICAgICAgaWYgKCFiYXNlVHMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ01pc3NpbmcgJyArIHR5cGVhdHR5Lm5hbWUgKyAnIGluICcgKyBUeXBlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXQgPSBiYXNlVHM7XG4gICAgfVxuICAgIHJldHVybiB0eXBlYXR0eS5vcHRpb25hbCA/IHR5cGVzLm9wdGlvbmFsKHJldCkgOiByZXQ7XG4gIH1cblxuICAvLyBBZGQgYWxsIHRoZSBmaWVsZHMuICBUaGFua3MgdG8gc3RydWN0UHRyIG5vIG5lZWQgdG8gbG9vayBhdCBiYXNlIHR5cGVzLlxuICBmb3IgKHZhciBfa2V5NCBpbiBkZWZpbml0aW9ucykge1xuICAgIHZhciBfdGhpc1N0cnVjdCA9IHN0cnVjdHNbX2tleTRdO1xuICAgIGlmICghX3RoaXNTdHJ1Y3QpIGNvbnRpbnVlO1xuICAgIHZhciBfdmFsdWU0ID0gZGVmaW5pdGlvbnNbX2tleTRdO1xuICAgIGlmICghX3ZhbHVlNC5maWVsZHMpIGNvbnRpbnVlO1xuICAgIHZhciBmaWVsZHMgPSBfdmFsdWU0LmZpZWxkcztcblxuICAgIGZvciAodmFyIEZpZWxkIGluIGZpZWxkcykge1xuICAgICAgdmFyIFR5cGUgPSBmaWVsZHNbRmllbGRdO1xuICAgICAgdmFyIHRzID0gZ2V0VHlwZU9yU3RydWN0KF9rZXk0LCBUeXBlLCBudWxsLCBGaWVsZCk7XG4gICAgICBpZiAoIXRzKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdNaXNzaW5nICcgKyBUeXBlICsgJyBpbiAnICsgX2tleTQgKyAnLmZpZWxkcy4nICsgRmllbGQpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIF90aGlzU3RydWN0LmFkZChGaWVsZCwgdHMpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgLy8gJ3N0cnVjdHMnIGNvdWxkIGNvbnRhaW4gaW52YWxpZCByZWZlcmVuY2VzXG4gICAgcmV0dXJuIHsgZXJyb3JzOiBlcnJvcnMgfTtcbiAgfVxuXG4gIHJldHVybiB7IGVycm9yczogZXJyb3JzLCBzdHJ1Y3RzOiBzdHJ1Y3RzIH07XG59XG5cbnZhciBwYXJzZVR5cGUgPSBmdW5jdGlvbiBwYXJzZVR5cGUobmFtZSkge1xuICBpZiAoIW5hbWUgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuYW1lID0gbmFtZS50cmltKCk7XG5cbiAgdmFyIGFubm90YXRpb25NYXRjaCA9IG5hbWUubWF0Y2goLzwoLiopPi8pO1xuICBpZiAoYW5ub3RhdGlvbk1hdGNoKSB7XG4gICAgdmFyIGFubm90YXRpb24gPSBhbm5vdGF0aW9uTWF0Y2ggPyBhbm5vdGF0aW9uTWF0Y2hbMV0ucmVwbGFjZSgvIC9nLCAnJykuc3BsaXQoJywnKSA6IG51bGw7XG5cbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGFubm90YXRpb25NYXRjaFswXSwgJycpLnRyaW0oKTtcbiAgICByZXR1cm4geyBuYW1lOiBuYW1lLCBhbm5vdGF0aW9uOiBhbm5vdGF0aW9uIH07XG4gIH1cblxuICB2YXIgYXJyYXlNYXRjaCA9IG5hbWUubWF0Y2goL1xcWyguKilcXF0vKTtcbiAgdmFyIGFycmF5VHlwZSA9IGFycmF5TWF0Y2ggPyBhcnJheU1hdGNoWzFdLnRyaW0oKSA6IG51bGw7XG5cbiAgaWYgKGFycmF5TWF0Y2gpIHtcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGFycmF5TWF0Y2hbMF0sICcnKS50cmltKCk7XG4gIH1cblxuICB2YXIgb3B0aW9uYWwgPSBmYWxzZTtcbiAgaWYgKC9cXD8kLy50ZXN0KG5hbWUpKSB7XG4gICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMSk7XG4gICAgb3B0aW9uYWwgPSB0cnVlO1xuICB9XG4gIHJldHVybiB7IG5hbWU6IG5hbWUsIGFycmF5VHlwZTogYXJyYXlUeXBlLCBvcHRpb25hbDogb3B0aW9uYWwgfTtcbn07XG5cbi8qKlxuICBCYXNlIHR5cGVzIGFsbCBwb2ludCB0byB0aGUgc2FtZSBzdHJ1Y3QuXG5cbiAgTm90ZSwgYXBwZW5kQnl0ZUJ1ZmZlciBoYXMgbm8gcmV0dXJuIHR5cGUuXG4qL1xudmFyIHN0cnVjdFB0ciA9IGZ1bmN0aW9uIHN0cnVjdFB0cih0eXBlKSB7XG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHJldHVybiB0eXBlLmZyb21CeXRlQnVmZmVyKGIpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlLmZyb21PYmplY3QodmFsdWUpO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZS50b09iamVjdCh2YWx1ZSk7XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gdG9CdWZmZXIodHlwZSwgdmFsdWUpIHtcbiAgdmFyIHN0cnVjdCA9IHR5cGUuZnJvbU9iamVjdCh2YWx1ZSk7XG4gIHJldHVybiBCdWZmZXIuZnJvbSh0b0J5dGVCdWZmZXIodHlwZSwgc3RydWN0KS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG59XG5cbmZ1bmN0aW9uIGZyb21CdWZmZXIodHlwZSwgYnVmZmVyKSB7XG4gIHZhciB0b09iamVjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcblxuICB2YXIgYiA9IEJ5dGVCdWZmZXIuZnJvbUJpbmFyeShidWZmZXIudG9TdHJpbmcoJ2JpbmFyeScpLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuICB2YXIgc3RydWN0ID0gdHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgcmV0dXJuIHRvT2JqZWN0ID8gdHlwZS50b09iamVjdChzdHJ1Y3QpIDogc3RydWN0O1xufVxuXG5mdW5jdGlvbiB0b0J5dGVCdWZmZXIodHlwZSwgdmFsdWUpIHtcbiAgdmFyIGIgPSBuZXcgQnl0ZUJ1ZmZlcihCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFksIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTik7XG4gIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSk7XG4gIHJldHVybiBiLmNvcHkoMCwgYi5vZmZzZXQpO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJ5dGVCdWZmZXIgPSByZXF1aXJlKCdieXRlYnVmZmVyJyk7XG5cbi8qKlxuICBAY2xhc3MgU3RydWN0XG5cbiAgQGFyZyB7b2JqZWN0fSBjb25maWcub3ZlcnJpZGUgPSB7XG4gICAgJ01lc3NhZ2UuZGF0YS5hcHBlbmRCeXRlQnVmZmVyJzogKHtmaWVsZHMsIG9iamVjdCwgYn0pID0+IHsuLn1cbiAgfVxuICBSYXJlIGNhc2VzIHdoZXJlIHNwZWNpYWxpemVkIHNlcmlsaXphdGlvbiBpcyBuZWVkZWQgKGV4IEEgTWVzc2FnZSBvYmplY3QgaGFzXG4gICd0eXBlJyBhbmQgJ2RhdGEnIGZpZWxkcyB3aGVyZSBvYmplY3QudHlwZSA9PT0gJ3RyYW5zZmVyJyBjYW4gZGVmaW5lXG4gIHNlcmlhbGl6YXRpb24gdGltZSBTdHJ1Y3QgbmVlZGVkIGZvciAnZGF0YScgLi4gVGhpcyBzYXZlcyBjb21wbGV4aXR5IGZvciB0aGVcbiAgZW5kLXVzZXIncyB3b3JraW5nIHdpdGgganNvbi4gIFNlZSBvdmVycmlkZSB1bml0IHRlc3QuXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7IGRlYnVnOiBmYWxzZSB9O1xuXG4gIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oeyBvdmVycmlkZToge30gfSwgY29uZmlnKTtcbiAgdmFyIGZpZWxkcyA9IHt9O1xuICB2YXIgZmllbGRPbmUgPSB2b2lkIDAsXG4gICAgICBmaWVsZE9uZU5hbWUgPSB2b2lkIDA7XG5cbiAgcmV0dXJuIHtcbiAgICBjb21wYXJlOiBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgIHZhciB2MSA9IGFbZmllbGRPbmVOYW1lXTtcbiAgICAgIHZhciB2MiA9IGJbZmllbGRPbmVOYW1lXTtcblxuICAgICAgaWYgKCFmaWVsZE9uZSB8fCAhZmllbGRPbmUuY29tcGFyZSkge1xuICAgICAgICByZXR1cm4gdjEgPiB2MiA/IDEgOiB2MSA8IHYyID8gLTEgOiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmllbGRPbmUuY29tcGFyZSh2MSwgdjIpO1xuICAgIH0sXG5cblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIGFkZDogZnVuY3Rpb24gYWRkKGZpZWxkTmFtZSwgdHlwZSkge1xuICAgICAgZmllbGRzW2ZpZWxkTmFtZV0gPSB0eXBlO1xuICAgICAgaWYgKGZpZWxkT25lID09IG51bGwpIHtcbiAgICAgICAgZmllbGRPbmUgPSB0eXBlO1xuICAgICAgICBmaWVsZE9uZU5hbWUgPSBmaWVsZE5hbWU7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLy8gQ29tcGxldGUgbGlzdCBvZiBmaWVsZHMsIGFmdGVyIHJlc29sdmluZyBcImJhc2VcIiBpbmhlcml0YW5jZVxuICAgIGZpZWxkczogZmllbGRzLFxuXG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgIHZhciBmaWVsZCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKGZpZWxkIGluIGZpZWxkcykge1xuICAgICAgICAgIHZhciB0eXBlID0gZmllbGRzW2ZpZWxkXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG8xID0gYi5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoZmllbGQgPT09ICcnKSB7XG4gICAgICAgICAgICAgIC8vIHN0cnVjdFB0clxuICAgICAgICAgICAgICBvYmplY3QgPSB0eXBlLmZyb21CeXRlQnVmZmVyKGIsIGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgZnJvbUJ5dGVCdWZmZXIgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcuJyArIGZpZWxkICsgJy5mcm9tQnl0ZUJ1ZmZlciddO1xuICAgICAgICAgICAgICBpZiAoZnJvbUJ5dGVCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBmcm9tQnl0ZUJ1ZmZlcih7IGZpZWxkczogZmllbGRzLCBvYmplY3Q6IG9iamVjdCwgYjogYiwgY29uZmlnOiBjb25maWcgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0W2ZpZWxkXSA9IHR5cGUuZnJvbUJ5dGVCdWZmZXIoYiwgY29uZmlnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgICAgICAgICBpZiAodHlwZS5zdHJ1Y3QpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHR5cGUuc3RydWN0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIC8vIGh1bWFuIHJlYWRhYmxlIHRleHRcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdHlwZS50b09iamVjdChmaWVsZCA9PT0gJycgPyBvYmplY3QgOiBvYmplY3RbZmllbGRdLCBjb25maWcpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdmcm9tQnl0ZUJ1ZmZlciBkZWJ1ZyBlcnJvcjonLCBlcnJvcilcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBfYiA9IGIuY29weShvMSwgYi5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Zyb21CeXRlQnVmZmVyJywgbmFtZSArICcuJyArIGZpZWxkLCAnXFwnJyArIHZhbHVlICsgJ1xcJycsIF9iLnRvSGV4KCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlICsgJyBpbiAnICsgbmFtZSArICcuJyArIGZpZWxkKTtcbiAgICAgICAgICAgIGIucHJpbnREZWJ1ZygpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gJyBpbiAnICsgbmFtZSArICcuJyArIGZpZWxkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIG9iamVjdCkge1xuICAgICAgdmFyIGZpZWxkID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoZmllbGQgaW4gZmllbGRzKSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBmaWVsZHNbZmllbGRdO1xuICAgICAgICAgIGlmIChmaWVsZCA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIHN0cnVjdFB0clxuICAgICAgICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIG9iamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcHBlbmRCeXRlQnVmZmVyID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLicgKyBmaWVsZCArICcuYXBwZW5kQnl0ZUJ1ZmZlciddO1xuICAgICAgICAgICAgaWYgKGFwcGVuZEJ5dGVCdWZmZXIpIHtcbiAgICAgICAgICAgICAgYXBwZW5kQnl0ZUJ1ZmZlcih7IGZpZWxkczogZmllbGRzLCBvYmplY3Q6IG9iamVjdCwgYjogYiB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvYmplY3RbZmllbGRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZXJyb3IubWVzc2FnZSArPSAnICcgKyBuYW1lICsgJy4nICsgZmllbGQgKyAnID0gJyArIEpTT04uc3RyaW5naWZ5KG9iamVjdFtmaWVsZF0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gY2lyY3VsYXIgcmVmXG4gICAgICAgICAgZXJyb3IubWVzc2FnZSArPSAnICcgKyBuYW1lICsgJy4nICsgZmllbGQgKyAnID0gJyArIG9iamVjdFtmaWVsZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHNlcmlhbGl6ZWRPYmplY3QpIHtcbiAgICAgIHZhciBmcm9tT2JqZWN0X3N0cnVjdCA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy5mcm9tT2JqZWN0J107XG4gICAgICBpZiAoZnJvbU9iamVjdF9zdHJ1Y3QpIHtcbiAgICAgICAgdmFyIHJldCA9IGZyb21PYmplY3Rfc3RydWN0KHNlcmlhbGl6ZWRPYmplY3QpO1xuICAgICAgICBpZiAocmV0ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHZhciBmaWVsZCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKGZpZWxkIGluIGZpZWxkcykge1xuICAgICAgICAgIC8vIGlmKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgICAgIC8vICAgY29uc29sZS5lcnJvcihuYW1lLCBmaWVsZCwgJyhmcm9tT2JqZWN0KScpXG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIHZhciB0eXBlID0gZmllbGRzW2ZpZWxkXTtcbiAgICAgICAgICBpZiAoZmllbGQgPT09ICcnKSB7XG4gICAgICAgICAgICAvLyBzdHJ1Y3RQdHJcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSB0eXBlLmZyb21PYmplY3Qoc2VyaWFsaXplZE9iamVjdCk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc3VsdCwgb2JqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZyb21PYmplY3QgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcuJyArIGZpZWxkICsgJy5mcm9tT2JqZWN0J107XG4gICAgICAgICAgICBpZiAoZnJvbU9iamVjdCkge1xuICAgICAgICAgICAgICBmcm9tT2JqZWN0KHsgZmllbGRzOiBmaWVsZHMsIG9iamVjdDogc2VyaWFsaXplZE9iamVjdCwgcmVzdWx0OiByZXN1bHQgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzZXJpYWxpemVkT2JqZWN0W2ZpZWxkXTtcbiAgICAgICAgICAgICAgdmFyIF9vYmplY3QgPSB0eXBlLmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICAgICAgICByZXN1bHRbZmllbGRdID0gX29iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gJyAnICsgbmFtZSArICcuJyArIGZpZWxkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICAgIHZhciBzZXJpYWxpemVkT2JqZWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgdmFyIHRvT2JqZWN0X3N0cnVjdCA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy50b09iamVjdCddO1xuICAgICAgaWYgKHRvT2JqZWN0X3N0cnVjdCkge1xuICAgICAgICB2YXIgcmV0ID0gdG9PYmplY3Rfc3RydWN0KHNlcmlhbGl6ZWRPYmplY3QpO1xuICAgICAgICBpZiAocmV0ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHZhciBmaWVsZCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBpZiAoIWZpZWxkcykgeyByZXR1cm4gcmVzdWx0IH1cblxuICAgICAgICBmb3IgKGZpZWxkIGluIGZpZWxkcykge1xuICAgICAgICAgIHZhciB0eXBlID0gZmllbGRzW2ZpZWxkXTtcblxuICAgICAgICAgIHZhciB0b09iamVjdCA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy4nICsgZmllbGQgKyAnLnRvT2JqZWN0J107XG4gICAgICAgICAgaWYgKHRvT2JqZWN0KSB7XG4gICAgICAgICAgICB0b09iamVjdCh7IGZpZWxkczogZmllbGRzLCBvYmplY3Q6IHNlcmlhbGl6ZWRPYmplY3QsIHJlc3VsdDogcmVzdWx0LCBjb25maWc6IGNvbmZpZyB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZpZWxkID09PSAnJykge1xuICAgICAgICAgICAgICAvLyBzdHJ1Y3RQdHJcbiAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHR5cGUudG9PYmplY3Qoc2VyaWFsaXplZE9iamVjdCwgY29uZmlnKTtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIG9iamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgX29iamVjdDIgPSB0eXBlLnRvT2JqZWN0KHNlcmlhbGl6ZWRPYmplY3QgPyBzZXJpYWxpemVkT2JqZWN0W2ZpZWxkXSA6IG51bGwsIGNvbmZpZyk7XG4gICAgICAgICAgICAgIHJlc3VsdFtmaWVsZF0gPSBfb2JqZWN0MjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZWRPYmplY3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNlcmlhbGl6ZWRPYmplY3RbZmllbGRdO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGFwcGVuZEJ5dGVCdWZmZXIgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcuJyArIGZpZWxkICsgJy5hcHBlbmRCeXRlQnVmZmVyJ107XG4gICAgICAgICAgICAgICAgICBpZiAodG9PYmplY3QgJiYgYXBwZW5kQnl0ZUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBhcHBlbmRCeXRlQnVmZmVyKHsgZmllbGRzOiBmaWVsZHMsIG9iamVjdDogc2VyaWFsaXplZE9iamVjdCwgYjogYiB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGIgPSBiLmNvcHkoMCwgYi5vZmZzZXQpO1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCd0b09iamVjdCcsIG5hbWUgKyAnLicgKyBmaWVsZCwgJ1xcJycgKyByZXN1bHRbZmllbGRdICsgJ1xcJycsIGIudG9IZXgoKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAvLyB3b3JrLWFyb3VuZCB0byBwcmV2ZW50IGRlYnVnIHRpbWUgY3Jhc2hcbiAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZSA9IG5hbWUgKyAnLicgKyBmaWVsZCArICcgJyArIGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSAnICcgKyBuYW1lICsgJy4nICsgZmllbGQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoYWluOiByZXF1aXJlKCcuL2NoYWluLmpzb24nKSxcbiAgaGlzdG9yeTogcmVxdWlyZSgnLi9oaXN0b3J5Lmpzb24nKVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJ2lzb21vcnBoaWMtZmV0Y2gnKTtcbnZhciBjYW1lbENhc2UgPSByZXF1aXJlKCdjYW1lbC1jYXNlJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vZXhwb3J0ZWQtaGVscGVycycpO1xudmFyIHByb2Nlc3NBcmdzID0gcmVxdWlyZSgnLi9wcm9jZXNzLWFyZ3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhcGlHZW47XG5cbmZ1bmN0aW9uIGFwaUdlbih2ZXJzaW9uLCBkZWZpbml0aW9ucykge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgY29uZmlnRGVmYXVsdHMgPSB7XG4gICAgaHR0cEVuZHBvaW50OiAnaHR0cDovLzEyNy4wLjAuMTo4ODg4JyxcbiAgICB2ZXJib3NlOiBmYWxzZSxcbiAgICBsb2dnZXI6IHtcbiAgICAgIGxvZzogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy52ZXJib3NlID8gKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpIDogbnVsbDtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICAgIHZhciBfY29uc29sZTI7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy52ZXJib3NlID8gKF9jb25zb2xlMiA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlMiwgYXJndW1lbnRzKSA6IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGFwcGx5RGVmYXVsdHModGFyZ2V0LCBkZWZhdWx0cykge1xuICAgIE9iamVjdC5rZXlzKGRlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0YXJnZXRba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gZGVmYXVsdHNba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFwcGx5RGVmYXVsdHMoY29uZmlnLCBjb25maWdEZWZhdWx0cyk7XG4gIGFwcGx5RGVmYXVsdHMoY29uZmlnLmxvZ2dlciwgY29uZmlnRGVmYXVsdHMubG9nZ2VyKTtcblxuICB2YXIgYXBpID0ge307XG4gIHZhciBodHRwRW5kcG9pbnQgPSBjb25maWcuaHR0cEVuZHBvaW50O1xuXG5cbiAgZm9yICh2YXIgYXBpR3JvdXAgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICBmb3IgKHZhciBhcGlNZXRob2QgaW4gZGVmaW5pdGlvbnNbYXBpR3JvdXBdKSB7XG4gICAgICB2YXIgbWV0aG9kTmFtZSA9IGNhbWVsQ2FzZShhcGlNZXRob2QpO1xuICAgICAgdmFyIHVybCA9IGh0dHBFbmRwb2ludCArICcvJyArIHZlcnNpb24gKyAnLycgKyBhcGlHcm91cCArICcvJyArIGFwaU1ldGhvZDtcbiAgICAgIGFwaVttZXRob2ROYW1lXSA9IGZldGNoTWV0aG9kKG1ldGhvZE5hbWUsIHVybCwgZGVmaW5pdGlvbnNbYXBpR3JvdXBdW2FwaU1ldGhvZF0sIGNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaGVscGVyKSB7XG4gICAgLy8gSW5zZXJ0IGBhcGlgIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgdG8gYWxsIEFQSSBoZWxwZXJzXG4gICAgYXBpW2hlbHBlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2hlbHBlcnMkYXBpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKF9oZWxwZXJzJGFwaSA9IGhlbHBlcnMuYXBpKVtoZWxwZXJdLmFwcGx5KF9oZWxwZXJzJGFwaSwgW2FwaV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICB9O1xuXG4gIGZvciAodmFyIGhlbHBlciBpbiBoZWxwZXJzLmFwaSkge1xuICAgIF9sb29wKGhlbHBlcik7XG4gIH1cbiAgcmV0dXJuIGFwaTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hNZXRob2QobWV0aG9kTmFtZSwgdXJsLCBkZWZpbml0aW9uLCBjb25maWcpIHtcbiAgdmFyIGxvZ2dlciA9IGNvbmZpZy5sb2dnZXI7XG5cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmxvZyh1c2FnZShtZXRob2ROYW1lLCBkZWZpbml0aW9uKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnNGb3JtYXR0ZXIgPSBmdW5jdGlvbiBvcHRpb25zRm9ybWF0dGVyKG9wdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4geyBicm9hZGNhc3Q6IG9wdGlvbiB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcHJvY2Vzc2VkQXJncyA9IHByb2Nlc3NBcmdzKGFyZ3MsIE9iamVjdC5rZXlzKGRlZmluaXRpb24ucGFyYW1zIHx8IFtdKSwgbWV0aG9kTmFtZSwgb3B0aW9uc0Zvcm1hdHRlcik7XG5cbiAgICB2YXIgcGFyYW1zID0gcHJvY2Vzc2VkQXJncy5wYXJhbXMsXG4gICAgICAgIG9wdGlvbnMgPSBwcm9jZXNzZWRBcmdzLm9wdGlvbnMsXG4gICAgICAgIHJldHVyblByb21pc2UgPSBwcm9jZXNzZWRBcmdzLnJldHVyblByb21pc2U7XG4gICAgdmFyIGNhbGxiYWNrID0gcHJvY2Vzc2VkQXJncy5jYWxsYmFjaztcblxuXG4gICAgdmFyIGJvZHkgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuICAgIGlmIChsb2dnZXIubG9nKSB7XG4gICAgICBsb2dnZXIubG9nKCdhcGkgPicsICdwb3N0JywgJ1xcdCcsIHVybCwgYm9keSk7XG4gICAgfVxuICAgIHZhciBmZXRjaENvbmZpZ3VyYXRpb24gPSB7IGJvZHk6IGJvZHksIG1ldGhvZDogJ1BPU1QnIH07XG4gICAgT2JqZWN0LmFzc2lnbihmZXRjaENvbmZpZ3VyYXRpb24sIGNvbmZpZy5mZXRjaENvbmZpZ3VyYXRpb24pO1xuXG4gICAgZmV0Y2godXJsLCBmZXRjaENvbmZpZ3VyYXRpb24pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCkudGhlbihmdW5jdGlvbiAoYm9keVJlc3ApIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoYm9keVJlc3ApO1xuICAgICAgICAgIGVycm9yLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICBlcnJvci5zdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdHVzVGV4dDtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkudGhlbihmdW5jdGlvbiAob2JqZWN0UmVzcCkge1xuICAgICAgaWYgKGxvZ2dlci5sb2cpIHtcbiAgICAgICAgbG9nZ2VyLmxvZygnYXBpIDwnLCAncmVzcG9uc2UnLCAnXFx0JywgdXJsLCBKU09OLnN0cmluZ2lmeShvYmplY3RSZXNwKSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBvYmplY3RSZXNwKTtcbiAgICAgIH0gY2F0Y2ggKGNhbGxiYWNrRXJyb3IpIHtcbiAgICAgICAgaWYgKGxvZ2dlci5lcnJvcikge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignYXBpIDwnLCAncmVzdWx0IGNhbGxiYWNrJywgJzonLCBjYWxsYmFja0Vycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnJztcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIG5vZGVvcyBmb3JtYXQgKGZhaWwgc2FmZSlcbiAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UoZXJyb3IubWVzc2FnZSkuZXJyb3IuZGV0YWlsc1swXTtcbiAgICAgIH0gY2F0Y2ggKGUyKSB7fVxuXG4gICAgICBpZiAobG9nZ2VyLmVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignYXBpIDwnLCAnZXJyb3InLCAnXFx0JywgbWVzc2FnZSwgdXJsLCBib2R5KTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfSBjYXRjaCAoY2FsbGJhY2tFcnJvcikge1xuICAgICAgICBpZiAobG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKCdhcGkgPCcsICdlcnJvciBjYWxsYmFjaycsICc6JywgY2FsbGJhY2tFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXR1cm5Qcm9taXNlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2FnZShtZXRob2ROYW1lLCBkZWZpbml0aW9uKSB7XG4gIHZhciB1c2FnZSA9ICcnO1xuICB2YXIgb3V0ID0gZnVuY3Rpb24gb3V0KHN0cikge1xuICAgIHVzYWdlICs9IHN0ciArICdcXG4nO1xuICB9O1xuXG4gIG91dCgnVVNBR0UnKTtcbiAgb3V0KG1ldGhvZE5hbWUgKyAnIC0gJyArIGRlZmluaXRpb24uYnJpZWYpO1xuXG4gIG91dCgnXFxuUEFSQU1FVEVSUycpO1xuICBpZiAoZGVmaW5pdGlvbi5wYXJhbXMpIHtcbiAgICBvdXQoSlNPTi5zdHJpbmdpZnkoZGVmaW5pdGlvbi5wYXJhbXMsIG51bGwsIDIpKTtcbiAgfSBlbHNlIHtcbiAgICBvdXQoJ25vbmUnKTtcbiAgfVxuXG4gIG91dCgnXFxuUkVUVVJOUycpO1xuICBpZiAoZGVmaW5pdGlvbi5yZXN1bHRzKSB7XG4gICAgb3V0KCcnICsgSlNPTi5zdHJpbmdpZnkoZGVmaW5pdGlvbi5yZXN1bHRzLCBudWxsLCAyKSk7XG4gIH0gZWxzZSB7XG4gICAgb3V0KCdubyBkYXRhJyk7XG4gIH1cblxuICBvdXQoJ1xcbkVSUk9SUycpO1xuICBpZiAoZGVmaW5pdGlvbi5lcnJvcnMpIHtcbiAgICBmb3IgKHZhciBlcnJvciBpbiBkZWZpbml0aW9uLmVycm9ycykge1xuICAgICAgdmFyIGVycm9yRGVzYyA9IGRlZmluaXRpb24uZXJyb3JzW2Vycm9yXTtcbiAgICAgIG91dCgnJyArIGVycm9yICsgKGVycm9yRGVzYyA/ICcgLSAnICsgZXJyb3JEZXNjIDogJycpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0KCdub3RoaW5nIHNwZWNpYWwnKTtcbiAgfVxuXG4gIHJldHVybiB1c2FnZTtcbn0iLCIvLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcbiIsInZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmXG4gICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbnZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsXG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIHByZVByb2Nlc3NlZEhlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICBpZiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IHNlbGYuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICB9XG5cbiAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgfSlcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFzZWxmLmZldGNoKSB7XG4gIHNlbGYuZmV0Y2ggPSBmZXRjaFxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG59XG4iLCJ2YXIgdXBwZXJDYXNlID0gcmVxdWlyZSgndXBwZXItY2FzZScpXG52YXIgbm9DYXNlID0gcmVxdWlyZSgnbm8tY2FzZScpXG5cbi8qKlxuICogQ2FtZWwgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtsb2NhbGVdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBsb2NhbGUsIG1lcmdlTnVtYmVycykge1xuICB2YXIgcmVzdWx0ID0gbm9DYXNlKHZhbHVlLCBsb2NhbGUpXG5cbiAgLy8gUmVwbGFjZSBwZXJpb2RzIGJldHdlZW4gbnVtZXJpYyBlbnRpdGllcyB3aXRoIGFuIHVuZGVyc2NvcmUuXG4gIGlmICghbWVyZ2VOdW1iZXJzKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoLyAoPz1cXGQpL2csICdfJylcbiAgfVxuXG4gIC8vIFJlcGxhY2Ugc3BhY2VzIGJldHdlZW4gd29yZHMgd2l0aCBhbiB1cHBlciBjYXNlZCBjaGFyYWN0ZXIuXG4gIHJldHVybiByZXN1bHQucmVwbGFjZSgvICguKS9nLCBmdW5jdGlvbiAobSwgJDEpIHtcbiAgICByZXR1cm4gdXBwZXJDYXNlKCQxLCBsb2NhbGUpXG4gIH0pXG59XG4iLCIvKipcbiAqIFNwZWNpYWwgbGFuZ3VhZ2Utc3BlY2lmaWMgb3ZlcnJpZGVzLlxuICpcbiAqIFNvdXJjZTogZnRwOi8vZnRwLnVuaWNvZGUub3JnL1B1YmxpYy9VQ0QvbGF0ZXN0L3VjZC9TcGVjaWFsQ2FzaW5nLnR4dFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBMQU5HVUFHRVMgPSB7XG4gIHRyOiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNjldL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA2OSc6ICdcXHUwMTMwJ1xuICAgIH1cbiAgfSxcbiAgYXo6IHtcbiAgICByZWdleHA6IC9bXFx1MDA2OV0vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDY5JzogJ1xcdTAxMzAnXG4gICAgfVxuICB9LFxuICBsdDoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDY5XFx1MDA2QVxcdTAxMkZdXFx1MDMwN3xcXHUwMDY5XFx1MDMwN1tcXHUwMzAwXFx1MDMwMVxcdTAzMDNdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA2OVxcdTAzMDcnOiAnXFx1MDA0OScsXG4gICAgICAnXFx1MDA2QVxcdTAzMDcnOiAnXFx1MDA0QScsXG4gICAgICAnXFx1MDEyRlxcdTAzMDcnOiAnXFx1MDEyRScsXG4gICAgICAnXFx1MDA2OVxcdTAzMDdcXHUwMzAwJzogJ1xcdTAwQ0MnLFxuICAgICAgJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMSc6ICdcXHUwMENEJyxcbiAgICAgICdcXHUwMDY5XFx1MDMwN1xcdTAzMDMnOiAnXFx1MDEyOCdcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBVcHBlciBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIHZhciBsYW5nID0gTEFOR1VBR0VTW2xvY2FsZV1cblxuICBzdHIgPSBzdHIgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHN0cilcblxuICBpZiAobGFuZykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGxhbmcucmVnZXhwLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbGFuZy5tYXBbbV0gfSlcbiAgfVxuXG4gIHJldHVybiBzdHIudG9VcHBlckNhc2UoKVxufVxuIiwidmFyIGxvd2VyQ2FzZSA9IHJlcXVpcmUoJ2xvd2VyLWNhc2UnKVxuXG52YXIgTk9OX1dPUkRfUkVHRVhQID0gcmVxdWlyZSgnLi92ZW5kb3Ivbm9uLXdvcmQtcmVnZXhwJylcbnZhciBDQU1FTF9DQVNFX1JFR0VYUCA9IHJlcXVpcmUoJy4vdmVuZG9yL2NhbWVsLWNhc2UtcmVnZXhwJylcbnZhciBDQU1FTF9DQVNFX1VQUEVSX1JFR0VYUCA9IHJlcXVpcmUoJy4vdmVuZG9yL2NhbWVsLWNhc2UtdXBwZXItcmVnZXhwJylcblxuLyoqXG4gKiBTZW50ZW5jZSBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxvY2FsZVxuICogQHBhcmFtICB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIGxvY2FsZSwgcmVwbGFjZW1lbnQpIHtcbiAgaWYgKHN0ciA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICByZXBsYWNlbWVudCA9IHR5cGVvZiByZXBsYWNlbWVudCAhPT0gJ3N0cmluZycgPyAnICcgOiByZXBsYWNlbWVudFxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UgKG1hdGNoLCBpbmRleCwgdmFsdWUpIHtcbiAgICBpZiAoaW5kZXggPT09IDAgfHwgaW5kZXggPT09ICh2YWx1ZS5sZW5ndGggLSBtYXRjaC5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICByZXR1cm4gcmVwbGFjZW1lbnRcbiAgfVxuXG4gIHN0ciA9IFN0cmluZyhzdHIpXG4gICAgLy8gU3VwcG9ydCBjYW1lbCBjYXNlIChcImNhbWVsQ2FzZVwiIC0+IFwiY2FtZWwgQ2FzZVwiKS5cbiAgICAucmVwbGFjZShDQU1FTF9DQVNFX1JFR0VYUCwgJyQxICQyJylcbiAgICAvLyBTdXBwb3J0IG9kZCBjYW1lbCBjYXNlIChcIkNBTUVMQ2FzZVwiIC0+IFwiQ0FNRUwgQ2FzZVwiKS5cbiAgICAucmVwbGFjZShDQU1FTF9DQVNFX1VQUEVSX1JFR0VYUCwgJyQxICQyJylcbiAgICAvLyBSZW1vdmUgYWxsIG5vbi13b3JkIGNoYXJhY3RlcnMgYW5kIHJlcGxhY2Ugd2l0aCBhIHNpbmdsZSBzcGFjZS5cbiAgICAucmVwbGFjZShOT05fV09SRF9SRUdFWFAsIHJlcGxhY2UpXG5cbiAgLy8gTG93ZXIgY2FzZSB0aGUgZW50aXJlIHN0cmluZy5cbiAgcmV0dXJuIGxvd2VyQ2FzZShzdHIsIGxvY2FsZSlcbn1cbiIsIi8qKlxuICogU3BlY2lhbCBsYW5ndWFnZS1zcGVjaWZpYyBvdmVycmlkZXMuXG4gKlxuICogU291cmNlOiBmdHA6Ly9mdHAudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL1NwZWNpYWxDYXNpbmcudHh0XG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIExBTkdVQUdFUyA9IHtcbiAgdHI6IHtcbiAgICByZWdleHA6IC9cXHUwMTMwfFxcdTAwNDl8XFx1MDA0OVxcdTAzMDcvZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMTMwJzogJ1xcdTAwNjknLFxuICAgICAgJ1xcdTAwNDknOiAnXFx1MDEzMScsXG4gICAgICAnXFx1MDA0OVxcdTAzMDcnOiAnXFx1MDA2OSdcbiAgICB9XG4gIH0sXG4gIGF6OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAxMzBdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDEzMCc6ICdcXHUwMDY5JyxcbiAgICAgICdcXHUwMDQ5JzogJ1xcdTAxMzEnLFxuICAgICAgJ1xcdTAwNDlcXHUwMzA3JzogJ1xcdTAwNjknXG4gICAgfVxuICB9LFxuICBsdDoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDQ5XFx1MDA0QVxcdTAxMkVcXHUwMENDXFx1MDBDRFxcdTAxMjhdL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA0OSc6ICdcXHUwMDY5XFx1MDMwNycsXG4gICAgICAnXFx1MDA0QSc6ICdcXHUwMDZBXFx1MDMwNycsXG4gICAgICAnXFx1MDEyRSc6ICdcXHUwMTJGXFx1MDMwNycsXG4gICAgICAnXFx1MDBDQyc6ICdcXHUwMDY5XFx1MDMwN1xcdTAzMDAnLFxuICAgICAgJ1xcdTAwQ0QnOiAnXFx1MDA2OVxcdTAzMDdcXHUwMzAxJyxcbiAgICAgICdcXHUwMTI4JzogJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMydcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBMb3dlcmNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUpIHtcbiAgdmFyIGxhbmcgPSBMQU5HVUFHRVNbbG9jYWxlXVxuXG4gIHN0ciA9IHN0ciA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyKVxuXG4gIGlmIChsYW5nKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBsYW5nLm1hcFttXSB9KVxuICB9XG5cbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IC9bXkEtWmEtelxceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQzAtOVxceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MDlGNC1cXHUwOUY5XFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEI3Mi1cXHUwQjc3XFx1MEJFNi1cXHUwQkYyXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdFXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDc1XFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjMzXFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTM2OS1cXHUxMzdDXFx1MTZFRS1cXHUxNkYwXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOURBXFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1MjA3MFxcdTIwNzQtXFx1MjA3OVxcdTIwODAtXFx1MjA4OVxcdTIxNTAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDRkRcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNBXFx1MzE5Mi1cXHUzMTk1XFx1MzIyMC1cXHUzMjI5XFx1MzI0OC1cXHUzMjRGXFx1MzI1MS1cXHUzMjVGXFx1MzI4MC1cXHUzMjg5XFx1MzJCMS1cXHUzMkJGXFx1QTYyMC1cXHVBNjI5XFx1QTZFNi1cXHVBNkVGXFx1QTgzMC1cXHVBODM1XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XSsvZ1xuIiwibW9kdWxlLmV4cG9ydHMgPSAvKFthLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MS1cXHUwNTg3XFx1MTNGOC1cXHUxM0ZEXFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QjVcXHVBN0I3XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGNDEtXFx1RkY1QTAtOVxceEIyXFx4QjNcXHhCOVxceEJDLVxceEJFXFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MDlGNC1cXHUwOUY5XFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEI3Mi1cXHUwQjc3XFx1MEJFNi1cXHUwQkYyXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdFXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDc1XFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjMzXFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTM2OS1cXHUxMzdDXFx1MTZFRS1cXHUxNkYwXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOURBXFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1MjA3MFxcdTIwNzQtXFx1MjA3OVxcdTIwODAtXFx1MjA4OVxcdTIxNTAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDRkRcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNBXFx1MzE5Mi1cXHUzMTk1XFx1MzIyMC1cXHUzMjI5XFx1MzI0OC1cXHUzMjRGXFx1MzI1MS1cXHUzMjVGXFx1MzI4MC1cXHUzMjg5XFx1MzJCMS1cXHUzMkJGXFx1QTYyMC1cXHVBNjI5XFx1QTZFNi1cXHVBNkVGXFx1QTgzMC1cXHVBODM1XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XSkoW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdKS9nXG4iLCJtb2R1bGUuZXhwb3J0cyA9IC8oW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdKShbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FEXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV1bYS16XFx4QjVcXHhERi1cXHhGNlxceEY4LVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RS1cXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTktXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJELVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzMtXFx1MDIzOVxcdTAyM0NcXHUwMjNGXFx1MDI0MFxcdTAyNDJcXHUwMjQ3XFx1MDI0OVxcdTAyNEJcXHUwMjREXFx1MDI0Ri1cXHUwMjkzXFx1MDI5NS1cXHUwMkFGXFx1MDM3MVxcdTAzNzNcXHUwMzc3XFx1MDM3Qi1cXHUwMzdEXFx1MDM5MFxcdTAzQUMtXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENS1cXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGLVxcdTAzRjNcXHUwM0Y1XFx1MDNGOFxcdTAzRkJcXHUwM0ZDXFx1MDQzMC1cXHUwNDVGXFx1MDQ2MVxcdTA0NjNcXHUwNDY1XFx1MDQ2N1xcdTA0NjlcXHUwNDZCXFx1MDQ2RFxcdTA0NkZcXHUwNDcxXFx1MDQ3M1xcdTA0NzVcXHUwNDc3XFx1MDQ3OVxcdTA0N0JcXHUwNDdEXFx1MDQ3RlxcdTA0ODFcXHUwNDhCXFx1MDQ4RFxcdTA0OEZcXHUwNDkxXFx1MDQ5M1xcdTA0OTVcXHUwNDk3XFx1MDQ5OVxcdTA0OUJcXHUwNDlEXFx1MDQ5RlxcdTA0QTFcXHUwNEEzXFx1MDRBNVxcdTA0QTdcXHUwNEE5XFx1MDRBQlxcdTA0QURcXHUwNEFGXFx1MDRCMVxcdTA0QjNcXHUwNEI1XFx1MDRCN1xcdTA0QjlcXHUwNEJCXFx1MDRCRFxcdTA0QkZcXHUwNEMyXFx1MDRDNFxcdTA0QzZcXHUwNEM4XFx1MDRDQVxcdTA0Q0NcXHUwNENFXFx1MDRDRlxcdTA0RDFcXHUwNEQzXFx1MDRENVxcdTA0RDdcXHUwNEQ5XFx1MDREQlxcdTA0RERcXHUwNERGXFx1MDRFMVxcdTA0RTNcXHUwNEU1XFx1MDRFN1xcdTA0RTlcXHUwNEVCXFx1MDRFRFxcdTA0RUZcXHUwNEYxXFx1MDRGM1xcdTA0RjVcXHUwNEY3XFx1MDRGOVxcdTA0RkJcXHUwNEZEXFx1MDRGRlxcdTA1MDFcXHUwNTAzXFx1MDUwNVxcdTA1MDdcXHUwNTA5XFx1MDUwQlxcdTA1MERcXHUwNTBGXFx1MDUxMVxcdTA1MTNcXHUwNTE1XFx1MDUxN1xcdTA1MTlcXHUwNTFCXFx1MDUxRFxcdTA1MUZcXHUwNTIxXFx1MDUyM1xcdTA1MjVcXHUwNTI3XFx1MDUyOVxcdTA1MkJcXHUwNTJEXFx1MDUyRlxcdTA1NjEtXFx1MDU4N1xcdTEzRjgtXFx1MTNGRFxcdTFEMDAtXFx1MUQyQlxcdTFENkItXFx1MUQ3N1xcdTFENzktXFx1MUQ5QVxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NS1cXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRi1cXHUxRjA3XFx1MUYxMC1cXHUxRjE1XFx1MUYyMC1cXHUxRjI3XFx1MUYzMC1cXHUxRjM3XFx1MUY0MC1cXHUxRjQ1XFx1MUY1MC1cXHUxRjU3XFx1MUY2MC1cXHUxRjY3XFx1MUY3MC1cXHUxRjdEXFx1MUY4MC1cXHUxRjg3XFx1MUY5MC1cXHUxRjk3XFx1MUZBMC1cXHUxRkE3XFx1MUZCMC1cXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2XFx1MUZEN1xcdTFGRTAtXFx1MUZFN1xcdTFGRjItXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjEwQVxcdTIxMEVcXHUyMTBGXFx1MjExM1xcdTIxMkZcXHUyMTM0XFx1MjEzOVxcdTIxM0NcXHUyMTNEXFx1MjE0Ni1cXHUyMTQ5XFx1MjE0RVxcdTIxODRcXHUyQzMwLVxcdTJDNUVcXHUyQzYxXFx1MkM2NVxcdTJDNjZcXHUyQzY4XFx1MkM2QVxcdTJDNkNcXHUyQzcxXFx1MkM3M1xcdTJDNzRcXHUyQzc2LVxcdTJDN0JcXHUyQzgxXFx1MkM4M1xcdTJDODVcXHUyQzg3XFx1MkM4OVxcdTJDOEJcXHUyQzhEXFx1MkM4RlxcdTJDOTFcXHUyQzkzXFx1MkM5NVxcdTJDOTdcXHUyQzk5XFx1MkM5QlxcdTJDOURcXHUyQzlGXFx1MkNBMVxcdTJDQTNcXHUyQ0E1XFx1MkNBN1xcdTJDQTlcXHUyQ0FCXFx1MkNBRFxcdTJDQUZcXHUyQ0IxXFx1MkNCM1xcdTJDQjVcXHUyQ0I3XFx1MkNCOVxcdTJDQkJcXHUyQ0JEXFx1MkNCRlxcdTJDQzFcXHUyQ0MzXFx1MkNDNVxcdTJDQzdcXHUyQ0M5XFx1MkNDQlxcdTJDQ0RcXHUyQ0NGXFx1MkNEMVxcdTJDRDNcXHUyQ0Q1XFx1MkNEN1xcdTJDRDlcXHUyQ0RCXFx1MkNERFxcdTJDREZcXHUyQ0UxXFx1MkNFM1xcdTJDRTRcXHUyQ0VDXFx1MkNFRVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdUE2NDFcXHVBNjQzXFx1QTY0NVxcdUE2NDdcXHVBNjQ5XFx1QTY0QlxcdUE2NERcXHVBNjRGXFx1QTY1MVxcdUE2NTNcXHVBNjU1XFx1QTY1N1xcdUE2NTlcXHVBNjVCXFx1QTY1RFxcdUE2NUZcXHVBNjYxXFx1QTY2M1xcdUE2NjVcXHVBNjY3XFx1QTY2OVxcdUE2NkJcXHVBNjZEXFx1QTY4MVxcdUE2ODNcXHVBNjg1XFx1QTY4N1xcdUE2ODlcXHVBNjhCXFx1QTY4RFxcdUE2OEZcXHVBNjkxXFx1QTY5M1xcdUE2OTVcXHVBNjk3XFx1QTY5OVxcdUE2OUJcXHVBNzIzXFx1QTcyNVxcdUE3MjdcXHVBNzI5XFx1QTcyQlxcdUE3MkRcXHVBNzJGLVxcdUE3MzFcXHVBNzMzXFx1QTczNVxcdUE3MzdcXHVBNzM5XFx1QTczQlxcdUE3M0RcXHVBNzNGXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTc0N1xcdUE3NDlcXHVBNzRCXFx1QTc0RFxcdUE3NEZcXHVBNzUxXFx1QTc1M1xcdUE3NTVcXHVBNzU3XFx1QTc1OVxcdUE3NUJcXHVBNzVEXFx1QTc1RlxcdUE3NjFcXHVBNzYzXFx1QTc2NVxcdUE3NjdcXHVBNzY5XFx1QTc2QlxcdUE3NkRcXHVBNzZGXFx1QTc3MS1cXHVBNzc4XFx1QTc3QVxcdUE3N0NcXHVBNzdGXFx1QTc4MVxcdUE3ODNcXHVBNzg1XFx1QTc4N1xcdUE3OENcXHVBNzhFXFx1QTc5MVxcdUE3OTMtXFx1QTc5NVxcdUE3OTdcXHVBNzk5XFx1QTc5QlxcdUE3OURcXHVBNzlGXFx1QTdBMVxcdUE3QTNcXHVBN0E1XFx1QTdBN1xcdUE3QTlcXHVBN0I1XFx1QTdCN1xcdUE3RkFcXHVBQjMwLVxcdUFCNUFcXHVBQjYwLVxcdUFCNjVcXHVBQjcwLVxcdUFCQkZcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGRjQxLVxcdUZGNUFdKS9nXG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8vIFVuZGVyIFwiYXBpOlwiIGFsbCBmdW5jdGlvbnMgbXVzdCB0YWtlIGFwaSBhcyB0aGVpciAxc3QgcGFyYW1ldGVyXG4gIGFwaToge1xuICAgIGNyZWF0ZVRyYW5zYWN0aW9uOiBjcmVhdGVUcmFuc2FjdGlvblxuICB9XG5cbiAgLyoqXG4gICAgQHR5cGVkZWYge29iamVjdH0gaGVhZGVyc1xuICAgIEBwcm9wZXJ0eSB7bnVtYmVyfSByZWZfYmxvY2tfbnVtIC0gTGFzdCBpcnJldmVyc2libGUgYmxvY2sgbnVtYmVyLiAgVGhlXG4gICAgYml0LXdpc2UgQU5EIG9wZXJhdGlvbiBpcyB1c2VkIHRvIGtlZXAgdGhpcyB2YWx1ZSB3aXRoIHRoZSBzaXplIG9mIGEgVWludDE2XG4gICAgc2l6ZSAoYSBibG9jayBudW0gaW4gdGhlIGxhc3QgMl4xNiBibG9ja3MpLiAgRXhhbXBsZTpcbiAgICBgZ2V0X2luZm8ubGFzdF9pcnJldmVyc2libGVfYmxvY2tfbnVtICYgMHhGRkZGYFxuICBcbiAgICBAcHJvcGVydHkge251bWJlcn0gcmVmX2Jsb2NrX3ByZWZpeCAtIGdldF9ibG9jay5yZWZfYmxvY2tfcHJlZml4IC4uIFRoaXMgaXNcbiAgICBhIDMyIGJpdCBudW1iZXIgaWRlbnRpZmllciAoaWRlbnRpZnkgdGhlIHNhbWUgYmxvY2sgcmVmZXJlbmNlZCBpbiBgcmVmX2Jsb2NrX251bWApLlxuICBcbiAgICBAcHJvcGVydHkge3N0cmluZ30gZXhwaXJhdGlvbiAtIFRoaXMgaXMgYmFzZWQgb24gdGhlIGhlYWQgYmxvY2sgdGltZSBmcm9tIHRoZVxuICAgIGJsb2NrY2hhaW4uICBCZSBjYXJlZnVsIHRvIHN1ZmZpeCBhIFogaWYgcmVxdWlyZWQgKGFzIHdpdGggRmlyZWZveCBhbmQgSmF2YVNjcmlwdClcbiAgICB0byBlbnN1cmUgdGhpcyBkYXRlIHN0cmluZyBpcyBpbnRlcnByZXRlZCBhcyBadWx1IHRpbWUuXG4gIFxuICAgIEV4YW1wbGU6IGBuZXcgRGF0ZShuZXcgRGF0ZShpbmZvLmhlYWRfYmxvY2tfdGltZSArICdaJykuZ2V0VGltZSgpICsgZXhwaXJlSW5TZWNvbmRzICogMTAwMCkudG9JU09TdHJpbmcoKS5zcGxpdCgnLicpWzBdYFxuICAqL1xuXG4gIC8qKlxuICAgIENvbnN1bHQgdGhlIGJsb2NrY2hhaW4gYW5kIGdhdGhlciBpbmZvcm1hdGlvbiBmb3IgdXNlIGluIGEgbmV3IHNpZ25lZCB0cmFuc2FjdGlvbi5cbiAgICBGb3IgVHJhbnNhY3Rpb24gYXMgUHJvb2Ygb2YgU3Rha2UgKFRhUE9TKSwgMzIgYml0cyBvZiBhIHJlY2VudCBibG9jayBJZCBpcyBpbmNsdWRlZC5cbiAgICBCZWNhdXNlIGFsbCB0cmFuc2FjdGlvbnMgdXNlIFRhUE9TLCB0aGlzIHNvbHZlcyB0aGUgbm90aGluZyBhdCBzdGFrZSBhdHRhY2suXG4gIFxuICAgIFRoaXMgaXMgdXN1YWxseSBjYWxsZWQgZm9yIGV2ZXJ5IHRyYW5zYWN0aW9uIG9yIG1heWJlIGNhY2hlZCBwZXIgYmxvY2suICBBbHRob3VnaFxuICAgIGxvbmdlciBjYWNoaW5nIGlzIHBvc3NpYmxlLCBhIGxvbmdlciBjYWNoZSB0aW1lIGluY3JlYXNlcyB0aGUgcmlzayBvZiBhXG4gICAgdHJhbnNhY3Rpb24gcmVwbGF5IGF0dGFjay5cbiAgXG4gICAgQGFyZyB7bnVtYmVyfSBleHBpcmVJblNlY29uZHMgLSBIb3cgbWFueSBzZWNvbmRzIHVudGlsIGV4cGlyYXRpb25cbiAgICBAYXJnIHtmdW5jdGlvbihlcnJvciwgaGVhZGVycyl9IGNhbGxiYWNrIHtAbGluayBoZWFkZXJzfVxuICAgIEBzZWUge2hlYWRlcnN9XG4gICAgQGV4YW1wbGUgZW9zLmNyZWF0ZVRyYW5zYWN0aW9uKDYwLCAoZXJyb3IsIGhlYWRlcnMpID0+IHt9KVxuICAqL1xufTtmdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbihhcGkpIHtcbiAgdmFyIGV4cGlyZUluU2Vjb25kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNjA7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1syXTtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgcGFyYW1ldGVyIGlzIHJlcXVpcmVkJyk7XG4gIH1cbiAgYXBpLmdldEluZm8oY2hlY2tFcnJvcihjYWxsYmFjaywgZnVuY3Rpb24gKGluZm8pIHtcbiAgICB2YXIgY2hhaW5EYXRlID0gbmV3IERhdGUoaW5mby5oZWFkX2Jsb2NrX3RpbWUgKyAnWicpO1xuXG4gICAgYXBpLmdldEJsb2NrKGluZm8ubGFzdF9pcnJldmVyc2libGVfYmxvY2tfbnVtLCBjaGVja0Vycm9yKGNhbGxiYWNrLCBmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHZhciBleHBpcmF0aW9uID0gbmV3IERhdGUoY2hhaW5EYXRlLmdldFRpbWUoKSArIGV4cGlyZUluU2Vjb25kcyAqIDEwMDApO1xuXG4gICAgICB2YXIgcmVmX2Jsb2NrX251bSA9IGluZm8ubGFzdF9pcnJldmVyc2libGVfYmxvY2tfbnVtICYgMHhGRkZGO1xuXG4gICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgZXhwaXJhdGlvbjogZXhwaXJhdGlvbi50b0lTT1N0cmluZygpLnNwbGl0KCcuJylbMF0sXG4gICAgICAgIHJlZl9ibG9ja19udW06IHJlZl9ibG9ja19udW0sXG4gICAgICAgIHJlZl9ibG9ja19wcmVmaXg6IGJsb2NrLnJlZl9ibG9ja19wcmVmaXgsXG4gICAgICAgIG1heF9uZXRfdXNhZ2Vfd29yZHM6IDAsXG4gICAgICAgIG1heF9jcHVfdXNhZ2VfbXM6IDAsXG4gICAgICAgIGRlbGF5X3NlYzogMCxcbiAgICAgICAgY29udGV4dF9mcmVlX2FjdGlvbnM6IFtdLFxuICAgICAgICBhY3Rpb25zOiBbXSxcbiAgICAgICAgc2lnbmF0dXJlczogW10sXG4gICAgICAgIHRyYW5zYWN0aW9uX2V4dGVuc2lvbnM6IFtdXG4gICAgICB9O1xuICAgICAgY2FsbGJhY2sobnVsbCwgaGVhZGVycyk7XG4gICAgfSkpO1xuICB9KSk7XG59XG5cbnZhciBjaGVja0Vycm9yID0gZnVuY3Rpb24gY2hlY2tFcnJvcihwYXJlbnRFcnIsIHBhcnJlbnRSZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBwYXJlbnRFcnIoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJyZW50UmVzKHJlc3VsdCk7XG4gICAgfVxuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUnKTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5pc0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPID0gT2JqZWN0KGl0KTtcbiAgcmV0dXJuIE9bSVRFUkFUT1JdICE9PSB1bmRlZmluZWRcbiAgICB8fCAnQEBpdGVyYXRvcicgaW4gT1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICB8fCBJdGVyYXRvcnMuaGFzT3duUHJvcGVydHkoY2xhc3NvZihPKSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3InKTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldCA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXRlckZuID0gZ2V0KGl0KTtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIHJldHVybiBhbk9iamVjdChpdGVyRm4uY2FsbChpdCkpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgU3RydWN0cyA9IHJlcXVpcmUoJy4vc3RydWN0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFiaUNhY2hlO1xuXG5mdW5jdGlvbiBBYmlDYWNoZShuZXR3b3JrLCBjb25maWcpIHtcbiAgY29uZmlnLmFiaUNhY2hlID0ge1xuICAgIGFiaUFzeW5jOiBhYmlBc3luYyxcbiAgICBhYmk6IGFiaVxuXG4gICAgLy8gSGVscCAob3IgXCJ1c2FnZVwiKSBuZWVkcyB7ZGVmYXVsdHM6IHRydWV9XG4gIH07dmFyIGFiaUNhY2hlQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgeyBkZWZhdWx0czogdHJ1ZSB9LCBjb25maWcpO1xuXG4gIHZhciBjYWNoZSA9IHt9O1xuXG4gIC8qKlxuICAgIEFzeW5jaHJvbm91c2x5IGZldGNoIGFuZCBjYWNoZSBhbiBBQkkgZnJvbSB0aGUgYmxvY2tjaGFpbi5cbiAgICAgQGFyZyB7c3RyaW5nfSBhY2NvdW50IC0gYmxvY2tjaGFpbiBhY2NvdW50IHdpdGggZGVwbG95ZWQgY29udHJhY3RcbiAgICBAYXJnIHtib29sZWFufSBbZm9yY2UgPSB0cnVlXSBmYWxzZSB3aGVuIEFCSSBpcyBpbW11dGFibGUuXG4gICovXG4gIGZ1bmN0aW9uIGFiaUFzeW5jKGFjY291bnQpIHtcbiAgICB2YXIgZm9yY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGFjY291bnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYWNjb3VudCksICdzdHJpbmcnLCAnYWNjb3VudCBzdHJpbmcgcmVxdWlyZWQnKTtcblxuICAgIGlmIChmb3JjZSA9PSBmYWxzZSAmJiBjYWNoZVthY2NvdW50XSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhY2hlW2FjY291bnRdKTtcbiAgICB9XG5cbiAgICBpZiAobmV0d29yayA9PSBudWxsKSB7XG4gICAgICB2YXIgX2FiaSA9IGNhY2hlW2FjY291bnRdO1xuICAgICAgYXNzZXJ0KF9hYmksICdNaXNzaW5nIEFCSSBmb3IgYWNjb3VudDogJyArIGFjY291bnQgKyAnLCBwcm92aWRlIGh0dHBFbmRwb2ludCBvciBhZGQgdG8gYWJpQ2FjaGUnKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX2FiaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldHdvcmsuZ2V0QWJpKGFjY291bnQpLnRoZW4oZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIGFzc2VydChjb2RlLmFiaSwgJ01pc3NpbmcgQUJJIGZvciBhY2NvdW50OiAnICsgYWNjb3VudCk7XG4gICAgICByZXR1cm4gYWJpKGFjY291bnQsIGNvZGUuYWJpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgIFN5bmNocm9ub3VzbHkgc2V0IG9yIGZldGNoIGFuIEFCSSBmcm9tIGxvY2FsIGNhY2hlLlxuICAgICBAYXJnIHtzdHJpbmd9IGFjY291bnQgLSBibG9ja2NoYWluIGFjY291bnQgd2l0aCBkZXBsb3llZCBjb250cmFjdFxuICAgIEBhcmcge3N0cmluZ30gW2FiaV0gLSBibG9ja2NoYWluIEFCSSBqc29uIGRhdGEuICBOdWxsIHRvIGZldGNoIG9yIG5vbi1udWxsIHRvIGNhY2hlXG4gICovXG4gIGZ1bmN0aW9uIGFiaShhY2NvdW50LCBhYmkpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGFjY291bnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYWNjb3VudCksICdzdHJpbmcnLCAnYWNjb3VudCBzdHJpbmcgcmVxdWlyZWQnKTtcbiAgICBpZiAoYWJpKSB7XG4gICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGFiaSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhYmkpLCAnb2JqZWN0JywgJ2FiaScpO1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihhYmkpKSB7XG4gICAgICAgIGFiaSA9IEpTT04ucGFyc2UoYWJpKTtcbiAgICAgIH1cbiAgICAgIHZhciBmY1NjaGVtYSA9IGFiaVRvRmNTY2hlbWEoYWJpLCBhY2NvdW50KTtcbiAgICAgIHZhciBzdHJ1Y3RzID0gU3RydWN0cyhhYmlDYWNoZUNvbmZpZywgZmNTY2hlbWEpOyAvLyByZXR1cm5zIHtzdHJ1Y3RzLCB0eXBlc31cbiAgICAgIHJldHVybiBjYWNoZVthY2NvdW50XSA9IE9iamVjdC5hc3NpZ24oeyBhYmk6IGFiaSwgc2NoZW1hOiBmY1NjaGVtYSB9LCBzdHJ1Y3RzKTtcbiAgICB9XG4gICAgdmFyIGMgPSBjYWNoZVthY2NvdW50XTtcbiAgICBpZiAoYyA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FiaSBcXCcnICsgYWNjb3VudCArICdcXCcgaXMgbm90IGNhY2hlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIHJldHVybiBjb25maWcuYWJpQ2FjaGU7XG59XG5cbmZ1bmN0aW9uIGFiaVRvRmNTY2hlbWEoYWJpLCBhY2NvdW50KSB7XG4gIC8vIGN1c3RvbVR5cGVzXG4gIC8vIEZvciBGY0J1ZmZlclxuICB2YXIgYWJpU2NoZW1hID0ge307XG5cbiAgLy8gY29udmVydCBhYmkgdHlwZXMgdG8gRmNidWZmZXIgc2NoZW1hXG4gIGlmIChhYmkudHlwZXMpIHtcbiAgICAvLyBhbGlhc2VzXG4gICAgYWJpLnR5cGVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIFwiYWNjb3VudF9uYW1lXCIgPSBcIm5hbWVcIlxuICAgICAgYWJpU2NoZW1hW2UubmV3X3R5cGVfbmFtZV0gPSBlLnR5cGU7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWJpLnN0cnVjdHMpIHtcbiAgICAvLyB0cmFuc2FjdGlvbl9oZWFkZXIgPSBmaWVsZHNbYWN0b3IsIHBlcm1pc3Npb25dIGV4dGVuZHMgYmFzZSBcInRyYW5zYWN0aW9uXCJcbiAgICBhYmkuc3RydWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZmllbGRzID0ge307XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZS5maWVsZHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIGZpZWxkID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICBmaWVsZHNbZmllbGQubmFtZV0gPSBmaWVsZC50eXBlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWJpU2NoZW1hW2UubmFtZV0gPSB7IGJhc2U6IGUuYmFzZSwgZmllbGRzOiBmaWVsZHMgfTtcbiAgICAgIGlmIChlLmJhc2UgPT09ICcnKSB7XG4gICAgICAgIGRlbGV0ZSBhYmlTY2hlbWFbZS5uYW1lXS5iYXNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFiaS5hY3Rpb25zKSB7XG4gICAgLy8gc2V0cHJvZHMgPSBzZXRfcHJvZHVjZXJzXG4gICAgYWJpLmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAvLyBAZXhhbXBsZSBhY3Rpb24gPSB7bmFtZTogJ3NldHByb2RzJywgdHlwZTogJ3NldF9wcm9kdWNlcnMnfVxuICAgICAgdmFyIHR5cGUgPSBhYmlTY2hlbWFbYWN0aW9uLnR5cGVdO1xuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgYWJpU2NoZW1hIHR5cGUnLCBhY3Rpb24udHlwZSwgYWNjb3VudCk7IC8vLCBhYmksIGFiaVNjaGVtYSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUuYWN0aW9uID0ge1xuICAgICAgICAgIG5hbWU6IGFjdGlvbi5uYW1lLFxuICAgICAgICAgIGFjY291bnQ6IGFjY291bnRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBjb25zb2xlLmxvZygnYWJpU2NoZW1hJywgYWJpU2NoZW1hKTtcbiAgfVxuXG4gIHJldHVybiBhYmlTY2hlbWE7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXknKTtcblxudmFyIF9zbGljZWRUb0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlZFRvQXJyYXkyKTtcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBlY2MgPSByZXF1aXJlKCdlb3Nqcy1lY2MnKTtcbnZhciBGY2J1ZmZlciA9IHJlcXVpcmUoJ2ZjYnVmZmVyJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2Vvc2pzLWFwaScpLFxuICAgIHByb2Nlc3NBcmdzID0gX3JlcXVpcmUucHJvY2Vzc0FyZ3M7XG5cbnZhciBTdHJ1Y3RzID0gcmVxdWlyZSgnLi9zdHJ1Y3RzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gd3JpdGVBcGlHZW47XG5cbnZhciBzaWduID0gZWNjLnNpZ247XG5cblxuZnVuY3Rpb24gd3JpdGVBcGlHZW4oTmV0d29yaywgbmV0d29yaywgc3RydWN0cywgY29uZmlnLCBhYmlzKSB7XG4gIGlmICh0eXBlb2YgY29uZmlnLmNoYWluSWQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29uZmlnLmNoYWluSWQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICB2YXIgd3JpdGVBcGkgPSBXcml0ZUFwaShOZXR3b3JrLCBuZXR3b3JrLCBjb25maWcsIHN0cnVjdHMudHJhbnNhY3Rpb24pO1xuICB2YXIgcmVzZXJ2ZUZ1bmN0aW9ucyA9IG5ldyBTZXQoWyd0cmFuc2FjdGlvbicsICdjb250cmFjdCddKTtcblxuICB2YXIgbWVyZ2UgPSB7fTtcbiAgLy8gc2VuZHMgdHJhbnNhY3Rpb25zLCBjYW4gYWN0IGFzIGFuIGFjdGlvbiBjb2xsZWN0aW5nIHdyYXBwZXJcbiAgbWVyZ2UudHJhbnNhY3Rpb24gPSB3cml0ZUFwaS5nZW5UcmFuc2FjdGlvbihzdHJ1Y3RzLCBtZXJnZSk7XG5cbiAgLy8gSW1tZWRpYXRlIHNlbmQgb3BlcmF0aW9ucyBhdXRvbWF0aWNhbGx5IGNhbGxzIG1lcmdlLnRyYW5zYWN0aW9uXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFiaXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgYWJpID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIGZvciAodmFyIHR5cGUgaW4gYWJpLnNjaGVtYSkge1xuICAgICAgICB2YXIgdHlwZVN0cnVjdCA9IGFiaS5zY2hlbWFbdHlwZV07XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZVN0cnVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBza2lwIHR5cGVzIGxpa2U7IG5hbWUsIGFjY291bnRfbmFtZSwgZXRjLi5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgdHlwZVN0cnVjdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh0eXBlU3RydWN0KSwgJ29iamVjdCcsICdhYmkuc2NoZW1hW3R5cGUgPSAnICsgdHlwZSArICddJyk7XG5cbiAgICAgICAgdmFyIGFjdGlvbiA9IHR5cGVTdHJ1Y3QuYWN0aW9uO1xuXG4gICAgICAgIGlmIChhY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIEFCSSBwcml2YXRlIHN0cnVjdFxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc2VydmVGdW5jdGlvbnMuaGFzKGFjdGlvbi5uYW1lKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbmZsaWN0aW5nIEFwaSBmdW5jdGlvbjogJyArIHR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZmluaXRpb24gPSBzY2hlbWFGaWVsZHMoYWJpLnNjaGVtYSwgdHlwZSk7XG4gICAgICAgIG1lcmdlW2FjdGlvbi5uYW1lXSA9IHdyaXRlQXBpLmdlbk1ldGhvZCh0eXBlLCBkZWZpbml0aW9uLCBtZXJnZS50cmFuc2FjdGlvbiwgYWN0aW9uLmFjY291bnQsIGFjdGlvbi5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgIEltbWVkYXRlIHNlbmQgY29udHJhY3QgYWN0aW9ucy5cbiAgICAgICBAZXhhbXBsZSBlb3MuY29udHJhY3QoJ215Y29udHJhY3QnLCBbb3B0aW9uc10sIFtjYWxsYmFja10pXG4gICAgICBAZXhhbXBsZSBlb3MuY29udHJhY3QoJ215Y29udHJhY3QnKS50aGVuKG15Y29udHJhY3QgPT4gbXljb250cmFjdC5teWFjdGlvbiguLi4pKVxuICAgICovXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWVyZ2UuY29udHJhY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIF9wcm9jZXNzQXJncyA9IHByb2Nlc3NBcmdzKGFyZ3MsIFsnYWNjb3VudCddLCAnY29udHJhY3QnLCBvcHRpb25zRm9ybWF0dGVyKSxcbiAgICAgICAgcGFyYW1zID0gX3Byb2Nlc3NBcmdzLnBhcmFtcyxcbiAgICAgICAgb3B0aW9ucyA9IF9wcm9jZXNzQXJncy5vcHRpb25zLFxuICAgICAgICByZXR1cm5Qcm9taXNlID0gX3Byb2Nlc3NBcmdzLnJldHVyblByb21pc2UsXG4gICAgICAgIGNhbGxiYWNrID0gX3Byb2Nlc3NBcmdzLmNhbGxiYWNrO1xuXG4gICAgdmFyIGFjY291bnQgPSBwYXJhbXMuYWNjb3VudDtcblxuICAgIC8vIHNlbmRzIHRyYW5zYWN0aW9ucyB2aWEgaXRzIG93biB0cmFuc2FjdGlvbiBmdW5jdGlvblxuXG4gICAgd3JpdGVBcGkuZ2VuQ29udHJhY3RBY3Rpb25zKGFjY291bnQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHIpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBjYWxsYmFjayhyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXR1cm5Qcm9taXNlO1xuICB9O1xuXG4gIHJldHVybiBtZXJnZTtcbn1cblxuZnVuY3Rpb24gV3JpdGVBcGkoTmV0d29yaywgbmV0d29yaywgY29uZmlnLCBUcmFuc2FjdGlvbikge1xuICAvKipcbiAgICBAYXJnIHthcnJheX0gW2FyZ3MuY29udHJhY3RzXVxuICAgIEBhcmcge2NhbGxiYWNrfG9iamVjdH0gYXJncy50cmFuc2FjdGlvbiB0ciA9PiB7dHIudHJhbnNmZXIgLi4gfVxuICAgIEBhcmcge29iamVjdH0gW2FyZ3Mub3B0aW9uc11cbiAgICBAYXJnIHtmdW5jdGlvbn0gW2FyZ3MuY2FsbGJhY2tdXG4gICovXG4gIHZhciBnZW5UcmFuc2FjdGlvbiA9IGZ1bmN0aW9uIGdlblRyYW5zYWN0aW9uKHN0cnVjdHMsIG1lcmdlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250cmFjdHMsIG9wdGlvbnMsIGNhbGxiYWNrLCBpc0NvbnRyYWN0QXJyYXksIGFjY291bnRzLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiwgX2RpZEl0ZXJhdG9yRXJyb3IyLCBfaXRlcmF0b3JFcnJvcjIsIF9pdGVyYXRvcjIsIF9zdGVwMiwgYWN0aW9uLCBhYmlQcm9taXNlcywgY2FjaGVkQ29kZSwgYXJnLCBjb250cmFjdFByb21pc2VzLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMywgX2RpZEl0ZXJhdG9yRXJyb3IzLCBfaXRlcmF0b3JFcnJvcjMsIF9pdGVyYXRvcjMsIF9zdGVwMywgYWNjb3VudDtcblxuICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hc3luYyhmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgY29udHJhY3RzID0gdm9pZCAwLCBvcHRpb25zID0gdm9pZCAwLCBjYWxsYmFjayA9IHZvaWQgMDtcblxuXG4gICAgICAgICAgICAgIGlmIChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrIG1heSBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaXNDb250cmFjdEFycmF5ID0gaXNTdHJpbmdBcnJheShhcmdzWzBdKTtcblxuICAgICAgICAgICAgICBpZiAoIWlzQ29udHJhY3RBcnJheSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29udHJhY3RzID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMSk7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnRyYWN0cyA9IFthcmdzWzBdXTtcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMSk7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIGlmICghKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShhcmdzWzBdLmFjdGlvbnMpKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGZ1bGwgdHJhbnNhY3Rpb24sIGxvb2t1cCBBQklzIHVzZWQgYnkgZWFjaCBhY3Rpb25cbiAgICAgICAgICAgICAgYWNjb3VudHMgPSBuZXcgU2V0KCk7IC8vIG1ha2UgYSB1bmlxdWUgbGlzdFxuXG4gICAgICAgICAgICAgIC8vIFRPRE86IEFkZCBhcmdzWzBdLmNvbnRleHRfZnJlZV9hY3Rpb25zIHRvIGFjY291bnRzIHRvbz9cblxuICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxODtcbiAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IyID0gYXJnc1swXS5hY3Rpb25zW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgIGFjY291bnRzLmFkZChhY3Rpb24uYWNjb3VudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjI7XG4gICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbJ2NhdGNoJ10oMTgpO1xuICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBfY29udGV4dC50MDtcblxuICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI2O1xuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjc7XG5cbiAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI5O1xuXG4gICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuXG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDI5KTtcblxuICAgICAgICAgICAgY2FzZSAzMzpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyNik7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgIGFiaVByb21pc2VzID0gW107XG5cbiAgICAgICAgICAgICAgLy8gRW9zIGNvbnRyYWN0IG9wZXJhdGlvbnMgYXJlIGNhY2hlZCAoZWZmaWNpZW50IGFuZCBvZmZsaW5lIHRyYW5zYWN0aW9ucylcblxuICAgICAgICAgICAgICBjYWNoZWRDb2RlID0gbmV3IFNldChbJ2Vvc2lvJywgJ2Vvc2lvLnRva2VuJywgJ2Vvc2lvLm51bGwnXSk7XG5cbiAgICAgICAgICAgICAgYWNjb3VudHMuZm9yRWFjaChmdW5jdGlvbiAoYWNjb3VudCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVkQ29kZS5oYXMoYWNjb3VudCkpIHtcbiAgICAgICAgICAgICAgICAgIGFiaVByb21pc2VzLnB1c2goY29uZmlnLmFiaUNhY2hlLmFiaUFzeW5jKGFjY291bnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzk7XG4gICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXdyYXAoUHJvbWlzZS5hbGwoYWJpUHJvbWlzZXMpKTtcblxuICAgICAgICAgICAgY2FzZSAzOTpcblxuICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAxICYmICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGFyZ3MubGVuZ3RoLCAxLCAndHJhbnNhY3Rpb24gYXJnczogY29udHJhY3RzPHN0cmluZ3xhcnJheT4sIHRyYW5zYWN0aW9uPGNhbGxiYWNrfG9iamVjdD4sIFtvcHRpb25zXSwgW2NhbGxiYWNrXScpO1xuICAgICAgICAgICAgICBhcmcgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgIGlmICghY29udHJhY3RzKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY3O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYXNzZXJ0KCFjYWxsYmFjaywgJ2NhbGxiYWNrIHdpdGggY29udHJhY3RzIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgIGFzc2VydC5lcXVhbCgnZnVuY3Rpb24nLCB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFyZyksICdwcm92aWRlIGZ1bmN0aW9uIGNhbGxiYWNrIGZvbGxvd2luZyBjb250cmFjdHMgYXJyYXkgcGFyYW1ldGVyJyk7XG5cbiAgICAgICAgICAgICAgY29udHJhY3RQcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1MDtcblxuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMgPSBjb250cmFjdHNbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudCA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIHNldHVwIHdyYXBwZXIgZnVuY3Rpb25zIHRvIGNvbGxlY3QgY29udHJhY3QgYXBpIGNhbGxzXG4gICAgICAgICAgICAgICAgY29udHJhY3RQcm9taXNlcy5wdXNoKGdlbkNvbnRyYWN0QWN0aW9ucyhhY2NvdW50LCBtZXJnZS50cmFuc2FjdGlvbikpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU4O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1NDpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDU0O1xuICAgICAgICAgICAgICBfY29udGV4dC50MSA9IF9jb250ZXh0WydjYXRjaCddKDUwKTtcbiAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gX2NvbnRleHQudDE7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1ODtcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDU5O1xuXG4gICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgNjE6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA2MTtcblxuICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2NDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg2MSk7XG5cbiAgICAgICAgICAgIGNhc2UgNjU6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNTgpO1xuXG4gICAgICAgICAgICBjYXNlIDY2OlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCBQcm9taXNlLmFsbChjb250cmFjdFByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lcmdlcyA9IHt9O1xuICAgICAgICAgICAgICAgIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobSwgaSkge1xuICAgICAgICAgICAgICAgICAgbWVyZ2VzW2NvbnRyYWN0c1tpXV0gPSBtO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbSA9IGlzQ29udHJhY3RBcnJheSA/IG1lcmdlcyA6IG1lcmdlc1tjb250cmFjdHNbMF1dO1xuICAgICAgICAgICAgICAgIC8vIGNvbGxlY3QgYW5kIGludm9rZSBhcGkgY2FsbHNcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJNZXNzYWdlQ29sbGVjdG9yKGFyZywgb3B0aW9ucywgcGFyYW0pO1xuICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGNhc2UgNjc6XG4gICAgICAgICAgICAgIGlmICghKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgdHJNZXNzYWdlQ29sbGVjdG9yKGFyZywgb3B0aW9ucywgbWVyZ2UpKTtcblxuICAgICAgICAgICAgY2FzZSA2OTpcbiAgICAgICAgICAgICAgaWYgKCEoKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYXJnKSkgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3MTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIHRyYW5zYWN0aW9uKGFyZywgb3B0aW9ucywgY2FsbGJhY2spKTtcblxuICAgICAgICAgICAgY2FzZSA3MTpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXJzdCB0cmFuc2FjdGlvbiBhcmd1bWVudCB1bnJlY29nbml6ZWQnLCBhcmcpO1xuXG4gICAgICAgICAgICBjYXNlIDcyOlxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwsIHRoaXMsIFtbMTgsIDIyLCAyNiwgMzRdLCBbMjcsLCAyOSwgMzNdLCBbNTAsIDU0LCA1OCwgNjZdLCBbNTksLCA2MSwgNjVdXSk7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZW5Db250cmFjdEFjdGlvbnMoYWNjb3VudCkge1xuICAgIHZhciB0cmFuc2FjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgIHJldHVybiBjb25maWcuYWJpQ2FjaGUuYWJpQXN5bmMoYWNjb3VudCkudGhlbihmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgIGFzc2VydChBcnJheS5pc0FycmF5KGNhY2hlLmFiaS5hY3Rpb25zKSAmJiBjYWNoZS5hYmkuYWN0aW9ucy5sZW5ndGgsICdObyBhY3Rpb25zJyk7XG5cbiAgICAgIHZhciBjb250cmFjdE1lcmdlID0ge307XG4gICAgICBjb250cmFjdE1lcmdlLnRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb24gPyB0cmFuc2FjdGlvbiA6IGdlblRyYW5zYWN0aW9uKGNhY2hlLnN0cnVjdHMsIGNvbnRyYWN0TWVyZ2UpO1xuXG4gICAgICBjYWNoZS5hYmkuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICAgICAgdHlwZSA9IF9yZWYudHlwZTtcblxuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHNjaGVtYUZpZWxkcyhjYWNoZS5zY2hlbWEsIHR5cGUpO1xuICAgICAgICBjb250cmFjdE1lcmdlW25hbWVdID0gZ2VuTWV0aG9kKHR5cGUsIGRlZmluaXRpb24sIGNvbnRyYWN0TWVyZ2UudHJhbnNhY3Rpb24sIGFjY291bnQsIG5hbWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRyYWN0TWVyZ2UuZmMgPSBjYWNoZTtcblxuICAgICAgcmV0dXJuIGNvbnRyYWN0TWVyZ2U7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5NZXRob2QodHlwZSwgZGVmaW5pdGlvbiwgdHJhbnNhY3Rpb25BcmcpIHtcbiAgICB2YXIgYWNjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJ2Vvc2lvLnRva2VuJztcbiAgICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdHlwZTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyh1c2FnZSh7IG5hbWU6IG5hbWUsIHR5cGU6IHR5cGUgfSwgZGVmaW5pdGlvbiwgTmV0d29yaywgYWNjb3VudCwgY29uZmlnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gU3BlY2lhbCBjYXNlIGxpa2UgbXVsdGktYWN0aW9uIHRyYW5zYWN0aW9ucyB3aGVyZSB0aGlzIGxpYiBuZWVkc1xuICAgICAgLy8gdG8gYmUgc3VyZSB0aGUgYnJvYWRjYXN0IGlzIG9mZi5cbiAgICAgIHZhciBvcHRpb25PdmVycmlkZXMgPSB7fTtcbiAgICAgIHZhciBsYXN0QXJnID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKCh0eXBlb2YgbGFzdEFyZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShsYXN0QXJnKSkgPT09ICdvYmplY3QnICYmICgwLCBfdHlwZW9mMy5kZWZhdWx0KShsYXN0QXJnLl9fb3B0aW9uT3ZlcnJpZGVzKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gcG9wKCkgZml4ZXMgdGhlIGFyZ3MubGVuZ3RoXG4gICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9uT3ZlcnJpZGVzLCBhcmdzLnBvcCgpLl9fb3B0aW9uT3ZlcnJpZGVzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb2Nlc3NlZEFyZ3MgPSBwcm9jZXNzQXJncyhhcmdzLCBPYmplY3Qua2V5cyhkZWZpbml0aW9uKSwgdHlwZSwgb3B0aW9uc0Zvcm1hdHRlcik7XG5cbiAgICAgIHZhciBvcHRpb25zID0gcHJvY2Vzc2VkQXJncy5vcHRpb25zO1xuICAgICAgdmFyIHBhcmFtcyA9IHByb2Nlc3NlZEFyZ3MucGFyYW1zLFxuICAgICAgICAgIHJldHVyblByb21pc2UgPSBwcm9jZXNzZWRBcmdzLnJldHVyblByb21pc2UsXG4gICAgICAgICAgY2FsbGJhY2sgPSBwcm9jZXNzZWRBcmdzLmNhbGxiYWNrO1xuXG5cbiAgICAgIHZhciBvcHRpb25EZWZhdWx0cyA9IHsgLy8gRnJvbSBjb25maWcgYW5kIGNvbmZpZ0RlZmF1bHRzXG4gICAgICAgIGJyb2FkY2FzdDogY29uZmlnLmJyb2FkY2FzdCxcbiAgICAgICAgc2lnbjogY29uZmlnLnNpZ25cblxuICAgICAgICAvLyBpbnRlcm5hbCBvcHRpb25zIChleDogbXVsdGktYWN0aW9uIHRyYW5zYWN0aW9uKVxuICAgICAgfTtvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9uRGVmYXVsdHMsIG9wdGlvbnMsIG9wdGlvbk92ZXJyaWRlcyk7XG4gICAgICBpZiAob3B0aW9uT3ZlcnJpZGVzLm5vQ2FsbGJhY2sgJiYgIXJldHVyblByb21pc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBkdXJpbmcgYSB0cmFuc2FjdGlvbiBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXV0aG9yaXphdGlvbiA9IFtdO1xuICAgICAgdmFyIHByb3ZpZGVkQXV0aCA9IG9wdGlvbnMuYXV0aG9yaXphdGlvbiA/IG9wdGlvbnMuYXV0aG9yaXphdGlvbiA6IGNvbmZpZy5hdXRob3JpemF0aW9uO1xuICAgICAgdmFyIGFkZERlZmF1bHRBdXRocyA9IHByb3ZpZGVkQXV0aCA9PSBudWxsO1xuXG4gICAgICAvLyBPZnRlbiBpZiB0aGUgZmlyc3QgZmllbGQgaW4gYW4gYWN0aW9uIGlzIGFuIGFjY291bnQgbmFtZSBpdCBpc1xuICAgICAgLy8gYWxzbyB0aGUgcmVxdWlyZWQgYXV0aG9yaXphdGlvbi5cbiAgICAgIGZ1bmN0aW9uIGZpcnN0QWNjb3VudCgpIHtcbiAgICAgICAgdmFyIGZpZWxkS2V5cyA9IE9iamVjdC5rZXlzKGRlZmluaXRpb24pO1xuICAgICAgICB2YXIgZjEgPSBmaWVsZEtleXNbMF07XG5cbiAgICAgICAgaWYgKGRlZmluaXRpb25bZjFdID09PSAnYWNjb3VudF9uYW1lJykge1xuICAgICAgICAgIHJldHVybiBwYXJhbXNbZjFdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm92aWRlZEF1dGgpIHtcbiAgICAgICAgdmFyIGF1dGhBcnJheSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm92aWRlZEF1dGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYXV0aEFycmF5ID0gW3Byb3ZpZGVkQXV0aF07XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwcm92aWRlZEF1dGgpKSB7XG4gICAgICAgICAgYXV0aEFycmF5ID0gcHJvdmlkZWRBdXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF1dGhBcnJheSkge1xuICAgICAgICAgIGF1dGhBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChhdXRoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGF1dGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHZhciBfYXV0aCRzcGxpdCA9IGF1dGguc3BsaXQoJ0AnKSxcbiAgICAgICAgICAgICAgICAgIF9hdXRoJHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX2F1dGgkc3BsaXQsIDIpLFxuICAgICAgICAgICAgICAgICAgYWN0b3IgPSBfYXV0aCRzcGxpdDJbMF0sXG4gICAgICAgICAgICAgICAgICBfYXV0aCRzcGxpdDIkID0gX2F1dGgkc3BsaXQyWzFdLFxuICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbiA9IF9hdXRoJHNwbGl0MiQgPT09IHVuZGVmaW5lZCA/ICdhY3RpdmUnIDogX2F1dGgkc3BsaXQyJDtcblxuICAgICAgICAgICAgICBpZiAoYWN0b3IgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgYWN0b3IgPSBmaXJzdEFjY291bnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uLnB1c2goeyBhY3RvcjogYWN0b3IsIHBlcm1pc3Npb246IHBlcm1pc3Npb24gfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBhdXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGF1dGgpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbi5wdXNoKGF1dGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKGF1dGhvcml6YXRpb24ubGVuZ3RoLCBhdXRoQXJyYXkubGVuZ3RoLCAnaW52YWxpZCBhdXRob3JpemF0aW9uIGluOiAnICsgSlNPTi5zdHJpbmdpZnkocHJvdmlkZWRBdXRoKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ciA9IHtcbiAgICAgICAgYWN0aW9uczogW3tcbiAgICAgICAgICBhY2NvdW50OiBhY2NvdW50LFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogYXV0aG9yaXphdGlvbixcbiAgICAgICAgICBkYXRhOiBwYXJhbXNcbiAgICAgICAgfV1cbiAgICAgIH07XG5cbiAgICAgIGlmIChhZGREZWZhdWx0QXV0aHMpIHtcbiAgICAgICAgdmFyIGFjdG9yID0gZmlyc3RBY2NvdW50KCk7XG4gICAgICAgIGlmIChhY3Rvcikge1xuICAgICAgICAgIC8vIERlZmF1bHQgYXV0aG9yaXphdGlvbiAoc2luY2UgdXNlciBkaWQgbm90IHByb3ZpZGUgb25lKVxuICAgICAgICAgIHRyLmFjdGlvbnNbMF0uYXV0aG9yaXphdGlvbi5wdXNoKHtcbiAgICAgICAgICAgIGFjdG9yOiBhY3RvcixcbiAgICAgICAgICAgIHBlcm1pc3Npb246ICdhY3RpdmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHIuYWN0aW9uc1swXS5hdXRob3JpemF0aW9uLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuYWN0b3IgPiBiLmFjdG9yID8gMSA6IGEuYWN0b3IgPCBiLmFjdG9yID8gLTEgOiAwO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIG11bHRpLWFjdGlvbiB0cmFuc2FjdGlvbiBzdXBwb3J0XG4gICAgICBpZiAoIW9wdGlvbk92ZXJyaWRlcy5tZXNzYWdlT25seSkge1xuICAgICAgICB0cmFuc2FjdGlvbkFyZyh0ciwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdHIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAgVHJhbnNhY3Rpb24gTWVzc2FnZSBDb2xsZWN0b3JcbiAgICAgV3JhcCBtZXJnZS5mdW5jdGlvbnMgYWRkaW5nIG9wdGlvbk92ZXJyaWRlcyB0aGF0IHdpbGwgc3VzcGVuZFxuICAgIHRyYW5zYWN0aW9uIGJyb2FkY2FzdC5cbiAgKi9cbiAgZnVuY3Rpb24gdHJNZXNzYWdlQ29sbGVjdG9yKHRyQ2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1lcmdlcyA9IGFyZ3VtZW50c1syXTtcblxuICAgIGFzc2VydC5lcXVhbCgnZnVuY3Rpb24nLCB0eXBlb2YgdHJDYWxsYmFjayA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh0ckNhbGxiYWNrKSwgJ3RyQ2FsbGJhY2snKTtcbiAgICBhc3NlcnQuZXF1YWwoJ29iamVjdCcsIHR5cGVvZiBvcHRpb25zID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9wdGlvbnMpLCAnb3B0aW9ucycpO1xuICAgIGFzc2VydC5lcXVhbCgnb2JqZWN0JywgdHlwZW9mIG1lcmdlcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShtZXJnZXMpLCAnbWVyZ2VzJyk7XG4gICAgYXNzZXJ0KCFBcnJheS5pc0FycmF5KG1lcmdlcyksICdtZXJnZXMgc2hvdWxkIG5vdCBiZSBhbiBhcnJheScpO1xuICAgIGFzc2VydC5lcXVhbCgnZnVuY3Rpb24nLCB0eXBlb2YgdHJhbnNhY3Rpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodHJhbnNhY3Rpb24pLCAndHJhbnNhY3Rpb24nKTtcblxuICAgIHZhciBtZXNzYWdlTGlzdCA9IFtdO1xuICAgIHZhciBtZXNzYWdlQ29sbGVjdG9yID0ge307XG5cbiAgICB2YXIgd3JhcCA9IGZ1bmN0aW9uIHdyYXAob3BGdW5jdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxsIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBidXQgZm9yY2UtZGlzYWJsZSBhIGxvdCBvZiBzdHVmZlxuICAgICAgICB2YXIgcmV0ID0gb3BGdW5jdGlvbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MuY29uY2F0KFt7XG4gICAgICAgICAgX19vcHRpb25PdmVycmlkZXM6IHtcbiAgICAgICAgICAgIGJyb2FkY2FzdDogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlT25seTogdHJ1ZSxcbiAgICAgICAgICAgIG5vQ2FsbGJhY2s6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1dKSk7XG4gICAgICAgIGlmIChyZXQgPT0gbnVsbCkge1xuICAgICAgICAgIC8vIGRvdWJsZS1jaGVjayAoY29kZSBjYW4gY2hhbmdlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2tzIGNhbiBub3QgYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgbXVsdGktYWN0aW9uIHRyYW5zYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZUxpc3QucHVzaChyZXQpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gbWVyZ2VzIGNhbiBiZSBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zIChhcyBpbiB0aGUgbWFpbiBlb3MgY29udHJhY3QpXG4gICAgLy8gb3IgYW4gb2JqZWN0IG9mIGNvbnRyYWN0IG5hbWVzIHdpdGggZnVuY3Rpb25zIHVuZGVyIHRob3NlXG4gICAgZm9yICh2YXIga2V5IGluIG1lcmdlcykge1xuICAgICAgdmFyIHZhbHVlID0gbWVyZ2VzW2tleV07XG4gICAgICB2YXIgdmFyaWFibGVOYW1lID0ga2V5LnJlcGxhY2UoL1xcLi8sICdfJyk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIE5hdGl2ZSBvcGVyYXRpb25zIChlb3MgY29udHJhY3QgZm9yIGV4YW1wbGUpXG4gICAgICAgIG1lc3NhZ2VDb2xsZWN0b3JbdmFyaWFibGVOYW1lXSA9IHdyYXAodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIG90aGVyIGNvbnRyYWN0KHMpIChjdXJyZW5jeSBjb250cmFjdCBmb3IgZXhhbXBsZSlcbiAgICAgICAgaWYgKG1lc3NhZ2VDb2xsZWN0b3JbdmFyaWFibGVOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgbWVzc2FnZUNvbGxlY3Rvclt2YXJpYWJsZU5hbWVdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5MiBpbiB2YWx1ZSkge1xuICAgICAgICAgIGlmIChrZXkyID09PSAndHJhbnNhY3Rpb24nKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWVzc2FnZUNvbGxlY3Rvclt2YXJpYWJsZU5hbWVdW2tleTJdID0gd3JhcCh2YWx1ZVtrZXkyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZUNvbGxlY3RvciA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgLy8gY2FsbGVyIHdpbGwgbG9hZCB0aGlzIHVwIHdpdGggYWN0aW9uc1xuICAgICAgcHJvbWlzZUNvbGxlY3RvciA9IHRyQ2FsbGJhY2sobWVzc2FnZUNvbGxlY3Rvcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb21pc2VDb2xsZWN0b3IgPSBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9taXNlQ29sbGVjdG9yKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChtZXNzYWdlTGlzdCkudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRNZXNzYWdlTGlzdCkge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlO1xuICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG4gICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gcmVzb2x2ZWRNZXNzYWdlTGlzdFtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgICAgdmFyIG0gPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICAgIHZhciBfbSRhY3Rpb25zID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShtLmFjdGlvbnMsIDEpLFxuICAgICAgICAgICAgICAgIGFjdGlvbiA9IF9tJGFjdGlvbnNbMF07XG5cbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyT2JqZWN0ID0ge307XG4gICAgICAgIHRyT2JqZWN0LmFjdGlvbnMgPSBhY3Rpb25zO1xuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24odHJPYmplY3QsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2FjdGlvbihhcmcsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGRlZmF1bHRFeHBpcmF0aW9uLCBvcHRpb25EZWZhdWx0LCByZXR1cm5Qcm9taXNlLCBzdXBlckNhbGxiYWNrLCByYXdUeCwgX2FyciwgX2ksIHR4RmllbGQsIHR4T2JqZWN0LCBidWYsIHRyLCB0cmFuc2FjdGlvbklkLCBzaWdzLCBjaGFpbklkQnVmLCBwYWNrZWRDb250ZXh0RnJlZURhdGEsIHNpZ25CdWY7XG5cbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmFzeW5jKGZ1bmN0aW9uIHRyYW5zYWN0aW9uJChfY29udGV4dDQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGRlZmF1bHRFeHBpcmF0aW9uID0gY29uZmlnLmV4cGlyZUluU2Vjb25kcyA/IGNvbmZpZy5leHBpcmVJblNlY29uZHMgOiA2MDtcbiAgICAgICAgICAgIG9wdGlvbkRlZmF1bHQgPSB7IGV4cGlyZUluU2Vjb25kczogZGVmYXVsdEV4cGlyYXRpb24sIGJyb2FkY2FzdDogdHJ1ZSwgc2lnbjogdHJ1ZSB9O1xuXG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSAvKmNsb25lKi8sIG9wdGlvbkRlZmF1bHQsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICByZXR1cm5Qcm9taXNlID0gdm9pZCAwO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHJldHVyblByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYXJnKSkgIT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCB0cmFuc2FjdGlvbiBhcmd1bWVudCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uJyk7XG5cbiAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcuYWN0aW9ucykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0aW5nIGFjdGlvbnMgYXJyYXknKTtcblxuICAgICAgICAgIGNhc2UgOTpcblxuICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2dnZXIubG9nIHx8IGNvbmZpZy5sb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gd3JhcCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgbG9nZ2VyXG4gICAgICAgICAgICAgIHN1cGVyQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVycm9yLCB0cikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiBjb25maWcubG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjb25maWcubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2dnZXIubG9nKSB7XG4gICAgICAgICAgICAgICAgICBjb25maWcubG9nZ2VyLmxvZyhKU09OLnN0cmluZ2lmeSh0cikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdXBlckNhbGxiYWNrKGVycm9yLCB0cik7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFyZy5hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWN0aW9uLmF1dGhvcml6YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0aW5nIGFjdGlvbi5hdXRob3JpemF0aW9uIGFycmF5JywgYWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghKG9wdGlvbnMuc2lnbiAmJiB0eXBlb2YgY29uZmlnLnNpZ25Qcm92aWRlciAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGluZyBjb25maWcuc2lnblByb3ZpZGVyIGZ1bmN0aW9uIChkaXNhYmxlIHVzaW5nIHtzaWduOiBmYWxzZX0pJyk7XG5cbiAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgcmF3VHggPSB7XG4gICAgICAgICAgICAgIG1heF9uZXRfdXNhZ2Vfd29yZHM6IDAsXG4gICAgICAgICAgICAgIG1heF9jcHVfdXNhZ2VfbXM6IDAsXG4gICAgICAgICAgICAgIGRlbGF5X3NlYzogMCxcbiAgICAgICAgICAgICAgY29udGV4dF9mcmVlX2FjdGlvbnM6IFtdLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXSxcbiAgICAgICAgICAgICAgc2lnbmF0dXJlczogW10sXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uX2V4dGVuc2lvbnM6IFtdXG5cbiAgICAgICAgICAgICAgLy8gZ2xvYmFsIHRyYW5zYWN0aW9uIGhlYWRlcnNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICghY29uZmlnLnRyYW5zYWN0aW9uSGVhZGVycykge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNvbmZpZy50cmFuc2FjdGlvbkhlYWRlcnMpID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmF3VHgsIGNvbmZpZy50cmFuc2FjdGlvbkhlYWRlcnMpO1xuICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyNTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgIGlmICghKHR5cGVvZiBjb25maWcudHJhbnNhY3Rpb25IZWFkZXJzID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyMjtcbiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXdyYXAoY29uZmlnLnRyYW5zYWN0aW9uSGVhZGVycyhvcHRpb25zLmV4cGlyZUluU2Vjb25kcywgY2hlY2tFcnJvcihjYWxsYmFjaywgY29uZmlnLmxvZ2dlciwgZnVuY3Rpb24gX2NhbGxlZTIoaGVhZGVycykge1xuICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGhlYWRlcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoaGVhZGVycyksICdvYmplY3QnLCAnZXhwZWN0aW5nIHRyYW5zYWN0aW9uIGhlYWRlciBvYmplY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJhd1R4LCBoZWFkZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCBudWxsLCB0aGlzKTtcbiAgICAgICAgICAgIH0pKSk7XG5cbiAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyNTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgJ2NvbmZpZy50cmFuc2FjdGlvbkhlYWRlcnMgc2hvdWxkIGJlIGFuIG9iamVjdCBvciBmdW5jdGlvbicpO1xuXG4gICAgICAgICAgY2FzZSAyNTpcblxuICAgICAgICAgICAgLy8gcGVyIHRyYW5zYWN0aW9uIGhlYWRlcnNcbiAgICAgICAgICAgIF9hcnIgPSBbJ2V4cGlyYXRpb24nLCAncmVmX2Jsb2NrX251bScsICdyZWZfYmxvY2tfcHJlZml4JywgJ2RlbGF5X3NlYycsICdtYXhfbmV0X3VzYWdlX3dvcmRzJywgJ21heF9jcHVfdXNhZ2VfbXMnXTtcbiAgICAgICAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9hcnIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgIHR4RmllbGQgPSBfYXJyW19pXTtcblxuICAgICAgICAgICAgICBpZiAoYXJnW3R4RmllbGRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBlb3MudHJhbnNhY3Rpb24oJ2Vvc2lvJywgZW9zaW8gPT4geyBlb3Npby5teWFjdGlvbiguLikgfSwge2RlbGF5X3NlYzogMzY5fSlcbiAgICAgICAgICAgICAgICAvLyBlb3MudHJhbnNhY3Rpb24oe2RlbGF5X3NlYzogMzY5LCBhY3Rpb25zOiBbLi4uXX0pXG4gICAgICAgICAgICAgICAgcmF3VHhbdHhGaWVsZF0gPSBhcmdbdHhGaWVsZF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9uc1t0eEZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZW9zLnRyYW5zYWN0aW9uKHRyID0+IHt0ci50cmFuc2ZlciguLi4pfSwge2RlbGF5X3NlYzogMzY5fSlcbiAgICAgICAgICAgICAgICByYXdUeFt0eEZpZWxkXSA9IG9wdGlvbnNbdHhGaWVsZF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZW9zanMgY2FsY3VhbHRlZCBoZWFkZXJzXG5cbiAgICAgICAgICAgIGlmICghKCAvLyBtaW5pbXVtIHJlcXVpcmVkIGhlYWRlcnNcbiAgICAgICAgICAgIHJhd1R4LmV4cGlyYXRpb24gPT09IHVuZGVmaW5lZCB8fCByYXdUeC5yZWZfYmxvY2tfbnVtID09PSB1bmRlZmluZWQgfHwgcmF3VHgucmVmX2Jsb2NrX3ByZWZpeCA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDMxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXNzZXJ0KG5ldHdvcmssICdOZXR3b3JrIGlzIHJlcXVpcmVkLCBwcm92aWRlIGh0dHBFbmRwb2ludCBvciBvd24gdHJhbnNhY3Rpb24gaGVhZGVycycpO1xuICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzMTtcbiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXdyYXAobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgbmV0d29yay5jcmVhdGVUcmFuc2FjdGlvbihvcHRpb25zLmV4cGlyZUluU2Vjb25kcywgY2hlY2tFcnJvcihjYWxsYmFjaywgY29uZmlnLmxvZ2dlciwgZnVuY3Rpb24gX2NhbGxlZTMoaGVhZGVycykge1xuICAgICAgICAgICAgICAgIHZhciBfYXJyMiwgX2kyLCB0eEZpZWxkO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYXJyMiA9IFsnZXhwaXJhdGlvbicsICdyZWZfYmxvY2tfbnVtJywgJ3JlZl9ibG9ja19wcmVmaXgnXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfaTIgPSAwOyBfaTIgPCBfYXJyMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR4RmllbGQgPSBfYXJyMltfaTJdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHR4RmllbGQsIGhlYWRlcnNbdHhGaWVsZF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3VHhbdHhGaWVsZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1R4W3R4RmllbGRdID0gaGVhZGVyc1t0eEZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIG51bGwsIHRoaXMpO1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDMxOlxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmF3VHgnLCByYXdUeClcblxuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShyYXdUeC5leHBpcmF0aW9uKSwgJ3N0cmluZycsICdleHBlY3RpbmcgZXhwaXJhdGlvbjogaXNvIGRhdGUgdGltZSBzdHJpbmcnKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbCgoMCwgX3R5cGVvZjMuZGVmYXVsdCkocmF3VHgucmVmX2Jsb2NrX251bSksICdudW1iZXInLCAnZXhwZWN0aW5nIHJlZl9ibG9ja19udW0gbnVtYmVyJyk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJhd1R4LnJlZl9ibG9ja19wcmVmaXgpLCAnbnVtYmVyJywgJ2V4cGVjdGluZyByZWZfYmxvY2tfcHJlZml4IG51bWJlcicpO1xuXG4gICAgICAgICAgICByYXdUeC5jb250ZXh0X2ZyZWVfYWN0aW9ucyA9IGFyZy5jb250ZXh0X2ZyZWVfYWN0aW9ucztcbiAgICAgICAgICAgIHJhd1R4LmFjdGlvbnMgPSBhcmcuYWN0aW9ucztcbiAgICAgICAgICAgIHJhd1R4LnRyYW5zYWN0aW9uX2V4dGVuc2lvbnMgPSBhcmcudHJhbnNhY3Rpb25fZXh0ZW5zaW9ucztcblxuICAgICAgICAgICAgLy8gUmVzb2x2ZSBzaG9ydGhhbmRcbiAgICAgICAgICAgIHR4T2JqZWN0ID0gVHJhbnNhY3Rpb24uZnJvbU9iamVjdChyYXdUeCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndHhPYmplY3QnLCB0eE9iamVjdClcblxuICAgICAgICAgICAgYnVmID0gRmNidWZmZXIudG9CdWZmZXIoVHJhbnNhY3Rpb24sIHR4T2JqZWN0KTtcbiAgICAgICAgICAgIHRyID0gVHJhbnNhY3Rpb24udG9PYmplY3QodHhPYmplY3QpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25JZCA9IGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShidWYpLmRpZ2VzdCgpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgICAgIHNpZ3MgPSBbXTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2lnbikge1xuICAgICAgICAgICAgICBjaGFpbklkQnVmID0gQnVmZmVyLmZyb20oY29uZmlnLmNoYWluSWQsICdoZXgnKTtcbiAgICAgICAgICAgICAgcGFja2VkQ29udGV4dEZyZWVEYXRhID0gQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkoMzIpKTsgLy8gVE9ET1xuXG4gICAgICAgICAgICAgIHNpZ25CdWYgPSBCdWZmZXIuY29uY2F0KFtjaGFpbklkQnVmLCBidWYsIHBhY2tlZENvbnRleHRGcmVlRGF0YV0pO1xuXG5cbiAgICAgICAgICAgICAgc2lncyA9IGNvbmZpZy5zaWduUHJvdmlkZXIoeyB0cmFuc2FjdGlvbjogdHIsIGJ1Zjogc2lnbkJ1Ziwgc2lnbjogc2lnbixcbiAgICAgICAgICAgICAgICBvcHRpb25zS2V5UHJvdmlkZXI6IG9wdGlvbnMua2V5UHJvdmlkZXIgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNpZ3MpKSB7XG4gICAgICAgICAgICAgICAgc2lncyA9IFtzaWdzXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzaWdzIGNhbiBiZSBzdHJpbmdzIG9yIFByb21pc2VzXG4gICAgICAgICAgICBQcm9taXNlLmFsbChzaWdzKS50aGVuKGZ1bmN0aW9uIChzaWdzKSB7XG4gICAgICAgICAgICAgIHNpZ3MgPSBbXS5jb25jYXQuYXBwbHkoW10sIHNpZ3MpOyAvLyBmbGF0dGVuIGFycmF5cyBpbiBhcnJheVxuXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBzaWcgPSBzaWdzW2ldO1xuICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSAoaGV4IHRvIGJhc2U1OCBmb3JtYXQgZm9yIGV4YW1wbGUpXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnICYmIHNpZy5sZW5ndGggPT09IDEzMCkge1xuICAgICAgICAgICAgICAgICAgc2lnc1tpXSA9IGVjYy5TaWduYXR1cmUuZnJvbShzaWcpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHBhY2tlZFRyID0ge1xuICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyLFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZXM6IHNpZ3NcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB2YXIgbW9jayA9IGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zID8gY29uZmlnLm1vY2tUcmFuc2FjdGlvbnMoKSA6IG51bGw7XG4gICAgICAgICAgICAgIGlmIChtb2NrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoL3Bhc3N8ZmFpbC8udGVzdChtb2NrKSwgJ21vY2tUcmFuc2FjdGlvbnMgc2hvdWxkIHJldHVybiBhIHN0cmluZzogcGFzcyBvciBmYWlsJyk7XG4gICAgICAgICAgICAgICAgaWYgKG1vY2sgPT09ICdwYXNzJykge1xuICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbl9pZDogdHJhbnNhY3Rpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgbW9ja1RyYW5zYWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogcGFja2VkVHJcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobW9jayA9PT0gJ2ZhaWwnKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAnW3B1c2hfdHJhbnNhY3Rpb24gbW9jayBlcnJvcl0gXFwnZmFrZSBlcnJvclxcJywgZGlnZXN0IFxcJycgKyBidWYudG9TdHJpbmcoJ2hleCcpICsgJ1xcJyc7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChjb25maWcubG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghb3B0aW9ucy5icm9hZGNhc3QgfHwgIW5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbl9pZDogdHJhbnNhY3Rpb25JZCxcbiAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogcGFja2VkVHJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXR3b3JrLnB1c2hUcmFuc2FjdGlvbihwYWNrZWRUciwgZnVuY3Rpb24gKGVycm9yLCBwcm9jZXNzZWRUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHBhY2tlZFRyLFxuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uX2lkOiB0cmFuc2FjdGlvbklkXG4gICAgICAgICAgICAgICAgICAgIH0sIHByb2Nlc3NlZFRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvZ2dlci5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5sb2dnZXIuZXJyb3IoJ1twdXNoX3RyYW5zYWN0aW9uIGVycm9yXSBcXCcnICsgZXJyb3IubWVzc2FnZSArICdcXCcsIHRyYW5zYWN0aW9uIFxcJycgKyBidWYudG9TdHJpbmcoJ2hleCcpICsgJ1xcJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25maWcubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCdyZXR1cm4nLCByZXR1cm5Qcm9taXNlKTtcblxuICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgbnVsbCwgdGhpcyk7XG4gIH1cblxuICAvLyByZXR1cm4gV3JpdGVBcGlcbiAgcmV0dXJuIHtcbiAgICBnZW5UcmFuc2FjdGlvbjogZ2VuVHJhbnNhY3Rpb24sXG4gICAgZ2VuQ29udHJhY3RBY3Rpb25zOiBnZW5Db250cmFjdEFjdGlvbnMsXG4gICAgZ2VuTWV0aG9kOiBnZW5NZXRob2RcbiAgfTtcbn1cblxudmFyIGlzU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiBpc1N0cmluZ0FycmF5KG8pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobykgJiYgby5sZW5ndGggPiAwICYmIG8uZmluZEluZGV4KGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvICE9PSAnc3RyaW5nJztcbiAgfSkgPT09IC0xO1xufTtcblxuLy8gTm9ybWFsaXplIHRoZSBleHRyYSBvcHRpb25hbCBvcHRpb25zIGFyZ3VtZW50XG52YXIgb3B0aW9uc0Zvcm1hdHRlciA9IGZ1bmN0aW9uIG9wdGlvbnNGb3JtYXR0ZXIob3B0aW9uKSB7XG4gIGlmICgodHlwZW9mIG9wdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShvcHRpb24pKSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0aW9uOyAvLyB7ZGVidWcsIGJyb2FkY2FzdCwgZXRjfSAoZXRjIG15IG92ZXJ3cml0ZSB0ciBiZWxvdylcbiAgfVxuICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgLy8gYnJvYWRjYXN0IGFyZ3VtZW50IGFzIGEgdHJ1ZSBmYWxzZSB2YWx1ZSwgYmFjay1lbmQgY2xpIHdpbGwgdXNlIHRoaXMgc2hvcnRoYW5kXG4gICAgcmV0dXJuIHsgYnJvYWRjYXN0OiBvcHRpb24gfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXNhZ2UoYWN0aW9uLCBkZWZpbml0aW9uLCBOZXR3b3JrLCBhY2NvdW50LCBjb25maWcpIHtcbiAgdmFyIHVzYWdlID0gJyc7XG4gIHZhciBvdXQgPSBmdW5jdGlvbiBvdXQoKSB7XG4gICAgdmFyIHN0ciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG5cbiAgICB1c2FnZSArPSBzdHIgKyAnXFxuJztcbiAgfTtcbiAgb3V0KCdDT05UUkFDVCcpO1xuICBvdXQoYWNjb3VudCk7XG4gIG91dCgpO1xuXG4gIG91dCgnQUNUSU9OJyk7XG4gIG91dChhY3Rpb24ubmFtZSk7XG4gIG91dCgpO1xuXG4gIHZhciBjYWNoZSA9IGNvbmZpZy5hYmlDYWNoZS5hYmkoYWNjb3VudCk7XG5cbiAgb3V0KCdQQVJBTUVURVJTJyk7XG4gIG91dChKU09OLnN0cmluZ2lmeShzY2hlbWFGaWVsZHMoY2FjaGUuc2NoZW1hLCBhY3Rpb24udHlwZSksIG51bGwsIDQpKTtcbiAgb3V0KCk7XG5cbiAgdmFyIHN0cnVjdCA9IGNhY2hlLnN0cnVjdHNbYWN0aW9uLnR5cGVdO1xuXG4gIG91dCgnRVhBTVBMRScpO1xuICBvdXQoYWNjb3VudCArICcuJyArIGFjdGlvbi5uYW1lICsgJygnICsgSlNPTi5zdHJpbmdpZnkoc3RydWN0LnRvT2JqZWN0KCksIG51bGwsIDQpICsgJyknKTtcblxuICByZXR1cm4gdXNhZ2U7XG59XG5cbnZhciBjaGVja0Vycm9yID0gZnVuY3Rpb24gY2hlY2tFcnJvcihwYXJlbnRFcnIsIGxvZ2dlciwgcGFycmVudFJlcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmIChsb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdlcnJvcicsIGVycm9yKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudEVycihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShwYXJyZW50UmVzKHJlc3VsdCkpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBwYXJlbnRFcnIoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxuLyoqIENvbGxhcHNlIGluaGVyaXRhbmNlICh2aWEgXCJiYXNlXCIpIHB1dHRpbmcgYWxsIHRoZSBmaWVsZHMgaW4gb25lIG9iamVjdC4gKi9cbmZ1bmN0aW9uIHNjaGVtYUZpZWxkcyhzY2hlbWEsIHR5cGUpIHtcbiAgdmFyIF9zY2hlbWEkdHlwZSA9IHNjaGVtYVt0eXBlXSxcbiAgICAgIGJhc2UgPSBfc2NoZW1hJHR5cGUuYmFzZSxcbiAgICAgIGZpZWxkcyA9IF9zY2hlbWEkdHlwZS5maWVsZHM7XG5cbiAgdmFyIGRlZiA9IHt9O1xuICBpZiAoYmFzZSAmJiBiYXNlICE9PSAnJykge1xuICAgIE9iamVjdC5hc3NpZ24oZGVmLCBzY2hlbWFGaWVsZHMoc2NoZW1hLCBiYXNlKSk7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkZWYsIGZpZWxkcyk7XG4gIHJldHVybiBkZWY7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElFb3NOb2RlQ29uZmlnIHtcbiAgICBjaGFpbklkOiBzdHJpbmc7XG4gICAgaHR0cEVuZHBvaW50Pzogc3RyaW5nO1xuICAgIGtleVByb3ZpZGVyPzogc3RyaW5nW107XG4gICAgbW9ja1RyYW5zYWN0aW9ucz86ICgpID0+IGFueTtcbiAgICBleHBpcmVJblNlY29uZHM/OiBudW1iZXI7XG4gICAgYnJvYWRjYXN0PzogYm9vbGVhbjtcbiAgICBkZWJ1Zz86IGJvb2xlYW47XG4gICAgc2lnbj86IGJvb2xlYW47XG4gICAga2V5UHJlZml4Pzogc3RyaW5nO1xuICAgIHRyYW5zYWN0aW9uSGVhZGVycz86IChleHBpcmVJblNlY29uZHM6IG51bWJlciwgY2FsbGJhY2s6IChlcnJvcjogYW55LCBoZWFkZXJzOiBhbnkpID0+IGFueSkgPT4gYW55O1xuICAgIGxvZ2dlcj86IHtcbiAgICAgICAgbG9nPzogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnlcbiAgICAgICAgZXJyb3I/OiAoLi4uYXJnczogYW55W10pID0+IGFueSxcbiAgICB9O1xuICAgIGF1dGhvcml6YXRpb24/OiBzdHJpbmc7XG4gICAgYmxvY2tjaGFpbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRW9zTm9kZUNvbmZpZ1RhYmxlIHtcbiAgICBbbmFtZTogc3RyaW5nXTogSUVvc05vZGVDb25maWc7XG59XG5cbmV4cG9ydCBjb25zdCBlb3NOb2RlQ29uZmlnczogSUVvc05vZGVDb25maWdUYWJsZSA9IHtcbiAgICBzY2F0dGVyOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZXMuZ2V0LXNjYXR0ZXIuY29tOjQ0MycsXG4gICAgfSxcbiAgICBhY3JvZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpMi5hY3JvZW9zLm9uZScsXG4gICAgfSxcbiAgICBhbG9oYWVvczoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwOi8vYXBpLm1haW4uYWxvaGFlb3MuY29tJyxcbiAgICB9LFxuICAgIGF0dGljbGFiOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zYnAuYXR0aWNsYWIubmV0JyxcbiAgICB9LFxuICAgIGdlbmVyZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5nZW5lcmVvcy5pbycsXG4gICAgfSxcbiAgICBibG9ja21hdHJpeDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Vvc2FwaS5ibG9ja21hdHJpeC5uZXR3b3JrJyxcbiAgICB9LFxuICAgIGNoYWlucmlmdDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Vvc3B1YmxpYy5jaGFpbnJpZnQuY29tJyxcbiAgICB9LFxuICAgIGVvc2lvOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc2lvLmNyJyxcbiAgICB9LFxuICAgIGNyeXB0b2xpb25zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYnAuY3J5cHRvbGlvbnMuaW8nLFxuICAgIH0sXG4gICAgY3lwaGVyZ2xhc3M6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuY3lwaGVyZ2xhc3MuY29tJyxcbiAgICB9LFxuICAgIGVvczQyOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZXMuZW9zNDIuaW8nLFxuICAgIH0sXG4gICAgZW9zYW1zdGVyZGFtOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5lb3NhbXN0ZXJkYW0ubmV0JyxcbiAgICB9LFxuICAgIGVvc2FzaWE6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkxLmVvc2FzaWEub25lJyxcbiAgICB9LFxuICAgIGVvc2F1dGhvcml0eToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL3B1YmxpY2FwaS1tYWlubmV0LmVvc2F1dGhvcml0eS5jb20nLFxuICAgIH0sXG4gICAgZW9zYmVhbjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NiZWFuLmNvbScsXG4gICAgfSxcbiAgICBlb3NiZWlqaW5nOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc2JlaWppbmcub25lJyxcbiAgICB9LFxuICAgIGVvc2JpeGluOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFycy5mbi5lb3NiaXhpbi5jb20nLFxuICAgIH0sXG4gICAgZW9zY2FmZWJsb2NrOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zLmVvc2NhZmVibG9jay5jb20nLFxuICAgIH0sXG4gICAgZW9zY2FuYWRhOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5lb3NjYW5hZGEuY29tJyxcbiAgICB9LFxuICAgIGVvc2Nhbm5vbjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL21haW5uZXQuZW9zY2Fubm9uLmlvJyxcbiAgICB9LFxuICAgIGVvc2NsZWFuZXI6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zY2xlYW5lci5jb20nLFxuICAgIH0sXG4gICAgZW9zZGFjOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZXUuZW9zZGFjLmlvJyxcbiAgICB9LFxuICAgIGVvc2R1Ymxpbjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NkdWJsaW4uaW8nLFxuICAgIH0sXG4gICAgZW9zZW91bDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3Nlb3VsLmlvJyxcbiAgICB9LFxuICAgIGVvc2Zlbmd3bzoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NmZW5nd28uY29tJyxcbiAgICB9LFxuICAgIGVvc2ZsYXJlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZS5lb3NmbGFyZS5pbycsXG4gICAgfSxcbiAgICBnZW5lc2lzX21pbmluZzoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Vvcy5nZW5lc2lzLW1pbmluZy5jb20nLFxuICAgIH0sXG4gICAgZW9zZGV0cm9pdDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NkZXRyb2l0LmlvJyxcbiAgICB9LFxuICAgIG1lZXQ6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9tYWlubmV0Lm1lZXQub25lJyxcbiAgICB9LFxuICAgIGVvc2dyYXZpdHk6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGktbWFpbm5ldC5lb3NncmF2aXR5LmNvbScsXG4gICAgfSxcbiAgICBlb3NsYW9tYW86IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zbGFvbWFvLmNvbScsXG4gICAgfSxcbiAgICBlb3NtZXRhbDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaTMuZW9zbWV0YWwuaW8nLFxuICAgIH0sXG4gICAgbWluZXJnYXRlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvcy5taW5lcmdhdGUuY29tJyxcbiAgICB9LFxuICAgIG1pbmVyZ2F0ZV9icDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2JwLmVvcy5taW5lcmdhdGUuY29tJyxcbiAgICB9LFxuICAgIGVvc246IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zbi5pbycsXG4gICAgfSxcbiAgICBlb3NuZXd5b3JrOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc25ld3lvcmsuaW8nLFxuICAgIH0sXG4gICAgZW9zbm9kZW9uZToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5tYWluLW5ldC5lb3Nub2Rlb25lLmlvJyxcbiAgICB9LFxuICAgIGVvc3BhY2V4OiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLW1haW5uZXQuZW9zcGFjZXguY29tJyxcbiAgICB9LFxuICAgIG5vZGVwYWNpZmljOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zYXBpLm5vZGVwYWNpZmljLmNvbScsXG4gICAgfSxcbiAgICBlb3NyaW86IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zcmlvLmlvJyxcbiAgICB9LFxuICAgIGVvc3N3ZWRlbjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3Nzd2VkZW4uc2UnLFxuICAgIH0sXG4gICAgZW9zdGl0YW46IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zdGl0YW4uY29tJyxcbiAgICB9LFxuICAgIGVvc3RyaWJlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc3RyaWJlLmlvJyxcbiAgICB9LFxuICAgIGVvc3ZvbGdhOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYnAuZW9zdm9sZ2Eub25lJyxcbiAgICB9LFxuICAgIGVvc3dlYjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaW5vZGUuZW9zd2ViLm5ldCcsXG4gICAgfSxcbiAgICBlb3N5czoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL3JwYy5lb3N5cy5pbycsXG4gICAgfSxcbiAgICBmcmFuY2Vvczoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5mcmFuY2Vvcy5mcicsXG4gICAgfSxcbiAgICBlb3NibG9ja2J1c3Rlcjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Z1bGwuZW9zYmxvY2tidXN0ZXIuY29tJyxcbiAgICB9LFxuICAgIGplZGE6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuamVkYS5vbmUnLFxuICAgIH0sXG4gICAgb3JhY2xlY2hhaW46IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkub3JhY2xlY2hhaW4uaW8nLFxuICAgIH0sXG4gICAgc2hlb3M6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuc2hlb3Mub3JnJyxcbiAgICB9LFxuICAgIGVvc2dlbmV2YToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NnZW5ldmEuaW8nLFxuICAgIH0sXG4gICAgZ3JleW1hc3M6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9lb3MuZ3JleW1hc3MuY29tJyxcbiAgICB9LFxuICAgIHpiZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZTEuemJlb3MuY29tJyxcbiAgICB9LFxuICAgIHplcm94ZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZTEuemVyb3hlb3MuY29tJyxcbiAgICB9LFxuICAgIGVvc25vZGU6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9wcm94eS5lb3Nub2RlLnRvb2xzJyxcbiAgICB9LFxuICAgIGRmdXNlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5lb3MuZGZ1c2UuaW8nLFxuICAgIH0sXG4gICAgZGV2OiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnY2YwNTdiYmZiNzI2NDA0NzFmZDkxMGJjYjY3NjM5YzIyZGY5ZjkyNDcwOTM2Y2RkYzFhZGUwZTJmMmU3ZGM0ZicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHA6Ly9kZXYudG9uZW9zLnBybzo3Nzc3JyxcbiAgICB9LFxufTtcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cblx0Ki9cblx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuXHRcdC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcblxuXHRcdC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnN0IGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuXHRcdFx0aW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwtP1xcZD9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIid1c2luZyBzdHJpY3QnO1xuXG4vKipcbiAqIFN0b3JhZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgREIge1xuICAgIC8qKlxuICAgICAqIHRoZSBzdG9yYWdlIGxpYiBpbnRlcmFjdCB3aXRoIGxvY2FsU3RvcmFnZSBub3dcbiAgICAgKiBAcGFyYW0gZGVmYXVsdENvbmZpZ3MgLSBkZWZpbmUgd2hhdCB3aWxsIHlvdSBnZXQgd2hlbiB5b3UgcmVxdWlyZSBhbiBrZXkgbm90IGV4aXN0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljIGRlZmF1bHRDb25maWdzOiBhbnkpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdmFsIGJ5IGtleVxuICAgICAqIEBwYXJhbSBrZXkgLSB3aWxsIGJlIGFzc2VtYmxlZCB0byBlb3NwbGF5ZXI6OiR7a2V5fVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgcHVibGljIGdldChrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBwS2V5ID0gYGVvc3BsYXllcjo6JHtrZXl9YDtcbiAgICAgICAgY29uc3QgaXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHBLZXkpO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLmRlZmF1bHRDb25maWdzKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmRlZmF1bHRDb25maWdzW2tleV07XG4gICAgICAgICAgICB0aGlzLnNldChrZXksIHZhbCk7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSB2YWxcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWw6IGFueSkge1xuICAgICAgICBjb25zdCBwS2V5ID0gYGVvc3BsYXllcjo6JHtrZXl9YDtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocEtleSwgdmFsKTtcbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQge0JpZ051bWJlcn0gZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCB7Zm9yTXMsIHRpbWVvdXRQcm9taXNlfSBmcm9tICcuLi91dGlscy93YWl0JztcblxuaW1wb3J0IHtjcmVhdGVMb2dnZXJ9IGZyb20gJy4uL3V0aWxzL2xvZyc7XG5cbmltcG9ydCB7RWNjLCBFb3N9IGZyb20gJy4uL3R5cGVzL2xpYnMnO1xuXG5pbXBvcnQge0lTaWduUGx1Z2lufSBmcm9tICcuLi9wbHVnaW5zJztcbmltcG9ydCB7SUFjY291bnRJbmZvLCBJQXV0aG9yaXphdGlvbiwgSUVvc0NsaWVudCwgSUVvc1RyYW5zYWN0aW9uRGF0YSwgSUlkZW50aXR5fSBmcm9tICcuLi90eXBlcy9lb3MnO1xuXG5jb25zdCBERUZBVUxUX0ZFVENIX1RJTUVPVVQgPSA2MDAwMDtcblxuY29uc3QgbG9nID0gY3JlYXRlTG9nZ2VyKCdjaGFpbicpO1xuLyoqXG4gKiBjaGFpbiBoZWxwZXIsIHN1cHBvcnRlZCBjaGFpbiBvcGVyYXRpb25zXG4gKiBAYXV0aG9yIGtpbmdoYW5kQGZveG1haWwuY29tXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYWluSGVscGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBfZW9zOiBJRW9zQ2xpZW50KSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGluZm8gb2YgdGhlIGNoYWluIGNvbm5lY3RlZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldEluZm8oKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5fZW9zLmdldEluZm8oe30pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgc3BlY2lmaWMgYmxvY2sgb2YgdGhlIGNoYWluXG4gICAgICogQHBhcmFtIGJsb2NrTnVtT3JJZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldEJsb2NrKGJsb2NrTnVtT3JJZDogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGJsb2NrX251bV9vcl9pZDogYmxvY2tOdW1PcklkLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2Vvcy5nZXRCbG9jayhwYXJhbXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgY29udHJhY3RcbiAgICAgKiBAcGFyYW0gY29kZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldENvbnRyYWN0KGNvZGU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZW9zLmNvbnRyYWN0KGNvZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgYWJpIG9mIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIGNvZGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRBYmkoY29kZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWJpKGNvZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgZGVmaW5pdGlvbiBvZiBhIHRhYmxlIGluIHNwZWNpZmljIGNvbnRyYWN0IGFiaVxuICAgICAqIEBwYXJhbSBjb2RlXG4gICAgICogQHBhcmFtIHRhYmxlTmFtZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Knx1bmRlZmluZWQ+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRUYWJsZUFiaShjb2RlOiBzdHJpbmcsIHRhYmxlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGFiaSA9IGF3YWl0IHRoaXMuZ2V0QWJpKGNvZGUpO1xuICAgICAgICByZXR1cm4gYWJpLmFiaS50YWJsZXMuZmluZCgoZGVzYzogYW55KSA9PiBkZXNjLm5hbWUgPT09IHRhYmxlTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWJpSnNvblRvQmluXG4gICAgICogQHBhcmFtIGNvZGVcbiAgICAgKiBAcGFyYW0gYWN0aW9uXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGFiaUpzb25Ub0Jpbihjb2RlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nLCBhcmdzOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLl9lb3MuYWJpSnNvblRvQmluKHBhcmFtcykpLmJpbmFyZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFjY291bnQgaW5mbyBvZiBhbnkgdXNlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYWNjb3VudF9uYW1lIC0gc3RyaW5nIG5hbWUgb3IgaWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHtBY2NvdW50SW5mb30+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRBY2NvdW50SW5mbyhhY2NvdW50X25hbWU6IHN0cmluZyk6IFByb21pc2U8SUFjY291bnRJbmZvPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWNjb3VudCh7YWNjb3VudF9uYW1lfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGZpcnN0IHB1YmxpYyBrZXkgb2YgYW4gYWNjb3VudFxuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSBhY2NvdW50X25hbWVcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5IC0gZGVmYXVsdCBpcyAnYWN0aXZlJ1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldFB1YktleShhY2NvdW50X25hbWU6IHN0cmluZywgYXV0aG9yaXR5OiBzdHJpbmcgPSAnYWN0aXZlJykge1xuICAgICAgICBjb25zdCBwdWJrZXlzID0gKGF3YWl0IHRoaXMuZ2V0UHViS2V5cyhhY2NvdW50X25hbWUsIGF1dGhvcml0eSkpO1xuICAgICAgICBpZiAoIXB1YmtleXMgfHwgcHVia2V5cy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgbG9nLndhcm5pbmcoYGNhbm5vdCBmaW5kIHB1YmxpYyBrZXkgZm9yICR7YWNjb3VudF9uYW1lfUAke2F1dGhvcml0eX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRQdWJLZXlzKGFjY291bnRfbmFtZSwgYXV0aG9yaXR5KSlbMF0ua2V5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBwdWJsaWMga2V5cyBvZiBhbiBhY2NvdW50XG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBhdXRob3JpdHkgLSBkZWZhdWx0IGlzICdhY3RpdmUnXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UHViS2V5cyhhY2NvdW50X25hbWU6IHN0cmluZywgYXV0aG9yaXR5OiBzdHJpbmcgPSAnYWN0aXZlJykge1xuICAgICAgICBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKTtcbiAgICAgICAgY29uc3QgcGVybWlzc2lvbiA9IGFjY291bnRJbmZvLnBlcm1pc3Npb25zLmZpbmQoKHY6IGFueSkgPT4gdi5wZXJtX25hbWUgPT09IGF1dGhvcml0eSk7XG4gICAgICAgIGlmICghcGVybWlzc2lvbikgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZmluZCB0aGUgcGVybWlzc2lvbiBvZiAke2FjY291bnRfbmFtZX1gKTtcbiAgICAgICAgcmV0dXJuIHBlcm1pc3Npb24ucmVxdWlyZWRfYXV0aC5rZXlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlY292ZXIgcHVibGljIGtleSBmcm9tIHNpZ25hdHVyZVxuICAgICAqIEBwYXJhbSBzaWduYXR1cmUgLSBzaWduZWQgZGF0YVxuICAgICAqIEBwYXJhbSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIHB1YmxpYyByZWNvdmVyU2lnbihzaWduYXR1cmU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEVjYy5yZWNvdmVyKHNpZ25hdHVyZSwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdmFsaWRhdGUgaWYgc2lnbmVkIGRhdGEgaXMgc2lnbmVkIGJ5IGEgYWNjb3VudFxuICAgICAqIEBwYXJhbSBzaWduYXR1cmUgLSBzaWduZWQgZGF0YVxuICAgICAqIEBwYXJhbSBtZXNzYWdlXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBhdXRob3JpdHkgLSBkZWZhdWx0IGlzICdhY3RpdmUnXG4gICAgICogQHBhcmFtIHtBcnJheS48SVNpZ25QbHVnaW4+fSBzaWduUGx1Z2lucyAtIHBsdWdpbnMgZm9yIHZhbGlkYXRlIHNpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhbGlkYXRlU2lnbihTSUcsIE1TRywgQUNDLCAnYWN0aXZlJywgeyBbJ3ByZXRvbmFydHMxMUBlb3Npby5jb2RlJ10gOiBhc3luYyAoYWNjb3VudCwgcmVjb3ZlcktleSkgPT4gdmFsaWRhdGUgcnBjIC4uLiB9XG4gICAgICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH0gLSByZWNvdmVyIHB1YmxpYyBrZXksIGFuZCBpdCdzIGZhaWxlZCB3aGVuICd1bmRlZmluZWQnIHJldHVybi5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGVTaWduKFxuICAgICAgICBzaWduYXR1cmU6IHN0cmluZyxcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nLFxuICAgICAgICBhY2NvdW50X25hbWU6IHN0cmluZyxcbiAgICAgICAgYXV0aG9yaXR5OiBzdHJpbmcgPSAnYWN0aXZlJyxcbiAgICAgICAgLi4uIHNpZ25QbHVnaW5zOiBJU2lnblBsdWdpbltdKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgcmVjb3ZlcktleSA9IHRoaXMucmVjb3ZlclNpZ24oc2lnbmF0dXJlLCBtZXNzYWdlKTtcbiAgICAgICAgY29uc3Qge3Blcm1pc3Npb25zfSA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKTtcbiAgICAgICAgaWYgKCFwZXJtaXNzaW9ucykge1xuICAgICAgICAgICAgbG9nLndhcm5pbmcoYHBlcm1pc3Npb25zIG9mIGFjY291bnRfbmFtZSAke2FjY291bnRfbmFtZX0gYXJlIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwZXJtID0gcGVybWlzc2lvbnMuZmluZCgocDogYW55KSA9PiBwLnBlcm1fbmFtZSA9PT0gYXV0aG9yaXR5KTtcbiAgICAgICAgaWYgKCFwZXJtaXNzaW9ucykge1xuICAgICAgICAgICAgbG9nLndhcm5pbmcoYHBlcm1pc3Npb24gJHthdXRob3JpdHl9IGFjY291bnRfbmFtZSAke2FjY291bnRfbmFtZX0gYXJlIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHthY2NvdW50cywga2V5c30gPSBwZXJtLnJlcXVpcmVkX2F1dGg7XG4gICAgICAgIGNvbnN0IGtleU9iajogeyBrZXk6IHN0cmluZyB9ID0ga2V5cy5maW5kKCh2OiBhbnkpID0+IHYua2V5ID09PSByZWNvdmVyS2V5KTtcbiAgICAgICAgaWYgKGtleU9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGtleU9iai5rZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaWduUGx1Z2lucyB8fCBzaWduUGx1Z2lucy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjY1N0cnM6IHN0cmluZ1tdID0gYWNjb3VudHMubWFwKChhY2M6IGFueSkgPT4gYCR7YWNjLnBlcm1pc3Npb24uYWN0b3J9QCR7YWNjLnBlcm1pc3Npb24ucGVybWlzc2lvbn1gKTtcbiAgICAgICAgbG9nLnZlcmJvc2UoJ3RyeSBtYXRjaCcsIGFjY291bnRzLCBhY2NTdHJzLCBzaWduUGx1Z2lucyk7XG4gICAgICAgIGZvciAobGV0IGlQbGcgPSAwOyBpUGxnIDwgc2lnblBsdWdpbnMubGVuZ3RoOyBpUGxnKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25QbHVnaW46IElTaWduUGx1Z2luID0gc2lnblBsdWdpbnNbaVBsZ107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjY1N0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50OiBzdHJpbmcgPSBhY2NTdHJzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IHNpZ25QbHVnaW4udmFsaWRhdG9yUHJvdmlkZXJbYWNjb3VudF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvciAmJlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUodmFsaWRhdG9yKGFjY291bnRfbmFtZSwgcmVjb3ZlcktleSwgdGhpcykpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNvdmVyS2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGEgYWNjb3VudCdzIGFjdGlvbiBjb3VudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYWNjb3VudF9uYW1lIC0gc3RyaW5nIG5hbWUgb3IgaWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldEFjdGlvbkNvdW50KGFjY291bnRfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEFjdGlvbk1heFNlcShhY2NvdW50X25hbWUpICsgMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSBhY2NvdW50J3MgbWF4IHNlcVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYWNjb3VudF9uYW1lIC0gc3RyaW5nIG5hbWUgb3IgaWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59IC0gcmV0dXJuIC0xIGlmIHRoZXJlIGlzIG5vIGFjdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRBY3Rpb25NYXhTZXEoYWNjb3VudF9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcmVjZW50QWN0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0UmVjZW50QWN0aW9ucyhhY2NvdW50X25hbWUpO1xuICAgICAgICBpZiAoIXJlY2VudEFjdGlvbnMgfHwgIXJlY2VudEFjdGlvbnMuYWN0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBnZXRBY3Rpb25Db3VudCBmYWlsZWQ6IGNhbm5vdCBmaW5kIHJlY2VudCBhY3Rpb25zIG9mICR7YWNjb3VudF9uYW1lfSlgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3RzID0gcmVjZW50QWN0aW9ucy5hY3Rpb25zO1xuICAgICAgICByZXR1cm4gYWN0cy5sZW5ndGggPT09IDAgPyAtMSA6IGFjdHNbYWN0cy5sZW5ndGggLSAxXS5hY2NvdW50X2FjdGlvbl9zZXE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHJlY2VudCBhY3Rpb25zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRSZWNlbnRBY3Rpb25zKGFjY291bnRfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWN0aW9ucyh7YWNjb3VudF9uYW1lfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFjdGlvbnMgb2YgYW4gYWNjb3VudFxuICAgICAqIEBkZXNjIHRvIGF2b2lkIHNlYXJjaGluZyBpbiBodWdlIGFtb3VudCBhY3Rpb25zLCB0aGUgYXBwbGljYXRpb24gbGF5ZXIgc2hvdWxkIGNoZWNrIHRoZSBnZXRBY3Rpb25Db3VudCBiZWZvcmUgY2FsbGluZyB0aGkgbWV0aG9kXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBhY2NvdW50X25hbWUgLSBzdHJpbmcgbmFtZSBvciBpZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFBvcyAtIHN0YXJ0IGZyb20gMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSB3aGVuIG9mZnNldCBpcyAwLCBvbmUgb2JqZWN0IHJldHVybmVkLCBvZmZzZXQgPT0oc2hvdWxkIGJlKSBjb3VudCAtIDFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmV0Y2hUaW1lb3V0IC0gZmV0Y2ggdGltZSBvdXQgKG1zKVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fSAtIFtzdGFydFBvcywgLi4uLCBzdGFydFBvcyArIG9mZnNldF1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QWN0aW9ucyhhY2NvdW50X25hbWU6IHN0cmluZywgc3RhcnRQb3MgPSAwLCBvZmZzZXQgPSAwLCBmZXRjaFRpbWVvdXQ6IG51bWJlciA9IERFRkFVTFRfRkVUQ0hfVElNRU9VVCkge1xuICAgICAgICBsZXQgcG9zID0gc3RhcnRQb3M7XG4gICAgICAgIGNvbnN0IGVuZFBvcyA9IHN0YXJ0UG9zICsgb2Zmc2V0O1xuICAgICAgICBjb25zdCBhY3Rpb25zID0gW107XG4gICAgICAgIGxvZy52ZXJib3NlKCdnZXRBY3Rpb25zIHN0YXJ0Jywgc3RhcnRQb3MsIGVuZFBvcywgJ2N1cnJlbnQ6JywgYWN0aW9ucy5sZW5ndGgpO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgbGV0IHJldDogYW55O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCB0aW1lb3V0UHJvbWlzZShcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hUaW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lb3MuZ2V0QWN0aW9ucyh7YWNjb3VudF9uYW1lLCBwb3MsIG9mZnNldDogZW5kUG9zIC0gcG9zfSksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm5pbmcoZXgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyZXQgfHwgIXJldC5hY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBnZXRBY3Rpb25zIGZhaWxlZDogY2Fubm90IGZpbmQgYWN0aW9ucyBvZiAke2FjY291bnRfbmFtZX0gKHBvczoke3Bvc30sIG9mZnNldDoke29mZnNldH0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhY3RzID0gcmV0LmFjdGlvbnM7XG5cbiAgICAgICAgICAgIGxvZy52ZXJib3NlKCdnZXRBY3Rpb25zIGZpbmQnLCBhY3RzW2FjdHMubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgICAgICBjb25zdCBtYXhBY3Rpb25JbmQgPSBhY3RzLmxlbmd0aCA9PT0gMCA/IHBvcyAtIDEgOiBhY3RzW2FjdHMubGVuZ3RoIC0gMV0uYWNjb3VudF9hY3Rpb25fc2VxO1xuICAgICAgICAgICAgaWYgKG1heEFjdGlvbkluZCA8IHBvcykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goLi4uYWN0cyk7XG4gICAgICAgICAgICBpZiAobWF4QWN0aW9uSW5kID49IGVuZFBvcykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb3MgPSBtYXhBY3Rpb25JbmQgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgYWN0aW9ucyBpbiBidWxrXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBjYlJlY2VpdmUgLSB1c2luZyB0aGlzIGNhbGxiYWNrIHRvIHJlY2VpdmUgbGlzdCBvZiBhY3Rpb25zXG4gICAgICogQHBhcmFtIHN0YXJ0UG9zXG4gICAgICogQHBhcmFtIGNvdW50XG4gICAgICogQHBhcmFtIGNvbmN1cnJlbnRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRBbGxBY3Rpb25zQmF0Y2goYWNjb3VudF9uYW1lOiBzdHJpbmcsIGNiUmVjZWl2ZTogKGFjdHM6IGFueVtdKSA9PiBhbnksIHN0YXJ0UG9zOiBudW1iZXIgPSAwLCBjb3VudDogbnVtYmVyID0gMTAwLCBjb25jdXJyZW50OiBudW1iZXIgPSAxMCkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBjb3VudCAtIDE7XG4gICAgICAgIGNvbnN0IHJlcSA9IGFzeW5jIChwb3M6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsb2cudmVyYm9zZShgc2VhcmNoIFN0YXJ0IDogYXQ6JHtEYXRlLm5vdygpfSBwb3M6JHtwb3N9IG9mZnNldDoke29mZnNldH1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QWN0aW9ucyhhY2NvdW50X25hbWUsIHBvcywgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoJ2Vycm9yIDogJywgZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBjb25zdCByZXQ6IGFueVtdID0gW107XG4gICAgICAgIGxldCByYW5nZXM6IG51bWJlcltdID0gW107XG4gICAgICAgIGxvZy5pbmZvKGA9PT0+IHN0YXJ0IHNlYXJjaCBhY3Rpb25zIG9mICR7YWNjb3VudF9uYW1lfSBmcm9tICR7c3RhcnRQb3N9LCBjb25jdXJyZW50IDogJHtjb25jdXJyZW50fSwgY291bnQgOiAke2NvdW50fSwgb25jZSA6ICR7Y29uY3VycmVudCAqIGNvdW50fWApO1xuICAgICAgICBjb25zdCB0U3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgOyBpKyspIHtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHN0YXJ0UG9zICsgaSAqIGNvdW50KTtcbiAgICAgICAgICAgIGlmIChpICUgY29uY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRSb3VuZCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgbG9nLnZlcmJvc2UoYD09PT4gZGVhbCBiYXRjaCAke2l9IDogJHtyYW5nZXN9IGF0ICR7dFN0YXJ0fWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHM6IGFueVtdW10gPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzLm1hcChyZXEpLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRzLmZpbmQoYWN0cyA9PiBhY3RzLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2cudmVyYm9zZShgPT09PiBkZWFsIGJhdGNoICR7aX0gZG9uZSAoJHtEYXRlLm5vdygpIC0gdFJvdW5kfSlgKTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLmZvckVhY2goKGFjdHM6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNiUmVjZWl2ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYlJlY2VpdmUoYWN0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0LnB1c2goLi4uYWN0cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbG9nLnZlcmJvc2UoYD09PT4gc2VuZCBiYXRjaCAke2l9IGRvbmUgKCR7RGF0ZS5ub3coKSAtIHRSb3VuZH0pYCk7XG4gICAgICAgICAgICAgICAgcmFuZ2VzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmluZm8oYGdldEFsbEFjdGlvbnMgOiBhbGwgc2NhbmVkICgke0RhdGUubm93KCkgLSB0U3RhcnR9KWApO1xuICAgICAgICAvLyByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lIC0gdXNlcidzIGFjY291bnQgbmFtZVxuICAgICAqIEBwYXJhbSBjb2RlIC0gQWNjb3VudCBvZiB0aGUgY3VycmVuY3kgY29udHJhY3QuIFRoZSBkZWZhdWx0IGNvZGUgaXMgXCJlb3Npby50b2tlblwiLCB3aGljaCBpcyB0aGUgY3VycmVuY3kgY29kZSBvZiBlb3NcbiAgICAgKiBAcGFyYW0gc3ltYm9sTmFtZSAtIHRoZSB0b2tlbidzIHN5bWJvbCBuYW1lXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmd8dW5kZWZpbmVkPn0gYXNzZXQgZm9ybWF0ICcxLjAwMDAgRU9TJ1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRCYWxhbmNlKGFjY291bnRfbmFtZTogc3RyaW5nLCBjb2RlOiBzdHJpbmcgPSAnZW9zaW8udG9rZW4nLCBzeW1ib2xOYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5nZXRCYWxhbmNlcyhhY2NvdW50X25hbWUsIGNvZGUpO1xuICAgICAgICBpZiAoIXN5bWJvbE5hbWUpIHtcbiAgICAgICAgICAgIGxvZy53YXJuaW5nKCdTeW1ib2wgb2YgdGhlIHRva2VuIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQsIHRoZSBmaXJzdCBpdGVtIHdpbGwgcmV0dXJuLiBhbGw6JywgYmFsYW5jZXMpO1xuICAgICAgICAgICAgcmV0dXJuIGJhbGFuY2VzWzBdIHx8IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYmFsYW5jZXMuZmluZCgodjogc3RyaW5nKSA9PiB2LmVuZHNXaXRoKHN5bWJvbE5hbWUpKSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGJhbGFuY2Ugb2Ygc3BlY2lmaWMgYWNjb3VudFxuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSB1c2VyJ3MgYWNjb3VudCBuYW1lXG4gICAgICogQHBhcmFtIGNvZGUgLSBBY2NvdW50IG9mIHRoZSBjdXJyZW5jeSBjb250cmFjdC4gVGhlIGRlZmF1bHQgY29kZSBpcyBcImVvc2lvLnRva2VuXCIsIHdoaWNoIGlzIHRoZSBjdXJyZW5jeSBjb2RlIG9mIGVvc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fSAtIGxpc3Qgb2YgYXNzZXQsIGFzc2V0IGZvcm1hdCBpcyBsaWtlICcxLjAwMDAgRU9TJ1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRCYWxhbmNlcyhhY2NvdW50X25hbWU6IHN0cmluZywgY29kZTogc3RyaW5nID0gJ2Vvc2lvLnRva2VuJykge1xuICAgICAgICByZXR1cm4gKChhd2FpdCB0aGlzLl9lb3MuZ2V0Q3VycmVuY3lCYWxhbmNlKGNvZGUsIGFjY291bnRfbmFtZSkpIHx8IFtdKS5tYXAoKHY6IHN0cmluZykgPT4gdi50cmltKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyYW5zZmVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY291bnQgLSB7bmFtZSwgYXV0aG9yaXR5fVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdHkgLSBlb3MgYXNzZXQgZm9ybWF0LCBlLnAuIFwiMS4wMDAwIEVPU1wiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lbW8gLSBtZW1vXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JFcnJvciAtIG1lbW9cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59IHRyYW5zYWN0aW9uRGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyB0cmFuc2ZlcihhY2NvdW50OiBJSWRlbnRpdHksIHRhcmdldDogc3RyaW5nLCBxdWFudGl0eTogc3RyaW5nLCBtZW1vOiBzdHJpbmcgPSAnJywgY2JFcnJvcjogKGVycjogYW55KSA9PiBhbnkpIHtcbiAgICAgICAgY29uc3QgdHJhbnNPcHRpb25zID0ge2F1dGhvcml6YXRpb246IFtgJHthY2NvdW50Lm5hbWV9QCR7YWNjb3VudC5hdXRob3JpdHl9YF19O1xuICAgICAgICBjb25zdCB0cnggPSBhd2FpdCB0aGlzLl9lb3MudHJhbnNmZXIoYWNjb3VudC5uYW1lLCB0YXJnZXQsIHF1YW50aXR5LCBtZW1vLCB0cmFuc09wdGlvbnMpLmNhdGNoKFxuICAgICAgICAgICAgKGNiRXJyb3IpIHx8IGxvZy5lcnJvcixcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRyeCkge1xuICAgICAgICAgICAgbG9nLmluZm8oYFRyYW5zZmVyIGRlYWxlZCwgdHhJRDogJHt0cngudHJhbnNhY3Rpb25faWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBhIHRyYW5zYWN0aW9uIGluZm8sIHJldHJ5IG9uY2UgcGVyIHNlYyB1bnRpbCBzdWNjZXNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR4SURcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4Um91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNwYW5NU1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgd2FpdFR4KHR4SUQ6IHN0cmluZywgbWF4Um91bmQ6IG51bWJlciA9IDEyLCB0aW1lU3Bhbk1TOiBudW1iZXIgPSAxMDA5KSB7IC8vIFVubWFuYWdlZCBwb2xsaW5nIHVzZXMgcHJpbWUgYXMgdGhlIGRlZmF1bHQgaW50ZXJ2YWxcbiAgICAgICAgY29uc3QgY2hlY2tUeDogYW55ID0gYXN5bmMgKF90eElEOiBzdHJpbmcsIHJvdW5kOiBudW1iZXIgPSAwKSA9PiB7IC8vIGNhbiBvbmx5IHVzZSBsYW1iZGEsIGN1eiB0aGlzIGlzIHVzZWRcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLl9lb3MuZ2V0VHJhbnNhY3Rpb24oX3R4SUQpO1xuICAgICAgICAgICAgICAgIGlmICh0eCkgcmV0dXJuIHR4O1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nLnZlcmJvc2UoYHdhaXQgdHggJHtfdHhJRH0sIHJldHJ5IHJvdW5kOiAke3JvdW5kfS4gJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb3VuZCA+PSBtYXhSb3VuZCkge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgd2FpdCB0eCBmYWlsZWQsIHJvdW5kIG91dC5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGZvck1zKHRpbWVTcGFuTVMpO1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrVHgoX3R4SUQsIHJvdW5kICsgMSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGNoZWNrVHgodHhJRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VuZCBhY3Rpb24gdG8gYSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gYWNjb3VudCBvZiBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gZnVuY3Rpb24gbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0ganNvbkRhdGEgLSBkYXRhXG4gICAgICogQHBhcmFtIHtBcnJheTxJQXV0aG9yaXphdGlvbj59IGF1dGhvcml6YXRpb24gLSBzaG91bGQgYmUgYW4gb2JqZWN0IHdobyBoYXMga2V5cyB7YWN0b3IsIHBlcm1pc3Npb259XG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gLSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjYWxsKGNvZGU6IHN0cmluZywgZnVuYzogc3RyaW5nLCBqc29uRGF0YTogYW55LCAuLi5hdXRob3JpemF0aW9uOiBJQXV0aG9yaXphdGlvbltdKSB7XG4gICAgICAgIGNvbnN0IGRhdGE6IElFb3NUcmFuc2FjdGlvbkRhdGEgPSB7XG4gICAgICAgICAgICBhY3Rpb25zOiBbe1xuICAgICAgICAgICAgICAgIGFjY291bnQ6IGNvZGUsXG4gICAgICAgICAgICAgICAgbmFtZTogZnVuYyxcbiAgICAgICAgICAgICAgICBkYXRhOiBqc29uRGF0YSxcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uLFxuICAgICAgICAgICAgfV0sXG4gICAgICAgIH07XG4gICAgICAgIGxvZy5pbmZvKCdDQUxMJywgJ2NvZGUnLCBjb2RlLCAnZnVuYycsIGZ1bmMsICdqc29uRGF0YScsIGpzb25EYXRhLCAnYXV0aG9yaXphdGlvbicsIGpzb25EYXRhKTtcbiAgICAgICAgLy8gbG9nLmluZm8oSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMikpXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MudHJhbnNhY3Rpb24oZGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFsbCBpdGVtcyBpbiBhIHRhYmxlXG4gICAgICogQGRlc2MgdGhpcyBtZXRob2QgY2FuIGJlIHZlcnkgZmFzdCAoaW5maW5pdGVseSBjbG9zZSB0byBvbmNlIHJwYyB0aW1lKSB3aGVuIHByb3ZpZGUgaGludCB0YWJsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gdGhlIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlTmFtZSAtIG5hbWUgb2YgdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyTnVtIC0gbG93ZXIgcG9zaXRpb24sIGNhbiBiZSBudW1iZXIgb3Igc3RyaW5nTnVtYmVyLCBjYW5ub3QgYmUgYWNjb3VudF9uYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyTnVtIC0gbG93ZXIgcG9zaXRpb24sIGNhbiBiZSBudW1iZXIgb3Igc3RyaW5nTnVtYmVyLCBjYW5ub3QgYmUgYWNjb3VudF9uYW1lXG4gICAgICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBoaW50IC0gaGludCB0YWJsZSB0byBzcGVlZCB1cCBzZWFyY2hcbiAgICAgKiBAZXhhbXBsZSBnZXRUYWJsZShcImNvbnRyYWN0XCIsIFwidGFibGVcIiwgXCJzY29wZVwiLCAwLCAtMSwgXCI0NjExNjg2MDE4NDI3Mzg3OTAzXCIsIFwiNjkxNzUyOTAyNzY0MTA4MTg1NlwiLCBcIjkyMjMzNzIwMzY4NTQ3NzU4MDhcIiwgXCIxMzgzNTA1ODA1NTI4MjE2MzcxMlwiKVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRUYWJsZUFsbChjb2RlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dlck51bTogc3RyaW5nIHwgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cHBlck51bTogc3RyaW5nIHwgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5oaW50OiBBcnJheTxzdHJpbmcgfCBudW1iZXI+KSB7XG4gICAgICAgIGNvbnN0IGxvd2VyOiBCaWdOdW1iZXIgPSBsb3dlck51bSA/IG5ldyBCaWdOdW1iZXIobG93ZXJOdW0pIDogbmV3IEJpZ051bWJlcigwKTtcbiAgICAgICAgY29uc3QgdXBwZXI6IEJpZ051bWJlciA9IHVwcGVyTnVtICYmIHVwcGVyTnVtICE9PSAtMSA/IG5ldyBCaWdOdW1iZXIodXBwZXJOdW0pIDogbmV3IEJpZ051bWJlcignMTg0NDY3NDQwNzM3MDk1NTE2MTUnKTtcblxuICAgICAgICBjb25zdCByZXQ6IGFueVtdID0gW107XG4gICAgICAgIGNvbnN0IHBvb2w6IGFueVtdID0gW107XG4gICAgICAgIGNvbnN0IFJlcXVpcmUgPSAoX2w6IEJpZ051bWJlciwgX3U6IEJpZ051bWJlcikgPT4ge1xuICAgICAgICAgICAgbG9nLnZlcmJvc2UoJ3NlYXJjaCAnLCBEYXRlLm5vdygpLCBfbC50b0ZpeGVkKDApLCBfdS50b0ZpeGVkKDApKTtcbiAgICAgICAgICAgIGlmIChfbC5ndGUoX3UpKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBfcHJvbWlzZSA9IHRoaXMuX2Vvcy5nZXRUYWJsZVJvd3Moe1xuICAgICAgICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICB0YWJsZTogdGFibGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbWl0OiAtMSxcbiAgICAgICAgICAgICAgICBsb3dlcl9ib3VuZDogX2wudG9GaXhlZCgwKSxcbiAgICAgICAgICAgICAgICB1cHBlcl9ib3VuZDogX3UudG9GaXhlZCgwKSxcbiAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgX215SW5kID0gcG9vbC5maW5kSW5kZXgodiA9PiB2ID09PSBfcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgcG9vbC5zcGxpY2UoX215SW5kLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQubW9yZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKC4uLnJlc3VsdC5yb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9taWQgPSBfdS5taW51cyhfbCkuZGl2aWRlZEJ5KDIpLmRlY2ltYWxQbGFjZXMoMCkucGx1cyhfbCk7XG4gICAgICAgICAgICAgICAgICAgIFJlcXVpcmUoX2wsIF9taWQubWludXMoMSkpO1xuICAgICAgICAgICAgICAgICAgICBSZXF1aXJlKF9taWQsIF91KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9teUluZCA9IHBvb2wuZmluZCh2ID0+IHYgPT09IF9wcm9taXNlKTtcbiAgICAgICAgICAgICAgICBwb29sLnNwbGljZShfbXlJbmQsIDEpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9vbC5wdXNoKF9wcm9taXNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFoaW50IHx8IGhpbnQubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIFJlcXVpcmUobG93ZXIsIHVwcGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFsuLi5oaW50Lm1hcChpID0+IG5ldyBCaWdOdW1iZXIoaSkpLCB1cHBlcl0ucmVkdWNlKChfbCwgX20pID0+IHtcbiAgICAgICAgICAgICAgICBSZXF1aXJlKF9sLCBfbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9tO1xuICAgICAgICAgICAgfSwgbG93ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHBvb2wubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYXdhaXQgZm9yTXMoNTApO1xuICAgICAgICB9XG4gICAgICAgIGxvZy52ZXJib3NlKCdkb25lIHNlYXJjaCAnLCBEYXRlLm5vdygpLCBsb3dlci50b0ZpeGVkKDApLCB1cHBlci50b0ZpeGVkKDApKTtcblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgdGFibGVcbiAgICAgKiBAZGVzYyB0aGUgdGFnICdtb3JlJyBhcmUgbm90IGhhbmRsZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lIC0gbmFtZSBvZiB0aGUgdGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXRcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gbG93ZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gdXBwZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhfcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgY2hlY2tUYWJsZShcbiAgICAgICAgY29kZTogc3RyaW5nLFxuICAgICAgICB0YWJsZU5hbWU6IHN0cmluZyxcbiAgICAgICAgc2NvcGU6IHN0cmluZyxcbiAgICAgICAgbGltaXQ6IG51bWJlciA9IDEwLFxuICAgICAgICBsb3dlcl9ib3VuZDogbnVtYmVyIHwgc3RyaW5nID0gMCxcbiAgICAgICAgdXBwZXJfYm91bmQ6IG51bWJlciB8IHN0cmluZyA9IC0xLFxuICAgICAgICBpbmRleF9wb3NpdGlvbjogbnVtYmVyID0gMSk6IFByb21pc2U8YW55W10+IHtcbiAgICAgICAgbG9nLnZlcmJvc2UoJ3NlYXJjaCAnLCBEYXRlLm5vdygpLCBsb3dlcl9ib3VuZCwgdXBwZXJfYm91bmQsIGxpbWl0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fZW9zLmdldFRhYmxlUm93cyh7XG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgdGFibGU6IHRhYmxlTmFtZSxcbiAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgbG93ZXJfYm91bmQsXG4gICAgICAgICAgICB1cHBlcl9ib3VuZCxcbiAgICAgICAgICAgIGluZGV4X3Bvc2l0aW9uLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmV0ID0gcmVzdWx0ICYmIHJlc3VsdC5yb3dzID8gcmVzdWx0LnJvd3MgOiBbXTtcbiAgICAgICAgaWYgKHJlc3VsdC5tb3JlICYmIChsaW1pdCA8PSAwIHx8IChyZXN1bHQucm93cyAmJiByZXN1bHQucm93cy5sZW5ndGggPCBsaW1pdCkpKSB7IC8vIGRlYWwgd2l0aCAnbW9yZSdcbiAgICAgICAgICAgIGxvZy53YXJuaW5nKGAnbW9yZScgZGV0ZWN0ZWQsIGFuZCB0aGlzIG1ldGhvZCBkaWRuJ3QgZGVhbCB3aXRoIHRoZSB0YWcgJ21vcmUnLiBpZiB5b3Ugd2FudCB0byBnZXQgYWxsIHJlc3VsdHMsIHVzaW5nIGNoZWNrVGFibGVNb3JlIGFuZCBwcm92aWRlIHRoZSBwcmltYXJ5IGtleS4gYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBhIHRhYmxlXG4gICAgICogQGRlc2MgdGhlIHRhZyAnbW9yZScgYXJlIGhhbmRsZWQuIGl0IG1lYW5zIHRoYXQgdGhlIHJlc3VsdCB3b3VsZCBub3QgYmUgdHJ1bmNhdGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gdGhlIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhYmxlTmFtZSAtIG5hbWUgb2YgdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByaW1hcnlLZXkgLSB0aGUga2V5IGZvciBpbmRleGluZ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSBsb3dlcl9ib3VuZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSB1cHBlcl9ib3VuZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleF9wb3NpdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjaGVja1RhYmxlTW9yZShcbiAgICAgICAgY29kZTogc3RyaW5nLFxuICAgICAgICB0YWJsZU5hbWU6IHN0cmluZyxcbiAgICAgICAgc2NvcGU6IHN0cmluZyxcbiAgICAgICAgcHJpbWFyeUtleTogc3RyaW5nLFxuICAgICAgICBsaW1pdDogbnVtYmVyID0gOTk5OTk5OSxcbiAgICAgICAgbG93ZXJfYm91bmQ6IG51bWJlciB8IHN0cmluZyA9IDAsXG4gICAgICAgIHVwcGVyX2JvdW5kOiBudW1iZXIgfCBzdHJpbmcgPSAtMSxcbiAgICAgICAgaW5kZXhfcG9zaXRpb246IG51bWJlciA9IDEpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgICAgIGxvZy52ZXJib3NlKCdzZWFyY2ggJywgY29kZSwgdGFibGVOYW1lLCBEYXRlLm5vdygpKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fZW9zLmdldFRhYmxlUm93cyh7XG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgdGFibGU6IHRhYmxlTmFtZSxcbiAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgbG93ZXJfYm91bmQsXG4gICAgICAgICAgICB1cHBlcl9ib3VuZCxcbiAgICAgICAgICAgIGluZGV4X3Bvc2l0aW9uLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmV0ID0gcmVzdWx0ICYmIHJlc3VsdC5yb3dzID8gcmVzdWx0LnJvd3MgOiBbXTtcbiAgICAgICAgbG9nLnZlcmJvc2UoYHBhcnQgc2l6ZSAke3JldC5sZW5ndGh9LmApO1xuICAgICAgICBpZiAocmVzdWx0Lm1vcmUgJiYgKGxpbWl0IDw9IDAgfHwgKHJlc3VsdC5yb3dzICYmIHJlc3VsdC5yb3dzLmxlbmd0aCA8IGxpbWl0KSkpIHsgLy8gZGVhbCB3aXRoICdtb3JlJ1xuICAgICAgICAgICAgY29uc3QgZnJvbSA9IHJldFswXVtwcmltYXJ5S2V5XTtcbiAgICAgICAgICAgIGNvbnN0IHRvID0gcmV0W3JldC5sZW5ndGggLSAxXVtwcmltYXJ5S2V5XTtcbiAgICAgICAgICAgIGlmICghZnJvbSB8fCAhdG8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhYmkgPSBhd2FpdCB0aGlzLmdldEFiaShjb2RlKTtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYHNlYXJjaGluZyBtb3JlIGVycm9yIHdpdGggcHJpbWFyeSBrZXkgOiAke3ByaW1hcnlLZXl9LiBwbGVhc2UgY2hlY2tcXG5sYXN0IGRhdGE6ICR7cmV0W3JldC5sZW5ndGggLSAxXX0gXFxuYWJpICR7SlNPTi5zdHJpbmdpZnkoYWJpKX1gKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNoZWNrIG1vcmUgZXJyb3Igd2l0aCBwcmltYXJ5IGtleSA6ICR7cHJpbWFyeUtleX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZy5pbmZvKGAnbW9yZScgZGV0ZWN0ZWQ6IHN0YXJ0IHNlYXJjaGluZyByZXN1bHRzIGZyb20gJHt0b30uYCk7XG4gICAgICAgICAgICBjb25zdCBwYXJ0UmVzdWx0ID0gYXdhaXQgdGhpcy5jaGVja1RhYmxlTW9yZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBwcmltYXJ5S2V5LCBsaW1pdCAtIHJldC5sZW5ndGggKyAxLCB0bywgdXBwZXJfYm91bmQsIGluZGV4X3Bvc2l0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiByZXQuY29uY2F0KHBhcnRSZXN1bHQuc3BsaWNlKDEpKTtcbiAgICAgICAgICAgIC8vIHRvZG86IHRoZSBtZWFuaW5nIG9mICdsaW1pdCcsIHNob3VsZCBiZSBjb25zaWRlcmVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayByYW5nZSBpbiB0YWJsZVxuICAgICAqIEBkZXNjIHRoZSB0YWcgJ21vcmUnIGFyZSBoYW5kbGVkLiBpdCBtZWFucyB0aGF0IHRoZSByZXN1bHQgd291bGQgbm90IGJlIHRydW5jYXRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIHRoZSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWUgLSBuYW1lIG9mIHRoZSB0YWJsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSBmcm9tIC0gc3RhcnQgcG9zaXRpb24gb3IgdXNlcm5hbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4X3Bvc2l0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheT59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNoZWNrVGFibGVSYW5nZShcbiAgICAgICAgY29kZTogc3RyaW5nLFxuICAgICAgICB0YWJsZU5hbWU6IHN0cmluZyxcbiAgICAgICAgc2NvcGU6IHN0cmluZyxcbiAgICAgICAgZnJvbTogbnVtYmVyIHwgc3RyaW5nLFxuICAgICAgICBsZW5ndGg6IG51bWJlciA9IDEsXG4gICAgICAgIGluZGV4X3Bvc2l0aW9uOiBudW1iZXIgPSAxKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByYW5nZSBlcnJvcjogbGVuZ3RoKCR7bGVuZ3RofSkgbXVzdCBsYXJnZXIgdGhhbiAwIGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvd3M6IGFueVtdID0gYXdhaXQgdGhpcy5jaGVja1RhYmxlKFxuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgICAgZnJvbSxcbiAgICAgICAgICAgICh0eXBlb2YgZnJvbSA9PT0gJ251bWJlcicpID9cbiAgICAgICAgICAgICAgICBmcm9tICsgbGVuZ3RoIDpcbiAgICAgICAgICAgICAgICBuZXcgQmlnTnVtYmVyKEVvcy5tb2R1bGVzLmZvcm1hdC5lbmNvZGVOYW1lKGZyb20sIGZhbHNlKSkucGx1cyhsZW5ndGgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpbmRleF9wb3NpdGlvbik7XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgaXRlbSBpbiBhIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNoZWNrVGFibGVJdGVtKFxuICAgICAgICBjb2RlOiBzdHJpbmcsXG4gICAgICAgIHRhYmxlTmFtZTogc3RyaW5nLFxuICAgICAgICBzY29wZTogc3RyaW5nLFxuICAgICAgICBrZXk6IHN0cmluZyB8IG51bWJlcikge1xuICAgICAgICBjb25zdCByb3dzID0gYXdhaXQgdGhpcy5jaGVja1RhYmxlUmFuZ2UoY29kZSwgdGFibGVOYW1lLCBzY29wZSwga2V5LCAxKTtcbiAgICAgICAgcmV0dXJuIHJvd3NbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdXBkYXRlIGF1dGhcbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lXG4gICAgICogQHBhcmFtIHBlcm1pc3Npb25cbiAgICAgKiBAcGFyYW0gcGFyZW50XG4gICAgICogQHBhcmFtIHRocmVzaG9sZFxuICAgICAqIEBwYXJhbSBrZXlzXG4gICAgICogQHBhcmFtIGFjY291bnRzXG4gICAgICogQHBhcmFtIHdhaXRzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZUF1dGgoXG4gICAgICAgIGFjY291bnRfbmFtZTogc3RyaW5nLFxuICAgICAgICBwZXJtaXNzaW9uOiBzdHJpbmcsXG4gICAgICAgIHBhcmVudDogc3RyaW5nLFxuICAgICAgICB0aHJlc2hvbGQ6IG51bWJlcixcbiAgICAgICAga2V5czogYW55LFxuICAgICAgICBhY2NvdW50czogYW55LFxuICAgICAgICB3YWl0czogbnVtYmVyID0gMSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZW9zLnVwZGF0ZWF1dGgoe1xuICAgICAgICAgICAgYWNjb3VudF9uYW1lLFxuICAgICAgICAgICAgcGVybWlzc2lvbixcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQsXG4gICAgICAgICAgICAgICAga2V5cyxcbiAgICAgICAgICAgICAgICBhY2NvdW50cyxcbiAgICAgICAgICAgICAgICB3YWl0cyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0VGFibGVCeVNjb3BlKFxuICAgICAgICBob3N0OiBzdHJpbmcsXG4gICAgICAgIGNvZGU6IHN0cmluZyxcbiAgICAgICAgdGFibGU6IHN0cmluZyxcbiAgICAgICAgbG93ZXJfYm91bmQ6IHN0cmluZyB8IG51bWJlcixcbiAgICAgICAgdXBwZXJfYm91bmQ6IHN0cmluZyB8IG51bWJlcixcbiAgICAgICAgbGltaXQ6IG51bWJlciA9IDEwMDApIHtcbiAgICAgICAgY29uc3QgYXBpID0gJy92MS9jaGFpbi9nZXRfdGFibGVfYnlfc2NvcGUnO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgdGFibGUsXG4gICAgICAgICAgICBsb3dlcl9ib3VuZCxcbiAgICAgICAgICAgIHVwcGVyX2JvdW5kLFxuICAgICAgICAgICAgbGltaXQsIC8vIOihqOekuuavj+asoeiOt+WPljbmnaHorrDlvZVcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXEgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTDogaG9zdCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBwb3N0OiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXQ6IGFueVtdID0gW107XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCByc3AgPSBhd2FpdCByZXEucG9zdChhcGksIHBhcmFtcyk7XG4gICAgICAgICAgICByZXQucHVzaChyc3AuZGF0YSk7XG4gICAgICAgICAgICBpZiAocnNwLmRhdGEubW9yZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaGVscCgpIHtcbiAgICAgICAgcmV0dXJuIGBcbiMjIyBDaGFpbiBBUElcblxuXFxgXFxgXFxganNcbntPYmplY3R9IGFzeW5jIGdldEluZm8oKSAvLyBnZXQgaW5mbyBvZiB0aGUgY2hhaW4gY29ubmVjdGVkXG57T2JqZWN0fSBhc3luYyBnZXRCbG9jayhibG9ja051bU9ySWQpIC8vIGdldCBzcGVjaWZpYyBibG9jayBvZiB0aGUgY2hhaW5cblxuXG57Q29udHJhY3R9IGFzeW5jIGdldENvbnRyYWN0KGNvZGUpIC8vIGdldCBjb250cmFjdFxue09iamVjdH0gYXN5bmMgZ2V0QWJpKGNvZGUpIC8vIGdldCBhYmkgb2YgY29udHJhY3RcbntPYmplY3R9IGFzeW5jIGdldFRhYmxlQWJpKGNvZGUsIHRhYmxlTmFtZSkgLy8gZ2V0IHRhYmxlIGFiaSBvZiBjb250cmFjdFxue09iamVjdH0gYXN5bmMgYWJpSnNvblRvQmluKGNvZGUsIGFjdGlvbiwgYXJncylcblxue09iamVjdH0gYXN5bmMgZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKSAvLyBnZXQgYWNjb3VudCBpbmZvIG9mIGFueSB1c2VyXG57c3RyaW5nfSBhc3luYyBnZXRQdWJLZXkoYWNjb3VudF9uYW1lLCBhdXRob3JpdHkgPSBcImFjdGl2ZVwiKSAvLyBnZXQgdGhlIGZpcnN0IHB1YmxpYyBrZXkgb2YgYW4gYWNjb3VudFxue0FycmF5fSBhc3luYyBnZXRQdWJLZXlzKGFjY291bnRfbmFtZSwgYXV0aG9yaXR5ID0gXCJhY3RpdmVcIikgLy8gZ2V0IHB1YmxpYyBrZXlzIG9mIGFuIGFjY291bnRcbntzdHJpbmd9IGFzeW5jIHJlY292ZXJTaWduKHNpZ25hdHVyZSwgbWVzc2FnZSkgLy8gcmVjb3ZlciBzaWduIGFuZCB0byB0aGUgcHVibGljIGtleVxue3N0cmluZ30gYXN5bmMgdmFsaWRhdGVTaWduIChzaWduYXR1cmUsIG1lc3NhZ2UsIGFjY291bnQsIGF1dGhvcml0eSA9ICdhY3RpdmUnLCBhY2NvdW50c1Blcm1pc2lvblBsdWdpbnMpXG4vLyB2YWxpZGF0ZSBpZiBzaWduZWQgZGF0YSBpcyBzaWduZWQgYnkgYSBhY2NvdW50LiBpdCByZXR1cm5zIHRoZSBtYXRjaGVkIHB1YmxpYyBrZXlcblxue051bWJlcn0gYXN5bmMgZ2V0QWN0aW9uQ291bnQoYWNjb3VudF9uYW1lKSAvLyBnZXQgYSBhY2NvdW50J3MgYWN0aW9uIGNvdW50XG57TnVtYmVyfSBhc3luYyBnZXRBY3Rpb25NYXhTZXEoYWNjb3VudF9uYW1lKSAvLyBnZXQgYSBhY2NvdW50J3MgbWF4IGFjdGlvbiBzZXFcbntBcnJheX0gYXN5bmMgZ2V0UmVjZW50QWN0aW9ucyhhY2NvdW50X25hbWUpIC8vIGdldCByZWNlbnQgYWN0aW9uc1xue0FycmF5fSBhc3luYyBnZXRBY3Rpb25zKGFjY291bnRfbmFtZSwgc3RhcnRQb3MgPSAwLCBvZmZzZXQgPSAwKSAvLyBnZXQgYWxsIGFjdGlvbnMgb2YgYW4gYWNjb3VudFxue0FycmF5fSBhc3luYyBnZXRBbGxBY3Rpb25zQmF0Y2ggKGFjY291bnRfbmFtZSwgY2JSZWNlaXZlLCBzdGFydFBvcyA9IDAsIGNvdW50ID0gMTAwLCBjb25jdXJyZW50ID0gMTApIC8vIGdldCBhbGwgYWN0aW9ucyBpbiBidWxrXG5cbntTdHJpbmd9IGFzeW5jIGdldEJhbGFuY2UoYWNjb3VudF9uYW1lLCBjb2RlID0gXCJlb3Npby50b2tlblwiLCBzeW1ib2xOYW1lID0gdW5kZWZpbmVkKSAvLyBnZXQgYmFsYW5jZSBvZiBzcGVjaWZpYyBhY2NvdW50XG57QXJyYXkuPFN0cmluZz59IGFzeW5jIGdldEJhbGFuY2VzKGFjY291bnRfbmFtZSwgY29kZSA9IFwiZW9zaW8udG9rZW5cIikgLy8gZ2V0IGFsbCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbntUeH0gYXN5bmMgdHJhbnNmZXIoYWNjb3VudCwgdGFyZ2V0LCBxdWFudGl0eSwgbWVtbyA9IFwiXCIsIGNiRXJyb3IpIC8vIHRoZSBmb3JtYXQgb2YgYWNjb3VudCBzaG91bGQgYmUge25hbWUsIGF1dGhvcml0eX1cblxue1R4fSBhc3luYyB3YWl0VHgodHhJRCwgbWF4Um91bmQgPSAxMiwgdGltZVNwYW5NUyA9IDEwMDkpIC8vIGNoZWNrIGEgdHJhbnNhY3Rpb24gaW5mbywgcmV0cnkgb25jZSBwZXIgc2VjIHVudGlsIHN1Y2Nlc3Ncblxue1R4fSBhc3luYyBjYWxsKGNvZGUsIGZ1bmMsIGpzb25EYXRhLCAuLi5hdXRob3JpemF0aW9uKSAvLyBzZW5kIGFjdGlvbiB0byBhIGNvbnRyYWN0XG5cbntBcnJheX0gYXN5bmMgZ2V0VGFibGVBbGwoY29kZSwgdGFibGVOYW1lLCBzY29wZSwgbG93ZXJOdW0sIHVwcGVyTnVtLCAuLi5oaW50KSAvLyBnZXQgYWxsIGl0ZW1zIGluIGEgdGFibGVcbntBcnJheX0gYXN5bmMgY2hlY2tUYWJsZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBsaW1pdCA9IDEwLCBsb3dlcl9ib3VuZCA9IDAsIHVwcGVyX2JvdW5kID0gLTEsIGluZGV4X3Bvc2l0aW9uID0gMSkgLy8gY2hlY2sgYSB0YWJsZVxue0FycmF5fSBhc3luYyBjaGVja1RhYmxlTW9yZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBwcmltYXJ5S2V5LCBsaW1pdCA9IDk5OTk5OTksIGxvd2VyX2JvdW5kID0gMCwgdXBwZXJfYm91bmQgPSAtMSwgaW5kZXhfcG9zaXRpb24gPSAxKVxue0FycmF5fSBhc3luYyBjaGVja1RhYmxlUmFuZ2UoY29kZSwgdGFibGVOYW1lLCBzY29wZSwgZnJvbSwgbGVuZ3RoID0gMSwgaW5kZXhfcG9zaXRpb24gPSAxKSAvLyBjaGVjayByYW5nZSBpbiB0YWJsZVxue09iamVjdH0gYXN5bmMgY2hlY2tUYWJsZUl0ZW0oY29kZSwgdGFibGVOYW1lLCBzY29wZSwga2V5ID0gMCkgLy8gY2hlY2sgYSBpdGVtIGluIGEgdGFibGVcblxue09iamVjdH0gYXN5bmMgdXBkYXRlQXV0aChhY2NvdW50LCBwZXJtaXNzaW9uLCBwYXJlbnQsIHRocmVzaG9sZCwga2V5cywgYWNjb3VudHMsIHdhaXRzKSAvLyB1cGRhdGUgYXV0aFxuXFxgXFxgXFxgXG5gO1xuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBc3NldCBmcm9tICcuLi9tb2RlbC9hc3NldCc7XG5pbXBvcnQgVHJhbnNjYWxQYXlsb2FkIGZyb20gJy4uL21vZGVsL3RyYW5zY2FsUGF5bG9hZCc7XG5pbXBvcnQge0lJZGVudGl0eX0gZnJvbSAnLi4vdHlwZXMvZW9zJztcbmltcG9ydCBDaGFpbkhlbHBlciBmcm9tICcuL2NoYWluJztcbmltcG9ydCBSZXNIZWxwZXIgZnJvbSAnLi9raFJlcyc7XG5cbi8qKlxuICoga2ggaGVscGVyLCBzdXBwb3J0ZWQga2ggY29udHJhY3Qgb3BlcmF0aW9uc1xuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLaEhlbHBlciB7XG4gICAgLyoqXG4gICAgICogaW5pdGlhdGUgd2l0aCB0aGUgY2hhaW4gaGVscGVyXG4gICAgICogQHBhcmFtIHtDaGFpbkhlbHBlcn0gX2NoYWluXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IF9jaGFpbjogQ2hhaW5IZWxwZXIpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjYWxsIGtoIGNvbnRyYWN0IHdpdGggdHJhbnNmZXIgKG1hdGNoIGVvc2tpdClcbiAgICAgKiBAcGFyYW0ge0lJZGVudGl0eX0gYWNjb3VudCAtIHtuYW1lLCBhdXRob3JpdHl9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCAtIGVvcyBhY2NvdW50LCBjYW4gYmUgdXNlciBvciBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWFudGl0eSAtIGVvcyBhc3NldCBmb3JtYXQsIGUucC4gXCIxLjAwMDAgRU9TXCJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnVuYyAtIGZ1bmN0aW9uIG5hbWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gYXJndW1lbnRzIG9mIHRoZSB0cmFuc2NhbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiRXJyb3IgLSBtZW1vXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gdHJhbnNhY3Rpb25EYXRhXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHRyYW5zY2FsKGFjY291bnQ6IElJZGVudGl0eSwgdGFyZ2V0OiBzdHJpbmcsIHF1YW50aXR5OiBzdHJpbmcsIGZ1bmM6IHN0cmluZywgYXJnczogYW55W10sIGNiRXJyb3I6IChlcnI6IGFueSkgPT4gYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2NoYWluLnRyYW5zZmVyKFxuICAgICAgICAgICAgYWNjb3VudCxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHF1YW50aXR5LFxuICAgICAgICAgICAgYEBbJHtmdW5jfToke2FyZ3Muam9pbignLCcpfV1gLFxuICAgICAgICAgICAgY2JFcnJvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJhbnNjYWwgd2l0aCBcIjAuMDAwMSBFT1NcIiB0b2tlblxuICAgICAqIEBwYXJhbSB7SUlkZW50aXR5fSBhY2NvdW50IC0ge25hbWUsIGF1dGhvcml0eX1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IC0gZW9zIGFjY291bnQsIGNhbiBiZSB1c2VyIG9yIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN5bWJvbFN0clxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGFyZ3VtZW50cyBvZiB0aGUgdHJhbnNjYWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYkVycm9yIC0gbWVtb1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHRyYW5zZW5kKGFjY291bnQ6IElJZGVudGl0eSwgdGFyZ2V0OiBzdHJpbmcsIHN5bWJvbFN0cjogc3RyaW5nLCBmdW5jOiBzdHJpbmcsIGFyZ3M6IGFueVtdLCBjYkVycm9yOiAoZXJyOiBhbnkpID0+IGFueSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc2NhbChcbiAgICAgICAgICAgIGFjY291bnQsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBgMC4wMDAxICR7c3ltYm9sU3RyfWAsXG4gICAgICAgICAgICBmdW5jLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgIGNiRXJyb3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCByZXMgaGVscGVyIG9mIChjb2RlLCBzeW0pXG4gICAgICogQGV4YW1wbGUga2gucmVzKCd0aGVjb250cmFjdCcsICdXT0QnKVxuICAgICAqIEBwYXJhbSBjb2RlIC0gdGhlIGNvbnRyYWN0J3MgYWNjb3VudFxuICAgICAqIEBwYXJhbSBzeW1TdHIgLSBzeW1ib2wgb2YgcmVzb3VyY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzKGNvZGU6IHN0cmluZywgc3ltU3RyOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNIZWxwZXIodGhpcy5fY2hhaW4sIGNvZGUsIHN5bVN0cik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgcmVzIG9mIGFuIHVzZXJcbiAgICAgKiBAZGVwcmVjYXRlZCAtIHVzaW5nIHJlcyhjb2RlLCBzeW1TdHIpLmNoZWNrQmFsYW5jZSh1c2VyQWNjb3VudCkgaW5zdGVhZFxuICAgICAqIEBwYXJhbSBjb2RlIC0gY29udHJhY3QgbmFtZVxuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSBhY2NvdW50IG9mIHRoZSB1c2VyXG4gICAgICogQHBhcmFtIHN5bWJvbFN0ciAtIHN5bWJvbCBzdHJpbmcgbGlrZSBcIkVPU1wiXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBc3NldD59IC0gcmV0dXJucyBudWxsIGlmIGl0J3Mgbm90IGV4aXN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjaGVja1Jlc09mKGNvZGU6IHN0cmluZywgYWNjb3VudF9uYW1lOiBzdHJpbmcsIHN5bWJvbFN0cjogc3RyaW5nKTogUHJvbWlzZTxBc3NldD4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXMoY29kZSwgc3ltYm9sU3RyKS5jaGVja0Fzc2V0KGFjY291bnRfbmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgcmVzIG9mIGFuIHVzZXJcbiAgICAgKiBAZGVwcmVjYXRlZCAtIHVzaW5nIHJlcyhjb2RlLCBzeW1TdHIpLmNoZWNrSW5mbygpIGluc3RlYWRcbiAgICAgKiBAcGFyYW0gY29kZSAtIGNvbnRyYWN0IG5hbWVcbiAgICAgKiBAcGFyYW0gc3ltYm9sU3RyIC0gc3ltYm9sIHN0cmluZyBsaWtlIFwiRU9TXCJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFzc2V0Pn0gLSByZXR1cm5zIG51bGwgaWYgaXQncyBub3QgZXhpc3QuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNoZWNrUmVzSW5mbyhjb2RlOiBzdHJpbmcsIHN5bWJvbFN0cjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJlcyhjb2RlLCBzeW1ib2xTdHIpLmNoZWNrSW5mbygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHBhcnNlIHRyYW5zY2FsIHBheWxvYWQgdG8gZGF0YSBzdHJ1Y3R1cmVcbiAgICAgKiBAcGFyYW0gbWVtb1xuICAgICAqIEByZXR1cm4ge1RyYW5zY2FsUGF5bG9hZH1cbiAgICAgKi9cbiAgICBwdWJsaWMgcGFyc2VUcmFuc2NhbFBheWxvYWQobWVtbzogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBUcmFuc2NhbFBheWxvYWQucGFyc2UobWVtbyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYXNzZW1ibGUgdHJhbnNjYWwgZGF0YSBzdHJ1Y3R1cmUgdG8gcGF5bG9hZFxuICAgICAqIEBwYXJhbSBmdW5jXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIGFzc2VtYmxlVHJhbnNjYWxQYXlsb2FkKGZ1bmM6IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pIHtcbiAgICAgICAgcmV0dXJuIChuZXcgVHJhbnNjYWxQYXlsb2FkKGZ1bmMsIC4uLmFyZ3MpKS5tZW1vKCk7XG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2NhbFBheWxvYWQge1xuICBwdWJsaWMgYXJnczogc3RyaW5nW10gPSBbXTtcbiAgY29uc3RydWN0b3IocHVibGljIGZ1bmM6IHN0cmluZywgLi4uIGFyZ3M6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbWVtb1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBwdWJsaWMgbWVtbygpIHtcbiAgICByZXR1cm4gYEBbJHt0aGlzLmZ1bmN9OiR7dGhpcy5hcmdzLmpvaW4oJywnKX1dYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBtZW1vXG4gICAqL1xuICBwdWJsaWMgcGFyc2VNZW1vKG1lbW86IHN0cmluZykge1xuICAgIGNvbnN0IGNhbGxUeXBlID0gbWVtb1swXTtcbiAgICBpZiAobWVtby5sZW5ndGggPCA0KSB0aHJvdyBuZXcgRXJyb3IoJ3BhcnNlIHRyYW5zY2FsIGVycm9yOiB0aGUgbWVtbyBpcyB0b28gc2hvcnQuJyk7XG4gICAgaWYgKG1lbW9bMV0gIT09ICdbJyB8fCBtZW1vWzJdID09PSAnXScpIHRocm93IG5ldyBFcnJvcigncGFyc2UgdHJhbnNjYWwgZXJyb3I6IGZvcm1hdGlvbiBlcnJvci4nKTtcbiAgICBpZiAoY2FsbFR5cGUgIT09ICdAJyAmJiBjYWxsVHlwZSAhPT0gJyMnKSB0aHJvdyBuZXcgRXJyb3IoJ3BhcnNlIHRyYW5zY2FsIGVycm9yOiB0eXBlIG1hcmsgbXVzdCBiZSBAIG9yICMuJyk7XG5cbiAgICBjb25zdCBwb3NDb2wgPSBtZW1vLmluZGV4T2YoJzonKTtcbiAgICBjb25zdCBwb3NFbmQgPSBtZW1vLmluZGV4T2YoJ10nKTtcbiAgICBpZiAocG9zRW5kIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdwYXJzZSB0cmFuc2NhbCBlcnJvcjogY2Fubm90IGZpbmQgZW5kIG1hcmsgXFwnXVxcJy4nKTtcblxuICAgIGlmIChwb3NDb2wgPCAwKSB7IC8vIGlmIHRoZSBjb2wgbWFyayBleGlzdFxuICAgICAgdGhpcy5mdW5jID0gbWVtby5zdWJzdHIoMiwgcG9zRW5kIC0gMik7XG4gICAgICB0aGlzLmFyZ3MgPSBbXTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuZnVuYyA9IG1lbW8uc3Vic3RyKDIsIHBvc0NvbCAtIDIpO1xuXG4gICAgbGV0IHBvcyA9IHBvc0NvbCArIDE7XG4gICAgbGV0IHBvc1ByZXYgPSBwb3M7XG4gICAgY29uc3QgYXJncyA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBwb3MgPSBtZW1vLmluZGV4T2YoJywnLCBwb3MpO1xuICAgICAgaWYgKHBvcyA+PSBwb3NFbmQgfHwgcG9zIDwgMCkge1xuICAgICAgICBhcmdzLnB1c2gobWVtby5zdWJzdHIocG9zUHJldiwgcG9zRW5kIC0gcG9zUHJldikpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGFyZ3MucHVzaChtZW1vLnN1YnN0cihwb3NQcmV2LCBwb3MgLSBwb3NQcmV2KSk7XG4gICAgICBwb3NQcmV2ID0gKytwb3M7XG4gICAgfVxuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHBhcnNlKG1lbW86IHN0cmluZykge1xuICAgIHJldHVybiAobmV3IFRyYW5zY2FsUGF5bG9hZCgnJykpLnBhcnNlTWVtbyhtZW1vKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXNzZXQgZnJvbSAnLi4vbW9kZWwvYXNzZXQnO1xuaW1wb3J0IENoYWluSGVscGVyIGZyb20gJy4vY2hhaW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNIZWxwZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHB1YmxpYyByZWFkb25seSBfY2hhaW46IENoYWluSGVscGVyLFxuICAgICAgcHVibGljIHJlYWRvbmx5IF9jb2RlOiBzdHJpbmcsXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgX3N5bVN0cjogc3RyaW5nLFxuICAgICAgcHVibGljIHJlYWRvbmx5IF9hZG1pbjogYW55ID0geyBuYW1lOiBudWxsLCBhdXRob3JpdHk6IG51bGwgfSkge1xuICB9XG5cbiAgZ2V0IGFkbWluKCkge1xuICAgIGlmICghdGhpcy5fYWRtaW4gfHwgIXRoaXMuX2FkbWluLm5hbWUgfHwgIXRoaXMuX2FkbWluLmF1dGhvcml0eSkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX2FkbWluO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlc0NvbnRyYWN0KCkgIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fY2hhaW4uZ2V0Q29udHJhY3QodGhpcy5fY29kZSkgO1xuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIHJlcyBvZiBhbiB1c2VyXG4gICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSBhY2NvdW50IG9mIHRoZSB1c2VyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXNzZXQ+fSAtIHJldHVybnMgbnVsbCBpZiBpdCdzIG5vdCBleGlzdC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBjaGVja0Fzc2V0KGFjY291bnRfbmFtZTogc3RyaW5nKTogUHJvbWlzZTxBc3NldD4ge1xuICAgIHJldHVybiBBc3NldC5wYXJzZShhd2FpdCB0aGlzLl9jaGFpbi5jaGVja1RhYmxlSXRlbSh0aGlzLl9jb2RlLCAncmVzLmFjY291bnRzJywgYWNjb3VudF9uYW1lLCB0aGlzLl9zeW1TdHIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjaGVjayByZXMncyBpbmZvXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXNzZXQ+fSAtIHJldHVybnMgbnVsbCBpZiBpdCdzIG5vdCBleGlzdC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBjaGVja0luZm8oKSB7XG4gICAgcmV0dXJuIEFzc2V0LnBhcnNlKGF3YWl0IHRoaXMuX2NoYWluLmNoZWNrVGFibGVJdGVtKHRoaXMuX2NvZGUsICdyZXMuaW5mbycsIHRoaXMuX2NvZGUsIHRoaXMuX3N5bVN0cikpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGlzc3VlKGFjY291bnRfbmFtZTogc3RyaW5nLCBxdWFudGl0eTogc3RyaW5nLCBtZW1vOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb250cmFjdCA9IGF3YWl0IHRoaXMucmVzQ29udHJhY3QoKTtcbiAgICByZXR1cm4gYXdhaXQgY29udHJhY3QucmVzaXNzdWUoeyB1c2VyIDogYWNjb3VudF9uYW1lLCBxdWFudGl0eSwgbWVtbyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBidXJuKGFjY291bnRfbmFtZTogc3RyaW5nLCBxdWFudGl0eTogc3RyaW5nLCBtZW1vOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb250cmFjdCA9IGF3YWl0IHRoaXMucmVzQ29udHJhY3QoKTtcbiAgICByZXR1cm4gYXdhaXQgY29udHJhY3QucmVzYnVybih7IHVzZXIgOiBhY2NvdW50X25hbWUsIHF1YW50aXR5LCBtZW1vIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHRha2UoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCBxdWFudGl0eTogc3RyaW5nLCBtZW1vOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb250cmFjdCA9IGF3YWl0IHRoaXMucmVzQ29udHJhY3QoKTtcbiAgICByZXR1cm4gYXdhaXQgY29udHJhY3QucmVzdGFrZSh7IGZyb20sIHRvLCBxdWFudGl0eSwgbWVtbyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjaGFuZ2UoYWNjb3VudF9uYW1lOiBzdHJpbmcsIGZyb206IHN0cmluZywgdG86IHN0cmluZywgbWVtbzogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udHJhY3QgPSBhd2FpdCB0aGlzLnJlc0NvbnRyYWN0KCk7XG4gICAgcmV0dXJuIGF3YWl0IGNvbnRyYWN0LmNoYW5nZSh7IHVzZXIgOiBhY2NvdW50X25hbWUsIGZyb20sIHRvLCBtZW1vIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7SUVvc0NsaWVudCwgSUlkZW50aXR5fSBmcm9tICcuLi90eXBlcy9lb3MnO1xuaW1wb3J0IHsgRW9zIH0gZnJvbSAnLi4vdHlwZXMvbGlicyc7XG5cbmNvbnN0IHN5bUVvc0NsaWVudCA9IFN5bWJvbCgnc3ltOjpFb3NDbGllbnQnKTtcbmNvbnN0IHN5bUdldElkZW50aXR5ID0gU3ltYm9sKCdzeW06OkdldElkZW50aXR5Jyk7XG5cbi8qKlxuICogRU9TUHJvdmlkZXIgLSBkZWZpbmVkIHRoZSBNVVNUIGludGVyZmFjZXMgb2YgYSBwbGF5ZXJcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRU9TUHJvdmlkZXIge1xuXG4gIHByaXZhdGUgZmllbGQ6IGFueSA9IHt9O1xuXG4gIC8qKlxuICAgKiBnZXQgb3IgY3JlYXRlIHNjYXR0ZXJcbiAgICogQHJldHVybiB7ZW9zQVBJfVxuICAgKi9cbiAgZ2V0IGVvc0NsaWVudCgpOiBJRW9zQ2xpZW50IHtcbiAgICBpZiAodGhpcy5maWVsZFtzeW1Fb3NDbGllbnRdKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWVsZFtzeW1Fb3NDbGllbnRdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG1ldGhvZCBub3QgeWV0IGltcGxlbWVudGVkOiB0aGlzIGludGVyZmFjZSBzaG91bGQgYmUgaW1wbGVtZW50IGJ5IHRoZSBzcGVjaWZpYyBjbGFzcy5gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogZ2V0SWRlbnRpdHkgb2YgY3VyIHNjYXR0ZXIgdXNlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHtJSWRlbnRpdHl9Pn1cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRJZGVudGl0eSgpOiBQcm9taXNlPElJZGVudGl0eT4ge1xuICAgIGlmICh0aGlzLmZpZWxkW3N5bUdldElkZW50aXR5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmllbGRbc3ltR2V0SWRlbnRpdHldO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG1ldGhvZCBub3QgeWV0IGltcGxlbWVudGVkOiB0aGlzIGludGVyZmFjZSBzaG91bGQgYmUgaW1wbGVtZW50IGJ5IHRoZSBzcGVjaWZpYyBjbGFzcy5gKTtcbiAgICB9XG4gICAgLy8gaXQgc2hvdWxkIGJlIGxpa2UgdGhhdCA6ICd7IG5hbWU6IFwibmFtZW9mdXNlclwiLCBhdXRob3JpdHk6IFwiYWN0aXZlXCIgfSdcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgYXV0aCBzdHJ1Y3R1cmUgZnJvbSBpZGVudGl0eVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IC0geyBhdXRob3JpemF0aW9uIDogWyAnbmFtZUBhdXRob3JpdHknIF0gfVxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldEF1dGgoKSB7XG4gICAgY29uc3QgaWRlbnRpdHkgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF1dGhvcml6YXRpb246IFtgJHtpZGVudGl0eS5uYW1lfUAke2lkZW50aXR5LmF1dGhvcml0eX1gXSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGluaXRGcm9tQ29uZihjb25mOiBhbnksIGFjY291bnQ6IElJZGVudGl0eSkge1xuICAgIGlmIChjb25mKSB7XG4gICAgICBjb25zdCBlb3MgPSBFb3MoY29uZik7XG4gICAgICB0aGlzLmZpZWxkW3N5bUVvc0NsaWVudF0gPSAoKSA9PiBlb3M7XG4gICAgfVxuICAgIGlmIChhY2NvdW50KSB7XG4gICAgICAgIHRoaXMuZmllbGRbc3ltR2V0SWRlbnRpdHldID0gYWNjb3VudDtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW50ZXJmYWNlIElFdmVudCB7XG4gICAgY2I6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuICAgIGN0eDogYW55O1xufVxuXG5pbnRlcmZhY2UgSUV2ZW50TWFwIHtcbiAgICBbZXZlbnQ6IHN0cmluZ106IElFdmVudDtcbn1cblxuLyoqXG4gKiBFdmVudCBIYW5kbGVyXG4gKiBAZGVzY1xuICogLSBvbmx5IGVuYWJsZWQgZXZlbnQgY2FuIGJlIGVtaXR0ZWRcbiAqIC0gSWYgdGhlIGNhbGxiYWNrIG9mIGFuIGV2ZW50IGlzIG5vdCBzZXQsIGFsZXJ0IHdpbGwgYmUgY2FsbGVkIGJ5IGRlZmF1bHQgb24gdGhlIGJyb3dzZXIsIGFuZCBFcnJvciB3aWxsIGJlIHRyaWdnZXJlZCBpbiBub2RlanNcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRIYW5kbGVyIHtcblxuICAgIHByb3RlY3RlZCBfZGVmYXVsdENiITogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG4gICAgcHJvdGVjdGVkIF9ldmVudE1hcDogSUV2ZW50TWFwID0ge307XG4gICAgcHJvdGVjdGVkIF9zdXBwb3J0ZWRFdmVudHM6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihzdXBwb3J0ZWRFdmVudHM/OiBzdHJpbmdbXSB8IElFdmVudE1hcCkge1xuICAgICAgICB0aGlzLl9kZWZhdWx0Q2IgPSAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgICAgICAgIGFyZ3MuZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodiBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoc3VwcG9ydGVkRXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUV2ZW50cyhzdXBwb3J0ZWRFdmVudHMpO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRNYXAgPSBBcnJheS5pc0FycmF5KHN1cHBvcnRlZEV2ZW50cykgPyB7fSA6IHN1cHBvcnRlZEV2ZW50cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGVuYWJsZSBldmVudCBuYW1lc1xuICAgICAqIEBwYXJhbSB7QXJyYXkgfCBPYmplY3R9IHN1cHBvcnRlZEV2ZW50cyAtIGtleXMgd2lsbCBiZSB1c2VkIHdoZW4gaXQncyBhbiBvYmplY3RcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5hYmxlRXZlbnRzKHN1cHBvcnRlZEV2ZW50czogYW55KSB7XG4gICAgICAgIGNvbnN0IG5ld0V2ZW50S2V5cyA9IEFycmF5LmlzQXJyYXkoc3VwcG9ydGVkRXZlbnRzKSA/IHN1cHBvcnRlZEV2ZW50cyA6IE9iamVjdC5rZXlzKHN1cHBvcnRlZEV2ZW50cyk7XG4gICAgICAgIHRoaXMuX3N1cHBvcnRlZEV2ZW50cyA9ICh0aGlzLl9zdXBwb3J0ZWRFdmVudHMgfHwgW10pLmNvbmNhdChuZXdFdmVudEtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCBjYWxsYmFjayBvZiBhbiBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuQ2FsbGJhY2sgLSBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgY2FsbGJhY2ssIHRoZW4gdGhlIG5ldyBvbmUgd2lsbCBjb3ZlciB0aGUgcHJldmlvdXMgb25lLlxuICAgICAqIEBwYXJhbSB7Kn0gaW5zdGFuY2UgLSB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm4ge0V2ZW50SGFuZGxlcn0gLSBmb3IgcGlwZWxpbmVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RXZlbnQoZXZlbnQ6IHN0cmluZywgZm5DYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIGluc3RhbmNlOiBhbnkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdXBwb3J0ZWRFdmVudHMuZmluZCgobmFtZTogc3RyaW5nKSA9PiBuYW1lID09PSBldmVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXZlbnQgaGFuZGxlciA6IGV2ZW50ICR7ZXZlbnR9IGFyZSBub3Qgc3VwcG9ydGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50TWFwW2V2ZW50XSA9IHtjYjogZm5DYWxsYmFjaywgY3R4OiBpbnN0YW5jZX07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyaWdnZXIgYW4gZXZlbnQgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gYXJndW1lbnRzXG4gICAgICovXG4gICAgcHVibGljIGVtaXRFdmVudChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICBpZiAoIXRoaXMuX3N1cHBvcnRlZEV2ZW50cy5maW5kKChuYW1lOiBzdHJpbmcpID0+IG5hbWUgPT09IGV2ZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBldmVudCBoYW5kbGVyIDogZXZlbnQgJHtldmVudH0gYXJlIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLl9ldmVudE1hcFtldmVudF07XG4gICAgICAgIHJldHVybiBlID8gZS5jYi5jYWxsKGUuY3R4LCAuLi5hcmdzKSA6IHRoaXMuX2RlZmF1bHRDYi5jYWxsKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL3JlYWRpbmdQbGF5ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zaWduUGxheWVyJzsiLCJpbXBvcnQge0Vvc30gZnJvbSAnLi4vdHlwZXMvbGlicyc7XG5cbmltcG9ydCB7SU11bHRpU291cmNlUGxheWVyQ29uZmlnLCBNdWx0aVNvdXJjZVBsYXllcn0gZnJvbSAnLi4vbXVsdGlTb3VyY2VQbGF5ZXInO1xuaW1wb3J0IHtJRW9zQ2xpZW50LCBJSWRlbnRpdHl9IGZyb20gJy4uL3R5cGVzL2Vvcyc7XG5pbXBvcnQge2NyZWF0ZUxvZ2dlcn0gZnJvbSAnLi4vdXRpbHMvbG9nJztcbmltcG9ydCB7Zm9yTXN9IGZyb20gJy4uL3V0aWxzL3dhaXQnO1xuXG5jb25zdCBsb2cgPSBjcmVhdGVMb2dnZXIoJ3JlYWRpbmdQbGF5ZXInKTtcblxuZXhwb3J0IGludGVyZmFjZSBJUmVhZGluZ1BsYXllckNvbmZpZyBleHRlbmRzIElNdWx0aVNvdXJjZVBsYXllckNvbmZpZyB7XG4gICAgYWNjb3VudD86IElJZGVudGl0eTtcbn1cblxuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBhY2NvdW50OiB7XG4gICAgICAgIG5hbWU6ICdlb3NpbycsXG4gICAgICAgIGF1dGhvcml0eTogJ2FjdGl2ZScsXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjbGFzcyBSZWFkaW5nUGxheWVyIGV4dGVuZHMgTXVsdGlTb3VyY2VQbGF5ZXIge1xuXG4gICAgcHJvdGVjdGVkIF9pZGVudGl0eTogSUlkZW50aXR5O1xuICAgIHByb3RlY3RlZCBfaGVhZF9ibG9ja19udW06IG51bWJlciA9IDA7XG4gICAgcHJvdGVjdGVkIF9oZWFkX3JldHJ5X2NvdW50OiBudW1iZXIgPSAwO1xuXG4gICAgcHJvdGVjdGVkIF9lb3NOb2RlczogSUVvc0NsaWVudFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mOiBJUmVhZGluZ1BsYXllckNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25mKTtcbiAgICAgICAgdGhpcy5faWRlbnRpdHkgPSBkZWZhdWx0Q29uZmlnLmFjY291bnQ7XG4gICAgICAgIHRoaXMuX2hlYWRfYmxvY2tfbnVtID0gMDtcbiAgICAgICAgdGhpcy5faGVhZF9yZXRyeV9jb3VudCA9IDA7XG4gICAgICAgIGxvZy5pbmZvKCdbRW9zUmVhZGluZ10gPT0+IENyZWF0ZSByZWFkaW5nIG5vZGVzIFxcbkNPTkZJR1M6JywgSlNPTi5zdHJpbmdpZnkodGhpcy5fbm9kZUNvbmZpZ3MpKTtcbiAgICAgICAgdGhpcy5fZW9zTm9kZXMgPSB0aGlzLl9ub2RlQ29uZmlncy5tYXAoY2ZnID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVvcyA9IEVvcyhjZmcpO1xuICAgICAgICAgICAgZW9zLl9fY29uZiA9IGNmZztcbiAgICAgICAgICAgIHJldHVybiBlb3M7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBlb3NDbGllbnQoKTogSUVvc0NsaWVudCB7XG4gICAgICAgIGlmICghdGhpcy5fZW9zTm9kZXMgfHwgdGhpcy5fZW9zTm9kZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW9zVXRpbCA6IE5vIEF2YWxpYWJsZSBOb2Rlcy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZW9zTm9kZXNbMF07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldElkZW50aXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWRlbnRpdHk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGNoZWNrTm9kZXMoY2hlY2tTcGFuTXMgPSAxNTAwMCwgcmV0cnlfbWF4ID0gNCwgYmxvY2tIZWlnaHRUb2xlcmFuY2UgPSAxMDAwKSB7IC8vIOm7mOiupDIw56eS5p+l6K+i5LiA5qyh6IqC54K5XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBhd2FpdCBmb3JNcyhjaGVja1NwYW5Ncyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0Vvc1JlYWRpbmddID09PiBTdGFydCBDaGVja2luZyBOb2RlcyAnLCB0aGlzLmVvc0NsaWVudC5fX2NvbmYuaHR0cEVuZHBvaW50LCAnQVQnLCBEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhaW5JbmZvOiBhbnkgPSBhd2FpdCB0aGlzLmVvc0NsaWVudC5nZXRJbmZvKHt9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZF9yZXRyeV9jb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFpbkluZm8uaGVhZF9ibG9ja19udW0gPiB0aGlzLl9oZWFkX2Jsb2NrX251bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZF9ibG9ja19udW0gPSBjaGFpbkluZm8uaGVhZF9ibG9ja19udW07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiBuZXcgaGVhZCBibG9jayBudW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRfYmxvY2tfbnVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8IE5vZGU6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lb3NDbGllbnQuX19jb25mLmh0dHBFbmRwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5kb21JbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLl9lb3NOb2Rlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tSW5kID09PSAwKSBicmVhazsgLy8gbHVja3khISDkuLogMCDnmoTmpoLnjofotorpq5gsIOivtOaYjumFjee9ruS4reeahOiKgueCuei2iuWwkSwg5q2k5pe26ZmN5L2O5Zug5Li65b+r6auY5YiH5o2i6IqC54K555qE5qaC546H5piv5rKh5q+b55eF55qEXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiB0cnkgcGljayBhbm90aGVyIG5vZGUgYnkgYmxvY2sgaGVpZ2h0IHwgTm9kZTogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lb3NOb2Rlc1tyYW5kb21JbmRdLl9fY29uZi5odHRwRW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5vdGhlckNoYWluSW5mbyA9IGF3YWl0IHRoaXMuX2Vvc05vZGVzW3JhbmRvbUluZF0uZ2V0SW5mbyh7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5vdGhlckNoYWluSW5mby5oZWFkX2Jsb2NrX251bSAtIHRoaXMuX2hlYWRfYmxvY2tfbnVtID4gYmxvY2tIZWlnaHRUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5fZW9zTm9kZXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW9zTm9kZXNbMF0gPSB0aGlzLl9lb3NOb2Rlc1tyYW5kb21JbmRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzW3JhbmRvbUluZF0gPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiBuZXcgbm9kZSBzZWxlY3RlZCAoYnkgaGVhZCBibG9jaykgfCBPTEQ6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuX19jb25mLmh0dHBFbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3wgTkVXOicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW9zQ2xpZW50Ll9fY29uZi5odHRwRW5kcG9pbnQpOyAvLyDlpoLmnpzoioLngrnlj5HnlJ/liIfmjaIsIOWwseS4jeW6lOivpSBicmVhayDkuoYsIOW6lOivpei1sCAyMDAwbXMg55qE6YeN6K+VXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiBubyBuZWVkcyB0byBzd2l0Y2ggbm9kZSBmb3IgYmxvY2sgaGVpZ2h0IHwgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5vdGhlckNoYWluSW5mby5oZWFkX2Jsb2NrX251bSwgJy0nLCB0aGlzLl9oZWFkX2Jsb2NrX251bSwgJzwnLCBibG9ja0hlaWdodFRvbGVyYW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7IC8vIOWmguaenOmAieWIsOeahOiKgueCueiuv+mXrumDveWksei0peS6hiwg5oSP5ZGz552A5b2T5YmN6IqC54K55Zyo5omA5pyJ6IqC54K55Lit5Y+v55So5oCn5pu06auY55qE5qaC546H5pu05aSnLCDkuI3liIfmjaLmmK/msqHmr5vnl4XnmoRcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyDmraTml7bkv53nlZnljp/oioLngrnlubbpgIDlh7pcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oZWFkX3JldHJ5X2NvdW50IDwgcmV0cnlfbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEVycm9yIDogQ3VycmVudCBub2RlIGVycm9yIHwgUkVUUlkgOicsIHRoaXMuX2hlYWRfcmV0cnlfY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3wgTk9ERTogJywgdGhpcy5fZW9zTm9kZXNbMF0uX19jb25mLmh0dHBFbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkX3JldHJ5X2NvdW50ICs9IDE7IC8vIGFuZCByZXRyeSB3aWxsIHN0YXJ0IGFmdGVyIDIwMDBtc1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tFb3NSZWFkaW5nXSA9PT4gfCBFcnJvciA6IEN1cnJlbnQgbm9kZSBlcnJvciB8IFJFVFJZIDogRmFpbGVkIHwgTm9kZTonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzWzBdLl9fY29uZi5odHRwRW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLl9lb3NOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluSW5mb05ldyA9IGF3YWl0IHRoaXMuX2Vvc05vZGVzW2ldLmdldEluZm8oe30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhaW5JbmZvTmV3LmhlYWRfYmxvY2tfbnVtID49IHRoaXMuX2hlYWRfYmxvY2tfbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5fZW9zTm9kZXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lb3NOb2Rlc1swXSA9IHRoaXMuX2Vvc05vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW9zTm9kZXNbaV0gPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tFb3NSZWFkaW5nXSA9PT4gSW5mbyA6IG5ldyBub2RlIHNlbGVjdGVkIHwgT0xEOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuX19jb25mLmh0dHBFbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnfCBORVc6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVvc0NsaWVudC5fX2NvbmYuaHR0cEVuZHBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBhbmQgd2lsbCBiZSByZS10ZXN0IGFmdGVyIDIwMDBtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tFb3NSZWFkaW5nXSA9PT4gSW5mbyA6IHRlc3Qgbm9kZSBwYXNzZWQgfCBOb2RlOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzW2ldLl9fY29uZi5odHRwRW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1Rlc3Q6ICcsIGNoYWluSW5mb05ldy5oZWFkX2Jsb2NrX251bSwgJzwnLCB0aGlzLl9oZWFkX2Jsb2NrX251bSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbRW9zUmVhZGluZ10gPT0+IFdhcm5pbmcgOiB0ZXN0IG5vZGUgZXJyb3IgfCBOb2RlOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW9zTm9kZXNbaV0uX19jb25mLmh0dHBFbmRwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IGZvck1zKDIwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9zaWduUGxheWVyJzsiLCJpbXBvcnQge0lNdWx0aVNvdXJjZVBsYXllckNvbmZpZywgTXVsdGlTb3VyY2VQbGF5ZXJ9IGZyb20gJy4uLy4uL211bHRpU291cmNlUGxheWVyJztcbmltcG9ydCB7SUF1dGhvcml6YXRpb24sIElFb3NDbGllbnQsIElJZGVudGl0eX0gZnJvbSAnLi4vLi4vdHlwZXMvZW9zJztcbmltcG9ydCB7RW9zfSBmcm9tICcuLi8uLi90eXBlcy9saWJzJztcbmltcG9ydCB7Y3JlYXRlTG9nZ2VyfSBmcm9tICcuLi8uLi91dGlscy9sb2cnO1xuaW1wb3J0IHt0aW1lb3V0UHJvbWlzZX0gZnJvbSAnLi4vLi4vdXRpbHMvd2FpdCc7XG5pbXBvcnQge0lTaWduUGxheWVyT3B0aW9ucywgTm9kZVN0YXQsIE5vZGVTdGF0TWdyfSBmcm9tICcuL25vZGVTdGF0JztcblxuY29uc3QgbG9nID0gY3JlYXRlTG9nZ2VyKCdzaWduUGxheWVyJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNpZ25QbGF5ZXJDb25maWcgZXh0ZW5kcyBJTXVsdGlTb3VyY2VQbGF5ZXJDb25maWcge1xuICAgIGFjY291bnQ6IElJZGVudGl0eTtcbiAgICBvcHRpb25zPzogSVNpZ25QbGF5ZXJPcHRpb25zO1xufVxuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgIGFjY291bnQ6IHtcbiAgICAgICAgbmFtZTogJ2Vvc2lvJyxcbiAgICAgICAgYXV0aG9yaXR5OiAnYWN0aXZlJyxcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbWF4RmFpbHVyZVJhdGU6IDAuNDk5LFxuICAgICAgICBmYWlsdXJlUmF0ZVRocmVzaG9sZDogMC4xLFxuICAgICAgICBtYXhDb250aW51b3VzRmFpbHVyZTogMyxcbiAgICAgICAgY2xlYW5pbmdUaW1lSW50ZXJ2YWw6IDEyMDAwMCwgLy8gMiAqIDYwICogMTAwMDtcbiAgICAgICAgcmV2aXZhbFRpbWVJbnRlcnZhbDogNjAwMDAwLCAvLyAxMCAqIDYwICogMTAwMDtcbiAgICAgICAgcmVzcG9uc2VJbnRlcnZhbFRocmVzaG9sZDogMTAwMCxcbiAgICAgICAgcmVzcG9uc2VJbnRlcnZhbERlY2xpbmU6IDEwMCxcbiAgICAgICAgbWF4Q2FsbFByb21pc2VFeGNlZWRUaW1lOiAxODAwMDAsIC8vIOe7j+a1i+ivlSAx5YiG6ZKf5pe26Ze05LuN54S25aSq55+tLCDlj6/og73lr7zoh7TlpKfph4/ph43lj5EsIOaPkOmrmOWIsDXliIbpkp9cbiAgICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIFNpZ25QbGF5ZXIgZXh0ZW5kcyBNdWx0aVNvdXJjZVBsYXllciB7XG5cbiAgICBwcm90ZWN0ZWQgX2lkZW50aXR5OiBJSWRlbnRpdHk7XG4gICAgcHJvdGVjdGVkIF9vcHRpb25zOiBJU2lnblBsYXllck9wdGlvbnM7XG5cbiAgICBwcm90ZWN0ZWQgX25vZGVTdGF0ZXM6IE5vZGVTdGF0TWdyO1xuXG4gICAgcHJvdGVjdGVkIF9jb25jdXJyZW50Q291bnQ6IG51bWJlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mOiBJU2lnblBsYXllckNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25mKTtcbiAgICAgICAgY29uc3Qge2FjY291bnQsIG9wdGlvbnN9ID0gY29uZjtcbiAgICAgICAgdGhpcy5faWRlbnRpdHkgPSB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0Q29uZmlnLmFjY291bnQsXG4gICAgICAgICAgICAuLi5hY2NvdW50LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uZGVmYXVsdENvbmZpZy5vcHRpb25zLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fbm9kZVN0YXRlcyA9IG5ldyBOb2RlU3RhdE1ncih0aGlzLl9ub2RlQ29uZmlncywgdGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBlb3NDbGllbnQoKTogSUVvc0NsaWVudCB7XG4gICAgICAgIHRoaXMuX25vZGVTdGF0ZXMuc2V0VGhlQmVzdE5vZGVUb0N1cnJlbnQoKTtcbiAgICAgICAgY29uc3QgY29uZiA9IHRoaXMuX25vZGVTdGF0ZXMuZ2V0Q3VyTm9kZUNvbmYoKTtcbiAgICAgICAgLy8gbG9nLnZlcmJvc2UoXCJjdXJyZW50Tm9kZVwiLCB0aGlzLl9ub2RlU3RhdGVzLl9jdXJyZW50Tm9kZUluZGV4LCBjb25mLCB0aGlzLl9ub2RlU3RhdGVzLmdldEN1ck5vZGVTdGF0KCkpO1xuICAgICAgICByZXR1cm4gbmV3IEVvcyhjb25mKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0SWRlbnRpdHkoKTogUHJvbWlzZTxJSWRlbnRpdHk+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9pZGVudGl0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZGVudGl0eSBoYXMgbm90IGJlZW4gc2V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRJZGVudGl0eShhY2NvdW50OiBJSWRlbnRpdHkpIHtcbiAgICAgICAgdGhpcy5faWRlbnRpdHkgPSBhY2NvdW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2NrQ2hhaW4oKSB7XG4gICAgICAgIGNvbnN0IGNoYWluID0gdGhpcy5jaGFpbjsgLy8gdXNpbmcgZW9zQ2xpZW50IGhlcmVcbiAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkeW5hbWljQ2FsbChjb2RlOiBzdHJpbmcsIGZ1bmM6IHN0cmluZywganNvbkRhdGE6IGFueSwgYXV0aG9yaXphdGlvbj86IElBdXRob3JpemF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2NvbmN1cnJlbnRDb3VudCArPSAxO1xuXG4gICAgICAgIGNvbnN0IGNoYWluID0gdGhpcy5sb2NrQ2hhaW4oKTsgLy8gdXNpbmcgZW9zQ2xpZW50IGhlcmVcblxuICAgICAgICBjb25zdCBzdGFydFRpbWVTdGFtcCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnN0IF9lbmRwb2ludFVybCA9IHRoaXMuX25vZGVTdGF0ZXMuZ2V0Q3VyTm9kZUNvbmYoKS5odHRwRW5kcG9pbnQgfHwgJyc7XG5cbiAgICAgICAgY29uc3QgYXV0aCA9IGF1dGhvcml6YXRpb24gfHwge1xuICAgICAgICAgICAgYWN0b3I6IHRoaXMuX2lkZW50aXR5Lm5hbWUsXG4gICAgICAgICAgICBwZXJtaXNzaW9uOiB0aGlzLl9pZGVudGl0eS5hdXRob3JpdHksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5sb2coJ1NUQVJUJywgX2VuZHBvaW50VXJsLCBjb2RlLCBmdW5jLCBqc29uRGF0YSwgYXV0aCxcbiAgICAgICAgICAgIHRoaXMuX25vZGVTdGF0ZXMuZ2V0Q3VyTm9kZVN0YXQoKSxcbiAgICAgICAgICAgIGBDb25jdXJyZW50IGNvdW50ID0+ICR7dGhpcy5fY29uY3VycmVudENvdW50fSBgLFxuICAgICAgICApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgdGltZW91dFByb21pc2UoXG4gICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5tYXhDYWxsUHJvbWlzZUV4Y2VlZFRpbWUgfHwgNTAwMDAsXG4gICAgICAgICAgICAgICAgY2hhaW4uY2FsbChjb2RlLCBmdW5jLCBqc29uRGF0YSwgYXV0aCksXG4gICAgICAgICAgICApLmNhdGNoKGV4ID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX25vZGVTdGF0ZXMubWFya1NlbmRTdWNjZXNzKHN0YXJ0VGltZVN0YW1wKTtcbiAgICAgICAgICAgIHRoaXMubG9nKCdTVUNDRVNTJywgX2VuZHBvaW50VXJsLCBjb2RlLCBmdW5jLCBqc29uRGF0YSwgYXV0aCwgbm9kZSk7XG4gICAgICAgICAgICB0aGlzLl9jb25jdXJyZW50Q291bnQgLT0gMTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9ub2RlU3RhdGVzLm1hcmtTZW5kRmFpbGVkKHN0YXJ0VGltZVN0YW1wKTtcbiAgICAgICAgICAgIHRoaXMubG9nKCdGQUlMRUQnLCBfZW5kcG9pbnRVcmwsIGNvZGUsIGZ1bmMsIGpzb25EYXRhLCBhdXRoLCBub2RlLCBgRVJST1IgPT4gJHsoZSAmJiBlLm1lc3NhZ2UpID8gZS5tZXNzYWdlIDogZX1gKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbmN1cnJlbnRDb3VudCAtPSAxO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBsb2coXG4gICAgICAgIG1hcms6IHN0cmluZyxcbiAgICAgICAgZW5kUG9pbnRVcmw6IHN0cmluZyxcbiAgICAgICAgY29kZTogc3RyaW5nLFxuICAgICAgICBmdW5jOiBzdHJpbmcsXG4gICAgICAgIGpzb25EYXRhOiBhbnksXG4gICAgICAgIGF1dGg6IElBdXRob3JpemF0aW9uLFxuICAgICAgICBub2RlOiBOb2RlU3RhdCxcbiAgICAgICAgLi4uYXJnczogYW55W11cbiAgICApIHtcbiAgICAgICAgbG9nLmluZm8oXG4gICAgICAgICAgICBgW3NpZ25QbGF5ZXJdIENhbGwgY2hhaW4gW1sgJHtlbmRQb2ludFVybH0gXV0gJHtjb2RlfS4ke2Z1bmN9KCR7SlNPTi5zdHJpbmdpZnkoanNvbkRhdGEpfSkgYnkgJHthdXRoLmFjdG9yfUAke2F1dGgucGVybWlzc2lvbn0gW1tbJHttYXJrfV1dXSA6XG5Ob2RlIHN0YXR1cyA9PiAke0pTT04uc3RyaW5naWZ5KG5vZGUpfVxuYCxcbiAgICAgICAgICAgIC4uLmFyZ3MpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHtJRW9zTm9kZUNvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlncyc7XG5pbXBvcnQge2NyZWF0ZUxvZ2dlcn0gZnJvbSAnLi4vLi4vdXRpbHMvbG9nJztcblxuY29uc3QgbG9nID0gY3JlYXRlTG9nZ2VyKCdzaWduUGxheWVyOm5vZGVTdGF0Jyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNpZ25QbGF5ZXJPcHRpb25zIHtcbiAgICBtYXhGYWlsdXJlUmF0ZT86IG51bWJlcjtcbiAgICBtYXhDb250aW51b3VzRmFpbHVyZT86IG51bWJlcjtcbiAgICBmYWlsdXJlUmF0ZVRocmVzaG9sZD86IG51bWJlcjtcbiAgICByZXNwb25zZUludGVydmFsVGhyZXNob2xkPzogbnVtYmVyO1xuICAgIHJlc3BvbnNlSW50ZXJ2YWxEZWNsaW5lPzogbnVtYmVyO1xuICAgIG1heENhbGxQcm9taXNlRXhjZWVkVGltZT86IG51bWJlcjtcbiAgICBjbGVhbmluZ1RpbWVJbnRlcnZhbD86IG51bWJlcjtcbiAgICByZXZpdmFsVGltZUludGVydmFsPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTm9kZVN0YXQge1xuICAgIHB1YmxpYyBlcnJvcl9jb3VudHM6IG51bWJlciA9IDA7IC8vIOWksei0peasoeaVsFxuICAgIHB1YmxpYyB0b3RhbF9jb3VudHM6IG51bWJlciA9IDE7IC8vIOaAu+iwg+eUqOasoeaVsFxuICAgIHB1YmxpYyBjb250aW51b3VzX2ZhaWx1cmU6IG51bWJlciA9IDA7IC8vIOi/nue7reWksei0peasoeaVsFxuICAgIHB1YmxpYyBlbmFibGVkOiBib29sZWFuID0gdHJ1ZTsgLy8g5byA5YWz54q25oCBXG4gICAgcHVibGljIHJlc3BvbnNlX2ludGVydmFsOiBudW1iZXIgPSAwOyAvLyDlk43lupTpl7TpmpRcbiAgICBwdWJsaWMgcmV2aXZhbF90aW1lOiBudW1iZXIgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOyAvLyDkuIvmrKHnhpTmlq3mgaLlpI3ml7bpl7RcbiAgICBwdWJsaWMgY2xlYW5pbmdfdGltZTogbnVtYmVyID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsgLy8g5LiL5qyh5riF55CG54q25oCB5pe26Ze0XG5cbiAgICBwdWJsaWMgcmVjb3JkX3RvdGFsX2NvdW50cz86IG51bWJlciA9IDA7XG4gICAgcHVibGljIHJlY29yZF90b3RhbF9zdWNjZXNzPzogbnVtYmVyID0gMDtcbiAgICBwdWJsaWMgcmVjb3JkX3RvdGFsX2Z1c2U/OiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyByZWNvcmRfdG90YWxfZmFpbGVkPzogbnVtYmVyID0gMDtcbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVTdGF0TWdyIHtcblxuICAgIHByb3RlY3RlZCBfbm9kZVN0YXR1czogTm9kZVN0YXRbXSA9IFtdO1xuICAgIHB1YmxpYyBfY3VycmVudE5vZGVJbmRleDogbnVtYmVyID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgX25vZGVDb25maWdzOiBJRW9zTm9kZUNvbmZpZ1tdLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgX29wdGlvbnM6IElTaWduUGxheWVyT3B0aW9ucyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5pbml0Tm9kZVN0YXR1cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0Tm9kZVN0YXR1cygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ub2RlQ29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fbm9kZVN0YXR1cy5wdXNoKG5ldyBOb2RlU3RhdCgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb2cuaW5mbyhcImluaXRpYXRlZFwiLCB0aGlzLl9ub2RlU3RhdHVzLCB0aGlzLl9ub2RlQ29uZmlncylcbiAgICAgICAgdGhpcy5zZXRUaGVCZXN0Tm9kZVRvQ3VycmVudCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUaGVCZXN0Tm9kZVRvQ3VycmVudCgpIHtcbiAgICAgICAgbGV0IG1pbl9ub2RlX2lkeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuX25vZGVTdGF0dXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IHRoaXMuX25vZGVTdGF0dXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnRyeUNsZWFuKGkpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JfcmF0ZSA9IG5vZGUuZXJyb3JfY291bnRzIC8gbm9kZS50b3RhbF9jb3VudHM7XG4gICAgICAgICAgICBjb25zdCByZXZpdmFsID0gdGltZXN0YW1wID49IG5vZGUucmV2aXZhbF90aW1lO1xuXG4gICAgICAgICAgICBpZiAobm9kZS5lbmFibGVkICYmXG4gICAgICAgICAgICAgICAgKGVycm9yX3JhdGUgPj0gKHRoaXMuX29wdGlvbnMubWF4RmFpbHVyZVJhdGUgfHwgMC41KSB8fFxuICAgICAgICAgICAgICAgICAgICBub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSA+PSAodGhpcy5fb3B0aW9ucy5tYXhDb250aW51b3VzRmFpbHVyZSB8fCA1KSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG5vZGUuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUucmV2aXZhbF90aW1lID0gdGltZXN0YW1wICsgKHRoaXMuX29wdGlvbnMucmV2aXZhbFRpbWVJbnRlcnZhbCB8fCA2MDAwMDApO1xuICAgICAgICAgICAgICAgIG5vZGUuZXJyb3JfY291bnRzID0gMDtcbiAgICAgICAgICAgICAgICBub2RlLnRvdGFsX2NvdW50cyA9IDE7XG4gICAgICAgICAgICAgICAgbm9kZS5jb250aW51b3VzX2ZhaWx1cmUgPSAwO1xuICAgICAgICAgICAgICAgIG5vZGUucmVjb3JkX3RvdGFsX2Z1c2UgPSAobm9kZS5yZWNvcmRfdG90YWxfZnVzZSB8fCAwKSArIDE7XG4gICAgICAgICAgICAgICAgbG9nLmluZm8oYFtlb3NfY2FsbF91dGlsXSBmdXNlICR7dGhpcy5fbm9kZUNvbmZpZ3NbaV0uaHR0cEVuZHBvaW50fWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW5vZGUuZW5hYmxlZCAmJiAhcmV2aXZhbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtaW5fbm9kZSA9IHRoaXMuX25vZGVTdGF0dXNbbWluX25vZGVfaWR4XTtcbiAgICAgICAgICAgIGNvbnN0IG1pbl9lcnJvcl9yYXRlID0gbWluX25vZGUuZXJyb3JfY291bnRzIC8gbWluX25vZGUudG90YWxfY291bnRzO1xuICAgICAgICAgICAgaWYgKG1pbl9ub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSA+IG5vZGUuY29udGludW91c19mYWlsdXJlIC8vIOmAieWHuuiKgueCueeahOi/nue7reWksei0peasoeaVsOabtOWwj1xuICAgICAgICAgICAgICAgIHx8IG1pbl9lcnJvcl9yYXRlID4gZXJyb3JfcmF0ZSArICh0aGlzLl9vcHRpb25zLmZhaWx1cmVSYXRlVGhyZXNob2xkIHx8IDAuMSkgLy8g6YCJ5Ye66IqC54K555qE5aSx6LSl546H5pu05L2OXG4gICAgICAgICAgICAgICAgfHwgbWluX25vZGUucmVzcG9uc2VfaW50ZXJ2YWwgPiBub2RlLnJlc3BvbnNlX2ludGVydmFsICsgKHRoaXMuX29wdGlvbnMucmVzcG9uc2VJbnRlcnZhbFRocmVzaG9sZCB8fCAxMDAwKS8vIOmAieWHuuiKgueCueeahOebuOW6lOaXtumXtOadg+WAvOabtOW/q1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbWluX25vZGVfaWR4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnROb2RlSW5kZXggPSBtaW5fbm9kZV9pZHg7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5vZGVDb25mKGluZGV4OiBudW1iZXIpOiBJRW9zTm9kZUNvbmZpZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlQ29uZmlnc1tpbmRleF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5vZGVTdGF0KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVTdGF0dXNbaW5kZXhdO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cnlDbGVhbihpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldE5vZGVTdGF0KGluZGV4KTtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgaWYgKG5vZGUuY2xlYW5pbmdfdGltZSA+IHRpbWVzdGFtcCkgcmV0dXJuIG5vZGU7XG4gICAgICAgIGxvZy52ZXJib3NlKCdleGVjdXRlIGNsZWFuICcsIG5vZGUpO1xuICAgICAgICBub2RlLmVycm9yX2NvdW50cyA9IE1hdGgubWF4KDAsIG5vZGUuZXJyb3JfY291bnRzIC0gMSk7XG4gICAgICAgIG5vZGUudG90YWxfY291bnRzID0gTWF0aC5tYXgoMSwgbm9kZS50b3RhbF9jb3VudHMgLSAxKTtcbiAgICAgICAgbm9kZS5jb250aW51b3VzX2ZhaWx1cmUgPSBNYXRoLm1heCgwLCBub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSAtIDEpO1xuICAgICAgICBub2RlLnJlc3BvbnNlX2ludGVydmFsID0gTWF0aC5tYXgoMCwgbm9kZS5yZXNwb25zZV9pbnRlcnZhbCAtICh0aGlzLl9vcHRpb25zLnJlc3BvbnNlSW50ZXJ2YWxEZWNsaW5lIHx8IDEwMDApKTtcbiAgICAgICAgbm9kZS5jbGVhbmluZ190aW1lID0gdGltZXN0YW1wICsgKHRoaXMuX29wdGlvbnMuY2xlYW5pbmdUaW1lSW50ZXJ2YWwgfHwgNjAwMDApO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q3VyTm9kZUNvbmYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVDb25mKHRoaXMuX2N1cnJlbnROb2RlSW5kZXgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDdXJOb2RlU3RhdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZVN0YXQodGhpcy5fY3VycmVudE5vZGVJbmRleCk7XG4gICAgfVxuXG4gICAgcHVibGljIG1hcmtTZW5kU3VjY2VzcyhzdGFydFRpbWVzdGFtcDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldEN1ck5vZGVTdGF0KCk7XG4gICAgICAgIGNvbnN0IG5vdyA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnN0IHRpbWVEZWx0YSA9IG5vdyAtIHN0YXJ0VGltZXN0YW1wO1xuICAgICAgICBub2RlLnJlc3BvbnNlX2ludGVydmFsID0gKG5vZGUucmVzcG9uc2VfaW50ZXJ2YWwgKyB0aW1lRGVsdGEpIC8gMjsgLy8g55u45bqU5pe26Ze05YWs5byPOiBhW2ldID0gKHRbaV0gKyBhW2ktMV0pIC8gMlxuICAgICAgICBub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSA9IDA7XG4gICAgICAgIG5vZGUuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIG5vZGUuY2xlYW5pbmdfdGltZSA9IG5vdyArICh0aGlzLl9vcHRpb25zLmNsZWFuaW5nVGltZUludGVydmFsIHx8IDE4MDAwMCk7XG4gICAgICAgIG5vZGUudG90YWxfY291bnRzICs9IDE7XG4gICAgICAgIG5vZGUucmVjb3JkX3RvdGFsX3N1Y2Nlc3MgPSAobm9kZS5yZWNvcmRfdG90YWxfc3VjY2VzcyB8fCAwKSArIDE7XG4gICAgICAgIG5vZGUucmVjb3JkX3RvdGFsX2NvdW50cyA9IChub2RlLnJlY29yZF90b3RhbF9jb3VudHMgfHwgMCkgKyAgMTtcbiAgICAgICAgbG9nLnZlcmJvc2UoJ3NlbmQgc3VjY2VlZCA+ICcsIG5vZGUuY29udGludW91c19mYWlsdXJlLCBub2RlLmVycm9yX2NvdW50cywgbm9kZS50b3RhbF9jb3VudHMpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWFya1NlbmRGYWlsZWQoc3RhcnRUaW1lc3RhbXA6IG51bWJlcikge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXRDdXJOb2RlU3RhdCgpO1xuICAgICAgICBub2RlLmVycm9yX2NvdW50cyArPSAxO1xuICAgICAgICBub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSArPSAxO1xuICAgICAgICBub2RlLnJldml2YWxfdGltZSA9IHN0YXJ0VGltZXN0YW1wICsgKHRoaXMuX29wdGlvbnMucmV2aXZhbFRpbWVJbnRlcnZhbCB8fCAxODAwMDApO1xuICAgICAgICBub2RlLnRvdGFsX2NvdW50cyArPSAxO1xuICAgICAgICBub2RlLnJlY29yZF90b3RhbF9mYWlsZWQgPSAobm9kZS5yZWNvcmRfdG90YWxfZmFpbGVkIHx8IDApICsgMTtcbiAgICAgICAgbm9kZS5yZWNvcmRfdG90YWxfY291bnRzID0gKG5vZGUucmVjb3JkX3RvdGFsX2NvdW50cyB8fCAwKSArIDE7XG4gICAgICAgIGxvZy52ZXJib3NlKCdzZW5kIGZhaWxlZCA+ICcsIG5vZGUuY29udGludW91c19mYWlsdXJlLCBub2RlLmVycm9yX2NvdW50cywgbm9kZS50b3RhbF9jb3VudHMpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbn0iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDaGFpbkhlbHBlciBmcm9tICcuLi8uLi9oZWxwZXJzL2NoYWluJztcbmltcG9ydCB7SVNpZ25QbHVnaW4sIFZhbGlkYXRlRGVsZWdhdGV9IGZyb20gJy4uL2ludGVyZmFjZSc7XG5cbi8qKlxuICogTXlrZXkgcGx1Z2lucyBoZWxwIHRvIHNpZ24gYW5kIHZhbGlkYXRlIHNpZ25hdHVyZVxuICovXG5leHBvcnQgY2xhc3MgTXlrZXlQbHVnaW4gaW1wbGVtZW50cyBJU2lnblBsdWdpbiB7XG5cbiAgICAvKipcbiAgICAgKiBpbml0aWF0ZSB3aXRoIHRoZSBjaGFpbiBoZWxwZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLHN0cmluZz59IGNvbmZpZyAtIGRlZmF1bHQ6IHttZ3Jjb250cmFjdDogJ215a2V5bWFuYWdlcid9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnID0ge1xuICAgICAgICAgICAgbWdyY29udHJhY3Q6ICdteWtleW1hbmFnZXInLFxuICAgICAgICB9KSB7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFNpZ25LZXkoYWNjb3VudDogc3RyaW5nLCBjaGFpbjogQ2hhaW5IZWxwZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBzaWduS2V5VGFibGVOYW1lID0gJ2tleWRhdGEnO1xuICAgICAgICBjb25zdCBzaWduS2V5SW5kZXggPSAzO1xuICAgICAgICBjb25zdCBrZXlPYmplY3QgPSBhd2FpdCBjaGFpbi5nZXRUYWJsZUFsbChcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLm1ncmNvbnRyYWN0LFxuICAgICAgICAgICAgc2lnbktleVRhYmxlTmFtZSxcbiAgICAgICAgICAgIGFjY291bnQsXG4gICAgICAgICAgICBzaWduS2V5SW5kZXgsXG4gICAgICAgICAgICBzaWduS2V5SW5kZXggKyAxLFxuICAgICAgICApO1xuICAgICAgICBpZiAoIWtleU9iamVjdCkgcmV0dXJuICcnO1xuXG4gICAgICAgIHJldHVybiBrZXlPYmplY3RbMF0ua2V5LnB1YmtleTtcbiAgICB9XG5cbiAgICBnZXQgcGVybSgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlnLm1ncmNvbnRyYWN0fUBhY3RpdmVgO1xuICAgIH1cblxuICAgIGdldCBzaWduS2V5UHJvdmlkZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbdGhpcy5wZXJtXTpcbiAgICAgICAgICAgICAgICBhc3luYyAoYWNjb3VudDogc3RyaW5nLCBjaGFpbjogQ2hhaW5IZWxwZXIpID0+XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0U2lnbktleShhY2NvdW50LCBjaGFpbiksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0IHZhbGlkYXRvclByb3ZpZGVyKCk6IHsgW3Blcm06IHN0cmluZ106IFZhbGlkYXRlRGVsZWdhdGUgfSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbdGhpcy5wZXJtXTogYXN5bmMgKGFjY291bnQ6IHN0cmluZywgcmVjb3ZlcktleTogc3RyaW5nLCBjaGFpbjogQ2hhaW5IZWxwZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwdWJrZXkgPSBhd2FpdCB0aGlzLmdldFNpZ25LZXkoYWNjb3VudCwgY2hhaW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwdWJrZXkgPT09IHJlY292ZXJLZXk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9
!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,e){if(!w[t]||!b[t])return;for(var n in b[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(d[n]=e[n]);0==--g&&0===m&&B()}(t,n),e&&e(t,n)};var n,r=!0,i="c5861768196bc7775f53",o=1e4,u={},s=[],a=[];function f(t){var e=F[t];if(!e)return x;var r=function(r){return e.hot.active?(F[r]?-1===F[r].parents.indexOf(t)&&F[r].parents.push(t):(s=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),s=[]),x(r)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return x[t]},set:function(e){x[t]=e}}};for(var o in x)Object.prototype.hasOwnProperty.call(x,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(t){return"ready"===h&&l("prepare"),m++,x.e(t).then(e,function(t){throw e(),t});function e(){m--,"prepare"===h&&(v[t]||A(t),0===m&&0===g&&B())}},r.t=function(t,e){return 1&e&&(t=r(t)),x.t(t,-2&e)},r}var c=[],h="idle";function l(t){h=t;for(var e=0;e<c.length;e++)c[e].call(null,t)}var p,d,y,g=0,m=0,v={},b={},w={};function _(t){return+t+""===t?+t:t}function E(t){if("idle"!==h)throw new Error("check() is only allowed in idle status");return r=t,l("check"),function(t){return t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=x.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void n(t)}e(t)}}})}(o).then(function(t){if(!t)return l("idle"),null;b={},v={},w=t.c,y=t.h,l("prepare");var e=new Promise(function(t,e){p={resolve:t,reject:e}});d={};return A(0),"prepare"===h&&0===m&&0===g&&B(),e})}function A(t){w[t]?(b[t]=!0,g++,function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=x.p+""+t+"."+i+".hot-update.js",e.appendChild(n)}(t)):v[t]=!0}function B(){l("ready");var t=p;if(p=null,t)if(r)Promise.resolve().then(function(){return C(r)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in d)Object.prototype.hasOwnProperty.call(d,n)&&e.push(_(n));t.resolve(e)}}function C(e){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var n,r,o,a,f;function c(t){for(var e=[t],n={},r=e.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var i=r.pop(),o=i.id,u=i.chain;if((a=F[o])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:u,moduleId:o};if(a.hot._main)return{type:"unaccepted",chain:u,moduleId:o};for(var s=0;s<a.parents.length;s++){var f=a.parents[s],c=F[f];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:u.concat([f]),moduleId:o,parentId:f};-1===e.indexOf(f)&&(c.hot._acceptedDependencies[o]?(n[f]||(n[f]=[]),p(n[f],[o])):(delete n[f],e.push(f),r.push({chain:u.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}e=e||{};var g={},m=[],v={},b=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var E in d)if(Object.prototype.hasOwnProperty.call(d,E)){var A;f=_(E);var B=!1,C=!1,S=!1,D="";switch((A=d[E]?c(f):{type:"disposed",moduleId:E}).chain&&(D="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":e.onDeclined&&e.onDeclined(A),e.ignoreDeclined||(B=new Error("Aborted because of self decline: "+A.moduleId+D));break;case"declined":e.onDeclined&&e.onDeclined(A),e.ignoreDeclined||(B=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+D));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(A),e.ignoreUnaccepted||(B=new Error("Aborted because "+f+" is not accepted"+D));break;case"accepted":e.onAccepted&&e.onAccepted(A),C=!0;break;case"disposed":e.onDisposed&&e.onDisposed(A),S=!0;break;default:throw new Error("Unexception type "+A.type)}if(B)return l("abort"),Promise.reject(B);if(C)for(f in v[f]=d[f],p(m,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,f)&&(g[f]||(g[f]=[]),p(g[f],A.outdatedDependencies[f]));S&&(p(m,[A.moduleId]),v[f]=b)}var k,T=[];for(r=0;r<m.length;r++)f=m[r],F[f]&&F[f].hot._selfAccepted&&T.push({module:f,errorHandler:F[f].hot._selfAccepted});l("dispose"),Object.keys(w).forEach(function(t){!1===w[t]&&function(t){delete installedChunks[t]}(t)});for(var I,M,O=m.slice();O.length>0;)if(f=O.pop(),a=F[f]){var j={},R=a.hot._disposeHandlers;for(o=0;o<R.length;o++)(n=R[o])(j);for(u[f]=j,a.hot.active=!1,delete F[f],delete g[f],o=0;o<a.children.length;o++){var L=F[a.children[o]];L&&((k=L.parents.indexOf(f))>=0&&L.parents.splice(k,1))}}for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(a=F[f]))for(M=g[f],o=0;o<M.length;o++)I=M[o],(k=a.children.indexOf(I))>=0&&a.children.splice(k,1);for(f in l("apply"),i=y,v)Object.prototype.hasOwnProperty.call(v,f)&&(t[f]=v[f]);var N=null;for(f in g)if(Object.prototype.hasOwnProperty.call(g,f)&&(a=F[f])){M=g[f];var P=[];for(r=0;r<M.length;r++)if(I=M[r],n=a.hot._acceptedDependencies[I]){if(-1!==P.indexOf(n))continue;P.push(n)}for(r=0;r<P.length;r++){n=P[r];try{n(M)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:f,dependencyId:M[r],error:t}),e.ignoreErrored||N||(N=t)}}}for(r=0;r<T.length;r++){var U=T[r];f=U.module,s=[f];try{x(f)}catch(t){if("function"==typeof U.errorHandler)try{U.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:f,error:n,originalError:t}),e.ignoreErrored||N||(N=n),N||(N=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:f,error:t}),e.ignoreErrored||N||(N=t)}}return N?(l("fail"),Promise.reject(N)):(l("idle"),new Promise(function(t){t(m)}))}var F={};function x(e){if(F[e])return F[e].exports;var r=F[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:E,apply:C,status:function(t){if(!t)return h;c.push(t)},addStatusHandler:function(t){c.push(t)},removeStatusHandler:function(t){var e=c.indexOf(t);e>=0&&c.splice(e,1)},data:u[t]};return n=void 0,e}(e),parents:(a=s,s=[],a),children:[]};return t[e].call(r.exports,r,r.exports,f(e)),r.l=!0,r.exports}x.m=t,x.c=F,x.d=function(t,e,n){x.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},x.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},x.t=function(t,e){if(1&e&&(t=x(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(x.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)x.d(n,r,function(e){return t[e]}.bind(null,r));return n},x.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return x.d(e,"a",e),e},x.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},x.p="",x.h=function(){return i},f(121)(x.s=121)}([function(t,e,n){var r=n(2),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function u(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=u),o(i,u),u.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},u.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},u.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},u.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(153),i=n(154),o=n(83);function u(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,n){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,n)}function f(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!a.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(a.isBuffer(e)){var n=0|p(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?s(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=s(t,e<0?0:0|p(e)),!a.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|p(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function d(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(t).length;default:if(r)return U(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=a.from(e,r)),a.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,u=1,s=t.length,a=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,s/=2,a/=2,n/=2}function f(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(i){var c=-1;for(o=n;o<s;o++)if(f(t,o)===f(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===a)return c*u}else-1!==c&&(o-=o-c),c=-1}else for(n+a>s&&(n=s-a),o=n;o>=0;o--){for(var h=!0,l=0;l<a;l++)if(f(t,o+l)!==f(e,l)){h=!1;break}if(h)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var u=0;u<r;++u){var s=parseInt(e.substr(2*u,2),16);if(isNaN(s))return u;t[n+u]=s}return u}function b(t,e,n,r){return z(U(e,t.length-n),t,n,r)}function w(t,e,n,r){return z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function _(t,e,n,r){return w(t,e,n,r)}function E(t,e,n,r){return z(q(e),t,n,r)}function A(t,e,n,r){return z(function(t,e){for(var n,r,i,o=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function B(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function C(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,u,s,a,f=t[i],c=null,h=f>239?4:f>223?3:f>191?2:1;if(i+h<=n)switch(h){case 1:f<128&&(c=f);break;case 2:128==(192&(o=t[i+1]))&&(a=(31&f)<<6|63&o)>127&&(c=a);break;case 3:o=t[i+1],u=t[i+2],128==(192&o)&&128==(192&u)&&(a=(15&f)<<12|(63&o)<<6|63&u)>2047&&(a<55296||a>57343)&&(c=a);break;case 4:o=t[i+1],u=t[i+2],s=t[i+3],128==(192&o)&&128==(192&u)&&128==(192&s)&&(a=(15&f)<<18|(63&o)<<12|(63&u)<<6|63&s)>65535&&a<1114112&&(c=a)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=h}return function(t){var e=t.length;if(e<=F)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=F));return n}(r)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=u(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,n){return f(null,t,e,n)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},a.allocUnsafe=function(t){return h(null,t)},a.allocUnsafeSlow=function(t){return h(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=a.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var u=t[n];if(!a.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,i),i+=u.length}return r},a.byteLength=d,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return D(this,e,n);case"utf8":case"utf-8":return C(this,e,n);case"ascii":return x(this,e,n);case"latin1":case"binary":return S(this,e,n);case"base64":return B(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,n,r,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,u=n-e,s=Math.min(o,u),f=this.slice(r,i),c=t.slice(e,n),h=0;h<s;++h)if(f[h]!==c[h]){o=f[h],u=c[h];break}return o<u?-1:u<o?1:0},a.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},a.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},a.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},a.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return _(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var F=4096;function x(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function S(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function D(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=P(t[o]);return i}function k(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function T(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,n,r,i,o){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function O(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function j(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(t,e,n,r,o){return o||j(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,o){return o||j(t,0,n,8),i.write(t,e,n,r,52,8),n+8}a.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;n=new a(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},a.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},a.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},a.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},a.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||T(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},a.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},a.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):O(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);I(this,t,e,n,i-1,-i)}var o=0,u=1,s=0;for(this[e]=255&t;++o<n&&(u*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/u>>0)-s&255;return e+n},a.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);I(this,t,e,n,i-1,-i)}var o=n-1,u=1,s=0;for(this[e+o]=255&t;--o>=0&&(u*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/u>>0)-s&255;return e+n},a.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):O(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,n){return R(this,t,e,!0,n)},a.prototype.writeFloatBE=function(t,e,n){return R(this,t,e,!1,n)},a.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},a.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},a.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},a.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var u=a.isBuffer(t)?t:U(new a(t,r).toString()),s=u.length;for(o=0;o<n-e;++o)this[o+e]=u[o%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function P(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],u=0;u<r;++u){if((n=t.charCodeAt(u))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function q(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(6))},function(t,e,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function r(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var o=n(177),u=Object.prototype.hasOwnProperty,s=Array.prototype.slice,a="foo"===function(){}.name;function f(t){return Object.prototype.toString.call(t)}function c(t){return!i(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var h=t.exports=m,l=/\s*function\s+([^\(\s]*)\s*/;function p(t){if(o.isFunction(t)){if(a)return t.name;var e=t.toString().match(l);return e&&e[1]}}function d(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function y(t){if(a||!o.isFunction(t))return o.inspect(t);var e=p(t);return"[Function"+(e?": "+e:"")+"]"}function g(t,e,n,r,i){throw new h.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:i})}function m(t,e){t||g(t,!0,e,"==",h.ok)}function v(t,e,n,u){if(t===e)return!0;if(i(t)&&i(e))return 0===r(t,e);if(o.isDate(t)&&o.isDate(e))return t.getTime()===e.getTime();if(o.isRegExp(t)&&o.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(c(t)&&c(e)&&f(t)===f(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===r(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var a=(u=u||{actual:[],expected:[]}).actual.indexOf(t);return-1!==a&&a===u.expected.indexOf(e)||(u.actual.push(t),u.expected.push(e),function(t,e,n,r){if(null===t||void 0===t||null===e||void 0===e)return!1;if(o.isPrimitive(t)||o.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=b(t),u=b(e);if(i&&!u||!i&&u)return!1;if(i)return t=s.call(t),e=s.call(e),v(t,e,n);var a,f,c=E(t),h=E(e);if(c.length!==h.length)return!1;for(c.sort(),h.sort(),f=c.length-1;f>=0;f--)if(c[f]!==h[f])return!1;for(f=c.length-1;f>=0;f--)if(a=c[f],!v(t[a],e[a],n,r))return!1;return!0}(t,e,n,u))}return n?t===e:t==e}function b(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function w(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function _(t,e,n,r){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!i&&g(i,n,"Missing expected exception"+r);var u="string"==typeof r,s=!t&&o.isError(i),a=!t&&i&&!n;if((s&&u&&w(i,n)||a)&&g(i,n,"Got unwanted exception"+r),t&&i&&n&&!w(i,n)||!t&&i)throw i}h.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return d(y(t.actual),128)+" "+t.operator+" "+d(y(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,i=p(e),o=r.indexOf("\n"+i);if(o>=0){var u=r.indexOf("\n",o+1);r=r.substring(u+1)}this.stack=r}}},o.inherits(h.AssertionError,Error),h.fail=g,h.ok=m,h.equal=function(t,e,n){t!=e&&g(t,e,n,"==",h.equal)},h.notEqual=function(t,e,n){t==e&&g(t,e,n,"!=",h.notEqual)},h.deepEqual=function(t,e,n){v(t,e,!1)||g(t,e,n,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(t,e,n){v(t,e,!0)||g(t,e,n,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(t,e,n){v(t,e,!1)&&g(t,e,n,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function t(e,n,r){v(e,n,!0)&&g(e,n,r,"notDeepStrictEqual",t)},h.strictEqual=function(t,e,n){t!==e&&g(t,e,n,"===",h.strictEqual)},h.notStrictEqual=function(t,e,n){t===e&&g(t,e,n,"!==",h.notStrictEqual)},h.throws=function(t,e,n){_(!0,t,e,n)},h.doesNotThrow=function(t,e,n){_(!1,t,e,n)},h.ifError=function(t){if(t)throw t};var E=Object.keys||function(t){var e=[];for(var n in t)u.call(t,n)&&e.push(n);return e}}).call(this,n(6))},function(t,e,n){"use strict";var r=n(113),i=n(239),o=Object.prototype.toString;function u(t){return"[object Array]"===o.call(t)}function s(t){return null!==t&&"object"==typeof t}function a(t){return"[object Function]"===o.call(t)}function f(t,e){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),u(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}t.exports={isArray:u,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:i,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:s,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:a,isStream:function(t){return s(t)&&a(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],n);return e},extend:function(t,e,n){return f(e,function(e,i){t[i]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){var r=n(48)("wks"),i=n(34),o=n(7).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var a,f=[],c=!1,h=-1;function l(){c&&a&&(c=!1,a.length?f=a.concat(f):h=-1,f.length&&p())}function p(){if(!c){var t=s(l);c=!0;for(var e=f.length;e;){for(a=f,f=[];++h<e;)a&&a[h].run();h=-1,e=f.length}a=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new d(t,e)),1!==f.length||c||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(99);n(180),t.exports=r},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(0).Buffer,i=n(90).Transform,o=n(58).StringDecoder;function u(t){i.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(1)(u,i),u.prototype.update=function(t,e,n){"string"==typeof t&&(t=r.from(t,e));var i=this._update(t);return this.hashMode?this:(n&&(i=this._toString(i,n)),i)},u.prototype.setAutoPadding=function(){},u.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},u.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},u.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},u.prototype._transform=function(t,e,n){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{n(r)}},u.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},u.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},u.prototype._toString=function(t,e,n){if(this._decoder||(this._decoder=new o(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return n&&(r+=this._decoder.end()),r},t.exports=u},function(t,e,n){"use strict";var r=n(36),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=h;var o=n(27);o.inherits=n(1);var u=n(91),s=n(57);o.inherits(h,u);for(var a=i(s.prototype),f=0;f<a.length;f++){var c=a[f];h.prototype[c]||(h.prototype[c]=s.prototype[c])}function h(t){if(!(this instanceof h))return new h(t);u.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||r.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";var r=n(61),i=n(187);t.exports={sha1:function(t,e){return r("sha1").update(t).digest(e)},sha256:function(t,e){return r("sha256").update(t).digest(e)},sha512:function(t,e){return r("sha512").update(t).digest(e)},HmacSHA256:function(t,e){return i("sha256",e).update(t).digest()},ripemd160:function(t){return r("rmd160").update(t).digest()}}},function(t,e,n){var r=n(16),i=n(33);t.exports=n(17)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(23),i=n(75),o=n(44),u=Object.defineProperty;e.f=n(17)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(32)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(131),i=n(43);t.exports=function(t){return r(i(t))}},function(t,e,n){var r,i,o;
/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */i=[n(155)],void 0===(o="function"==typeof(r=function(t){"use strict";var e=function(t,n,i){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===n&&(n=e.DEFAULT_ENDIAN),void 0===i&&(i=e.DEFAULT_NOASSERT),!i){if((t|=0)<0)throw RangeError("Illegal capacity");n=!!n,i=!!i}this.buffer=0===t?r:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=n,this.noAssert=i};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var n=e.prototype;n.__isByteBuffer__,Object.defineProperty(n,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var r=new ArrayBuffer(0),i=String.fromCharCode;function o(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function u(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+i.apply(String,t);t.length+arguments.length>1024&&(e.push(i.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function s(t,e,n,r,i){var o,u,s=8*i-r-1,a=(1<<s)-1,f=a>>1,c=-7,h=n?i-1:0,l=n?-1:1,p=t[e+h];for(h+=l,o=p&(1<<-c)-1,p>>=-c,c+=s;c>0;o=256*o+t[e+h],h+=l,c-=8);for(u=o&(1<<-c)-1,o>>=-c,c+=r;c>0;u=256*u+t[e+h],h+=l,c-=8);if(0===o)o=1-f;else{if(o===a)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),o-=f}return(p?-1:1)*u*Math.pow(2,o-r)}function a(t,e,n,r,i,o){var u,s,a,f=8*o-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-u))<1&&(u--,a*=2),(e+=u+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(s=0,u=c):u+h>=1?(s=(e*a-1)*Math.pow(2,i),u+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),u=0));i>=8;t[n+p]=255&s,p+=d,s/=256,i-=8);for(u=u<<i|s,f+=i;f>0;t[n+p]=255&u,p+=d,u/=256,f-=8);t[n+p-d]|=128*y}e.accessor=function(){return Uint8Array},e.allocate=function(t,n,r){return new e(t,n,r)},e.concat=function(t,n,r,i){"boolean"!=typeof n&&"string"==typeof n||(i=r,r=n,n=void 0);for(var o,u=0,s=0,a=t.length;s<a;++s)e.isByteBuffer(t[s])||(t[s]=e.wrap(t[s],n)),(o=t[s].limit-t[s].offset)>0&&(u+=o);if(0===u)return new e(0,r,i);var f,c=new e(u,r,i);for(s=0;s<a;)(o=(f=t[s++]).limit-f.offset)<=0||(c.view.set(f.view.subarray(f.offset,f.limit),c.offset),c.offset+=o);return c.limit=c.offset,c.offset=0,c},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,r,i,o){if("string"!=typeof r&&(o=i,i=r,r=void 0),"string"==typeof t)switch(void 0===r&&(r="utf8"),r){case"base64":return e.fromBase64(t,i);case"hex":return e.fromHex(t,i);case"binary":return e.fromBinary(t,i);case"utf8":return e.fromUTF8(t,i);case"debug":return e.fromDebug(t,i);default:throw Error("Unsupported encoding: "+r)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var u;if(e.isByteBuffer(t))return(u=n.clone.call(t)).markedOffset=-1,u;if(t instanceof Uint8Array)u=new e(0,i,o),t.length>0&&(u.buffer=t.buffer,u.offset=t.byteOffset,u.limit=t.byteOffset+t.byteLength,u.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)u=new e(0,i,o),t.byteLength>0&&(u.buffer=t,u.offset=0,u.limit=t.byteLength,u.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(u=new e(t.length,i,o)).limit=t.length;for(var s=0;s<t.length;++s)u.view[s]=t[s]}return u},n.writeBitSet=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,i=e,o=t.length,u=o>>3,s=0;for(e+=this.writeVarint32(o,e);u--;)r=1&!!t[s++]|(1&!!t[s++])<<1|(1&!!t[s++])<<2|(1&!!t[s++])<<3|(1&!!t[s++])<<4|(1&!!t[s++])<<5|(1&!!t[s++])<<6|(1&!!t[s++])<<7,this.writeByte(r,e++);if(s<o){var a=0;for(r=0;s<o;)r|=(1&!!t[s++])<<a++;this.writeByte(r,e++)}return n?(this.offset=e,this):e-i},n.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var n,r=this.readVarint32(t),i=r.value,o=i>>3,u=0,s=[];for(t+=r.length;o--;)n=this.readByte(t++),s[u++]=!!(1&n),s[u++]=!!(2&n),s[u++]=!!(4&n),s[u++]=!!(8&n),s[u++]=!!(16&n),s[u++]=!!(32&n),s[u++]=!!(64&n),s[u++]=!!(128&n);if(u<i){var a=0;for(n=this.readByte(t++);u<i;)s[u++]=!!(n>>a++&1)}return e&&(this.offset=t),s},n.readBytes=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var r=this.slice(e,e+t);return n&&(this.offset+=t),r},n.writeBytes=n.append,n.writeInt8=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,n&&(this.offset+=1),this},n.writeByte=n.writeInt8,n.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=this.view[t];return 128==(128&n)&&(n=-(255-n+1)),e&&(this.offset+=1),n},n.readByte=n.readInt8,n.writeUint8=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,n&&(this.offset+=1),this},n.writeUInt8=n.writeUint8,n.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=this.view[t];return e&&(this.offset+=1),n},n.readUInt8=n.readUint8,n.writeInt16=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),n&&(this.offset+=2),this},n.writeShort=n.writeInt16,n.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t],n|=this.view[t+1]<<8):(n=this.view[t]<<8,n|=this.view[t+1]),32768==(32768&n)&&(n=-(65535-n+1)),e&&(this.offset+=2),n},n.readShort=n.readInt16,n.writeUint16=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),n&&(this.offset+=2),this},n.writeUInt16=n.writeUint16,n.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t],n|=this.view[t+1]<<8):(n=this.view[t]<<8,n|=this.view[t+1]),e&&(this.offset+=2),n},n.readUInt16=n.readUint16,n.writeInt32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),n&&(this.offset+=4),this},n.writeInt=n.writeInt32,n.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0):(n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0),n|=0,e&&(this.offset+=4),n},n.readInt=n.readInt32,n.writeUint32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),n&&(this.offset+=4),this},n.writeUInt32=n.writeUint32,n.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0):(n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0),e&&(this.offset+=4),n},n.readUInt32=n.readUint32,t&&(n.writeInt64=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=e.low,u=e.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=u>>>24&255,this.view[n+2]=u>>>16&255,this.view[n+1]=u>>>8&255,this.view[n]=255&u):(this.view[n]=u>>>24&255,this.view[n+1]=u>>>16&255,this.view[n+2]=u>>>8&255,this.view[n+3]=255&u,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeLong=n.writeInt64,n.readInt64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var o=new t(r,i,!1);return n&&(this.offset+=8),o},n.readLong=n.readInt64,n.writeUint64=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=e.low,u=e.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=u>>>24&255,this.view[n+2]=u>>>16&255,this.view[n+1]=u>>>8&255,this.view[n]=255&u):(this.view[n]=u>>>24&255,this.view[n+1]=u>>>16&255,this.view[n+2]=u>>>8&255,this.view[n+3]=255&u,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeUInt64=n.writeUint64,n.readUint64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0):(i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var o=new t(r,i,!0);return n&&(this.offset+=8),o},n.readUInt64=n.readUint64),n.writeFloat32=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,a(this.view,t,e,this.littleEndian,23,4),n&&(this.offset+=4),this},n.writeFloat=n.writeFloat32,n.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var n=s(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),n},n.readFloat=n.readFloat32,n.writeFloat64=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=8,a(this.view,t,e,this.littleEndian,52,8),n&&(this.offset+=8),this},n.writeDouble=n.writeFloat64,n.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var n=s(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),n},n.readDouble=n.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},n.writeVarint32=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,o=e.calculateVarint32(t);n+=o;var u=this.buffer.byteLength;for(n>u&&this.resize((u*=2)>n?u:n),n-=o,t>>>=0;t>=128;)i=127&t|128,this.view[n++]=i,t>>>=7;return this.view[n++]=t,r?(this.offset=n,this):o},n.writeVarint32ZigZag=function(t,n){return this.writeVarint32(e.zigZagEncode32(t),n)},n.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n,r=0,i=0;do{if(!this.noAssert&&t>this.limit){var o=Error("Truncated");throw o.truncated=!0,o}n=this.view[t++],r<5&&(i|=(127&n)<<7*r),++r}while(0!=(128&n));return i|=0,e?(this.offset=t,i):{value:i,length:r}},n.readVarint32ZigZag=function(t){var n=this.readVarint32(t);return"object"==typeof n?n.value=e.zigZagDecode32(n.value):n=e.zigZagDecode32(n),n},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var n=e.toInt()>>>0,r=e.shiftRightUnsigned(28).toInt()>>>0,i=e.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==r?n<16384?n<128?1:2:n<1<<21?3:4:r<16384?r<128?5:6:r<1<<21?7:8:i<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},n.writeVarint64=function(n,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof n)n=t.fromNumber(n);else if("string"==typeof n)n=t.fromString(n);else if(!(n&&n instanceof t))throw TypeError("Illegal value: "+n+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof n?n=t.fromNumber(n,!1):"string"==typeof n?n=t.fromString(n,!1):!1!==n.unsigned&&(n=n.toSigned());var o=e.calculateVarint64(n),u=n.toInt()>>>0,s=n.shiftRightUnsigned(28).toInt()>>>0,a=n.shiftRightUnsigned(56).toInt()>>>0;r+=o;var f=this.buffer.byteLength;switch(r>f&&this.resize((f*=2)>r?f:r),r-=o,o){case 10:this.view[r+9]=a>>>7&1;case 9:this.view[r+8]=9!==o?128|a:127&a;case 8:this.view[r+7]=8!==o?s>>>21|128:s>>>21&127;case 7:this.view[r+6]=7!==o?s>>>14|128:s>>>14&127;case 6:this.view[r+5]=6!==o?s>>>7|128:s>>>7&127;case 5:this.view[r+4]=5!==o?128|s:127&s;case 4:this.view[r+3]=4!==o?u>>>21|128:u>>>21&127;case 3:this.view[r+2]=3!==o?u>>>14|128:u>>>14&127;case 2:this.view[r+1]=2!==o?u>>>7|128:u>>>7&127;case 1:this.view[r]=1!==o?128|u:127&u}return i?(this.offset+=o,this):o},n.writeVarint64ZigZag=function(t,n){return this.writeVarint64(e.zigZagEncode64(t),n)},n.readVarint64=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=e,i=0,o=0,u=0,s=0;if(s=this.view[e++],i=127&s,128&s&&(s=this.view[e++],i|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],i|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<7,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<14,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],o|=(127&s)<<21,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u=127&s,(128&s||this.noAssert&&void 0===s)&&(s=this.view[e++],u|=(127&s)<<7,128&s||this.noAssert&&void 0===s))))))))))throw Error("Buffer overrun");var a=t.fromBits(i|o<<28,o>>>4|u<<24,!1);return n?(this.offset=e,a):{value:a,length:e-r}},n.readVarint64ZigZag=function(n){var r=this.readVarint64(n);return r&&r.value instanceof t?r.value=e.zigZagDecode64(r.value):r=e.zigZagDecode64(r),r}),n.writeCString=function(t,e){var n=void 0===e;n&&(e=this.offset);var r,i=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(r=0;r<i;++r)if(0===t.charCodeAt(r))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}i=c.calculateUTF16asUTF8(o(t))[1],e+=i+1;var u=this.buffer.byteLength;return e>u&&this.resize((u*=2)>e?u:e),e-=i+1,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,n?(this.offset=e,this):i},n.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n,r=t,i=-1;return c.decodeUTF8toUTF16(function(){if(0===i)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(i=this.view[t++])?null:i}.bind(this),n=u(),!0),e?(this.offset=t,n()):{string:n(),length:t-r}},n.writeIString=function(t,e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,i=e;r=c.calculateUTF16asUTF8(o(t),this.noAssert)[1],e+=4+r;var u=this.buffer.byteLength;if(e>u&&this.resize((u*=2)>e?u:e),e-=4+r,this.littleEndian?(this.view[e+3]=r>>>24&255,this.view[e+2]=r>>>16&255,this.view[e+1]=r>>>8&255,this.view[e]=255&r):(this.view[e]=r>>>24&255,this.view[e+1]=r>>>16&255,this.view[e+2]=r>>>8&255,this.view[e+3]=255&r),e+=4,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),e!==i+4+r)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+r));return n?(this.offset=e,this):e-i},n.readIString=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=t,i=this.readUint32(t),o=this.readUTF8String(i,e.METRICS_BYTES,t+=4);return t+=o.length,n?(this.offset=t,o.string):{string:o.string,length:t-r}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",n.writeUTF8String=function(t,e){var n,r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i=e;n=c.calculateUTF16asUTF8(o(t))[1],e+=n;var u=this.buffer.byteLength;return e>u&&this.resize((u*=2)>e?u:e),e-=n,c.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),r?(this.offset=e,this):e-i},n.writeString=n.writeUTF8String,e.calculateUTF8Chars=function(t){return c.calculateUTF16asUTF8(o(t))[0]},e.calculateUTF8Bytes=function(t){return c.calculateUTF16asUTF8(o(t))[1]},e.calculateString=e.calculateUTF8Bytes,n.readUTF8String=function(t,n,r){"number"==typeof n&&(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),void 0===n&&(n=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var o,s=0,a=r;if(n===e.METRICS_CHARS){if(o=u(),c.decodeUTF8(function(){return s<t&&r<this.limit?this.view[r++]:null}.bind(this),function(t){++s,c.UTF8toUTF16(t,o)}),s!==t)throw RangeError("Illegal range: Truncated data, "+s+" == "+t);return i?(this.offset=r,o()):{string:o(),length:r-a}}if(n===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+"+t+") <= "+this.buffer.byteLength)}var f=r+t;if(c.decodeUTF8toUTF16(function(){return r<f?this.view[r++]:null}.bind(this),o=u(),this.noAssert),r!==f)throw RangeError("Illegal range: Truncated data, "+r+" == "+f);return i?(this.offset=r,o()):{string:o(),length:r-a}}throw TypeError("Unsupported metrics: "+n)},n.readString=n.readUTF8String,n.writeVString=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,u,s=n;i=c.calculateUTF16asUTF8(o(t),this.noAssert)[1],u=e.calculateVarint32(i),n+=u+i;var a=this.buffer.byteLength;if(n>a&&this.resize((a*=2)>n?a:n),n-=u+i,n+=this.writeVarint32(i,n),c.encodeUTF16toUTF8(o(t),function(t){this.view[n++]=t}.bind(this)),n!==s+i+u)throw RangeError("Illegal range: Truncated data, "+n+" == "+(n+i+u));return r?(this.offset=n,this):n-s},n.readVString=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=t,i=this.readVarint32(t),o=this.readUTF8String(i.value,e.METRICS_BYTES,t+=i.length);return t+=o.length,n?(this.offset=t,o.string):{string:o.string,length:t-r}},n.append=function(t,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,n));var o=t.limit-t.offset;if(o<=0)return this;r+=o;var u=this.buffer.byteLength;return r>u&&this.resize((u*=2)>r?u:r),r-=o,this.view.set(t.view.subarray(t.offset,t.limit),r),t.offset+=o,i&&(this.offset+=o),this},n.appendTo=function(t,e){return t.append(this,e),this},n.assert=function(t){return this.noAssert=!t,this},n.capacity=function(){return this.buffer.byteLength},n.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},n.clone=function(t){var n=new e(0,this.littleEndian,this.noAssert);return t?(n.buffer=new ArrayBuffer(this.buffer.byteLength),n.view=new Uint8Array(n.buffer)):(n.buffer=this.buffer,n.view=this.view),n.offset=this.offset,n.markedOffset=this.markedOffset,n.limit=this.limit,n},n.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var n=e-t;if(0===n)return this.buffer=r,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(n),o=new Uint8Array(i);return o.set(this.view.subarray(t,e)),this.buffer=i,this.view=o,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=n,this},n.copy=function(t,n){if(void 0===t&&(t=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(t===n)return new e(0,this.littleEndian,this.noAssert);var r=n-t,i=new e(r,this.littleEndian,this.noAssert);return i.offset=0,i.limit=r,i.markedOffset>=0&&(i.markedOffset-=t),this.copyTo(i,0,t,n),i},n.copyTo=function(t,n,r,i){var o,u;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(n=(u=void 0===n)?t.offset:0|n,r=(o=void 0===r)?this.offset:0|r,i=void 0===i?this.limit:0|i,n<0||n>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+n+" <= "+t.buffer.byteLength);if(r<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+r+" <= "+this.buffer.byteLength);var s=i-r;return 0===s?t:(t.ensureCapacity(n+s),t.view.set(this.view.subarray(r,i),n),o&&(this.offset+=s),u&&(t.offset+=s),this)},n.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},n.fill=function(t,e,n){var r=void 0===e;if(r&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(e>=n)return this;for(;e<n;)this.view[e++]=t;return r&&(this.offset=e),this},n.flip=function(){return this.limit=this.offset,this.offset=0,this},n.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},n.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},n.LE=function(t){return this.littleEndian=void 0===t||!!t,this},n.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},n.prepend=function(t,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,n));var o=t.limit-t.offset;if(o<=0)return this;var u=o-r;if(u>0){var s=new ArrayBuffer(this.buffer.byteLength+u),a=new Uint8Array(s);a.set(this.view.subarray(r,this.buffer.byteLength),o),this.buffer=s,this.view=a,this.offset+=u,this.markedOffset>=0&&(this.markedOffset+=u),this.limit+=u,r+=u}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),r-o),t.offset=t.limit,i&&(this.offset-=o),this},n.prependTo=function(t,e){return t.prepend(this,e),this},n.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},n.remaining=function(){return this.limit-this.offset},n.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},n.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),n=new Uint8Array(e);n.set(this.view),this.buffer=e,this.view=n}return this},n.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e?this:(Array.prototype.reverse.call(this.view.subarray(t,e)),this)},n.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},n.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var n=this.clone();return n.offset=t,n.limit=e,n},n.toBuffer=function(t){var e=this.offset,n=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal limit: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(!t&&0===e&&n===this.buffer.byteLength)return this.buffer;if(e===n)return r;var i=new ArrayBuffer(n-e);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(e,n),0),i},n.toArrayBuffer=n.toBuffer,n.toString=function(t,e,n){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(n=e=t="utf8"),t){case"utf8":return this.toUTF8(e,n);case"base64":return this.toBase64(e,n);case"hex":return this.toHex(e,n);case"binary":return this.toBinary(e,n);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var f=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],n=[],r=0,i=e.length;r<i;++r)n[e[r]]=r;return t.encode=function(t,n){for(var r,i;null!==(r=t());)n(e[r>>2&63]),i=(3&r)<<4,null!==(r=t())?(n(e[63&((i|=r>>4&15)|r>>4&15)]),i=(15&r)<<2,null!==(r=t())?(n(e[63&(i|r>>6&3)]),n(e[63&r])):(n(e[63&i]),n(61))):(n(e[63&i]),n(61),n(61))},t.decode=function(t,e){var r,i,o;function u(t){throw Error("Illegal character code: "+t)}for(;null!==(r=t());)if(void 0===(i=n[r])&&u(r),null!==(r=t())&&(void 0===(o=n[r])&&u(r),e(i<<2>>>0|(48&o)>>4),null!==(r=t()))){if(void 0===(i=n[r])){if(61===r)break;u(r)}if(e((15&o)<<4>>>0|(60&i)>>2),null!==(r=t())){if(void 0===(o=n[r])){if(61===r)break;u(r)}e((3&i)<<6>>>0|o)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();n.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var n;return f.encode(function(){return t<e?this.view[t++]:null}.bind(this),n=u()),n()},e.fromBase64=function(t,n){if("string"!=typeof t)throw TypeError("str");var r=new e(t.length/4*3,n),i=0;return f.decode(o(t),function(t){r.view[i++]=t}),r.limit=i,r},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},n.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var n=[],r=[];t<e;)n.push(this.view[t++]),n.length>=1024&&(r.push(String.fromCharCode.apply(String,n)),n=[]);return r.join("")+String.fromCharCode.apply(String,n)},e.fromBinary=function(t,n){if("string"!=typeof t)throw TypeError("str");for(var r,i=0,o=t.length,u=new e(o,n);i<o;){if((r=t.charCodeAt(i))>255)throw RangeError("illegal char code: "+r);u.view[i++]=r}return u.limit=o,u},n.toDebug=function(t){for(var e,n=-1,r=this.buffer.byteLength,i="",o="",u="";n<r;){if(-1!==n&&(e=this.view[n],i+=e<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(o+=e>32&&e<127?String.fromCharCode(e):".")),++n,t&&n>0&&n%16==0&&n!==r){for(;i.length<51;)i+=" ";u+=i+o+"\n",i=o=""}n===this.offset&&n===this.limit?i+=n===this.markedOffset?"!":"|":n===this.offset?i+=n===this.markedOffset?"[":"<":n===this.limit?i+=n===this.markedOffset?"]":">":i+=n===this.markedOffset?"'":t||0!==n&&n!==r?" ":""}if(t&&" "!==i){for(;i.length<51;)i+=" ";u+=i+o+"\n"}return t?u:i},e.fromDebug=function(t,n,r){for(var i,o,u=t.length,s=new e((u+1)/3|0,n,r),a=0,f=0,c=!1,h=!1,l=!1,p=!1,d=!1;a<u;){switch(i=t.charAt(a++)){case"!":if(!r){if(h||l||p){d=!0;break}h=l=p=!0}s.offset=s.markedOffset=s.limit=f,c=!1;break;case"|":if(!r){if(h||p){d=!0;break}h=p=!0}s.offset=s.limit=f,c=!1;break;case"[":if(!r){if(h||l){d=!0;break}h=l=!0}s.offset=s.markedOffset=f,c=!1;break;case"<":if(!r){if(h){d=!0;break}h=!0}s.offset=f,c=!1;break;case"]":if(!r){if(p||l){d=!0;break}p=l=!0}s.limit=s.markedOffset=f,c=!1;break;case">":if(!r){if(p){d=!0;break}p=!0}s.limit=f,c=!1;break;case"'":if(!r){if(l){d=!0;break}l=!0}s.markedOffset=f,c=!1;break;case" ":c=!1;break;default:if(!r&&c){d=!0;break}if(o=parseInt(i+t.charAt(a++),16),!r&&(isNaN(o)||o<0||o>255))throw TypeError("Illegal str: Not a debug encoded string");s.view[f++]=o,c=!0}if(d)throw TypeError("Illegal str: Invalid symbol at "+a)}if(!r){if(!h||!p)throw TypeError("Illegal str: Missing offset or limit");if(f<s.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+f+" < "+u)}return s},n.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var n,r=new Array(e-t);t<e;)(n=this.view[t++])<16?r.push("0",n.toString(16)):r.push(n.toString(16));return r.join("")},e.fromHex=function(t,n,r){if(!r){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,o=t.length,u=new e(o/2|0,n),s=0,a=0;s<o;s+=2){if(i=parseInt(t.substring(s,s+2),16),!r&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");u.view[a++]=i}return u.limit=a,u};var c=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var n=null;for("number"==typeof t&&(n=t,t=function(){return null});null!==n||null!==(n=t());)n<128?e(127&n):n<2048?(e(n>>6&31|192),e(63&n|128)):n<65536?(e(n>>12&15|224),e(n>>6&63|128),e(63&n|128)):(e(n>>18&7|240),e(n>>12&63|128),e(n>>6&63|128),e(63&n|128)),n=null},decodeUTF8:function(t,e){for(var n,r,i,o,u=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(n=t());)if(0==(128&n))e(n);else if(192==(224&n))null===(r=t())&&u([n,r]),e((31&n)<<6|63&r);else if(224==(240&n))(null===(r=t())||null===(i=t()))&&u([n,r,i]),e((15&n)<<12|(63&r)<<6|63&i);else{if(240!=(248&n))throw RangeError("Illegal starting byte: "+n);(null===(r=t())||null===(i=t())||null===(o=t()))&&u([n,r,i,o]),e((7&n)<<18|(63&r)<<12|(63&i)<<6|63&o)}},UTF16toUTF8:function(t,e){for(var n,r=null;null!==(n=null!==r?r:t());)n>=55296&&n<=57343&&null!==(r=t())&&r>=56320&&r<=57343?(e(1024*(n-55296)+r-56320+65536),r=null):e(n);null!==r&&e(r)},UTF8toUTF16:function(t,e){var n=null;for("number"==typeof t&&(n=t,t=function(){return null});null!==n||null!==(n=t());)n<=65535?e(n):(e(55296+((n-=65536)>>10)),e(n%1024+56320)),n=null},encodeUTF16toUTF8:function(e,n){t.UTF16toUTF8(e,function(e){t.encodeUTF8(e,n)})},decodeUTF8toUTF16:function(e,n){t.decodeUTF8(e,function(e){t.UTF8toUTF16(e,n)})},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,n=0;null!==(e=t());)n+=e<128?1:e<2048?2:e<65536?3:4;return n},calculateUTF16asUTF8:function(e){var n=0,r=0;return t.UTF16toUTF8(e,function(t){++n,r+=t<128?1:t<2048?2:t<65536?3:4}),[n,r]}};return t}();return n.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var n;try{c.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),n=u())}catch(n){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return n()},e.fromUTF8=function(t,n,r){if(!r&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var i=new e(c.calculateUTF16asUTF8(o(t),!0)[1],n,r),u=0;return c.encodeUTF16toUTF8(o(t),function(t){i.view[u++]=t}),i.limit=u,i},e})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(0).Buffer;function i(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}i.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var n=this._block,i=this._blockSize,o=t.length,u=this._len,s=0;s<o;){for(var a=u%i,f=Math.min(o-s,i-a),c=0;c<f;c++)n[a+c]=t[s+c];s+=f,(u+=f)%i==0&&this._update(n)}return this._len+=o,this},i.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,i=(n-r)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(68),i=n(231),o=r.modules.ecc;e.Eos=r,e.Ecc=o,e.Debug=i,console.log("Eos",e.Eos),console.log("Ecc",e.Ecc),console.log("Debug",e.Debug)},function(t,e,n){"use strict";e.__esModule=!0;var r=u(n(124)),i=u(n(141)),o="function"==typeof i.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function u(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===o(r.default)?function(t){return void 0===t?"undefined":o(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":o(t)}},function(t,e,n){var r=n(24);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports={}},function(t,e,n){(function(e){t.exports=function(t,n){for(var r=Math.min(t.length,n.length),i=new e(r),o=0;o<r;++o)i[o]=t[o]^n[o];return i}}).call(this,n(2).Buffer)},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(3),u=n(60),s=n(9),a=u.getCurveByName("secp256k1"),f=n(14),c=n(29),h=a.G,l=a.n;function p(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";if("string"==typeof t){var r=p.fromString(t,n);return o(null!=r,"Invalid public key"),r}if(e.isBuffer(t))return p.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&t.Q)return p(t.Q);function d(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.compressed;return t.getEncoded(e)}o.equal(void 0===t?"undefined":i(t),"object","Invalid public key"),o.equal(i(t.compressed),"boolean","Invalid public key");return{Q:t,toString:function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"EOS")+c.checkEncode(d())},toUncompressed:function(){var e=t.getEncoded(!1),n=u.Point.decodeFrom(a,e);return p.fromPoint(n)},toBuffer:d,child:function(n){console.error("Deprecated warning: PublicKey.child"),o(e.isBuffer(n),"Buffer required: offset"),o.equal(n.length,32,"offset length"),n=e.concat([d(),n]),n=f.sha256(n);var r=s.fromBuffer(n);if(r.compareTo(l)>=0)throw new Error("Child offset went out of bounds, try again");var i=h.multiply(r),u=t.add(i);if(a.isInfinity(u))throw new Error("Child offset derived to an invalid key, try again");return p.fromPoint(u)},toHex:function(){return d().toString("hex")}}}t.exports=p,p.isValid=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p(t,e),!0}catch(t){return!1}},p.fromBinary=function(t){return p.fromBuffer(new e(t,"binary"))},p.fromBuffer=function(t){return p(u.Point.decodeFrom(a,t))},p.fromPoint=function(t){return p(t)},p.fromString=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";try{return p.fromStringOrThrow(t,e)}catch(t){return null}},p.fromStringOrThrow=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";o.equal(void 0===t?"undefined":i(t),"string","public_key");var n=t.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===n)return new RegExp("^"+e).test(t)&&(t=t.substring(e.length)),p.fromBuffer(c.checkDecode(t));o(3===n.length,"Expecting public key like: PUB_K1_base58pubkey..");var u=r(n,3),s=u[1],a=u[2];return o.equal(s,"K1","K1 private key expected"),p.fromBuffer(c.checkDecode(a,s))},p.fromHex=function(t){return p.fromBuffer(new e(t,"hex"))},p.fromStringHex=function(t){return p.fromString(new e(t,"hex"))}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(190),o=n(3),u=n(84),s=n(14);t.exports={random32ByteBuffer:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.cpuEntropyBits,i=void 0===n?0:n,a=t.safe,l=void 0===a||a;o.equal(void 0===i?"undefined":r(i),"number","cpuEntropyBits"),o.equal(void 0===l?"undefined":r(l),"boolean","boolean"),l&&o(f>=128,"Call initialize() to add entropy");var p=[];return p.push(u(32)),p.push(e.from(h(i))),p.push(c),p.push(function(){var t=Array(u(101)).join();try{t+=(new Date).toString()+" "+window.screen.height+" "+window.screen.width+" "+window.screen.colorDepth+"  "+window.screen.availHeight+" "+window.screen.availWidth+" "+window.screen.pixelDepth+navigator.language+" "+window.location+" "+window.history.length;for(var n,r=0;r<navigator.mimeTypes.length;r++)n=navigator.mimeTypes[r],t+=n.description+" "+n.type+" "+n.suffixes+" "}catch(e){t+=s.sha256((new Date).toString())}for(var i=new e(t),o=t+=i.toString("binary")+" "+(new Date).toString(),a=Date.now();Date.now()-a<25;)o=s.sha256(o);return o}()),s.sha256(e.concat(p))},addEntropy:function(){o.equal(c.length,101,"externalEntropyArray");for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];f+=e.length;var r=!0,i=!1,u=void 0;try{for(var s,h=e[Symbol.iterator]();!(r=(s=h.next()).done);r=!0){var l=s.value,p=a++%101,d=c[p]+=l;d>9007199254740991&&(c[p]=0)}}catch(t){i=!0,u=t}finally{try{!r&&h.return&&h.return()}finally{if(i)throw u}}},cpuEntropy:h,entropyCount:function(){return f},checkDecode:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;o(null!=t,"private key expected");var r=new e(i.decode(t)),u=r.slice(-4),a=r.slice(0,-4),f=void 0;if("sha256x2"===n)f=s.sha256(s.sha256(a)).slice(0,4);else{var c=[a];n&&c.push(e.from(n)),f=s.ripemd160(e.concat(c)).slice(0,4)}if(u.toString()!==f.toString())throw new Error("Invalid checksum, "+u.toString("hex")+" != "+f.toString("hex"));return a},checkEncode:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(o(e.isBuffer(t),"expecting keyBuffer<Buffer>"),"sha256x2"===n){var r=s.sha256(s.sha256(t)).slice(0,4);return i.encode(e.concat([t,r]))}var u=[t];n&&u.push(e.from(n));var a=s.ripemd160(e.concat(u)).slice(0,4);return i.encode(e.concat([t,a]))}};var a=0,f=0,c=u(101);function h(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:128,e=[],n=null,r=0;e.length<t;){var i=l();if(null!=n){var o=i-n;if(Math.abs(o)<1){r++;continue}var u=Math.floor(p(Math.abs(o))+1);if(u<4){u<2&&r++;continue}e.push(o)}n=i}if(r>10){var s=Number(r/t*100).toFixed(2);console.warn("WARN: "+s+"% low CPU entropy re-sampled")}return e}function l(){for(var t=Date.now(),e=0,n=0;Date.now()<t+7+1;)n=Math.sin(Math.sqrt(Math.log(++e+n)));return e}var p=function(t){return Math.log(t)/Math.LN2}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(152),i=n(195),o=Object.assign({},r,i);t.exports=o},function(t,e){t.exports=!0},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(0).Buffer;function i(t){r.isBuffer(t)||(t=r.from(t));for(var e=t.length/4|0,n=new Array(e),i=0;i<e;i++)n[i]=t.readUInt32BE(4*i);return n}function o(t){for(;0<t.length;t++)t[0]=0}function u(t,e,n,r,i){for(var o,u,s,a,f=n[0],c=n[1],h=n[2],l=n[3],p=t[0]^e[0],d=t[1]^e[1],y=t[2]^e[2],g=t[3]^e[3],m=4,v=1;v<i;v++)o=f[p>>>24]^c[d>>>16&255]^h[y>>>8&255]^l[255&g]^e[m++],u=f[d>>>24]^c[y>>>16&255]^h[g>>>8&255]^l[255&p]^e[m++],s=f[y>>>24]^c[g>>>16&255]^h[p>>>8&255]^l[255&d]^e[m++],a=f[g>>>24]^c[p>>>16&255]^h[d>>>8&255]^l[255&y]^e[m++],p=o,d=u,y=s,g=a;return o=(r[p>>>24]<<24|r[d>>>16&255]<<16|r[y>>>8&255]<<8|r[255&g])^e[m++],u=(r[d>>>24]<<24|r[y>>>16&255]<<16|r[g>>>8&255]<<8|r[255&p])^e[m++],s=(r[y>>>24]<<24|r[g>>>16&255]<<16|r[p>>>8&255]<<8|r[255&d])^e[m++],a=(r[g>>>24]<<24|r[p>>>16&255]<<16|r[d>>>8&255]<<8|r[255&y])^e[m++],[o>>>=0,u>>>=0,s>>>=0,a>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],a=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var n=[],r=[],i=[[],[],[],[]],o=[[],[],[],[]],u=0,s=0,a=0;a<256;++a){var f=s^s<<1^s<<2^s<<3^s<<4;f=f>>>8^255&f^99,n[u]=f,r[f]=u;var c=t[u],h=t[c],l=t[h],p=257*t[f]^16843008*f;i[0][u]=p<<24|p>>>8,i[1][u]=p<<16|p>>>16,i[2][u]=p<<8|p>>>24,i[3][u]=p,p=16843009*l^65537*h^257*c^16843008*u,o[0][f]=p<<24|p>>>8,o[1][f]=p<<16|p>>>16,o[2][f]=p<<8|p>>>24,o[3][f]=p,0===u?u=s=1:(u=c^t[t[t[l^c]]],s^=t[t[s]])}return{SBOX:n,INV_SBOX:r,SUB_MIX:i,INV_SUB_MIX:o}}();function f(t){this._key=i(t),this._reset()}f.blockSize=16,f.keySize=32,f.prototype.blockSize=f.blockSize,f.prototype.keySize=f.keySize,f.prototype._reset=function(){for(var t=this._key,e=t.length,n=e+6,r=4*(n+1),i=[],o=0;o<e;o++)i[o]=t[o];for(o=e;o<r;o++){var u=i[o-1];o%e==0?(u=u<<8|u>>>24,u=a.SBOX[u>>>24]<<24|a.SBOX[u>>>16&255]<<16|a.SBOX[u>>>8&255]<<8|a.SBOX[255&u],u^=s[o/e|0]<<24):e>6&&o%e==4&&(u=a.SBOX[u>>>24]<<24|a.SBOX[u>>>16&255]<<16|a.SBOX[u>>>8&255]<<8|a.SBOX[255&u]),i[o]=i[o-e]^u}for(var f=[],c=0;c<r;c++){var h=r-c,l=i[h-(c%4?0:4)];f[c]=c<4||h<=4?l:a.INV_SUB_MIX[0][a.SBOX[l>>>24]]^a.INV_SUB_MIX[1][a.SBOX[l>>>16&255]]^a.INV_SUB_MIX[2][a.SBOX[l>>>8&255]]^a.INV_SUB_MIX[3][a.SBOX[255&l]]}this._nRounds=n,this._keySchedule=i,this._invKeySchedule=f},f.prototype.encryptBlockRaw=function(t){return u(t=i(t),this._keySchedule,a.SUB_MIX,a.SBOX,this._nRounds)},f.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),n=r.allocUnsafe(16);return n.writeUInt32BE(e[0],0),n.writeUInt32BE(e[1],4),n.writeUInt32BE(e[2],8),n.writeUInt32BE(e[3],12),n},f.prototype.decryptBlock=function(t){var e=(t=i(t))[1];t[1]=t[3],t[3]=e;var n=u(t,this._invKeySchedule,a.INV_SUB_MIX,a.INV_SBOX,this._nRounds),o=r.allocUnsafe(16);return o.writeUInt32BE(n[0],0),o.writeUInt32BE(n[3],4),o.writeUInt32BE(n[2],8),o.writeUInt32BE(n[1],12),o},f.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},t.exports.AES=f},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,u,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(s-1),u=0;u<o.length;)o[u++]=arguments[u];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(8))},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var o=n(60),u=o.Point,s=o.getCurveByName("secp256k1"),a=n(9),f=n(3),c=n(14),h=n(28),l=n(29),p=n(61),d=n(192);s.G,s.n;function y(t){if("string"==typeof t)return y.fromString(t);if(e.isBuffer(t))return y.fromBuffer(t);if("object"===(void 0===t?"undefined":i(t))&&a.isBigInteger(t.d))return y(t.d);if(!a.isBigInteger(t))throw new TypeError("Invalid private key");function n(){var t=o();return t=e.concat([new e([128]),t]),l.checkEncode(t,"sha256x2")}var r=void 0;function o(){return t.toBuffer(32)}return{d:t,toWif:n,toString:function(){return n()},toPublic:function(){if(r)return r;var e=s.G.multiply(t);return r=h.fromPoint(e)},toBuffer:o,getSharedSecret:function(t){var e=(t=h(t)).toUncompressed().toBuffer(),n=u.fromAffine(s,a.fromBuffer(e.slice(1,33)),a.fromBuffer(e.slice(33,65))),r=o(),i=n.multiply(a.fromBuffer(r)).affineX.toBuffer({size:32});return c.sha512(i)},getChildKey:function(t){return y(p("sha256").update(o()).update(t).digest())}}}function g(t){f.equal(void 0===t?"undefined":i(t),"string","privateStr");var e=t.match(/^PVT_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);if(null===e){var n=l.checkDecode(t,"sha256x2"),o=n.readUInt8(0);f.equal(128,o,"Expected version 128, instead got "+o);return{privateKey:y.fromBuffer(n.slice(1)),format:"WIF",keyType:"K1"}}f(3===e.length,"Expecting private key like: PVT_K1_base58privateKey..");var u=r(e,3),s=u[1],a=u[2];return f.equal(s,"K1","K1 private key expected"),{privateKey:y.fromBuffer(l.checkDecode(a,s)),format:"PVT",keyType:s}}t.exports=y,y.fromHex=function(t){return y.fromBuffer(new e(t,"hex"))},y.fromBuffer=function(t){if(!e.isBuffer(t))throw new Error("Expecting parameter to be a Buffer type");if(33===t.length&&1===t[32]&&(t=t.slice(0,-1)),32!==t.length)throw new Error("Expecting 32 bytes, instead got "+t.length);return y(a.fromBuffer(t))},y.fromSeed=function(t){if("string"!=typeof t)throw new Error("seed must be of type string");return y.fromBuffer(c.sha256(t))},y.isWif=function(t){try{return f("WIF"===g(t).format),!0}catch(t){return!1}},y.isValid=function(t){try{return y(t),!0}catch(t){return!1}},y.fromWif=function(t){return console.log("PrivateKey.fromWif is deprecated, please use PrivateKey.fromString"),y.fromString(t)},y.fromString=function(t){return g(t).privateKey},y.randomKey=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return y.initialize().then(function(){return y.fromBuffer(l.random32ByteBuffer({cpuEntropyBits:t}))})},y.unsafeRandomKey=function(){return Promise.resolve(y.fromBuffer(l.random32ByteBuffer({safe:!1})))};var m=!1;y.initialize=d(function(){m||(function(){var t=y(c.sha256("")),e="key comparison test failed on a known private key";f.equal(t.toWif(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e),f.equal(t.toString(),"5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss",e);var n=t.toPublic();f.equal(n.toString(),"EOS859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM","pubkey string comparison test failed on a known public key"),v(function(){return y.fromString(t.toWif())},"converting known wif from string"),v(function(){return y.fromString(t.toString())},"converting known pvt from string"),v(function(){return h.fromString(n.toString())},"converting known public key from string"),!0}(),l.addEntropy.apply(l,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(l.cpuEntropy())),f(l.entropyCount()>=128,"insufficient entropy"),m=!0)});var v=function(t,e){try{t()}catch(t){throw t.message=e+" ==> "+t.message,t}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(21);e.createLogger=function(t){return{verbose:r.Debug("verbose:"+t),info:r.Debug("info:"+t),warning:r.Debug("warning:"+t),error:r.Debug("error:"+t)}};var i=r.Debug.disable();""===i?r.Debug.enable("info:*,warning:*,error:*"):r.Debug.enable(i)},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};function o(t){return new Promise(function(e){setTimeout(e,t)})}Object.defineProperty(e,"__esModule",{value:!0}),e.forMs=o,e.forCondition=function(t,e){return void 0===e&&(e=100),r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return t()?[2]:[4,o(e)];case 1:return n.sent(),[3,0];case 2:return[2]}})})},e.TimeoutPromise=function(t,e){return r(this,void 0,void 0,function(){var n;return i(this,function(r){return n=new Promise(function(e,n){setTimeout(function(){n(new Error("Timed out in "+t+" ms."))},t)}),[2,Promise.race([e,n])]})})}},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(65)),r(n(67)),r(n(261)),r(n(70))},function(t,e,n){"use strict";var r=n(126)(!0);n(73)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(24);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(79),i=n(49);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(48)("keys"),i=n(34);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){var r=n(10),i=n(7),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(31)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(16).f,i=n(11),o=n(5)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){n(138);for(var r=n(7),i=n(15),o=n(25),u=n(5)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),a=0;a<s.length;a++){var f=s[a],c=r[f],h=c&&c.prototype;h&&!h[u]&&i(h,u,f),o[f]=o.Array}},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(7),i=n(10),o=n(31),u=n(52),s=n(16).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:u.f(t)})}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,u,s,a,f;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(o(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(i(n))for(s=Array.prototype.slice.call(arguments,1),u=(f=n.slice()).length,a=0;a<u;a++)f[a].apply(this,s);return!0},n.prototype.addListener=function(t,e){var u;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(u=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&u>0&&this._events[t].length>u&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,o,u,s;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(u=(n=this._events[t]).length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(s=u;s-- >0;)if(n[s]===e||n[s].listener&&n[s].listener===e){o=s;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){(e=t.exports=n(91)).Stream=e,e.Readable=e,e.Writable=n(57),e.Duplex=n(13),e.Transform=n(94),e.PassThrough=n(170)},function(t,e,n){"use strict";(function(e,r,i){var o=n(36);function u(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=v;var s,a=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;v.WritableState=m;var f=n(27);f.inherits=n(1);var c={deprecate:n(169)},h=n(92),l=n(0).Buffer,p=i.Uint8Array||function(){};var d,y=n(93);function g(){}function m(t,e){s=s||n(13),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(f||0===f)?f:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(B,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),B(t,e))}(t,n,r,e,i);else{var u=E(n);u||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?a(w,t,n,u,i):w(t,n,u,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new u(this)}function v(t){if(s=s||n(13),!(d.call(v,this)||this instanceof s))return new v(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function b(t,e,n,r,i,o,u){e.writelen=r,e.writecb=u,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function w(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),B(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var s=0,a=!0;n;)i[s]=n,n.isBuf||(a=!1),n=n.next,s+=1;i.allBuffers=a,b(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new u(e),e.bufferedRequestCount=0}else{for(;n;){var f=n.chunk,c=n.encoding,h=n.callback;if(b(t,e,!1,e.objectMode?1:f.length,f,c,h),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function E(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function A(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),B(t,e)})}function B(t,e){var n=E(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(A,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}f.inherits(v,h),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===v&&(t&&t._writableState instanceof m)}})):d=function(t){return t instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(t,e,n){var r=this._writableState,i=!1,u=!r.objectMode&&function(t){return l.isBuffer(t)||t instanceof p}(t);return u&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(n=e,e=null),u?e="buffer":e||(e=r.defaultEncoding),"function"!=typeof n&&(n=g),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(u||function(t,e,n,r){var i=!0,u=!1;return null===n?u=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(u=new TypeError("Invalid non-string/buffer chunk")),u&&(t.emit("error",u),o.nextTick(r,u),i=!1),i}(this,r,t,n))&&(r.pendingcb++,i=function(t,e,n,r,i,o){if(!n){var u=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,n));return e}(e,r,i);r!==u&&(n=!0,i="buffer",r=u)}var s=e.objectMode?1:r.length;e.length+=s;var a=e.length<e.highWaterMark;a||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,s,r,i,o);return a}(this,r,u,t,e,n)),i},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},v.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,B(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(8),n(167).setImmediate,n(6))},function(t,e,n){"use strict";var r=n(0).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=a,this.end=f,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=l,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function u(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function a(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function l(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=u(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=u(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=u(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";var r=n(1),i=n(97),o=n(0).Buffer,u=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function a(t,e){return t<<e|t>>>32-e}function f(t,e,n,r,i,o,u){return a(t+(e&n|~e&r)+i+o|0,u)+e|0}function c(t,e,n,r,i,o,u){return a(t+(e&r|n&~r)+i+o|0,u)+e|0}function h(t,e,n,r,i,o,u){return a(t+(e^n^r)+i+o|0,u)+e|0}function l(t,e,n,r,i,o,u){return a(t+(n^(e|~r))+i+o|0,u)+e|0}r(s,i),s.prototype._update=function(){for(var t=u,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var n=this._a,r=this._b,i=this._c,o=this._d;r=l(r=l(r=l(r=l(r=h(r=h(r=h(r=h(r=c(r=c(r=c(r=c(r=f(r=f(r=f(r=f(r,i=f(i,o=f(o,n=f(n,r,i,o,t[0],3614090360,7),r,i,t[1],3905402710,12),n,r,t[2],606105819,17),o,n,t[3],3250441966,22),i=f(i,o=f(o,n=f(n,r,i,o,t[4],4118548399,7),r,i,t[5],1200080426,12),n,r,t[6],2821735955,17),o,n,t[7],4249261313,22),i=f(i,o=f(o,n=f(n,r,i,o,t[8],1770035416,7),r,i,t[9],2336552879,12),n,r,t[10],4294925233,17),o,n,t[11],2304563134,22),i=f(i,o=f(o,n=f(n,r,i,o,t[12],1804603682,7),r,i,t[13],4254626195,12),n,r,t[14],2792965006,17),o,n,t[15],1236535329,22),i=c(i,o=c(o,n=c(n,r,i,o,t[1],4129170786,5),r,i,t[6],3225465664,9),n,r,t[11],643717713,14),o,n,t[0],3921069994,20),i=c(i,o=c(o,n=c(n,r,i,o,t[5],3593408605,5),r,i,t[10],38016083,9),n,r,t[15],3634488961,14),o,n,t[4],3889429448,20),i=c(i,o=c(o,n=c(n,r,i,o,t[9],568446438,5),r,i,t[14],3275163606,9),n,r,t[3],4107603335,14),o,n,t[8],1163531501,20),i=c(i,o=c(o,n=c(n,r,i,o,t[13],2850285829,5),r,i,t[2],4243563512,9),n,r,t[7],1735328473,14),o,n,t[12],2368359562,20),i=h(i,o=h(o,n=h(n,r,i,o,t[5],4294588738,4),r,i,t[8],2272392833,11),n,r,t[11],1839030562,16),o,n,t[14],4259657740,23),i=h(i,o=h(o,n=h(n,r,i,o,t[1],2763975236,4),r,i,t[4],1272893353,11),n,r,t[7],4139469664,16),o,n,t[10],3200236656,23),i=h(i,o=h(o,n=h(n,r,i,o,t[13],681279174,4),r,i,t[0],3936430074,11),n,r,t[3],3572445317,16),o,n,t[6],76029189,23),i=h(i,o=h(o,n=h(n,r,i,o,t[9],3654602809,4),r,i,t[12],3873151461,11),n,r,t[15],530742520,16),o,n,t[2],3299628645,23),i=l(i,o=l(o,n=l(n,r,i,o,t[0],4096336452,6),r,i,t[7],1126891415,10),n,r,t[14],2878612391,15),o,n,t[5],4237533241,21),i=l(i,o=l(o,n=l(n,r,i,o,t[12],1700485571,6),r,i,t[3],2399980690,10),n,r,t[10],4293915773,15),o,n,t[1],2240044497,21),i=l(i,o=l(o,n=l(n,r,i,o,t[8],1873313359,6),r,i,t[15],4264355552,10),n,r,t[6],2734768916,15),o,n,t[13],1309151649,21),i=l(i,o=l(o,n=l(n,r,i,o,t[4],4149444226,6),r,i,t[11],3174756917,10),n,r,t[2],718787259,15),o,n,t[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+i|0,this._d=this._d+o|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=o.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=s},function(t,e,n){var r=n(98),i=n(100),o=n(181);t.exports={Curve:i,Point:r,getCurveByName:o}},function(t,e,n){"use strict";var r=n(1),i=n(59),o=n(101),u=n(102),s=n(12);function a(t){s.call(this,"digest"),this._hash=t}r(a,s),a.prototype._update=function(t){this._hash.update(t)},a.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new i:"rmd160"===t||"ripemd160"===t?new o:new a(u(t))}},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(196),o=n(201),u=n(3),s=o.create;t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!==(void 0===t?"undefined":r(t)))throw new TypeError("definitions is a required parameter");if(e.customTypes)for(var n in t=Object.assign({},t),e.customTypes)delete t[n];var o=i(e),u=s(t,o),c=u.errors,h=u.structs;return{errors:c,structs:h,types:o,extend:function(e){return function t(e,n){var r=Object.assign({},e,n),i=s(r,o),u=i.structs;return{errors:i.errors,structs:u,extend:function(e){return t(r,e)},fromBuffer:a(o,u),toBuffer:f(o,u)}}(t,e)},fromBuffer:a(o,h),toBuffer:f(o,h)}};var a=function(t,n){return function(i,s){u.equal(void 0===i?"undefined":r(i),"string","typeName (type or struct name)"),"string"==typeof s&&(s=e.from(s,"hex")),u(e.isBuffer(s),"expecting buf<hex|Buffer>");var a=t[i];return a=a?a():n[i],u(a,"missing type or struct: "+i),o.fromBuffer(a,s)}},f=function(t,e){return function(n,i){u.equal(void 0===n?"undefined":r(n),"string","typeName (type or struct name)"),u(null!=i,"value is required");var s=t[n];return s=s?s():e[n],u(s,"missing type or struct: "+n),o.toBuffer(s,i)}};t.exports.fromBuffer=o.fromBuffer,t.exports.toBuffer=o.toBuffer}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=o(n(64)),i=o(n(22));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(30),s=u.Signature,a=u.PublicKey,f=n(62),c=n(19),h=n(3),l=n(110),p=n(111),d=(p.isName,p.encodeName),y=p.decodeName,g=p.DecimalPad,m=p.DecimalImply,v=p.DecimalUnimply,b=p.printAsset,w=p.parseAsset;t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1],n=function(e,n){var r=t.abiCache.abi(n),i=!0,o=!1,u=void 0;try{for(var s,a=r.abi.actions[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if(f.name===e){var c=r.structs[f.type];if(null!=c)return c}}}catch(t){o=!0,u=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw u}}var h=r.structs[e];if(null!=h)return h;throw new Error("Missing ABI action: "+e)},r=null==t.forceActionDataHex||t.forceActionDataHex,i=Object.assign({},k(t),T(n),I(t),M(n,r),t.override),o={name:function(){return[_]},public_key:function(){return[E(A)]},symbol:function(){return[B]},symbol_code:function(){return[C]},extended_symbol:function(){return[F]},asset:function(){return[x]},extended_asset:function(){return[S]},signature:function(){return[E(D)]}},u=Object.assign({},o,t.customTypes);(t=Object.assign({override:i},{customTypes:u},t)).sort=Object.assign({},t.sort),t.sort["action.authorization"]=!0,t.sort["signed_transaction.signature"]=!0,t.sort["authority.accounts"]=!0,t.sort["authority.keys"]=!0;var s=Object.assign({},l,e),a=f(s,t),c=a.structs,h=a.types,p=a.errors,d=a.fromBuffer,y=a.toBuffer;if(0!==p.length)throw new Error(JSON.stringify(p,null,4));return{structs:c,types:h,fromBuffer:d,toBuffer:y}};var _=function(t){return{fromByteBuffer:function(t){return y(t.readUint64(),!1)},appendByteBuffer:function(t,e){t.writeUint64(d(e,!1))},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"":e}}},E=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t,n,r){var i=e.map(function(e){return e(t,n,r)}),o=n.static_variant(i);return{fromByteBuffer:function(t){return o.fromByteBuffer(t)},appendByteBuffer:function(t,e){Array.isArray(e)||(e=[0,e]),o.appendByteBuffer(t,e)},fromObject:function(t){return Array.isArray(t)||(t=[0,t]),o.fromObject(t)[1]},toObject:function(t){return Array.isArray(t)||(t=[0,t]),o.toObject(t)[1]}}}},A=function(t){return{fromByteBuffer:function(n){var r=n.copy(n.offset,n.offset+33);n.skip(33);var i=e.from(r.toBinary(),"binary");return a.fromBuffer(i).toString(t.keyPrefix)},appendByteBuffer:function(e,n){var r=a.fromStringOrThrow(n,t.keyPrefix).toBuffer();e.append(r.toString("binary"),"binary")},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?(t.keyPrefix?t.keyPrefix:"EOS")+"6MRy..":e}}},B=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var n=e.readUint8(),r=e.toBinary(),i="",o=!0,u=!1,s=void 0;try{for(var a,f=r[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;if("\0"==c)break;i+=c}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}return n+","+i},appendByteBuffer:function(t,e){var n=w(e),r=n.symbol,i=n.precision;h(null!=i,"Precision unknown for symbol: "+e);var o="\0".repeat(7-r.length);t.append(String.fromCharCode(i)+r+o)},fromObject:function(t){h(null!=t,"Symbol is required: "+t);var e=w(t),n=e.symbol,r=e.precision;return null==r?n:r+","+n},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},C=function(t){return{fromByteBuffer:function(t){var e=t.copy(t.offset,t.offset+8);t.skip(8);var n=e.toBinary(),r="",i=!0,o=!1,u=void 0;try{for(var s,a=n[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value;if("\0"==f)break;r+=f}}catch(t){o=!0,u=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw u}}return""+r},appendByteBuffer:function(t,e){var n=w(e).symbol,r="\0".repeat(8-n.length);t.append(n+r)},fromObject:function(t){return h(null!=t,"Symbol is required: "+t),w(t).symbol},toObject:function(e){return t.defaults&&null==e?"SYS":w(e).symbol}}},F=function(t,e,n){var o=n.symbol(t),u=n.name(t);return{fromByteBuffer:function(t){return o.fromByteBuffer(t)+"@"+u.fromByteBuffer(t)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"string","Invalid extended symbol: "+e);var n=e.split("@"),s=(0,r.default)(n,2),a=s[0],f=s[1];h(null!=f,"Missing @contract suffix in extended symbol: "+e),o.appendByteBuffer(t,a),u.appendByteBuffer(t,f)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?"SYS@contract":e}}},x=function(t,e,n){var r=e.int64(t),i=n.symbol(t);return{fromByteBuffer:function(t){var e=r.fromByteBuffer(t);h(null!=e,"amount");var n=i.fromByteBuffer(t),o=w(""+n),u=o.precision,s=o.symbol;return h(null!=u,"precision"),h(null!=s,"symbol"),v(e,u)+" "+s},appendByteBuffer:function(t,e){var n=w(e),o=n.amount,u=n.precision,s=n.symbol;h(null!=o,"amount"),h(null!=u,"precision"),h(null!=s,"symbol"),r.appendByteBuffer(t,m(o,u)),i.appendByteBuffer(t,u+","+s)},fromObject:function(t){var e=w(t),n=e.amount,r=e.precision,i=e.symbol;return h(null!=n,"amount"),h(null!=r,"precision"),h(null!=i,"symbol"),g(n,r)+" "+i},toObject:function(e){if(t.defaults&&null==e)return"0.0001 SYS";var n=w(e),r=n.amount,i=n.precision,o=n.symbol;return h(null!=r,"amount"),h(null!=i,"precision"),h(null!=o,"symbol"),g(r,i)+" "+o}}},S=function(t,e,n){var o=n.asset(t),u=n.name(t);return{fromByteBuffer:function(t){var e=o.fromByteBuffer(t),n=u.fromByteBuffer(t);return w(e+"@"+n)},appendByteBuffer:function(t,e){h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object, got "+(void 0===e?"undefined":(0,i.default)(e)));var n=b(e),s=n.split("@"),a=(0,r.default)(s,2)[1];h.equal(void 0===a?"undefined":(0,i.default)(a),"string","Invalid extended asset: "+e),o.appendByteBuffer(t,n),u.appendByteBuffer(t,a)},fromObject:function(t){var e={};"string"==typeof t?Object.assign(e,w(t)):"object"===(void 0===t?"undefined":(0,i.default)(t))?Object.assign(e,t):h(!1,"expecting extended_asset<object|string>, got: "+(void 0===t?"undefined":(0,i.default)(t)));var n=e.amount,r=e.precision,o=e.symbol,u=e.contract;return h(null!=n,"missing amount"),h(null!=r,"missing precision"),h(null!=o,"missing symbol"),h(null!=u,"missing contract"),{amount:n,precision:r,symbol:o,contract:u}},toObject:function(e){if(t.defaults&&null==e)return{amount:"1.0000",precision:4,symbol:"SYS",contract:"eosio.token"};h.equal(void 0===e?"undefined":(0,i.default)(e),"object","expecting extended_asset object");var n=e.amount,r=e.precision,o=e.symbol,u=e.contract;return{amount:g(n,r),precision:r,symbol:o,contract:u}}}},D=function(t,e){var n=e.fixed_bytes65(t);return{fromByteBuffer:function(t){var e=n.fromByteBuffer(t);return s.from(e).toString()},appendByteBuffer:function(t,e){var r=s.from(e);n.appendByteBuffer(t,r.toBuffer())},fromObject:function(t){return s.from(t).toString()},toObject:function(e){return t.defaults&&null==e?"SIG_K1_bas58signature..":s.from(e).toString()}}},k=function(t){return{"authority.fromObject":function(e){if(a.fromString(e,t.keyPrefix))return{threshold:1,keys:[{key:e,weight:1}]};if("string"==typeof e){var n=e.split("@"),i=(0,r.default)(n,2),o=i[0],u=i[1];return{threshold:1,accounts:[{permission:{actor:o,permission:void 0===u?"active":u},weight:1}]}}}}},T=function(t){return{"abi_def.fromObject":function(t){if("string"==typeof t){var n=e.from(t,"hex").toString();return 0===n.length&&(n=e.from(t).toString()),JSON.parse(n)}return e.isBuffer(t)?JSON.parse(t.toString()):null},"setabi.abi.appendByteBuffer":function(n){n.fields;var r=n.object,o=n.b,u=t("abi_def","eosio"),s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);e.isBuffer(r.abi)?s.append(r.abi):"object"==(0,i.default)(r.abi)&&u.appendByteBuffer(s,r.abi),o.writeVarint32(s.offset),o.append(s.copy(0,s.offset),"binary")}}},I=function(t){return{"setcode.code.fromObject":function(n){var r=n.object,i=n.result;try{var o=r.code.toString();if(/^\s*\(module/.test(o)){var u=t.binaryen;h(null!=u,'required: config.binaryen = require("binaryen")'),t.debug&&console.log("Assembling WASM..");var s=e.from(u.parseText(o).emitBinary());i.code=s}else i.code=r.code}catch(t){throw console.error(t,r.code),t}}}},M=function(t,n){return{"action.data.fromByteBuffer":function(n){var r=n.fields,i=n.object,o=n.b,u=n.config,s=""==(i.name||"")?r.data:t(i.name,i.account);if(s)o.readVarint32(),i.data=s.fromByteBuffer(o,u);else{var a=o.readVarint32(),f=o.copy(o.offset,o.offset+a);o.skip(a),i.data=e.from(f.toBinary(),"binary")}},"action.data.appendByteBuffer":function(n){var r=n.fields,i=n.object,o=n.b,u=""==(i.name||"")?r.data:t(i.name,i.account);if(u){var s=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);u.appendByteBuffer(s,i.data),o.writeVarint32(s.offset),o.append(s.copy(0,s.offset),"binary")}else{var a="string"==typeof i.data?e.from(i.data,"hex"):i.data;if(!e.isBuffer(a))throw new TypeError("Unknown struct '"+i.name+"' for contract '"+i.account+"', locate this struct or provide serialized action.data");o.writeVarint32(a.length),o.append(a.toString("binary"),"binary")}},"action.data.fromObject":function(n){var r=n.fields,o=n.object,u=n.result,s=o.data,a=o.name,c=""==(a||"")?r.data:t(a,o.account);if(c)if("object"===(void 0===s?"undefined":(0,i.default)(s)))u.data=c.fromObject(s);else{if("string"!=typeof s)throw new TypeError("Expecting hex string or object in action.data");var h=e.from(s,"hex");u.data=f.fromBuffer(c,h)}else u.data=s},"action.data.toObject":function(r){var i=r.fields,o=r.object,u=r.result,s=r.config,a=o||{},f=a.data,h=a.name,l=""==(h||"")?i.data:t(h,o.account);if(l){if(n){var p=new c(c.DEFAULT_CAPACITY,c.LITTLE_ENDIAN);return f&&l.appendByteBuffer(p,f),void(u.data=p.copy(0,p.offset).toString("hex"))}u.data=l.toObject(f,s)}else u.data=e.isBuffer(f)?f.toString("hex"):f}}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";e.__esModule=!0;var r=o(n(217)),i=o(n(220));function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(){return function(t,e){if(Array.isArray(t))return t;if((0,r.default)(Object(t)))return function(t,e){var n=[],r=!0,o=!1,u=void 0;try{for(var s,a=(0,i.default)(t);!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){o=!0,u=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw u}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(112),s=n(38),a=n(235),f=n(236),c=n(256),h=n(259),l=s.createLogger("chain"),p=n(260),d={ERR_TRANSFER_FAILED:"ERR_TRANSFER_FAILED",ERR_TRANSCAL_FAILED:"ERR_TRANSCAL_FAILED",ERR_TRANSEND_FAILED:"ERR_TRANSEND_FAILED"},y=function(t){function e(){var e=t.call(this)||this;return e._events=new a.default,e.events.enableEvents(d),e}return r(e,t),Object.defineProperty(e.prototype,"events",{get:function(){return this._events||(this._events=new a.default)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"chain",{get:function(){return new f.default(this.eosClient)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kh",{get:function(){return new c.default(this.chain)},enumerable:!0,configurable:!0}),e.prototype.getAccountInfo=function(t){return i(this,void 0,void 0,function(){var e,n,r;return o(this,function(i){switch(i.label){case 0:return n=(e=this.chain).getAccountInfo,(r=t)?[3,2]:[4,this.getIdentity()];case 1:r=i.sent().name,i.label=2;case 2:return[4,n.apply(e,[r])];case 3:return[2,i.sent()]}})})},e.prototype.getBalance=function(t,e,n){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var r,i,u;return o(this,function(o){switch(o.label){case 0:return i=(r=this.chain).getBalance,(u=t)?[3,2]:[4,this.getIdentity()];case 1:u=o.sent().name,o.label=2;case 2:return[2,i.apply(r,[u,e,n])]}})})},e.prototype.getBalances=function(t,e){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var n,r,i;return o(this,function(o){switch(o.label){case 0:return r=(n=this.chain).getBalances,(i=t)?[3,2]:[4,this.getIdentity()];case 1:i=o.sent().name,o.label=2;case 2:return[2,r.apply(n,[i,e])]}})})},e.prototype.getBalanceAsset=function(t,e){return void 0===e&&(e="eosio.token"),i(this,void 0,void 0,function(){var n;return o(this,function(r){switch(r.label){case 0:return[4,this.getBalance(t,e)];case 1:return n=r.sent(),[2,u.default.parse(n)]}})})},e.prototype.transfer=function(t,e,n){return void 0===n&&(n=""),i(this,void 0,void 0,function(){var r,i,u=this;return o(this,function(o){switch(o.label){case 0:return i=(r=this.chain).transfer,[4,this.getIdentity()];case 1:return[4,i.apply(r,[o.sent(),t,e,n,function(t){return u.events.emitEvent(d.ERR_TRANSCAL_FAILED,t)}])];case 2:return[2,o.sent()]}})})},e.prototype.transcal=function(t,e,n){for(var r=[],u=3;u<arguments.length;u++)r[u-3]=arguments[u];return i(this,void 0,void 0,function(){var i,u,s=this;return o(this,function(o){switch(o.label){case 0:return u=(i=this.kh).transcal,[4,this.getIdentity()];case 1:return[4,u.apply(i,[o.sent(),t,e,n,r,function(t){return s.events.emitEvent(d.ERR_TRANSCAL_FAILED,t)}])];case 2:return[2,o.sent()]}})})},e.prototype.call=function(t,e,n){return i(this,void 0,void 0,function(){var r,i;return o(this,function(o){switch(o.label){case 0:return[4,this.getIdentity()];case 1:return r=o.sent(),[4,this.chain.call(t,e,n,{actor:r.name,permission:r.authority})];case 2:return(i=o.sent())&&l.info("call operation dealed, txID: "+i.transaction_id),[2,i]}})})},e.prototype.newAccount=function(t,e,n){return i(this,void 0,void 0,function(){var r;return o(this,function(i){switch(i.label){case 0:if(!e)throw new Error("newAccount : active key error ");return n||(n=e),[4,this.getIdentity()];case 1:return r=i.sent(),[4,this.eosClient.transaction(function(i){i.newaccount({creator:r.name,name:t,owner:n,active:e}),i.buyrambytes({payer:r.name,receiver:t,bytes:8192}),i.delegatebw({from:r.name,receiver:t,stake_net_quantity:"1.0000 EOS",stake_cpu_quantity:"1.0000 EOS",transfer:0})})];case 2:return[2,i.sent()]}})})},e.prototype.version=function(){return p.name+" # "+p.version},e.prototype.help=function(){return"\n```js\n      =============================================================\n        \n               -----      ------        ------      -------\n              -----     -----          ------      -------\n             -----   -----            ------      -------\n            -----  -----             ------      -------\n           ----------                ----- ---- ------ \n          -----  -----              ----- ---- ------\n         -----    -----           ------      -------\n        -----      ------        ------      -------\n       ------       -------     ------      -------\n      --------      ---------  ------      -------\n        \n===========================================================\n```\n---\n\n# eosplayer "+this.version+'\n        \n## Usage of eosplayer\n\n### Events\n\n`ERR_TRANSFER_FAILED`\n`ERR_TRANSCAL_FAILED`\n`ERR_TRANSEND_FAILED`\n\n### APIs\n\n```js\n{String} get help // get help info of usage\n{String} get version // get the version info\n{ChainHelper} get chain // get the chain helper\n{KhHelper} get kh // get the kh contract helper\n\n{Void} eosplayer.event.setEvent(event, fnCallback, context) //listen to a event\n\n{Eos} get eosplayer.eosClient // get eos instance\n{Identity} async eosplayer.getIdentity() // get identity\n\n{AccountInfo} async eosplayer.getAccountInfo(account_name = identity.name) \n    // get account info for any user\n\n{String} async eosplayer.getBalance(account_name = undefined, code = "eosio.token", symbolName = undefined)  \n    // get balance string of a account. ex. "1.0000 EOS", null means that the account dosen\'t have any token,\n\n{Array.<String>} async getBalances(account_name = undefined, code = "eosio.token")\n    // get balances\n\n{String} async eosplayer.getBalanceAsset(account_name = undefined, code = "eosio.token") \n    // get balance structure of a account. ex. {val:1, sym:"EOS", decimal:4}\n\n{Tx} async eosplayer.transfer(target, quantity, memo = "")\n    // transfer tokens to target\n\n{Tx} async eosplayer.transcal(code, quantity, func, ...args) \n    // send a action of transcal to contract\n\n{Tx} async eosplayer.call(code, func, jsonData)\n    // send a action to contract\n    \n{Tx} async eosplayer.newAccount(name, activeKey, ownerKey)\n    // create a account with public key\n```\n\n'+f.default.help()},e}(h.default);e.Player=y},function(t,e,n){"use strict";(function(e){var r=n(4),i=n(241),o={"Content-Type":"application/x-www-form-urlencoded"};function u(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var s={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=n(114):void 0!==e&&(t=n(114)),t}(),transformRequest:[function(t,e){return i(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(u(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(u(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(t){s.headers[t]={}}),r.forEach(["post","put","patch"],function(t){s.headers[t]=r.merge(o)}),t.exports=s}).call(this,n(8))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o={node:{chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",mockTransactions:function(){return null},expireInSeconds:60,broadcast:!0,debug:!1,sign:!0},urls:["https://mars.fn.eosbixin.com","https://eos.eoscafeblock.com","https://api.eosdublin.io"]},u=function(t){function e(e){var n=t.call(this)||this;n._urls=[],n._nodeConfigs=[];var r=e.node,u=e.urls;return n._conf=i({},o.node,r),n._urls=u,n._nodeConfigs=n._urls.map(function(t){var e={chainId:""};for(var r in n._conf)n._conf.hasOwnProperty(r)&&(e[r]=n._conf[r]);return e.httpEndpoint=t,e}),n}return r(e,t),e}(n(65).Player);e.MultiSourcePlayer=u},function(t,e,n){"use strict";var r=o(n(72)),i=o(n(22));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(30),s=n(62),a=n(107),f=n(3),c=n(63),h=n(225),l=n(226),p=n(111),d=n(110),y=n(227),g=n(228),m=n(229),v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={httpEndpoint:"http://127.0.0.1:8888",debug:!1,verbose:!1,broadcast:!0,logger:{log:function(){var e;return t.verbose?(e=console).log.apply(e,arguments):null},error:function(){var e;return t.verbose?(e=console).error.apply(e,arguments):null}},sign:!0};function n(t,e){Object.keys(e).forEach(function(n){void 0===t[n]&&(t[n]=e[n])})}return n(t,e),n(t.logger,e.logger),function(t){var e=null!=t.httpEndpoint?a(t):null;t.network=e;var n=[],r=h(e,t);n.push(r.abi("eosio.null",m)),n.push(r.abi("eosio.token",y)),n.push(r.abi("eosio",g)),t.chainId||(t.chainId="cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f");e&&function(t,e,n){t.getInfo({}).then(function(t){t.chain_id!==e&&n.log&&n.log("chainId mismatch, signatures will not match transaction authority. expected "+e+" !== actual "+t.chain_id)}).catch(function(t){n.error&&n.error("Warning, unable to validate chainId: "+t.message)})}(e,t.chainId,t.logger);if(null!=t.mockTransactions){if("string"==typeof t.mockTransactions){var o=t.mockTransactions;t.mockTransactions=function(){return o}}f.equal((0,i.default)(t.mockTransactions),"function","config.mockTransactions")}var u=c(t),s=u.structs,d=u.types,v=u.fromBuffer,w=u.toBuffer,_=function(t,e,n,r){var i=t.network,o=Object.assign({},i),u=l(e,i,n,t,r);return function(t,e,n){for(var r in t)if(e[r])throw new TypeError(n+": "+r)}(o,u,"Conflicting methods in EosApi and Transaction Api"),Object.assign(o,u),o}(t,a,s,n);Object.assign(_,{config:function(t){var e=new Set(["httpEndpoint","abiCache","chainId","expireInSeconds"]),n=new Set(["verbose","debug","broadcast","logger","sign"]),r={};return Object.keys(t).forEach(function(i){Object.defineProperty(r,i,{set:function(e){if(!n.has(i))throw new Error("Access denied");t[i]=e},get:function(){if(e.has(i)||n.has(i))return t[i];throw new Error("Access denied")}})}),r}(t),fc:{structs:s,types:d,fromBuffer:v,toBuffer:w,abiCache:r},modules:{format:p}}),t.signProvider||(t.signProvider=b(_,t));return _}(t)};t.exports=v,Object.assign(v,{version:"16.0.0",modules:{format:p,api:a,ecc:u,json:{api:a.api,schema:d},Fcbuffer:s},Testnet:function(t){return console.error("deprecated, change Eos.Testnet(..) to just Eos(..)"),v(t)},Localnet:function(t){return console.error("deprecated, change Eos.Localnet(..) to just Eos(..)"),v(t)}});var b=function(t,e){return function(n){var i,o,s,a,c,h,l,p,d,y,g,m,v,b,w,_,E,A,B,C=n.sign,F=n.buf,x=n.transaction,S=n.optionsKeyProvider;return r.default.async(function(n){for(;;)switch(n.prev=n.next){case 0:if(i=S||e.keyProvider){n.next=3;break}throw new TypeError("This transaction requires a keyProvider for signing");case 3:return o=i,"function"==typeof i&&(o=i({transaction:x})),n.next=7,r.default.awrap(Promise.resolve(o));case 7:if(o=n.sent,Array.isArray(o)||(o=[o]),(o=o.map(function(t){try{return{private:u.PrivateKey(t).toString()}}catch(e){return{public:u.PublicKey(t).toString()}}f(!1,"expecting public or private keys from keyProvider")})).length){n.next=12;break}throw new Error("missing key, check your keyProvider");case 12:if(1!==o.length||!o[0].private){n.next=15;break}return s=o[0].private,n.abrupt("return",C(F,s));case 15:if(null!=e.httpEndpoint){n.next=37;break}for(a=[],c=!0,h=!1,l=void 0,n.prev=20,p=o[Symbol.iterator]();!(c=(d=p.next()).done);c=!0)y=d.value,a.push(C(F,y.private));n.next=28;break;case 24:n.prev=24,n.t0=n.catch(20),h=!0,l=n.t0;case 28:n.prev=28,n.prev=29,!c&&p.return&&p.return();case 31:if(n.prev=31,!h){n.next=34;break}throw l;case 34:return n.finish(31);case 35:return n.finish(28);case 36:return n.abrupt("return",a);case 37:for(g=new Map,m=!0,v=!1,b=void 0,n.prev=41,w=o[Symbol.iterator]();!(m=(_=w.next()).done);m=!0)E=_.value,A=null!=E.private,null!=E.public,A?g.set(u.privateToPublic(E.private),E.private):g.set(E.public,null);n.next=49;break;case 45:n.prev=45,n.t1=n.catch(41),v=!0,b=n.t1;case 49:n.prev=49,n.prev=50,!m&&w.return&&w.return();case 52:if(n.prev=52,!v){n.next=55;break}throw b;case 55:return n.finish(52);case 56:return n.finish(49);case 57:return B=Array.from(g.keys()),n.abrupt("return",t.getRequiredKeys(x,B).then(function(t){var e=t.required_keys;if(!e.length)throw new Error("missing required keys for "+JSON.stringify(x));var n=[],r=[],o=!0,s=!1,a=void 0;try{for(var c,h=e[Symbol.iterator]();!(o=(c=h.next()).done);o=!0){var l=c.value;l=u.PublicKey(l).toString();var p=g.get(l);p?n.push(p):r.push(l)}}catch(t){s=!0,a=t}finally{try{!o&&h.return&&h.return()}finally{if(s)throw a}}0!==r.length&&(f("function"==typeof i,"keyProvider function is needed for private key lookup"),i({pubkeys:r}).forEach(function(t){n.push(t)}));var d=[],y=!0,m=!1,v=void 0;try{for(var b,w=n[Symbol.iterator]();!(y=(b=w.next()).done);y=!0){var _=b.value;d.push(C(F,_))}}catch(t){m=!0,v=t}finally{try{!y&&w.return&&w.return()}finally{if(m)throw v}}return d}));case 59:case"end":return n.stop()}},null,this,[[20,24,28,36],[29,,31,35],[41,45,49,57],[50,,52,56]])}}},function(t,e,n){var r;!function(i){"use strict";var o,u=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,s=Math.ceil,a=Math.floor,f="[BigNumber Error] ",c=f+"Number primitive has more than 15 significant digits: ",h=1e14,l=14,p=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],y=1e7,g=1e9;function m(t){var e=0|t;return t>0||t===e?e:e-1}function v(t){for(var e,n,r=1,i=t.length,o=t[0]+"";r<i;){for(e=t[r++]+"",n=l-e.length;n--;e="0"+e);o+=e}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function b(t,e){var n,r,i=t.c,o=e.c,u=t.s,s=e.s,a=t.e,f=e.e;if(!u||!s)return null;if(n=i&&!i[0],r=o&&!o[0],n||r)return n?r?0:-s:u;if(u!=s)return u;if(n=u<0,r=a==f,!i||!o)return r?0:!i^n?1:-1;if(!r)return a>f^n?1:-1;for(s=(a=i.length)<(f=o.length)?a:f,u=0;u<s;u++)if(i[u]!=o[u])return i[u]>o[u]^n?1:-1;return a==f?0:a>f^n?1:-1}function w(t,e,n,r){if(t<e||t>n||t!==(t<0?s(t):a(t)))throw Error(f+(r||"Argument")+("number"==typeof t?t<e||t>n?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function _(t){var e=t.c.length-1;return m(t.e/l)==e&&t.c[e]%2!=0}function E(t,e){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(e<0?"e":"e+")+e}function A(t,e,n){var r,i;if(e<0){for(i=n+".";++e;i+=n);t=i+t}else if(++e>(r=t.length)){for(i=n,e-=r;--e;i+=n);t+=i}else e<r&&(t=t.slice(0,e)+"."+t.slice(e));return t}(o=function t(e){var n,r,i,o=R.prototype={constructor:R,toString:null,valueOf:null},B=new R(1),C=20,F=4,x=-7,S=21,D=-1e7,k=1e7,T=!1,I=1,M=0,O={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},j="0123456789abcdefghijklmnopqrstuvwxyz";function R(t,e){var n,o,s,f,h,d,y,g,m=this;if(!(m instanceof R))return new R(t,e);if(null==e){if(t instanceof R)return m.s=t.s,m.e=t.e,void(m.c=(t=t.c)?t.slice():t);if((d="number"==typeof t)&&0*t==0){if(m.s=1/t<0?(t=-t,-1):1,t===~~t){for(f=0,h=t;h>=10;h/=10,f++);return m.e=f,void(m.c=[t])}g=String(t)}else{if(g=String(t),!u.test(g))return i(m,g,d);m.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(f=g.indexOf("."))>-1&&(g=g.replace(".","")),(h=g.search(/e/i))>0?(f<0&&(f=h),f+=+g.slice(h+1),g=g.substring(0,h)):f<0&&(f=g.length)}else{if(w(e,2,j.length,"Base"),g=String(t),10==e)return U(m=new R(t instanceof R?t:g),C+m.e+1,F);if(d="number"==typeof t){if(0*t!=0)return i(m,g,d,e);if(m.s=1/t<0?(g=g.slice(1),-1):1,R.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(c+t);d=!1}else m.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(n=j.slice(0,e),f=h=0,y=g.length;h<y;h++)if(n.indexOf(o=g.charAt(h))<0){if("."==o){if(h>f){f=y;continue}}else if(!s&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){s=!0,h=-1,f=0;continue}return i(m,String(t),d,e)}(f=(g=r(g,e,10,m.s)).indexOf("."))>-1?g=g.replace(".",""):f=g.length}for(h=0;48===g.charCodeAt(h);h++);for(y=g.length;48===g.charCodeAt(--y););if(g=g.slice(h,++y)){if(y-=h,d&&R.DEBUG&&y>15&&(t>p||t!==a(t)))throw Error(c+m.s*t);if((f=f-h-1)>k)m.c=m.e=null;else if(f<D)m.c=[m.e=0];else{if(m.e=f,m.c=[],h=(f+1)%l,f<0&&(h+=l),h<y){for(h&&m.c.push(+g.slice(0,h)),y-=l;h<y;)m.c.push(+g.slice(h,h+=l));g=g.slice(h),h=l-g.length}else h-=y;for(;h--;g+="0");m.c.push(+g)}}else m.c=[m.e=0]}function L(t,e,n,r){var i,o,u,s,a;if(null==n?n=F:w(n,0,8),!t.c)return t.toString();if(i=t.c[0],u=t.e,null==e)a=v(t.c),a=1==r||2==r&&u<=x?E(a,u):A(a,u,"0");else if(o=(t=U(new R(t),e,n)).e,s=(a=v(t.c)).length,1==r||2==r&&(e<=o||o<=x)){for(;s<e;a+="0",s++);a=E(a,o)}else if(e-=u,a=A(a,o,"0"),o+1>s){if(--e>0)for(a+=".";e--;a+="0");}else if((e+=o-s)>0)for(o+1==s&&(a+=".");e--;a+="0");return t.s<0&&i?"-"+a:a}function N(t,e){for(var n,r=1,i=new R(t[0]);r<t.length;r++){if(!(n=new R(t[r])).s){i=n;break}e.call(i,n)&&(i=n)}return i}function P(t,e,n){for(var r=1,i=e.length;!e[--i];e.pop());for(i=e[0];i>=10;i/=10,r++);return(n=r+n*l-1)>k?t.c=t.e=null:n<D?t.c=[t.e=0]:(t.e=n,t.c=e),t}function U(t,e,n,r){var i,o,u,f,c,p,y,g=t.c,m=d;if(g){t:{for(i=1,f=g[0];f>=10;f/=10,i++);if((o=e-i)<0)o+=l,u=e,y=(c=g[p=0])/m[i-u-1]%10|0;else if((p=s((o+1)/l))>=g.length){if(!r)break t;for(;g.length<=p;g.push(0));c=y=0,i=1,u=(o%=l)-l+1}else{for(c=f=g[p],i=1;f>=10;f/=10,i++);y=(u=(o%=l)-l+i)<0?0:c/m[i-u-1]%10|0}if(r=r||e<0||null!=g[p+1]||(u<0?c:c%m[i-u-1]),r=n<4?(y||r)&&(0==n||n==(t.s<0?3:2)):y>5||5==y&&(4==n||r||6==n&&(o>0?u>0?c/m[i-u]:0:g[p-1])%10&1||n==(t.s<0?8:7)),e<1||!g[0])return g.length=0,r?(e-=t.e+1,g[0]=m[(l-e%l)%l],t.e=-e||0):g[0]=t.e=0,t;if(0==o?(g.length=p,f=1,p--):(g.length=p+1,f=m[l-o],g[p]=u>0?a(c/m[i-u]%m[u])*f:0),r)for(;;){if(0==p){for(o=1,u=g[0];u>=10;u/=10,o++);for(u=g[0]+=f,f=1;u>=10;u/=10,f++);o!=f&&(t.e++,g[0]==h&&(g[0]=1));break}if(g[p]+=f,g[p]!=h)break;g[p--]=0,f=1}for(o=g.length;0===g[--o];g.pop());}t.e>k?t.c=t.e=null:t.e<D&&(t.c=[t.e=0])}return t}function q(t){var e,n=t.e;return null===n?t.toString():(e=v(t.c),e=n<=x||n>=S?E(e,n):A(e,n,"0"),t.s<0?"-"+e:e)}return R.clone=t,R.ROUND_UP=0,R.ROUND_DOWN=1,R.ROUND_CEIL=2,R.ROUND_FLOOR=3,R.ROUND_HALF_UP=4,R.ROUND_HALF_DOWN=5,R.ROUND_HALF_EVEN=6,R.ROUND_HALF_CEIL=7,R.ROUND_HALF_FLOOR=8,R.EUCLID=9,R.config=R.set=function(t){var e,n;if(null!=t){if("object"!=typeof t)throw Error(f+"Object expected: "+t);if(t.hasOwnProperty(e="DECIMAL_PLACES")&&(w(n=t[e],0,g,e),C=n),t.hasOwnProperty(e="ROUNDING_MODE")&&(w(n=t[e],0,8,e),F=n),t.hasOwnProperty(e="EXPONENTIAL_AT")&&((n=t[e])&&n.pop?(w(n[0],-g,0,e),w(n[1],0,g,e),x=n[0],S=n[1]):(w(n,-g,g,e),x=-(S=n<0?-n:n))),t.hasOwnProperty(e="RANGE"))if((n=t[e])&&n.pop)w(n[0],-g,-1,e),w(n[1],1,g,e),D=n[0],k=n[1];else{if(w(n,-g,g,e),!n)throw Error(f+e+" cannot be zero: "+n);D=-(k=n<0?-n:n)}if(t.hasOwnProperty(e="CRYPTO")){if((n=t[e])!==!!n)throw Error(f+e+" not true or false: "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw T=!n,Error(f+"crypto unavailable");T=n}else T=n}if(t.hasOwnProperty(e="MODULO_MODE")&&(w(n=t[e],0,9,e),I=n),t.hasOwnProperty(e="POW_PRECISION")&&(w(n=t[e],0,g,e),M=n),t.hasOwnProperty(e="FORMAT")){if("object"!=typeof(n=t[e]))throw Error(f+e+" not an object: "+n);O=n}if(t.hasOwnProperty(e="ALPHABET")){if("string"!=typeof(n=t[e])||/^.$|[+-.\s]|(.).*\1/.test(n))throw Error(f+e+" invalid: "+n);j=n}}return{DECIMAL_PLACES:C,ROUNDING_MODE:F,EXPONENTIAL_AT:[x,S],RANGE:[D,k],CRYPTO:T,MODULO_MODE:I,POW_PRECISION:M,FORMAT:O,ALPHABET:j}},R.isBigNumber=function(t){return t instanceof R||t&&!0===t._isBigNumber||!1},R.maximum=R.max=function(){return N(arguments,o.lt)},R.minimum=R.min=function(){return N(arguments,o.gt)},R.random=function(){var t=9007199254740992*Math.random()&2097151?function(){return a(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var n,r,i,o,u,c=0,h=[],p=new R(B);if(null==e?e=C:w(e,0,g),o=s(e/l),T)if(crypto.getRandomValues){for(n=crypto.getRandomValues(new Uint32Array(o*=2));c<o;)(u=131072*n[c]+(n[c+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),n[c]=r[0],n[c+1]=r[1]):(h.push(u%1e14),c+=2);c=o/2}else{if(!crypto.randomBytes)throw T=!1,Error(f+"crypto unavailable");for(n=crypto.randomBytes(o*=7);c<o;)(u=281474976710656*(31&n[c])+1099511627776*n[c+1]+4294967296*n[c+2]+16777216*n[c+3]+(n[c+4]<<16)+(n[c+5]<<8)+n[c+6])>=9e15?crypto.randomBytes(7).copy(n,c):(h.push(u%1e14),c+=7);c=o/7}if(!T)for(;c<o;)(u=t())<9e15&&(h[c++]=u%1e14);for(o=h[--c],e%=l,o&&e&&(u=d[l-e],h[c]=a(o/u)*u);0===h[c];h.pop(),c--);if(c<0)h=[i=0];else{for(i=-1;0===h[0];h.splice(0,1),i-=l);for(c=1,u=h[0];u>=10;u/=10,c++);c<l&&(i-=l-c)}return p.e=i,p.c=h,p}}(),R.sum=function(){for(var t=1,e=arguments,n=new R(e[0]);t<e.length;)n=n.plus(e[t++]);return n},r=function(){function t(t,e,n,r){for(var i,o,u=[0],s=0,a=t.length;s<a;){for(o=u.length;o--;u[o]*=e);for(u[0]+=r.indexOf(t.charAt(s++)),i=0;i<u.length;i++)u[i]>n-1&&(null==u[i+1]&&(u[i+1]=0),u[i+1]+=u[i]/n|0,u[i]%=n)}return u.reverse()}return function(e,r,i,o,u){var s,a,f,c,h,l,p,d,y=e.indexOf("."),g=C,m=F;for(y>=0&&(c=M,M=0,e=e.replace(".",""),l=(d=new R(r)).pow(e.length-y),M=c,d.c=t(A(v(l.c),l.e,"0"),10,i,"0123456789"),d.e=d.c.length),f=c=(p=t(e,r,i,u?(s=j,"0123456789"):(s="0123456789",j))).length;0==p[--c];p.pop());if(!p[0])return s.charAt(0);if(y<0?--f:(l.c=p,l.e=f,l.s=o,p=(l=n(l,d,g,m,i)).c,h=l.r,f=l.e),y=p[a=f+g+1],c=i/2,h=h||a<0||null!=p[a+1],h=m<4?(null!=y||h)&&(0==m||m==(l.s<0?3:2)):y>c||y==c&&(4==m||h||6==m&&1&p[a-1]||m==(l.s<0?8:7)),a<1||!p[0])e=h?A(s.charAt(1),-g,s.charAt(0)):s.charAt(0);else{if(p.length=a,h)for(--i;++p[--a]>i;)p[a]=0,a||(++f,p=[1].concat(p));for(c=p.length;!p[--c];);for(y=0,e="";y<=c;e+=s.charAt(p[y++]));e=A(e,f,s.charAt(0))}return e}}(),n=function(){function t(t,e,n){var r,i,o,u,s=0,a=t.length,f=e%y,c=e/y|0;for(t=t.slice();a--;)s=((i=f*(o=t[a]%y)+(r=c*o+(u=t[a]/y|0)*f)%y*y+s)/n|0)+(r/y|0)+c*u,t[a]=i%n;return s&&(t=[s].concat(t)),t}function e(t,e,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(t[i]!=e[i]){o=t[i]>e[i]?1:-1;break}return o}function n(t,e,n,r){for(var i=0;n--;)t[n]-=i,i=t[n]<e[n]?1:0,t[n]=i*r+t[n]-e[n];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(r,i,o,u,s){var f,c,p,d,y,g,v,b,w,_,E,A,B,C,F,x,S,D=r.s==i.s?1:-1,k=r.c,T=i.c;if(!(k&&k[0]&&T&&T[0]))return new R(r.s&&i.s&&(k?!T||k[0]!=T[0]:T)?k&&0==k[0]||!T?0*D:D/0:NaN);for(w=(b=new R(D)).c=[],D=o+(c=r.e-i.e)+1,s||(s=h,c=m(r.e/l)-m(i.e/l),D=D/l|0),p=0;T[p]==(k[p]||0);p++);if(T[p]>(k[p]||0)&&c--,D<0)w.push(1),d=!0;else{for(C=k.length,x=T.length,p=0,D+=2,(y=a(s/(T[0]+1)))>1&&(T=t(T,y,s),k=t(k,y,s),x=T.length,C=k.length),B=x,E=(_=k.slice(0,x)).length;E<x;_[E++]=0);S=T.slice(),S=[0].concat(S),F=T[0],T[1]>=s/2&&F++;do{if(y=0,(f=e(T,_,x,E))<0){if(A=_[0],x!=E&&(A=A*s+(_[1]||0)),(y=a(A/F))>1)for(y>=s&&(y=s-1),v=(g=t(T,y,s)).length,E=_.length;1==e(g,_,v,E);)y--,n(g,x<v?S:T,v,s),v=g.length,f=1;else 0==y&&(f=y=1),v=(g=T.slice()).length;if(v<E&&(g=[0].concat(g)),n(_,g,E,s),E=_.length,-1==f)for(;e(T,_,x,E)<1;)y++,n(_,x<E?S:T,E,s),E=_.length}else 0===f&&(y++,_=[0]);w[p++]=y,_[0]?_[E++]=k[B]||0:(_=[k[B]],E=1)}while((B++<C||null!=_[0])&&D--);d=null!=_[0],w[0]||w.splice(0,1)}if(s==h){for(p=1,D=w[0];D>=10;D/=10,p++);U(b,o+(b.e=p+c*l-1)+1,u,d)}else b.e=c,b.r=+d;return b}}(),i=function(){var t=/^(-?)0([xbo])(?=\w[\w.]*$)/i,e=/^([^.]+)\.$/,n=/^\.([^.]+)$/,r=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(o,u,s,a){var c,h=s?u:u.replace(i,"");if(r.test(h))o.s=isNaN(h)?null:h<0?-1:1,o.c=o.e=null;else{if(!s&&(h=h.replace(t,function(t,e,n){return c="x"==(n=n.toLowerCase())?16:"b"==n?2:8,a&&a!=c?t:e}),a&&(c=a,h=h.replace(e,"$1").replace(n,"0.$1")),u!=h))return new R(h,c);if(R.DEBUG)throw Error(f+"Not a"+(a?" base "+a:"")+" number: "+u);o.c=o.e=o.s=null}}}(),o.absoluteValue=o.abs=function(){var t=new R(this);return t.s<0&&(t.s=1),t},o.comparedTo=function(t,e){return b(this,new R(t,e))},o.decimalPlaces=o.dp=function(t,e){var n,r,i,o=this;if(null!=t)return w(t,0,g),null==e?e=F:w(e,0,8),U(new R(o),t+o.e+1,e);if(!(n=o.c))return null;if(r=((i=n.length-1)-m(this.e/l))*l,i=n[i])for(;i%10==0;i/=10,r--);return r<0&&(r=0),r},o.dividedBy=o.div=function(t,e){return n(this,new R(t,e),C,F)},o.dividedToIntegerBy=o.idiv=function(t,e){return n(this,new R(t,e),0,1)},o.exponentiatedBy=o.pow=function(t,e){var n,r,i,o,u,c,h,p,d=this;if((t=new R(t)).c&&!t.isInteger())throw Error(f+"Exponent not an integer: "+q(t));if(null!=e&&(e=new R(e)),u=t.e>14,!d.c||!d.c[0]||1==d.c[0]&&!d.e&&1==d.c.length||!t.c||!t.c[0])return p=new R(Math.pow(+q(d),u?2-_(t):+q(t))),e?p.mod(e):p;if(c=t.s<0,e){if(e.c?!e.c[0]:!e.s)return new R(NaN);(r=!c&&d.isInteger()&&e.isInteger())&&(d=d.mod(e))}else{if(t.e>9&&(d.e>0||d.e<-1||(0==d.e?d.c[0]>1||u&&d.c[1]>=24e7:d.c[0]<8e13||u&&d.c[0]<=9999975e7)))return o=d.s<0&&_(t)?-0:0,d.e>-1&&(o=1/o),new R(c?1/o:o);M&&(o=s(M/l+2))}for(u?(n=new R(.5),c&&(t.s=1),h=_(t)):h=(i=Math.abs(+q(t)))%2,p=new R(B);;){if(h){if(!(p=p.times(d)).c)break;o?p.c.length>o&&(p.c.length=o):r&&(p=p.mod(e))}if(i){if(0===(i=a(i/2)))break;h=i%2}else if(U(t=t.times(n),t.e+1,1),t.e>14)h=_(t);else{if(0==(i=+q(t)))break;h=i%2}d=d.times(d),o?d.c&&d.c.length>o&&(d.c.length=o):r&&(d=d.mod(e))}return r?p:(c&&(p=B.div(p)),e?p.mod(e):o?U(p,M,F,void 0):p)},o.integerValue=function(t){var e=new R(this);return null==t?t=F:w(t,0,8),U(e,e.e+1,t)},o.isEqualTo=o.eq=function(t,e){return 0===b(this,new R(t,e))},o.isFinite=function(){return!!this.c},o.isGreaterThan=o.gt=function(t,e){return b(this,new R(t,e))>0},o.isGreaterThanOrEqualTo=o.gte=function(t,e){return 1===(e=b(this,new R(t,e)))||0===e},o.isInteger=function(){return!!this.c&&m(this.e/l)>this.c.length-2},o.isLessThan=o.lt=function(t,e){return b(this,new R(t,e))<0},o.isLessThanOrEqualTo=o.lte=function(t,e){return-1===(e=b(this,new R(t,e)))||0===e},o.isNaN=function(){return!this.s},o.isNegative=function(){return this.s<0},o.isPositive=function(){return this.s>0},o.isZero=function(){return!!this.c&&0==this.c[0]},o.minus=function(t,e){var n,r,i,o,u=this,s=u.s;if(e=(t=new R(t,e)).s,!s||!e)return new R(NaN);if(s!=e)return t.s=-e,u.plus(t);var a=u.e/l,f=t.e/l,c=u.c,p=t.c;if(!a||!f){if(!c||!p)return c?(t.s=-e,t):new R(p?u:NaN);if(!c[0]||!p[0])return p[0]?(t.s=-e,t):new R(c[0]?u:3==F?-0:0)}if(a=m(a),f=m(f),c=c.slice(),s=a-f){for((o=s<0)?(s=-s,i=c):(f=a,i=p),i.reverse(),e=s;e--;i.push(0));i.reverse()}else for(r=(o=(s=c.length)<(e=p.length))?s:e,s=e=0;e<r;e++)if(c[e]!=p[e]){o=c[e]<p[e];break}if(o&&(i=c,c=p,p=i,t.s=-t.s),(e=(r=p.length)-(n=c.length))>0)for(;e--;c[n++]=0);for(e=h-1;r>s;){if(c[--r]<p[r]){for(n=r;n&&!c[--n];c[n]=e);--c[n],c[r]+=h}c[r]-=p[r]}for(;0==c[0];c.splice(0,1),--f);return c[0]?P(t,c,f):(t.s=3==F?-1:1,t.c=[t.e=0],t)},o.modulo=o.mod=function(t,e){var r,i,o=this;return t=new R(t,e),!o.c||!t.s||t.c&&!t.c[0]?new R(NaN):!t.c||o.c&&!o.c[0]?new R(o):(9==I?(i=t.s,t.s=1,r=n(o,t,0,3),t.s=i,r.s*=i):r=n(o,t,0,I),(t=o.minus(r.times(t))).c[0]||1!=I||(t.s=o.s),t)},o.multipliedBy=o.times=function(t,e){var n,r,i,o,u,s,a,f,c,p,d,g,v,b,w,_=this,E=_.c,A=(t=new R(t,e)).c;if(!(E&&A&&E[0]&&A[0]))return!_.s||!t.s||E&&!E[0]&&!A||A&&!A[0]&&!E?t.c=t.e=t.s=null:(t.s*=_.s,E&&A?(t.c=[0],t.e=0):t.c=t.e=null),t;for(r=m(_.e/l)+m(t.e/l),t.s*=_.s,(a=E.length)<(p=A.length)&&(v=E,E=A,A=v,i=a,a=p,p=i),i=a+p,v=[];i--;v.push(0));for(b=h,w=y,i=p;--i>=0;){for(n=0,d=A[i]%w,g=A[i]/w|0,o=i+(u=a);o>i;)n=((f=d*(f=E[--u]%w)+(s=g*f+(c=E[u]/w|0)*d)%w*w+v[o]+n)/b|0)+(s/w|0)+g*c,v[o--]=f%b;v[o]=n}return n?++r:v.splice(0,1),P(t,v,r)},o.negated=function(){var t=new R(this);return t.s=-t.s||null,t},o.plus=function(t,e){var n,r=this,i=r.s;if(e=(t=new R(t,e)).s,!i||!e)return new R(NaN);if(i!=e)return t.s=-e,r.minus(t);var o=r.e/l,u=t.e/l,s=r.c,a=t.c;if(!o||!u){if(!s||!a)return new R(i/0);if(!s[0]||!a[0])return a[0]?t:new R(s[0]?r:0*i)}if(o=m(o),u=m(u),s=s.slice(),i=o-u){for(i>0?(u=o,n=a):(i=-i,n=s),n.reverse();i--;n.push(0));n.reverse()}for((i=s.length)-(e=a.length)<0&&(n=a,a=s,s=n,e=i),i=0;e;)i=(s[--e]=s[e]+a[e]+i)/h|0,s[e]=h===s[e]?0:s[e]%h;return i&&(s=[i].concat(s),++u),P(t,s,u)},o.precision=o.sd=function(t,e){var n,r,i,o=this;if(null!=t&&t!==!!t)return w(t,1,g),null==e?e=F:w(e,0,8),U(new R(o),t,e);if(!(n=o.c))return null;if(r=(i=n.length-1)*l+1,i=n[i]){for(;i%10==0;i/=10,r--);for(i=n[0];i>=10;i/=10,r++);}return t&&o.e+1>r&&(r=o.e+1),r},o.shiftedBy=function(t){return w(t,-p,p),this.times("1e"+t)},o.squareRoot=o.sqrt=function(){var t,e,r,i,o,u=this,s=u.c,a=u.s,f=u.e,c=C+4,h=new R("0.5");if(1!==a||!s||!s[0])return new R(!a||a<0&&(!s||s[0])?NaN:s?u:1/0);if(0==(a=Math.sqrt(+q(u)))||a==1/0?(((e=v(s)).length+f)%2==0&&(e+="0"),a=Math.sqrt(+e),f=m((f+1)/2)-(f<0||f%2),r=new R(e=a==1/0?"1e"+f:(e=a.toExponential()).slice(0,e.indexOf("e")+1)+f)):r=new R(a+""),r.c[0])for((a=(f=r.e)+c)<3&&(a=0);;)if(o=r,r=h.times(o.plus(n(u,o,c,1))),v(o.c).slice(0,a)===(e=v(r.c)).slice(0,a)){if(r.e<f&&--a,"9999"!=(e=e.slice(a-3,a+1))&&(i||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(U(r,r.e+C+2,1),t=!r.times(r).eq(u));break}if(!i&&(U(o,o.e+C+2,0),o.times(o).eq(u))){r=o;break}c+=4,a+=4,i=1}return U(r,r.e+C+1,F,t)},o.toExponential=function(t,e){return null!=t&&(w(t,0,g),t++),L(this,t,e,1)},o.toFixed=function(t,e){return null!=t&&(w(t,0,g),t=t+this.e+1),L(this,t,e)},o.toFormat=function(t,e,n){var r,i=this;if(null==n)null!=t&&e&&"object"==typeof e?(n=e,e=null):t&&"object"==typeof t?(n=t,t=e=null):n=O;else if("object"!=typeof n)throw Error(f+"Argument not an object: "+n);if(r=i.toFixed(t,e),i.c){var o,u=r.split("."),s=+n.groupSize,a=+n.secondaryGroupSize,c=n.groupSeparator||"",h=u[0],l=u[1],p=i.s<0,d=p?h.slice(1):h,y=d.length;if(a&&(o=s,s=a,a=o,y-=o),s>0&&y>0){for(o=y%s||s,h=d.substr(0,o);o<y;o+=s)h+=c+d.substr(o,s);a>0&&(h+=c+d.slice(o)),p&&(h="-"+h)}r=l?h+(n.decimalSeparator||"")+((a=+n.fractionGroupSize)?l.replace(new RegExp("\\d{"+a+"}\\B","g"),"$&"+(n.fractionGroupSeparator||"")):l):h}return(n.prefix||"")+r+(n.suffix||"")},o.toFraction=function(t){var e,r,i,o,u,s,a,c,h,p,y,g,m=this,b=m.c;if(null!=t&&(!(a=new R(t)).isInteger()&&(a.c||1!==a.s)||a.lt(B)))throw Error(f+"Argument "+(a.isInteger()?"out of range: ":"not an integer: ")+q(a));if(!b)return new R(m);for(e=new R(B),h=r=new R(B),i=c=new R(B),g=v(b),u=e.e=g.length-m.e-1,e.c[0]=d[(s=u%l)<0?l+s:s],t=!t||a.comparedTo(e)>0?u>0?e:h:a,s=k,k=1/0,a=new R(g),c.c[0]=0;p=n(a,e,0,1),1!=(o=r.plus(p.times(i))).comparedTo(t);)r=i,i=o,h=c.plus(p.times(o=h)),c=o,e=a.minus(p.times(o=e)),a=o;return o=n(t.minus(r),i,0,1),c=c.plus(o.times(h)),r=r.plus(o.times(i)),c.s=h.s=m.s,y=n(h,i,u*=2,F).minus(m).abs().comparedTo(n(c,r,u,F).minus(m).abs())<1?[h,i]:[c,r],k=s,y},o.toNumber=function(){return+q(this)},o.toPrecision=function(t,e){return null!=t&&w(t,1,g),L(this,t,e,2)},o.toString=function(t){var e,n=this,i=n.s,o=n.e;return null===o?i?(e="Infinity",i<0&&(e="-"+e)):e="NaN":(e=v(n.c),null==t?e=o<=x||o>=S?E(e,o):A(e,o,"0"):(w(t,2,j.length,"Base"),e=r(A(e,o,"0"),10,t,i,!0)),i<0&&n.c[0]&&(e="-"+e)),e},o.valueOf=o.toJSON=function(){return q(this)},o._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(o[Symbol.toStringTag]="BigNumber",o[Symbol.for("nodejs.util.inspect.custom")]=o.valueOf),null!=e&&R.set(e),R}()).default=o.BigNumber=o,void 0===(r=function(){return o}.call(e,n,e,t))||(t.exports=r)}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(230))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(21),s=n(234),a=n(65),f=n(39),c=n(38).createLogger("scatterPlayer"),h={ERR_GET_SCATTER_FAILED:"ERR_GET_SCATTER_FAILED",ERR_GET_IDENTITY_FAILED:"ERR_GET_IDENTITY_FAILED",ERR_LOGOUT_FAILED:"ERR_LOGOUT_FAILED",ERR_CONF_NOT_FOUND:"ERR_CONF_NOT_FOUND"},l=function(t){function e(e){var n=t.call(this)||this;return n._networks=e,n.identityReceiver=[],n.storage=new s.default({network_name:"dev",lang:"ch"}),n._eosClient=null,n.events.enableEvents(h),c.info("eos player created: \n"+n.netName+" \n"+JSON.stringify(n.netConf,null,2)),n}return r(e,t),e.prototype.switchNetwork=function(t){t in this._networks?(this.storage.set("network_name",t),this._eosClient=null,c.info("network changed to "+this.netName+".")):c.warning("network "+t+" cannot find.")},e.prototype.setNetConf=function(t,e){this._networks[t]=e},Object.defineProperty(e.prototype,"netName",{get:function(){return this.storage.get("network_name")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"netConf",{get:function(){var t=this._networks[this.netName];return t||this.events.emitEvent(h.ERR_CONF_NOT_FOUND,new Error("cannot find config of "+this.netName)),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scatter",{get:function(){var t=window.scatter;if(!t){var e=new Error("scatter cannot found");this.events.emitEvent(h.ERR_GET_SCATTER_FAILED,e)}return t},enumerable:!0,configurable:!0}),e.prototype.getScatterAsync=function(t){return void 0===t&&(t=100),i(this,void 0,void 0,function(){var e;return o(this,function(n){switch(n.label){case 0:return window.scatter||!t--?[3,2]:(c.verbose("get scatter failed, retry :",t),[4,f.forMs(100)]);case 1:return n.sent(),[3,0];case 2:return window.scatter||(e=new Error("scatter cannot found"),this.events.emitEvent(h.ERR_GET_SCATTER_FAILED,e)),[2,window.scatter]}})})},e.prototype.login=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this.getIdentity()]})})},e.prototype.logout=function(){return i(this,void 0,void 0,function(){var t,e;return o(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,this.getScatterAsync()];case 1:return[4,n.sent().forgetIdentity()];case 2:return t=n.sent(),c.info("log out from "+this.storage.get("latest_chain_id")),[2,t];case 3:return e=n.sent(),this.events.emitEvent(h.ERR_LOGOUT_FAILED,e),[3,4];case 4:return[2]}})})},Object.defineProperty(e.prototype,"eosClient",{get:function(){return this._eosClient||(console.log("this.scatter",this.scatter),console.log("this.netConf",this.netConf),console.log("Eos",u.Eos),this._eosClient=this.scatter.eos(this.netConf,u.Eos,{},this.netConf.protocol)),this._eosClient},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return i(this,void 0,void 0,function(){function t(t){i=t}var e,n,r,i,u=this;return o(this,function(o){switch(o.label){case 0:return[4,this.getScatterAsync()];case 1:return e=o.sent(),n=this.storage.get("latest_chain_id"),r=this.netConf.chainId,n&&r!==n?(c.info("a changing of chain_id detected: "+n+" -> "+r+" "),[4,this.logout()]):[3,3];case 2:o.sent(),o.label=3;case 3:return this.storage.set("latest_chain_id",r),this.identityReceiver.push(t),this.identityReceiver.length<=1&&e.getIdentity({accounts:[this.netConf]}).then(function(){u.identityReceiver.forEach(function(t){return t(e.identity.accounts.find(function(t){return"eos"===t.blockchain}))}),u.identityReceiver=[]}).catch(function(t){u.identityReceiver.forEach(function(e){return e(t)}),u.identityReceiver=[]}),[4,f.forCondition(function(){return!!i})];case 4:if(o.sent(),i instanceof Error||i.isError)throw this.events.emitEvent(h.ERR_GET_IDENTITY_FAILED,i),i;return[2,i]}})})},e.prototype.sign=function(t){return i(this,void 0,void 0,function(){var e,n,r,i;return o(this,function(o){switch(o.label){case 0:return[4,this.getIdentity()];case 1:return e=o.sent(),[4,this.chain.getPubKeys(e.name,e.authority)];case 2:n=o.sent(),r="",i=0,o.label=3;case 3:if(!(i<n.length))return[3,8];o.label=4;case 4:return o.trys.push([4,6,,7]),c.info("try sign ("+JSON.stringify(n[i])+") : "+t),[4,this.scatter.getArbitrarySignature(n[i].key,t)];case 5:return r=o.sent(),[3,8];case 6:return o.sent(),c.warning("try pub key failed "+n[i]),[3,7];case 7:return i++,[3,3];case 8:return[2,r]}})})},e.prototype.help=function(){return t.prototype.help.call(this)+"\n  \n## Usage of eosplayer (for broswer)\n  \n### Events\n\nERR_GET_SCATTER_FAILED  \nERR_GET_IDENTITY_FAILED  \nERR_LOGOUT_FAILED  \n\n### APIs\n\n```js\n{void} eosplayer.switchNetwork(val) // switch network\n{void} eosplayer.setNetConf(network_name, conf) // add a network config at runtime    \n\nget {Scatter} eosplayer.scatter // get scatter instance\nget {Scatter} async getScatterAsync(maxTry = 100) // get scatter instance\n\nget {string} eosplayer.netName // get current network name\nget {string} eosplayer.netConf // get current network config\n        \nasync {Identity} eosplayer.login() // let user allow you using identity\nasync {void} eosplayer.logout() // return back the identity\n\nasync {string} sign(message) // sign a message with current identity\n```\n\n## Imported libs\n\n```js\nwindow.eosjs = Eos; /** the eosjs lib @see {@url https://www.npmjs.com/package/eosjs} */  \nwindow.env = env; /** {isPc} */  \nwindow.idb = idb; /** idb lib for browser storage @see {@url https://www.npmjs.com/package/idb } */ \nwindow.BigNumber = BigNumber; /** big number @see {@url https://www.npmjs.com/package/bignumber.js} */\n\nwindow.kh.eos.Player\nwindow.kh.eos.ScatterPlayer\nwindow.eosplayer = new ScatterPlayer(networks);  \n```        \n"},e}(a.Player);e.ScatterPlayer=l},function(t,e,n){t.exports=n(122)},function(t,e,n){"use strict";var r=n(31),i=n(74),o=n(77),u=n(15),s=n(25),a=n(129),f=n(50),c=n(136),h=n(5)("iterator"),l=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,y,g,m){a(n,e,d);var v,b,w,_=function(t){if(!l&&t in C)return C[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},E=e+" Iterator",A="values"==y,B=!1,C=t.prototype,F=C[h]||C["@@iterator"]||y&&C[y],x=F||_(y),S=y?A?_("entries"):x:void 0,D="Array"==e&&C.entries||F;if(D&&(w=c(D.call(new t)))!==Object.prototype&&w.next&&(f(w,E,!0),r||"function"==typeof w[h]||u(w,h,p)),A&&F&&"values"!==F.name&&(B=!0,x=function(){return F.call(this)}),r&&!m||!l&&!B&&C[h]||u(C,h,x),s[e]=x,s[E]=p,y)if(v={values:A?x:_("values"),keys:g?x:_("keys"),entries:S},m)for(b in v)b in C||o(C,b,v[b]);else i(i.P+i.F*(l||B),e,v);return v}},function(t,e,n){var r=n(7),i=n(10),o=n(127),u=n(15),s=n(11),a=function(t,e,n){var f,c,h,l=t&a.F,p=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=t&a.W,v=p?i:i[e]||(i[e]={}),b=v.prototype,w=p?r:d?r[e]:(r[e]||{}).prototype;for(f in p&&(n=e),n)(c=!l&&w&&void 0!==w[f])&&s(v,f)||(h=c?w[f]:n[f],v[f]=p&&"function"!=typeof w[f]?n[f]:g&&c?o(h,r):m&&w[f]==h?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(h):y&&"function"==typeof h?o(Function.call,h):h,y&&((v.virtual||(v.virtual={}))[f]=h,t&a.R&&b&&!b[f]&&u(b,f,h)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,n){t.exports=!n(17)&&!n(32)(function(){return 7!=Object.defineProperty(n(76)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(24),i=n(7).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){t.exports=n(15)},function(t,e,n){var r=n(23),i=n(130),o=n(49),u=n(47)("IE_PROTO"),s=function(){},a=function(){var t,e=n(76)("iframe"),r=o.length;for(e.style.display="none",n(135).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[o[r]];return a()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[u]=t):n=a(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(11),i=n(18),o=n(132)(!1),u=n(47)("IE_PROTO");t.exports=function(t,e){var n,s=i(t),a=0,f=[];for(n in s)n!=u&&r(s,n)&&f.push(n);for(;e.length>a;)r(s,n=e[a++])&&(~o(f,n)||f.push(n));return f}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(79),i=n(49).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";(function(e){var r=n(84),i=n(19),o=n(156),u=n(3),s=n(28),a=n(37),f=n(14),c=i.Long;function h(t,n,r,c,h){if(!(t=a(t)))throw new TypeError("private_key is required");if(!(n=s(n)))throw new TypeError("public_key is required");if(!(r=p(r)))throw new TypeError("nonce is required");if(!e.isBuffer(c)){if("string"!=typeof c)throw new TypeError("message should be buffer or string");c=new e(c,"binary")}if(h&&"number"!=typeof h)throw new TypeError("checksum should be a number");var l=t.getSharedSecret(n),y=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);y.writeUint64(r),y.append(l.toString("binary"),"binary"),y=new e(y.copy(0,y.offset).toBinary(),"binary");var g=f.sha512(y),m=g.slice(32,48),v=g.slice(0,32),b=f.sha256(g);if(b=b.slice(0,4),b=i.fromBinary(b.toString("binary"),i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN).readUint32(),h){if(b!==h)throw new Error("Invalid key");c=function(t,n,r){u(t,"Missing cipher text"),t=d(t);var i=o.createDecipheriv("aes-256-cbc",n,r);return t=e.concat([i.update(t),i.final()])}(c,v,m)}else c=function(t,n,r){u(t,"Missing plain text"),t=d(t);var i=o.createCipheriv("aes-256-cbc",n,r);return t=e.concat([i.update(t),i.final()])}(c,v,m);return{nonce:r,message:c,checksum:b}}t.exports={encrypt:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){if(null===l){var t=new Uint8Array(r(2));l=parseInt(t[0]<<8|t[1],10)}var e=c.fromNumber(Date.now()),n=++l%65535;return(e=e.shiftLeft(16).or(c.fromNumber(n))).toString()}();return h(t,e,i,n)},decrypt:function(t,e,n,r,i){return h(t,e,n,r,i).message}};var l=null,p=function(t){return t?c.isLong(t)?t:c.fromString(t):t},d=function(t){return t?e.isBuffer(t)?t:new e(t,"binary"):t}}).call(this,n(2).Buffer)},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";(function(e,r){var i=n(0).Buffer,o=e.crypto||e.msCrypto;o&&o.getRandomValues?t.exports=function(t,n){if(t>65536)throw new Error("requested too many random bytes");var u=new e.Uint8Array(t);t>0&&o.getRandomValues(u);var s=i.from(u.buffer);if("function"==typeof n)return r.nextTick(function(){n(null,s)});return s}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,n(6),n(8))},function(t,e,n){var r={ECB:n(158),CBC:n(159),CFB:n(160),CFB8:n(161),CFB1:n(162),OFB:n(163),CTR:n(86),GCM:n(86)},i=n(88);for(var o in i)i[o].module=r[i[o].mode];t.exports=i},function(t,e,n){var r=n(26),i=n(0).Buffer,o=n(87);function u(t){var e=t._cipher.encryptBlockRaw(t._prev);return o(t._prev),e}e.encrypt=function(t,e){var n=Math.ceil(e.length/16),o=t._cache.length;t._cache=i.concat([t._cache,i.allocUnsafe(16*n)]);for(var s=0;s<n;s++){var a=u(t),f=o+16*s;t._cache.writeUInt32BE(a[0],f+0),t._cache.writeUInt32BE(a[1],f+4),t._cache.writeUInt32BE(a[2],f+8),t._cache.writeUInt32BE(a[3],f+12)}var c=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),r(e,c)}},function(t,e){t.exports=function(t){for(var e,n=t.length;n--;){if(255!==(e=t.readUInt8(n))){e++,t.writeUInt8(e,n);break}t.writeUInt8(0,n)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,n){var r=n(35),i=n(0).Buffer,o=n(12),u=n(1),s=n(175),a=n(26),f=n(87);function c(t,e,n,u){o.call(this);var a=i.alloc(4,0);this._cipher=new r.AES(e);var c=this._cipher.encryptBlock(a);this._ghash=new s(c),n=function(t,e,n){if(12===e.length)return t._finID=i.concat([e,i.from([0,0,0,1])]),i.concat([e,i.from([0,0,0,2])]);var r=new s(n),o=e.length,u=o%16;r.update(e),u&&(u=16-u,r.update(i.alloc(u,0))),r.update(i.alloc(8,0));var a=8*o,c=i.alloc(8);c.writeUIntBE(a,0,8),r.update(c),t._finID=r.state;var h=i.from(t._finID);return f(h),h}(this,n,c),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=u,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}u(c,o),c.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=i.alloc(e,0),this._ghash.update(e))}this._called=!0;var n=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(n),this._len+=t.length,n},c.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=a(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var n=0;t.length!==e.length&&n++;for(var r=Math.min(t.length,e.length),i=0;i<r;++i)n+=t[i]^e[i];return n}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},c.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},c.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},c.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=c},function(t,e,n){t.exports=i;var r=n(55).EventEmitter;function i(){r.call(this)}n(1)(i,r),i.Readable=n(56),i.Writable=n(171),i.Duplex=n(172),i.Transform=n(173),i.PassThrough=n(174),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",a));var u=!1;function s(){u||(u=!0,t.end())}function a(){u||(u=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(c(),0===r.listenerCount(this,"error"))throw t}function c(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",a),n.removeListener("error",f),t.removeListener("error",f),n.removeListener("end",c),n.removeListener("close",c),t.removeListener("close",c)}return n.on("error",f),t.on("error",f),n.on("end",c),n.on("close",c),t.on("close",c),t.emit("pipe",n),t}},function(t,e,n){"use strict";(function(e,r){var i=n(36);t.exports=b;var o,u=n(83);b.ReadableState=v;n(55).EventEmitter;var s=function(t,e){return t.listeners(e).length},a=n(92),f=n(0).Buffer,c=e.Uint8Array||function(){};var h=n(27);h.inherits=n(1);var l=n(164),p=void 0;p=l&&l.debuglog?l.debuglog("stream"):function(){};var d,y=n(165),g=n(93);h.inherits(b,a);var m=["error","close","destroy","pause","resume"];function v(t,e){o=o||n(13),t=t||{};var r=e instanceof o;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,u=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(u||0===u)?u:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new y,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=n(58).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function b(t){if(o=o||n(13),!(this instanceof b))return new b(t);this._readableState=new v(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function w(t,e,n,r,i){var o,u=t._readableState;null===e?(u.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,B(t)}(t,u)):(i||(o=function(t,e){var n;(function(t){return f.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(u,e)),o?t.emit("error",o):u.objectMode||e&&e.length>0?("string"==typeof e||u.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),r?u.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,u,e,!0):u.ended?t.emit("error",new Error("stream.push() after EOF")):(u.reading=!1,u.decoder&&!n?(e=u.decoder.write(e),u.objectMode||0!==e.length?_(t,u,e,!1):F(t,u)):_(t,u,e,!1))):r||(u.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(u)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&B(t)),F(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=f.from(t,e),e=""),n=!0),w(this,t,e,!1,n)},b.prototype.unshift=function(t){return w(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return d||(d=n(58).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var E=8388608;function A(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=E?t=E:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function B(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(C,t):C(t))}function C(t){p("emit readable"),t.emit("readable"),k(t)}function F(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(x,t,e))}function x(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function S(t){p("readable nexttick read 0"),t.read(0)}function D(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),k(t),e.flowing&&!e.reading&&t.read(0)}function k(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function T(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,u=t>o.length?o.length:t;if(u===o.length?i+=o:i+=o.slice(0,t),0===(t-=u)){u===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(u));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=f.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,u=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,u),0===(t-=u)){u===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(u));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function I(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(M,e,t))}function M(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function O(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}b.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?I(this):B(this),null;if(0===(t=A(t,e))&&e.ended)return 0===e.length&&I(this),null;var r,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=A(n,e))),null===(r=t>0?T(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&I(this)),null!==r&&this.emit("data",r),r},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,p("pipe count=%d opts=%j",o.pipesCount,e);var a=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?c:b;function f(e,r){p("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,p("cleanup"),t.removeListener("close",m),t.removeListener("finish",v),t.removeListener("drain",h),t.removeListener("error",g),t.removeListener("unpipe",f),n.removeListener("end",c),n.removeListener("end",b),n.removeListener("data",y),l=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function c(){p("onend"),t.end()}o.endEmitted?i.nextTick(a):n.once("end",a),t.on("unpipe",f);var h=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,k(t))}}(n);t.on("drain",h);var l=!1;var d=!1;function y(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==O(o.pipes,t))&&!l&&(p("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,d=!0),n.pause())}function g(e){p("onerror",e),b(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",v),b()}function v(){p("onfinish"),t.removeListener("close",m),b()}function b(){p("unpipe"),n.unpipe(t)}return n.on("data",y),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?u(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",g),t.once("close",m),t.once("finish",v),t.emit("pipe",n),o.flowing||(p("pipe resume"),n.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var u=O(e.pipes,t);return-1===u?this:(e.pipes.splice(u,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},b.prototype.on=function(t,e){var n=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&B(this):i.nextTick(S,this))}return n},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(D,t,e))}(this,t)),this},b.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(p("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(p("wrapped data"),n.decoder&&(i=n.decoder.write(i)),!n.objectMode||null!==i&&void 0!==i)&&((n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){p("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=T}).call(this,n(6),n(8))},function(t,e,n){t.exports=n(55).EventEmitter},function(t,e,n){"use strict";var r=n(36);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return o||u?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=o;var r=n(13),i=n(27);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",u)}function u(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){s(t,e,n)}):s(this,null,null)}function s(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(1),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){var r=n(35),i=n(0).Buffer,o=n(12);function u(t,e,n,u){o.call(this),this._cipher=new r.AES(e),this._prev=i.from(n),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=u,this._mode=t}n(1)(u,o),u.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},u.prototype._final=function(){this._cipher.scrub()},t.exports=u},function(t,e,n){var r=n(0).Buffer,i=n(59);t.exports=function(t,e,n,o){if(r.isBuffer(t)||(t=r.from(t,"binary")),e&&(r.isBuffer(e)||(e=r.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var u=n/8,s=r.alloc(u),a=r.alloc(o||0),f=r.alloc(0);u>0||o>0;){var c=new i;c.update(f),c.update(t),e&&c.update(e),f=c.digest();var h=0;if(u>0){var l=s.length-u;h=Math.min(u,f.length),f.copy(s,l,0,h),u-=h}if(h<f.length&&o>0){var p=a.length-o,d=Math.min(o,f.length-h);f.copy(a,p,h,h+d),o-=d}}return f.fill(0),{key:s,iv:a}}},function(t,e,n){"use strict";var r=n(0).Buffer,i=n(90).Transform;function o(t){i.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(1)(o,i),o.prototype._transform=function(t,e,n){var r=null;try{this.update(t,e)}catch(t){r=t}n(r)},o.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},o.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var n=this._block,i=0;this._blockOffset+t.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)n[o++]=t[i++];this._update(),this._blockOffset=0}for(;i<t.length;)n[this._blockOffset++]=t[i++];for(var u=0,s=8*t.length;s>0;++u)this._length[u]+=s,(s=this._length[u]/4294967296|0)>0&&(this._length[u]-=4294967296*s);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return e},o.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=o},function(t,e,n){var r=n(3),i=n(0).Buffer,o=n(9),u=o.valueOf(3);function s(t,e,n,i){r.notStrictEqual(i,void 0,"Missing Z coordinate"),this.curve=t,this.x=e,this.y=n,this.z=i,this._zInv=null,this.compressed=!0}Object.defineProperty(s.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(s.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(s.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),s.fromAffine=function(t,e,n){return new s(t,e,n,o.ONE)},s.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},s.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new s(this.curve,this.x,t,this.z)},s.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var e=this.x,n=this.y,r=t.x,i=t.y.multiply(this.z).subtract(n.multiply(t.z)).mod(this.curve.p),o=r.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p);if(0===o.signum())return 0===i.signum()?this.twice():this.curve.infinity;var a=o.square(),f=a.multiply(o),c=e.multiply(a),h=i.square().multiply(this.z),l=h.subtract(c.shiftLeft(1)).multiply(t.z).subtract(f).multiply(o).mod(this.curve.p),p=c.multiply(u).multiply(i).subtract(n.multiply(f)).subtract(h.multiply(i)).multiply(t.z).add(i.multiply(f)).mod(this.curve.p),d=f.multiply(this.z).multiply(t.z).mod(this.curve.p);return new s(this.curve,l,p,d)},s.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,e=this.y,n=e.multiply(this.z).mod(this.curve.p),r=n.multiply(e).mod(this.curve.p),i=this.curve.a,o=t.square().multiply(u);0!==i.signum()&&(o=o.add(this.z.square().multiply(i)));var a=(o=o.mod(this.curve.p)).square().subtract(t.shiftLeft(3).multiply(r)).shiftLeft(1).multiply(n).mod(this.curve.p),f=o.multiply(u).multiply(t).subtract(r.shiftLeft(1)).shiftLeft(2).multiply(r).subtract(o.pow(3)).mod(this.curve.p),c=n.pow(3).shiftLeft(3).mod(this.curve.p);return new s(this.curve,a,f,c)},s.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var e=t,n=e.multiply(u),r=this.negate(),i=this,o=n.bitLength()-2;o>0;--o){var s=n.testBit(o),a=e.testBit(o);i=i.twice(),s!==a&&(i=i.add(s?this:r))}return i},s.prototype.multiplyTwo=function(t,e,n){for(var r=Math.max(t.bitLength(),n.bitLength())-1,i=this.curve.infinity,o=this.add(e);r>=0;){var u=t.testBit(r),s=n.testBit(r);i=i.twice(),u?i=s?i.add(o):i.add(this):s&&(i=i.add(e)),--r}return i},s.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return i.alloc(1,0);var e,n=this.affineX,r=this.affineY,o=this.curve.pLength;return t?(e=i.allocUnsafe(1+o)).writeUInt8(r.isEven()?2:3,0):((e=i.allocUnsafe(1+o+o)).writeUInt8(4,0),r.toBuffer(o).copy(e,1+o)),n.toBuffer(o).copy(e,1),e},s.decodeFrom=function(t,e){var n,i=e.readUInt8(0),u=4!==i,a=Math.floor((t.p.bitLength()+7)/8),f=o.fromBuffer(e.slice(1,1+a));if(u){r.equal(e.length,a+1,"Invalid sequence length"),r(2===i||3===i,"Invalid sequence tag");var c=3===i;n=t.pointFromX(c,f)}else{r.equal(e.length,1+a+a,"Invalid sequence length");var h=o.fromBuffer(e.slice(1+a));n=s.fromAffine(t,f,h)}return n.compressed=u,n},s.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},t.exports=s},function(t,e,n){function r(t,e,n){if(!(this instanceof r))return new r(t,e,n);null!=t&&("number"==typeof t?this.fromNumber(t,e,n):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}var i=r.prototype;i.__bigi=n(179).version,r.isBigInteger=function(t,e){return t&&t.__bigi&&(!e||t.__bigi===i.__bigi)},r.prototype.am=function(t,e,n,r,i,o){for(;--o>=0;){var u=e*this[t++]+n[r]+i;i=Math.floor(u/67108864),n[r++]=67108863&u}return i},r.prototype.DB=26,r.prototype.DM=67108863;var o=r.prototype.DV=1<<26;r.prototype.FV=Math.pow(2,52),r.prototype.F1=26,r.prototype.F2=0;var u,s,a="0123456789abcdefghijklmnopqrstuvwxyz",f=new Array;for(u="0".charCodeAt(0),s=0;s<=9;++s)f[u++]=s;for(u="a".charCodeAt(0),s=10;s<36;++s)f[u++]=s;for(u="A".charCodeAt(0),s=10;s<36;++s)f[u++]=s;function c(t){return a.charAt(t)}function h(t,e){var n=f[t.charCodeAt(e)];return null==n?-1:n}function l(t){var e=new r;return e.fromInt(t),e}function p(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}function d(t){this.m=t}function y(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function g(t,e){return t&e}function m(t,e){return t|e}function v(t,e){return t^e}function b(t,e){return t&~e}function w(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function _(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function E(){}function A(t){return t}function B(t){this.r2=new r,this.q3=new r,r.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}d.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},d.prototype.revert=function(t){return t},d.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},d.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},d.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},y.prototype.convert=function(t){var e=new r;return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(r.ZERO)>0&&this.m.subTo(e,e),e},y.prototype.revert=function(t){var e=new r;return t.copyTo(e),this.reduce(e),e},y.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],r=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},y.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},y.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},i.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},i.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+o:this.t=0},i.fromString=function(t,e){var n;if(16==e)n=4;else if(8==e)n=3;else if(256==e)n=8;else if(2==e)n=1;else if(32==e)n=5;else{if(4!=e)return void this.fromRadix(t,e);n=2}this.t=0,this.s=0;for(var i=t.length,o=!1,u=0;--i>=0;){var s=8==n?255&t[i]:h(t,i);s<0?"-"==t.charAt(i)&&(o=!0):(o=!1,0==u?this[this.t++]=s:u+n>this.DB?(this[this.t-1]|=(s&(1<<this.DB-u)-1)<<u,this[this.t++]=s>>this.DB-u):this[this.t-1]|=s<<u,(u+=n)>=this.DB&&(u-=this.DB))}8==n&&0!=(128&t[0])&&(this.s=-1,u>0&&(this[this.t-1]|=(1<<this.DB-u)-1<<u)),this.clamp(),o&&r.ZERO.subTo(this,this)},i.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},i.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},i.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},i.lShiftTo=function(t,e){var n,r=t%this.DB,i=this.DB-r,o=(1<<i)-1,u=Math.floor(t/this.DB),s=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)e[n+u+1]=this[n]>>i|s,s=(this[n]&o)<<r;for(n=u-1;n>=0;--n)e[n]=0;e[u]=s,e.t=this.t+u+1,e.s=this.s,e.clamp()},i.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var r=t%this.DB,i=this.DB-r,o=(1<<r)-1;e[0]=this[n]>>r;for(var u=n+1;u<this.t;++u)e[u-n-1]|=(this[u]&o)<<i,e[u-n]=this[u]>>r;r>0&&(e[this.t-n-1]|=(this.s&o)<<i),e.t=this.t-n,e.clamp()}},i.subTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]-t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r-=t[n],e[n++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[n++]=this.DV+r:r>0&&(e[n++]=r),e.t=n,e.clamp()},i.multiplyTo=function(t,e){var n=this.abs(),i=t.abs(),o=n.t;for(e.t=o+i.t;--o>=0;)e[o]=0;for(o=0;o<i.t;++o)e[o+n.t]=n.am(0,i[o],e,o,0,n.t);e.s=0,e.clamp(),this.s!=t.s&&r.ZERO.subTo(e,e)},i.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var r=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,r,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},i.divRemTo=function(t,e,n){var i=t.abs();if(!(i.t<=0)){var o=this.abs();if(o.t<i.t)return null!=e&&e.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=new r);var u=new r,s=this.s,a=t.s,f=this.DB-p(i[i.t-1]);f>0?(i.lShiftTo(f,u),o.lShiftTo(f,n)):(i.copyTo(u),o.copyTo(n));var c=u.t,h=u[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?u[c-2]>>this.F2:0),d=this.FV/l,y=(1<<this.F1)/l,g=1<<this.F2,m=n.t,v=m-c,b=null==e?new r:e;for(u.dlShiftTo(v,b),n.compareTo(b)>=0&&(n[n.t++]=1,n.subTo(b,n)),r.ONE.dlShiftTo(c,b),b.subTo(u,u);u.t<c;)u[u.t++]=0;for(;--v>=0;){var w=n[--m]==h?this.DM:Math.floor(n[m]*d+(n[m-1]+g)*y);if((n[m]+=u.am(0,w,n,v,0,c))<w)for(u.dlShiftTo(v,b),n.subTo(b,n);n[m]<--w;)n.subTo(b,n)}null!=e&&(n.drShiftTo(c,e),s!=a&&r.ZERO.subTo(e,e)),n.t=c,n.clamp(),f>0&&n.rShiftTo(f,n),s<0&&r.ZERO.subTo(n,n)}}},i.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},i.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},i.exp=function(t,e){if(t>4294967295||t<1)return r.ONE;var n=new r,i=new r,o=e.convert(this),u=p(t)-1;for(o.copyTo(n);--u>=0;)if(e.sqrTo(n,i),(t&1<<u)>0)e.mulTo(i,o,n);else{var s=n;n=i,i=s}return e.revert(n)},i.toString=function(t){var e;if(this.s<0)return"-"+this.negate().toString(t);if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,r=(1<<e)-1,i=!1,o="",u=this.t,s=this.DB-u*this.DB%e;if(u-- >0)for(s<this.DB&&(n=this[u]>>s)>0&&(i=!0,o=c(n));u>=0;)s<e?(n=(this[u]&(1<<s)-1)<<e-s,n|=this[--u]>>(s+=this.DB-e)):(n=this[u]>>(s-=e)&r,s<=0&&(s+=this.DB,--u)),n>0&&(i=!0),i&&(o+=c(n));return i?o:"0"},i.negate=function(){var t=new r;return r.ZERO.subTo(this,t),t},i.abs=function(){return this.s<0?this.negate():this},i.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},i.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+p(this[this.t-1]^this.s&this.DM)},i.byteLength=function(){return this.bitLength()>>3},i.mod=function(t){var e=new r;return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(r.ZERO)>0&&t.subTo(e,e),e},i.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new d(e):new y(e),this.exp(t,n)},E.prototype.convert=A,E.prototype.revert=A,E.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},E.prototype.sqrTo=function(t,e){t.squareTo(e)},B.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=new r;return t.copyTo(e),this.reduce(e),e},B.prototype.revert=function(t){return t},B.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},B.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},B.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],F=(1<<26)/C[C.length-1];i.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},i.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),i=l(n),o=new r,u=new r,s="";for(this.divRemTo(i,o,u);o.signum()>0;)s=(n+u.intValue()).toString(t).substr(1)+s,o.divRemTo(i,o,u);return u.intValue().toString(t)+s},i.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var n=this.chunkSize(e),i=Math.pow(e,n),o=!1,u=0,s=0,a=0;a<t.length;++a){var f=h(t,a);f<0?"-"==t.charAt(a)&&0==this.signum()&&(o=!0):(s=e*s+f,++u>=n&&(this.dMultiply(i),this.dAddOffset(s,0),u=0,s=0))}u>0&&(this.dMultiply(Math.pow(e,u)),this.dAddOffset(s,0)),o&&r.ZERO.subTo(this,this)},i.fromNumber=function(t,e,n){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,n),this.testBit(t-1)||this.bitwiseTo(r.ONE.shiftLeft(t-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(r.ONE.shiftLeft(t-1),this);else{var i=new Array,o=7&t;i.length=1+(t>>3),e.nextBytes(i),o>0?i[0]&=(1<<o)-1:i[0]=0,this.fromString(i,256)}},i.bitwiseTo=function(t,e,n){var r,i,o=Math.min(t.t,this.t);for(r=0;r<o;++r)n[r]=e(this[r],t[r]);if(t.t<this.t){for(i=t.s&this.DM,r=o;r<this.t;++r)n[r]=e(this[r],i);n.t=this.t}else{for(i=this.s&this.DM,r=o;r<t.t;++r)n[r]=e(i,t[r]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},i.changeBit=function(t,e){var n=r.ONE.shiftLeft(t);return this.bitwiseTo(n,e,n),n},i.addTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]+t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r+=t[n],e[n++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[n++]=r:r<-1&&(e[n++]=this.DV+r),e.t=n,e.clamp()},i.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},i.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},i.multiplyLowerTo=function(t,e,n){var r,i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(r=n.t-this.t;i<r;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(r=Math.min(t.t,e);i<r;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},i.multiplyUpperTo=function(t,e,n){--e;var r=n.t=this.t+t.t-e;for(n.s=0;--r>=0;)n[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)n[this.t+r-e]=this.am(e-r,t[r],n,0,0,this.t+r-e);n.clamp(),n.drShiftTo(1,n)},i.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var r=this.t-1;r>=0;--r)n=(e*n+this[r])%t;return n},i.millerRabin=function(t){var e=this.subtract(r.ONE),n=e.getLowestSetBit();if(n<=0)return!1;var i=e.shiftRight(n);(t=t+1>>1)>C.length&&(t=C.length);for(var o=new r(null),u=[],s=0;s<t;++s){for(;f=C[Math.floor(Math.random()*C.length)],-1!=u.indexOf(f););u.push(f),o.fromInt(f);var a=o.modPow(i,this);if(0!=a.compareTo(r.ONE)&&0!=a.compareTo(e)){for(var f=1;f++<n&&0!=a.compareTo(e);)if(0==(a=a.modPowInt(2,this)).compareTo(r.ONE))return!1;if(0!=a.compareTo(e))return!1}}return!0},i.clone=function(){var t=new r;return this.copyTo(t),t},i.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},i.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},i.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},i.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},i.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var n,r=this.DB-t*this.DB%8,i=0;if(t-- >0)for(r<this.DB&&(n=this[t]>>r)!=(this.s&this.DM)>>r&&(e[i++]=n|this.s<<this.DB-r);t>=0;)r<8?(n=(this[t]&(1<<r)-1)<<8-r,n|=this[--t]>>(r+=this.DB-8)):(n=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&n)&&(n|=-256),0===i&&(128&this.s)!=(128&n)&&++i,(i>0||n!=this.s)&&(e[i++]=n);return e},i.equals=function(t){return 0==this.compareTo(t)},i.min=function(t){return this.compareTo(t)<0?this:t},i.max=function(t){return this.compareTo(t)>0?this:t},i.and=function(t){var e=new r;return this.bitwiseTo(t,g,e),e},i.or=function(t){var e=new r;return this.bitwiseTo(t,m,e),e},i.xor=function(t){var e=new r;return this.bitwiseTo(t,v,e),e},i.andNot=function(t){var e=new r;return this.bitwiseTo(t,b,e),e},i.not=function(){for(var t=new r,e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},i.shiftLeft=function(t){var e=new r;return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},i.shiftRight=function(t){var e=new r;return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},i.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+w(this[t]);return this.s<0?this.t*this.DB:-1},i.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=_(this[n]^e);return t},i.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},i.setBit=function(t){return this.changeBit(t,m)},i.clearBit=function(t){return this.changeBit(t,b)},i.flipBit=function(t){return this.changeBit(t,v)},i.add=function(t){var e=new r;return this.addTo(t,e),e},i.subtract=function(t){var e=new r;return this.subTo(t,e),e},i.multiply=function(t){var e=new r;return this.multiplyTo(t,e),e},i.divide=function(t){var e=new r;return this.divRemTo(t,e,null),e},i.remainder=function(t){var e=new r;return this.divRemTo(t,null,e),e},i.divideAndRemainder=function(t){var e=new r,n=new r;return this.divRemTo(t,e,n),new Array(e,n)},i.modPow=function(t,e){var n,i,o=t.bitLength(),u=l(1);if(o<=0)return u;n=o<18?1:o<48?3:o<144?4:o<768?5:6,i=o<8?new d(e):e.isEven()?new B(e):new y(e);var s=new Array,a=3,f=n-1,c=(1<<n)-1;if(s[1]=i.convert(this),n>1){var h=new r;for(i.sqrTo(s[1],h);a<=c;)s[a]=new r,i.mulTo(h,s[a-2],s[a]),a+=2}var g,m,v=t.t-1,b=!0,w=new r;for(o=p(t[v])-1;v>=0;){for(o>=f?g=t[v]>>o-f&c:(g=(t[v]&(1<<o+1)-1)<<f-o,v>0&&(g|=t[v-1]>>this.DB+o-f)),a=n;0==(1&g);)g>>=1,--a;if((o-=a)<0&&(o+=this.DB,--v),b)s[g].copyTo(u),b=!1;else{for(;a>1;)i.sqrTo(u,w),i.sqrTo(w,u),a-=2;a>0?i.sqrTo(u,w):(m=u,u=w,w=m),i.mulTo(w,s[g],u)}for(;v>=0&&0==(t[v]&1<<o);)i.sqrTo(u,w),m=u,u=w,w=m,--o<0&&(o=this.DB-1,--v)}return i.revert(u)},i.modInverse=function(t){var e=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&e||0==t.signum())return r.ZERO;for(var n=t.clone(),i=this.clone(),o=l(1),u=l(0),s=l(0),a=l(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),e?(o.isEven()&&u.isEven()||(o.addTo(this,o),u.subTo(t,u)),o.rShiftTo(1,o)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);for(;i.isEven();)i.rShiftTo(1,i),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);n.compareTo(i)>=0?(n.subTo(i,n),e&&o.subTo(s,o),u.subTo(a,u)):(i.subTo(n,i),e&&s.subTo(o,s),a.subTo(u,a))}if(0!=i.compareTo(r.ONE))return r.ZERO;for(;a.compareTo(t)>=0;)a.subTo(t,a);for(;a.signum()<0;)a.addTo(t,a);return a},i.pow=function(t){return this.exp(t,new E)},i.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var r=e;e=n,n=r}var i=e.getLowestSetBit(),o=n.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),n.rShiftTo(o,n));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return o>0&&n.lShiftTo(o,n),n},i.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=C[C.length-1]){for(e=0;e<C.length;++e)if(n[0]==C[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<C.length;){for(var r=C[e],i=e+1;i<C.length&&r<F;)r*=C[i++];for(r=n.modInt(r);e<i;)if(r%C[e++]==0)return!1}return n.millerRabin(t)},i.square=function(){var t=new r;return this.squareTo(t),t},r.ZERO=l(0),r.ONE=l(1),r.valueOf=l,t.exports=r},function(t,e,n){var r=n(3),i=n(9),o=n(98);function u(t,e,n,r,u,s,a){this.p=t,this.a=e,this.b=n,this.G=o.fromAffine(this,r,u),this.n=s,this.h=a,this.infinity=new o(this,null,null,i.ZERO),this.pOverFour=t.add(i.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}u.prototype.pointFromX=function(t,e){var n=e.pow(3).add(this.a.multiply(e)).add(this.b).mod(this.p).modPow(this.pOverFour,this.p),r=n;return n.isEven()^!t&&(r=this.p.subtract(r)),o.fromAffine(this,e,r)},u.prototype.isInfinity=function(t){return t===this.infinity||0===t.z.signum()&&0!==t.y.signum()},u.prototype.isOnCurve=function(t){if(this.isInfinity(t))return!0;var e=t.affineX,n=t.affineY,r=this.a,i=this.b,o=this.p;if(e.signum()<0||e.compareTo(o)>=0)return!1;if(n.signum()<0||n.compareTo(o)>=0)return!1;var u=n.square().mod(o),s=e.pow(3).add(r.multiply(e)).add(i).mod(o);return u.equals(s)},u.prototype.validate=function(t){r(!this.isInfinity(t),"Point is at infinity"),r(this.isOnCurve(t),"Point is not on the curve");var e=t.multiply(this.n);return r(this.isInfinity(e),"Point is not a scalar multiple of G"),!0},t.exports=u},function(t,e,n){"use strict";var r=n(2).Buffer,i=n(1),o=n(97),u=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],a=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],f=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],c=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],l=[1352829926,1548603684,1836072691,2053994217,0];function p(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function d(t,e){return t<<e|t>>>32-e}function y(t,e,n,r,i,o,u,s){return d(t+(e^n^r)+o+u|0,s)+i|0}function g(t,e,n,r,i,o,u,s){return d(t+(e&n|~e&r)+o+u|0,s)+i|0}function m(t,e,n,r,i,o,u,s){return d(t+((e|~n)^r)+o+u|0,s)+i|0}function v(t,e,n,r,i,o,u,s){return d(t+(e&r|n&~r)+o+u|0,s)+i|0}function b(t,e,n,r,i,o,u,s){return d(t+(e^(n|~r))+o+u|0,s)+i|0}i(p,o),p.prototype._update=function(){for(var t=u,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,p=0|this._e,w=0|this._a,_=0|this._b,E=0|this._c,A=0|this._d,B=0|this._e,C=0;C<80;C+=1){var F,x;C<16?(F=y(n,r,i,o,p,t[s[C]],h[0],f[C]),x=b(w,_,E,A,B,t[a[C]],l[0],c[C])):C<32?(F=g(n,r,i,o,p,t[s[C]],h[1],f[C]),x=v(w,_,E,A,B,t[a[C]],l[1],c[C])):C<48?(F=m(n,r,i,o,p,t[s[C]],h[2],f[C]),x=m(w,_,E,A,B,t[a[C]],l[2],c[C])):C<64?(F=v(n,r,i,o,p,t[s[C]],h[3],f[C]),x=g(w,_,E,A,B,t[a[C]],l[3],c[C])):(F=b(n,r,i,o,p,t[s[C]],h[4],f[C]),x=y(w,_,E,A,B,t[a[C]],l[4],c[C])),n=p,p=o,o=d(i,10),i=r,r=F,w=B,B=A,A=d(E,10),E=_,_=x}var S=this._b+i+A|0;this._b=this._c+o+B|0,this._c=this._d+p+w|0,this._d=this._e+n+_|0,this._e=this._a+r+E|0,this._a=S},p.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=p},function(t,e,n){(e=t.exports=function(t){t=t.toLowerCase();var n=e[t];if(!n)throw new Error(t+" is not supported (we accept pull requests)");return new n}).sha=n(183),e.sha1=n(184),e.sha224=n(185),e.sha256=n(103),e.sha384=n(186),e.sha512=n(104)},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t,e,n){return n^t&(e^n)}function c(t,e,n){return t&e|n&(t|e)}function h(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function l(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function p(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function d(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}r(a,i),a.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,s=0|this._e,a=0|this._f,y=0|this._g,g=0|this._h,m=0;m<16;++m)e[m]=t.readInt32BE(4*m);for(;m<64;++m)e[m]=d(e[m-2])+e[m-7]+p(e[m-15])+e[m-16]|0;for(var v=0;v<64;++v){var b=g+l(s)+f(s,a,y)+u[v]+e[v]|0,w=h(n)+c(n,r,i)|0;g=y,y=a,a=s,s=o+b|0,o=i,i=r,r=n,n=b+w|0}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=s+this._e|0,this._f=a+this._f|0,this._g=y+this._g|0,this._h=g+this._h|0},a.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=a},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function a(){this.init(),this._w=s,i.call(this,128,112)}function f(t,e,n){return n^t&(e^n)}function c(t,e,n){return t&e|n&(t|e)}function h(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function l(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function d(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function y(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function g(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function m(t,e){return t>>>0<e>>>0?1:0}r(a,i),a.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._ah,r=0|this._bh,i=0|this._ch,o=0|this._dh,s=0|this._eh,a=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,_=0|this._bl,E=0|this._cl,A=0|this._dl,B=0|this._el,C=0|this._fl,F=0|this._gl,x=0|this._hl,S=0;S<32;S+=2)e[S]=t.readInt32BE(4*S),e[S+1]=t.readInt32BE(4*S+4);for(;S<160;S+=2){var D=e[S-30],k=e[S-30+1],T=p(D,k),I=d(k,D),M=y(D=e[S-4],k=e[S-4+1]),O=g(k,D),j=e[S-14],R=e[S-14+1],L=e[S-32],N=e[S-32+1],P=I+R|0,U=T+j+m(P,I)|0;U=(U=U+M+m(P=P+O|0,O)|0)+L+m(P=P+N|0,N)|0,e[S]=U,e[S+1]=P}for(var q=0;q<160;q+=2){U=e[q],P=e[q+1];var z=c(n,r,i),H=c(w,_,E),V=h(n,w),G=h(w,n),Z=l(s,B),Y=l(B,s),K=u[q],W=u[q+1],X=f(s,a,v),J=f(B,C,F),$=x+Y|0,Q=b+Z+m($,x)|0;Q=(Q=(Q=Q+X+m($=$+J|0,J)|0)+K+m($=$+W|0,W)|0)+U+m($=$+P|0,P)|0;var tt=G+H|0,et=V+z+m(tt,G)|0;b=v,x=F,v=a,F=C,a=s,C=B,s=o+Q+m(B=A+$|0,A)|0,o=i,A=E,i=r,E=_,r=n,_=w,n=Q+et+m(w=$+tt|0,$)|0}this._al=this._al+w|0,this._bl=this._bl+_|0,this._cl=this._cl+E|0,this._dl=this._dl+A|0,this._el=this._el+B|0,this._fl=this._fl+C|0,this._gl=this._gl+F|0,this._hl=this._hl+x|0,this._ah=this._ah+n+m(this._al,w)|0,this._bh=this._bh+r+m(this._bl,_)|0,this._ch=this._ch+i+m(this._cl,E)|0,this._dh=this._dh+o+m(this._dl,A)|0,this._eh=this._eh+s+m(this._el,B)|0,this._fh=this._fh+a+m(this._fl,C)|0,this._gh=this._gh+v+m(this._gl,F)|0,this._hh=this._hh+b+m(this._hl,x)|0},a.prototype._hash=function(){var t=o.allocUnsafe(64);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=a},function(t,e,n){"use strict";(function(e){var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(193),u=n(14),s=n(60).getCurveByName("secp256k1"),a=n(3),f=n(9),c=n(29),h=n(28),l=n(37);function p(t,n,r){function i(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),a(e.isBuffer(t),"data is a required String or Buffer"),l(t=u.sha256(t),n)}function l(r,i){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof r&&(r=e.from(r,u)),32!==r.length||!e.isBuffer(r))throw new Error("dataSha256: 32 bytes required");var f=h(i);return a(f,"pubkey required"),o.verify(s,r,{r:t,s:n},f.Q)}function p(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf8";return"string"==typeof t&&(t=e.from(t,n)),a(e.isBuffer(t),"data is a required String or Buffer"),d(t=u.sha256(t))}function d(i){var u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";if("string"==typeof i&&(i=e.from(i,u)),32!==i.length||!e.isBuffer(i))throw new Error("dataSha256: 32 byte String or buffer requred");var a=f.fromBuffer(i),c=r;c-=27,c&=3;var l=o.recoverPubKey(s,a,{r:t,s:n,i:r},c);return h.fromPoint(l)}function y(){var i;return(i=new e(65)).writeUInt8(r,0),t.toBuffer(32).copy(i,1),n.toBuffer(32).copy(i,33),i}a.equal(null!=t,!0,"Missing parameter"),a.equal(null!=n,!0,"Missing parameter"),a.equal(null!=r,!0,"Missing parameter");var g=void 0;return{r:t,s:n,i:r,toBuffer:y,verify:i,verifyHash:l,verifyHex:function(t,n){return console.log('Deprecated: use verify(data, pubkey, "hex")'),i(e.from(t,"hex"),n)},recover:p,recoverHash:d,toHex:function(){return y().toString("hex")},toString:function(){return g||(g="SIG_K1_"+c.checkEncode(y(),"K1"))},verifyBuffer:function(){return console.log("Deprecated: use signature.verify instead (same arguments)"),i.apply(void 0,arguments)},recoverPublicKey:function(){return console.log("Deprecated: use signature.recover instead (same arguments)"),p.apply(void 0,arguments)},recoverPublicKeyFromBuffer:function(){return console.log("Deprecated: use signature.recoverHash instead (same arguments)"),d.apply(void 0,arguments)}}}t.exports=p,p.sign=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";return"string"==typeof t&&(t=e.from(t,r)),a(e.isBuffer(t),"data is a required String or Buffer"),t=u.sha256(t),p.signHash(t,n)},p.signHash=function(t,n){var r,i,u,c,h,d,y,g=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";if("string"==typeof t&&(t=e.from(t,g)),32!==t.length||!e.isBuffer(t))throw new Error("dataSha256: 32 byte buffer requred");for(n=l(n),a(n,"privateKey required"),c=null,y=0,i=f.fromBuffer(t);;){if(d=(r=(u=o.sign(s,t,n.d,y++)).toDER())[5+(h=r[3])],32===h&&32===d){c=o.calcPubKeyRecoveryParam(s,i,u,n.toPublic().Q),c+=4,c+=27;break}y%10==0&&console.log("WARN: "+y+" attempts to find canonical signature")}return p(u.r,u.s,c)},p.fromBuffer=function(t){var n;return a(e.isBuffer(t),"Buffer is required"),a.equal(t.length,65,"Invalid signature length"),n=t.readUInt8(0),a.equal(n-27,n-27&7,"Invalid signature parameter"),p(f.fromBuffer(t.slice(1,33)),f.fromBuffer(t.slice(33)),n)},p.fromHex=function(t){return p.fromBuffer(e.from(t,"hex"))},p.fromString=function(t){try{return p.fromStringOrThrow(t)}catch(t){return null}},p.fromStringOrThrow=function(t){a.equal(void 0===t?"undefined":i(t),"string","signature");var e=t.match(/^SIG_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);a(null!=e&&3===e.length,"Expecting signature like: SIG_K1_base58signature..");var n=r(e,3),o=n[1],u=n[2];return a.equal(o,"K1","K1 signature expected"),p.fromBuffer(c.checkDecode(u,o))},p.from=function(t){var n=t?t.r&&t.s&&t.i?t:"string"==typeof t&&130===t.length?p.fromHex(t):"string"==typeof t&&130!==t.length?p.fromStringOrThrow(t):e.isBuffer(t)?p.fromBuffer(t):null:t;if(!n)throw new TypeError("signature should be a hex string or buffer");return n}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){function n(t){var e=t.toString().match(/function (.*?)\(/);return e?e[1]:null}t.exports=function(t,r){switch(t){case"Array":if(Array.isArray(r))return;break;case"Boolean":if("boolean"==typeof r)return;break;case"Buffer":if(e.isBuffer(r))return;break;case"Number":if("number"==typeof r)return;break;case"String":if("string"==typeof r)return;break;default:if(n(r.constructor)===n(t))return}throw new TypeError("Expected "+(n(t)||t)+", got "+r)}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(203),i=n(206),o=n(108),u=function(t){return i("v1",r,t)};Object.assign(u,{processArgs:o,api:r,Testnet:function(t){return console.error("deprecated, change EosApi.Testnet(..) to just EosApi(..)"),u(t)},Localnet:function(t){return console.error("deprecated, change EosApi.Localnet(..) to just EosApi(..)"),u(t)}}),t.exports=u},function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"method",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o={},u={},s=e.length,a=void 0;"function"==typeof t[t.length-1]&&(a=t[t.length-1],t=t.slice(0,t.length-1));var f=void 0,c=void 0;a?f=function(t,e){t?a(t):a(null,e)}:c=new Promise(function(t,e){f=function(n,r){n?e(n):t(r)}});"function"==typeof i&&t.length>0&&("object"===r(t[0])&&2===t.length||t.length===s+1)&&null!=(u=i(t[t.length-1]))&&(t=t.slice(0,t.length-1));if(1===t.length&&"object"===r(t[0]))o=t[0];else{if(t.length>s)throw new TypeError(n+" is expecting "+s+" parameters but "+t.length+" where provided");var h=0,l=!0,p=!1,d=void 0;try{for(var y,g=e[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value;o[m]=t[h],h++}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}}return{params:o,options:u,callback:f,returnPromise:c}}},function(t,e,n){var r=n(46),i=n(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){"use strict";var r=Object.assign({},n(224));t.exports=r},function(t,e,n){"use strict";var r=o(n(64)),i=o(n(22));function o(t){return t&&t.__esModule?t:{default:t}}var u=n(3),s=n(19).Long;t.exports={ULong:a,isName:function(t,e){try{return h(t),!0}catch(t){return e&&e(t),!1}},encodeName:h,decodeName:l,encodeNameHex:function(t){return s.fromString(h(t),!0).toString(16)},decodeNameHex:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return l(s.fromString(t,!0,16).toString(),e)},DecimalString:p,DecimalPad:d,DecimalImply:function(t,e){return d(t,e).replace(".","")},DecimalUnimply:function(t,e){u(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var n=/^-/.test(t);n&&(t=t.substring(1));u(/^\d+$/.test(t),"invalid whole number "+t),u(null!=e,"precision required"),u(e>=0&&e<=18,"Precision should be 18 characters or less");var r=e-t.length;r>0&&(t=""+"0".repeat(r)+t);var i=t.length-e;return t=t.slice(0,i)+"."+t.slice(i),(n?"-":"")+d(t,e)},printAsset:y,parseAsset:function(t){var e=t.split(" "),n=(0,r.default)(e,1)[0].match(/^(-?[0-9]+(\.[0-9]+)?)( |$)/),i=n?n[1]:null,o=t.match(/(^| )([0-9]+),([A-Z]+)(@|$)/),s=o?Number(o[2]):null,a=i?(i.split(".")[1]||"").length:null,f=null!=s?s:a,c=t.match(/(^| |,)([A-Z]+)(@|$)/),h=c?c[2]:null,l=t.split("@"),p=(0,r.default)(l,2)[1],d=void 0===p?"":p,g=/^[a-z0-5]+(\.[a-z0-5]+)*$/.test(d)?d:null,m=y({amount:i,precision:f,symbol:h,contract:g});u.equal(t,m,"Invalid asset string: "+t+" !== "+m),null!=f&&u(f>=0&&f<=18,"Precision should be 18 characters or less");null!=h&&u(h.length<=7,"Asset symbol is 7 characters or less");null!=g&&u(g.length<=12,"Contract is 12 characters or less");return{amount:i,precision:f,symbol:h,contract:g}}};function a(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;if("number"==typeof t){if(t>Number.MAX_SAFE_INTEGER)throw new TypeError("value parameter overflow");t=s.fromString(String(t),e,n)}else if("string"==typeof t)t=s.fromString(t,e,n);else if(!s.isLong(t))throw new TypeError("value parameter is a requied Long, Number or String");return t}var f=".12345abcdefghijklmnopqrstuvwxyz",c=function(t){var e=f.indexOf(t);if(-1===e)throw new TypeError("Invalid character: '"+t+"'");return e};function h(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("string"!=typeof t)throw new TypeError("name parameter is a required string");if(t.length>12)throw new TypeError("A name can be up to 12 characters long");for(var n="",r=0;r<=12;r++){var i=r<t.length?c(t[r]):0,o=r<12?5:4,u=Number(i).toString(2);if(u.length>o)throw new TypeError("Invalid name "+t);n+=u="0".repeat(o-u.length)+u}var a=s.fromString(n,!0,2),f="",h=e?a.toBytesLE():a.toBytesBE(),l=!0,p=!1,d=void 0;try{for(var y,g=h[Symbol.iterator]();!(l=(y=g.next()).done);l=!0){var m=y.value,v=Number(m).toString(16);f+=(1===v.length?"0":"")+v}}catch(t){p=!0,d=t}finally{try{!l&&g.return&&g.return()}finally{if(p)throw d}}return s.fromString(f,!0,16).toString().toString()}function l(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t=a(t);var n="",r=e?t.toBytesLE():t.toBytesBE(),i=!0,o=!1,u=void 0;try{for(var c,h=r[Symbol.iterator]();!(i=(c=h.next()).done);i=!0){var l=c.value,p=Number(l).toString(16);n+=(1===p.length?"0":"")+p}}catch(t){o=!0,u=t}finally{try{!i&&h.return&&h.return()}finally{if(o)throw u}}n+="0".repeat(16-n.length);for(var d=s.fromNumber(31,!0),y=s.fromNumber(15,!0),g="",m=s.fromString(n,!0,16),v=0;v<=12;v++){g=f[m.and(0===v?y:d)]+g,m=m.shiftRight(0===v?4:5)}return g=g.replace(/\.+$/,"")}function p(t){u(null!=t,"value is required"),t="object"===t&&t.toString?t.toString():String(t);var e=/^-/.test(t);e&&(t=t.substring(1)),"."===t[0]&&(t="0"+t);var n=t.split(".");return u(n.length<=2,"invalid decimal "+t),u(/^\d+(,?\d)*\d*$/.test(n[0]),"invalid decimal "+t),2===n.length&&(u(/^\d*$/.test(n[1]),"invalid decimal "+t),n[1]=n[1].replace(/0+$/,""),""===n[1]&&n.pop()),n[0]=n[0].replace(/^0*/,""),""===n[0]&&(n[0]="0"),(e?"-":"")+n.join(".")}function d(t,e){var n=p(t);if(null==e)return n;u(e>=0&&e<=18,"Precision should be 18 characters or less");var r=n.split(".");if(0===e&&1===r.length)return r[0];if(1===r.length)return r[0]+"."+"0".repeat(e);var i=e-r[1].length;return u(i>=0,"decimal '"+n+"' exceeds precision "+e),r[0]+"."+r[1]+"0".repeat(i)}function y(t){var e=t.amount,n=t.precision,r=t.symbol,o=t.contract;u.equal(void 0===r?"undefined":(0,i.default)(r),"string","symbol is a required string"),null!=e&&null!=n&&(e=d(e,n));var s=function(t,e){return null==t?"":null==e?"":t+e};return null!=e?s(e," ")+r+s("@",o):s(n,",")+r+s("@",o)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n){void 0===n&&(n=4),this._val=t,this._sym=e,this._decimal=n}return Object.defineProperty(t.prototype,"val",{get:function(){return this._val},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sym",{get:function(){return this._sym},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"decimal",{get:function(){return this._decimal},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"valStr",{get:function(){return this._val.toFixed(this.decimal)},enumerable:!0,configurable:!0}),t.prototype.toString=function(){return this.valStr+" "+this.sym},t.parse=function(e){if(!e)return null;var n=(e=e.trim()).indexOf(" ");if(n<0)return null;var r=e.slice(0,n),i=e.slice(1+n);if(!r||!i)return null;var o=e.indexOf("."),u=o<0?0:n-o-1;return new t(parseFloat(r),i,u)},t}();e.default=r},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(4),i=n(242),o=n(244),u=n(245),s=n(246),a=n(115),f="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(247);t.exports=function(t){return new Promise(function(e,c){var h=t.data,l=t.headers;r.isFormData(h)&&delete l["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(t.url)||(p=new window.XDomainRequest,d="onload",y=!0,p.onprogress=function(){},p.ontimeout=function(){}),t.auth){var g=t.auth.username||"",m=t.auth.password||"";l.Authorization="Basic "+f(g+":"+m)}if(p.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p[d]=function(){if(p&&(4===p.readyState||y)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:t,request:p};i(e,c,r),p=null}},p.onerror=function(){c(a("Network Error",t,null,p)),p=null},p.ontimeout=function(){c(a("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(248),b=(t.withCredentials||s(t.url))&&t.xsrfCookieName?v.read(t.xsrfCookieName):void 0;b&&(l[t.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(l,function(t,e){void 0===h&&"content-type"===e.toLowerCase()?delete l[e]:p.setRequestHeader(e,t)}),t.withCredentials&&(p.withCredentials=!0),t.responseType)try{p.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){p&&(p.abort(),c(t),p=null)}),void 0===h&&(h=null),p.send(h)})}},function(t,e,n){"use strict";var r=n(243);t.exports=function(t,e,n,i,o){var u=new Error(t);return r(u,e,n,i,o)}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e,n){"use strict";!function(){function e(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function n(t,n,r){var i,o=new Promise(function(o,u){e(i=t[n].apply(t,r)).then(o,u)});return o.request=i,o}function r(t,e,n){n.forEach(function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})})}function i(t,e,r,i){i.forEach(function(i){i in r.prototype&&(t.prototype[i]=function(){return n(this[e],i,arguments)})})}function o(t,e,n,r){r.forEach(function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})})}function u(t,e,r,i){i.forEach(function(i){i in r.prototype&&(t.prototype[i]=function(){return function(t,e,r){var i=n(t,e,r);return i.then(function(t){if(t)return new a(t,i.request)})}(this[e],i,arguments)})})}function s(t){this._index=t}function a(t,e){this._cursor=t,this._request=e}function f(t){this._store=t}function c(t){this._tx=t,this.complete=new Promise(function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}})}function h(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new c(n)}function l(t){this._db=t}r(s,"_index",["name","keyPath","multiEntry","unique"]),i(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(a,"_cursor",["direction","key","primaryKey","value"]),i(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(a.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(t){if(t)return new a(t,n._request)})})})}),f.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(f,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},r(c,"_tx",["objectStoreNames","mode"]),o(c,"_tx",IDBTransaction,["abort"]),h.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},r(h,"_db",["name","version","objectStoreNames"]),o(h,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},r(l,"_db",["name","version","objectStoreNames"]),o(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[f,s].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e=function(t){return Array.prototype.slice.call(t)}(arguments),n=e[e.length-1],r=this._store||this._index,i=r[t].apply(r,e.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[s,f].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise(function(i){n.iterateCursor(t,function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():i(r)):i(r)})})})});var p={open:function(t,e,r){var i=n(indexedDB,"open",[t,e]),o=i.request;return o&&(o.onupgradeneeded=function(t){r&&r(new h(o.result,t.oldVersion,o.transaction))}),i.then(function(t){return new l(t)})},delete:function(t){return n(indexedDB,"deleteDatabase",[t])}};t.exports=p,t.exports.default=t.exports}()},function(t,e,n){"use strict";n.r(e);var r=n(118),i=n.n(r),o=n(119),u=n.n(o),s=n(120),a=n.n(s),f=n(68),c=n.n(f),h=n(30),l=n.n(h),p=n(69),d=n.n(p),y=n(70),g=n(71),m=n(40);window.env=function(){function t(){i()(this,t)}return u()(t,null,[{key:"isPc",get:function(){return!/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)}}]),t}(),window.eosjs=c.a,window.eosjs_ecc=l.a,window.BigNumber=d.a,window.idb=a.a,window.eosplayer=new g.ScatterPlayer(y.eosNodeConfigs),window.kh||(window.kh={}),window.kh.eos={Player:m.Player,ScatterPlayer:g.ScatterPlayer,SignPlayer:m.SignPlayer,ReadingPlayer:m.ReadingPlayer}},function(t,e,n){var r=function(){return this}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(123),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",f="object"==typeof t,c=e.regeneratorRuntime;if(c)f&&(t.exports=c);else{(c=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var h="suspendedStart",l="suspendedYield",p="executing",d="completed",y={},g={};g[u]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(T([])));v&&v!==r&&i.call(v,u)&&(g=v);var b=B.prototype=E.prototype=Object.create(g);A.prototype=b.constructor=B,B.constructor=A,B[a]=A.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,B):(t.__proto__=B,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},c.awrap=function(t){return{__await:t}},C(F.prototype),F.prototype[s]=function(){return this},c.AsyncIterator=F,c.async=function(t,e,n,r){var i=new F(w(t,e,n,r));return c.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[a]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=T,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(D),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],s=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var a=i.call(u,"catchLoc"),f=i.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),D(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;D(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}}}function w(t,e,n,r){var i=e&&e.prototype instanceof E?e:E,o=Object.create(i.prototype),u=new k(r||[]);return o._invoke=function(t,e,n){var r=h;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return I()}for(n.method=i,n.arg=o;;){var u=n.delegate;if(u){var s=x(u,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var a=_(t,e,n);if("normal"===a.type){if(r=n.done?d:l,a.arg===y)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r=d,n.method="throw",n.arg=a.arg)}}}(t,n,u),o}function _(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function A(){}function B(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function F(t){var e;this._invoke=function(n,r){function o(){return new Promise(function(e,o){!function e(n,r,o,u){var s=_(t[n],t,r);if("throw"!==s.type){var a=s.arg,f=a.value;return f&&"object"==typeof f&&i.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(f).then(function(t){a.value=t,o(a)},u)}u(s.arg)}(n,r,e,o)})}return e=e?e.then(o,o):o()}}function x(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,x(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=_(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,y;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function D(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function T(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,n){t.exports={default:n(125),__esModule:!0}},function(t,e,n){n(41),n(51),t.exports=n(52).f("iterator")},function(t,e,n){var r=n(42),i=n(43);t.exports=function(t){return function(e,n){var o,u,s=String(i(e)),a=r(n),f=s.length;return a<0||a>=f?t?"":void 0:(o=s.charCodeAt(a))<55296||o>56319||a+1===f||(u=s.charCodeAt(a+1))<56320||u>57343?t?s.charAt(a):o:t?s.slice(a,a+2):u-56320+(o-55296<<10)+65536}}},function(t,e,n){var r=n(128);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(78),i=n(33),o=n(50),u={};n(15)(u,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(16),i=n(23),o=n(45);t.exports=n(17)?Object.defineProperties:function(t,e){i(t);for(var n,u=o(e),s=u.length,a=0;s>a;)r.f(t,n=u[a++],e[n]);return t}},function(t,e,n){var r=n(46);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(18),i=n(133),o=n(134);t.exports=function(t){return function(e,n,u){var s,a=r(e),f=i(a.length),c=o(u,f);if(t&&n!=n){for(;f>c;)if((s=a[c++])!=s)return!0}else for(;f>c;c++)if((t||c in a)&&a[c]===n)return t||c||0;return!t&&-1}}},function(t,e,n){var r=n(42),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(42),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(7).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(11),i=n(137),o=n(47)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(43);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(139),i=n(140),o=n(25),u=n(18);t.exports=n(73)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){t.exports={default:n(142),__esModule:!0}},function(t,e,n){n(143),n(149),n(150),n(151),t.exports=n(10).Symbol},function(t,e,n){"use strict";var r=n(7),i=n(11),o=n(17),u=n(74),s=n(77),a=n(144).KEY,f=n(32),c=n(48),h=n(50),l=n(34),p=n(5),d=n(52),y=n(53),g=n(145),m=n(146),v=n(23),b=n(24),w=n(18),_=n(44),E=n(33),A=n(78),B=n(147),C=n(148),F=n(16),x=n(45),S=C.f,D=F.f,k=B.f,T=r.Symbol,I=r.JSON,M=I&&I.stringify,O=p("_hidden"),j=p("toPrimitive"),R={}.propertyIsEnumerable,L=c("symbol-registry"),N=c("symbols"),P=c("op-symbols"),U=Object.prototype,q="function"==typeof T,z=r.QObject,H=!z||!z.prototype||!z.prototype.findChild,V=o&&f(function(){return 7!=A(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=S(U,e);r&&delete U[e],D(t,e,n),r&&t!==U&&D(U,e,r)}:D,G=function(t){var e=N[t]=A(T.prototype);return e._k=t,e},Z=q&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},Y=function(t,e,n){return t===U&&Y(P,e,n),v(t),e=_(e,!0),v(n),i(N,e)?(n.enumerable?(i(t,O)&&t[O][e]&&(t[O][e]=!1),n=A(n,{enumerable:E(0,!1)})):(i(t,O)||D(t,O,E(1,{})),t[O][e]=!0),V(t,e,n)):D(t,e,n)},K=function(t,e){v(t);for(var n,r=g(e=w(e)),i=0,o=r.length;o>i;)Y(t,n=r[i++],e[n]);return t},W=function(t){var e=R.call(this,t=_(t,!0));return!(this===U&&i(N,t)&&!i(P,t))&&(!(e||!i(this,t)||!i(N,t)||i(this,O)&&this[O][t])||e)},X=function(t,e){if(t=w(t),e=_(e,!0),t!==U||!i(N,e)||i(P,e)){var n=S(t,e);return!n||!i(N,e)||i(t,O)&&t[O][e]||(n.enumerable=!0),n}},J=function(t){for(var e,n=k(w(t)),r=[],o=0;n.length>o;)i(N,e=n[o++])||e==O||e==a||r.push(e);return r},$=function(t){for(var e,n=t===U,r=k(n?P:w(t)),o=[],u=0;r.length>u;)!i(N,e=r[u++])||n&&!i(U,e)||o.push(N[e]);return o};q||(s((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=l(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(P,n),i(this,O)&&i(this[O],t)&&(this[O][t]=!1),V(this,t,E(1,n))};return o&&H&&V(U,t,{configurable:!0,set:e}),G(t)}).prototype,"toString",function(){return this._k}),C.f=X,F.f=Y,n(81).f=B.f=J,n(54).f=W,n(80).f=$,o&&!n(31)&&s(U,"propertyIsEnumerable",W,!0),d.f=function(t){return G(p(t))}),u(u.G+u.W+u.F*!q,{Symbol:T});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var et=x(p.store),nt=0;et.length>nt;)y(et[nt++]);u(u.S+u.F*!q,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=T(t)},keyFor:function(t){if(!Z(t))throw TypeError(t+" is not a symbol!");for(var e in L)if(L[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),u(u.S+u.F*!q,"Object",{create:function(t,e){return void 0===e?A(t):K(A(t),e)},defineProperty:Y,defineProperties:K,getOwnPropertyDescriptor:X,getOwnPropertyNames:J,getOwnPropertySymbols:$}),I&&u(u.S+u.F*(!q||f(function(){var t=T();return"[null]"!=M([t])||"{}"!=M({a:t})||"{}"!=M(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!Z(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Z(e))return e}),r[1]=e,M.apply(I,r)}}),T.prototype[j]||n(15)(T.prototype,j,T.prototype.valueOf),h(T,"Symbol"),h(Math,"Math",!0),h(r.JSON,"JSON",!0)},function(t,e,n){var r=n(34)("meta"),i=n(24),o=n(11),u=n(16).f,s=0,a=Object.isExtensible||function(){return!0},f=!n(32)(function(){return a(Object.preventExtensions({}))}),c=function(t){u(t,r,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!a(t))return"F";if(!e)return"E";c(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!a(t))return!0;if(!e)return!1;c(t)}return t[r].w},onFreeze:function(t){return f&&h.NEED&&a(t)&&!o(t,r)&&c(t),t}}},function(t,e,n){var r=n(45),i=n(80),o=n(54);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var u,s=n(t),a=o.f,f=0;s.length>f;)a.call(t,u=s[f++])&&e.push(u);return e}},function(t,e,n){var r=n(46);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(18),i=n(81).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,e,n){var r=n(54),i=n(33),o=n(18),u=n(44),s=n(11),a=n(75),f=Object.getOwnPropertyDescriptor;e.f=n(17)?f:function(t,e){if(t=o(t),e=u(e,!0),a)try{return f(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(53)("asyncIterator")},function(t,e,n){n(53)("observable")},function(t,e,n){"use strict";n(82);var r=n(37),i=n(28),o=n(105),u=(n(29),n(14)),s={initialize:r.initialize,unsafeRandomKey:function(){return r.unsafeRandomKey().then(function(t){return t.toString()})},randomKey:function(t){return r.randomKey(t).then(function(t){return t.toString()})},seedPrivate:function(t){return r.fromSeed(t).toString()},privateToPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return r(t).toPublic().toString(e)},isValidPublic:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"EOS";return i.isValid(t,e)},isValidPrivate:function(t){return r.isValid(t)},sign:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===n)throw new TypeError("API changed, use signHash(..) instead");return!1===n&&console.log("Warning: ecc.sign hashData parameter was removed"),o.sign(t,e,n).toString()},signHash:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return o.signHash(t,e,n).toString()},verify:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"utf8";if(!0===r)throw new TypeError("API changed, use verifyHash(..) instead");return!1===r&&console.log("Warning: ecc.verify hashData parameter was removed"),(t=o.from(t)).verify(e,n,r)},verifyHash:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"hex";return(t=o.from(t)).verifyHash(e,n,r)},recover:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"utf8";if(!0===n)throw new TypeError("API changed, use recoverHash(signature, data) instead");return!1===n&&console.log("Warning: ecc.recover hashData parameter was removed"),(t=o.from(t)).recover(e,n).toString()},recoverHash:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hex";return(t=o.from(t)).recoverHash(e,n).toString()},sha256:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hex";return u.sha256(t,e)}};t.exports=s},function(t,e,n){"use strict";e.byteLength=function(t){var e=f(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=f(t),r=n[0],u=n[1],s=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,u)),a=0,c=u>0?r-4:r,h=0;h<c;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],s[a++]=e>>16&255,s[a++]=e>>8&255,s[a++]=255&e;2===u&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,s[a++]=255&e);1===u&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,s[a++]=e>>8&255,s[a++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],u=0,s=n-i;u<s;u+=16383)o.push(h(t,u,u+16383>s?s:u+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=u.length;s<a;++s)r[s]=u[s],i[u.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function h(t,e,n){for(var r,i=[],o=e;o<n;o+=3)r=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(c(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,u,s=8*i-r-1,a=(1<<s)-1,f=a>>1,c=-7,h=n?i-1:0,l=n?-1:1,p=t[e+h];for(h+=l,o=p&(1<<-c)-1,p>>=-c,c+=s;c>0;o=256*o+t[e+h],h+=l,c-=8);for(u=o&(1<<-c)-1,o>>=-c,c+=r;c>0;u=256*u+t[e+h],h+=l,c-=8);if(0===o)o=1-f;else{if(o===a)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),o-=f}return(p?-1:1)*u*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var u,s,a,f=8*o-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,u=c):(u=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-u))<1&&(u--,a*=2),(e+=u+h>=1?l/a:l*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(s=0,u=c):u+h>=1?(s=(e*a-1)*Math.pow(2,i),u+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,i),u=0));i>=8;t[n+p]=255&s,p+=d,s/=256,i-=8);for(u=u<<i|s,f+=i;f>0;t[n+p]=255&u,p+=d,u/=256,f-=8);t[n+p-d]|=128*y}},function(t,e,n){var r,i,o;
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";function t(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var n={},r={};function i(t,e){var i,o,s;return e?(s=0<=(t>>>=0)&&t<256)&&(o=r[t])?o:(i=u(t,(0|t)<0?-1:0,!0),s&&(r[t]=i),i):(s=-128<=(t|=0)&&t<128)&&(o=n[t])?o:(i=u(t,t<0?-1:0,!1),s&&(n[t]=i),i)}function o(t,e){if(isNaN(t)||!isFinite(t))return e?y:d;if(e){if(t<0)return y;if(t>=h)return w}else{if(t<=-l)return _;if(t+1>=l)return b}return t<0?o(-t,e).neg():u(t%c|0,t/c|0,e)}function u(e,n,r){return new t(e,n,r)}t.fromInt=i,t.fromNumber=o,t.fromBits=u;var s=Math.pow;function a(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return d;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return a(t.substring(1),e,n).neg();for(var i=o(s(n,8)),u=d,f=0;f<t.length;f+=8){var c=Math.min(8,t.length-f),h=parseInt(t.substring(f,f+c),n);if(c<8){var l=o(s(n,c));u=u.mul(l).add(o(h))}else u=(u=u.mul(i)).add(o(h))}return u.unsigned=e,u}function f(e){return e instanceof t?e:"number"==typeof e?o(e):"string"==typeof e?a(e):u(e.low,e.high,e.unsigned)}t.fromString=a,t.fromValue=f;var c=4294967296,h=c*c,l=h/2,p=i(1<<24),d=i(0);t.ZERO=d;var y=i(0,!0);t.UZERO=y;var g=i(1);t.ONE=g;var m=i(1,!0);t.UONE=m;var v=i(-1);t.NEG_ONE=v;var b=u(-1,2147483647,!1);t.MAX_VALUE=b;var w=u(-1,-1,!0);t.MAX_UNSIGNED_VALUE=w;var _=u(0,-2147483648,!1);t.MIN_VALUE=_;var E=t.prototype;return E.toInt=function(){return this.unsigned?this.low>>>0:this.low},E.toNumber=function(){return this.unsigned?(this.high>>>0)*c+(this.low>>>0):this.high*c+(this.low>>>0)},E.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(_)){var e=o(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=o(s(t,6),this.unsigned),u=this,a="";;){var f=u.div(i),c=(u.sub(f.mul(i)).toInt()>>>0).toString(t);if((u=f).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},E.getHighBits=function(){return this.high},E.getHighBitsUnsigned=function(){return this.high>>>0},E.getLowBits=function(){return this.low},E.getLowBitsUnsigned=function(){return this.low>>>0},E.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},E.isZero=function(){return 0===this.high&&0===this.low},E.isNegative=function(){return!this.unsigned&&this.high<0},E.isPositive=function(){return this.unsigned||this.high>=0},E.isOdd=function(){return 1==(1&this.low)},E.isEven=function(){return 0==(1&this.low)},E.equals=function(t){return e(t)||(t=f(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},E.eq=E.equals,E.notEquals=function(t){return!this.eq(t)},E.neq=E.notEquals,E.lessThan=function(t){return this.comp(t)<0},E.lt=E.lessThan,E.lessThanOrEqual=function(t){return this.comp(t)<=0},E.lte=E.lessThanOrEqual,E.greaterThan=function(t){return this.comp(t)>0},E.gt=E.greaterThan,E.greaterThanOrEqual=function(t){return this.comp(t)>=0},E.gte=E.greaterThanOrEqual,E.compare=function(t){if(e(t)||(t=f(t)),this.eq(t))return 0;var n=this.isNegative(),r=t.isNegative();return n&&!r?-1:!n&&r?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},E.comp=E.compare,E.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(g)},E.neg=E.negate,E.add=function(t){e(t)||(t=f(t));var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,o=65535&this.low,s=t.high>>>16,a=65535&t.high,c=t.low>>>16,h=0,l=0,p=0,d=0;return p+=(d+=o+(65535&t.low))>>>16,l+=(p+=i+c)>>>16,h+=(l+=r+a)>>>16,h+=n+s,u((p&=65535)<<16|(d&=65535),(h&=65535)<<16|(l&=65535),this.unsigned)},E.subtract=function(t){return e(t)||(t=f(t)),this.add(t.neg())},E.sub=E.subtract,E.multiply=function(t){if(this.isZero())return d;if(e(t)||(t=f(t)),t.isZero())return d;if(this.eq(_))return t.isOdd()?_:d;if(t.eq(_))return this.isOdd()?_:d;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(p)&&t.lt(p))return o(this.toNumber()*t.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,s=65535&this.low,a=t.high>>>16,c=65535&t.high,h=t.low>>>16,l=65535&t.low,y=0,g=0,m=0,v=0;return m+=(v+=s*l)>>>16,g+=(m+=i*l)>>>16,m&=65535,g+=(m+=s*h)>>>16,y+=(g+=r*l)>>>16,g&=65535,y+=(g+=i*h)>>>16,g&=65535,y+=(g+=s*c)>>>16,y+=n*l+r*h+i*c+s*a,u((m&=65535)<<16|(v&=65535),(y&=65535)<<16|(g&=65535),this.unsigned)},E.mul=E.multiply,E.divide=function(t){if(e(t)||(t=f(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?y:d;var n,r,i;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return m;i=y}else{if(this.eq(_))return t.eq(g)||t.eq(v)?_:t.eq(_)?g:(n=this.shr(1).div(t).shl(1)).eq(d)?t.isNegative()?g:v:(r=this.sub(t.mul(n)),i=n.add(r.div(t)));if(t.eq(_))return this.unsigned?y:d;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();i=d}for(r=this;r.gte(t);){n=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(n)/Math.LN2),a=u<=48?1:s(2,u-48),c=o(n),h=c.mul(t);h.isNegative()||h.gt(r);)h=(c=o(n-=a,this.unsigned)).mul(t);c.isZero()&&(c=g),i=i.add(c),r=r.sub(h)}return i},E.div=E.divide,E.modulo=function(t){return e(t)||(t=f(t)),this.sub(this.div(t).mul(t))},E.mod=E.modulo,E.not=function(){return u(~this.low,~this.high,this.unsigned)},E.and=function(t){return e(t)||(t=f(t)),u(this.low&t.low,this.high&t.high,this.unsigned)},E.or=function(t){return e(t)||(t=f(t)),u(this.low|t.low,this.high|t.high,this.unsigned)},E.xor=function(t){return e(t)||(t=f(t)),u(this.low^t.low,this.high^t.high,this.unsigned)},E.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):u(0,this.low<<t-32,this.unsigned)},E.shl=E.shiftLeft,E.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?u(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):u(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},E.shr=E.shiftRight,E.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var n=this.high;return t<32?u(this.low>>>t|n<<32-t,n>>>t,this.unsigned):u(32===t?n:n>>>t-32,0,this.unsigned)},E.shru=E.shiftRightUnsigned,E.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},E.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},E.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},E.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},E.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?r.apply(e,i):r)||(t.exports=o)},function(t,e,n){var r=n(157),i=n(176),o=n(88);e.createCipher=e.Cipher=r.createCipher,e.createCipheriv=e.Cipheriv=r.createCipheriv,e.createDecipher=e.Decipher=i.createDecipher,e.createDecipheriv=e.Decipheriv=i.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(o)}},function(t,e,n){var r=n(85),i=n(89),o=n(0).Buffer,u=n(95),s=n(12),a=n(35),f=n(96);function c(t,e,n){s.call(this),this._cache=new l,this._cipher=new a.AES(e),this._prev=o.from(n),this._mode=t,this._autopadding=!0}n(1)(c,s),c.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get();)n=this._mode.encrypt(this,e),r.push(n);return o.concat(r)};var h=o.alloc(16,16);function l(){this.cache=o.allocUnsafe(0)}function p(t,e,n){var s=r[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=o.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof n&&(n=o.from(n)),"GCM"!==s.mode&&n.length!==s.iv)throw new TypeError("invalid iv length "+n.length);return"stream"===s.type?new u(s.module,e,n):"auth"===s.type?new i(s.module,e,n):new c(s.module,e,n)}c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},l.prototype.add=function(t){this.cache=o.concat([this.cache,t])},l.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},l.prototype.flush=function(){for(var t=16-this.cache.length,e=o.allocUnsafe(t),n=-1;++n<t;)e.writeUInt8(t,n);return o.concat([this.cache,e])},e.createCipheriv=p,e.createCipher=function(t,e){var n=r[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var i=f(e,!1,n.key,n.iv);return p(t,i.key,i.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,n){var r=n(26);e.encrypt=function(t,e){var n=r(e,t._prev);return t._prev=t._cipher.encryptBlock(n),t._prev},e.decrypt=function(t,e){var n=t._prev;t._prev=e;var i=t._cipher.decryptBlock(e);return r(i,n)}},function(t,e,n){var r=n(0).Buffer,i=n(26);function o(t,e,n){var o=e.length,u=i(e,t._cache);return t._cache=t._cache.slice(o),t._prev=r.concat([t._prev,n?e:u]),u}e.encrypt=function(t,e,n){for(var i,u=r.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=r.allocUnsafe(0)),!(t._cache.length<=e.length)){u=r.concat([u,o(t,e,n)]);break}i=t._cache.length,u=r.concat([u,o(t,e.slice(0,i),n)]),e=e.slice(i)}return u}},function(t,e,n){var r=n(0).Buffer;function i(t,e,n){var i=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=r.concat([t._prev.slice(1),r.from([n?e:i])]),i}e.encrypt=function(t,e,n){for(var o=e.length,u=r.allocUnsafe(o),s=-1;++s<o;)u[s]=i(t,e[s],n);return u}},function(t,e,n){var r=n(0).Buffer;function i(t,e,n){for(var r,i,u,s=-1,a=0;++s<8;)r=t._cipher.encryptBlock(t._prev),i=e&1<<7-s?128:0,a+=(128&(u=r[0]^i))>>s%8,t._prev=o(t._prev,n?i:u);return a}function o(t,e){var n=t.length,i=-1,o=r.allocUnsafe(t.length);for(t=r.concat([t,r.from([e])]);++i<n;)o[i]=t[i]<<1|t[i+1]>>7;return o}e.encrypt=function(t,e,n){for(var o=e.length,u=r.allocUnsafe(o),s=-1;++s<o;)u[s]=i(t,e[s],n);return u}},function(t,e,n){(function(t){var r=n(26);function i(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,n){for(;e._cache.length<n.length;)e._cache=t.concat([e._cache,i(e)]);var o=e._cache.slice(0,n.length);return e._cache=e._cache.slice(n.length),r(n,o)}}).call(this,n(2).Buffer)},function(t,e){},function(t,e,n){"use strict";var r=n(0).Buffer,i=n(166);function o(t,e,n){t.copy(e,n)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e=r.allocUnsafe(t>>>0),n=this.head,i=0;n;)o(n.data,e,i),i+=n.data.length,n=n.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(168),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(6))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},u=!1,s=t.document,a=Object.getPrototypeOf&&Object.getPrototypeOf(t);a=a&&a.setTimeout?a:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&c(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){c(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(c,0,t)},a.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var u={callback:t,args:e};return o[i]=u,r(i),i++},a.clearImmediate=f}function f(t){delete o[t]}function c(t){if(u)setTimeout(c,0,t);else{var e=o[t];if(e){u=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{f(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(6),n(8))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(6))},function(t,e,n){"use strict";t.exports=o;var r=n(94),i=n(27);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(1),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(57)},function(t,e,n){t.exports=n(13)},function(t,e,n){t.exports=n(56).Transform},function(t,e,n){t.exports=n(56).PassThrough},function(t,e,n){var r=n(0).Buffer,i=r.alloc(16,0);function o(t){var e=r.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function u(t){this.h=t,this.state=r.alloc(16,0),this.cache=r.allocUnsafe(0)}u.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},u.prototype._multiply=function(){for(var t,e,n=function(t){return[t.readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)]}(this.h),r=[0,0,0,0],i=-1;++i<128;){for(0!=(this.state[~~(i/8)]&1<<7-i%8)&&(r[0]^=n[0],r[1]^=n[1],r[2]^=n[2],r[3]^=n[3]),e=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,e&&(n[0]=n[0]^225<<24)}this.state=o(r)},u.prototype.update=function(t){var e;for(this.cache=r.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},u.prototype.final=function(t,e){return this.cache.length&&this.ghash(r.concat([this.cache,i],16)),this.ghash(o([0,t,0,e])),this.state},t.exports=u},function(t,e,n){var r=n(89),i=n(0).Buffer,o=n(85),u=n(95),s=n(12),a=n(35),f=n(96);function c(t,e,n){s.call(this),this._cache=new h,this._last=void 0,this._cipher=new a.AES(e),this._prev=i.from(n),this._mode=t,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function l(t,e,n){var s=o[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof n&&(n=i.from(n)),"GCM"!==s.mode&&n.length!==s.iv)throw new TypeError("invalid iv length "+n.length);if("string"==typeof e&&(e=i.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===s.type?new u(s.module,e,n,!0):"auth"===s.type?new r(s.module,e,n,!0):new c(s.module,e,n)}n(1)(c,s),c.prototype._update=function(t){var e,n;this._cache.add(t);for(var r=[];e=this._cache.get(this._autopadding);)n=this._mode.decrypt(this,e),r.push(n);return i.concat(r)},c.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var n=-1;for(;++n<e;)if(t[n+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},h.prototype.add=function(t){this.cache=i.concat([this.cache,t])},h.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var n=o[t.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var r=f(e,!1,n.key,n.iv);return l(t,r.key,r.iv)},e.createDecipheriv=l},function(t,e,n){(function(t,r){var i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(s(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,u=String(t).replace(i,function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),a=r[n];n<o;a=r[++n])y(a)||!w(a)?u+=" "+a:u+=" "+s(a);return u},e.deprecate=function(n,i){if(v(t.process))return function(){return e.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}};var o,u={};function s(t,n){var r={seen:[],stylize:f};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&e._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=a),c(r,t,r.depth)}function a(t,e){var n=s.styles[e];return n?"["+s.colors[n][0]+"m"+t+"["+s.colors[n][1]+"m":t}function f(t,e){return t}function c(t,n,r){if(t.customInspect&&n&&A(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=c(t,i,r)),i}var o=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(g(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,n);if(o)return o;var u=Object.keys(n),s=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),E(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return h(n);if(0===u.length){if(A(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(b(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(_(n))return t.stylize(Date.prototype.toString.call(n),"date");if(E(n))return h(n)}var f,w="",B=!1,C=["{","}"];(p(n)&&(B=!0,C=["[","]"]),A(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(w=" "+RegExp.prototype.toString.call(n)),_(n)&&(w=" "+Date.prototype.toUTCString.call(n)),E(n)&&(w=" "+h(n)),0!==u.length||B&&0!=n.length?r<0?b(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),f=B?function(t,e,n,r,i){for(var o=[],u=0,s=e.length;u<s;++u)x(e,String(u))?o.push(l(t,e,n,r,String(u),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(l(t,e,n,r,i,!0))}),o}(t,n,r,s,u):u.map(function(e){return l(t,n,r,s,e,B)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(f,w,C)):C[0]+w+C[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function l(t,e,n,r,i,o){var u,s,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special")),x(r,i)||(u="["+i+"]"),s||(t.seen.indexOf(a.value)<0?(s=y(n)?c(t,a.value,null):c(t,a.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n")):s=t.stylize("[Circular]","special")),v(u)){if(o&&i.match(/^\d+$/))return s;(u=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+s}function p(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function v(t){return void 0===t}function b(t){return w(t)&&"[object RegExp]"===B(t)}function w(t){return"object"==typeof t&&null!==t}function _(t){return w(t)&&"[object Date]"===B(t)}function E(t){return w(t)&&("[object Error]"===B(t)||t instanceof Error)}function A(t){return"function"==typeof t}function B(t){return Object.prototype.toString.call(t)}function C(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(v(o)&&(o=r.env.NODE_DEBUG||""),t=t.toUpperCase(),!u[t])if(new RegExp("\\b"+t+"\\b","i").test(o)){var n=r.pid;u[t]=function(){var r=e.format.apply(e,arguments);console.error("%s %d: %s",t,n,r)}}else u[t]=function(){};return u[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=p,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=b,e.isObject=w,e.isDate=_,e.isError=E,e.isFunction=A,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(178);var F=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function x(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[C(t.getHours()),C(t.getMinutes()),C(t.getSeconds())].join(":");return[t.getDate(),F[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=n(1),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}}).call(this,n(6),n(8))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t){t.exports={name:"bigi",version:"1.4.2",description:"Big integers.",keywords:["cryptography","math","bitcoin","arbitrary","precision","arithmetic","big","integer","int","number","biginteger","bigint","bignumber","decimal","float"],devDependencies:{coveralls:"^2.11.2",istanbul:"^0.3.5",jshint:"^2.5.1",mocha:"^2.1.0",mochify:"^2.1.0"},repository:{url:"https://github.com/cryptocoinjs/bigi",type:"git"},main:"./lib/index.js",scripts:{"browser-test":"./node_modules/.bin/mochify --wd -R spec",test:"./node_modules/.bin/_mocha -- test/*.js",jshint:"./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",unit:"./node_modules/.bin/mocha",coverage:"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",coveralls:"npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"},dependencies:{},testling:{files:"test/*.js",harness:"mocha",browsers:["ie/9..latest","firefox/latest","chrome/latest","safari/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]}}},function(t,e,n){(function(t){var e=n(3),r=n(99);r.fromByteArrayUnsigned=function(t){return 128&t[0]?new r([0].concat(t)):new r(t)},r.prototype.toByteArrayUnsigned=function(){var t=this.toByteArray();return 0===t[0]?t.slice(1):t},r.fromDERInteger=function(t){return new r(t)},r.prototype.toDERInteger=r.prototype.toByteArray,r.fromBuffer=function(t){if(128&t[0]){var e=Array.prototype.slice.call(t);return new r([0].concat(e))}return new r(t)},r.fromHex=function(t){return""===t?r.ZERO:(e.equal(t,t.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),e.equal(t.length%2,0,"Incomplete hex"),new r(t,16))},r.prototype.toBuffer=function(e){for(var n=this.toByteArrayUnsigned(),r=[],i=e-n.length;r.length<i;)r.push(0);return new t(r.concat(n))},r.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")}}).call(this,n(2).Buffer)},function(t,e,n){var r=n(9),i=n(182),o=n(100);t.exports=function(t){var e=i[t];if(!e)return null;var n=new r(e.p,16),u=new r(e.a,16),s=new r(e.b,16),a=new r(e.n,16),f=new r(e.h,16),c=new r(e.Gx,16),h=new r(e.Gy,16);return new o(n,u,s,c,h,a,f)}},function(t){t.exports={secp128r1:{p:"fffffffdffffffffffffffffffffffff",a:"fffffffdfffffffffffffffffffffffc",b:"e87579c11079f43dd824993c2cee5ed3",n:"fffffffe0000000075a30d1b9038a115",h:"01",Gx:"161ff7528b899b2d0c28607ca52c5b86",Gy:"cf5ac8395bafeb13c02da292dded7a83"},secp160k1:{p:"fffffffffffffffffffffffffffffffeffffac73",a:"00",b:"07",n:"0100000000000000000001b8fa16dfab9aca16b6b3",h:"01",Gx:"3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",Gy:"938cf935318fdced6bc28286531733c3f03c4fee"},secp160r1:{p:"ffffffffffffffffffffffffffffffff7fffffff",a:"ffffffffffffffffffffffffffffffff7ffffffc",b:"1c97befc54bd7a8b65acf89f81d4d4adc565fa45",n:"0100000000000000000001f4c8f927aed3ca752257",h:"01",Gx:"4a96b5688ef573284664698968c38bb913cbfc82",Gy:"23a628553168947d59dcc912042351377ac5fb32"},secp192k1:{p:"fffffffffffffffffffffffffffffffffffffffeffffee37",a:"00",b:"03",n:"fffffffffffffffffffffffe26f2fc170f69466a74defd8d",h:"01",Gx:"db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",Gy:"9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"},secp192r1:{p:"fffffffffffffffffffffffffffffffeffffffffffffffff",a:"fffffffffffffffffffffffffffffffefffffffffffffffc",b:"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",n:"ffffffffffffffffffffffff99def836146bc9b1b4d22831",h:"01",Gx:"188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",Gy:"07192b95ffc8da78631011ed6b24cdd573f977a11e794811"},secp256k1:{p:"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",a:"00",b:"07",n:"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",h:"01",Gx:"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",Gy:"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"},secp256r1:{p:"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",a:"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",b:"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",n:"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",h:"01",Gx:"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",Gy:"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"}}},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<5|t>>>27}function c(t){return t<<30|t>>>2}function h(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=e[a-3]^e[a-8]^e[a-14]^e[a-16];for(var l=0;l<80;++l){var p=~~(l/20),d=f(n)+h(p,r,i,o)+s+e[l]+u[p]|0;s=o,o=i,i=c(r),r=n,n=d}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,n){var r=n(1),i=n(20),o=n(0).Buffer,u=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,i.call(this,64,56)}function f(t){return t<<1|t>>>31}function c(t){return t<<5|t>>>27}function h(t){return t<<30|t>>>2}function l(t,e,n,r){return 0===t?e&n|~e&r:2===t?e&n|e&r|n&r:e^n^r}r(a,i),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e=this._w,n=0|this._a,r=0|this._b,i=0|this._c,o=0|this._d,s=0|this._e,a=0;a<16;++a)e[a]=t.readInt32BE(4*a);for(;a<80;++a)e[a]=f(e[a-3]^e[a-8]^e[a-14]^e[a-16]);for(var p=0;p<80;++p){var d=~~(p/20),y=c(n)+l(d,r,i,o)+s+e[p]+u[d]|0;s=o,o=i,i=h(r),r=n,n=y}this._a=n+this._a|0,this._b=r+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=s+this._e|0},a.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,n){var r=n(1),i=n(103),o=n(20),u=n(0).Buffer,s=new Array(64);function a(){this.init(),this._w=s,o.call(this,64,56)}r(a,i),a.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},a.prototype._hash=function(){var t=u.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=a},function(t,e,n){var r=n(1),i=n(104),o=n(20),u=n(0).Buffer,s=new Array(160);function a(){this.init(),this._w=s,o.call(this,128,112)}r(a,i),a.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},a.prototype._hash=function(){var t=u.allocUnsafe(48);function e(e,n,r){t.writeInt32BE(e,r),t.writeInt32BE(n,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=a},function(t,e,n){"use strict";var r=n(1),i=n(188),o=n(12),u=n(0).Buffer,s=n(189),a=n(101),f=n(102),c=u.alloc(128);function h(t,e){o.call(this,"digest"),"string"==typeof e&&(e=u.from(e));var n="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>n)?e=("rmd160"===t?new a:f(t)).update(e).digest():e.length<n&&(e=u.concat([e,c],n));for(var r=this._ipad=u.allocUnsafe(n),i=this._opad=u.allocUnsafe(n),s=0;s<n;s++)r[s]=54^e[s],i[s]=92^e[s];this._hash="rmd160"===t?new a:f(t),this._hash.update(r)}r(h,o),h.prototype._update=function(t){this._hash.update(t)},h.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new a:f(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new h("rmd160",e):"md5"===t?new i(s,e):new h(t,e)}},function(t,e,n){"use strict";var r=n(1),i=n(0).Buffer,o=n(12),u=i.alloc(128),s=64;function a(t,e){o.call(this,"digest"),"string"==typeof e&&(e=i.from(e)),this._alg=t,this._key=e,e.length>s?e=t(e):e.length<s&&(e=i.concat([e,u],s));for(var n=this._ipad=i.allocUnsafe(s),r=this._opad=i.allocUnsafe(s),a=0;a<s;a++)n[a]=54^e[a],r[a]=92^e[a];this._hash=[n]}r(a,o),a.prototype._update=function(t){this._hash.push(t)},a.prototype._final=function(){var t=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,t]))},t.exports=a},function(t,e,n){var r=n(59);t.exports=function(t){return(new r).update(t).digest()}},function(t,e,n){var r=n(191);t.exports=r("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},function(t,e,n){var r=n(0).Buffer;t.exports=function(t){for(var e={},n=t.length,i=t.charAt(0),o=0;o<t.length;o++){var u=t.charAt(o);if(void 0!==e[u])throw new TypeError(u+" is ambiguous");e[u]=o}function s(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return r.allocUnsafe(0);for(var o=[0],u=0;u<t.length;u++){var s=e[t[u]];if(void 0===s)return;for(var a=0,f=s;a<o.length;++a)f+=o[a]*n,o[a]=255&f,f>>=8;for(;f>0;)o.push(255&f),f>>=8}for(var c=0;t[c]===i&&c<t.length-1;++c)o.push(0);return r.from(o.reverse())}return{encode:function(e){if(0===e.length)return"";for(var r=[0],o=0;o<e.length;++o){for(var u=0,s=e[o];u<r.length;++u)s+=r[u]<<8,r[u]=s%n,s=s/n|0;for(;s>0;)r.push(s%n),s=s/n|0}for(var a="",f=0;0===e[f]&&f<e.length-1;++f)a+=i;for(var c=r.length-1;c>=0;--c)a+=t[r[c]];return a},decodeUnsafe:s,decode:function(t){var e=s(t);if(e)return e;throw new Error("Non-base"+n+" character")}}}},function(t,e,n){"use strict";t.exports=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return new Promise(function(e,r){setTimeout(function(){try{e(t.apply(void 0,n))}catch(t){r(t)}})})}}},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(14),o=n(106),u=n(9),s=n(194);function a(t,n,s,a,f){o("Buffer",n),o(u,s),f&&(n=i.sha256(e.concat([n,new e(f)]))),r.equal(n.length,32,"Hash must be 256 bit");var c=s.toBuffer(32),h=new e(32),l=new e(32);l.fill(1),h.fill(0),h=i.HmacSHA256(e.concat([l,new e([0]),c,n]),h),l=i.HmacSHA256(l,h),h=i.HmacSHA256(e.concat([l,new e([1]),c,n]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h);for(var p=u.fromBuffer(l);p.signum()<=0||p.compareTo(t.n)>=0||!a(p);)h=i.HmacSHA256(e.concat([l,new e([0])]),h),l=i.HmacSHA256(l,h),l=i.HmacSHA256(l,h),p=u.fromBuffer(l);return p}function f(t,e,n,r){var i=t.n,o=t.G,u=n.r,s=n.s;if(u.signum()<=0||u.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var a=s.modInverse(i),f=e.multiply(a).mod(i),c=u.multiply(a).mod(i),h=o.multiplyTwo(f,r,c);return!t.isInfinity(h)&&h.affineX.mod(i).equals(u)}function c(t,e,n,i){r.strictEqual(3&i,i,"Recovery param is more than two bits");var o=t.n,u=t.G,s=n.r,a=n.s;r(s.signum()>0&&s.compareTo(o)<0,"Invalid r value"),r(a.signum()>0&&a.compareTo(o)<0,"Invalid s value");var f=1&i,c=i>>1?s.add(o):s,h=t.pointFromX(f,c),l=h.multiply(o);r(t.isInfinity(l),"nR is not a valid curve point");var p=e.negate().mod(o),d=s.modInverse(o),y=h.multiplyTwo(a,u,p).multiply(d);return t.validate(y),y}t.exports={calcPubKeyRecoveryParam:function(t,e,n,r){for(var i=0;i<4;i++)if(c(t,e,n,i).equals(r))return i;throw new Error("Unable to find valid recovery factor")},deterministicGenerateK:a,recoverPubKey:c,sign:function(t,e,n,r){var i,o,f=u.fromBuffer(e),c=t.n,h=t.G,l=(a(t,e,n,function(e){var r=h.multiply(e);return!t.isInfinity(r)&&0!==(i=r.affineX.mod(c)).signum()&&0!==(o=e.modInverse(c).multiply(f.add(n.multiply(i))).mod(c)).signum()},r),c.shiftRight(1));return o.compareTo(l)>0&&(o=c.subtract(o)),s(i,o)},verify:function(t,e,n,r){return f(t,u.fromBuffer(e),n,r)},verifyRaw:f}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=n(3),i=n(106),o=n(9);function u(t,n){function r(){var r=t.toDERInteger(),i=n.toDERInteger(),o=[];return o.push(2,r.length),(o=o.concat(r)).push(2,i.length),(o=o.concat(i)).unshift(48,o.length),new e(o)}return i(o,t),i(o,n),{r:t,s:n,toCompact:function(r,i){i&&(r+=4),r+=27;var o=new e(65);return o.writeUInt8(r,0),t.toBuffer(32).copy(o,1),n.toBuffer(32).copy(o,33),o},toDER:r,toScriptSignature:function(t){var n=new e(1);return n.writeUInt8(t,0),e.concat([r(),n])}}}u.parseCompact=function(t){r.equal(t.length,65,"Invalid signature length");var e=t.readUInt8(0)-27;return r.equal(e,7&e,"Invalid signature parameter"),{compressed:!!(4&e),i:e&=3,signature:u(o.fromBuffer(t.slice(1,33)),o.fromBuffer(t.slice(33)))}},u.fromDER=function(t){r.equal(t.readUInt8(0),48,"Not a DER sequence"),r.equal(t.readUInt8(1),t.length-2,"Invalid sequence length"),r.equal(t.readUInt8(2),2,"Expected a DER integer");var e=t.readUInt8(3);r(e>0,"R length is zero");var n=4+e;r.equal(t.readUInt8(n),2,"Expected a DER integer (2)");var i=t.readUInt8(n+1);r(i>0,"S length is zero");var s=t.slice(4,n),a=t.slice(n+2);n+=2+i,e>1&&0===s.readUInt8(0)&&r(128&s.readUInt8(1),"R value excessively padded"),i>1&&0===a.readUInt8(0)&&r(128&a.readUInt8(1),"S value excessively padded"),r.equal(n,t.length,"Invalid DER encoding");var f=o.fromDERInteger(s),c=o.fromDERInteger(a);return r(f.signum()>=0,"R value is negative"),r(c.signum()>=0,"S value is negative"),u(f,c)},u.parseScriptSignature=function(t){var e=t.readUInt8(t.length-1),n=-129&e;return r(n>0&&n<4,"Invalid hashType"),{signature:u.fromDER(t.slice(0,-1)),hashType:e}},t.exports=u}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(82),i=n(37),o=n(28),u=n(105),s=n(29);t.exports={Aes:r,PrivateKey:i,PublicKey:o,Signature:u,key_utils:s}},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var u,s=t[Symbol.iterator]();!(r=(u=s.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();var o=n(197),u=n(19).Long,s=n(3),a={bytes:function(){return[v]},string:function(){return[b]},vector:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return[h,{type:t,sorted:e}]},optional:function(t){return[l,{type:t}]},time:function(){return[w]},map:function(t){return[f,{annotation:t}]},static_variant:function(t){return[c,{types:t}]},fixed_string16:function(){return[b,{maxLen:16}]},fixed_string32:function(){return[b,{maxLen:32}]},fixed_bytes16:function(){return[v,{len:16}]},fixed_bytes20:function(){return[v,{len:20}]},fixed_bytes28:function(){return[v,{len:28}]},fixed_bytes32:function(){return[v,{len:32}]},fixed_bytes33:function(){return[v,{len:33}]},fixed_bytes64:function(){return[v,{len:64}]},fixed_bytes65:function(){return[v,{len:65}]},uint8:function(){return[d,{bits:8}]},uint16:function(){return[d,{bits:16}]},uint32:function(){return[d,{bits:32}]},uint64:function(){return[d,{bits:64}]},uint128:function(){return[y,{bits:128}]},uint224:function(){return[y,{bits:224}]},uint256:function(){return[y,{bits:256}]},uint512:function(){return[y,{bits:512}]},varuint32:function(){return[d,{bits:32,variable:!0}]},int8:function(){return[d,{signed:!0,bits:8}]},int16:function(){return[d,{signed:!0,bits:16}]},int32:function(){return[d,{signed:!0,bits:32}]},int64:function(){return[d,{signed:!0,bits:64}]},int128:function(){return[y,{signed:!0,bits:128}]},int224:function(){return[y,{signed:!0,bits:224}]},int256:function(){return[y,{signed:!0,bits:256}]},int512:function(){return[y,{signed:!0,bits:512}]},varint32:function(){return[d,{signed:!0,bits:32,variable:!0}]},float32:function(){return[m,{bits:32}]},float64:function(){return[m,{bits:64}]}};t.exports=function(t){t=Object.assign({defaults:!1,debug:!1,customTypes:{}},t);var e=Object.assign({},a,t.customTypes),n=function(n){return function(r,o){return r[o]=function(){for(var u=arguments.length,s=Array(u),f=0;f<u;f++)s[f]=arguments[f];return function(t,e,n,r,o,u){var s=(r?o[t]:a[t]).apply(void 0,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(n)),f=i(s,2),c=f[0],h=f[1],l=void 0===h?{}:h,p=Object.assign(l,e);p.typeName=t;var d=c(p,r,u);return d.typeName=t,d}(o,t,s,n,e,r)},r}},r=Object.keys(a).reduce(n(),{}),o=Object.keys(t.customTypes||{}).reduce(n(r),{});return Object.assign({},r,o,{config:t})};var f=function(t){var e=i(t.annotation,2),n=e[0],r=e[1];if(!C(n))throw new TypeError("map<type1, > unknown");if(!C(r))throw new TypeError("map<, type2> unknown");return{fromByteBuffer:function(e){for(var i=e.readVarint32(),o={},u=0;u<i;u++)o[n.fromByteBuffer(e)]=r.fromByteBuffer(e);return t.debug&&console.log("0x"+i.toString(16),"(map.fromByteBuffer length)",o),o},appendByteBuffer:function(e,i){_(i,t);var o=Object.keys(i);e.writeVarint32(o.length),t.debug&&console.log("0x"+o.length.toString(16),"(map.appendByteBuffer length)",o);var u=!0,s=!1,a=void 0;try{for(var f,c=o[Symbol.iterator]();!(u=(f=c.next()).done);u=!0){var h=f.value,l=i[h];n.appendByteBuffer(e,h),r.appendByteBuffer(e,l)}}catch(t){s=!0,a=t}finally{try{!u&&c.return&&c.return()}finally{if(s)throw a}}},fromObject:function(e){_(e,t);var i={};for(var o in e)i[n.fromObject(o)]=r.fromObject(e[o]);return i},toObject:function(e){if(t.defaults&&null==e)return function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},n.toObject(null),r.toObject(null));_(e,t);var i={};for(var o in e)i[n.toObject(o)]=r.toObject(e[o]);return i}}},c=function(t){var e=t.types;return{fromByteBuffer:function(n){var r=n.readVarint32(),i=e[r];return t.debug&&console.error("static_variant id "+r+" (0x"+r.toString(16)+")"),s(i,"static_variant invalid type position "+r),[r,i.fromByteBuffer(n)]},appendByteBuffer:function(t,n){s(Array.isArray(n)&&2===n.length,"Required tuple");var r=n[0],i=e[r];s(i,"type "+r),t.writeVarint32(r),i.appendByteBuffer(t,n[1])},fromObject:function(t){s(Array.isArray(t)&&2===t.length,"Required tuple");var n=t[0],r=e[n];return s(r,"type "+n),[n,r.fromObject(t[1])]},toObject:function(n){if(t.defaults&&null==n)return[0,e[0].toObject(null,debug)];s(Array.isArray(n)&&2===n.length,"Required tuple");var r=n[0],i=e[r];return s(i,"type "+r),[r,i.toObject(n[1])]}}},h=function(t){var e=t.type,n=t.sorted;if(!C(e))throw new TypeError("vector type should be a serializer");return{fromByteBuffer:function(n){var r=n.readVarint32();t.debug&&console.log("fromByteBuffer vector length",r,"(0x"+r.toString(16)+")");for(var i=[],o=0;o<r;o++)i.push(e.fromByteBuffer(n));return i},appendByteBuffer:function(r,i){null==i&&(i=[]),_(i,t),r.writeVarint32(i.length),!0===n&&(i=F(e,Object.assign([],i))),t.debug&&console.log("0x"+i.length.toString(16),"(vector.appendByteBuffer length)",i);var o=!0,u=!1,s=void 0;try{for(var a,f=i[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;e.appendByteBuffer(r,c)}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}},fromObject:function(r){null==r&&(r=[]),_(r,t);var i=[],o=!0,u=!1,s=void 0;try{for(var a,f=r[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;i.push(e.fromObject(c))}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}return!0===n&&(i=F(e,Object.assign([],i))),i},toObject:function(r){if(t.defaults&&null==r)return[e.toObject(r)];null==r&&(r=[]),_(r,t),!0===n&&(r=F(e,Object.assign([],r)));var i=[],o=!0,u=!1,s=void 0;try{for(var a,f=r[Symbol.iterator]();!(o=(a=f.next()).done);o=!0){var c=a.value;i.push(e.toObject(c))}}catch(t){u=!0,s=t}finally{try{!o&&f.return&&f.return()}finally{if(u)throw s}}return i}}},l=function(t){var e=t.type;if(!C(e))throw new TypeError("optional parameter should be a serializer");return{fromByteBuffer:function(t){return 1!==t.readUint8()?null:e.fromByteBuffer(t)},appendByteBuffer:function(t,n){null!=n?(t.writeUint8(1),e.appendByteBuffer(t,n)):t.writeUint8(0)},fromObject:function(t){return null==t?null:e.fromObject(t)},toObject:function(n){return null!=n||t.defaults?e.toObject(n):null}}},p=function(t){var e=t.signed,n=void 0!==e&&e,r=t.bits;return t.variable?"Varint"+r+(n?"ZigZag":""):(n?"Int":"Uint")+r},d=function(t){return{fromByteBuffer:function(e){var n=e["read"+p(t)]();return u.isLong(n)?n.toString():n},appendByteBuffer:function(e,n){e["write"+p(t)](n)},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),u.isLong(e)?e.toString():e)}}},y=function(t){var n=t.signed,r=void 0!==n&&n,i=t.bits,u=i/8;return{fromByteBuffer:function(n){var s=n.copy(n.offset,n.offset+u);n.skip(u);var a=new o(s.toHex(),"hex"),f=a.toArrayLike(e,"le",u);a=new o(f.toString("hex"),"hex"),r&&(a=a.fromTwos(i));var c=a.toString();return B(c,t),i>53?c:a.toNumber()},appendByteBuffer:function(n,s){B(s,t);var a=new o(s);r&&(a=a.toTwos(i));var f=a.toArrayLike(e,"le",u);n.append(f.toString("binary"),"binary")},fromObject:function(e){return B(e,t),e},toObject:function(e){return t.defaults&&null==e?t.bits>53?"0":0:(B(e,t),e)}}},g=n(200),m=function(t){var n=t.bits,r=32===n?"Float":64===n?"Double":null;s(r,"unsupported float bit size: "+n);var i=n/8;return{fromByteBuffer:function(t){var n=t.copy(t.offset,t.offset+i);t.skip(i);var o=e.from(n.toBinary(),"binary");return g["read"+r+"LE"](o)},appendByteBuffer:function(t,e){var n=[];g["write"+r+"LE"](n,e),t.append(n)},fromObject:function(t){return t},toObject:function(e){return t.defaults&&null==e?0:e}}},v=function(t){return{fromByteBuffer:function(n){var r=t.len,i=void 0;if(null==r){var o=n.readVarint32();i=n.copy(n.offset,n.offset+o),n.skip(o)}else i=n.copy(n.offset,n.offset+r),n.skip(r);return e.from(i.toBinary(),"binary")},appendByteBuffer:function(e,n){null==t.len&&e.writeVarint32(n.length),e.append(n.toString("binary"),"binary")},fromObject:function(n){return"string"==typeof n?n=e.from(n,"hex"):n instanceof Array?n=e.from(n):n instanceof Uint8Array&&(n=e.from(n)),_(n,t),n},toObject:function(e){var n=t.defaults,r=t.len;return n&&null==e?Array(r?r+1:1).join("00"):(_(e,t),e.toString("hex"))},compare:function(t,n){return e.compare(t,n)}}},b=function(t){return{fromByteBuffer:function(t){return t.readVString()},appendByteBuffer:function(e,n){_(n,t),e.writeVString(n.toString())},fromObject:function(e){return _(e,t),e},toObject:function(e){return t.defaults&&null==e?"":(_(e,t),e)}}},w=function(t){return{fromByteBuffer:function(t){return t.readUint32()},appendByteBuffer:function(e,n){_(n,t),e.writeUint32(n)},fromObject:function(e){if(_(e,t),"number"==typeof e)return e;if(e.getTime)return Math.floor(e.getTime()/1e3);if("string"!=typeof e)throw new Error("Unknown date type: "+e);return"string"!=typeof e||/Z$/.test(e)||(e+="Z"),Math.floor(new Date(e).getTime()/1e3)},toObject:function(e){if(t.defaults&&null==e)return new Date(0).toISOString().split(".")[0];_(e,t),B(e,x(t,{bits:32}));var n=parseInt(e);return new Date(1e3*n).toISOString().split(".")[0]}}},_=function(t,e){if(S(t))throw new Error("Required "+e.typeName);if(null!=e.len){if(null==t.length)throw new Error('len validation requries a "length" property');var n=e.len;if(t.length!==n)throw new Error(e.typeName+" length "+t.length+" does not equal "+n)}if(null!=e.maxLen){var r=e.maxLen;if(null==t.length)throw new Error('maxLen validation requries a "length" property');if(t.length>r)throw new Error(e.typeName+" length "+t.length+" exceeds maxLen "+r)}},E=new o,A=new o("1");function B(t,e){if(S(t))throw new Error("Required "+e.typeName);var n=e.signed,r=void 0!==n&&n,i=e.bits,u=void 0===i?54:i;if(t=String(t).trim(),r&&!/^-?[0-9]+$/.test(t)||!r&&!/^[0-9]+$/.test(t))throw new Error("Number format "+e.typeName+" "+t);var s=r?k(u):D(u),a=r?T(u):E,f=new o(t);if(f.cmp(a)<0||f.cmp(s)>0)throw new Error("Overflow "+e.typeName+" "+t+", max "+s.toString()+", min "+a.toString()+", signed "+r+", bits "+u)}var C=function(t){return"object"===(void 0===t?"undefined":r(t))&&"function"==typeof t.fromByteBuffer&&"function"==typeof t.appendByteBuffer&&"function"==typeof t.fromObject&&"function"==typeof t.toObject},F=function(t,e){return t.compare?e.sort(t.compare):e.sort()},x=function(){return Object.assign.apply(Object,arguments)},S=function(t){return null==t},D=function(t){return new o(1).ishln(t).isub(A)},k=function(t){return new o(1).ishln(t-1).isub(A)},T=function(t){return new o(1).ishln(t-1).ineg()}}).call(this,n(2).Buffer)},function(t,e,n){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}function o(t,e,n){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(n=e,e=10),this._init(t||0,e||10,n||"be"))}var u;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{u=n(199).Buffer}catch(t){}function s(t,e,n){for(var r=0,i=Math.min(t.length,n),o=e;o<i;o++){var u=t.charCodeAt(o)-48;r<<=4,r|=u>=49&&u<=54?u-49+10:u>=17&&u<=22?u-17+10:15&u}return r}function a(t,e,n,r){for(var i=0,o=Math.min(t.length,n),u=e;u<o;u++){var s=t.charCodeAt(u)-48;i*=r,i+=s>=49?s-49+10:s>=17?s-17+10:s}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,n){if("number"==typeof t)return this._initNumber(t,e,n);if("object"==typeof t)return this._initArray(t,e,n);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initNumber=function(t,e,n){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initArray=function(t,e,n){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,u,s=0;if("be"===n)for(i=t.length-1,o=0;i>=0;i-=3)u=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=u<<s&67108863,this.words[o+1]=u>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===n)for(i=0,o=0;i<t.length;i+=3)u=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=u<<s&67108863,this.words[o+1]=u>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var r,i,o=0;for(n=t.length-6,r=0;n>=e;n-=6)i=s(t,n,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);n+6!==e&&(i=s(t,e,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,n){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var o=t.length-n,u=o%r,s=Math.min(o,o-u)+n,f=0,c=n;c<s;c+=r)f=a(t,c,c+r,e),this.imuln(i),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==u){var h=1;for(f=a(t,c,t.length,e),c=0;c<u;c++)h*=e;this.imuln(h),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function l(t,e,n){n.negative=e.negative^t.negative;var r=t.length+e.length|0;n.length=r,r=r-1|0;var i=0|t.words[0],o=0|e.words[0],u=i*o,s=67108863&u,a=u/67108864|0;n.words[0]=s;for(var f=1;f<r;f++){for(var c=a>>>26,h=67108863&a,l=Math.min(f,e.length-1),p=Math.max(0,f-t.length+1);p<=l;p++){var d=f-p|0;c+=(u=(i=0|t.words[d])*(o=0|e.words[p])+h)/67108864|0,h=67108863&u}n.words[f]=0|h,a=0|c}return 0!==a?n.words[f]=0|a:n.length--,n.strip()}o.prototype.toString=function(t,e){var n;if(t=t||10,e=0|e||1,16===t||"hex"===t){n="";for(var i=0,o=0,u=0;u<this.length;u++){var s=this.words[u],a=(16777215&(s<<i|o)).toString(16);n=0!==(o=s>>>24-i&16777215)||u!==this.length-1?f[6-a.length]+a+n:a+n,(i+=2)>=26&&(i-=26,u--)}for(0!==o&&(n=o.toString(16)+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(t===(0|t)&&t>=2&&t<=36){var l=c[t],p=h[t];n="";var d=this.clone();for(d.negative=0;!d.isZero();){var y=d.modn(p).toString(t);n=(d=d.idivn(p)).isZero()?y+n:f[l-y.length]+y+n}for(this.isZero()&&(n="0"+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==u),this.toArrayLike(u,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,n){var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var u,s,a="le"===e,f=new t(o),c=this.clone();if(a){for(s=0;!c.isZero();s++)u=c.andln(255),c.iushrn(8),f[s]=u;for(;s<o;s++)f[s]=0}else{for(s=0;s<o-i;s++)f[s]=0;for(s=0;!c.isZero();s++)u=c.andln(255),c.iushrn(8),f[o-s-1]=u}return f},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,n=0;return e>=4096&&(n+=13,e>>>=13),e>=64&&(n+=7,e>>>=7),e>=8&&(n+=4,e>>>=4),e>=2&&(n+=2,e>>>=2),n+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,n=0;return 0==(8191&e)&&(n+=13,e>>>=13),0==(127&e)&&(n+=7,e>>>=7),0==(15&e)&&(n+=4,e>>>=4),0==(3&e)&&(n+=2,e>>>=2),0==(1&e)&&n++,n},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var n=this._zeroBits(this.words[e]);if(t+=n,26!==n)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var n=0;n<e.length;n++)this.words[n]=this.words[n]&t.words[n];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,n;this.length>t.length?(e=this,n=t):(e=t,n=this);for(var r=0;r<n.length;r++)this.words[r]=e.words[r]^n.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),n=t%26;this._expand(e),n>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var n=t/26|0,i=t%26;return this._expand(n+1),this.words[n]=e?this.words[n]|1<<i:this.words[n]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,n,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(n=this,r=t):(n=t,r=this);for(var i=0,o=0;o<r.length;o++)e=(0|n.words[o])+(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<n.length;o++)e=(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=n.length,0!==i)this.words[this.length]=i,this.length++;else if(n!==this)for(;o<n.length;o++)this.words[o]=n.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var n,r,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(n=this,r=t):(n=t,r=this);for(var o=0,u=0;u<r.length;u++)o=(e=(0|n.words[u])-(0|r.words[u])+o)>>26,this.words[u]=67108863&e;for(;0!==o&&u<n.length;u++)o=(e=(0|n.words[u])+o)>>26,this.words[u]=67108863&e;if(0===o&&u<n.length&&n!==this)for(;u<n.length;u++)this.words[u]=n.words[u];return this.length=Math.max(this.length,u),n!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,n){var r,i,o,u=t.words,s=e.words,a=n.words,f=0,c=0|u[0],h=8191&c,l=c>>>13,p=0|u[1],d=8191&p,y=p>>>13,g=0|u[2],m=8191&g,v=g>>>13,b=0|u[3],w=8191&b,_=b>>>13,E=0|u[4],A=8191&E,B=E>>>13,C=0|u[5],F=8191&C,x=C>>>13,S=0|u[6],D=8191&S,k=S>>>13,T=0|u[7],I=8191&T,M=T>>>13,O=0|u[8],j=8191&O,R=O>>>13,L=0|u[9],N=8191&L,P=L>>>13,U=0|s[0],q=8191&U,z=U>>>13,H=0|s[1],V=8191&H,G=H>>>13,Z=0|s[2],Y=8191&Z,K=Z>>>13,W=0|s[3],X=8191&W,J=W>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],nt=8191&et,rt=et>>>13,it=0|s[6],ot=8191&it,ut=it>>>13,st=0|s[7],at=8191&st,ft=st>>>13,ct=0|s[8],ht=8191&ct,lt=ct>>>13,pt=0|s[9],dt=8191&pt,yt=pt>>>13;n.negative=t.negative^e.negative,n.length=19;var gt=(f+(r=Math.imul(h,q))|0)+((8191&(i=(i=Math.imul(h,z))+Math.imul(l,q)|0))<<13)|0;f=((o=Math.imul(l,z))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(d,q),i=(i=Math.imul(d,z))+Math.imul(y,q)|0,o=Math.imul(y,z);var mt=(f+(r=r+Math.imul(h,V)|0)|0)+((8191&(i=(i=i+Math.imul(h,G)|0)+Math.imul(l,V)|0))<<13)|0;f=((o=o+Math.imul(l,G)|0)+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,r=Math.imul(m,q),i=(i=Math.imul(m,z))+Math.imul(v,q)|0,o=Math.imul(v,z),r=r+Math.imul(d,V)|0,i=(i=i+Math.imul(d,G)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,G)|0;var vt=(f+(r=r+Math.imul(h,Y)|0)|0)+((8191&(i=(i=i+Math.imul(h,K)|0)+Math.imul(l,Y)|0))<<13)|0;f=((o=o+Math.imul(l,K)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(w,q),i=(i=Math.imul(w,z))+Math.imul(_,q)|0,o=Math.imul(_,z),r=r+Math.imul(m,V)|0,i=(i=i+Math.imul(m,G)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,G)|0,r=r+Math.imul(d,Y)|0,i=(i=i+Math.imul(d,K)|0)+Math.imul(y,Y)|0,o=o+Math.imul(y,K)|0;var bt=(f+(r=r+Math.imul(h,X)|0)|0)+((8191&(i=(i=i+Math.imul(h,J)|0)+Math.imul(l,X)|0))<<13)|0;f=((o=o+Math.imul(l,J)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(A,q),i=(i=Math.imul(A,z))+Math.imul(B,q)|0,o=Math.imul(B,z),r=r+Math.imul(w,V)|0,i=(i=i+Math.imul(w,G)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,G)|0,r=r+Math.imul(m,Y)|0,i=(i=i+Math.imul(m,K)|0)+Math.imul(v,Y)|0,o=o+Math.imul(v,K)|0,r=r+Math.imul(d,X)|0,i=(i=i+Math.imul(d,J)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,J)|0;var wt=(f+(r=r+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,tt)|0)+Math.imul(l,Q)|0))<<13)|0;f=((o=o+Math.imul(l,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(F,q),i=(i=Math.imul(F,z))+Math.imul(x,q)|0,o=Math.imul(x,z),r=r+Math.imul(A,V)|0,i=(i=i+Math.imul(A,G)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,G)|0,r=r+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(_,Y)|0,o=o+Math.imul(_,K)|0,r=r+Math.imul(m,X)|0,i=(i=i+Math.imul(m,J)|0)+Math.imul(v,X)|0,o=o+Math.imul(v,J)|0,r=r+Math.imul(d,Q)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0;var _t=(f+(r=r+Math.imul(h,nt)|0)|0)+((8191&(i=(i=i+Math.imul(h,rt)|0)+Math.imul(l,nt)|0))<<13)|0;f=((o=o+Math.imul(l,rt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(D,q),i=(i=Math.imul(D,z))+Math.imul(k,q)|0,o=Math.imul(k,z),r=r+Math.imul(F,V)|0,i=(i=i+Math.imul(F,G)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,G)|0,r=r+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,K)|0)+Math.imul(B,Y)|0,o=o+Math.imul(B,K)|0,r=r+Math.imul(w,X)|0,i=(i=i+Math.imul(w,J)|0)+Math.imul(_,X)|0,o=o+Math.imul(_,J)|0,r=r+Math.imul(m,Q)|0,i=(i=i+Math.imul(m,tt)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,tt)|0,r=r+Math.imul(d,nt)|0,i=(i=i+Math.imul(d,rt)|0)+Math.imul(y,nt)|0,o=o+Math.imul(y,rt)|0;var Et=(f+(r=r+Math.imul(h,ot)|0)|0)+((8191&(i=(i=i+Math.imul(h,ut)|0)+Math.imul(l,ot)|0))<<13)|0;f=((o=o+Math.imul(l,ut)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(I,q),i=(i=Math.imul(I,z))+Math.imul(M,q)|0,o=Math.imul(M,z),r=r+Math.imul(D,V)|0,i=(i=i+Math.imul(D,G)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,G)|0,r=r+Math.imul(F,Y)|0,i=(i=i+Math.imul(F,K)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(A,X)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(B,X)|0,o=o+Math.imul(B,J)|0,r=r+Math.imul(w,Q)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,r=r+Math.imul(m,nt)|0,i=(i=i+Math.imul(m,rt)|0)+Math.imul(v,nt)|0,o=o+Math.imul(v,rt)|0,r=r+Math.imul(d,ot)|0,i=(i=i+Math.imul(d,ut)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,ut)|0;var At=(f+(r=r+Math.imul(h,at)|0)|0)+((8191&(i=(i=i+Math.imul(h,ft)|0)+Math.imul(l,at)|0))<<13)|0;f=((o=o+Math.imul(l,ft)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(j,q),i=(i=Math.imul(j,z))+Math.imul(R,q)|0,o=Math.imul(R,z),r=r+Math.imul(I,V)|0,i=(i=i+Math.imul(I,G)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,G)|0,r=r+Math.imul(D,Y)|0,i=(i=i+Math.imul(D,K)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(F,X)|0,i=(i=i+Math.imul(F,J)|0)+Math.imul(x,X)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,r=r+Math.imul(w,nt)|0,i=(i=i+Math.imul(w,rt)|0)+Math.imul(_,nt)|0,o=o+Math.imul(_,rt)|0,r=r+Math.imul(m,ot)|0,i=(i=i+Math.imul(m,ut)|0)+Math.imul(v,ot)|0,o=o+Math.imul(v,ut)|0,r=r+Math.imul(d,at)|0,i=(i=i+Math.imul(d,ft)|0)+Math.imul(y,at)|0,o=o+Math.imul(y,ft)|0;var Bt=(f+(r=r+Math.imul(h,ht)|0)|0)+((8191&(i=(i=i+Math.imul(h,lt)|0)+Math.imul(l,ht)|0))<<13)|0;f=((o=o+Math.imul(l,lt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,q),i=(i=Math.imul(N,z))+Math.imul(P,q)|0,o=Math.imul(P,z),r=r+Math.imul(j,V)|0,i=(i=i+Math.imul(j,G)|0)+Math.imul(R,V)|0,o=o+Math.imul(R,G)|0,r=r+Math.imul(I,Y)|0,i=(i=i+Math.imul(I,K)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(D,X)|0,i=(i=i+Math.imul(D,J)|0)+Math.imul(k,X)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(F,Q)|0,i=(i=i+Math.imul(F,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(A,nt)|0,i=(i=i+Math.imul(A,rt)|0)+Math.imul(B,nt)|0,o=o+Math.imul(B,rt)|0,r=r+Math.imul(w,ot)|0,i=(i=i+Math.imul(w,ut)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,ut)|0,r=r+Math.imul(m,at)|0,i=(i=i+Math.imul(m,ft)|0)+Math.imul(v,at)|0,o=o+Math.imul(v,ft)|0,r=r+Math.imul(d,ht)|0,i=(i=i+Math.imul(d,lt)|0)+Math.imul(y,ht)|0,o=o+Math.imul(y,lt)|0;var Ct=(f+(r=r+Math.imul(h,dt)|0)|0)+((8191&(i=(i=i+Math.imul(h,yt)|0)+Math.imul(l,dt)|0))<<13)|0;f=((o=o+Math.imul(l,yt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(N,V),i=(i=Math.imul(N,G))+Math.imul(P,V)|0,o=Math.imul(P,G),r=r+Math.imul(j,Y)|0,i=(i=i+Math.imul(j,K)|0)+Math.imul(R,Y)|0,o=o+Math.imul(R,K)|0,r=r+Math.imul(I,X)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(M,X)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(D,Q)|0,i=(i=i+Math.imul(D,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(F,nt)|0,i=(i=i+Math.imul(F,rt)|0)+Math.imul(x,nt)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(A,ot)|0,i=(i=i+Math.imul(A,ut)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,ut)|0,r=r+Math.imul(w,at)|0,i=(i=i+Math.imul(w,ft)|0)+Math.imul(_,at)|0,o=o+Math.imul(_,ft)|0,r=r+Math.imul(m,ht)|0,i=(i=i+Math.imul(m,lt)|0)+Math.imul(v,ht)|0,o=o+Math.imul(v,lt)|0;var Ft=(f+(r=r+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,yt)|0)+Math.imul(y,dt)|0))<<13)|0;f=((o=o+Math.imul(y,yt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,r=Math.imul(N,Y),i=(i=Math.imul(N,K))+Math.imul(P,Y)|0,o=Math.imul(P,K),r=r+Math.imul(j,X)|0,i=(i=i+Math.imul(j,J)|0)+Math.imul(R,X)|0,o=o+Math.imul(R,J)|0,r=r+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(D,nt)|0,i=(i=i+Math.imul(D,rt)|0)+Math.imul(k,nt)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(F,ot)|0,i=(i=i+Math.imul(F,ut)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(A,at)|0,i=(i=i+Math.imul(A,ft)|0)+Math.imul(B,at)|0,o=o+Math.imul(B,ft)|0,r=r+Math.imul(w,ht)|0,i=(i=i+Math.imul(w,lt)|0)+Math.imul(_,ht)|0,o=o+Math.imul(_,lt)|0;var xt=(f+(r=r+Math.imul(m,dt)|0)|0)+((8191&(i=(i=i+Math.imul(m,yt)|0)+Math.imul(v,dt)|0))<<13)|0;f=((o=o+Math.imul(v,yt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,X),i=(i=Math.imul(N,J))+Math.imul(P,X)|0,o=Math.imul(P,J),r=r+Math.imul(j,Q)|0,i=(i=i+Math.imul(j,tt)|0)+Math.imul(R,Q)|0,o=o+Math.imul(R,tt)|0,r=r+Math.imul(I,nt)|0,i=(i=i+Math.imul(I,rt)|0)+Math.imul(M,nt)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(D,ot)|0,i=(i=i+Math.imul(D,ut)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(F,at)|0,i=(i=i+Math.imul(F,ft)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ft)|0,r=r+Math.imul(A,ht)|0,i=(i=i+Math.imul(A,lt)|0)+Math.imul(B,ht)|0,o=o+Math.imul(B,lt)|0;var St=(f+(r=r+Math.imul(w,dt)|0)|0)+((8191&(i=(i=i+Math.imul(w,yt)|0)+Math.imul(_,dt)|0))<<13)|0;f=((o=o+Math.imul(_,yt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(N,Q),i=(i=Math.imul(N,tt))+Math.imul(P,Q)|0,o=Math.imul(P,tt),r=r+Math.imul(j,nt)|0,i=(i=i+Math.imul(j,rt)|0)+Math.imul(R,nt)|0,o=o+Math.imul(R,rt)|0,r=r+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,ut)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(D,at)|0,i=(i=i+Math.imul(D,ft)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ft)|0,r=r+Math.imul(F,ht)|0,i=(i=i+Math.imul(F,lt)|0)+Math.imul(x,ht)|0,o=o+Math.imul(x,lt)|0;var Dt=(f+(r=r+Math.imul(A,dt)|0)|0)+((8191&(i=(i=i+Math.imul(A,yt)|0)+Math.imul(B,dt)|0))<<13)|0;f=((o=o+Math.imul(B,yt)|0)+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,r=Math.imul(N,nt),i=(i=Math.imul(N,rt))+Math.imul(P,nt)|0,o=Math.imul(P,rt),r=r+Math.imul(j,ot)|0,i=(i=i+Math.imul(j,ut)|0)+Math.imul(R,ot)|0,o=o+Math.imul(R,ut)|0,r=r+Math.imul(I,at)|0,i=(i=i+Math.imul(I,ft)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ft)|0,r=r+Math.imul(D,ht)|0,i=(i=i+Math.imul(D,lt)|0)+Math.imul(k,ht)|0,o=o+Math.imul(k,lt)|0;var kt=(f+(r=r+Math.imul(F,dt)|0)|0)+((8191&(i=(i=i+Math.imul(F,yt)|0)+Math.imul(x,dt)|0))<<13)|0;f=((o=o+Math.imul(x,yt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,ot),i=(i=Math.imul(N,ut))+Math.imul(P,ot)|0,o=Math.imul(P,ut),r=r+Math.imul(j,at)|0,i=(i=i+Math.imul(j,ft)|0)+Math.imul(R,at)|0,o=o+Math.imul(R,ft)|0,r=r+Math.imul(I,ht)|0,i=(i=i+Math.imul(I,lt)|0)+Math.imul(M,ht)|0,o=o+Math.imul(M,lt)|0;var Tt=(f+(r=r+Math.imul(D,dt)|0)|0)+((8191&(i=(i=i+Math.imul(D,yt)|0)+Math.imul(k,dt)|0))<<13)|0;f=((o=o+Math.imul(k,yt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),i=(i=Math.imul(N,ft))+Math.imul(P,at)|0,o=Math.imul(P,ft),r=r+Math.imul(j,ht)|0,i=(i=i+Math.imul(j,lt)|0)+Math.imul(R,ht)|0,o=o+Math.imul(R,lt)|0;var It=(f+(r=r+Math.imul(I,dt)|0)|0)+((8191&(i=(i=i+Math.imul(I,yt)|0)+Math.imul(M,dt)|0))<<13)|0;f=((o=o+Math.imul(M,yt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ht),i=(i=Math.imul(N,lt))+Math.imul(P,ht)|0,o=Math.imul(P,lt);var Mt=(f+(r=r+Math.imul(j,dt)|0)|0)+((8191&(i=(i=i+Math.imul(j,yt)|0)+Math.imul(R,dt)|0))<<13)|0;f=((o=o+Math.imul(R,yt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863;var Ot=(f+(r=Math.imul(N,dt))|0)+((8191&(i=(i=Math.imul(N,yt))+Math.imul(P,dt)|0))<<13)|0;return f=((o=Math.imul(P,yt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,a[0]=gt,a[1]=mt,a[2]=vt,a[3]=bt,a[4]=wt,a[5]=_t,a[6]=Et,a[7]=At,a[8]=Bt,a[9]=Ct,a[10]=Ft,a[11]=xt,a[12]=St,a[13]=Dt,a[14]=kt,a[15]=Tt,a[16]=It,a[17]=Mt,a[18]=Ot,0!==f&&(a[19]=f,n.length++),n};function d(t,e,n){return(new y).mulp(t,e,n)}function y(t,e){this.x=t,this.y=e}Math.imul||(p=l),o.prototype.mulTo=function(t,e){var n=this.length+t.length;return 10===this.length&&10===t.length?p(this,t,e):n<63?l(this,t,e):n<1024?function(t,e,n){n.negative=e.negative^t.negative,n.length=t.length+e.length;for(var r=0,i=0,o=0;o<n.length-1;o++){var u=i;i=0;for(var s=67108863&r,a=Math.min(o,e.length-1),f=Math.max(0,o-t.length+1);f<=a;f++){var c=o-f,h=(0|t.words[c])*(0|e.words[f]),l=67108863&h;s=67108863&(l=l+s|0),i+=(u=(u=u+(h/67108864|0)|0)+(l>>>26)|0)>>>26,u&=67108863}n.words[o]=s,r=u,u=i}return 0!==r?n.words[o]=r:n.length--,n.strip()}(this,t,e):d(this,t,e)},y.prototype.makeRBT=function(t){for(var e=new Array(t),n=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,n,t);return e},y.prototype.revBin=function(t,e,n){if(0===t||t===n-1)return t;for(var r=0,i=0;i<e;i++)r|=(1&t)<<e-i-1,t>>=1;return r},y.prototype.permute=function(t,e,n,r,i,o){for(var u=0;u<o;u++)r[u]=e[t[u]],i[u]=n[t[u]]},y.prototype.transform=function(t,e,n,r,i,o){this.permute(o,t,e,n,r,i);for(var u=1;u<i;u<<=1)for(var s=u<<1,a=Math.cos(2*Math.PI/s),f=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var h=a,l=f,p=0;p<u;p++){var d=n[c+p],y=r[c+p],g=n[c+p+u],m=r[c+p+u],v=h*g-l*m;m=h*m+l*g,g=v,n[c+p]=d+g,r[c+p]=y+m,n[c+p+u]=d-g,r[c+p+u]=y-m,p!==s&&(v=a*h-f*l,l=a*l+f*h,h=v)}},y.prototype.guessLen13b=function(t,e){var n=1|Math.max(e,t),r=1&n,i=0;for(n=n/2|0;n;n>>>=1)i++;return 1<<i+1+r},y.prototype.conjugate=function(t,e,n){if(!(n<=1))for(var r=0;r<n/2;r++){var i=t[r];t[r]=t[n-r-1],t[n-r-1]=i,i=e[r],e[r]=-e[n-r-1],e[n-r-1]=-i}},y.prototype.normalize13b=function(t,e){for(var n=0,r=0;r<e/2;r++){var i=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+n;t[r]=67108863&i,n=i<67108864?0:i/67108864|0}return t},y.prototype.convert13b=function(t,e,n,i){for(var o=0,u=0;u<e;u++)o+=0|t[u],n[2*u]=8191&o,o>>>=13,n[2*u+1]=8191&o,o>>>=13;for(u=2*e;u<i;++u)n[u]=0;r(0===o),r(0==(-8192&o))},y.prototype.stub=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=0;return e},y.prototype.mulp=function(t,e,n){var r=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(r),o=this.stub(r),u=new Array(r),s=new Array(r),a=new Array(r),f=new Array(r),c=new Array(r),h=new Array(r),l=n.words;l.length=r,this.convert13b(t.words,t.length,u,r),this.convert13b(e.words,e.length,f,r),this.transform(u,o,s,a,r,i),this.transform(f,o,c,h,r,i);for(var p=0;p<r;p++){var d=s[p]*c[p]-a[p]*h[p];a[p]=s[p]*h[p]+a[p]*c[p],s[p]=d}return this.conjugate(s,a,r),this.transform(s,a,l,o,r,i),this.conjugate(l,o,r),this.normalize13b(l,r),n.negative=t.negative^e.negative,n.length=t.length+e.length,n.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),d(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,n=0;n<this.length;n++){var i=(0|this.words[n])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[n]=67108863&o}return 0!==e&&(this.words[n]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),n=0;n<e.length;n++){var r=n/26|0,i=n%26;e[n]=(t.words[r]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var n=this,r=0;r<e.length&&0===e[r];r++,n=n.sqr());if(++r<e.length)for(var i=n.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(n=n.mul(i));return n},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,n=t%26,i=(t-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var u=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<n;this.words[e]=a|u,u=s>>>26-n}u&&(this.words[e]=u,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,n){var i;r("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,u=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=n;if(i-=u,i=Math.max(0,i),a){for(var f=0;f<u;f++)a.words[f]=this.words[f];a.length=u}if(0===u);else if(this.length>u)for(this.length-=u,f=0;f<this.length;f++)this.words[f]=this.words[f+u];else this.words[0]=0,this.length=1;var c=0;for(f=this.length-1;f>=0&&(0!==c||f>=i);f--){var h=0|this.words[f];this.words[f]=c<<26-o|h>>>o,c=h&s}return a&&0!==c&&(a.words[a.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,n){return r(0===this.negative),this.iushrn(t,e,n)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26,i=1<<e;return!(this.length<=n)&&!!(this.words[n]&i)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==e&&n++,this.length=Math.min(n,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,n){var i,o,u=t.length+n;this._expand(u);var s=0;for(i=0;i<t.length;i++){o=(0|this.words[i+n])+s;var a=(0|t.words[i])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)s=(o=(0|this.words[i+n])+s)>>26,this.words[i+n]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,i=0;i<this.length;i++)s=(o=-(0|this.words[i])+s)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var n=(this.length,t.length),r=this.clone(),i=t,u=0|i.words[i.length-1];0!==(n=26-this._countBits(u))&&(i=i.ushln(n),r.iushln(n),u=0|i.words[i.length-1]);var s,a=r.length-i.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var f=0;f<s.length;f++)s.words[f]=0}var c=r.clone()._ishlnsubmul(i,1,a);0===c.negative&&(r=c,s&&(s.words[a]=1));for(var h=a-1;h>=0;h--){var l=67108864*(0|r.words[i.length+h])+(0|r.words[i.length+h-1]);for(l=Math.min(l/u|0,67108863),r._ishlnsubmul(i,l,h);0!==r.negative;)l--,r.negative=0,r._ishlnsubmul(i,1,h),r.isZero()||(r.negative^=1);s&&(s.words[h]=l)}return s&&s.strip(),r.strip(),"div"!==e&&0!==n&&r.iushrn(n),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,n){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(u=s.mod.neg(),n&&0!==u.negative&&u.iadd(t)),{div:i,mod:u}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(u=s.mod.neg(),n&&0!==u.negative&&u.isub(t)),{div:s.div,mod:u}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,u,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var n=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),i=t.andln(1),o=n.cmp(r);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,n=0,i=this.length-1;i>=0;i--)n=(e*n+(0|this.words[i]))%t;return n},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var i=(0|this.words[n])+67108864*e;this.words[n]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),u=new o(0),s=new o(0),a=new o(1),f=0;e.isEven()&&n.isEven();)e.iushrn(1),n.iushrn(1),++f;for(var c=n.clone(),h=e.clone();!e.isZero();){for(var l=0,p=1;0==(e.words[0]&p)&&l<26;++l,p<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(i.isOdd()||u.isOdd())&&(i.iadd(c),u.isub(h)),i.iushrn(1),u.iushrn(1);for(var d=0,y=1;0==(n.words[0]&y)&&d<26;++d,y<<=1);if(d>0)for(n.iushrn(d);d-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(h)),s.iushrn(1),a.iushrn(1);e.cmp(n)>=0?(e.isub(n),i.isub(s),u.isub(a)):(n.isub(e),s.isub(i),a.isub(u))}return{a:s,b:a,gcd:n.iushln(f)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,u=new o(1),s=new o(0),a=n.clone();e.cmpn(1)>0&&n.cmpn(1)>0;){for(var f=0,c=1;0==(e.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(e.iushrn(f);f-- >0;)u.isOdd()&&u.iadd(a),u.iushrn(1);for(var h=0,l=1;0==(n.words[0]&l)&&h<26;++h,l<<=1);if(h>0)for(n.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(n)>=0?(e.isub(n),u.isub(s)):(n.isub(e),s.isub(u))}return(i=0===e.cmpn(1)?u:s).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),n=t.clone();e.negative=0,n.negative=0;for(var r=0;e.isEven()&&n.isEven();r++)e.iushrn(1),n.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;n.isEven();)n.iushrn(1);var i=e.cmp(n);if(i<0){var o=e;e=n,n=o}else if(0===i||0===n.cmpn(1))break;e.isub(n)}return n.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,n=(t-e)/26,i=1<<e;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,u=n;0!==o&&u<this.length;u++){var s=0|this.words[u];o=(s+=o)>>>26,s&=67108863,this.words[u]=s}return 0!==o&&(this.words[u]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,n=t<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)e=1;else{n&&(t=-t),r(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],i=0|t.words[n];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new E(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function m(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function E(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function A(t){E.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},m.prototype.ireduce=function(t){var e,n=t;do{this.split(n,this.tmp),e=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):n.strip(),n},m.prototype.split=function(t,e){t.iushrn(this.n,0,e)},m.prototype.imulK=function(t){return t.imul(this.k)},i(v,m),v.prototype.split=function(t,e){for(var n=Math.min(t.length,9),r=0;r<n;r++)e.words[r]=t.words[r];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(e.words[e.length++]=4194303&i,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|i>>>22,i=o}i>>>=22,t.words[r-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,n=0;n<t.length;n++){var r=0|t.words[n];e+=977*r,t.words[n]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,m),i(w,m),i(_,m),_.prototype.imulK=function(t){for(var e=0,n=0;n<t.length;n++){var r=19*(0|t.words[n])+e,i=67108863&r;r>>>=26,t.words[n]=i,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return g[t]=e,e},E.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},E.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},E.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},E.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},E.prototype.add=function(t,e){this._verify2(t,e);var n=t.add(e);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},E.prototype.iadd=function(t,e){this._verify2(t,e);var n=t.iadd(e);return n.cmp(this.m)>=0&&n.isub(this.m),n},E.prototype.sub=function(t,e){this._verify2(t,e);var n=t.sub(e);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},E.prototype.isub=function(t,e){this._verify2(t,e);var n=t.isub(e);return n.cmpn(0)<0&&n.iadd(this.m),n},E.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},E.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},E.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},E.prototype.isqr=function(t){return this.imul(t,t.clone())},E.prototype.sqr=function(t){return this.mul(t,t)},E.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var n=this.m.add(new o(1)).iushrn(2);return this.pow(t,n)}for(var i=this.m.subn(1),u=0;!i.isZero()&&0===i.andln(1);)u++,i.iushrn(1);r(!i.isZero());var s=new o(1).toRed(this),a=s.redNeg(),f=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new o(2*c*c).toRed(this);0!==this.pow(c,f).cmp(a);)c.redIAdd(a);for(var h=this.pow(c,i),l=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),d=u;0!==p.cmp(s);){for(var y=p,g=0;0!==y.cmp(s);g++)y=y.redSqr();r(g<d);var m=this.pow(h,new o(1).iushln(d-g-1));l=l.redMul(m),h=m.redSqr(),p=p.redMul(h),d=g}return l},E.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},E.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var n=new Array(16);n[0]=new o(1).toRed(this),n[1]=t;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],t);var i=n[0],u=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var f=e.words[r],c=a-1;c>=0;c--){var h=f>>c&1;i!==n[0]&&(i=this.sqr(i)),0!==h||0!==u?(u<<=1,u|=h,(4===++s||0===r&&0===c)&&(i=this.mul(i,n[u]),s=0,u=0)):s=0}a=26}return i},E.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},E.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new A(t)},i(A,E),A.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},A.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},A.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var n=t.imul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},A.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var n=t.mul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),u=i;return i.cmp(this.m)>=0?u=i.isub(this.m):i.cmpn(0)<0&&(u=i.iadd(this.m)),u._forceRed(this)},A.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,n(198)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){},function(t,e,n){"use strict";(function(e){var n,r,i,o,u,s,a,f,c=!1;function h(t,e,n){var r=t[e++],i=t[e++],o=t[e++],u=t[e];return"bige"===n?256*(256*(256*r+i)+o)+u:256*(256*(256*u+o)+i)+r}function l(t,e,n,r){var i=e>>>24&255,o=e>>16&255,u=e>>8&255,s=255&e;"bige"===r?(t[n++]=i,t[n++]=o,t[n++]=u,t[n]=s):(t[n++]=s,t[n++]=u,t[n++]=o,t[n]=i)}function p(t,e,n,r,i){"bige"===i?(l(t,e,r,i),l(t,n,r+4,i)):(l(t,n,r,i),l(t,e,r+4,i))}"function"==typeof Float32Array&&function(){var t=new Float32Array(1),e=new Uint8Array(t.buffer);t[0]=-1,c=0===e[3],n=function(n,r){return(r=r||0)<0||r+4>n.length?0:(e[0]=n[r++],e[1]=n[r++],e[2]=n[r++],e[3]=n[r],t[0])},i=function(n,r){return(r=r||0)<0||r+4>n.length?0:(e[3]=n[r++],e[2]=n[r++],e[1]=n[r++],e[0]=n[r],t[0])},r=function(n,r,i){i=i||0,t[0]=r,n[i++]=e[0],n[i++]=e[1],n[i++]=e[2],n[i]=e[3]},o=function(n,r,i){i=i||0,t[0]=r,n[i++]=e[3],n[i++]=e[2],n[i++]=e[1],n[i]=e[0]}}(),"function"==typeof Float64Array&&function(){var t=new Float64Array(1),e=new Uint8Array(t.buffer);u=function(n,r){return(r=r||0)<0||r+8>n.length?0:(e[0]=n[r+0],e[1]=n[r+1],e[2]=n[r+2],e[3]=n[r+3],e[4]=n[r+4],e[5]=n[r+5],e[6]=n[r+6],e[7]=n[r+7],t[0])},a=function(n,r){return(r=r||0)<0||r+8>n.length?0:(e[7]=n[r+0],e[6]=n[r+1],e[5]=n[r+2],e[4]=n[r+3],e[3]=n[r+4],e[2]=n[r+5],e[1]=n[r+6],e[0]=n[r+7],t[0])},s=function(n,r,i){i=i||0,t[0]=r,n[i+0]=e[0],n[i+1]=e[1],n[i+2]=e[2],n[i+3]=e[3],n[i+4]=e[4],n[i+5]=e[5],n[i+6]=e[6],n[i+7]=e[7]},f=function(n,r,i){i=i||0,t[0]=r,n[i+0]=e[7],n[i+1]=e[6],n[i+2]=e[5],n[i+3]=e[4],n[i+4]=e[3],n[i+5]=e[2],n[i+6]=e[1],n[i+7]=e[0]}}();for(var d=new Array,y=0;y<1200;y++)d[y]=Math.pow(2,y);var g=new Array;for(y=0;y<1200;y++)g[y]=Math.pow(2,-y);function m(t){return t>=0?d[t]:g[-t]}var v=4294967296,b=2.220446049250313e-16;m(-1023);function w(t,e,n){var r,i,o=h(t,e,n),u=h(t,e+4,n);"bige"===n?(r=o,i=u):(r=u,i=o);var s=(1048575&r)*v+i,a=(2146435072&r)>>>20;return(r>>31||1)*(0===a?s?s*m(-1074):0:a<2047?s>=0?(1+s*b)*m(a-1023):0:s?NaN:1/0)}var _=Math.pow(2,-23),E=Math.pow(2,-127);function A(t,e,n){var r=h(t,e,n),i=8388607&r,o=(2139095040&r)>>>23;return(r>>31||1)*(0===o?i?i*_*2*E:0:o<255?(1+i*_)*m(o-127):i?NaN:1/0)}var B={exp:0,mant:0};function C(t){var e=0;return t>=2?(t*=m(-(e=x(1,t))))>=2&&(t/=2,e+=1):t<1&&((e=x(t,2))<=1023?t*=m(e):(t*=m(e-100),t*=m(100)),e=-e),B.exp=e,B.mant=t,B}var F=Math.pow(2,192);function x(t,e){for(var n=0;t*F<e;)t*=F,n+=192;for(;0x10000000000000000*t<e;)t*=0x10000000000000000,n+=64;for(;65536*t<e;)t*=65536,n+=16;for(;64*t<e;)t*=64,n+=6;for(;2*t<e;)t*=2,n+=1;return n}function S(t,e){return(t*=e)-Math.floor(t)!=.5||1&t?t+.5:t}function D(t,e,n,r){var i,o=0;e<0&&(o=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=127,i.exp<=0?i.exp<=-25?(i.mant=0,i.exp=0):(i.mant=S(i.mant,m(22+i.exp)),i.exp=0,i.mant>=8388608&&(i.mant-=8388608,i.exp+=1)):(i.mant=S(i.mant-1,8388608),i.mant>=8388608&&(i.mant-=8388608,i.exp+=1),i.exp>254&&(i.mant=0,i.exp=255)),l(t,o|i.exp<<23|i.mant,n,r)):l(t,0===e?1/e<0?2147483648:0:e===1/0?2139095040|o:2143289344,n,r)}new e(8);var k=Math.pow(2,52);function T(t,e,n,r){var i,o,u,s=0;e<0&&(s=2147483648,e=-e),e&&e<1/0?((i=C(e)).exp+=1023,i.exp<=0?(i.mant*=m(51+i.exp),i.exp=0):i.mant=(i.mant-1)*k,p(t,o=s|i.exp<<20|i.mant/4294967296,u=i.mant>>>0,n,r)):(0===e?(o=1/e<0?2147483648:0,u=0):e===1/0?(o=s+2146435072,u=0):(o=2146959360,u=0),p(t,o,u,n,r))}(function e(){var d=t.exports||this;d.readWord=h,d.writeWord=l,d.writeDoubleWord=p,d.readFloat=A,d.writeFloat=D,d.readDouble=w,d.writeDouble=T,d._useFloatArray=function(t){d._usingFloatArray=t,t?("full"==t&&(d.readFloatLE=c?i:n),d.writeFloatLE=c?o:r,"full"==t&&(d.readFloatBE=c?n:i),d.writeFloatBE=c?r:o,d.readDoubleLE=c?a:u,d.writeDoubleLE=c?f:s,d.readDoubleBE=c?u:a,d.writeDoubleBE=c?s:f):(d._usingFloatArray="",d.readFloatLE=function(t,e){return d.readFloat(t,e||0,"le")},d.writeFloatLE=function(t,e,n){d.writeFloat(t,e,n||0,"le")},d.readFloatBE=function(t,e){return d.readFloat(t,e||0,"bige")},d.writeFloatBE=function(t,e,n){d.writeFloat(t,e,n||0,"bige")},d.readDoubleLE=function(t,e){return d.readDouble(t,e||0,"le")},d.writeDoubleLE=function(t,e,n){d.writeDouble(t,e,n||0,"le")},d.readDoubleBE=function(t,e){return d.readDouble(t,e||0,"bige")},d.writeDoubleBE=function(t,e,n){d.writeDouble(t,e,n||0,"bige")})},d._getBigeCpu=function(){return c},d._setBigeCpu=function(t){c=t},d._useFloatArray(!1),d._useFloatArray(n&&u&&"fastest"),e.prototype=d}).call(this)}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(19),o=n(202);t.exports={create:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.config,i=[];n.sort||(n.sort={});for(var a in t){var f=t[a],c=f.base,h=f.fields,l=void 0===f?"undefined":r(f);if("object"===l){if(!c&&!h){i.push("Expecting "+a+".fields or "+a+".base");continue}if(c&&"string"!=typeof c&&i.push("Expecting string "+a+".base"),h)if("object"!==(void 0===h?"undefined":r(h)))i.push("Expecting object "+a+".fields");else for(var p in h)"string"!=typeof h[p]&&i.push("Expecting string in "+a+".fields."+p)}else if("string"!==l){i.push("Expecting object or string under "+a+", instead got "+(void 0===f?"undefined":r(f)));continue}}var d={};for(var y in t){var g=t[y];"object"===(void 0===g?"undefined":r(g))&&(d[y]=o(y,n))}for(var m in t){var v=t[m];if("string"==typeof v){var b=e[v];if(b)e[m]=b;else{var w=C(m,v);w?d[m]=w:i.push("Unrecognized type or struct "+m+"."+v)}}}for(var _ in t){var E=d[_];if(E){var A=t[_];if("object"===(void 0===A?"undefined":r(A))&&A.base){var c=A.base,B=d[c];if(!B){i.push("Missing "+c+" in "+_+".base");continue}E.add("",s(B))}}}function C(t,r,o,s){var a=u(r);if(!a)return null;var f=a.name,c=a.annotation,h=a.arrayType,l=void 0;if(c){var p=e[f];if(null==p)return i.push("Missing "+f+" in "+r),null;var y=[],g=!0,m=!1,v=void 0;try{for(var b,w=c[Symbol.iterator]();!(g=(b=w.next()).done);g=!0){var _=b.value,E=C(t,_,null,s);if(!E)return i.push("Missing "+_+" in "+r),null;y.push(E)}}catch(t){m=!0,v=t}finally{try{!g&&w.return&&w.return()}finally{if(m)throw v}}l=p(y)}else if(null==h){var A=d[f];if(A)return A;var B=e[f];if(!B)return null;l=B(o)}else if(""===h){var F=C(t,a.name,null,s);if(!F)return null;var x=n.sort[t+"."+s]||!1;l=e.vector(F,x)}else if(h.length>0){var S=C(t,a.arrayType,null,s);if(!S)return i.push("Missing "+a.arrayType+" in "+r),null;var D=C(t,a.name,S,s);if(!D)return i.push("Missing "+a.name+" in "+r),null;l=D}return a.optional?e.optional(l):l}for(var F in t){var x=d[F];if(x){var S=t[F];if(S.fields){var h=S.fields;for(var D in h){var k=h[D],T=C(F,k,null,D);T?x.add(D,T):i.push("Missing "+k+" in "+F+".fields."+D)}}}}if(i.length)return{errors:i};return{errors:i,structs:d}},toBuffer:function(t,n){var r=t.fromObject(n);return e.from(function(t,e){var n=new i(i.DEFAULT_CAPACITY,i.LITTLE_ENDIAN);return t.appendByteBuffer(n,e),n.copy(0,n.offset)}(t,r).toBinary(),"binary")},fromBuffer:function(t,e){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=i.fromBinary(e.toString("binary"),i.LITTLE_ENDIAN),o=t.fromByteBuffer(r);return n?t.toObject(o):o}};var u=function(t){if(!t||"string"!=typeof t)return null;var e=(t=t.trim()).match(/<(.*)>/);if(e){var n=e?e[1].replace(/ /g,"").split(","):null;return{name:t=t.replace(e[0],"").trim(),annotation:n}}var r=t.match(/\[(.*)\]/),i=r?r[1].trim():null;r&&(t=t.replace(r[0],"").trim());var o=!1;return/\?$/.test(t)&&(t=t.substring(0,t.length-1),o=!0),{name:t,arrayType:i,optional:o}},s=function(t){return{fromByteBuffer:function(e){return t.fromByteBuffer(e)},appendByteBuffer:function(e,n){t.appendByteBuffer(e,n)},fromObject:function(e){return t.fromObject(e)},toObject:function(e){return t.toObject(e)}}}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";var r=n(19);t.exports=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{debug:!1};e=Object.assign({override:{}},e);var n={},i=void 0,o=void 0;return{compare:function(t,e){var n=t[o],r=e[o];return i&&i.compare?i.compare(n,r):n>r?1:n<r?-1:0},add:function(t,e){n[t]=e,null==i&&(i=e,o=t)},fields:n,fromByteBuffer:function(r){var i={},o=null;try{for(o in n){var u=n[o];try{var s=r.offset;if(""===o)i=u.fromByteBuffer(r,e);else{var a=e.override[t+"."+o+".fromByteBuffer"];a?a({fields:n,object:i,b:r,config:e}):i[o]=u.fromByteBuffer(r,e)}if(e.debug)if(u.struct)console.error(u.struct);else{var f=void 0;try{f=u.toObject(""===o?i:i[o],e)}catch(t){f=""}var c=r.copy(s,r.offset);console.error("fromByteBuffer",t+"."+o,"'"+f+"'",c.toHex())}}catch(e){throw console.error(e+" in "+t+"."+o),r.printDebug(),e}}}catch(e){throw e.message+=" in "+t+"."+o,e}return i},appendByteBuffer:function(r,i){var o=null;try{for(o in n){var u=n[o];if(""===o)u.appendByteBuffer(r,i);else{var s=e.override[t+"."+o+".appendByteBuffer"];s?s({fields:n,object:i,b:r}):u.appendByteBuffer(r,i[o])}}}catch(e){try{e.message+=" "+t+"."+o+" = "+JSON.stringify(i[o])}catch(n){e.message+=" "+t+"."+o+" = "+i[o]}throw e}},fromObject:function(r){var i=e.override[t+".fromObject"];if(i){var o=i(r);if(null!=o)return o}var u={},s=null;try{for(s in n){var a=n[s];if(""===s){var f=a.fromObject(r);Object.assign(u,f)}else{var c=e.override[t+"."+s+".fromObject"];if(c)c({fields:n,object:r,result:u});else{var h=r[s],l=a.fromObject(h);u[s]=l}}}}catch(e){throw e.message+=" "+t+"."+s,e}return u},toObject:function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.override[t+".toObject"];if(o){var u=o(i);if(null!=u)return u}var s={},a=null;try{for(a in n){var f=n[a],c=e.override[t+"."+a+".toObject"];if(c)c({fields:n,object:i,result:s,config:e});else if(""===a){var h=f.toObject(i,e);Object.assign(s,h)}else{var l=f.toObject(i?i[a]:null,e);s[a]=l}if(e.debug)try{var p=new r(r.DEFAULT_CAPACITY,r.LITTLE_ENDIAN);if(null!=i){var d=i[a];if(d){var y=e.override[t+"."+a+".appendByteBuffer"];c&&y?y({fields:n,object:i,b:p}):f.appendByteBuffer(p,d)}}p=p.copy(0,p.offset),console.error("toObject",t+"."+a,"'"+s[a]+"'",p.toHex())}catch(e){e.message=t+"."+a+" "+e.message,console.error(e)}}}catch(e){throw e.message+=" "+t+"."+a,e}return s}}}},function(t,e,n){"use strict";t.exports={chain:n(204),history:n(205)}},function(t){t.exports={get_info:{brief:"Return general network information.",params:null,results:"string"},get_account:{brief:"Fetch a blockchain account",params:{account_name:"name"},results:"string"},get_code:{brief:"Fetch smart contract code",params:{account_name:"name",code_as_wasm:{type:"bool",default:!1}},results:{account_name:"name",wast:"string",wasm:"string",code_hash:"sha256",abi:"optional<abi_def>"}},get_code_hash:{brief:"",params:{account_name:"name"},results:{account_name:"name",code_hash:"sha256"}},get_abi:{params:{account_name:"name"},results:{account_name:"name",abi:"abi_def?"}},get_raw_code_and_abi:{params:{account_name:"name"},results:{account_name:"name",wasm:"bytes",abi:"abi_def?"}},abi_json_to_bin:{brief:"Manually serialize json into binary hex.  The binayargs is usually stored in Action.data.",params:{code:"name",action:"name",args:"bytes"},results:{binargs:"bytes"}},abi_bin_to_json:{brief:"Convert bin hex back into Abi json definition.",params:{code:"name",action:"name",binargs:"bytes"},results:{args:"bytes"}},get_required_keys:{params:{transaction:"transaction",available_keys:"set[public_key]"},results:"Set[public_key]"},get_block:{brief:"Fetch a block from the blockchain.",params:{block_num_or_id:"string"},results:"variant",errors:{"unknown block":null}},get_block_header_state:{brief:"Fetch the minimum state necessary to validate transaction headers.",params:{block_num_or_id:"string"},results:"string",errors:{block_id_type_exception:"Invalid block ID",unknown_block_exception:"Could not find reversible block"}},get_table_rows:{brief:"Fetch smart contract data from an account.",params:{json:{type:"bool",default:!1},code:"name",scope:"string",table:"name",table_key:"string",lower_bound:{type:"string",default:"0"},upper_bound:{type:"string",default:"-1"},limit:{type:"uint32",default:"10"},key_type:{type:"string",doc:"The key type of --index, primary only supports (i64), all others support (i64, i128, i256, float64, float128). Special type 'name' indicates an account name."},index_position:{type:"string",doc:"1 - primary (first), 2 - secondary index (in order defined by multi_index), 3 - third index, etc"}},results:{rows:{type:"vector",doc:"One row per item, either encoded as hex String or JSON object"},more:{type:"bool",doc:"True if last element in data is not the end and sizeof data() < limit"}}},get_currency_balance:{params:{code:"name",account:"name",symbol:"optional<string>"},results:"asset[]"},get_currency_stats:{params:{code:"name",symbol:"string"},results:{supply:"asset",max_supply:"asset",issuer:"account_name"}},get_producers:{brief:"Fetch smart contract data from producer.",params:{json:{type:"bool",default:!1},lower_bound:"string",limit:{type:"uint32",default:"50"}},results:{rows:{type:"vector",doc:"one row per item, either encoded as hex String or JSON object"},total_producer_vote_weight:{type:"double",doc:"total vote"},more:{type:"string",doc:"fill lower_bound with this value to fetch more rows"}}},get_producer_schedule:{brief:"",params:{},results:{vector:"proposed"}},get_scheduled_transactions:{brief:"",params:{json:{type:"bool",default:!1},lower_bound:{type:"string",doc:"timestamp OR transaction ID"},limit:{type:"uint32",default:"50"}},results:{vector:"transactions",more:{type:"string",doc:"fill lower_bound with this to fetch next set of transactions"}}},push_block:{brief:"Append a block to the chain database.",params:{block:"signed_block"},results:null},push_transaction:{brief:"Attempts to push the transaction into the pending queue.",params:{signed_transaction:"signed_transaction"},results:{transaction_id:"fixed_bytes32",processed:"bytes"}},push_transactions:{brief:"Attempts to push transactions into the pending queue.",params:{"signed_transaction[]":"signed_transaction"},results:"vector[push_transaction.results]"}}},function(t){t.exports={get_actions:{params:{account_name:"account_name",pos:{type:"int32?",doc:"An absolute sequence positon -1 is the end/last action"},offset:{type:"int32?",doc:"The number of actions relative to pos, negative numbers return [pos-offset,pos), positive numbers return [pos,pos+offset)"}},results:{actions:"ordered_action_result[]",last_irreversible_block:"uint32",time_limit_exceeded_error:"bool?"},structs:[{name:"ordered_action_result",fields:{global_action_seq:"uint64",account_action_seq:"int32",block_num:"uint32",block_time:"block_timestamp_type",action_trace:"variant"}}]},get_transaction:{brief:"Retrieve a transaction from the blockchain.",params:{id:"transaction_id_type",block_num_hint:{type:"uint32?",default:0,doc:"A non-zero block number allows shorter transaction IDs (8 hex, 4 bytes)"}},results:{id:"transaction_id_type",trx:"variant",block_time:"block_timestamp_type",block_num:"uint32",last_irreversible_block:"uint32",traces:"variant[]"}},get_key_accounts:{params:{public_key:"public_key_type"},results:{account_names:"account_name[]"}},get_controlled_accounts:{params:{controlling_account:"account_name"},results:{controlled_accounts:"account_name[]"}}}},function(t,e,n){"use strict";n(207);var r=n(209),i=n(216),o=n(108);function u(t,e,n,r){var i=r.logger;return function(){for(var u=arguments.length,s=Array(u),a=0;a<u;a++)s[a]=arguments[a];if(0!==s.length){var f=o(s,Object.keys(n.params||[]),t,function(t){if("boolean"==typeof t)return{broadcast:t}}),c=f.params,h=(f.options,f.returnPromise),l=f.callback,p=JSON.stringify(c);i.log&&i.log("api >","post","\t",e,p);var d={body:p,method:"POST"};return Object.assign(d,r.fetchConfiguration),fetch(e,d).then(function(t){return t.status>=200&&t.status<300?t.json():t.text().then(function(e){var n=new Error(e);throw n.status=t.status,n.statusText=t.statusText,n})}).then(function(t){i.log&&i.log("api <","response","\t",e,JSON.stringify(t));try{l(null,t)}catch(t){i.error&&i.error("api <","result callback",":",t)}}).catch(function(t){var n="";try{n=JSON.parse(t.message).error.details[0]}catch(t){}i.error&&(i.error("api <","error","\t",n,e,p),i.error(t));try{l(t)}catch(t){i.error&&i.error("api <","error callback",":",t)}}),h}console.log(function(t,e){var n="",r=function(t){n+=t+"\n"};r("USAGE"),r(t+" - "+e.brief),r("\nPARAMETERS"),e.params?r(JSON.stringify(e.params,null,2)):r("none");r("\nRETURNS"),e.results?r(""+JSON.stringify(e.results,null,2)):r("no data");if(r("\nERRORS"),e.errors)for(var i in e.errors){var o=e.errors[i];r(i+(o?" - "+o:""))}else r("nothing special");return n}(t,n))}}t.exports=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={httpEndpoint:"http://127.0.0.1:8888",verbose:!1,logger:{log:function(){var t;return n.verbose?(t=console).log.apply(t,arguments):null},error:function(){var t;return n.verbose?(t=console).error.apply(t,arguments):null}}};function s(t,e){Object.keys(e).forEach(function(n){void 0===t[n]&&(t[n]=e[n])})}s(n,o),s(n.logger,o.logger);var a={},f=n.httpEndpoint;for(var c in e)for(var h in e[c]){var l=r(h),p=f+"/"+t+"/"+c+"/"+h;a[l]=u(l,p,e[c][h],n)}var d=function(t){a[t]=function(){for(var e,n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=i.api)[t].apply(e,[a].concat(r))}};for(var y in i.api)d(y);return a}},function(t,e,n){n(208),t.exports=self.fetch.bind(self)},function(t,e,n){"use strict";n.r(e),n.d(e,"Headers",function(){return f}),n.d(e,"Request",function(){return g}),n.d(e,"Response",function(){return v}),n.d(e,"DOMException",function(){return w}),n.d(e,"fetch",function(){return _});var r={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(r.arrayBuffer)var i=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],o=ArrayBuffer.isView||function(t){return t&&i.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function a(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r.iterable&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function c(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function l(t){var e=new FileReader,n=h(e);return e.readAsArrayBuffer(t),n}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:r.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:r.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():r.arrayBuffer&&r.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||o(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?c(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(l)}),this.text=function(){var t=c(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=h(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=u(t),e=s(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},f.prototype.delete=function(t){delete this.map[u(t)]},f.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},f.prototype.set=function(t,e){this.map[u(t)]=s(e)},f.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},f.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),a(t)},f.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),a(t)},f.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),a(t)},r.iterable&&(f.prototype[Symbol.iterator]=f.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(t,e){var n=(e=e||{}).body;if(t instanceof g){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=function(t){var e=t.toUpperCase();return y.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function m(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function v(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},d.call(g.prototype),d.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];v.redirect=function(t,e){if(-1===b.indexOf(e))throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function _(t,e){return new Promise(function(n,i){var o=new g(t,e);if(o.signal&&o.signal.aborted)return i(new w("Aborted","AbortError"));var u=new XMLHttpRequest;function s(){u.abort()}u.onload=function(){var t={status:u.status,statusText:u.statusText,headers:function(t){var e=new f;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(u.getAllResponseHeaders()||"")};t.url="responseURL"in u?u.responseURL:t.headers.get("X-Request-URL");var e="response"in u?u.response:u.responseText;n(new v(e,t))},u.onerror=function(){i(new TypeError("Network request failed"))},u.ontimeout=function(){i(new TypeError("Network request failed"))},u.onabort=function(){i(new w("Aborted","AbortError"))},u.open(o.method,o.url,!0),"include"===o.credentials?u.withCredentials=!0:"omit"===o.credentials&&(u.withCredentials=!1),"responseType"in u&&r.blob&&(u.responseType="blob"),o.headers.forEach(function(t,e){u.setRequestHeader(e,t)}),o.signal&&(o.signal.addEventListener("abort",s),u.onreadystatechange=function(){4===u.readyState&&o.signal.removeEventListener("abort",s)}),u.send(void 0===o._bodyInit?null:o._bodyInit)})}_.polyfill=!0,self.fetch||(self.fetch=_,self.Headers=f,self.Request=g,self.Response=v)},function(t,e,n){var r=n(210),i=n(211);t.exports=function(t,e,n){var o=i(t,e);return n||(o=o.replace(/ (?=\d)/g,"_")),o.replace(/ (.)/g,function(t,n){return r(n,e)})}},function(t,e){var n={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{"i̇":"I","j̇":"J","į̇":"Į","i̇̀":"Ì","i̇́":"Í","i̇̃":"Ĩ"}}};t.exports=function(t,e){var r=n[e];return t=null==t?"":String(t),r&&(t=t.replace(r.regexp,function(t){return r.map[t]})),t.toUpperCase()}},function(t,e,n){var r=n(212),i=n(213),o=n(214),u=n(215);t.exports=function(t,e,n){if(null==t)return"";return n="string"!=typeof n?" ":n,t=String(t).replace(o,"$1 $2").replace(u,"$1 $2").replace(i,function(t,e,r){return 0===e||e===r.length-t.length?"":n}),r(t,e)}},function(t,e){var n={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"İ":"i",I:"ı","İ":"i"}},az:{regexp:/[\u0130]/g,map:{"İ":"i",I:"ı","İ":"i"}},lt:{regexp:/[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,map:{I:"i̇",J:"j̇","Į":"į̇","Ì":"i̇̀","Í":"i̇́","Ĩ":"i̇̃"}}};t.exports=function(t,e){var r=n[e];return t=null==t?"":String(t),r&&(t=t.replace(r.regexp,function(t){return r.map[t]})),t.toLowerCase()}},function(t,e){t.exports=/[^A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g},function(t,e){t.exports=/([a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])/g},function(t,e){t.exports=/([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A])([A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A][a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])/g},function(t,e,n){"use strict";t.exports={api:{createTransaction:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:60,n=arguments[2];if(!n)throw new TypeError("callback parameter is required");t.getInfo(r(n,function(i){var o=new Date(i.head_block_time+"Z");t.getBlock(i.last_irreversible_block_num,r(n,function(t){var r=new Date(o.getTime()+1e3*e),u=65535&i.last_irreversible_block_num,s={expiration:r.toISOString().split(".")[0],ref_block_num:u,ref_block_prefix:t.ref_block_prefix,max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]};n(null,s)}))}))}}};var r=function(t,e){return function(n,r){n?t(n):e(r)}}},function(t,e,n){t.exports={default:n(218),__esModule:!0}},function(t,e,n){n(51),n(41),t.exports=n(219)},function(t,e,n){var r=n(109),i=n(5)("iterator"),o=n(25);t.exports=n(10).isIterable=function(t){var e=Object(t);return void 0!==e[i]||"@@iterator"in e||o.hasOwnProperty(r(e))}},function(t,e,n){t.exports={default:n(221),__esModule:!0}},function(t,e,n){n(51),n(41),t.exports=n(222)},function(t,e,n){var r=n(23),i=n(223);t.exports=n(10).getIterator=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return r(e.call(t))}},function(t,e,n){var r=n(109),i=n(5)("iterator"),o=n(25);t.exports=n(10).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t){t.exports={name:"uint64",checksum160:"fixed_bytes20",checksum256:"fixed_bytes32",checksum512:"fixed_bytes64",signature:"fixed_bytes65",public_key:"fixed_bytes33",message_type:"fixed_string16",symbol:"uint64",symbol_code:"uint64",field_name:"string",account_name:"name",permission_name:"name",type_name:"string",token_name:"name",table_name:"name",scope_name:"name",action_name:"name",time_point:"int64",time_point_sec:"time",timestamp:"uint32",block_timestamp_type:"timestamp",block_id:"fixed_bytes32",checksum_type:"fixed_bytes32",checksum256_type:"fixed_bytes32",checksum512_type:"fixed_bytes64",checksum160_type:"fixed_bytes20",sha256:"fixed_bytes32",sha512:"fixed_bytes64",sha160:"fixed_bytes20",weight_type:"uint16",block_num_type:"uint32",share_type:"int64",digest_type:"checksum_type",context_free_type:"bytes",unsigned_int:"varuint32",bool:"uint8",extensions_type:{base:"",fields:{type:"uint16",data:"bytes"}},transaction_header:{base:"",fields:{expiration:"time",ref_block_num:"uint16",ref_block_prefix:"uint32",max_net_usage_words:"unsigned_int",max_cpu_usage_ms:"uint8",delay_sec:"unsigned_int"}},transaction:{base:"transaction_header",fields:{context_free_actions:"action[]",actions:"action[]",transaction_extensions:"extensions_type[]"}},signed_transaction:{base:"transaction",fields:{signatures:"signature[]",context_free_data:"bytes[]"}},fields:"field_def[]",field_def:{fields:{name:"field_name",type:"type_name"}},asset:{fields:{amount:"share_type",sym:"symbol"}},producer_key:{fields:{producer_name:"account_name",block_signing_key:"public_key"}},producer_schedule:{fields:{version:"uint32",producers:"producer_key[]"}},chain_config:{fields:{target_block_size:"uint32",max_block_size:"uint32",target_block_acts_per_scope:"uint32",max_block_acts_per_scope:"uint32",target_block_acts:"uint32",max_block_acts:"uint32",real_threads:"uint64",max_storage_size:"uint64",max_transaction_lifetime:"uint32",max_authority_depth:"uint16",max_transaction_exec_time:"uint32",max_inline_depth:"uint16",max_inline_action_size:"uint32",max_generated_transaction_size:"uint32"}},type_def:{base:"",fields:{new_type_name:"type_name",type:"type_name"}},struct_def:{base:"",fields:{name:"type_name",base:"type_name",fields:"field_def[]"}},clause_pair:{base:"",fields:{id:"string",body:"string"}},error_message:{base:"",fields:{error_code:"uint64",error_msg:"string"}},abi_def:{base:"",fields:{version:"string",types:"type_def[]",structs:"struct_def[]",actions:"action_def[]",tables:"table_def[]",ricardian_clauses:"clause_pair[]",error_messages:"error_message[]",abi_extensions:"extensions_type[]"}},table_def:{base:"",fields:{name:"table_name",index_type:"type_name",key_names:"field_name[]",key_types:"type_name[]",type:"type_name"}},permission_level:{base:"",fields:{actor:"account_name",permission:"permission_name"}},action:{base:"",fields:{account:"account_name",name:"action_name",authorization:"permission_level[]",data:"bytes"}},action_def:{base:"",fields:{name:"action_name",type:"type_name",ricardian_contract:"string"}},block_header:{base:"",fields:{previous:"checksum256",timestamp:"timestamp",transaction_mroot:"checksum256",action_mroot:"checksum256",block_mroot:"checksum256",producer:"account_name",schedule_version:"uint32",new_producers:"producer_schedule?"}},packed_transaction:{fields:{signatures:"signature[]",compression:"uint8",packed_context_free_data:"bytes",packed_trx:"bytes"}}}},function(t,e,n){"use strict";(function(e){var r=function(t){return t&&t.__esModule?t:{default:t}}(n(22));var i=n(3),o=n(63);t.exports=function(t,n){n.abiCache={abiAsync:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(i.equal(void 0===e?"undefined":(0,r.default)(e),"string","account string required"),0==n&&null!=s[e])return Promise.resolve(s[e]);if(null==t){var o=s[e];return i(o,"Missing ABI for account: "+e+", provide httpEndpoint or add to abiCache"),Promise.resolve(o)}return t.getAbi(e).then(function(t){return i(t.abi,"Missing ABI for account: "+e),a(e,t.abi)})},abi:a};var u=Object.assign({},{defaults:!0},n),s={};function a(t,n){if(i.equal(void 0===t?"undefined":(0,r.default)(t),"string","account string required"),n){i.equal(void 0===n?"undefined":(0,r.default)(n),"object","abi"),e.isBuffer(n)&&(n=JSON.parse(n));var a=function(t,e){var n={};t.types&&t.types.forEach(function(t){n[t.new_type_name]=t.type});t.structs&&t.structs.forEach(function(t){var e={},r=!0,i=!1,o=void 0;try{for(var u,s=t.fields[Symbol.iterator]();!(r=(u=s.next()).done);r=!0){var a=u.value;e[a.name]=a.type}}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}n[t.name]={base:t.base,fields:e},""===t.base&&delete n[t.name].base});t.actions&&t.actions.forEach(function(t){var r=n[t.type];r?r.action={name:t.name,account:e}:console.error("Missing abiSchema type",t.type,e)});return n}(n,t),f=o(u,a);return s[t]=Object.assign({abi:n,schema:a},f)}var c=s[t];if(null==c)throw new Error("Abi '"+t+"' is not cached");return c}return n.abiCache}}).call(this,n(2).Buffer)},function(t,e,n){"use strict";(function(e){var r=u(n(64)),i=u(n(72)),o=u(n(22));function u(t){return t&&t.__esModule?t:{default:t}}var s=n(3),a=n(30),f=n(62),c=n(61),h=n(107).processArgs;n(63);t.exports=function(t,n,u,m,v){if("string"!=typeof m.chainId)throw new TypeError("config.chainId is required");var b=function(t,n,u,m){var v=function(t,e){return function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var a,f,c,h,l,d,y,g,m,v,w,A,B,C,F,x,S,D,k,T,I;return i.default.async(function(t){for(;;)switch(t.prev=t.next){case 0:if(a=void 0,f=void 0,c=void 0,null==n[n.length-1]&&(n=n.slice(0,n.length-1)),!(h=p(n[0]))){t.next=8;break}a=n[0],n=n.slice(1),t.next=39;break;case 8:if("string"!=typeof n[0]){t.next=13;break}a=[n[0]],n=n.slice(1),t.next=39;break;case 13:if("object"!==(0,o.default)(n[0])||!Array.isArray(n[0].actions)){t.next=39;break}for(l=new Set,d=!0,y=!1,g=void 0,t.prev=18,m=n[0].actions[Symbol.iterator]();!(d=(v=m.next()).done);d=!0)w=v.value,l.add(w.account);t.next=26;break;case 22:t.prev=22,t.t0=t.catch(18),y=!0,g=t.t0;case 26:t.prev=26,t.prev=27,!d&&m.return&&m.return();case 29:if(t.prev=29,!y){t.next=32;break}throw g;case 32:return t.finish(29);case 33:return t.finish(26);case 34:return A=[],B=new Set(["eosio","eosio.token","eosio.null"]),l.forEach(function(t){B.has(t)||A.push(u.abiCache.abiAsync(t))}),t.next=39,i.default.awrap(Promise.all(A));case 39:if(n.length>1&&"function"==typeof n[n.length-1]&&(c=n.pop()),n.length>1&&"object"===(0,o.default)(n[n.length-1])&&(f=n.pop()),s.equal(n.length,1,"transaction args: contracts<string|array>, transaction<callback|object>, [options], [callback]"),C=n[0],!a){t.next=67;break}for(s(!c,"callback with contracts are not supported"),s.equal("function",void 0===C?"undefined":(0,o.default)(C),"provide function callback following contracts array parameter"),F=[],x=!0,S=!1,D=void 0,t.prev=50,k=a[Symbol.iterator]();!(x=(T=k.next()).done);x=!0)I=T.value,F.push(b(I,e.transaction));t.next=58;break;case 54:t.prev=54,t.t1=t.catch(50),S=!0,D=t.t1;case 58:t.prev=58,t.prev=59,!x&&k.return&&k.return();case 61:if(t.prev=61,!S){t.next=64;break}throw D;case 64:return t.finish(61);case 65:return t.finish(58);case 66:return t.abrupt("return",Promise.all(F).then(function(t){var e={};t.forEach(function(t,n){e[a[n]]=t});var n=h?e:e[a[0]];return _(C,f,n)}));case 67:if("function"!=typeof C){t.next=69;break}return t.abrupt("return",_(C,f,e));case 69:if("object"!==(void 0===C?"undefined":(0,o.default)(C))){t.next=71;break}return t.abrupt("return",E(C,f,c));case 71:throw new Error("first transaction argument unrecognized",C);case 72:case"end":return t.stop()}},null,this,[[18,22,26,34],[27,,29,33],[50,54,58,66],[59,,61,65]])}};function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return u.abiCache.abiAsync(t).then(function(n){s(Array.isArray(n.abi.actions)&&n.abi.actions.length,"No actions");var r={};return r.transaction=e||v(n.structs,r),n.abi.actions.forEach(function(e){var i=e.name,o=e.type,u=g(n.schema,o);r[i]=w(o,u,r.transaction,t,i)}),r.fc=n,r})}function w(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"eosio.token",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:t;return function(){for(var f=arguments.length,c=Array(f),l=0;l<f;l++)c[l]=arguments[l];if(0!==c.length){var p={},y=c[c.length-1];"object"===(void 0===y?"undefined":(0,o.default)(y))&&"object"===(0,o.default)(y.__optionOverrides)&&Object.assign(p,c.pop().__optionOverrides);var m=h(c,Object.keys(e),t,d),v=m.options,b=m.params,w=m.returnPromise,_=m.callback,E={broadcast:u.broadcast,sign:u.sign};if(v=Object.assign({},E,v,p),p.noCallback&&!w)throw new Error("Callback during a transaction are not supported");var A=[],B=v.authorization?v.authorization:u.authorization,C=null==B;if(B){var F=void 0;"string"==typeof B?F=[B]:Array.isArray(B)&&(F=B),F&&F.forEach(function(t){if("string"==typeof t){var e=t.split("@"),n=(0,r.default)(e,2),i=n[0],u=n[1],s=void 0===u?"active":u;""===i&&(i=D()),i&&A.push({actor:i,permission:s})}else"object"===(void 0===t?"undefined":(0,o.default)(t))&&A.push(t)}),s.equal(A.length,F.length,"invalid authorization in: "+JSON.stringify(B))}var x={actions:[{account:i,name:a,authorization:A,data:b}]};if(C){var S=D();S&&x.actions[0].authorization.push({actor:S,permission:"active"})}return x.actions[0].authorization.sort(function(t,e){return t.actor>e.actor?1:t.actor<e.actor?-1:0}),p.messageOnly?_(null,x):n(x,v,_),w}function D(){var t=Object.keys(e),n=t[0];if("account_name"===e[n])return b[n]}console.log(function(t,e,n,r,i){var o="",u=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";o+=t+"\n"};u("CONTRACT"),u(r),u(),u("ACTION"),u(t.name),u();var s=i.abiCache.abi(r);u("PARAMETERS"),u(JSON.stringify(g(s.schema,t.type),null,4)),u();var a=s.structs[t.type];return u("EXAMPLE"),u(r+"."+t.name+"("+JSON.stringify(a.toObject(),null,4)+")"),o}({name:a,type:t},0,0,i,u))}}function _(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];s.equal("function",void 0===t?"undefined":(0,o.default)(t),"trCallback"),s.equal("object",void 0===e?"undefined":(0,o.default)(e),"options"),s.equal("object",void 0===n?"undefined":(0,o.default)(n),"merges"),s(!Array.isArray(n),"merges should not be an array"),s.equal("function",(0,o.default)(E),"transaction");var i=[],u={},a=function(t){return function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=t.apply(void 0,n.concat([{__optionOverrides:{broadcast:!1,messageOnly:!0,noCallback:!0}}]));if(null==o)throw new Error("Callbacks can not be used when creating a multi-action transaction");i.push(o)}};for(var f in n){var c=n[f],h=f.replace(/\./,"_");if("function"==typeof c)u[h]=a(c);else if("object"===(void 0===c?"undefined":(0,o.default)(c)))for(var l in null==u[h]&&(u[h]={}),c)"transaction"!==l&&(u[h][l]=a(c[l]))}var p=void 0;try{p=t(u)}catch(t){p=Promise.reject(t)}return Promise.resolve(p).then(function(){return Promise.all(i).then(function(t){var n=[],i=!0,o=!1,u=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var f=s.value,c=(0,r.default)(f.actions,1),h=c[0];n.push(h)}}catch(t){o=!0,u=t}finally{try{!i&&a.return&&a.return()}finally{if(o)throw u}}var l={};return l.actions=n,E(l,e)})})}function E(t,r,h){var p,d,g,v,b,w,_,E,A,B,C,F,x,S,D,k;return i.default.async(function(T){for(;;)switch(T.prev=T.next){case 0:if(p=u.expireInSeconds?u.expireInSeconds:60,d={expireInSeconds:p,broadcast:!0,sign:!0},r=Object.assign({},d,r),g=void 0,"function"!=typeof h&&(g=new Promise(function(t,e){h=function(n,r){n?e(n):t(r)}})),"object"===(void 0===t?"undefined":(0,o.default)(t))){T.next=7;break}throw new TypeError("First transaction argument should be an object or function");case 7:if(Array.isArray(t.actions)){T.next=9;break}throw new TypeError("Expecting actions array");case 9:if((u.logger.log||u.logger.error)&&(v=h,h=function(t,e){t&&u.logger.error&&u.logger.error(t),u.logger.log&&u.logger.log(JSON.stringify(e)),v(t,e)}),t.actions.forEach(function(t){if(!Array.isArray(t.authorization))throw new TypeError("Expecting action.authorization array",t)}),!r.sign||"function"==typeof u.signProvider){T.next=13;break}throw new TypeError("Expecting config.signProvider function (disable using {sign: false})");case 13:if(b={max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],signatures:[],transaction_extensions:[]},!u.transactionHeaders){T.next=25;break}if("object"!==(0,o.default)(u.transactionHeaders)){T.next=19;break}Object.assign(b,u.transactionHeaders),T.next=25;break;case 19:if("function"!=typeof u.transactionHeaders){T.next=24;break}return T.next=22,i.default.awrap(u.transactionHeaders(r.expireInSeconds,y(h,u.logger,function(t){return i.default.async(function(e){for(;;)switch(e.prev=e.next){case 0:s.equal(void 0===t?"undefined":(0,o.default)(t),"object","expecting transaction header object"),Object.assign(b,t);case 2:case"end":return e.stop()}},null,this)})));case 22:T.next=25;break;case 24:s(!1,"config.transactionHeaders should be an object or function");case 25:for(w=["expiration","ref_block_num","ref_block_prefix","delay_sec","max_net_usage_words","max_cpu_usage_ms"],_=0;_<w.length;_++)E=w[_],void 0!==t[E]?b[E]=t[E]:void 0!==r[E]&&(b[E]=r[E]);if(void 0!==b.expiration&&void 0!==b.ref_block_num&&void 0!==b.ref_block_prefix){T.next=31;break}return s(n,"Network is required, provide httpEndpoint or own transaction headers"),T.next=31,i.default.awrap(new Promise(function(t){n.createTransaction(r.expireInSeconds,y(h,u.logger,function(e){var n,r,o;return i.default.async(function(i){for(;;)switch(i.prev=i.next){case 0:for(n=["expiration","ref_block_num","ref_block_prefix"],r=0;r<n.length;r++)o=n[r],void 0===b[o]&&(b[o]=e[o]);t();case 3:case"end":return i.stop()}},null,this)}))}));case 31:return s.equal((0,o.default)(b.expiration),"string","expecting expiration: iso date time string"),s.equal((0,o.default)(b.ref_block_num),"number","expecting ref_block_num number"),s.equal((0,o.default)(b.ref_block_prefix),"number","expecting ref_block_prefix number"),b.context_free_actions=t.context_free_actions,b.actions=t.actions,b.transaction_extensions=t.transaction_extensions,A=m.fromObject(b),B=f.toBuffer(m,A),C=m.toObject(A),F=c("sha256").update(B).digest().toString("hex"),x=[],r.sign&&(S=e.from(u.chainId,"hex"),D=e.from(new Uint8Array(32)),k=e.concat([S,B,D]),x=u.signProvider({transaction:C,buf:k,sign:l,optionsKeyProvider:r.keyProvider}),Array.isArray(x)||(x=[x])),Promise.all(x).then(function(t){t=[].concat.apply([],t);for(var e=0;e<t.length;e++){var i=t[e];"string"==typeof i&&130===i.length&&(t[e]=a.Signature.from(i).toString())}var o={compression:"none",transaction:C,signatures:t},f=u.mockTransactions?u.mockTransactions():null;if(null==f)r.broadcast&&n?n.pushTransaction(o,function(t,e){t?(u.logger.error&&u.logger.error("[push_transaction error] '"+t.message+"', transaction '"+B.toString("hex")+"'"),h(t.message)):h(null,Object.assign({broadcast:!0,transaction:o,transaction_id:F},e))}):h(null,{transaction_id:F,broadcast:!1,transaction:o});else if(s(/pass|fail/.test(f),"mockTransactions should return a string: pass or fail"),"pass"===f&&h(null,{transaction_id:F,mockTransaction:!0,broadcast:!1,transaction:o}),"fail"===f){var c="[push_transaction mock error] 'fake error', digest '"+B.toString("hex")+"'";u.logger.error&&u.logger.error(c),h(c)}}).catch(function(t){u.logger.error&&u.logger.error(t),h(t)}),T.abrupt("return",g);case 45:case"end":return T.stop()}},null,this)}return{genTransaction:v,genContractActions:b,genMethod:w}}(0,n,m,u.transaction),w=new Set(["transaction","contract"]),_={};_.transaction=b.genTransaction(u,_);var E=!0,A=!1,B=void 0;try{for(var C,F=v[Symbol.iterator]();!(E=(C=F.next()).done);E=!0){var x=C.value;for(var S in x.schema){var D=x.schema[S];if("string"!=typeof D){s.equal(void 0===D?"undefined":(0,o.default)(D),"object","abi.schema[type = "+S+"]");var k=D.action;if(void 0!==k){if(w.has(k.name))throw new TypeError("Conflicting Api function: "+S);var T=g(x.schema,S);_[k.name]=b.genMethod(S,T,_.transaction,k.account,k.name)}}}}}catch(t){A=!0,B=t}finally{try{!E&&F.return&&F.return()}finally{if(A)throw B}}return _.contract=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=h(e,["account"],"contract",d),i=r.params,o=(r.options,r.returnPromise),u=r.callback,s=i.account;return b.genContractActions(s).then(function(t){u(null,t)}).catch(function(t){u(t)}),o},_};var l=a.sign;var p=function(t){return Array.isArray(t)&&t.length>0&&-1===t.findIndex(function(t){return"string"!=typeof t})},d=function(t){return"object"===(void 0===t?"undefined":(0,o.default)(t))?t:"boolean"==typeof t?{broadcast:t}:void 0};var y=function(t,e,n){return function(r,i){r?(e.error&&e.error("error",r),t(r)):Promise.resolve(n(i)).catch(function(e){t(e)})}};function g(t,e){var n=t[e],r=n.base,i=n.fields,o={};return r&&""!==r&&Object.assign(o,g(t,r)),Object.assign(o,i),o}}).call(this,n(2).Buffer)},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"}],structs:[{name:"transfer",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"create",base:"",fields:[{name:"issuer",type:"account_name"},{name:"maximum_supply",type:"asset"}]},{name:"issue",base:"",fields:[{name:"to",type:"account_name"},{name:"quantity",type:"asset"},{name:"memo",type:"string"}]},{name:"account",base:"",fields:[{name:"balance",type:"asset"}]},{name:"currency_stats",base:"",fields:[{name:"supply",type:"asset"},{name:"max_supply",type:"asset"},{name:"issuer",type:"account_name"}]}],actions:[{name:"transfer",type:"transfer",ricardian_contract:""},{name:"issue",type:"issue",ricardian_contract:""},{name:"create",type:"create",ricardian_contract:""}],tables:[{name:"accounts",type:"account",index_type:"i64",key_names:["currency"],key_types:["uint64"]},{name:"stat",type:"currency_stats",index_type:"i64",key_names:["currency"],key_types:["uint64"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"},{new_type_name:"permission_name",type:"name"},{new_type_name:"action_name",type:"name"},{new_type_name:"transaction_id_type",type:"checksum256"},{new_type_name:"weight_type",type:"uint16"}],____comment:"eosio.bios structs: set_account_limits, setpriv, set_global_limits, producer_key, set_producers, require_auth are provided so abi available for deserialization in future.",structs:[{name:"permission_level",base:"",fields:[{name:"actor",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"key_weight",base:"",fields:[{name:"key",type:"public_key"},{name:"weight",type:"weight_type"}]},{name:"bidname",base:"",fields:[{name:"bidder",type:"account_name"},{name:"newname",type:"account_name"},{name:"bid",type:"asset"}]},{name:"permission_level_weight",base:"",fields:[{name:"permission",type:"permission_level"},{name:"weight",type:"weight_type"}]},{name:"wait_weight",base:"",fields:[{name:"wait_sec",type:"uint32"},{name:"weight",type:"weight_type"}]},{name:"authority",base:"",fields:[{name:"threshold",type:"uint32"},{name:"keys",type:"key_weight[]"},{name:"accounts",type:"permission_level_weight[]"},{name:"waits",type:"wait_weight[]"}]},{name:"newaccount",base:"",fields:[{name:"creator",type:"account_name"},{name:"name",type:"account_name"},{name:"owner",type:"authority"},{name:"active",type:"authority"}]},{name:"setcode",base:"",fields:[{name:"account",type:"account_name"},{name:"vmtype",type:"uint8"},{name:"vmversion",type:"uint8"},{name:"code",type:"bytes"}]},{name:"setabi",base:"",fields:[{name:"account",type:"account_name"},{name:"abi",type:"bytes"}]},{name:"updateauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"},{name:"parent",type:"permission_name"},{name:"auth",type:"authority"}]},{name:"deleteauth",base:"",fields:[{name:"account",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"linkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"},{name:"requirement",type:"permission_name"}]},{name:"unlinkauth",base:"",fields:[{name:"account",type:"account_name"},{name:"code",type:"account_name"},{name:"type",type:"action_name"}]},{name:"canceldelay",base:"",fields:[{name:"canceling_auth",type:"permission_level"},{name:"trx_id",type:"transaction_id_type"}]},{name:"onerror",base:"",fields:[{name:"sender_id",type:"uint128"},{name:"sent_trx",type:"bytes"}]},{name:"buyrambytes",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"bytes",type:"uint32"}]},{name:"sellram",base:"",fields:[{name:"account",type:"account_name"},{name:"bytes",type:"uint64"}]},{name:"buyram",base:"",fields:[{name:"payer",type:"account_name"},{name:"receiver",type:"account_name"},{name:"quant",type:"asset"}]},{name:"delegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"stake_net_quantity",type:"asset"},{name:"stake_cpu_quantity",type:"asset"},{name:"transfer",type:"bool"}]},{name:"undelegatebw",base:"",fields:[{name:"from",type:"account_name"},{name:"receiver",type:"account_name"},{name:"unstake_net_quantity",type:"asset"},{name:"unstake_cpu_quantity",type:"asset"}]},{name:"refund",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"delegated_bandwidth",base:"",fields:[{name:"from",type:"account_name"},{name:"to",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"}]},{name:"user_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"total_resources",base:"",fields:[{name:"owner",type:"account_name"},{name:"net_weight",type:"asset"},{name:"cpu_weight",type:"asset"},{name:"ram_bytes",type:"uint64"}]},{name:"refund_request",base:"",fields:[{name:"owner",type:"account_name"},{name:"request_time",type:"time_point_sec"},{name:"net_amount",type:"asset"},{name:"cpu_amount",type:"asset"}]},{name:"blockchain_parameters",base:"",fields:[{name:"max_block_net_usage",type:"uint64"},{name:"target_block_net_usage_pct",type:"uint32"},{name:"max_transaction_net_usage",type:"uint32"},{name:"base_per_transaction_net_usage",type:"uint32"},{name:"net_usage_leeway",type:"uint32"},{name:"context_free_discount_net_usage_num",type:"uint32"},{name:"context_free_discount_net_usage_den",type:"uint32"},{name:"max_block_cpu_usage",type:"uint32"},{name:"target_block_cpu_usage_pct",type:"uint32"},{name:"max_transaction_cpu_usage",type:"uint32"},{name:"min_transaction_cpu_usage",type:"uint32"},{name:"max_transaction_lifetime",type:"uint32"},{name:"deferred_trx_expiration_window",type:"uint32"},{name:"max_transaction_delay",type:"uint32"},{name:"max_inline_action_size",type:"uint32"},{name:"max_inline_action_depth",type:"uint16"},{name:"max_authority_depth",type:"uint16"}]},{name:"eosio_global_state",base:"blockchain_parameters",fields:[{name:"max_ram_size",type:"uint64"},{name:"total_ram_bytes_reserved",type:"uint64"},{name:"total_ram_stake",type:"int64"},{name:"last_producer_schedule_update",type:"block_timestamp_type"},{name:"last_pervote_bucket_fill",type:"uint64"},{name:"pervote_bucket",type:"int64"},{name:"perblock_bucket",type:"int64"},{name:"total_unpaid_blocks",type:"uint32"},{name:"total_activated_stake",type:"int64"},{name:"thresh_activated_stake_time",type:"uint64"},{name:"last_producer_schedule_size",type:"uint16"},{name:"total_producer_vote_weight",type:"float64"},{name:"last_name_close",type:"block_timestamp_type"}]},{name:"producer_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"total_votes",type:"float64"},{name:"producer_key",type:"public_key"},{name:"is_active",type:"bool"},{name:"url",type:"string"},{name:"unpaid_blocks",type:"uint32"},{name:"last_claim_time",type:"uint64"},{name:"location",type:"uint16"}]},{name:"regproducer",base:"",fields:[{name:"producer",type:"account_name"},{name:"producer_key",type:"public_key"},{name:"url",type:"string"},{name:"location",type:"uint16"}]},{name:"unregprod",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"setram",base:"",fields:[{name:"max_ram_size",type:"uint64"}]},{name:"regproxy",base:"",fields:[{name:"proxy",type:"account_name"},{name:"isproxy",type:"bool"}]},{name:"voteproducer",base:"",fields:[{name:"voter",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"}]},{name:"voter_info",base:"",fields:[{name:"owner",type:"account_name"},{name:"proxy",type:"account_name"},{name:"producers",type:"account_name[]"},{name:"staked",type:"int64"},{name:"last_vote_weight",type:"float64"},{name:"proxied_vote_weight",type:"float64"},{name:"is_proxy",type:"bool"}]},{name:"claimrewards",base:"",fields:[{name:"owner",type:"account_name"}]},{name:"setpriv",base:"",fields:[{name:"account",type:"account_name"},{name:"is_priv",type:"int8"}]},{name:"rmvproducer",base:"",fields:[{name:"producer",type:"account_name"}]},{name:"set_account_limits",base:"",fields:[{name:"account",type:"account_name"},{name:"ram_bytes",type:"int64"},{name:"net_weight",type:"int64"},{name:"cpu_weight",type:"int64"}]},{name:"set_global_limits",base:"",fields:[{name:"cpu_usec_per_period",type:"int64"}]},{name:"producer_key",base:"",fields:[{name:"producer_name",type:"account_name"},{name:"block_signing_key",type:"public_key"}]},{name:"set_producers",base:"",fields:[{name:"schedule",type:"producer_key[]"}]},{name:"require_auth",base:"",fields:[{name:"from",type:"account_name"}]},{name:"setparams",base:"",fields:[{name:"params",type:"blockchain_parameters"}]},{name:"connector",base:"",fields:[{name:"balance",type:"asset"},{name:"weight",type:"float64"}]},{name:"exchange_state",base:"",fields:[{name:"supply",type:"asset"},{name:"base",type:"connector"},{name:"quote",type:"connector"}]},{name:"namebid_info",base:"",fields:[{name:"newname",type:"account_name"},{name:"high_bidder",type:"account_name"},{name:"high_bid",type:"int64"},{name:"last_bid_time",type:"uint64"}]}],actions:[{name:"newaccount",type:"newaccount",ricardian_contract:""},{name:"setcode",type:"setcode",ricardian_contract:""},{name:"setabi",type:"setabi",ricardian_contract:""},{name:"updateauth",type:"updateauth",ricardian_contract:""},{name:"deleteauth",type:"deleteauth",ricardian_contract:""},{name:"linkauth",type:"linkauth",ricardian_contract:""},{name:"unlinkauth",type:"unlinkauth",ricardian_contract:""},{name:"canceldelay",type:"canceldelay",ricardian_contract:""},{name:"onerror",type:"onerror",ricardian_contract:""},{name:"buyrambytes",type:"buyrambytes",ricardian_contract:""},{name:"buyram",type:"buyram",ricardian_contract:""},{name:"sellram",type:"sellram",ricardian_contract:""},{name:"delegatebw",type:"delegatebw",ricardian_contract:""},{name:"undelegatebw",type:"undelegatebw",ricardian_contract:""},{name:"refund",type:"refund",ricardian_contract:""},{name:"regproducer",type:"regproducer",ricardian_contract:""},{name:"setram",type:"setram",ricardian_contract:""},{name:"bidname",type:"bidname",ricardian_contract:""},{name:"unregprod",type:"unregprod",ricardian_contract:""},{name:"regproxy",type:"regproxy",ricardian_contract:""},{name:"voteproducer",type:"voteproducer",ricardian_contract:""},{name:"claimrewards",type:"claimrewards",ricardian_contract:""},{name:"setpriv",type:"setpriv",ricardian_contract:""},{name:"rmvproducer",type:"rmvproducer",ricardian_contract:""},{name:"setalimits",type:"set_account_limits",ricardian_contract:""},{name:"setglimits",type:"set_global_limits",ricardian_contract:""},{name:"setprods",type:"set_producers",ricardian_contract:""},{name:"reqauth",type:"require_auth",ricardian_contract:""},{name:"setparams",type:"setparams",ricardian_contract:""}],tables:[{name:"producers",type:"producer_info",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"global",type:"eosio_global_state",index_type:"i64",key_names:[],key_types:[]},{name:"voters",type:"voter_info",index_type:"i64",key_names:["owner"],key_types:["account_name"]},{name:"userres",type:"user_resources",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"delband",type:"delegated_bandwidth",index_type:"i64",key_names:["to"],key_types:["uint64"]},{name:"rammarket",type:"exchange_state",index_type:"i64",key_names:["supply"],key_types:["uint64"]},{name:"refunds",type:"refund_request",index_type:"i64",key_names:["owner"],key_types:["uint64"]},{name:"namebids",type:"namebid_info",index_type:"i64",key_names:["newname"],key_types:["account_name"]}],ricardian_clauses:[],abi_extensions:[]}},function(t){t.exports={version:"eosio::abi/1.0",types:[],structs:[{name:"nonce",base:"",fields:[{name:"value",type:"string"}]}],actions:[{name:"nonce",type:"nonce",ricardian_contract:""}],tables:[],ricardian_clauses:[],abi_extensions:[]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.eosNodeConfigs={scatter:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://nodes.get-scatter.com:443"},acroeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api2.acroeos.one"},alohaeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.main.alohaeos.com"},atticlab:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosbp.atticlab.net"},genereos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.genereos.io"},blockmatrix:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosapi.blockmatrix.network"},chainrift:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eospublic.chainrift.com"},eosio:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosio.cr"},cryptolions:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.cryptolions.io"},cypherglass:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.cypherglass.com"},eos42:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://nodes.eos42.io"},eosamsterdam:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eosamsterdam.net"},eosasia:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api1.eosasia.one"},eosauthority:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://publicapi-mainnet.eosauthority.com"},eosbean:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosbean.com"},eosbeijing:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosbeijing.one"},eosbixin:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mars.fn.eosbixin.com"},eoscafeblock:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.eoscafeblock.com"},eoscanada:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eoscanada.com"},eoscannon:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eoscannon.io"},eoscleaner:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoscleaner.com"},eosdac:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eu.eosdac.io"},eosdublin:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosdublin.io"},eoseoul:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoseoul.io"},eosfengwo:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosfengwo.com"},eosflare:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node.eosflare.io"},genesis_mining:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.genesis-mining.com"},eosdetroit:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosdetroit.io"},meet:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.meet.one"},eosgravity:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api-mainnet.eosgravity.com"},eoslaomao:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eoslaomao.com"},eosmetal:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api3.eosmetal.io"},minergate:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eos.minergate.com"},minergate_bp:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.eos.minergate.com"},eosn:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosn.io"},eosnewyork:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosnewyork.io"},eosnodeone:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.main-net.eosnodeone.io"},eospacex:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api-mainnet.eospacex.com"},nodepacific:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eosapi.nodepacific.com"},eosrio:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosrio.io"},eossweden:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eossweden.se"},eostitan:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eostitan.com"},eostribe:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eostribe.io"},eosvolga:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://bp.eosvolga.one"},eosweb:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://apinode.eosweb.net"},eosys:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://rpc.eosys.io"},franceos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.franceos.fr"},eosblockbuster:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://full.eosblockbuster.com"},jeda:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.jeda.one"},oraclechain:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.oraclechain.io"},sheos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.sheos.org"},eosgeneva:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://api.eosgeneva.io"},greymass:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://eos.greymass.com"},zbeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node1.zbeos.com"},zeroxeos:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://node1.zeroxeos.com"},eosnode:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://proxy.eosnode.tools"},dfuse:{blockchain:"eos",chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",httpEndpoint:"https://mainnet.eos.dfuse.io"},dev:{blockchain:"eos",chainId:"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f",httpEndpoint:"http://dev.toneos.pro:7777"}}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&"%c"===t&&(i=++r)}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(232)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(8))},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function u(...t){if(!u.enabled)return;const e=u,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;s++;const o=r.formatters[i];if("function"==typeof o){const r=t[s];n=o.call(e,r),t.splice(s,1),s--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return u.namespace=t,u.enabled=r.enabled(t),u.useColors=r.useColors(),u.color=e(t),u.destroy=i,u.extend=o,"function"==typeof r.init&&r.init(u),r.instances.push(u),u}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){return r(this.namespace+(void 0===e?":":e)+t)}function u(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(u),...r.skips.map(u).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(233),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,u=7*o,s=365.25*o;function a(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var f=typeof t;if("string"===f&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"weeks":case"week":case"w":return a*u;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===f&&!1===isNaN(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return a(t,e,o,"day");if(e>=i)return a(t,e,i,"hour");if(e>=r)return a(t,e,r,"minute");if(e>=n)return a(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){"use strict";"using strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.defaultConfigs=t}return t.prototype.get=function(t){var e="eosplayer::"+t,n=localStorage.getItem(e);if(n)return n;if(t in this.defaultConfigs){var r=this.defaultConfigs[t];return this.set(t,r),r}},t.prototype.set=function(t,e){var n="eosplayer::"+t;localStorage.setItem(n,e)},t}();e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this._eventMap={},this._supportedEvents=[],this._defaultCb=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t.forEach(function(t){throw t instanceof Error?t:new Error(t)})},this._eventMap={},t&&(this.enableEvents(t),this._eventMap=Array.isArray(t)?{}:t)}return t.prototype.enableEvents=function(t){var e=Array.isArray(t)?t:Object.keys(t);this._supportedEvents=(this._supportedEvents||[]).concat(e)},t.prototype.setEvent=function(t,e,n){if(!this._supportedEvents.find(function(e){return e===t}))throw new Error("event handler : event "+t+" are not supported.");return this._eventMap[t]={cb:e,ctx:n},this},t.prototype.emitEvent=function(t){for(var e,n,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];if(!this._supportedEvents.find(function(e){return e===t}))throw new Error("event handler : event "+t+" are not found.");var o=this._eventMap[t];return o?(e=o.cb).call.apply(e,[o.ctx].concat(r)):(n=this._defaultCb).call.apply(n,[t].concat(r))},t}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(39),u=n(69),s=n(237),a=n(38),f=n(21),c=a.createLogger("chain"),h=function(){function t(t){this._eos=t}return t.prototype.getInfo=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this._eos.getInfo({})];case 1:return[2,t.sent()]}})})},t.prototype.getBlock=function(t){return r(this,void 0,void 0,function(){var e;return i(this,function(n){switch(n.label){case 0:return e={block_num_or_id:t},[4,this._eos.getBlock(e)];case 1:return[2,n.sent()]}})})},t.prototype.getContract=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.contract(t)];case 1:return[2,e.sent()]}})})},t.prototype.getAbi=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getAbi(t)];case 1:return[2,e.sent()]}})})},t.prototype.getTableAbi=function(t,e){return r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.getAbi(t)];case 1:return[2,n.sent().abi.tables.find(function(t){return t.name===e})]}})})},t.prototype.abiJsonToBin=function(t,e,n){return r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return r={code:t,action:e,args:n},[4,this._eos.abiJsonToBin(r)];case 1:return[2,i.sent().binargs]}})})},t.prototype.getAccountInfo=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getAccount({account_name:t})];case 1:return[2,e.sent()]}})})},t.prototype.getPubKey=function(t,e){return void 0===e&&(e="active"),r(this,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:return[4,this.getPubKeys(t,e)];case 1:return!(n=r.sent())||n.length<=0?(c.warning("cannot find public key for "+t+"@"+e),[2]):[4,this.getPubKeys(t,e)];case 2:return[2,r.sent()[0].key]}})})},t.prototype.getPubKeys=function(t,e){return void 0===e&&(e="active"),r(this,void 0,void 0,function(){var n,r;return i(this,function(i){switch(i.label){case 0:return[4,this.getAccountInfo(t)];case 1:if(n=i.sent(),!(r=n.permissions.find(function(t){return t.perm_name==e})))throw new Error("cannot find the permission of "+t);return[2,r.required_auth.keys]}})})},t.prototype.recoverSign=function(t,e){return f.Ecc.recover(t,e)},t.prototype.validateSign=function(t,e,n,o,u){return void 0===o&&(o="active"),r(this,void 0,void 0,function(){var r,s,a,f,h,l,p,d,y,g,m,v,b;return i(this,function(i){switch(i.label){case 0:return r=this.recoverSign(t,e),[4,this.getAccountInfo(n)];case 1:if(!(s=i.sent().permissions))return c.warning("permissions of account_name "+n+" are not found."),[2];if(a=s.find(function(t){return t.perm_name===o}),!s)return c.warning("permission "+o+" account_name "+n+" are not found."),[2];if(f=a.required_auth,h=f.accounts,l=f.keys,p=l.find(function(t){return t.key===r}))return[2,p.key];if(!u)return[2];for(g in d=h.map(function(t){return t.permission.actor+"@"+t.permission.permission}),c.verbose("try match",h,d,u),y=[],d)y.push(g);m=0,i.label=2;case 2:return m<y.length?(v=y[m],(b=u[d[v]])?[4,Promise.resolve(b(n,r,this))]:[3,4]):[3,5];case 3:if(i.sent())return[2,r];i.label=4;case 4:return m++,[3,2];case 5:return[2]}})})},t.prototype.getActionCount=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.getActionMaxSeq(t)];case 1:return[2,e.sent()+1]}})})},t.prototype.getActionMaxSeq=function(t){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return[4,this.getRecentActions(t)];case 1:if(!(e=r.sent())||!e.actions)throw new Error("getActionCount failed: cannot find recent actions of "+t+")");return[2,0===(n=e.actions).length?-1:n[n.length-1].account_action_seq]}})})},t.prototype.getRecentActions=function(t){return r(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this._eos.getActions({account_name:t})];case 1:return[2,e.sent()]}})})},t.prototype.getActions=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),r(this,void 0,void 0,function(){var r,u,s,a,f,h,l;return i(this,function(i){switch(i.label){case 0:r=e,u=e+n,s=[],c.verbose("getActions start",e,u,"current:",s.length),i.label=1;case 1:0,a=void 0,i.label=2;case 2:return i.trys.push([2,4,,5]),[4,o.TimeoutPromise(1e4,this._eos.getActions({account_name:t,pos:r,offset:u-r}))];case 3:return a=i.sent(),[3,5];case 4:return f=i.sent(),c.warning(f),[3,1];case 5:if(!a||!a.actions)throw new Error("getActions failed: cannot find actions of "+t+" (pos:"+r+", offset:"+n+")");return h=a.actions,c.verbose("getActions find",h[h.length-1]),(l=0===h.length?r-1:h[h.length-1].account_action_seq)<r?[3,6]:(s.push.apply(s,h),l>=u?[3,6]:(r=l+1,[3,1]));case 6:return[2,s]}})})},t.prototype.getAllActionsBatch=function(t,e,n,o,u){return void 0===n&&(n=0),void 0===o&&(o=100),void 0===u&&(u=10),r(this,void 0,void 0,function(){var s,a,f,h,l,p,d,y,g=this;return i(this,function(m){switch(m.label){case 0:s=o-1,a=function(e){return r(g,void 0,void 0,function(){var n;return i(this,function(r){switch(r.label){case 0:0,r.label=1;case 1:return r.trys.push([1,3,,4]),c.verbose("search Start : at:"+Date.now()+" pos:"+e+" offset:"+s),[4,this.getActions(t,e,s)];case 2:return[2,r.sent()];case 3:return n=r.sent(),c.error("error : ",n),[3,4];case 4:return[3,0];case 5:return[2]}})})},f=[],h=[],c.info("===> start search actions of "+t+" from "+n+", concurrent : "+u+", count : "+o+", once : "+u*o),l=Date.now(),p=0,m.label=1;case 1:return h.push(n+p*o),p%u!=0?[3,3]:(d=Date.now(),c.verbose("===> deal batch "+p+" : "+h+" at "+l),[4,Promise.all(h.map(a))]);case 2:if(!(y=m.sent()).find(function(t){return t.length>0}))return[3,4];c.verbose("===> deal batch "+p+" done ("+(Date.now()-d)+")"),y.forEach(function(t){t.length<=0||(null!=e&&e(t),f.push.apply(f,t))}),c.verbose("===> send batch "+p+" done ("+(Date.now()-d)+")"),h=[],m.label=3;case 3:return p++,[3,1];case 4:return c.info("getAllActions : all scaned ("+(Date.now()-l)+")"),[2,f]}})})},t.prototype.getBalance=function(t,e,n){return void 0===e&&(e="eosio.token"),r(this,void 0,void 0,function(){var r;return i(this,function(i){switch(i.label){case 0:return[4,this.getBalances(t,e)];case 1:return r=i.sent(),n?[2,r.find(function(t){return t.endsWith(n)})||null]:(c.warning("Symbol of the token has not been specified, the first item will return. all:",r),[2,r[0]||null])}})})},t.prototype.getBalances=function(t,e){return void 0===e&&(e="eosio.token"),r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this._eos.getCurrencyBalance(e,t)];case 1:return[2,(n.sent()||[]).map(function(t){return t.trim()})]}})})},t.prototype.transfer=function(t,e,n,o,u){return void 0===o&&(o=""),r(this,void 0,void 0,function(){var r,s;return i(this,function(i){switch(i.label){case 0:return r={authorization:[t.name+"@"+t.authority]},[4,this._eos.transfer(t.name,e,n,o,r).catch(u||c.error)];case 1:return(s=i.sent())&&c.info("Transfer dealed, txID: "+s.transaction_id),[2,s]}})})},t.prototype.waitTx=function(t,e,n){return void 0===e&&(e=12),void 0===n&&(n=1009),r(this,void 0,void 0,function(){var u,s=this;return i(this,function(a){switch(a.label){case 0:return[4,(u=function(t,a){return void 0===a&&(a=0),r(s,void 0,void 0,function(){var r,s;return i(this,function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this._eos.getTransaction(t)];case 1:return(r=i.sent())?[2,r]:[3,3];case 2:return s=i.sent(),c.verbose("wait tx "+t+", retry round: "+a+". "+s.message),[3,3];case 3:return a>=e?(c.error("wait tx failed, round out."),[2,null]):[4,o.forMs(n)];case 4:return i.sent(),[2,u(t,a+1)]}})})})(t)];case 1:return[2,a.sent()]}})})},t.prototype.call=function(t,e,n){for(var o=[],u=3;u<arguments.length;u++)o[u-3]=arguments[u];return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._eos.transaction({actions:[{account:t,name:e,authorization:o,data:n}]})];case 1:return[2,r.sent()]}})})},t.prototype.getTableAll=function(t,e,n,s,a){for(var f=[],h=5;h<arguments.length;h++)f[h-5]=arguments[h];return r(this,void 0,void 0,function(){var r,h,l,p,d,y=this;return i(this,function(i){switch(i.label){case 0:r=s?new u.BigNumber(s):new u.BigNumber(0),h=a&&-1!==a?new u.BigNumber(a):new u.BigNumber("18446744073709551615"),l=[],p=[],d=function(r,i){if(c.verbose("search ",Date.now(),r.toFixed(0),i.toFixed(0)),!r.gte(i)){var o=y._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:-1,lower_bound:r.toFixed(0),upper_bound:i.toFixed(0)}).then(function(t){var e=p.findIndex(function(t){return t===o});if(p.splice(e,1),t)if(t.more){var n=i.minus(r).dividedBy(2).decimalPlaces(0).plus(r);d(r,n.minus(1)),d(n,i)}else t.rows&&l.push.apply(l,t.rows)}).catch(function(t){var e=p.find(function(t){return t===o});throw p.splice(e,1),t});p.push(o)}},!f||f.length<=0?d(r,h):f.map(function(t){return new u.BigNumber(t)}).concat([h]).reduce(function(t,e){return d(t,e),e},r),i.label=1;case 1:return p.length>0?[4,o.forMs(50)]:[3,3];case 2:return i.sent(),[3,1];case 3:return c.verbose("done search ",Date.now(),r.toFixed(0),h.toFixed(0)),[2,l]}})})},t.prototype.checkTable=function(t,e,n,o,u,s,a){return void 0===o&&(o=10),void 0===u&&(u=0),void 0===s&&(s=-1),void 0===a&&(a=1),r(this,void 0,void 0,function(){var r,f;return i(this,function(i){switch(i.label){case 0:return c.verbose("search ",Date.now(),u,s,o),[4,this._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:o,lower_bound:u,upper_bound:s,index_position:a})];case 1:return r=i.sent(),f=r&&r.rows?r.rows:[],r.more&&(o<=0||r.rows&&r.rows.length<o)&&c.warning("'more' detected, and this method didn't deal with the tag 'more'. if you want to get all results, using checkTableMore and provide the primary key. "),[2,f]}})})},t.prototype.checkTableMore=function(t,e,n,o,u,s,a,f){return void 0===u&&(u=9999999),void 0===s&&(s=0),void 0===a&&(a=-1),void 0===f&&(f=1),r(this,void 0,void 0,function(){var r,h,l,p,d,y;return i(this,function(i){switch(i.label){case 0:return c.verbose("search ",t,e,Date.now()),[4,this._eos.getTableRows({json:!0,code:t,scope:n,table:e,limit:u,lower_bound:s,upper_bound:a,index_position:f})];case 1:return r=i.sent(),h=r&&r.rows?r.rows:[],c.verbose("part size "+h.length+"."),r.more&&(u<=0||r.rows&&r.rows.length<u)?(l=h[0][o],p=h[h.length-1][o],l&&p?[3,3]:[4,this.getAbi(t)]):[3,5];case 2:throw d=i.sent(),c.error("searching more error with primary key : "+o+". please check\nlast data: "+h[h.length-1]+" \nabi "+JSON.stringify(d)),new Error("check more error with primary key : "+o);case 3:return c.info("'more' detected: start searching results from "+p+"."),[4,this.checkTableMore(t,e,n,o,u-h.length+1,p,a,f)];case 4:return y=i.sent(),[2,h.concat(y.splice(1))];case 5:return[2,h]}})})},t.prototype.checkTableRange=function(t,e,n,o,s,a){return void 0===s&&(s=1),void 0===a&&(a=1),r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:if(s<0)throw new Error("range error: length("+s+") must larger than 0 ");return[4,this.checkTable(t,e,n,s,o,"number"==typeof o?o+s:new u.BigNumber(f.Eos.modules.format.encodeName(o,!1)).plus(s).toString(),a)];case 1:return[2,r.sent()]}})})},t.prototype.checkTableItem=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.checkTableRange(t,e,n,o,1)];case 1:return[2,r.sent()[0]]}})})},t.prototype.updateAuth=function(t,e,n,o,u,s,a){return void 0===a&&(a=1),r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._eos.updateauth({account_name:t,permission:e,parent:n,auth:{threshold:o,keys:u,accounts:s,waits:a}})];case 1:return[2,r.sent()]}})})},t.getTableByScope=function(t,e,n,o,u,a){return void 0===a&&(a=1e3),r(this,void 0,void 0,function(){var r,f,c,h,l,p;return i(this,function(i){switch(i.label){case 0:r="/v1/chain/get_table_by_scope",f={code:e,table:n,lower_bound:o,upper_bound:u,limit:a},c=s.default.create({baseURL:t,headers:{post:{"Content-Type":"application/json"}}}),h=[],i.label=1;case 1:return[4,c.post(r,f)];case 2:return l=i.sent(),p=l.data,h.push(p),""===p.more?[3,3]:[3,1];case 3:return[2,h]}})})},t.help=function(){return'\n### Chain API\n\n```js\n{Object} async getInfo() // get info of the chain connected\n{Object} async getBlock(blockNumOrId) // get specific block of the chain\n    \n\n{Contract} async getContract(code) // get contract\n{Object} async getAbi(code) // get abi of contract\n{Object} async getTableAbi(code, tableName) // get table abi of contract\n{Object} async abiJsonToBin(code, action, args) \n\n{Object} async getAccountInfo(account_name) // get account info of any user\n{string} async getPubKey(account_name, authority = "active") // get the first public key of an account\n{Array} async getPubKeys(account_name, authority = "active") // get public keys of an account\n{string} async recoverSign(signature, message) // recover sign and to the public key\n{string} async validateSign (signature, message, account, authority = \'active\', accountsPermisionPlugins) \n// validate if signed data is signed by a account. it returns the matched public key \n\n{Number} async getActionCount(account_name) // get a account\'s action count\n{Number} async getActionMaxSeq(account_name) // get a account\'s max action seq\n{Array} async getRecentActions(account_name) // get recent actions\n{Array} async getActions(account_name, startPos = 0, offset = 0) // get all actions of an account\n{Array} async getAllActionsBatch (account_name, cbReceive, startPos = 0, count = 100, concurrent = 10) // get all actions in bulk\n\n{String} async getBalance(account_name, code = "eosio.token", symbolName = undefined) // get balance of specific account\n{Array.<String>} async getBalances(account_name, code = "eosio.token") // get all balance of specific account\n{Tx} async transfer(account, target, quantity, memo = "", cbError) // the format of account should be {name, authority}\n\n{Tx} async waitTx(txID, maxRound = 12, timeSpanMS = 1009) // check a transaction info, retry once per sec until success\n\n{Tx} async call(code, func, jsonData, ...authorization) // send action to a contract\n\n{Array} async getTableAll(code, tableName, scope, lowerNum, upperNum, ...hint) // get all items in a table\n{Array} async checkTable(code, tableName, scope, limit = 10, lower_bound = 0, upper_bound = -1, index_position = 1) // check a table\n{Array} async checkTableMore(code, tableName, scope, primaryKey, limit = 9999999, lower_bound = 0, upper_bound = -1, index_position = 1)\n{Array} async checkTableRange(code, tableName, scope, from, length = 1, index_position = 1) // check range in table\n{Object} async checkTableItem(code, tableName, scope, key = 0) // check a item in a table\n\n{Object} async updateAuth(account, permission, parent, threshold, keys, accounts, waits) // update auth\n```   \n'},t}();e.default=h},function(t,e,n){t.exports=n(238)},function(t,e,n){"use strict";var r=n(4),i=n(113),o=n(240),u=n(66);function s(t){var e=new o(t),n=i(o.prototype.request,e);return r.extend(n,o.prototype,e),r.extend(n,e),n}var a=s(u);a.Axios=o,a.create=function(t){return s(r.merge(u,t))},a.Cancel=n(117),a.CancelToken=n(254),a.isCancel=n(116),a.all=function(t){return Promise.all(t)},a.spread=n(255),t.exports=a,t.exports.default=a},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(66),i=n(4),o=n(249),u=n(250);function s(t){this.defaults=t,this.interceptors={request:new o,response:new o}}s.prototype.request=function(t){"string"==typeof t&&(t=i.merge({url:arguments[0]},arguments[1])),(t=i.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[u,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},i.forEach(["delete","get","head","options"],function(t){s.prototype[t]=function(e,n){return this.request(i.merge(n||{},{method:t,url:e}))}}),i.forEach(["post","put","patch"],function(t){s.prototype[t]=function(e,n,r){return this.request(i.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=s},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(115);t.exports=function(t,e,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i){return t.config=e,n&&(t.code=n),t.request=r,t.response=i,t}},function(t,e,n){"use strict";var r=n(4);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(r.isURLSearchParams(e))o=e.toString();else{var u=[];r.forEach(e,function(t,e){null!==t&&void 0!==t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(i(e)+"="+i(t))}))}),o=u.join("&")}return o&&(t+=(-1===t.indexOf("?")?"?":"&")+o),t}},function(t,e,n){"use strict";var r=n(4),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,o,u={};return t?(r.forEach(t.split("\n"),function(t){if(o=t.indexOf(":"),e=r.trim(t.substr(0,o)).toLowerCase(),n=r.trim(t.substr(o+1)),e){if(u[e]&&i.indexOf(e)>=0)return;u[e]="set-cookie"===e?(u[e]?u[e]:[]).concat([n]):u[e]?u[e]+", "+n:n}}),u):u}},function(t,e,n){"use strict";var r=n(4);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=i(window.location.href),function(e){var n=r.isString(e)?i(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,o=String(t),u="",s=0,a=r;o.charAt(0|s)||(a="=",s%1);u+=a.charAt(63&e>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new i;e=e<<8|n}return u}},function(t,e,n){"use strict";var r=n(4);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,i,o,u){var s=[];s.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===u&&s.push("secure"),document.cookie=s.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r=n(4);function i(){this.handlers=[]}i.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=i},function(t,e,n){"use strict";var r=n(4),i=n(251),o=n(116),u=n(66),s=n(252),a=n(253);function f(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return f(t),t.baseURL&&!s(t.url)&&(t.url=a(t.baseURL,t.url)),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||u.adapter)(t).then(function(e){return f(t),e.data=i(e.data,e.headers,t.transformResponse),e},function(e){return o(e)||(f(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(4);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(117);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i(function(e){t=e}),cancel:t}},t.exports=i},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(257),u=n(258),s=function(){function t(t){this._chain=t}return t.prototype.transcal=function(t,e,n,o,u,s){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this._chain.transfer(t,e,n,"@["+o+":"+u.join(",")+"]",s)];case 1:return[2,r.sent()]}})})},t.prototype.transend=function(t,e,n,o,u,s){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.transcal(t,e,"0.0001 "+n,o,u,s)];case 1:return[2,r.sent()]}})})},t.prototype.res=function(t,e){return new o.default(this._chain,t,e)},t.prototype.checkResOf=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.res(t,n).checkAsset(e)];case 1:return[2,r.sent()]}})})},t.prototype.checkResInfo=function(t,e){return r(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.res(t,e).checkInfo()];case 1:return[2,n.sent()]}})})},t.prototype.parseTranscalPayload=function(t){return u.default.parse(t)},t.prototype.assembleTranscalPayload=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return(new(u.default.bind.apply(u.default,[void 0,t].concat(e)))).memo()},t}();e.default=s},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(112),u=function(){function t(t,e,n,r){void 0===r&&(r={name:null,authority:null}),this._chain=t,this._code=e,this._symStr=n,this._admin=r}return Object.defineProperty(t.prototype,"admin",{get:function(){return this._admin&&this._admin.name&&this._admin.authority?this._admin:null},enumerable:!0,configurable:!0}),t.prototype.resContract=function(){return r(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this._chain.getContract(this._code)];case 1:return[2,t.sent()]}})})},t.prototype.checkAsset=function(t){return r(this,void 0,void 0,function(){var e,n;return i(this,function(r){switch(r.label){case 0:return n=(e=o.default).parse,[4,this._chain.checkTableItem(this._code,"res.accounts",t,this._symStr)];case 1:return[2,n.apply(e,[r.sent()])]}})})},t.prototype.checkInfo=function(){return r(this,void 0,void 0,function(){var t,e;return i(this,function(n){switch(n.label){case 0:return e=(t=o.default).parse,[4,this._chain.checkTableItem(this._code,"res.info",this._code,this._symStr)];case 1:return[2,e.apply(t,[n.sent()])]}})})},t.prototype.issue=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().resissue({user:t,quantity:e,memo:n})];case 2:return[2,r.sent()]}})})},t.prototype.burn=function(t,e,n){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().resburn({user:t,quantity:e,memo:n})];case 2:return[2,r.sent()]}})})},t.prototype.take=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().restake({from:t,to:e,quantity:n,memo:o})];case 2:return[2,r.sent()]}})})},t.prototype.change=function(t,e,n,o){return r(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.resContract()];case 1:return[4,r.sent().change({user:t,from:e,to:n,memo:o})];case 2:return[2,r.sent()]}})})},t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];this.func=t,this.args=[],this.args=e}return t.prototype.memo=function(){return"@["+this.func+":"+this.args.join(",")+"]"},t.prototype.parseMemo=function(t){var e=t[0];if(t.length<4)throw new Error("parse transcal error: the memo is too short.");if("["!==t[1]||"]"===t[2])throw new Error("parse transcal error: formation error.");if("@"!==e&&"#"!==e)throw new Error("parse transcal error: type mark must be @ or #.");var n=t.indexOf(":"),r=t.indexOf("]");if(r<0)throw new Error("parse transcal error: cannot find end mark ']'.");if(n<0)return this.func=t.substr(2,r-2),this.args=[],this;this.func=t.substr(2,n-2);for(var i=n+1,o=i,u=[];;){if((i=t.indexOf(",",i))>=r||i<0){u.push(t.substr(o,r-o));break}u.push(t.substr(o,i-o)),o=++i}return this.args=u,this},t.parse=function(e){return new t("").parseMemo(e)},t}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(21),u=Symbol("sym::EosClient"),s=Symbol("sym::GetIdentity"),a=function(){function t(){this.field={}}return Object.defineProperty(t.prototype,"eosClient",{get:function(){if(this.field[u])return this.field[u];throw new Error("method not yet implemented: this interface should be implement by the specific class.")},enumerable:!0,configurable:!0}),t.prototype.getIdentity=function(){return r(this,void 0,void 0,function(){return i(this,function(t){if(this.field[s])return[2,this.field[s]];throw new Error("method not yet implemented: this interface should be implement by the specific class.")})})},t.prototype.getAuth=function(){return r(this,void 0,void 0,function(){var t;return i(this,function(e){switch(e.label){case 0:return[4,this.getIdentity()];case 1:return[2,{authorization:[(t=e.sent()).name+"@"+t.authority]}]}})})},t.prototype.initFromConf=function(t,e){if(t){var n=o.Eos(t);this.field[u]=function(){return n}}e&&(this.field[s]=e)},t}();e.default=a},function(t){t.exports={name:"eosplayer",version:"0.5.1-beta1",description:"eosplayer is the glue layer of eosjs, which is packaged based on eosjs and provides better usability for the application layer. It can be used on browsers already installed scatter or in Dapp wallets.",main:"build/lib/index.js",types:"build/lib/index.d.js",repository:"git@github.com:bagaking/eosplayer.git",author:"bagaking <zfaustk@qq.com>",license:"Apache License 2.0",keywords:["eos","tonarts","contract","eosjs","scatter","blockchain"],scripts:{dev:"webpack-dev-server --config webpack.debug.js --open","build:web":"rimraf ./build/web/ &&webpack --config webpack.prod.js -p --display-error-details","build:play":"webpack --config webpack.debug.js -p --display-error-details","build:lib":"rimraf ./build/lib/ && npx tsc && cp LICENSE ./build/lib && cp README.md ./build/lib",build:"npm run build:web && npm run build:lib && npm run build:play",test:"./node_modules/.bin/mocha test/*test.js --reporter spec",doc:"jsdoc -c .jsdocrc",update_version:"node ./scripts/prepublish.js",prepublishOnly:"npm run build"},homepage:"https://github.com/bagaking/eosglue#readme",dependencies:{"@babel/polyfill":"^7.2.5","@babel/runtime":"^7.2.0",axios:"^0.18.0","babel-preset-minify":"^0.5.0","bignumber.js":"^8.0.1",debug:"^4.1.0",eosjs:"^16.0.9","eosjs-ecc":"^4.0.4",fetch:"^1.1.0",idb:"^2.1.3"},devDependencies:{"@babel/cli":"^7.2.3","@babel/core":"^7.2.2","@babel/plugin-proposal-object-rest-spread":"^7.2.0","@babel/plugin-transform-async-to-generator":"^7.2.0","@babel/plugin-transform-runtime":"^7.2.0","@babel/preset-env":"^7.2.3","babel-loader":"^8.0.5","compression-webpack-plugin":"^2.0.0",docdash:"^1.0.0",eslint:"^5.12.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","fs-extra":"^7.0.1",hserve:"^0.0.1-beta.14",rimraf:"^2.6.3","ts-loader":"^5.3.3",typescript:"^3.3.3","uglifyjs-webpack-plugin":"^2.1.1",webpack:"^4.19.0","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.14"}}},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(262)),r(n(263))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(21),s=n(39),a=n(38),f=n(67),c=a.createLogger("readingPlayer"),h={account:{name:"eosio",authority:"active"}},l=function(t){function e(e){var n=t.call(this,e)||this;return n._head_block_num=0,n._head_retry_count=0,n._eosNodes=[],n._identity=h.account,n._head_block_num=0,n._head_retry_count=0,c.info("[EosReading] ==> Create reading nodes \nCONFIGS:",JSON.stringify(n._nodeConfigs)),n._eosNodes=n._nodeConfigs.map(function(t){var e=u.Eos(t);return e.__conf=t,e}),n}return r(e,t),Object.defineProperty(e.prototype,"eosClient",{get:function(){if(!this._eosNodes||this._eosNodes.length<=0)throw new Error("EosUtil : No Avaliable Nodes.");return this._eosNodes[0]},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this._identity]})})},e.prototype.checkNodes=function(t,e,n){return void 0===t&&(t=15e3),void 0===e&&(e=4),void 0===n&&(n=1e3),i(this,void 0,void 0,function(){var r,i,u,a,f,c;return o(this,function(o){switch(o.label){case 0:return[4,s.forMs(t)];case 1:o.sent(),console.log("[EosReading] ==> Start Checking Nodes ",this.eosClient.__conf.httpEndpoint,"AT",Date.now()),o.label=2;case 2:0,o.label=3;case 3:return o.trys.push([3,9,,17]),[4,this._eosNodes[0].getInfo({})];case 4:if(r=o.sent(),this._head_retry_count=0,r.head_block_num>this._head_block_num&&(this._head_block_num=r.head_block_num,console.log("[EosReading] ==> | Info : new head block num",this._head_block_num,"| Node: ",this.eosClient.__conf.httpEndpoint)),0===(i=Math.floor(Math.random()*this._eosNodes.length)))return[3,19];o.label=5;case 5:return o.trys.push([5,7,,8]),console.log("[EosReading] ==> | Info : try pick another node by block height | Node: ",this._eosNodes[i].__conf.httpEndpoint),[4,this._eosNodes[i].getInfo({})];case 6:return(u=o.sent()).head_block_num-this._head_block_num>n?(c=this._eosNodes[0],this._eosNodes[0]=this._eosNodes[i],this._eosNodes[i]=c,console.log("[EosReading] ==> | Info : new node selected (by head block) | OLD: ",c.__conf.httpEndpoint,"| NEW:",this.eosClient.__conf.httpEndpoint)):console.log("[EosReading] ==> | Info : no needs to switch node for block height | ",u.head_block_num,"-",this._head_block_num,"<",n),[3,8];case 7:return o.sent(),[3,19];case 8:return[3,17];case 9:return o.sent(),this._head_retry_count<e?(console.log("[EosReading] ==> | Error : Current node error | RETRY :",this._head_retry_count,"| NODE: ",this._eosNodes[0].__conf.httpEndpoint),this._head_retry_count+=1,[3,16]):[3,10];case 10:console.log("[EosReading] ==> | Error : Current node error | RETRY : Failed | Node:",this._eosNodes[0].__conf.httpEndpoint),a=1,o.label=11;case 11:if(!(a<this._eosNodes.length))return[3,16];o.label=12;case 12:return o.trys.push([12,14,,15]),[4,this._eosNodes[a].getInfo({})];case 13:return(f=o.sent()).head_block_num>=this._head_block_num?(c=this._eosNodes[0],this._eosNodes[0]=this._eosNodes[a],this._eosNodes[a]=c,console.log("[EosReading] ==> Info : new node selected | OLD: ",c.__conf.httpEndpoint,"| NEW:",this.eosClient.__conf.httpEndpoint),[3,16]):(console.log("[EosReading] ==> Info : test node passed | Node: ",this._eosNodes[a].__conf.httpEndpoint,"Test: ",f.head_block_num,"<",this._head_block_num),[3,15]);case 14:return o.sent(),console.log("[EosReading] ==> Warning : test node error | Node: ",this._eosNodes[a].__conf.httpEndpoint),[3,15];case 15:return a++,[3,11];case 16:return[3,17];case 17:return[4,s.forMs(2e3)];case 18:return o.sent(),[3,2];case 19:return[3,0];case 20:return[2]}})})},e}(f.MultiSourcePlayer);e.ReadingPlayer=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(264))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function u(t){try{a(r.next(t))}catch(t){o(t)}}function s(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(u,s)}a((r=r.apply(t,e||[])).next())})},u=this&&this.__generator||function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var s=n(21),a=n(39),f=n(67),c=n(265),h={account:{name:"eosio",authority:"active"},options:{maxFailureRate:.499,failureRateThreshold:.1,maxContinuousFailure:3,cleaningTimeInterval:12e4,revivalTimeInterval:6e5,responseIntervalThreshold:1e3,responseIntervalDecline:100,maxCallPromiseExceedTime:18e4}},l=function(t){function e(e){var n=t.call(this,e)||this,r=e.account,o=e.options;return n._identity=i({},h.account,r),n._options=i({},h.options,o),n._nodeStates=new c.NodeStatMgr(n._nodeConfigs,n._options),n}return r(e,t),Object.defineProperty(e.prototype,"eosClient",{get:function(){this._nodeStates.setTheBestNodeToCurrent();var t=this._nodeStates.getCurNodeConf();return console.log("currentNode",this._nodeStates._currentNodeIndex,t,this._nodeStates.getCurNodeStat()),new s.Eos(t)},enumerable:!0,configurable:!0}),e.prototype.getIdentity=function(){return o(this,void 0,void 0,function(){return u(this,function(t){if(!this._identity)throw new Error("identity has not been set");return[2,this._identity]})})},e.prototype.setIdentity=function(t){this._identity=t},e.prototype.callChain=function(t,e,n,r){return o(this,void 0,void 0,function(){var i,o,s,f,c,h;return u(this,function(u){switch(u.label){case 0:this._concurrentCount+=1,i=this.chain,o=(new Date).getTime(),s=this._nodeStates.getCurNodeConf().httpEndpoint,this.log("START",s,t,e,n,this._nodeStates.getCurNodeStat(),"Concurrent count => "+this._concurrentCount+" "),u.label=1;case 1:return u.trys.push([1,3,,4]),[4,a.TimeoutPromise(this._options.maxCallPromiseExceedTime,i.call(t,e,n,r||{actor:t,permission:"active"})).catch(function(t){throw t})];case 2:return f=u.sent(),h=this._nodeStates.markSendSuccess(o),this.log("SUCCESS",s,t,e,n,h),this._concurrentCount-=1,[2,f];case 3:throw c=u.sent(),h=this._nodeStates.markSendFailed(o),this.log("FAILED",s,t,e,n,h,"ERROR => "+(c&&c.message?c.message:c)),this._concurrentCount-=1,c;case 4:return[2]}})})},e.prototype.log=function(t,e,n,r,i,o){for(var u=[],s=6;s<arguments.length;s++)u[s-6]=arguments[s];console.log.apply(console,["[eos_call_util] Call chain [[ "+e+" ]] "+n+"."+r+" [[["+t+"]]] :\nData => "+JSON.stringify(i)+"\nNode status => "+JSON.stringify(o)+"\n"].concat(u))},e}(f.MultiSourcePlayer);e.SignPlayer=l},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(){this.error_counts=0,this.total_counts=1,this.continuous_failure=0,this.enabled=!0,this.response_interval=0,this.revival_time=(new Date).getTime(),this.cleaning_time=(new Date).getTime(),this.record_total_counts=0,this.record_total_success=0,this.record_total_fuse=0,this.record_total_failed=0}}();e.NodeStat=r;var i=function(){function t(t,e){this._nodeConfigs=t,this._options=e,this._nodeStatus=[],this.initNodeStatus()}return t.prototype.initNodeStatus=function(){for(var t=0;t<this._nodeConfigs.length;t++)this._nodeStatus.push(new r);console.log("initiated",this._nodeStatus),this.setTheBestNodeToCurrent()},t.prototype.setTheBestNodeToCurrent=function(){for(var t=Math.floor(Math.random()*this._nodeStatus.length),e=(new Date).getTime(),n=0;n!==this._nodeStatus.length;n++){var r=this.tryClean(n),i=r.error_counts/r.total_counts,o=e>=r.revival_time;if(r.enabled&&(i>=this._options.maxFailureRate||r.continuous_failure>=this._options.maxContinuousFailure)&&(r.enabled=!1,r.revival_time=e+this._options.revivalTimeInterval,r.error_counts=0,r.total_counts=1,r.continuous_failure=0,r.record_total_fuse+=1,console.log("[eos_call_util] fuse "+this._nodeConfigs[n].httpEndpoint)),r.enabled||o){var u=this._nodeStatus[t],s=u.error_counts/u.total_counts;(u.continuous_failure>r.continuous_failure||s>i+this._options.failureRateThreshold||u.response_interval>r.response_interval+this._options.responseIntervalThreshold)&&(t=n)}}this._currentNodeIndex=t},t.prototype.getNodeConf=function(t){return this._nodeConfigs[t]},t.prototype.getNodeStat=function(t){return this._nodeStatus[t]},t.prototype.tryClean=function(t){var e=this.getNodeStat(t),n=(new Date).getTime();return e.cleaning_time>n?e:(console.log("execute clean ",e),e.error_counts=Math.max(0,e.error_counts-1),e.total_counts=Math.max(1,e.total_counts-1),e.continuous_failure=Math.max(0,e.continuous_failure-1),e.response_interval=Math.max(0,e.response_interval-this._options.responseIntervalDecline),e.cleaning_time=n+this._options.cleaningTimeInterval,e)},t.prototype.getCurNodeConf=function(){return this.getNodeConf(this._currentNodeIndex)},t.prototype.getCurNodeStat=function(){return this.getNodeStat(this._currentNodeIndex)},t.prototype.markSendSuccess=function(t){var e=this.getCurNodeStat(),n=(new Date).getTime(),r=n-t;return e.response_interval=(e.response_interval+r)/2,e.continuous_failure=0,e.enabled=!0,e.cleaning_time=n+this._options.cleaningTimeInterval,e.total_counts+=1,e.record_total_success+=1,e.record_total_counts+=1,console.log("send succeed"),e},t.prototype.markSendFailed=function(t){var e=this.getCurNodeStat();return console.log("send failed ==> ",e.continuous_failure,e.error_counts,e.total_counts),e.error_counts+=1,e.continuous_failure+=1,e.revival_time=t+this._options.revivalTimeInterval,e.total_counts+=1,e.record_total_failed+=1,e.record_total_counts+=1,console.log("send failed <== ",e.continuous_failure,e.error_counts,e.total_counts),e},t}();e.NodeStatMgr=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JpZ2kvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2lwaGVyLWJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J5dGVidWZmZXIvZGlzdC9ieXRlYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHlwZXMvbGlicy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2tleV9wdWJsaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIva2V5X3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9rZXlfcHJpdmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbG9nLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy93YWl0LnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21kNS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWN1cnZlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmNidWZmZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvc3RydWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsYXllci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL3NyYy9tdWx0aVNvdXJjZVBsYXllci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdudW1iZXIuanMvYmlnbnVtYmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWdzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9zY2F0dGVyUGxheWVyL3NjYXR0ZXJQbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9hZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbWJ5dGVzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2luY3IzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYXV0aENpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvc3RyZWFtQ2lwaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdpL2xpYi9iaWdpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL2N1cnZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yaXBlbWQxNjAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvZW5mb3JjZV90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9wcm9jZXNzLWFyZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy9saWIvZm9ybWF0LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbC9hc3NldC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZGIvbGliL2lkYi5qcyIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWVjYy9saWIvYXBpX2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb25nL2Rpc3QvbG9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaWdpL2xpYi9jb252ZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lY3VydmUvbGliL25hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2UteC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtZWNjL2xpYi9wcm9taXNlLWFzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2VjZHNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2Vjc2lnbmF0dXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lb3Nqcy1lY2MvbGliL2FwaV9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZjYnVmZmVyL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWUtZmxvYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZjYnVmZmVyL2xpYi9mY2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmNidWZmZXIvbGliL3N0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW9zanMtYXBpL2xpYi9hcGkvdjEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWFwaS9saWIvYXBpZ2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc29tb3JwaGljLWZldGNoL2ZldGNoLW5wbS1icm93c2VyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbWVsLWNhc2UvY2FtZWwtY2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXBwZXItY2FzZS91cHBlci1jYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uby1jYXNlL25vLWNhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvd2VyLWNhc2UvbG93ZXItY2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm8tY2FzZS92ZW5kb3Ivbm9uLXdvcmQtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uby1jYXNlL3ZlbmRvci9jYW1lbC1jYXNlLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm8tY2FzZS92ZW5kb3IvY2FtZWwtY2FzZS11cHBlci1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzLWFwaS9saWIvZXhwb3J0ZWQtaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzL2xpYi9hYmktY2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vvc2pzL2xpYi93cml0ZS1hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZ3MvZW9zTm9kZXMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL291dE9mQm94L3NjYXR0ZXJQbGF5ZXIvZGIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2V2ZW50SGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9jaGFpbi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMva2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMva2hSZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsL3RyYW5zY2FsUGF5bG9hZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWwvZW9zUHJvdmlkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL291dE9mQm94L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9yZWFkaW5nUGxheWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9zaWduUGxheWVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdXRPZkJveC9zaWduUGxheWVyL3NpZ25QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL291dE9mQm94L3NpZ25QbGF5ZXIvbm9kZVN0YXQudHMiXSwibmFtZXMiOlsicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjaHVua0lkIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90UmVxdWVzdFRpbWVvdXQiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsInB1c2giLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0RmFjdG9yeSIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJob3RTdGF0dXMiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiZmluaXNoQ2h1bmtMb2FkaW5nIiwiZXJyIiwiaG90V2FpdGluZ0ZpbGVzTWFwIiwiaG90RW5zdXJlVXBkYXRlQ2h1bmsiLCJ0IiwibW9kZSIsImhvdFN0YXR1c0hhbmRsZXJzIiwibmV3U3RhdHVzIiwiaSIsImxlbmd0aCIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJpZCIsImhvdENoZWNrIiwiYXBwbHkiLCJFcnJvciIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJob3REb3dubG9hZE1hbmlmZXN0IiwiYyIsImgiLCJwcm9taXNlIiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwiaG90QXBwbHkiLCJyZXN1bHQiLCJvdXRkYXRlZE1vZHVsZXMiLCJvcHRpb25zIiwiY2IiLCJqIiwibW9kdWxlIiwiZ2V0QWZmZWN0ZWRTdHVmZiIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsInNsaWNlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsInR5cGUiLCJfbWFpbiIsInBhcmVudElkIiwicGFyZW50IiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiY29uY2F0IiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJqb2luIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwiaWR4Iiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiZXJyb3JIYW5kbGVyIiwia2V5cyIsImZvckVhY2giLCJpbnN0YWxsZWRDaHVua3MiLCJob3REaXNwb3NlQ2h1bmsiLCJkZXBlbmRlbmN5IiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkYXRhIiwiZGlzcG9zZUhhbmRsZXJzIiwiX2Rpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwic3BsaWNlIiwibW9kdWxlcyIsImVycm9yIiwiY2FsbGJhY2tzIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwiZXhwb3J0cyIsImwiLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImNoZWNrIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJob3RDcmVhdGVNb2R1bGUiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsImJ1ZmZlciIsIkJ1ZmZlciIsImNvcHlQcm9wcyIsImRzdCIsIlNhZmVCdWZmZXIiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwiU2xvd0J1ZmZlciIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwiVGVtcEN0b3IiLCJnbG9iYWwiLCJiYXNlNjQiLCJpZWVlNzU0IiwiaXNBcnJheSIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwidGhpcyIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJsZW4iLCJjaGVja2VkIiwiY29weSIsInZhbCIsImlzbmFuIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJ0b1N0cmluZyIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImNoYXJDb2RlQXQiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsInN0YXJ0IiwiZW5kIiwiZnJvbUJ5dGVBcnJheSIsInV0ZjhTbGljZSIsIk1hdGgiLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwieCIsInkiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiYXJndW1lbnRzIiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIkFycmF5IiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJ1dGlsIiwiaGFzT3duIiwicFNsaWNlIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwicFRvU3RyaW5nIiwiYXJyYnVmIiwiRGF0YVZpZXciLCJhc3NlcnQiLCJvayIsInJlZ2V4IiwiZ2V0TmFtZSIsImZ1bmMiLCJpc0Z1bmN0aW9uIiwidHJ1bmNhdGUiLCJzb21ldGhpbmciLCJyYXduYW1lIiwiZmFpbCIsImV4cGVjdGVkIiwibWVzc2FnZSIsIm9wZXJhdG9yIiwic3RhY2tTdGFydEZ1bmN0aW9uIiwiQXNzZXJ0aW9uRXJyb3IiLCJfZGVlcEVxdWFsIiwic3RyaWN0IiwibWVtb3MiLCJpc0RhdGUiLCJnZXRUaW1lIiwiaXNSZWdFeHAiLCJzb3VyY2UiLCJtdWx0aWxpbmUiLCJsYXN0SW5kZXgiLCJpZ25vcmVDYXNlIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYWN0dWFsSW5kZXgiLCJhY3R1YWxWaXNpdGVkT2JqZWN0cyIsImlzUHJpbWl0aXZlIiwiZ2V0UHJvdG90eXBlT2YiLCJhSXNBcmdzIiwiaXNBcmd1bWVudHMiLCJiSXNBcmdzIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0Iiwib2JqRXF1aXYiLCJleHBlY3RlZEV4Y2VwdGlvbiIsInRlc3QiLCJpc1Byb3RvdHlwZU9mIiwiX3Rocm93cyIsInNob3VsZFRocm93IiwiYmxvY2siLCJfdHJ5QmxvY2siLCJ1c2VyUHJvdmlkZWRNZXNzYWdlIiwiaXNVbndhbnRlZEV4Y2VwdGlvbiIsImlzRXJyb3IiLCJpc1VuZXhwZWN0ZWRFeGNlcHRpb24iLCJnZW5lcmF0ZWRNZXNzYWdlIiwic2VsZiIsImdldE1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInN0YWNrIiwiZm5fbmFtZSIsIm5leHRfbGluZSIsInN1YnN0cmluZyIsImluaGVyaXRzIiwiZXF1YWwiLCJub3RFcXVhbCIsImRlZXBFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBFcXVhbCIsIm5vdERlZXBTdHJpY3RFcXVhbCIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJ0aHJvd3MiLCJkb2VzTm90VGhyb3ciLCJpZkVycm9yIiwiaXNPYmplY3QiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJleHRlbmQiLCJ0aGlzQXJnIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsIl9fZyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIkJpZ0ludGVnZXIiLCJjb3JlIiwiX19lIiwiaXQiLCJUcmFuc2Zvcm0iLCJTdHJpbmdEZWNvZGVyIiwiQ2lwaGVyQmFzZSIsImhhc2hNb2RlIiwiX2ZpbmFsT3JEaWdlc3QiLCJmaW5hbCIsIl9maW5hbCIsIl9fZmluYWwiLCJfZGVjb2RlciIsIl9lbmNvZGluZyIsImlucHV0RW5jIiwib3V0cHV0RW5jIiwib3V0RGF0YSIsIl91cGRhdGUiLCJfdG9TdHJpbmciLCJzZXRBdXRvUGFkZGluZyIsImdldEF1dGhUYWciLCJzZXRBdXRoVGFnIiwic2V0QUFEIiwiX3RyYW5zZm9ybSIsIl8iLCJuZXh0IiwiX2ZsdXNoIiwiZG9uZSIsImVuYyIsImZpbiIsInBuYSIsIkR1cGxleCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY3JlYXRlSGFzaCIsImNyZWF0ZUhtYWMiLCJzaGExIiwicmVzdWx0RW5jb2RpbmciLCJkaWdlc3QiLCJzaGEyNTYiLCJzaGE1MTIiLCJIbWFjU0hBMjU2Iiwic2VjcmV0IiwicmlwZW1kMTYwIiwiZFAiLCJjcmVhdGVEZXNjIiwiZiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsIklPYmplY3QiLCJkZWZpbmVkIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiTG9uZyIsIkJ5dGVCdWZmZXIiLCJjYXBhY2l0eSIsIkRFRkFVTFRfQ0FQQUNJVFkiLCJERUZBVUxUX0VORElBTiIsIkRFRkFVTFRfTk9BU1NFUlQiLCJFTVBUWV9CVUZGRVIiLCJ2aWV3IiwibWFya2VkT2Zmc2V0IiwiVkVSU0lPTiIsIkxJVFRMRV9FTkRJQU4iLCJCSUdfRU5ESUFOIiwiQnl0ZUJ1ZmZlclByb3RvdHlwZSIsIl9faXNCeXRlQnVmZmVyX18iLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJzdHJpbmdTb3VyY2UiLCJzdHJpbmdEZXN0aW5hdGlvbiIsImNzIiwicHMiLCJpZWVlNzU0X3JlYWQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsImllZWU3NTRfd3JpdGUiLCJydCIsImFicyIsImxvZyIsIkxOMiIsImFjY2Vzc29yIiwiYWxsb2NhdGUiLCJidWZmZXJzIiwiayIsImlzQnl0ZUJ1ZmZlciIsIndyYXAiLCJiaSIsImJiIiwiZnJvbUJhc2U2NCIsImZyb21IZXgiLCJmcm9tQmluYXJ5IiwiZnJvbVVURjgiLCJmcm9tRGVidWciLCJjbG9uZSIsIndyaXRlQml0U2V0IiwicmVsYXRpdmUiLCJiaXRzIiwiYml0Iiwid3JpdGVWYXJpbnQzMiIsIndyaXRlQnl0ZSIsInJlYWRCaXRTZXQiLCJyZWFkVmFyaW50MzIiLCJyZWFkQnl0ZSIsInJlYWRCeXRlcyIsIndyaXRlQnl0ZXMiLCJhcHBlbmQiLCJjYXBhY2l0eTAiLCJyZXNpemUiLCJ3cml0ZVVpbnQ4IiwiY2FwYWNpdHkxIiwicmVhZFVpbnQ4Iiwid3JpdGVJbnQxNiIsImNhcGFjaXR5MiIsIndyaXRlU2hvcnQiLCJyZWFkSW50MTYiLCJyZWFkU2hvcnQiLCJ3cml0ZVVpbnQxNiIsImNhcGFjaXR5MyIsIndyaXRlVUludDE2IiwicmVhZFVpbnQxNiIsInJlYWRVSW50MTYiLCJ3cml0ZUludDMyIiwiY2FwYWNpdHk0Iiwid3JpdGVJbnQiLCJyZWFkSW50MzIiLCJyZWFkSW50Iiwid3JpdGVVaW50MzIiLCJjYXBhY2l0eTUiLCJ3cml0ZVVJbnQzMiIsInJlYWRVaW50MzIiLCJyZWFkVUludDMyIiwid3JpdGVJbnQ2NCIsImZyb21OdW1iZXIiLCJjYXBhY2l0eTYiLCJsb3ciLCJoaWdoIiwid3JpdGVMb25nIiwicmVhZEludDY0IiwicmVhZExvbmciLCJ3cml0ZVVpbnQ2NCIsImNhcGFjaXR5NyIsIndyaXRlVUludDY0IiwicmVhZFVpbnQ2NCIsInJlYWRVSW50NjQiLCJ3cml0ZUZsb2F0MzIiLCJjYXBhY2l0eTgiLCJyZWFkRmxvYXQzMiIsInJlYWRGbG9hdCIsIndyaXRlRmxvYXQ2NCIsImNhcGFjaXR5OSIsInJlYWRGbG9hdDY0IiwicmVhZERvdWJsZSIsIk1BWF9WQVJJTlQzMl9CWVRFUyIsImNhbGN1bGF0ZVZhcmludDMyIiwiemlnWmFnRW5jb2RlMzIiLCJ6aWdaYWdEZWNvZGUzMiIsImNhcGFjaXR5MTAiLCJ3cml0ZVZhcmludDMyWmlnWmFnIiwicmVhZFZhcmludDMyWmlnWmFnIiwiTUFYX1ZBUklOVDY0X0JZVEVTIiwiY2FsY3VsYXRlVmFyaW50NjQiLCJwYXJ0MCIsInRvSW50IiwicGFydDEiLCJzaGlmdFJpZ2h0VW5zaWduZWQiLCJwYXJ0MiIsInppZ1phZ0VuY29kZTY0IiwidW5zaWduZWQiLCJ0b1NpZ25lZCIsInNoaWZ0TGVmdCIsInhvciIsInNoaWZ0UmlnaHQiLCJ0b1Vuc2lnbmVkIiwiemlnWmFnRGVjb2RlNjQiLCJhbmQiLCJPTkUiLCJuZWdhdGUiLCJ3cml0ZVZhcmludDY0IiwiY2FwYWNpdHkxMSIsIndyaXRlVmFyaW50NjRaaWdaYWciLCJyZWFkVmFyaW50NjQiLCJmcm9tQml0cyIsInJlYWRWYXJpbnQ2NFppZ1phZyIsIndyaXRlQ1N0cmluZyIsInV0ZngiLCJjYWxjdWxhdGVVVEYxNmFzVVRGOCIsImNhcGFjaXR5MTIiLCJlbmNvZGVVVEYxNnRvVVRGOCIsInJlYWRDU3RyaW5nIiwic2QiLCJkZWNvZGVVVEY4dG9VVEYxNiIsIndyaXRlSVN0cmluZyIsImNhcGFjaXR5MTMiLCJyZWFkSVN0cmluZyIsInJlYWRVVEY4U3RyaW5nIiwiTUVUUklDU19CWVRFUyIsIk1FVFJJQ1NfQ0hBUlMiLCJ3cml0ZVVURjhTdHJpbmciLCJjYXBhY2l0eTE0Iiwid3JpdGVTdHJpbmciLCJjYWxjdWxhdGVVVEY4Q2hhcnMiLCJjYWxjdWxhdGVVVEY4Qnl0ZXMiLCJjYWxjdWxhdGVTdHJpbmciLCJtZXRyaWNzIiwiZGVjb2RlVVRGOCIsImNwIiwiVVRGOHRvVVRGMTYiLCJyZWFkU3RyaW5nIiwid3JpdGVWU3RyaW5nIiwiY2FwYWNpdHkxNSIsInJlYWRWU3RyaW5nIiwiY2FwYWNpdHkxNiIsImFwcGVuZFRvIiwiY2xlYXIiLCJjb21wYWN0IiwiYmVnaW4iLCJjb3B5VG8iLCJ0YXJnZXRPZmZzZXQiLCJzb3VyY2VPZmZzZXQiLCJzb3VyY2VMaW1pdCIsInRhcmdldFJlbGF0aXZlIiwiZW5zdXJlQ2FwYWNpdHkiLCJjdXJyZW50IiwiZmxpcCIsIm1hcmsiLCJvcmRlciIsIkxFIiwiQkUiLCJiaWdFbmRpYW4iLCJwcmVwZW5kIiwiZGlmZiIsInByZXBlbmRUbyIsInByaW50RGVidWciLCJ0b0RlYnVnIiwicmVzZXQiLCJyZXZlcnNlIiwic2tpcCIsInRvQnVmZmVyIiwiZm9yY2VDb3B5IiwidG9BcnJheUJ1ZmZlciIsInRvVVRGOCIsInRvQmFzZTY0IiwidG9CaW5hcnkiLCJ0b0NvbHVtbnMiLCJseGl2IiwiYW91dCIsImFpbiIsImVuY29kZSIsImRlY29kZSIsInQxIiwidDIiLCJidG9hIiwiYXRvYiIsImI2NCIsImNoYXJzIiwicGFydHMiLCJjaGFyQ29kZSIsImNvbHVtbnMiLCJoZXgiLCJhc2MiLCJ0b1VwcGVyQ2FzZSIsImNoIiwicnMiLCJobyIsImhtIiwiaGwiLCJjaGFyQXQiLCJNQVhfQ09ERVBPSU5UIiwiZW5jb2RlVVRGOCIsIlVURjE2dG9VVEY4IiwiYzEiLCJjMiIsImNhbGN1bGF0ZUNvZGVQb2ludCIsImNhbGN1bGF0ZVVURjgiLCJIYXNoIiwiYmxvY2tTaXplIiwiZmluYWxTaXplIiwiX2Jsb2NrIiwiX2ZpbmFsU2l6ZSIsIl9ibG9ja1NpemUiLCJfbGVuIiwiYWNjdW0iLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsInJlbSIsImxvd0JpdHMiLCJoaWdoQml0cyIsImhhc2giLCJfaGFzaCIsIkVvc0xpYiIsImRlYnVnIiwiZWNjIiwiRW9zIiwiRWNjIiwiRGVidWciLCJfaXRlcmF0b3IyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zeW1ib2wyIiwiX3R5cGVvZiIsImRlZmF1bHQiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJyZSIsIl9zbGljZWRUb0FycmF5IiwiaXRlcmF0b3IiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwic2xpY2VJdGVyYXRvciIsImVjdXJ2ZSIsInNlY3AyNTZrMSIsImdldEN1cnZlQnlOYW1lIiwia2V5VXRpbHMiLCJHIiwiUHVibGljS2V5IiwiUSIsInB1YmtleV9wcmVmaXgiLCJwdWJsaWNLZXkiLCJmcm9tQnVmZmVyIiwiY29tcHJlc3NlZCIsImdldEVuY29kZWQiLCJjaGVja0VuY29kZSIsInRvVW5jb21wcmVzc2VkIiwicG9pbnQiLCJQb2ludCIsImRlY29kZUZyb20iLCJmcm9tUG9pbnQiLCJjb21wYXJlVG8iLCJjRyIsIm11bHRpcGx5IiwiUXByaW1lIiwiYWRkIiwiaXNJbmZpbml0eSIsImlzVmFsaWQiLCJwdWJrZXkiLCJiaW4iLCJwdWJsaWNfa2V5IiwiZnJvbVN0cmluZ09yVGhyb3ciLCJSZWdFeHAiLCJjaGVja0RlY29kZSIsIl9tYXRjaCIsImtleVR5cGUiLCJrZXlTdHJpbmciLCJmcm9tU3RyaW5nSGV4IiwiYmFzZTU4IiwicmFuZG9tQnl0ZXMiLCJyYW5kb20zMkJ5dGVCdWZmZXIiLCJfcmVmIiwiX3JlZiRjcHVFbnRyb3B5Qml0cyIsImNwdUVudHJvcHlCaXRzIiwiX3JlZiRzYWZlIiwic2FmZSIsIl9lbnRyb3B5Q291bnQiLCJoYXNoX2FycmF5IiwiY3B1RW50cm9weSIsImV4dGVybmFsRW50cm9weUFycmF5IiwiZW50cm9weVN0ciIsIkRhdGUiLCJzY3JlZW4iLCJoZWlnaHQiLCJ3aWR0aCIsImNvbG9yRGVwdGgiLCJhdmFpbEhlaWdodCIsImF2YWlsV2lkdGgiLCJwaXhlbERlcHRoIiwibGFuZ3VhZ2UiLCJsb2NhdGlvbiIsImhpc3RvcnkiLCJtaW1lVHlwZSIsIm1pbWVUeXBlcyIsImRlc2NyaXB0aW9uIiwic3VmZml4ZXMiLCJlbnRyb3B5Iiwic3RhcnRfdCIsIm5vdyIsImJyb3dzZXJFbnRyb3B5IiwiYWRkRW50cm9weSIsImludHMiLCJfa2V5IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsImVudHJvcHlQb3MiLCJpMiIsInJldHVybiIsImVudHJvcHlDb3VudCIsImNoZWNrc3VtIiwibmV3Q2hlY2siLCJrZXlCdWZmZXIiLCJfY2hlY2tzdW0iLCJjb2xsZWN0ZWQiLCJsYXN0Q291bnQiLCJsb3dFbnRyb3B5U2FtcGxlcyIsImNvdW50IiwiZmxvYXRpbmdQb2ludENvdW50IiwiZGVsdGEiLCJsb2cyIiwicGN0IiwidG9GaXhlZCIsInNpbiIsInNxcnQiLCJjb21tb25BcGkiLCJvYmplY3RBcGkiLCJhc3NpZ24iLCJleGVjIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCJhc1VJbnQzMkFycmF5Iiwic2NydWJWZWMiLCJjcnlwdEJsb2NrIiwiTSIsImtleVNjaGVkdWxlIiwiU1VCX01JWCIsIlNCT1giLCJuUm91bmRzIiwidDAiLCJ0MyIsIlNVQl9NSVgwIiwiU1VCX01JWDEiLCJTVUJfTUlYMiIsIlNVQl9NSVgzIiwiczAiLCJzMSIsInMyIiwiczMiLCJrc1JvdyIsInJvdW5kIiwiUkNPTiIsIklOVl9TQk9YIiwiSU5WX1NVQl9NSVgiLCJ4aSIsInN4IiwieDIiLCJ4NCIsIng4IiwiQUVTIiwiX3Jlc2V0Iiwia2V5U2l6ZSIsImtleVdvcmRzIiwia3NSb3dzIiwiaW52S2V5U2NoZWR1bGUiLCJpayIsImtzUiIsInR0IiwiX25Sb3VuZHMiLCJfa2V5U2NoZWR1bGUiLCJfaW52S2V5U2NoZWR1bGUiLCJlbmNyeXB0QmxvY2tSYXciLCJlbmNyeXB0QmxvY2siLCJkZWNyeXB0QmxvY2siLCJtMSIsInNjcnViIiwiYXJnMSIsImFyZzIiLCJhcmczIiwicHJvbWlzZUFzeW5jIiwiUHJpdmF0ZUtleSIsImlzQmlnSW50ZWdlciIsInRvV2lmIiwicHJpdmF0ZV9rZXkiLCJ0b1B1YmxpYyIsImdldFNoYXJlZFNlY3JldCIsIktCIiwiS0JQIiwiZnJvbUFmZmluZSIsIlMiLCJhZmZpbmVYIiwiZ2V0Q2hpbGRLZXkiLCJwYXJzZUtleSIsInByaXZhdGVTdHIiLCJ2ZXJzaW9uS2V5IiwicHJpdmF0ZUtleSIsImZvcm1hdCIsImZyb21TZWVkIiwic2VlZCIsImlzV2lmIiwidGV4dCIsImZyb21XaWYiLCJyYW5kb21LZXkiLCJpbml0aWFsaXplIiwidW5zYWZlUmFuZG9tS2V5IiwiaW5pdGlhbGl6ZWQiLCJwdnQiLCJwdnRFcnJvciIsInB1YiIsInVuaXRUZXN0IiwiYXJyMiIsIl90b0NvbnN1bWFibGVBcnJheSIsIm1zZyIsImxpYnNfMSIsImNyZWF0ZUxvZ2dlciIsInZlcmJvc2UiLCJpbmZvIiwid2FybmluZyIsIm5hbWVzcGFjZXMiLCJkaXNhYmxlIiwiZW5hYmxlIiwiZm9yTXMiLCJtcyIsImZvckNvbmRpdGlvbiIsImZuUHJlZGljdCIsInNwYW5NcyIsIl9hIiwic2VudCIsIlRpbWVvdXRQcm9taXNlIiwicmFjZSIsIl9fZXhwb3J0IiwiJGF0IiwiaXRlcmF0ZWQiLCJfdCIsImluZGV4IiwiY2VpbCIsInZhbHVlT2YiLCIka2V5cyIsImVudW1CdWdLZXlzIiwic2hhcmVkIiwiY29weXJpZ2h0Iiwic3BsaXQiLCJkZWYiLCJoYXMiLCJUQUciLCJ0YWciLCJzdGF0IiwiaGlkZSIsIkl0ZXJhdG9ycyIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJOQU1FIiwiQ29sbGVjdGlvbiIsInByb3RvIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsImVyIiwiaGFuZGxlciIsImNvbnRleHQiLCJsaXN0ZW5lciIsIm5ld0xpc3RlbmVyIiwid2FybmVkIiwidHJhY2UiLCJmaXJlZCIsInBvc2l0aW9uIiwibGlzdGVuZXJDb3VudCIsImV2bGlzdGVuZXIiLCJlbWl0dGVyIiwiU3RyZWFtIiwiUGFzc1Rocm91Z2giLCJzZXRJbW1lZGlhdGUiLCJDb3JrZWRSZXF1ZXN0Iiwic3RhdGUiLCJfdGhpcyIsImVudHJ5IiwiZmluaXNoIiwiY29ya1JlcSIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsIldyaXRhYmxlU3RhdGUiLCJpbnRlcm5hbFV0aWwiLCJkZXByZWNhdGUiLCJPdXJVaW50OEFycmF5IiwicmVhbEhhc0luc3RhbmNlIiwiZGVzdHJveUltcGwiLCJub3AiLCJzdHJlYW0iLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRlc3Ryb3kiLCJkb1dyaXRlIiwiY2h1bmsiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiZ2V0QnVmZmVyIiwiaGFzSW5zdGFuY2UiLCJfaXNVaW50OEFycmF5IiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwibGFzdCIsIndyaXRlT3JCdWZmZXIiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiZW5kV3JpdGFibGUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwibmIiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ0b3RhbCIsInV0ZjhDaGVja0luY29tcGxldGUiLCJIYXNoQmFzZSIsIkFSUkFZMTYiLCJNRDUiLCJfYiIsIl9jIiwicm90bCIsImZuRiIsImZuRyIsImZuSCIsImZuSSIsIl9kaWdlc3QiLCJfYmxvY2tPZmZzZXQiLCJfbGVuZ3RoIiwiQ3VydmUiLCJSSVBFTUQxNjAiLCJzaGEiLCJCYXNlIiwiYWxnIiwiVHlwZXMiLCJGY2J1ZmZlciIsImRlZmluaXRpb25zIiwiY29uZmlnIiwiY3VzdG9tVHlwZXMiLCJ0eXBlcyIsIl9jcmVhdGUiLCJlcnJvcnMiLCJzdHJ1Y3RzIiwiX2V4dGVuZCIsImNvbWJpbmVkIiwiX2NyZWF0ZTIiLCJ0eXBlTmFtZSIsIl9zbGljZWRUb0FycmF5MyIsIl90eXBlb2YzIiwiX3JlcXVpcmUiLCJTaWduYXR1cmUiLCJzY2hlbWEiLCJfcmVxdWlyZTIiLCJlbmNvZGVOYW1lIiwiaXNOYW1lIiwiZGVjb2RlTmFtZSIsIkRlY2ltYWxQYWQiLCJEZWNpbWFsSW1wbHkiLCJEZWNpbWFsVW5pbXBseSIsInByaW50QXNzZXQiLCJwYXJzZUFzc2V0IiwiZXh0ZW5kZWRTY2hlbWEiLCJzdHJ1Y3RMb29rdXAiLCJsb29rdXBOYW1lIiwiYWNjb3VudCIsImNhY2hlIiwiYWJpQ2FjaGUiLCJhYmkiLCJhY3Rpb25zIiwiYWN0aW9uIiwiX3N0cnVjdCIsInN0cnVjdCIsImZvcmNlQWN0aW9uRGF0YUhleCIsIm92ZXJyaWRlIiwiYXV0aG9yaXR5T3ZlcnJpZGUiLCJhYmlPdmVycmlkZSIsIndhc21Db2RlT3ZlcnJpZGUiLCJhY3Rpb25EYXRhT3ZlcnJpZGUiLCJlb3NUeXBlcyIsIk5hbWUiLCJ2YXJpYW50IiwiUHVibGljS2V5RWNjIiwic3ltYm9sIiwiX1N5bWJvbCIsInN5bWJvbF9jb2RlIiwiU3ltYm9sQ29kZSIsImV4dGVuZGVkX3N5bWJvbCIsIkV4dGVuZGVkU3ltYm9sIiwiYXNzZXQiLCJBc3NldCIsImV4dGVuZGVkX2Fzc2V0IiwiRXh0ZW5kZWRBc3NldCIsInNpZ25hdHVyZSIsIlNpZ25hdHVyZVR5cGUiLCJmdWxsU2NoZW1hIiwiX0ZjYnVmZmVyIiwic3RyaW5naWZ5IiwidmFsaWRhdGlvbiIsImZyb21CeXRlQnVmZmVyIiwiYXBwZW5kQnl0ZUJ1ZmZlciIsInRvT2JqZWN0IiwiZGVmYXVsdHMiLCJ2YXJpYW50QXJyYXkiLCJiYXNlVHlwZXMiLCJ2YXJpYW50cyIsIlR5cGUiLCJzdGF0aWNWYXJpYW50Iiwic3RhdGljX3ZhcmlhbnQiLCJiY29weSIsInB1YmJ1ZiIsImtleVByZWZpeCIsInByZWNpc2lvbiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX3BhcnNlQXNzZXQiLCJwYWQiLCJyZXBlYXQiLCJfcGFyc2VBc3NldDIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJzeW1ib2xUeXBlIiwiY29udHJhY3ROYW1lIiwiX3ZhbHVlJHNwbGl0IiwiX3ZhbHVlJHNwbGl0MiIsImNvbnRyYWN0IiwiYW1vdW50VHlwZSIsImludDY0IiwiYW1vdW50Iiwic3ltIiwiX3BhcnNlQXNzZXQ1IiwiX3BhcnNlQXNzZXQ2IiwiX3BhcnNlQXNzZXQ3IiwiX3BhcnNlQXNzZXQ4IiwiYXNzZXRUeXBlIiwiX2Fzc2V0JHNwbGl0Iiwic2lnbmF0dXJlVHlwZSIsImZpeGVkX2J5dGVzNjUiLCJzaWduYXR1cmVCdWZmZXIiLCJhdXRob3JpdHkuZnJvbU9iamVjdCIsInRocmVzaG9sZCIsIndlaWdodCIsIl92YWx1ZSRzcGxpdDMiLCJfdmFsdWUkc3BsaXQ0IiwiX3ZhbHVlJHNwbGl0NCQiLCJhY2NvdW50cyIsInBlcm1pc3Npb24iLCJhY3RvciIsImFiaV9kZWYuZnJvbU9iamVjdCIsImpzb24iLCJzZXRhYmkuYWJpLmFwcGVuZEJ5dGVCdWZmZXIiLCJmaWVsZHMiLCJzZXIiLCJiMiIsInNldGNvZGUuY29kZS5mcm9tT2JqZWN0IiwiX3JlZjIiLCJiaW5hcnllbiIsIndhc20iLCJwYXJzZVRleHQiLCJlbWl0QmluYXJ5IiwiYWN0aW9uLmRhdGEuZnJvbUJ5dGVCdWZmZXIiLCJfcmVmMyIsImxlblByZWZpeCIsImJDb3B5IiwiYWN0aW9uLmRhdGEuYXBwZW5kQnl0ZUJ1ZmZlciIsIl9yZWY0IiwiYWN0aW9uLmRhdGEuZnJvbU9iamVjdCIsIl9yZWY1IiwiYWN0aW9uLmRhdGEudG9PYmplY3QiLCJfcmVmNiIsIl9yZWY3IiwiX2lzSXRlcmFibGUzIiwiX2dldEl0ZXJhdG9yMyIsImFzc2V0XzEiLCJsb2dfMSIsImV2ZW50SGFuZGxlcl8xIiwiY2hhaW5fMSIsImtoXzEiLCJlb3NQcm92aWRlcl8xIiwicGFja2FnZUpzb24iLCJFVkVOVF9OQU1FUyIsIkVSUl9UUkFOU0ZFUl9GQUlMRUQiLCJFUlJfVFJBTlNDQUxfRkFJTEVEIiwiRVJSX1RSQU5TRU5EX0ZBSUxFRCIsIlBsYXllciIsIl9zdXBlciIsImV2ZW50cyIsImVuYWJsZUV2ZW50cyIsIl9fZXh0ZW5kcyIsImVvc0NsaWVudCIsImdldEFjY291bnRJbmZvIiwiYWNjb3VudF9uYW1lIiwiZ2V0SWRlbnRpdHkiLCJnZXRCYWxhbmNlIiwic3ltYm9sTmFtZSIsImdldEJhbGFuY2VzIiwiZ2V0QmFsYW5jZUFzc2V0Iiwic3RyQXNzZXQiLCJ0cmFuc2ZlciIsInF1YW50aXR5IiwibWVtbyIsImVtaXRFdmVudCIsInRyYW5zY2FsIiwia2giLCJqc29uRGF0YSIsImF1dGhvcml0eSIsInRyeCIsInRyYW5zYWN0aW9uX2lkIiwibmV3QWNjb3VudCIsImFjdGl2ZUtleSIsIm93bmVyS2V5IiwiY3JlYXRvciIsInRyYW5zYWN0aW9uIiwidHIiLCJuZXdhY2NvdW50Iiwib3duZXIiLCJidXlyYW1ieXRlcyIsInBheWVyIiwicmVjZWl2ZXIiLCJkZWxlZ2F0ZWJ3Iiwic3Rha2VfbmV0X3F1YW50aXR5Iiwic3Rha2VfY3B1X3F1YW50aXR5IiwiaGVscCIsInV0aWxzIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJnZXREZWZhdWx0QWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJBY2NlcHQiLCJkZWZhdWx0Q29uZmlnIiwibm9kZSIsImNoYWluSWQiLCJtb2NrVHJhbnNhY3Rpb25zIiwiZXhwaXJlSW5TZWNvbmRzIiwiYnJvYWRjYXN0Iiwic2lnbiIsInVybHMiLCJNdWx0aVNvdXJjZVBsYXllciIsImNvbmYiLCJfdXJscyIsIl9ub2RlQ29uZmlncyIsIl9jb25mIiwiX19hc3NpZ24iLCJ1cmwiLCJodHRwRW5kcG9pbnQiLCJfcmVnZW5lcmF0b3IyIiwiRW9zQXBpIiwiU3RydWN0cyIsIkFiaUNhY2hlIiwid3JpdGVBcGlHZW4iLCJ0b2tlbiIsInN5c3RlbSIsImVvc2lvX251bGwiLCJjb25maWdEZWZhdWx0cyIsImxvZ2dlciIsIl9jb25zb2xlIiwiX2NvbnNvbGUyIiwiYXBwbHlEZWZhdWx0cyIsIm5ldHdvcmsiLCJhYmlzIiwiZ2V0SW5mbyIsImNoYWluX2lkIiwiY2F0Y2giLCJjaGVja0NoYWluSWQiLCJtb2NrIiwiX1N0cnVjdHMiLCJlb3MiLCJ3cml0ZUFwaSIsIm8xIiwibzIiLCJ0aHJvd09uRHVwbGljYXRlIiwibWVyZ2VXcml0ZUZ1bmN0aW9ucyIsInJlYWRPbmx5IiwiU2V0IiwicmVhZFdyaXRlIiwicHJvdGVjdGVkQ29uZmlnIiwic2FmZUNvbmZpZyIsImZjIiwic2lnblByb3ZpZGVyIiwiZGVmYXVsdFNpZ25Qcm92aWRlciIsImNyZWF0ZUVvcyIsImFwaSIsIlRlc3RuZXQiLCJMb2NhbG5ldCIsImtleVByb3ZpZGVyIiwic2lncyIsImtleU1hcCIsImlzUHJpdmF0ZSIsInB1YmtleXMiLCJvcHRpb25zS2V5UHJvdmlkZXIiLCJhc3luYyIsIl9jb250ZXh0IiwicHJldiIsImF3cmFwIiwicHJpdmF0ZSIsInB1YmxpYyIsImFicnVwdCIsIk1hcCIsInByaXZhdGVUb1B1YmxpYyIsImdldFJlcXVpcmVkS2V5cyIsInJlcXVpcmVkX2tleXMiLCJwdnRzIiwibWlzc2luZ0tleXMiLCJyZXF1aXJlZEtleSIsIndpZiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240IiwiX2RpZEl0ZXJhdG9yRXJyb3I0IiwiX2l0ZXJhdG9yRXJyb3I0IiwiX3N0ZXA0IiwiX2l0ZXJhdG9yNCIsIl9wdnQiLCJzdG9wIiwiZ2xvYmFsT2JqZWN0IiwiQmlnTnVtYmVyIiwiaXNOdW1lcmljIiwibWF0aGNlaWwiLCJtYXRoZmxvb3IiLCJiaWdudW1iZXJFcnJvciIsInRvb01hbnlEaWdpdHMiLCJCQVNFIiwiTE9HX0JBU0UiLCJNQVhfU0FGRV9JTlRFR0VSIiwiUE9XU19URU4iLCJTUVJUX0JBU0UiLCJNQVgiLCJiaXRGbG9vciIsImNvZWZmVG9TdHJpbmciLCJ6IiwieGMiLCJ5YyIsImludENoZWNrIiwiaXNPZGQiLCJ0b0V4cG9uZW50aWFsIiwidG9GaXhlZFBvaW50IiwienMiLCJjb25maWdPYmplY3QiLCJkaXYiLCJjb252ZXJ0QmFzZSIsInBhcnNlTnVtZXJpYyIsIkRFQ0lNQUxfUExBQ0VTIiwiUk9VTkRJTkdfTU9ERSIsIlRPX0VYUF9ORUciLCJUT19FWFBfUE9TIiwiTUlOX0VYUCIsIk1BWF9FWFAiLCJDUllQVE8iLCJNT0RVTE9fTU9ERSIsIlBPV19QUkVDSVNJT04iLCJGT1JNQVQiLCJwcmVmaXgiLCJncm91cFNpemUiLCJzZWNvbmRhcnlHcm91cFNpemUiLCJncm91cFNlcGFyYXRvciIsImRlY2ltYWxTZXBhcmF0b3IiLCJmcmFjdGlvbkdyb3VwU2l6ZSIsImZyYWN0aW9uR3JvdXBTZXBhcmF0b3IiLCJzdWZmaXgiLCJBTFBIQUJFVCIsImFscGhhYmV0IiwiY2FzZUNoYW5nZWQiLCJpc051bSIsInNlYXJjaCIsIkRFQlVHIiwicm0iLCJjMCIsIm5lIiwibWF4T3JNaW4iLCJub3JtYWxpc2UiLCJuaSIsInJkIiwicG93czEwIiwiUk9VTkRfVVAiLCJST1VORF9ET1dOIiwiUk9VTkRfQ0VJTCIsIlJPVU5EX0ZMT09SIiwiUk9VTkRfSEFMRl9VUCIsIlJPVU5EX0hBTEZfRE9XTiIsIlJPVU5EX0hBTEZfRVZFTiIsIlJPVU5EX0hBTEZfQ0VJTCIsIlJPVU5EX0hBTEZfRkxPT1IiLCJFVUNMSUQiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJFWFBPTkVOVElBTF9BVCIsIlJBTkdFIiwiaXNCaWdOdW1iZXIiLCJfaXNCaWdOdW1iZXIiLCJtYXhpbXVtIiwibHQiLCJtaW5pbXVtIiwiZ3QiLCJyYW5kb201M2JpdEludCIsImRwIiwicmFuZCIsIlVpbnQzMkFycmF5Iiwic3VtIiwicGx1cyIsInRvQmFzZU91dCIsImJhc2VJbiIsImJhc2VPdXQiLCJhcnJMIiwiY2FsbGVySXNUb1N0cmluZyIsImJhc2UiLCJ0ZW1wIiwieGxvIiwieGhpIiwiY2FycnkiLCJrbG8iLCJraGkiLCJhTCIsImJMIiwiY21wIiwic3VidHJhY3QiLCJtb3JlIiwicHJvZCIsInByb2RMIiwicSIsInFjIiwicmVtTCIsInJlbTAiLCJ4TCIsInljMCIsInlMIiwieXoiLCJiYXNlUHJlZml4IiwiZG90QWZ0ZXIiLCJkb3RCZWZvcmUiLCJpc0luZmluaXR5T3JOYU4iLCJ3aGl0ZXNwYWNlT3JQbHVzIiwicDEiLCJwMiIsImFic29sdXRlVmFsdWUiLCJjb21wYXJlZFRvIiwiZGVjaW1hbFBsYWNlcyIsImRpdmlkZWRCeSIsImRpdmlkZWRUb0ludGVnZXJCeSIsImlkaXYiLCJleHBvbmVudGlhdGVkQnkiLCJoYWxmIiwiaXNNb2RFeHAiLCJuSXNCaWciLCJuSXNOZWciLCJuSXNPZGQiLCJpc0ludGVnZXIiLCJtb2QiLCJ0aW1lcyIsImludGVnZXJWYWx1ZSIsImlzRXF1YWxUbyIsImVxIiwiaXNHcmVhdGVyVGhhbiIsImlzR3JlYXRlclRoYW5PckVxdWFsVG8iLCJndGUiLCJpc0xlc3NUaGFuIiwiaXNMZXNzVGhhbk9yRXF1YWxUbyIsImx0ZSIsImlzTmVnYXRpdmUiLCJpc1Bvc2l0aXZlIiwiaXNaZXJvIiwibWludXMiLCJ4TFR5IiwieGUiLCJ5ZSIsIm1vZHVsbyIsIm11bHRpcGxpZWRCeSIsInhjTCIsInljTCIsInlsbyIsInloaSIsInpjIiwic3FydEJhc2UiLCJuZWdhdGVkIiwic2hpZnRlZEJ5Iiwic3F1YXJlUm9vdCIsInJlcCIsInRvRm9ybWF0IiwiZzEiLCJnMiIsImludFBhcnQiLCJmcmFjdGlvblBhcnQiLCJpc05lZyIsImludERpZ2l0cyIsInRvRnJhY3Rpb24iLCJtZCIsImQwIiwiZDEiLCJkMiIsImV4cCIsIm4wIiwibjEiLCJ0b051bWJlciIsInRvUHJlY2lzaW9uIiwiZm9yIiwiZGJfMSIsInBsYXllcl8xIiwid2FpdF8xIiwiRVJSX0dFVF9TQ0FUVEVSX0ZBSUxFRCIsIkVSUl9HRVRfSURFTlRJVFlfRkFJTEVEIiwiRVJSX0xPR09VVF9GQUlMRUQiLCJFUlJfQ09ORl9OT1RfRk9VTkQiLCJTY2F0dGVyUGxheWVyIiwiX25ldHdvcmtzIiwiaWRlbnRpdHlSZWNlaXZlciIsInN0b3JhZ2UiLCJuZXR3b3JrX25hbWUiLCJsYW5nIiwiX2Vvc0NsaWVudCIsIm5ldE5hbWUiLCJuZXRDb25mIiwic3dpdGNoTmV0d29yayIsInNldE5ldENvbmYiLCJzY2F0dGVyIiwiZ2V0U2NhdHRlckFzeW5jIiwibWF4VHJ5IiwibG9naW4iLCJsb2dvdXQiLCJmb3JnZXRJZGVudGl0eSIsImVycl8xIiwicHJvdG9jb2wiLCJyZWNlaXZlSW5zdGFuY2VPckVycm9yIiwiaWRlbnRpdHlfIiwiaWRlbnRpdHkiLCJzY2F0dGVyXyIsIm9yaWdpbkNoYWluSUQiLCJjaGFpbklEIiwiZmluZCIsImFjYyIsImJsb2NrY2hhaW4iLCJnZXRQdWJLZXlzIiwiZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlIiwiJGV4cG9ydCIsInJlZGVmaW5lIiwiJGl0ZXJDcmVhdGUiLCJzZXRUb1N0cmluZ1RhZyIsIklURVJBVE9SIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsIkYiLCJjdHgiLCJvd24iLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsIkMiLCJ2aXJ0dWFsIiwiUiIsIlUiLCJpcyIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjb250ZW50V2luZG93IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwidG9JT2JqZWN0IiwibmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNyeXB0Iiwibm9uY2UiLCJ0b0xvbmdPYmoiLCJlYnVmIiwiZW5jcnlwdGlvbl9rZXkiLCJpdiIsInRvQmluYXJ5QnVmZmVyIiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2IiwiY3J5cHRvSnNEZWNyeXB0IiwiY2lwaGVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJjcnlwdG9Kc0VuY3J5cHQiLCJlbmNyeXB0IiwidW5pcXVlX25vbmNlX2VudHJvcHkiLCJsb25nIiwib3IiLCJ1bmlxdWVOb25jZSIsImRlY3J5cHQiLCJpc0xvbmciLCJtc0NyeXB0byIsInJhd0J5dGVzIiwibW9kZU1vZHVsZXMiLCJFQ0IiLCJDQkMiLCJDRkIiLCJDRkI4IiwiQ0ZCMSIsIk9GQiIsIkNUUiIsIkdDTSIsIm1vZGVzIiwiaW5jcjMyIiwiZ2V0QmxvY2siLCJfY2lwaGVyIiwiX3ByZXYiLCJjaHVua051bSIsIl9jYWNoZSIsImFlcyIsIkdIQVNIIiwiU3RyZWFtQ2lwaGVyIiwiY2siLCJfZ2hhc2giLCJfZmluSUQiLCJnaGFzaCIsInRvUGFkIiwiaXZCaXRzIiwidGFpbCIsImNhbGNJdiIsIl9zZWNDYWNoZSIsIl9kZWNyeXB0IiwiX2FsZW4iLCJfbW9kZSIsIl9hdXRoVGFnIiwiX2NhbGxlZCIsInJ1bXAiLCJ4b3JUZXN0IiwiRUUiLCJkZXN0Iiwib25kYXRhIiwicGF1c2UiLCJvbmRyYWluIiwicmVzdW1lIiwiX2lzU3RkaW8iLCJvbmNsb3NlIiwiZGlkT25FbmQiLCJvbmVycm9yIiwiY2xlYW51cCIsIlJlYWRhYmxlU3RhdGUiLCJFRWxpc3RlbmVyQ291bnQiLCJkZWJ1Z1V0aWwiLCJkZWJ1Z2xvZyIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsIl9yZWFkIiwicmVhZGFibGVBZGRDaHVuayIsImFkZFRvRnJvbnQiLCJza2lwQ2h1bmtDaGVjayIsImVtaXRSZWFkYWJsZSIsIm9uRW9mQ2h1bmsiLCJjaHVua0ludmFsaWQiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJuZWVkTW9yZURhdGEiLCJ1bnNoaWZ0IiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsIk1BWF9IV00iLCJob3dNdWNoVG9SZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsInNoaWZ0IiwiaGFzU3RyaW5ncyIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmZpbmlzaCIsImNsZWFuZWRVcCIsInBpcGVPbkRyYWluIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsImV2ZW50IiwiZGVzdHMiLCJldiIsInBhdXNlZCIsIl9mcm9tTGlzdCIsImVtaXRFcnJvck5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIl90cmFuc2Zvcm1TdGF0ZSIsImFmdGVyVHJhbnNmb3JtIiwidHMiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNodW5rIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJmbHVzaCIsIl90aGlzMiIsInBhc3N3b3JkIiwic2FsdCIsImtleUJpdHMiLCJpdkxlbiIsImtleUxlbiIsInRtcCIsInVzZWQiLCJrZXlTdGFydCIsIml2U3RhcnQiLCJfZmluYWxpemVkIiwidGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyIiwiVEhSRUUiLCJjdXJ2ZSIsIl96SW52IiwibW9kSW52ZXJzZSIsInpJbnYiLCJvdGhlciIsInNpZ251bSIsIngxIiwieTEiLCJ1IiwidHdpY2UiLCJpbmZpbml0eSIsInYyIiwic3F1YXJlIiwidjMiLCJ4MXYyIiwienUyIiwieDMiLCJ5MyIsInozIiwieTF6MSIsInkxc3F6MSIsInciLCJuZWciLCJiaXRMZW5ndGgiLCJoQml0IiwidGVzdEJpdCIsImVCaXQiLCJtdWx0aXBseVR3byIsImJvdGgiLCJqQml0Iiwia0JpdCIsImFmZmluZVkiLCJwTGVuZ3RoIiwiaXNFdmVuIiwicG9pbnRGcm9tWCIsIl9fYmlnaSIsImNoZWNrX3ZlciIsImFtIiwiREIiLCJETSIsIkRWIiwiRlYiLCJGMSIsIkJJX0ZQIiwiRjIiLCJyciIsInZ2IiwiQklfUk0iLCJCSV9SQyIsImludDJjaGFyIiwiaW50QXQiLCJuYnYiLCJmcm9tSW50IiwibmJpdHMiLCJDbGFzc2ljIiwiTW9udGdvbWVyeSIsIm1wIiwiaW52RGlnaXQiLCJtcGwiLCJtcGgiLCJ1bSIsIm10MiIsIm9wX2FuZCIsIm9wX29yIiwib3BfeG9yIiwib3BfYW5kbm90IiwibGJpdCIsImNiaXQiLCJOdWxsRXhwIiwibk5vcCIsIkJhcnJldHQiLCJyMiIsInEzIiwiZGxTaGlmdFRvIiwibXUiLCJkaXZpZGUiLCJjb252ZXJ0IiwicmV2ZXJ0IiwicmVkdWNlIiwiZGl2UmVtVG8iLCJtdWxUbyIsIm11bHRpcGx5VG8iLCJzcXJUbyIsInNxdWFyZVRvIiwiWkVSTyIsInN1YlRvIiwidTAiLCJjbGFtcCIsImRyU2hpZnRUbyIsImZyb21SYWRpeCIsIm1pIiwic2giLCJsU2hpZnRUbyIsImJzIiwiY2JzIiwiYm0iLCJkcyIsInJTaGlmdFRvIiwicG0iLCJwdCIsIm5zaCIsInlzIiwieTAiLCJ5dCIsInFkIiwidG9SYWRpeCIsImttIiwibW9kUG93SW50IiwibXVsdGlwbHlVcHBlclRvIiwibXVsdGlwbHlMb3dlclRvIiwiZEFkZE9mZnNldCIsImxvd3ByaW1lcyIsImxwbGltIiwiY2h1bmtTaXplIiwiaW50VmFsdWUiLCJkTXVsdGlwbHkiLCJiaXR3aXNlVG8iLCJpc1Byb2JhYmxlUHJpbWUiLCJuZXh0Qnl0ZXMiLCJvcCIsImNoYW5nZUJpdCIsImFkZFRvIiwibW9kSW50IiwibWlsbGVyUmFiaW4iLCJnZXRMb3dlc3RTZXRCaXQiLCJiYXNlcyIsIm1vZFBvdyIsImJ5dGVWYWx1ZSIsInNob3J0VmFsdWUiLCJhbmROb3QiLCJub3QiLCJiaXRDb3VudCIsInNldEJpdCIsImNsZWFyQml0IiwiZmxpcEJpdCIsImRpdmlkZUFuZFJlbWFpbmRlciIsImsxIiwiaXMxIiwiYWMiLCJnY2QiLCJHeCIsIkd5IiwicE92ZXJGb3VyIiwiYmV0YSIsImlzT25DdXJ2ZSIsImxocyIsInJocyIsInZhbGlkYXRlIiwiblEiLCJ6bCIsInpyIiwic2wiLCJzciIsImhyIiwiZm4xIiwiZm4yIiwiZm4zIiwiZm40IiwiZm41Iiwid29yZHMiLCJhbCIsImJsIiwiY2wiLCJkbCIsImVsIiwiYXIiLCJiciIsImNyIiwiZHIiLCJ0bCIsImFsZ29yaXRobSIsIkFsZ29yaXRobSIsInNoYTIyNCIsInNoYTM4NCIsIksiLCJTaGEyNTYiLCJpbml0IiwiX3ciLCJtYWoiLCJzaWdtYTAiLCJzaWdtYTEiLCJnYW1tYTAiLCJnYW1tYTEiLCJfZiIsIl9nIiwiX2giLCJUMSIsIlQyIiwiSCIsIlNoYTUxMiIsIkNoIiwieGwiLCJHYW1tYTAiLCJHYW1tYTBsIiwiR2FtbWExIiwiR2FtbWExbCIsImdldENhcnJ5IiwiX2FoIiwiX2JoIiwiX2NoIiwiX2RoIiwiX2VoIiwiX2ZoIiwiX2doIiwiX2hoIiwiX2FsIiwiX2JsIiwiX2NsIiwiX2RsIiwiX2VsIiwiX2ZsIiwiX2dsIiwiX2hsIiwiYWgiLCJiaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJmbCIsImdsIiwieGgiLCJnYW1tYTBsIiwiZ2FtbWExbCIsIldpN2giLCJXaTdsIiwiV2kxNmgiLCJXaTE2bCIsIldpbCIsIldpaCIsIm1hamgiLCJtYWpsIiwic2lnbWEwaCIsInNpZ21hMGwiLCJzaWdtYTFoIiwic2lnbWExbCIsIktpaCIsIktpbCIsImNoaCIsImNobCIsInQxbCIsInQxaCIsInQybCIsInQyaCIsIndyaXRlSW50NjRCRSIsImVjZHNhIiwidmVyaWZ5IiwidmVyaWZ5SGFzaCIsImRhdGFTaGEyNTYiLCJyZWNvdmVyIiwicmVjb3Zlckhhc2giLCJyZWNvdmVyUHViS2V5Iiwic2lnbmF0dXJlQ2FjaGUiLCJ2ZXJpZnlIZXgiLCJ2ZXJpZnlCdWZmZXIiLCJyZWNvdmVyUHVibGljS2V5IiwicmVjb3ZlclB1YmxpY0tleUZyb21CdWZmZXIiLCJzaWduSGFzaCIsImRlciIsImVjc2lnbmF0dXJlIiwibGVuUiIsImxlblMiLCJ0b0RFUiIsImNhbGNQdWJLZXlSZWNvdmVyeVBhcmFtIiwiYXBpR2VuIiwicHJvY2Vzc0FyZ3MiLCJkZWZQYXJhbXMiLCJtZXRob2ROYW1lIiwib3B0aW9uc0Zvcm1hdHRlciIsInBhcmFtcyIsImV4cGVjdGVkQXJnQ291bnQiLCJjYWxsYmFja0FyZyIsInJldHVyblByb21pc2UiLCJkZWZQYXJhbSIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJVTG9uZyIsImVuY29kZU5hbWVIZXgiLCJkZWNvZGVOYW1lSGV4IiwiRGVjaW1hbFN0cmluZyIsImRvdElkeCIsIl9zdHIkc3BsaXQiLCJhbW91bnRNYXRjaCIsInByZWNpc2lvbk1hdGNoIiwicHJlY2lzaW9uU3ltYm9sIiwicHJlY2lzaW9uQW1vdW50Iiwic3ltYm9sTWF0Y2giLCJfc3RyJHNwbGl0MyIsIl9zdHIkc3BsaXQ0JCIsImNvbnRyYWN0UmF3IiwicmFkaXgiLCJjaGFybWFwIiwiY2hhcmlkeCIsImJpdHN0ciIsImJpdGxlbiIsImxlSGV4IiwidG9CeXRlc0xFIiwidG9CeXRlc0JFIiwiYmVIZXgiLCJmaXZlQml0cyIsImZvdXJCaXRzIiwicGFydCIsIm51bSIsImUxIiwiZTIiLCJfdmFsIiwiX3N5bSIsIl9kZWNpbWFsIiwiZGVjaW1hbCIsInZhbFN0ciIsImFzc2V0U3RyIiwiYmxhbmtQb3MiLCJzdHJWYWwiLCJzdHJTeW0iLCJkZWNpbWFsUG9zIiwicGFyc2VGbG9hdCIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsIkF1dGhvcml6YXRpb24iLCJwYXJhbXNTZXJpYWxpemVyIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInN0YXR1c1RleHQiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJjYW5jZWwiLCJhYm9ydCIsImVuaGFuY2VFcnJvciIsIl9fQ0FOQ0VMX18iLCJDYW5jZWwiLCJpbnN0YW5jZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvbWlzaWZ5UmVxdWVzdCIsIm9uc3VjY2VzcyIsInByb21pc2lmeVJlcXVlc3RDYWxsIiwicHJveHlQcm9wZXJ0aWVzIiwiUHJveHlDbGFzcyIsInRhcmdldFByb3AiLCJwcm9wZXJ0aWVzIiwicHJvcCIsInByb3h5UmVxdWVzdE1ldGhvZHMiLCJwcm94eU1ldGhvZHMiLCJwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzIiwiQ3Vyc29yIiwicHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwiLCJJbmRleCIsIl9pbmRleCIsImN1cnNvciIsIl9jdXJzb3IiLCJfcmVxdWVzdCIsIk9iamVjdFN0b3JlIiwiX3N0b3JlIiwiVHJhbnNhY3Rpb24iLCJpZGJUcmFuc2FjdGlvbiIsIl90eCIsImNvbXBsZXRlIiwib25jb21wbGV0ZSIsIm9uYWJvcnQiLCJVcGdyYWRlREIiLCJkYiIsIm9sZFZlcnNpb24iLCJfZGIiLCJJREJJbmRleCIsIklEQkN1cnNvciIsImNyZWF0ZUluZGV4IiwiSURCT2JqZWN0U3RvcmUiLCJvYmplY3RTdG9yZSIsIklEQlRyYW5zYWN0aW9uIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJJREJEYXRhYmFzZSIsImZ1bmNOYW1lIiwidG9BcnJheSIsIm5hdGl2ZU9iamVjdCIsImdldEFsbCIsInF1ZXJ5IiwiaXRlbXMiLCJpdGVyYXRlQ3Vyc29yIiwiY29udGludWUiLCJ1cGdyYWRlQ2FsbGJhY2siLCJpbmRleGVkREIiLCJvbnVwZ3JhZGVuZWVkZWQiLCJkZWxldGUiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwidXNlckFnZW50IiwiZW9zanMiLCJlb3Nqc19lY2MiLCJpZGIiLCJlb3NwbGF5ZXIiLCJlb3NOb2RlQ29uZmlncyIsIlNpZ25QbGF5ZXIiLCJSZWFkaW5nUGxheWVyIiwiaGFkUnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIm9sZFJ1bnRpbWUiLCJPcCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImluTW9kdWxlIiwicnVudGltZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwic2V0UHJvdG90eXBlT2YiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJpdGVyIiwiQ29udGV4dCIsInNraXBUZW1wUmVzZXQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIml0ZXJhYmxlIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJ1bndyYXBwZWQiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJ0b0ludGVnZXIiLCJUT19TVFJJTkciLCJhRnVuY3Rpb24iLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImZyb21JbmRleCIsImRvY3VtZW50RWxlbWVudCIsIk9iamVjdFByb3RvIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJfayIsIkFyZ3VtZW50cyIsIkRFU0NSSVBUT1JTIiwiTUVUQSIsIktFWSIsIiRmYWlscyIsIndrcyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QRCIsImdPUE4iLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJEIiwicHJvdG9EZXNjIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJzeW1ib2xzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsInNlZWRQcml2YXRlIiwiaXNWYWxpZFB1YmxpYyIsImlzVmFsaWRQcml2YXRlIiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsInRyaXBsZXRUb0Jhc2U2NCIsIm91dHB1dCIsIl9faXNMb25nX18iLCJJTlRfQ0FDSEUiLCJVSU5UX0NBQ0hFIiwiY2FjaGVkT2JqIiwiVVpFUk8iLCJUV09fUFdSXzY0X0RCTCIsIk1BWF9VTlNJR05FRF9WQUxVRSIsIlRXT19QV1JfNjNfREJMIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiVFdPX1BXUl8zMl9EQkwiLCJwb3dfZGJsIiwicmFkaXhUb1Bvd2VyIiwicG93ZXIiLCJmcm9tVmFsdWUiLCJUV09fUFdSXzE2X0RCTCIsIlRXT19QV1JfMjQiLCJVT05FIiwiTkVHX09ORSIsIkxvbmdQcm90b3R5cGUiLCJyYWRpeExvbmciLCJyZW0xIiwicmVtRGl2IiwiZGlnaXRzIiwiZ2V0SGlnaEJpdHMiLCJnZXRIaWdoQml0c1Vuc2lnbmVkIiwiZ2V0TG93Qml0cyIsImdldExvd0JpdHNVbnNpZ25lZCIsImdldE51bUJpdHNBYnMiLCJub3RFcXVhbHMiLCJuZXEiLCJsZXNzVGhhbiIsImNvbXAiLCJsZXNzVGhhbk9yRXF1YWwiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuT3JFcXVhbCIsInRoaXNOZWciLCJvdGhlck5lZyIsImFkZGVuZCIsImE0OCIsImEzMiIsImExNiIsImEwMCIsImI0OCIsImIzMiIsImIxNiIsImM0OCIsImMzMiIsImMxNiIsImMwMCIsInN1YnRyYWhlbmQiLCJtdWx0aXBsaWVyIiwiYjAwIiwiZGl2aXNvciIsImFwcHJveCIsInNocnUiLCJzaHIiLCJzaGwiLCJhcHByb3hSZXMiLCJhcHByb3hSZW0iLCJudW1CaXRzIiwidG9CeXRlcyIsImxlIiwiY2lwaGVycyIsImRlY2lwaGVycyIsImNyZWF0ZUNpcGhlciIsIkNpcGhlciIsIkNpcGhlcml2IiwiY3JlYXRlRGVjaXBoZXIiLCJEZWNpcGhlciIsIkRlY2lwaGVyaXYiLCJsaXN0Q2lwaGVycyIsImdldENpcGhlcnMiLCJNT0RFUyIsIkF1dGhDaXBoZXIiLCJlYnRrIiwiU3BsaXR0ZXIiLCJfYXV0b3BhZGRpbmciLCJ0aGluZyIsIlBBRERJTkciLCJzdWl0ZSIsInNldFRvIiwicGFkQnVmZiIsImVuY3J5cHRTdGFydCIsImVuY3J5cHRCeXRlIiwiYnl0ZVBhcmFtIiwic2hpZnRJbiIsImNvcHlCdWZmZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJjdXN0b20iLCJzY29wZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJhdHRhY2hFdmVudCIsImluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiaHRtbCIsInJlbW92ZUNoaWxkIiwiaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbiIsInRhc2siLCJsb2NhbFN0b3JhZ2UiLCJaRVJPRVMiLCJmcm9tQXJyYXkiLCJfbXVsdGlwbHkiLCJsc2JWaSIsIlZpIiwiWmkiLCJhYmwiLCJfbGFzdCIsInBhZGRlZCIsInVucGFkIiwiYXV0b1BhZGRpbmciLCJmb3JtYXRSZWdFeHAiLCJvYmplY3RzIiwibm9EZXByZWNhdGlvbiIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwiZGVidWdFbnZpcm9uIiwiZGVidWdzIiwib3B0cyIsInNlZW4iLCJzdHlsaXplIiwic3R5bGl6ZU5vQ29sb3IiLCJkZXB0aCIsImNvbG9ycyIsInNob3dIaWRkZW4iLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGVzIiwicmVjdXJzZVRpbWVzIiwicHJpbWl0aXZlIiwic2ltcGxlIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJhcnJheVRvSGFzaCIsImZvcm1hdEVycm9yIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRQcm9wZXJ0eSIsImZvcm1hdEFycmF5IiwiY3VyIiwibnVtTGluZXNFc3QiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImRlc2MiLCJsaW5lIiwiTk9ERV9ERUJVRyIsInBpZCIsImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJpbnZlcnNlIiwid2hpdGUiLCJncmV5IiwiYmxhY2siLCJibHVlIiwiY3lhbiIsImdyZWVuIiwibWFnZW50YSIsInJlZCIsInllbGxvdyIsInNwZWNpYWwiLCJudW1iZXIiLCJib29sZWFuIiwibnVsbCIsImRhdGUiLCJyZWdleHAiLCJtb250aHMiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsInRpbWVzdGFtcCIsIm9yaWdpbiIsImZyb21CeXRlQXJyYXlVbnNpZ25lZCIsInRvQnl0ZUFycmF5VW5zaWduZWQiLCJmcm9tREVSSW50ZWdlciIsInRvREVSSW50ZWdlciIsInplcm9zIiwicGFkZGluZyIsImN1cnZlcyIsIlNoYSIsInJvdGw1Iiwicm90bDMwIiwiZnQiLCJTaGExIiwicm90bDEiLCJTaGEyMjQiLCJTSEE1MTIiLCJTaGEzODQiLCJMZWdhY3kiLCJtZDUiLCJaRVJPUyIsIkhtYWMiLCJibG9ja3NpemUiLCJfYWxnIiwiaXBhZCIsIl9pcGFkIiwib3BhZCIsIl9vcGFkIiwiYmFzZXgiLCJBTFBIQUJFVF9NQVAiLCJMRUFERVIiLCJkZWNvZGVVbnNhZmUiLCJlbmZvcmNlVHlwZSIsIkVDU2lnbmF0dXJlIiwiZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSyIsImNoZWNrU2lnIiwidmVyaWZ5UmF3IiwidTEiLCJ1MiIsImlzWU9kZCIsIm5SIiwiZU5lZyIsInJJbnYiLCJOX09WRVJfVFdPIiwickJhIiwic0JhIiwic2VxdWVuY2UiLCJ0b0NvbXBhY3QiLCJ0b1NjcmlwdFNpZ25hdHVyZSIsImhhc2hUeXBlIiwiaGFzaFR5cGVCdWZmZXIiLCJwYXJzZUNvbXBhY3QiLCJmcm9tREVSIiwickxlbiIsInNMZW4iLCJyQiIsInNCIiwicGFyc2VTY3JpcHRTaWduYXR1cmUiLCJoYXNoVHlwZU1vZCIsIkFlcyIsImtleV91dGlscyIsIkJOIiwiYnl0ZWJ1ZiIsIl9zdHJpbmciLCJ2ZWN0b3IiLCJzb3J0ZWQiLCJfdmVjdG9yIiwib3B0aW9uYWwiLCJfb3B0aW9uYWwiLCJfdGltZTIiLCJhbm5vdGF0aW9uIiwiX21hcCIsIl9zdGF0aWNfdmFyaWFudCIsImZpeGVkX3N0cmluZzE2IiwibWF4TGVuIiwiZml4ZWRfc3RyaW5nMzIiLCJmaXhlZF9ieXRlczE2IiwiZml4ZWRfYnl0ZXMyMCIsImZpeGVkX2J5dGVzMjgiLCJmaXhlZF9ieXRlczMyIiwiZml4ZWRfYnl0ZXMzMyIsImZpeGVkX2J5dGVzNjQiLCJpbnRidWYiLCJ1aW50MTYiLCJ1aW50MzIiLCJ1aW50NjQiLCJ1aW50MTI4IiwiYm5idWYiLCJ1aW50MjI0IiwidWludDI1NiIsInVpbnQ1MTIiLCJ2YXJ1aW50MzIiLCJ2YXJpYWJsZSIsImludDgiLCJzaWduZWQiLCJpbnQxNiIsImludDMyIiwiaW50MTI4IiwiaW50MjI0IiwiaW50MjU2IiwiaW50NTEyIiwidmFyaW50MzIiLCJmbG9hdDMyIiwiZmxvYXQiLCJmbG9hdDY0IiwiYWxsVHlwZXMiLCJjcmVhdGVUeXBlUmVkdWNlciIsIl9UeXBlIiwiX1R5cGUyIiwiX1R5cGUyJCIsImNyZWF0ZVR5cGUiLCJfdmFsaWRhdGlvbiRhbm5vdGF0aW8iLCJ0eXBlMSIsInR5cGUyIiwiaXNTZXJpYWxpemVyIiwidmFsdWUyIiwiX2RlZmluZVByb3BlcnR5IiwidHlwZVBvc2l0aW9uIiwiaW50YnVmVHlwZSIsIl9yZWYyJHNpZ25lZCIsInZhbGlkYXRlSW50IiwiX3ZhbGlkYXRpb24kc2lnbmVkIiwiYm4iLCJ0b0FycmF5TGlrZSIsImZyb21Ud29zIiwidG9Ud29zIiwiZmxvYXRQb2ludCIsInNpemVOYW1lIiwiZmIiLCJ0b0lTT1N0cmluZyIsInNwcmVhZCIsImludCIsImlzRW1wdHkiLCJfdmFsaWRhdGlvbiRzaWduZWQyIiwiX3ZhbGlkYXRpb24kYml0cyIsIm1heFNpZ25lZCIsIm1heFVuc2lnbmVkIiwibWluU2lnbmVkIiwiaXNobG4iLCJpc3ViIiwiaW5lZyIsImVuZGlhbiIsImlzQk4iLCJuZWdhdGl2ZSIsIl9pbml0Iiwid29yZFNpemUiLCJwYXJzZUhleCIsInBhcnNlQmFzZSIsImxlZnQiLCJyaWdodCIsIl9pbml0TnVtYmVyIiwiX2luaXRBcnJheSIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJzdHJpcCIsImxpbWJMZW4iLCJsaW1iUG93Iiwid29yZCIsImltdWxuIiwiX2lhZGRuIiwiX2V4cGFuZCIsIl9ub3JtU2lnbiIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsIm5jYXJyeSIsInJ3b3JkIiwibWF4SiIsImdyb3VwQmFzZSIsIm1vZG4iLCJpZGl2biIsIkFycmF5VHlwZSIsInJlcUxlbmd0aCIsImFuZGxuIiwiaXVzaHJuIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiemVyb0JpdHMiLCJpbm90biIsImlhZGRuIiwidGVzdG4iLCJub3RuIiwiaXVvciIsImlvciIsInVvciIsIml1YW5kIiwiaWFuZCIsInVhbmQiLCJpdXhvciIsIml4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJ3Yml0IiwiaWFkZCIsImNvbWIxME11bFRvIiwibWlkIiwiYTAiLCJhbDAiLCJhaDAiLCJhMSIsImFsMSIsImFoMSIsImEyIiwiYWwyIiwiYWgyIiwiYTMiLCJhbDMiLCJhaDMiLCJhNCIsImFsNCIsImFoNCIsImE1IiwiYWw1IiwiYWg1IiwiYTYiLCJhbDYiLCJhaDYiLCJhNyIsImFsNyIsImFoNyIsImE4IiwiYWw4IiwiYWg4IiwiYTkiLCJhbDkiLCJhaDkiLCJiMCIsImJsMCIsImJoMCIsImIxIiwiYmwxIiwiYmgxIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJqdW1ib011bFRvIiwiRkZUTSIsIm11bHAiLCJobmNhcnJ5IiwiYmlnTXVsVG8iLCJtYWtlUkJUIiwiTiIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwicnR3ZGZfIiwiaXR3ZGZfIiwiaWUiLCJybyIsImlvIiwicngiLCJndWVzc0xlbjEzYiIsIm9kZCIsImNvbmp1Z2F0ZSIsIm5vcm1hbGl6ZTEzYiIsIndzIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsInJ3c3QiLCJpd3N0IiwibnJ3cyIsIm5yd3N0Iiwibml3c3QiLCJybXdzIiwibXVsZiIsIm11bG4iLCJzcXIiLCJpc3FyIiwidG9CaXRBcnJheSIsIml1c2hsbiIsImNhcnJ5TWFzayIsIm5ld0NhcnJ5IiwiaGludCIsImV4dGVuZGVkIiwibWFzayIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwiX3dvcmREaXYiLCJiaGkiLCJxaiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsInVtb2QiLCJkaXZSb3VuZCIsImRtIiwiZWdjZCIsIkEiLCJ5cCIsInhwIiwiaW0iLCJqbSIsIl9pbnZtcCIsImNtcG4iLCJpbnZtIiwiYmluY24iLCJ1Y21wIiwiZ3RuIiwiZ3RlbiIsImx0biIsImx0ZW4iLCJlcW4iLCJSZWQiLCJ0b1JlZCIsImNvbnZlcnRUbyIsIl9mb3JjZVJlZCIsImZyb21SZWQiLCJjb252ZXJ0RnJvbSIsImZvcmNlUmVkIiwicmVkQWRkIiwicmVkSUFkZCIsInJlZFN1YiIsInJlZElTdWIiLCJyZWRTaGwiLCJyZWRNdWwiLCJfdmVyaWZ5MiIsInJlZElNdWwiLCJyZWRTcXIiLCJfdmVyaWZ5MSIsInJlZElTcXIiLCJyZWRTcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsImltdWxLIiwiaW5wdXQiLCJvdXRMZW4iLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJpbnYiLCJ3bmQiLCJjdXJyZW50TGVuIiwibW9udCIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwicmVhZEZsb2F0MzJBcnJheSIsIndyaXRlRmxvYXQzMkFycmF5IiwicmVhZEZsb2F0MzJBcnJheVJldiIsIndyaXRlRmxvYXQzMkFycmF5UmV2IiwicmVhZEZsb2F0NjRBcnJheSIsIndyaXRlRmxvYXQ2NEFycmF5IiwicmVhZEZsb2F0NjRBcnJheVJldiIsIndyaXRlRmxvYXQ2NEFycmF5UmV2IiwiaXNCaWdlQ3B1IiwicmVhZFdvcmQiLCJvZmZzIiwiZGlybiIsIndyaXRlV29yZCIsIndyaXRlRG91YmxlV29yZCIsIl9mcDMyIiwiX2IzMiIsIl9mcDY0IiwiX2I2NCIsIl8yZVhwIiwiXzJlWG4iLCJwb3cyIiwiX2xzaGlmdDMyIiwiX3JzaGlmdDUyIiwiaGlnaFdvcmQiLCJsb3dXb3JkIiwibWFudGlzc2EiLCJleHBvbmVudCIsIl9yc2hpZnQyMyIsIl9yc2hpZnQxMjciLCJfcGFydHMiLCJtYW50Iiwibm9ybWFsaXplIiwiY291bnREb3VibGluZ3MiLCJfMmUxOTIiLCJyb3VuZE1hbnRpc3NhIiwic2NhbGUiLCJub3JtIiwiXzJlNTIiLCJpbnN0YWxsIiwiX3VzZUZsb2F0QXJyYXkiLCJ5ZXNubyIsIl91c2luZ0Zsb2F0QXJyYXkiLCJfZ2V0QmlnZUNwdSIsIl9zZXRCaWdlQ3B1IiwiU3RydWN0IiwidHlwZU9mVmFsdWUiLCJmaWVsZCIsIl92YWx1ZSIsIl9rZXkyIiwiX3ZhbHVlMiIsImdldFR5cGVPclN0cnVjdCIsIl9rZXkzIiwidGhpc1N0cnVjdCIsIl92YWx1ZTMiLCJiYXNlU3RydWN0Iiwic3RydWN0UHRyIiwidHlwZUFyZ3MiLCJmaWVsZE5hbWUiLCJ0eXBlYXR0eSIsInBhcnNlVHlwZSIsImFycmF5VHlwZSIsIl90eXBlIiwiYW5uVHlwZXMiLCJhbm5UeXBlTmFtZSIsImFublR5cGUiLCJmaWVsZFN0cnVjdCIsIl90eXBlMiIsIm5hbWVUeXBlIiwiYXJyYXlUcyIsImJhc2VUcyIsIl9rZXk0IiwiX3RoaXNTdHJ1Y3QiLCJfdmFsdWU0IiwiRmllbGQiLCJ0b0J5dGVCdWZmZXIiLCJhbm5vdGF0aW9uTWF0Y2giLCJhcnJheU1hdGNoIiwiZmllbGRPbmUiLCJmaWVsZE9uZU5hbWUiLCJ2MSIsInNlcmlhbGl6ZWRPYmplY3QiLCJmcm9tT2JqZWN0X3N0cnVjdCIsIl9vYmplY3QiLCJ0b09iamVjdF9zdHJ1Y3QiLCJfb2JqZWN0MiIsImNhbWVsQ2FzZSIsImhlbHBlcnMiLCJmZXRjaE1ldGhvZCIsImRlZmluaXRpb24iLCJfbGVuMiIsInByb2Nlc3NlZEFyZ3MiLCJvcHRpb24iLCJib2R5IiwiZmV0Y2hDb25maWd1cmF0aW9uIiwiZmV0Y2giLCJib2R5UmVzcCIsIm9iamVjdFJlc3AiLCJjYWxsYmFja0Vycm9yIiwiZGV0YWlscyIsInVzYWdlIiwiYnJpZWYiLCJyZXN1bHRzIiwiZXJyb3JEZXNjIiwiYXBpR3JvdXAiLCJhcGlNZXRob2QiLCJfbG9vcCIsImhlbHBlciIsIl9oZWxwZXJzJGFwaSIsIl9fd2VicGFja19leHBvcnRzX18iLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiRE9NRXhjZXB0aW9uIiwic3VwcG9ydCIsInNlYXJjaFBhcmFtcyIsImJsb2IiLCJCbG9iIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsInZpZXdDbGFzc2VzIiwibm9ybWFsaXplTmFtZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJoZWFkZXIiLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwib25sb2FkIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiX2JvZHlGb3JtRGF0YSIsImlzRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwicmVqZWN0ZWQiLCJyZWFkQXNUZXh0IiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJvbGRWYWx1ZSIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwidXBjYXNlZCIsIm5vcm1hbGl6ZU1ldGhvZCIsInJlZmVycmVyIiwiZm9ybSIsImRlY29kZVVSSUNvbXBvbmVudCIsImJvZHlJbml0IiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiYWJvcnRlZCIsInhociIsImFib3J0WGhyIiwicmF3SGVhZGVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwb2x5ZmlsbCIsInVwcGVyQ2FzZSIsIm5vQ2FzZSIsImxvY2FsZSIsIm1lcmdlTnVtYmVycyIsIiQxIiwiTEFOR1VBR0VTIiwiYXoiLCJpzIciLCJqzIciLCLEr8yHIiwiacyHzIAiLCJpzIfMgSIsImnMh8yDIiwibG93ZXJDYXNlIiwiTk9OX1dPUkRfUkVHRVhQIiwiQ0FNRUxfQ0FTRV9SRUdFWFAiLCJDQU1FTF9DQVNFX1VQUEVSX1JFR0VYUCIsInJlcGxhY2VtZW50IiwixLAiLCJJIiwiScyHIiwiSiIsIsSuIiwiw4wiLCLDjSIsIsSoIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJjaGVja0Vycm9yIiwiY2hhaW5EYXRlIiwiaGVhZF9ibG9ja190aW1lIiwibGFzdF9pcnJldmVyc2libGVfYmxvY2tfbnVtIiwiZXhwaXJhdGlvbiIsInJlZl9ibG9ja19udW0iLCJyZWZfYmxvY2tfcHJlZml4IiwibWF4X25ldF91c2FnZV93b3JkcyIsIm1heF9jcHVfdXNhZ2VfbXMiLCJkZWxheV9zZWMiLCJjb250ZXh0X2ZyZWVfYWN0aW9ucyIsInNpZ25hdHVyZXMiLCJ0cmFuc2FjdGlvbl9leHRlbnNpb25zIiwicGFyZW50RXJyIiwicGFycmVudFJlcyIsImNsYXNzb2YiLCJpc0l0ZXJhYmxlIiwiZ2V0SXRlcmF0b3IiLCJpdGVyRm4iLCJnZXRJdGVyYXRvck1ldGhvZCIsImFiaUFzeW5jIiwiZm9yY2UiLCJfYWJpIiwiZ2V0QWJpIiwiYWJpQ2FjaGVDb25maWciLCJmY1NjaGVtYSIsImFiaVNjaGVtYSIsIm5ld190eXBlX25hbWUiLCJhYmlUb0ZjU2NoZW1hIiwiTmV0d29yayIsImdlblRyYW5zYWN0aW9uIiwiY29udHJhY3RzIiwiaXNDb250cmFjdEFycmF5IiwiYWJpUHJvbWlzZXMiLCJjYWNoZWRDb2RlIiwiY29udHJhY3RQcm9taXNlcyIsImlzU3RyaW5nQXJyYXkiLCJhbGwiLCJnZW5Db250cmFjdEFjdGlvbnMiLCJtZXJnZXMiLCJwYXJhbSIsInRyTWVzc2FnZUNvbGxlY3RvciIsImNvbnRyYWN0TWVyZ2UiLCJzY2hlbWFGaWVsZHMiLCJnZW5NZXRob2QiLCJ0cmFuc2FjdGlvbkFyZyIsIl9sZW4zIiwib3B0aW9uT3ZlcnJpZGVzIiwibGFzdEFyZyIsIl9fb3B0aW9uT3ZlcnJpZGVzIiwib3B0aW9uRGVmYXVsdHMiLCJub0NhbGxiYWNrIiwiYXV0aG9yaXphdGlvbiIsInByb3ZpZGVkQXV0aCIsImFkZERlZmF1bHRBdXRocyIsImF1dGhBcnJheSIsIl9hdXRoJHNwbGl0IiwiX2F1dGgkc3BsaXQyIiwiX2F1dGgkc3BsaXQyJCIsImZpcnN0QWNjb3VudCIsIm1lc3NhZ2VPbmx5IiwiZmllbGRLZXlzIiwiZjEiLCJ0ckNhbGxiYWNrIiwibWVzc2FnZUxpc3QiLCJtZXNzYWdlQ29sbGVjdG9yIiwib3BGdW5jdGlvbiIsIl9sZW40IiwidmFyaWFibGVOYW1lIiwia2V5MiIsInByb21pc2VDb2xsZWN0b3IiLCJyZXNvbHZlZE1lc3NhZ2VMaXN0IiwiX20kYWN0aW9ucyIsInRyT2JqZWN0IiwiZGVmYXVsdEV4cGlyYXRpb24iLCJvcHRpb25EZWZhdWx0Iiwic3VwZXJDYWxsYmFjayIsInJhd1R4IiwidHhGaWVsZCIsInR4T2JqZWN0IiwidHJhbnNhY3Rpb25JZCIsImNoYWluSWRCdWYiLCJwYWNrZWRDb250ZXh0RnJlZURhdGEiLCJzaWduQnVmIiwiX2NvbnRleHQ0IiwidHJhbnNhY3Rpb25IZWFkZXJzIiwiX2NvbnRleHQyIiwiX2FycjIiLCJfaTIiLCJfY29udGV4dDMiLCJzaWciLCJwYWNrZWRUciIsImNvbXByZXNzaW9uIiwicHVzaFRyYW5zYWN0aW9uIiwicHJvY2Vzc2VkVHJhbnNhY3Rpb24iLCJtb2NrVHJhbnNhY3Rpb24iLCJXcml0ZUFwaSIsInJlc2VydmVGdW5jdGlvbnMiLCJ0eXBlU3RydWN0IiwiX3Byb2Nlc3NBcmdzIiwiZmluZEluZGV4IiwiX3NjaGVtYSR0eXBlIiwiYWNyb2VvcyIsImFsb2hhZW9zIiwiYXR0aWNsYWIiLCJnZW5lcmVvcyIsImJsb2NrbWF0cml4IiwiY2hhaW5yaWZ0IiwiZW9zaW8iLCJjcnlwdG9saW9ucyIsImN5cGhlcmdsYXNzIiwiZW9zNDIiLCJlb3NhbXN0ZXJkYW0iLCJlb3Nhc2lhIiwiZW9zYXV0aG9yaXR5IiwiZW9zYmVhbiIsImVvc2JlaWppbmciLCJlb3NiaXhpbiIsImVvc2NhZmVibG9jayIsImVvc2NhbmFkYSIsImVvc2Nhbm5vbiIsImVvc2NsZWFuZXIiLCJlb3NkYWMiLCJlb3NkdWJsaW4iLCJlb3Nlb3VsIiwiZW9zZmVuZ3dvIiwiZW9zZmxhcmUiLCJnZW5lc2lzX21pbmluZyIsImVvc2RldHJvaXQiLCJtZWV0IiwiZW9zZ3Jhdml0eSIsImVvc2xhb21hbyIsImVvc21ldGFsIiwibWluZXJnYXRlIiwibWluZXJnYXRlX2JwIiwiZW9zbiIsImVvc25ld3lvcmsiLCJlb3Nub2Rlb25lIiwiZW9zcGFjZXgiLCJub2RlcGFjaWZpYyIsImVvc3JpbyIsImVvc3N3ZWRlbiIsImVvc3RpdGFuIiwiZW9zdHJpYmUiLCJlb3N2b2xnYSIsImVvc3dlYiIsImVvc3lzIiwiZnJhbmNlb3MiLCJlb3NibG9ja2J1c3RlciIsImplZGEiLCJvcmFjbGVjaGFpbiIsInNoZW9zIiwiZW9zZ2VuZXZhIiwiZ3JleW1hc3MiLCJ6YmVvcyIsInplcm94ZW9zIiwiZW9zbm9kZSIsImRmdXNlIiwiZGV2IiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiY29sb3IiLCJsYXN0QyIsInNhdmUiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImxvYWQiLCJnZXRJdGVtIiwiX19ud2pzIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJ0YWJsZSIsImxvY2Fsc3RvcmFnZSIsImZvcm1hdHRlcnMiLCJzZWxlY3RDb2xvciIsImNyZWF0ZURlYnVnIiwicHJldlRpbWUiLCJlbmFibGVkIiwiY3VyciIsImNvZXJjZSIsImZvcm1hdHRlciIsImluc3RhbmNlcyIsImRlbGltaXRlciIsInRvTmFtZXNwYWNlIiwic2tpcHMiLCJwbHVyYWwiLCJtc0FicyIsImlzUGx1cmFsIiwiZm10TG9uZyIsImZtdFNob3J0IiwiZGVmYXVsdENvbmZpZ3MiLCJwS2V5IiwiRXZlbnRIYW5kbGVyIiwic3VwcG9ydGVkRXZlbnRzIiwiX2V2ZW50TWFwIiwiX3N1cHBvcnRlZEV2ZW50cyIsIl9kZWZhdWx0Q2IiLCJuZXdFdmVudEtleXMiLCJzZXRFdmVudCIsImZuQ2FsbGJhY2siLCJiaWdudW1iZXJfanNfMSIsImF4aW9zXzEiLCJDaGFpbkhlbHBlciIsIl9lb3MiLCJibG9ja051bU9ySWQiLCJibG9ja19udW1fb3JfaWQiLCJnZXRDb250cmFjdCIsImdldFRhYmxlQWJpIiwidGFibGVOYW1lIiwidGFibGVzIiwiYWJpSnNvblRvQmluIiwiYmluYXJncyIsImdldEFjY291bnQiLCJnZXRQdWJLZXkiLCJhY2NvdW50SW5mbyIsInBlcm1pc3Npb25zIiwicGVybV9uYW1lIiwicmVxdWlyZWRfYXV0aCIsInJlY292ZXJTaWduIiwidmFsaWRhdGVTaWduIiwiYWNjb3VudHNQZXJtaXNzaW9uUGx1Z2lucyIsInJlY292ZXJLZXkiLCJwZXJtIiwia2V5T2JqIiwiYWNjb3VudHNTdHJzIiwicGx1Z2luIiwiZ2V0QWN0aW9uQ291bnQiLCJnZXRBY3Rpb25NYXhTZXEiLCJnZXRSZWNlbnRBY3Rpb25zIiwicmVjZW50QWN0aW9ucyIsImFjdHMiLCJhY2NvdW50X2FjdGlvbl9zZXEiLCJnZXRBY3Rpb25zIiwic3RhcnRQb3MiLCJlbmRQb3MiLCJleF8xIiwibWF4QWN0aW9uSW5kIiwiZ2V0QWxsQWN0aW9uc0JhdGNoIiwiY2JSZWNlaXZlIiwiY29uY3VycmVudCIsInJlcSIsIl9fYXdhaXRlciIsImV4XzIiLCJyYW5nZXMiLCJ0U3RhcnQiLCJ0Um91bmQiLCJiYWxhbmNlcyIsImVuZHNXaXRoIiwiZ2V0Q3VycmVuY3lCYWxhbmNlIiwiY2JFcnJvciIsInRyYW5zT3B0aW9ucyIsIndhaXRUeCIsInR4SUQiLCJtYXhSb3VuZCIsInRpbWVTcGFuTVMiLCJjaGVja1R4IiwiX3R4SUQiLCJnZXRUcmFuc2FjdGlvbiIsInR4IiwiZ2V0VGFibGVBbGwiLCJsb3dlck51bSIsInVwcGVyTnVtIiwibG93ZXIiLCJ1cHBlciIsInBvb2wiLCJSZXF1aXJlIiwiX2wiLCJfdSIsIl9wcm9taXNlIiwiZ2V0VGFibGVSb3dzIiwibG93ZXJfYm91bmQiLCJ1cHBlcl9ib3VuZCIsIl9teUluZCIsIl9taWQiLCJyb3dzIiwiX20iLCJjaGVja1RhYmxlIiwiaW5kZXhfcG9zaXRpb24iLCJjaGVja1RhYmxlTW9yZSIsInByaW1hcnlLZXkiLCJ0byIsInBhcnRSZXN1bHQiLCJjaGVja1RhYmxlUmFuZ2UiLCJjaGVja1RhYmxlSXRlbSIsInVwZGF0ZUF1dGgiLCJ3YWl0cyIsInVwZGF0ZWF1dGgiLCJnZXRUYWJsZUJ5U2NvcGUiLCJob3N0IiwiYmFzZVVSTCIsInBvc3QiLCJyc3AiLCJ0YWJsZV8xIiwiQXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJpc1Nsb3dCdWZmZXIiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsIm5vcm1hbGl6ZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsImlnbm9yZUR1cGxpY2F0ZU9mIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVtb3ZlIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsImtoUmVzXzEiLCJ0cmFuc2NhbFBheWxvYWRfMSIsIktoSGVscGVyIiwiX2NoYWluIiwidHJhbnNlbmQiLCJzeW1ib2xTdHIiLCJzeW1TdHIiLCJjaGVja1Jlc09mIiwiY2hlY2tBc3NldCIsImNoZWNrUmVzSW5mbyIsImNoZWNrSW5mbyIsInBhcnNlVHJhbnNjYWxQYXlsb2FkIiwiYXNzZW1ibGVUcmFuc2NhbFBheWxvYWQiLCJSZXNIZWxwZXIiLCJfY29kZSIsIl9zeW1TdHIiLCJfYWRtaW4iLCJyZXNDb250cmFjdCIsImlzc3VlIiwicmVzaXNzdWUiLCJ1c2VyIiwiYnVybiIsInJlc2J1cm4iLCJ0YWtlIiwicmVzdGFrZSIsImNoYW5nZSIsIlRyYW5zY2FsUGF5bG9hZCIsImFyZ3NfIiwicGFyc2VNZW1vIiwiY2FsbFR5cGUiLCJwb3NDb2wiLCJwb3NFbmQiLCJwb3NQcmV2Iiwic3ltRW9zQ2xpZW50Iiwic3ltR2V0SWRlbnRpdHkiLCJFT1NQcm92aWRlciIsImdldEF1dGgiLCJpbml0RnJvbUNvbmYiLCJlb3NfMSIsIm11bHRpU291cmNlUGxheWVyXzEiLCJfaGVhZF9ibG9ja19udW0iLCJfaGVhZF9yZXRyeV9jb3VudCIsIl9lb3NOb2RlcyIsIl9pZGVudGl0eSIsImNmZyIsIl9fY29uZiIsImNoZWNrTm9kZXMiLCJjaGVja1NwYW5NcyIsInJldHJ5X21heCIsImJsb2NrSGVpZ2h0VG9sZXJhbmNlIiwiaGVhZF9ibG9ja19udW0iLCJyYW5kb21JbmQiLCJhbm90aGVyQ2hhaW5JbmZvIiwiY2hhaW5JbmZvTmV3Iiwibm9kZVN0YXRfMSIsIm1heEZhaWx1cmVSYXRlIiwiZmFpbHVyZVJhdGVUaHJlc2hvbGQiLCJtYXhDb250aW51b3VzRmFpbHVyZSIsImNsZWFuaW5nVGltZUludGVydmFsIiwicmV2aXZhbFRpbWVJbnRlcnZhbCIsInJlc3BvbnNlSW50ZXJ2YWxUaHJlc2hvbGQiLCJyZXNwb25zZUludGVydmFsRGVjbGluZSIsIm1heENhbGxQcm9taXNlRXhjZWVkVGltZSIsIl9vcHRpb25zIiwiX25vZGVTdGF0ZXMiLCJOb2RlU3RhdE1nciIsInNldFRoZUJlc3ROb2RlVG9DdXJyZW50IiwiZ2V0Q3VyTm9kZUNvbmYiLCJfY3VycmVudE5vZGVJbmRleCIsImdldEN1ck5vZGVTdGF0Iiwic2V0SWRlbnRpdHkiLCJjYWxsQ2hhaW4iLCJfY29uY3VycmVudENvdW50Iiwic3RhcnRUaW1lU3RhbXAiLCJfZW5kcG9pbnRVcmwiLCJleCIsIm1hcmtTZW5kU3VjY2VzcyIsIm1hcmtTZW5kRmFpbGVkIiwiZV8xIiwiZW5kUG9pbnRVcmwiLCJOb2RlU3RhdCIsImVycm9yX2NvdW50cyIsInRvdGFsX2NvdW50cyIsImNvbnRpbnVvdXNfZmFpbHVyZSIsInJlc3BvbnNlX2ludGVydmFsIiwicmV2aXZhbF90aW1lIiwiY2xlYW5pbmdfdGltZSIsInJlY29yZF90b3RhbF9jb3VudHMiLCJyZWNvcmRfdG90YWxfc3VjY2VzcyIsInJlY29yZF90b3RhbF9mdXNlIiwicmVjb3JkX3RvdGFsX2ZhaWxlZCIsIl9ub2RlU3RhdHVzIiwiaW5pdE5vZGVTdGF0dXMiLCJtaW5fbm9kZV9pZHgiLCJ0cnlDbGVhbiIsImVycm9yX3JhdGUiLCJyZXZpdmFsIiwibWluX25vZGUiLCJtaW5fZXJyb3JfcmF0ZSIsImdldE5vZGVDb25mIiwiZ2V0Tm9kZVN0YXQiLCJzdGFydFRpbWVzdGFtcCIsInRpbWVEZWx0YSJdLCJtYXBwaW5ncyI6ImFBR0EsSUFBQUEsRUFBQUMsT0FBQSxpQkFDQUEsT0FBQSxpQkFDQSxTQUFBQyxFQUFBQyxJQWlSQSxTQUFBRCxFQUFBQyxHQUNB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OXlFLEVBQUs0eUUsYUFBYzV5RSxFQUFLNnlFLGNBQzFFN3lFLEdBR2Y0eEUsRUFuSEEsR0FBYXhqSCxFQUFBd2pIIiwiZmlsZSI6ImVvc3BsYXllci5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdGlmIChudWxsKSBzY3JpcHQuY3Jvc3NPcmlnaW4gPSBudWxsO1xuIFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkge1xuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0aWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdH1cbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcbiBcdFx0XHRcdFx0cmVqZWN0KFxuIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbiBcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcbiBcdFx0XHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiYzU4NjE3NjgxOTZiYzc3NzVmNTNcIjtcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIiAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRcdGlmIChtb2RlICYgMSkgdmFsdWUgPSBmbih2YWx1ZSk7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcbiBcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuIFx0XHRcdFx0XHRpZDogaWRcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDEyMSkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTIxKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gY29tcGFyZSBhbmQgaXNCdWZmZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcbi8vIG9yaWdpbmFsIG5vdGljZTpcblxuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKHkgPCB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBpc0J1ZmZlcihiKSB7XG4gIGlmIChnbG9iYWwuQnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIoYik7XG4gIH1cbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcik7XG59XG5cbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XG5cbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbygpIHt9Lm5hbWUgPT09ICdmb28nO1xufSgpKTtcbmZ1bmN0aW9uIHBUb1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbn1cbmZ1bmN0aW9uIGlzVmlldyhhcnJidWYpIHtcbiAgaWYgKGlzQnVmZmVyKGFycmJ1ZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGFycmJ1Zik7XG4gIH1cbiAgaWYgKCFhcnJidWYpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGFycmJ1ZiBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGFycmJ1Zi5idWZmZXIgJiYgYXJyYnVmLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLy8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5mdW5jdGlvbiBnZXROYW1lKGZ1bmMpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuICAgIHJldHVybiBmdW5jLm5hbWU7XG4gIH1cbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdO1xufVxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IGdldE5hbWUoc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufTtcblxuLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3JcbnV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcbiAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuZnVuY3Rpb24gaW5zcGVjdChzb21ldGhpbmcpIHtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcbiAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHNvbWV0aGluZyk7XG4gIH1cbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XG4gIHZhciBuYW1lID0gcmF3bmFtZSA/ICc6ICcgKyByYXduYW1lIDogJyc7XG4gIHJldHVybiAnW0Z1bmN0aW9uJyArICBuYW1lICsgJ10nO1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG4gIHJldHVybiB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuYWN0dWFsKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5leHBlY3RlZCksIDEyOCk7XG59XG5cbi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG4vLyB1bmRlcnN0b29kIGJ5IHRoZSBzcGVjLiBJbXBsZW1lbnRhdGlvbnMgb3Igc3ViIG1vZHVsZXMgY2FuIHBhc3Ncbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcbi8vIGlnbm9yZWQuXG5cbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuICBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xuICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cbiAgfSk7XG59XG5cbi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuYXNzZXJ0LmZhaWwgPSBmYWlsO1xuXG4vLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIWd1YXJkLlxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XG4vLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuLy8gbWVzc2FnZV9vcHQpOy4gVG8gdGVzdCBzdHJpY3RseSBmb3IgdGhlIHZhbHVlIHRydWUsIHVzZVxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxuXG5mdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xufVxuYXNzZXJ0Lm9rID0gb2s7XG5cbi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuLy8gPT0uXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcbn07XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT0nLCBhc3NlcnQubm90RXF1YWwpO1xuICB9XG59O1xuXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cbi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcFN0cmljdEVxdWFsJywgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICYmIGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBjb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQpID09PSAwO1xuXG4gIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcbiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxuICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBzdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcbiAgLy8gQXJyYXlCdWZmZXJzIGluIGEgQnVmZmVyIGVhY2ggdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2VcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcbiAgLy8gY29tcGFyaXNvbnMgZm9yIEZsb2F0KkFycmF5cywgdGhvdWdoLCBzaW5jZSBlLmcuICswID09PSAtMCBidXQgdGhlaXJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxuICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICBwVG9TdHJpbmcoYWN0dWFsKSA9PT0gcFRvU3RyaW5nKGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYWN0dWFsLmJ1ZmZlciksXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICE9PSBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbWVtb3MgPSBtZW1vcyB8fCB7YWN0dWFsOiBbXSwgZXhwZWN0ZWQ6IFtdfTtcblxuICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG4gICAgaWYgKGFjdHVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5hY3R1YWwucHVzaChhY3R1YWwpO1xuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuXG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmICh1dGlsLmlzUHJpbWl0aXZlKGEpIHx8IHV0aWwuaXNQcmltaXRpdmUoYikpXG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIGlmIChzdHJpY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xuICB2YXIgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChhSXNBcmdzKSB7XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiLCBzdHJpY3QpO1xuICB9XG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XG4gIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIHZhciBrZXksIGk7XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT09JywgYXNzZXJ0LnN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXG4vLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBhc3NlcnQubm90U3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWQpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUuICBUaGUgaW5zdGFuY2VvZiBjaGVjayBkb2Vzbid0IHdvcmsgZm9yIGFycm93IGZ1bmN0aW9ucy5cbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcbiAgdmFyIGVycm9yO1xuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFjdHVhbDtcblxuICBpZiAodHlwZW9mIGJsb2NrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJibG9ja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XG4gICAgZXhwZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgYWN0dWFsID0gX3RyeUJsb2NrKGJsb2NrKTtcblxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcbiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIHZhciB1c2VyUHJvdmlkZWRNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnO1xuICB2YXIgaXNVbndhbnRlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiB1dGlsLmlzRXJyb3IoYWN0dWFsKTtcbiAgdmFyIGlzVW5leHBlY3RlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgIWV4cGVjdGVkO1xuXG4gIGlmICgoaXNVbndhbnRlZEV4Y2VwdGlvbiAmJlxuICAgICAgdXNlclByb3ZpZGVkTWVzc2FnZSAmJlxuICAgICAgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8XG4gICAgICBpc1VuZXhwZWN0ZWRFeGNlcHRpb24pIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcbiAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcbi8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3ModHJ1ZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcbn07XG5cbi8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnLi9iaWdpJylcblxuLy9hZGRvbnNcbnJlcXVpcmUoJy4vY29udmVydCcpXG5cbm1vZHVsZS5leHBvcnRzID0gQmlnSW50ZWdlciIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgaWYgKHRoaXMuX2ZpbmFsKSB7XG4gICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWxcbiAgICB0aGlzLl9maW5hbCA9IG51bGxcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYylcbiAgfVxuXG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSByZXR1cm4gdGhpc1xuXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG5cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9XG5cbiAgZG9uZShlcnIpXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMClcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbikge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cblxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuXG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciBjcmVhdGVIbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKTtcblxuLyoqIEBuYW1lc3BhY2UgaGFzaCAqL1xuXG4vKiogQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YVxuICAgIEBhcmcge3N0cmluZ30gW3Jlc3VsdEVuY29kaW5nID0gbnVsbF0gLSAnaGV4JywgJ2JpbmFyeScgb3IgJ2Jhc2U2NCdcbiAgICBAcmV0dXJuIHtzdHJpbmd8QnVmZmVyfSAtIEJ1ZmZlciB3aGVuIHJlc3VsdEVuY29kaW5nIGlzIG51bGwsIG9yIHN0cmluZ1xuKi9cbmZ1bmN0aW9uIHNoYTEoZGF0YSwgcmVzdWx0RW5jb2RpbmcpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShkYXRhKS5kaWdlc3QocmVzdWx0RW5jb2RpbmcpO1xufVxuXG4vKiogQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YVxuICAgIEBhcmcge3N0cmluZ30gW3Jlc3VsdEVuY29kaW5nID0gbnVsbF0gLSAnaGV4JywgJ2JpbmFyeScgb3IgJ2Jhc2U2NCdcbiAgICBAcmV0dXJuIHtzdHJpbmd8QnVmZmVyfSAtIEJ1ZmZlciB3aGVuIHJlc3VsdEVuY29kaW5nIGlzIG51bGwsIG9yIHN0cmluZ1xuKi9cbmZ1bmN0aW9uIHNoYTI1NihkYXRhLCByZXN1bHRFbmNvZGluZykge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoZGF0YSkuZGlnZXN0KHJlc3VsdEVuY29kaW5nKTtcbn1cblxuLyoqIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGFcbiAgICBAYXJnIHtzdHJpbmd9IFtyZXN1bHRFbmNvZGluZyA9IG51bGxdIC0gJ2hleCcsICdiaW5hcnknIG9yICdiYXNlNjQnXG4gICAgQHJldHVybiB7c3RyaW5nfEJ1ZmZlcn0gLSBCdWZmZXIgd2hlbiByZXN1bHRFbmNvZGluZyBpcyBudWxsLCBvciBzdHJpbmdcbiovXG5mdW5jdGlvbiBzaGE1MTIoZGF0YSwgcmVzdWx0RW5jb2RpbmcpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhNTEyJykudXBkYXRlKGRhdGEpLmRpZ2VzdChyZXN1bHRFbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIEhtYWNTSEEyNTYoYnVmZmVyLCBzZWNyZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlSG1hYygnc2hhMjU2Jywgc2VjcmV0KS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKTtcbn1cblxuZnVuY3Rpb24gcmlwZW1kMTYwKGRhdGEpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgncm1kMTYwJykudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xufVxuXG4vLyBmdW5jdGlvbiBoYXNoMTYwKGJ1ZmZlcikge1xuLy8gICByZXR1cm4gcmlwZW1kMTYwKHNoYTI1NihidWZmZXIpKVxuLy8gfVxuLy9cbi8vIGZ1bmN0aW9uIGhhc2gyNTYoYnVmZmVyKSB7XG4vLyAgIHJldHVybiBzaGEyNTYoc2hhMjU2KGJ1ZmZlcikpXG4vLyB9XG5cbi8vXG4vLyBmdW5jdGlvbiBIbWFjU0hBNTEyKGJ1ZmZlciwgc2VjcmV0KSB7XG4vLyAgIHJldHVybiBjcnlwdG8uY3JlYXRlSG1hYygnc2hhNTEyJywgc2VjcmV0KS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxuLy8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBzaGExOiBzaGExLFxuICAgIHNoYTI1Njogc2hhMjU2LFxuICAgIHNoYTUxMjogc2hhNTEyLFxuICAgIEhtYWNTSEEyNTY6IEhtYWNTSEEyNTYsXG4gICAgcmlwZW1kMTYwOiByaXBlbWQxNjBcbiAgICAvLyBoYXNoMTYwOiBoYXNoMTYwLFxuICAgIC8vIGhhc2gyNTY6IGhhc2gyNTYsXG4gICAgLy8gSG1hY1NIQTUxMjogSG1hY1NIQTUxMlxufTsiLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLypcclxuIENvcHlyaWdodCAyMDEzLTIwMTQgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuXHJcbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGxpY2Vuc2UgYnl0ZWJ1ZmZlci5qcyAoYykgMjAxNSBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gKiBCYWNraW5nIGJ1ZmZlcjogQXJyYXlCdWZmZXIsIEFjY2Vzc29yOiBVaW50OEFycmF5XHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBcclxuICogc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9ieXRlYnVmZmVyLmpzIGZvciBkZXRhaWxzXHJcbiAqL1xyXG4oZnVuY3Rpb24oZ2xvYmFsLCBmYWN0b3J5KSB7XHJcblxyXG4gICAgLyogQU1EICovIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVtcImFtZFwiXSlcclxuICAgICAgICBkZWZpbmUoW1wibG9uZ1wiXSwgZmFjdG9yeSk7XHJcbiAgICAvKiBDb21tb25KUyAqLyBlbHNlIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZSAmJiBtb2R1bGVbXCJleHBvcnRzXCJdKVxyXG4gICAgICAgIG1vZHVsZVsnZXhwb3J0cyddID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgTG9uZzsgdHJ5IHsgTG9uZyA9IHJlcXVpcmUoXCJsb25nXCIpOyB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeShMb25nKTtcclxuICAgICAgICB9KSgpO1xyXG4gICAgLyogR2xvYmFsICovIGVsc2VcclxuICAgICAgICAoZ2xvYmFsW1wiZGNvZGVJT1wiXSA9IGdsb2JhbFtcImRjb2RlSU9cIl0gfHwge30pW1wiQnl0ZUJ1ZmZlclwiXSA9IGZhY3RvcnkoZ2xvYmFsW1wiZGNvZGVJT1wiXVtcIkxvbmdcIl0pO1xyXG5cclxufSkodGhpcywgZnVuY3Rpb24oTG9uZykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAY2xhc3MgVGhlIHN3aXNzIGFybXkga25pZmUgZm9yIGJpbmFyeSBkYXRhIGluIEphdmFTY3JpcHQuXHJcbiAgICAgKiBAZXhwb3J0cyBCeXRlQnVmZmVyXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gY2FwYWNpdHkgSW5pdGlhbCBjYXBhY2l0eS4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWX0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBub0Fzc2VydCBXaGV0aGVyIHRvIHNraXAgYXNzZXJ0aW9ucyBvZiBvZmZzZXRzIGFuZCB2YWx1ZXMuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIHZhciBCeXRlQnVmZmVyID0gZnVuY3Rpb24oY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhcGFjaXR5ID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgY2FwYWNpdHkgPSBCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBsaXR0bGVFbmRpYW4gPSBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygbm9Bc3NlcnQgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBub0Fzc2VydCA9IEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVDtcclxuICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGNhcGFjaXR5ID0gY2FwYWNpdHkgfCAwO1xyXG4gICAgICAgICAgICBpZiAoY2FwYWNpdHkgPCAwKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgY2FwYWNpdHlcIik7XHJcbiAgICAgICAgICAgIGxpdHRsZUVuZGlhbiA9ICEhbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgICAgICBub0Fzc2VydCA9ICEhbm9Bc3NlcnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCYWNraW5nIEFycmF5QnVmZmVyLlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXlCdWZmZXJ9XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gY2FwYWNpdHkgPT09IDAgPyBFTVBUWV9CVUZGRVIgOiBuZXcgQXJyYXlCdWZmZXIoY2FwYWNpdHkpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVaW50OEFycmF5IHV0aWxpemVkIHRvIG1hbmlwdWxhdGUgdGhlIGJhY2tpbmcgYnVmZmVyLiBCZWNvbWVzIGBudWxsYCBpZiB0aGUgYmFja2luZyBidWZmZXIgaGFzIGEgY2FwYWNpdHkgb2YgYDBgLlxyXG4gICAgICAgICAqIEB0eXBlIHs/VWludDhBcnJheX1cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy52aWV3ID0gY2FwYWNpdHkgPT09IDAgPyBudWxsIDogbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBYnNvbHV0ZSByZWFkL3dyaXRlIG9mZnNldC5cclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjZmxpcFxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNjbGVhclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFya2VkIG9mZnNldC5cclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjbWFya1xyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNyZXNldFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubWFya2VkT2Zmc2V0ID0gLTE7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFic29sdXRlIGxpbWl0IG9mIHRoZSBjb250YWluZWQgZGF0YS4gU2V0IHRvIHRoZSBiYWNraW5nIGJ1ZmZlcidzIGNhcGFjaXR5IHVwb24gYWxsb2NhdGlvbi5cclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjZmxpcFxyXG4gICAgICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNjbGVhclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubGltaXQgPSBjYXBhY2l0eTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hldGhlciB0byB1c2UgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLCBkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBiaWcgZW5kaWFuLlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IGxpdHRsZUVuZGlhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLCBkZWZhdWx0cyB0byBgZmFsc2VgLlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm5vQXNzZXJ0ID0gbm9Bc3NlcnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQnl0ZUJ1ZmZlciB2ZXJzaW9uLlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLlZFUlNJT04gPSBcIjUuMC4xXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXR0bGUgZW5kaWFuIGNvbnN0YW50IHRoYXQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBpdHMgYm9vbGVhbiB2YWx1ZS4gRXZhbHVhdGVzIHRvIGB0cnVlYC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTiA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCaWcgZW5kaWFuIGNvbnN0YW50IHRoYXQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBpdHMgYm9vbGVhbiB2YWx1ZS4gRXZhbHVhdGVzIHRvIGBmYWxzZWAuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLkJJR19FTkRJQU4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgaW5pdGlhbCBjYXBhY2l0eSBvZiBgMTZgLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZID0gMTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZhdWx0IGVuZGlhbmVzcyBvZiBgZmFsc2VgIGZvciBiaWcgZW5kaWFuLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU4gPSBCeXRlQnVmZmVyLkJJR19FTkRJQU47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZhdWx0IG5vIGFzc2VydGlvbnMgZmxhZyBvZiBgZmFsc2VgLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBgTG9uZ2AgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIDY0LWJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIgdmFsdWUuIE1heSBiZSBgbnVsbGAgaWYgTG9uZy5qcyBoYXMgbm90IGJlZW4gbG9hZGVkXHJcbiAgICAgKiAgYW5kIGludDY0IHN1cHBvcnQgaXMgbm90IGF2YWlsYWJsZS5cclxuICAgICAqIEB0eXBlIHs/TG9uZ31cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9sb25nLmpzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuTG9uZyA9IExvbmcgfHwgbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBhbGlhcyBCeXRlQnVmZmVyLnByb3RvdHlwZVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBCeXRlQnVmZmVyUHJvdG90eXBlID0gQnl0ZUJ1ZmZlci5wcm90b3R5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBpbmRpY2F0b3IgdXNlZCB0byByZWxpYWJseSBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnl0ZUJ1ZmZlciBvciBub3QuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5fX2lzQnl0ZUJ1ZmZlcl9fO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCeXRlQnVmZmVyUHJvdG90eXBlLCBcIl9faXNCeXRlQnVmZmVyX19cIiwge1xyXG4gICAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGhlbHBlcnNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshQXJyYXlCdWZmZXJ9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIEVNUFRZX0JVRkZFUiA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0cmluZy5mcm9tQ2hhckNvZGUgcmVmZXJlbmNlIGZvciBjb21waWxlLXRpbWUgcmVuYW1pbmcuXHJcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oLi4ubnVtYmVyKTpzdHJpbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgc291cmNlIGZ1bmN0aW9uIGZvciBhIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzIFN0cmluZyB0byByZWFkIGZyb21cclxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpOm51bWJlcnxudWxsfSBTb3VyY2UgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHkgYG51bGxgIGlmIHRoZXJlIGFyZVxyXG4gICAgICogIG5vIG1vcmUgY2hhcmFjdGVycyBsZWZ0LlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiB0aGUgYXJndW1lbnQgaXMgaW52YWxpZFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHN0cmluZ1NvdXJjZShzKSB7XHJcbiAgICAgICAgdmFyIGk9MDsgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaSA8IHMubGVuZ3RoID8gcy5jaGFyQ29kZUF0KGkrKykgOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZGVzdGluYXRpb24gZnVuY3Rpb24gZm9yIGEgc3RyaW5nLlxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKG51bWJlcj0pOnVuZGVmaW5lZHxzdHJpbmd9IERlc3RpbmF0aW9uIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCB0aGUgbmV4dCBjaGFyIGNvZGUuXHJcbiAgICAgKiAgUmV0dXJucyB0aGUgZmluYWwgc3RyaW5nIHdoZW4gY2FsbGVkIHdpdGhvdXQgYXJndW1lbnRzLlxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHN0cmluZ0Rlc3RpbmF0aW9uKCkge1xyXG4gICAgICAgIHZhciBjcyA9IFtdLCBwcyA9IFtdOyByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBzLmpvaW4oJycpK3N0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNzKTtcclxuICAgICAgICAgICAgaWYgKGNzLmxlbmd0aCArIGFyZ3VtZW50cy5sZW5ndGggPiAxMDI0KVxyXG4gICAgICAgICAgICAgICAgcHMucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjcykpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGNzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBhY2Nlc3NvciB0eXBlLlxyXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBgQnVmZmVyYCB1bmRlciBub2RlLmpzLCBgVWludDhBcnJheWAgcmVzcGVjdGl2ZWx5IGBEYXRhVmlld2AgaW4gdGhlIGJyb3dzZXIgKGNsYXNzZXMpXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuYWNjZXNzb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gVWludDhBcnJheTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFsbG9jYXRlcyBhIG5ldyBCeXRlQnVmZmVyIGJhY2tlZCBieSBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIGNhcGFjaXR5LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBjYXBhY2l0eSBJbml0aWFsIGNhcGFjaXR5LiBEZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5hbGxvY2F0ZSA9IGZ1bmN0aW9uKGNhcGFjaXR5LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCeXRlQnVmZmVyKGNhcGFjaXR5LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25jYXRlbmF0ZXMgbXVsdGlwbGUgQnl0ZUJ1ZmZlcnMgaW50byBvbmUuXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZz59IGJ1ZmZlcnMgQnVmZmVycyB0byBjb25jYXRlbmF0ZVxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfGJvb2xlYW4pPX0gZW5jb2RpbmcgU3RyaW5nIGVuY29kaW5nIGlmIGBidWZmZXJzYCBjb250YWlucyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIixcclxuICAgICAqICBkZWZhdWx0cyB0byBcInV0ZjhcIilcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyIGZvciB0aGUgcmVzdWx0aW5nIEJ5dGVCdWZmZXIuIERlZmF1bHRzXHJcbiAgICAgKiAgdG8ge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzIGZvciB0aGUgcmVzdWx0aW5nIEJ5dGVCdWZmZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9OT0FTU0VSVH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IENvbmNhdGVuYXRlZCBCeXRlQnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24oYnVmZmVycywgZW5jb2RpbmcsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBub0Fzc2VydCA9IGxpdHRsZUVuZGlhbjtcclxuICAgICAgICAgICAgbGl0dGxlRW5kaWFuID0gZW5jb2Rpbmc7XHJcbiAgICAgICAgICAgIGVuY29kaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2FwYWNpdHkgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGk9MCwgaz1idWZmZXJzLmxlbmd0aCwgbGVuZ3RoOyBpPGs7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAoIUJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyKGJ1ZmZlcnNbaV0pKVxyXG4gICAgICAgICAgICAgICAgYnVmZmVyc1tpXSA9IEJ5dGVCdWZmZXIud3JhcChidWZmZXJzW2ldLCBlbmNvZGluZyk7XHJcbiAgICAgICAgICAgIGxlbmd0aCA9IGJ1ZmZlcnNbaV0ubGltaXQgLSBidWZmZXJzW2ldLm9mZnNldDtcclxuICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDApIGNhcGFjaXR5ICs9IGxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhcGFjaXR5ID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ5dGVCdWZmZXIoMCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgdmFyIGJiID0gbmV3IEJ5dGVCdWZmZXIoY2FwYWNpdHksIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpLFxyXG4gICAgICAgICAgICBiaTtcclxuICAgICAgICBpPTA7IHdoaWxlIChpPGspIHtcclxuICAgICAgICAgICAgYmkgPSBidWZmZXJzW2krK107XHJcbiAgICAgICAgICAgIGxlbmd0aCA9IGJpLmxpbWl0IC0gYmkub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAobGVuZ3RoIDw9IDApIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBiYi52aWV3LnNldChiaS52aWV3LnN1YmFycmF5KGJpLm9mZnNldCwgYmkubGltaXQpLCBiYi5vZmZzZXQpO1xyXG4gICAgICAgICAgICBiYi5vZmZzZXQgKz0gbGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYi5saW1pdCA9IGJiLm9mZnNldDtcclxuICAgICAgICBiYi5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIHR5cGUgaXMgYSBCeXRlQnVmZmVyLlxyXG4gICAgICogQHBhcmFtIHsqfSBiYiBCeXRlQnVmZmVyIHRvIHRlc3RcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgaXQgaXMgYSBCeXRlQnVmZmVyLCBvdGhlcndpc2UgYGZhbHNlYFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmlzQnl0ZUJ1ZmZlciA9IGZ1bmN0aW9uKGJiKSB7XHJcbiAgICAgICAgcmV0dXJuIChiYiAmJiBiYltcIl9faXNCeXRlQnVmZmVyX19cIl0pID09PSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgYmFja2luZyBidWZmZXIgdHlwZS5cclxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYEJ1ZmZlcmAgdW5kZXIgbm9kZS5qcywgYEFycmF5QnVmZmVyYCBpbiB0aGUgYnJvd3NlciAoY2xhc3NlcylcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci50eXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5QnVmZmVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogV3JhcHMgYSBidWZmZXIgb3IgYSBzdHJpbmcuIFNldHMgdGhlIGFsbG9jYXRlZCBCeXRlQnVmZmVyJ3Mge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSB0byBgMGAgYW5kIGl0c1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fSB0byB0aGUgbGVuZ3RoIG9mIHRoZSB3cmFwcGVkIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfCFBcnJheUJ1ZmZlcnwhVWludDhBcnJheXxzdHJpbmd8IUFycmF5LjxudW1iZXI+fSBidWZmZXIgQW55dGhpbmcgdGhhdCBjYW4gYmUgd3JhcHBlZFxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfGJvb2xlYW4pPX0gZW5jb2RpbmcgU3RyaW5nIGVuY29kaW5nIGlmIGBidWZmZXJgIGlzIGEgc3RyaW5nIChcImJhc2U2NFwiLCBcImhleFwiLCBcImJpbmFyeVwiLCBkZWZhdWx0cyB0b1xyXG4gICAgICogIFwidXRmOFwiKVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBBIEJ5dGVCdWZmZXIgd3JhcHBpbmcgYGJ1ZmZlcmBcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci53cmFwID0gZnVuY3Rpb24oYnVmZmVyLCBlbmNvZGluZywgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG5vQXNzZXJ0ID0gbGl0dGxlRW5kaWFuO1xyXG4gICAgICAgICAgICBsaXR0bGVFbmRpYW4gPSBlbmNvZGluZztcclxuICAgICAgICAgICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgIGVuY29kaW5nID0gXCJ1dGY4XCI7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmFzZTY0KGJ1ZmZlciwgbGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJoZXhcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tSGV4KGJ1ZmZlciwgbGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnl0ZUJ1ZmZlci5mcm9tQmluYXJ5KGJ1ZmZlciwgbGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1dGY4XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVCdWZmZXIuZnJvbVVURjgoYnVmZmVyLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRlYnVnXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVCdWZmZXIuZnJvbURlYnVnKGJ1ZmZlciwgbGl0dGxlRW5kaWFuKTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJVbnN1cHBvcnRlZCBlbmNvZGluZzogXCIrZW5jb2RpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidWZmZXIgPT09IG51bGwgfHwgdHlwZW9mIGJ1ZmZlciAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYnVmZmVyXCIpO1xyXG4gICAgICAgIHZhciBiYjtcclxuICAgICAgICBpZiAoQnl0ZUJ1ZmZlci5pc0J5dGVCdWZmZXIoYnVmZmVyKSkge1xyXG4gICAgICAgICAgICBiYiA9IEJ5dGVCdWZmZXJQcm90b3R5cGUuY2xvbmUuY2FsbChidWZmZXIpO1xyXG4gICAgICAgICAgICBiYi5tYXJrZWRPZmZzZXQgPSAtMTtcclxuICAgICAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkgeyAvLyBFeHRyYWN0IEFycmF5QnVmZmVyIGZyb20gVWludDhBcnJheVxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKDAsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHsgLy8gQXZvaWQgcmVmZXJlbmNlcyB0byBtb3JlIHRoYW4gb25lIEVNUFRZX0JVRkZFUlxyXG4gICAgICAgICAgICAgICAgYmIuYnVmZmVyID0gYnVmZmVyLmJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGJ1ZmZlci5ieXRlT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgYmIubGltaXQgPSBidWZmZXIuYnl0ZU9mZnNldCArIGJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYmIudmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgeyAvLyBSZXVzZSBBcnJheUJ1ZmZlclxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKDAsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBpZiAoYnVmZmVyLmJ5dGVMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBiYi5idWZmZXIgPSBidWZmZXI7XHJcbiAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgYmIubGltaXQgPSBidWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGJiLnZpZXcgPSBidWZmZXIuYnl0ZUxlbmd0aCA+IDAgPyBuZXcgVWludDhBcnJheShidWZmZXIpIDogbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJ1ZmZlcikgPT09IFwiW29iamVjdCBBcnJheV1cIikgeyAvLyBDcmVhdGUgZnJvbSBvY3RldHNcclxuICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihidWZmZXIubGVuZ3RoLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KTtcclxuICAgICAgICAgICAgYmIubGltaXQgPSBidWZmZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8YnVmZmVyLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgYmIudmlld1tpXSA9IGJ1ZmZlcltpXTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBidWZmZXJcIik7IC8vIE90aGVyd2lzZSBmYWlsXHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyB0aGUgYXJyYXkgYXMgYSBiaXRzZXQuXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PGJvb2xlYW4+fSB2YWx1ZSBBcnJheSBvZiBib29sZWFucyB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYGxlbmd0aGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUJpdFNldCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpXHJcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIEJpdFNldDogTm90IGFuIGFycmF5XCIpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgIGJpdHMgPSB2YWx1ZS5sZW5ndGgsXHJcbiAgICAgICAgICBieXRlcyA9IChiaXRzID4+IDMpLFxyXG4gICAgICAgICAgYml0ID0gMCxcclxuICAgICAgICAgIGs7XHJcblxyXG4gICAgICBvZmZzZXQgKz0gdGhpcy53cml0ZVZhcmludDMyKGJpdHMsb2Zmc2V0KTtcclxuXHJcbiAgICAgIHdoaWxlKGJ5dGVzLS0pIHtcclxuICAgICAgICBrID0gKCEhdmFsdWVbYml0KytdICYgMSkgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgMSkgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgMikgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgMykgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgNCkgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgNSkgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgNikgfFxyXG4gICAgICAgICAgICAoKCEhdmFsdWVbYml0KytdICYgMSkgPDwgNyk7XHJcbiAgICAgICAgdGhpcy53cml0ZUJ5dGUoayxvZmZzZXQrKyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKGJpdCA8IGJpdHMpIHtcclxuICAgICAgICB2YXIgbSA9IDA7IGsgPSAwO1xyXG4gICAgICAgIHdoaWxlKGJpdCA8IGJpdHMpIGsgPSBrIHwgKCghIXZhbHVlW2JpdCsrXSAmIDEpIDw8IChtKyspKTtcclxuICAgICAgICB0aGlzLndyaXRlQnl0ZShrLG9mZnNldCsrKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSBCaXRTZXQgYXMgYW4gYXJyYXkgb2YgYm9vbGVhbnMuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgbGVuZ3RoYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEJpdFNldCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG5cclxuICAgICAgdmFyIHJldCA9IHRoaXMucmVhZFZhcmludDMyKG9mZnNldCksXHJcbiAgICAgICAgICBiaXRzID0gcmV0LnZhbHVlLFxyXG4gICAgICAgICAgYnl0ZXMgPSAoYml0cyA+PiAzKSxcclxuICAgICAgICAgIGJpdCA9IDAsXHJcbiAgICAgICAgICB2YWx1ZSA9IFtdLFxyXG4gICAgICAgICAgaztcclxuXHJcbiAgICAgIG9mZnNldCArPSByZXQubGVuZ3RoO1xyXG5cclxuICAgICAgd2hpbGUoYnl0ZXMtLSkge1xyXG4gICAgICAgIGsgPSB0aGlzLnJlYWRCeXRlKG9mZnNldCsrKTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHgwMSk7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4MDIpO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDA0KTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHgwOCk7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4MTApO1xyXG4gICAgICAgIHZhbHVlW2JpdCsrXSA9ICEhKGsgJiAweDIwKTtcclxuICAgICAgICB2YWx1ZVtiaXQrK10gPSAhIShrICYgMHg0MCk7XHJcbiAgICAgICAgdmFsdWVbYml0KytdID0gISEoayAmIDB4ODApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZihiaXQgPCBiaXRzKSB7XHJcbiAgICAgICAgdmFyIG0gPSAwO1xyXG4gICAgICAgIGsgPSB0aGlzLnJlYWRCeXRlKG9mZnNldCsrKTtcclxuICAgICAgICB3aGlsZShiaXQgPCBiaXRzKSB2YWx1ZVtiaXQrK10gPSAhISgoayA+PiAobSsrKSkgJiAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBieXRlcy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGBsZW5ndGhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEJ5dGVzID0gZnVuY3Rpb24obGVuZ3RoLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyBsZW5ndGggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIitsZW5ndGgrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNsaWNlID0gdGhpcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgICAgIHJldHVybiBzbGljZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSBwYXlsb2FkIG9mIGJ5dGVzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI2FwcGVuZH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ8IUFycmF5QnVmZmVyfCFVaW50OEFycmF5fHN0cmluZ30gc291cmNlIERhdGEgdG8gd3JpdGUuIElmIGBzb3VyY2VgIGlzIGEgQnl0ZUJ1ZmZlciwgaXRzIG9mZnNldHNcclxuICAgICAqICB3aWxsIGJlIG1vZGlmaWVkIGFjY29yZGluZyB0byB0aGUgcGVyZm9ybWVkIHJlYWQgb3BlcmF0aW9uLlxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBlbmNvZGluZyBFbmNvZGluZyBpZiBgZGF0YWAgaXMgYSBzdHJpbmcgKFwiYmFzZTY0XCIsIFwiaGV4XCIsIFwiYmluYXJ5XCIsIGRlZmF1bHRzIHRvIFwidXRmOFwiKVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVCeXRlcyA9IEJ5dGVCdWZmZXJQcm90b3R5cGUuYXBwZW5kO1xyXG5cclxuICAgIC8vIHR5cGVzL2ludHMvaW50OFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGFuIDhiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgdmFyIGNhcGFjaXR5MCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTApXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkwICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkwIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDE7XG4gICAgICAgIHRoaXMudmlld1tvZmZzZXRdID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gOGJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUludDh9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlQnl0ZSA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQ4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYW4gOGJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDFgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZpZXdbb2Zmc2V0XTtcclxuICAgICAgICBpZiAoKHZhbHVlICYgMHg4MCkgPT09IDB4ODApIHZhbHVlID0gLSgweEZGIC0gdmFsdWUgKyAxKTsgLy8gQ2FzdCB0byBzaWduZWRcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiA4Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQ4fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkQnl0ZSA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gOGJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDFgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQ4ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIHZhciBjYXBhY2l0eTEgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MSA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSAxO1xuICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0XSA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGFuIDhiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVpbnQ4fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBhZHZhbmNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDFgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVJbnQ4ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQ4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYW4gOGJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDggPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMStcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZpZXdbb2Zmc2V0XTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiA4Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZFVpbnQ4fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMWAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVUludDggPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50ODtcclxuXHJcbiAgICAvLyB0eXBlcy9pbnRzL2ludDE2XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAxNmJpdCBzaWduZWQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBvciBgdmFsdWVgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MTYgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlIHw9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgIHZhciBjYXBhY2l0eTIgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkyKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MiAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MiA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSAyO1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSAmIDB4RkYwMCkgPj4+IDg7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgdmFsdWUgJiAweDAwRkY7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldF0gICA9ICh2YWx1ZSAmIDB4RkYwMCkgPj4+IDg7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAgdmFsdWUgJiAweDAwRkY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMTZiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVJbnQxNn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBvciBgdmFsdWVgIGlzIG5vdCBhIHZhbGlkIG51bWJlclxyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldGAgaXMgb3V0IG9mIGJvdW5kc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlU2hvcnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDE2Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYG9mZnNldGAgaXMgbm90IGEgdmFsaWQgbnVtYmVyXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBvdXQgb2YgYm91bmRzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDE2ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMiA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzIrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcclxuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCAgXTtcclxuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCsxXSA8PCA4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgODtcclxuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh2YWx1ZSAmIDB4ODAwMCkgPT09IDB4ODAwMCkgdmFsdWUgPSAtKDB4RkZGRiAtIHZhbHVlICsgMSk7IC8vIENhc3QgdG8gc2lnbmVkXHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSAxNmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkSW50MTZ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkU2hvcnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRJbnQxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDE2Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYG9mZnNldGAgb3IgYHZhbHVlYCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQxNiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSAyO1xuICAgICAgICB2YXIgY2FwYWNpdHkzID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MylcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTMgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTMgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gMjtcbiAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAodmFsdWUgJiAweEZGMDApID4+PiA4O1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gIHZhbHVlICYgMHgwMEZGO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXRdICAgPSAodmFsdWUgJiAweEZGMDApID4+PiA4O1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gIHZhbHVlICYgMHgwMEZGO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDE2Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVVaW50MTZ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgMmAgaWYgb21pdHRlZC5cclxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYG9mZnNldGAgb3IgYHZhbHVlYCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVJbnQxNiA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVaW50MTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDE2Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDE2ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMiA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzIrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcclxuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgdmFsdWUgID0gdGhpcy52aWV3W29mZnNldCAgXTtcclxuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCsxXSA8PCA4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgODtcclxuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSAxNmJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRVaW50MTZ9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgYWR2YW5jZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGAyYCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVUludDE2ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDE2O1xyXG5cclxuICAgIC8vIHR5cGVzL2ludHMvaW50MzJcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDMyYml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MzIgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlIHw9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIHZhciBjYXBhY2l0eTQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk0KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NCAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NCA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSA0O1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAodmFsdWUgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKHZhbHVlID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgdmFsdWUgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gKHZhbHVlID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAodmFsdWUgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gIHZhbHVlICAgICAgICAgJiAweEZGO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMzJiaXQgc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVJbnQzMn0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVJbnQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSW50MzI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEludDMyID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcclxuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgMTY7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8ICA4O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgIHZhbHVlICs9IHRoaXMudmlld1tvZmZzZXQrM10gPDwgMjQgPj4+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAgODtcbiAgICAgICAgICAgIHZhbHVlIHw9IHRoaXMudmlld1tvZmZzZXQrM107XG4gICAgICAgICAgICB2YWx1ZSArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlIHw9IDA7IC8vIENhc3QgdG8gc2lnbmVkXHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSAzMmJpdCBzaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkSW50MzJ9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGFkdmFuY2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50MzI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVWludDMyID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgdmFsdWUgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICB2YWx1ZSA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIHZhciBjYXBhY2l0eTUgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk1KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5NSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5NSA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSA0O1xuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAodmFsdWUgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKHZhbHVlID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgdmFsdWUgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gKHZhbHVlID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9ICh2YWx1ZSA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAodmFsdWUgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gIHZhbHVlICAgICAgICAgJiAweEZGO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMzJiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZVVpbnQzMn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVJbnQzMiA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVaW50MzI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDMyID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgNCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzQrXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcclxuICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHZhbHVlICA9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgMTY7XG4gICAgICAgICAgICB2YWx1ZSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8ICA4O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgIHZhbHVlICs9IHRoaXMudmlld1tvZmZzZXQrM10gPDwgMjQgPj4+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgdmFsdWUgfD0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAgODtcbiAgICAgICAgICAgIHZhbHVlIHw9IHRoaXMudmlld1tvZmZzZXQrM107XG4gICAgICAgICAgICB2YWx1ZSArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgMzJiaXQgdW5zaWduZWQgaW50ZWdlci4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciNyZWFkVWludDMyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVJbnQzMiA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVpbnQzMjtcclxuXHJcbiAgICAvLyB0eXBlcy9pbnRzL2ludDY0XHJcblxyXG4gICAgaWYgKExvbmcpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV3JpdGVzIGEgNjRiaXQgc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBMb25nKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyIG9yIExvbmcpXCIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICAgICAgdmFyIGNhcGFjaXR5NiA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHk2KVxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTYgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTYgOiBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0IC09IDg7XG4gICAgICAgICAgICB2YXIgbG8gPSB2YWx1ZS5sb3csXHJcbiAgICAgICAgICAgICAgICBoaSA9IHZhbHVlLmhpZ2g7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9IChsbyA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGxvID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAobG8gPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9ICBsbyAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAoaGkgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChoaSA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGhpID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgaGkgICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCAgXSA9IChoaSA+Pj4gMjQpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGhpID4+PiAxNikgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoaGkgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCszXSA9ICBoaSAgICAgICAgICYgMHhGRjtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAobG8gPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChsbyA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGxvID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgbG8gICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlSW50NjR9LlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVMb25nID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUludDY0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50NjQgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgOCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis4K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxvID0gMCxcclxuICAgICAgICAgICAgICAgIGhpID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgICAgICBsbyAgPSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgIDg7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCAgXTtcbiAgICAgICAgICAgICAgICBsbyArPSB0aGlzLnZpZXdbb2Zmc2V0KzNdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgaGkgID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQgIF07XG4gICAgICAgICAgICAgICAgaGkgKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoaSAgPSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8IDE2O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgIDg7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCszXTtcbiAgICAgICAgICAgICAgICBoaSArPSB0aGlzLnZpZXdbb2Zmc2V0ICBdIDw8IDI0ID4+PiAwO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgbG8gID0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQrM107XG4gICAgICAgICAgICAgICAgbG8gKz0gdGhpcy52aWV3W29mZnNldCAgXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbmV3IExvbmcobG8sIGhpLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRJbnQ2NH0uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRMb25nID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkSW50NjQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgOGAgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQ2NCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgTG9uZykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlciBvciBMb25nKVwiKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gODtcbiAgICAgICAgICAgIHZhciBjYXBhY2l0eTcgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5NylcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHk3ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHk3IDogb2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCAtPSA4O1xuICAgICAgICAgICAgdmFyIGxvID0gdmFsdWUubG93LFxyXG4gICAgICAgICAgICAgICAgaGkgPSB2YWx1ZS5oaWdoO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5saXR0bGVFbmRpYW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAobG8gPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChsbyA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGxvID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAgbG8gICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gKGhpID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMl0gPSAoaGkgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChoaSA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gIGhpICAgICAgICAgJiAweEZGO1xuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQgIF0gPSAoaGkgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsxXSA9IChoaSA+Pj4gMTYpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGhpID4+PiAgOCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrM10gPSAgaGkgICAgICAgICAmIDB4RkY7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gKGxvID4+PiAyNCkgJiAweEZGO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld1tvZmZzZXQrMV0gPSAobG8gPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsyXSA9IChsbyA+Pj4gIDgpICYgMHhGRjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gIGxvICAgICAgICAgJiAweEZGO1xuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSA2NGJpdCB1bnNpZ25lZCBpbnRlZ2VyLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3dyaXRlVWludDY0fS5cclxuICAgICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVUludDY0ID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVVpbnQ2NDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVhZHMgYSA2NGJpdCB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVWludDY0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrOCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBsbyA9IDAsXHJcbiAgICAgICAgICAgICAgICBoaSA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICAgICAgbG8gID0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0KzFdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGxvIHw9IHRoaXMudmlld1tvZmZzZXQgIF07XG4gICAgICAgICAgICAgICAgbG8gKz0gdGhpcy52aWV3W29mZnNldCszXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIGhpICA9IHRoaXMudmlld1tvZmZzZXQrMl0gPDwgMTY7XG4gICAgICAgICAgICAgICAgaGkgfD0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAgODtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0ICBdO1xuICAgICAgICAgICAgICAgIGhpICs9IHRoaXMudmlld1tvZmZzZXQrM10gPDwgMjQgPj4+IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGkgID0gdGhpcy52aWV3W29mZnNldCsxXSA8PCAxNjtcbiAgICAgICAgICAgICAgICBoaSB8PSB0aGlzLnZpZXdbb2Zmc2V0KzJdIDw8ICA4O1xuICAgICAgICAgICAgICAgIGhpIHw9IHRoaXMudmlld1tvZmZzZXQrM107XG4gICAgICAgICAgICAgICAgaGkgKz0gdGhpcy52aWV3W29mZnNldCAgXSA8PCAyNCA+Pj4gMDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgICAgIGxvICA9IHRoaXMudmlld1tvZmZzZXQrMV0gPDwgMTY7XG4gICAgICAgICAgICAgICAgbG8gfD0gdGhpcy52aWV3W29mZnNldCsyXSA8PCAgODtcbiAgICAgICAgICAgICAgICBsbyB8PSB0aGlzLnZpZXdbb2Zmc2V0KzNdO1xuICAgICAgICAgICAgICAgIGxvICs9IHRoaXMudmlld1tvZmZzZXQgIF0gPDwgMjQgPj4+IDA7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG5ldyBMb25nKGxvLCBoaSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIDY0Yml0IHVuc2lnbmVkIGludGVnZXIuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZFVpbnQ2NH0uXHJcbiAgICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVSW50NjQgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRVaW50NjQ7XHJcblxyXG4gICAgfSAvLyBMb25nXHJcblxyXG5cclxuICAgIC8vIHR5cGVzL2Zsb2F0cy9mbG9hdDMyXHJcblxyXG4gICAgLypcclxuICAgICBpZWVlNzU0IC0gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XHJcblxyXG4gICAgIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG5cclxuICAgICBDb3B5cmlnaHQgKGMpIEZlcm9zcyBBYm91a2hhZGlqZWhcclxuXHJcbiAgICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gICAgIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuICAgICBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiAgICAgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4gICAgIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gICAgIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG4gICAgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbiAgICAgYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICAgICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuICAgICBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuICAgICBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuICAgICBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiAgICAgVEhFIFNPRlRXQVJFLlxyXG4gICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIElFRUU3NTQgZmxvYXQgZnJvbSBhIGJ5dGUgYXJyYXkuXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheX0gYnVmZmVyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTEVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtTGVuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbkJ5dGVzXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGllZWU3NTRfcmVhZChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XHJcbiAgICAgICAgdmFyIGUsIG0sXHJcbiAgICAgICAgICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXHJcbiAgICAgICAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXHJcbiAgICAgICAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxyXG4gICAgICAgICAgICBuQml0cyA9IC03LFxyXG4gICAgICAgICAgICBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDAsXHJcbiAgICAgICAgICAgIGQgPSBpc0xFID8gLTEgOiAxLFxyXG4gICAgICAgICAgICBzID0gYnVmZmVyW29mZnNldCArIGldO1xyXG5cclxuICAgICAgICBpICs9IGQ7XHJcblxyXG4gICAgICAgIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xyXG4gICAgICAgIHMgPj49ICgtbkJpdHMpO1xyXG4gICAgICAgIG5CaXRzICs9IGVMZW47XHJcbiAgICAgICAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cclxuXHJcbiAgICAgICAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XHJcbiAgICAgICAgZSA+Pj0gKC1uQml0cyk7XHJcbiAgICAgICAgbkJpdHMgKz0gbUxlbjtcclxuICAgICAgICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxyXG5cclxuICAgICAgICBpZiAoZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBlID0gMSAtIGVCaWFzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKTtcclxuICAgICAgICAgICAgZSA9IGUgLSBlQmlhcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gSUVFRTc1NCBmbG9hdCB0byBhIGJ5dGUgYXJyYXkuXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheX0gYnVmZmVyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMRVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1MZW5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXNcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpZWVlNzU0X3dyaXRlKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XHJcbiAgICAgICAgdmFyIGUsIG0sIGMsXHJcbiAgICAgICAgICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXHJcbiAgICAgICAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXHJcbiAgICAgICAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxyXG4gICAgICAgICAgICBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMCksXHJcbiAgICAgICAgICAgIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKSxcclxuICAgICAgICAgICAgZCA9IGlzTEUgPyAxIDogLTEsXHJcbiAgICAgICAgICAgIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDA7XHJcblxyXG4gICAgICAgIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xyXG5cclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xyXG4gICAgICAgICAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGUgPSBlTWF4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgZS0tO1xyXG4gICAgICAgICAgICAgICAgYyAqPSAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gcnQgLyBjO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xyXG4gICAgICAgICAgICAgICAgZSsrO1xyXG4gICAgICAgICAgICAgICAgYyAvPSAyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcclxuICAgICAgICAgICAgICAgIG0gPSAwO1xyXG4gICAgICAgICAgICAgICAgZSA9IGVNYXg7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcclxuICAgICAgICAgICAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcclxuICAgICAgICAgICAgICAgIGUgPSBlICsgZUJpYXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XHJcbiAgICAgICAgICAgICAgICBlID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cclxuXHJcbiAgICAgICAgZSA9IChlIDw8IG1MZW4pIHwgbTtcclxuICAgICAgICBlTGVuICs9IG1MZW47XHJcbiAgICAgICAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxyXG5cclxuICAgICAgICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSAzMmJpdCBmbG9hdC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHdyaXRlIHRvLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSBgNGAgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlRmxvYXQzMiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhIG51bWJlcilcIik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgdmFyIGNhcGFjaXR5OCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTgpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHk4ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHk4IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDQ7XG4gICAgICAgIGllZWU3NTRfd3JpdGUodGhpcy52aWV3LCB2YWx1ZSwgb2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiwgMjMsIDQpO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMzJiaXQgZmxvYXQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVGbG9hdDMyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdDMyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSAzMmJpdCBmbG9hdC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA0YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkRmxvYXQzMiA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis0K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2YWx1ZSA9IGllZWU3NTRfcmVhZCh0aGlzLnZpZXcsIG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4sIDIzLCA0KTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRGbG9hdDMyfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDRgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdCA9IEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZEZsb2F0MzI7XHJcblxyXG4gICAgLy8gdHlwZXMvZmxvYXRzL2Zsb2F0NjRcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIDY0Yml0IGZsb2F0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdDY0ID0gZnVuY3Rpb24odmFsdWUsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGEgbnVtYmVyKVwiKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICB2YXIgY2FwYWNpdHk5ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5OSlcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTkgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTkgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gODtcbiAgICAgICAgaWVlZTc1NF93cml0ZSh0aGlzLnZpZXcsIHZhbHVlLCBvZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuLCA1MiwgOCk7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSA2NGJpdCBmbG9hdC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN3cml0ZUZsb2F0NjR9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZURvdWJsZSA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVGbG9hdDY0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSA2NGJpdCBmbG9hdC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IGA4YCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkRmxvYXQ2NCA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDggPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIis4K1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2YWx1ZSA9IGllZWU3NTRfcmVhZCh0aGlzLnZpZXcsIG9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4sIDUyLCA4KTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IDg7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDY0Yml0IGZsb2F0LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBCeXRlQnVmZmVyI3JlYWRGbG9hdDY0fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgYDhgIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWREb3VibGUgPSBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRGbG9hdDY0O1xyXG5cclxuXHJcbiAgICAvLyB0eXBlcy92YXJpbnRzL3ZhcmludDMyXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLk1BWF9WQVJJTlQzMl9CWVRFUyA9IDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkIHRvIHN0b3JlIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gZW5jb2RlXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQuIENhcHBlZCB0byB7QGxpbmsgQnl0ZUJ1ZmZlci5NQVhfVkFSSU5UMzJfQllURVN9XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50MzIgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi9pby9jb2RlZF9zdHJlYW0uY2NcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlID4+PiAwO1xyXG4gICAgICAgICAgICAgaWYgKHZhbHVlIDwgMSA8PCA3ICkgcmV0dXJuIDE7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPCAxIDw8IDE0KSByZXR1cm4gMjtcclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IDEgPDwgMjEpIHJldHVybiAzO1xyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMSA8PCAyOCkgcmV0dXJuIDQ7XHJcbiAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBaaWd6YWcgZW5jb2RlcyBhIHNpZ25lZCAzMmJpdCBpbnRlZ2VyIHNvIHRoYXQgaXQgY2FuIGJlIGVmZmVjdGl2ZWx5IHVzZWQgd2l0aCB2YXJpbnQgZW5jb2RpbmcuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBTaWduZWQgMzJiaXQgaW50ZWdlclxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgemlnemFnIGVuY29kZWQgMzJiaXQgaW50ZWdlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTMyID0gZnVuY3Rpb24obikge1xyXG4gICAgICAgIHJldHVybiAoKChuIHw9IDApIDw8IDEpIF4gKG4gPj4gMzEpKSA+Pj4gMDsgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL3dpcmVfZm9ybWF0X2xpdGUuaFxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSB6aWd6YWcgZW5jb2RlZCBzaWduZWQgMzJiaXQgaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFVuc2lnbmVkIHppZ3phZyBlbmNvZGVkIDMyYml0IGludGVnZXJcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFNpZ25lZCAzMmJpdCBpbnRlZ2VyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuemlnWmFnRGVjb2RlMzIgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuICgobiA+Pj4gMSkgXiAtKG4gJiAxKSkgfCAwOyAvLyAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvd2lyZV9mb3JtYXRfbGl0ZS5oXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgMzJiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgYG9mZnNldGAgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWYXJpbnQzMiA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHZhbHVlOiBcIit2YWx1ZStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgdmFsdWUgfD0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2l6ZSA9IEJ5dGVCdWZmZXIuY2FsY3VsYXRlVmFyaW50MzIodmFsdWUpLFxyXG4gICAgICAgICAgICBiO1xyXG4gICAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgICB2YXIgY2FwYWNpdHkxMCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEwKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTAgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTEwIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IHNpemU7XG4gICAgICAgIHZhbHVlID4+Pj0gMDtcclxuICAgICAgICB3aGlsZSAodmFsdWUgPj0gMHg4MCkge1xyXG4gICAgICAgICAgICBiID0gKHZhbHVlICYgMHg3ZikgfCAweDgwO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICAgICAgdmFsdWUgPj4+PSA3O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgemlnLXphZyBlbmNvZGVkIChzaWduZWQpIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSB0aGlzIGlmIGBvZmZzZXRgIGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlblxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVmFyaW50MzJaaWdaYWcgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVWYXJpbnQzMihCeXRlQnVmZmVyLnppZ1phZ0VuY29kZTMyKHZhbHVlKSwgb2Zmc2V0KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIDMyYml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8IXt2YWx1ZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcn19IFRoZSB2YWx1ZSByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSB2YWx1ZSByZWFkXHJcbiAgICAgKiAgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnQuIEhhcyBhIHByb3BlcnR5IGB0cnVuY2F0ZWQgPSB0cnVlYCBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIGRhdGEgYXZhaWxhYmxlXHJcbiAgICAgKiAgdG8gZnVsbHkgZGVjb2RlIHRoZSB2YXJpbnQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFZhcmludDMyID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMSA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGMgPSAwLFxyXG4gICAgICAgICAgICB2YWx1ZSA9IDAgPj4+IDAsXHJcbiAgICAgICAgICAgIGI7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQgJiYgb2Zmc2V0ID4gdGhpcy5saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFwiVHJ1bmNhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgZXJyWyd0cnVuY2F0ZWQnXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYiA9IHRoaXMudmlld1tvZmZzZXQrK107XHJcbiAgICAgICAgICAgIGlmIChjIDwgNSlcclxuICAgICAgICAgICAgICAgIHZhbHVlIHw9IChiICYgMHg3ZikgPDwgKDcqYyk7XHJcbiAgICAgICAgICAgICsrYztcclxuICAgICAgICB9IHdoaWxlICgoYiAmIDB4ODApICE9PSAwKTtcclxuICAgICAgICB2YWx1ZSB8PSAwO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxyXG4gICAgICAgICAgICBcImxlbmd0aFwiOiBjXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCAoc2lnbmVkKSAzMmJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfCF7dmFsdWU6IG51bWJlciwgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgdmFsdWUgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgdmFsdWUgcmVhZFxyXG4gICAgICogIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIGl0J3Mgbm90IGEgdmFsaWQgdmFyaW50XHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFZhcmludDMyWmlnWmFnID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMucmVhZFZhcmludDMyKG9mZnNldCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICB2YWxbXCJ2YWx1ZVwiXSA9IEJ5dGVCdWZmZXIuemlnWmFnRGVjb2RlMzIodmFsW1widmFsdWVcIl0pO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdmFsID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGUzMih2YWwpO1xyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHR5cGVzL3ZhcmludHMvdmFyaW50NjRcclxuXHJcbiAgICBpZiAoTG9uZykge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBhIDY0Yml0IGJhc2UgMTI4IHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuTUFYX1ZBUklOVDY0X0JZVEVTID0gMTA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVxdWlyZWQgdG8gc3RvcmUgYSA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgVmFsdWUgdG8gZW5jb2RlXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gTnVtYmVyIG9mIGJ5dGVzIHJlcXVpcmVkLiBDYXBwZWQgdG8ge0BsaW5rIEJ5dGVCdWZmZXIuTUFYX1ZBUklOVDY0X0JZVEVTfVxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyLmNhbGN1bGF0ZVZhcmludDY0ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvaW8vY29kZWRfc3RyZWFtLmNjXHJcbiAgICAgICAgICAgIHZhciBwYXJ0MCA9IHZhbHVlLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MSA9IHZhbHVlLnNoaWZ0UmlnaHRVbnNpZ25lZCgyOCkudG9JbnQoKSA+Pj4gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQyID0gdmFsdWUuc2hpZnRSaWdodFVuc2lnbmVkKDU2KS50b0ludCgpID4+PiAwO1xyXG4gICAgICAgICAgICBpZiAocGFydDIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnQxID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydDAgPCAxIDw8IDE0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydDAgPCAxIDw8IDcgPyAxIDogMjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0MCA8IDEgPDwgMjEgPyAzIDogNDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQxIDwgMSA8PCAxNClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQxIDwgMSA8PCA3ID8gNSA6IDY7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydDEgPCAxIDw8IDIxID8gNyA6IDg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQyIDwgMSA8PCA3ID8gOSA6IDEwO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFppZ3phZyBlbmNvZGVzIGEgc2lnbmVkIDY0Yml0IGludGVnZXIgc28gdGhhdCBpdCBjYW4gYmUgZWZmZWN0aXZlbHkgdXNlZCB3aXRoIHZhcmludCBlbmNvZGluZy5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gdmFsdWUgU2lnbmVkIGxvbmdcclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFVuc2lnbmVkIHppZ3phZyBlbmNvZGVkIGxvbmdcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlci56aWdaYWdFbmNvZGU2NCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tTnVtYmVyKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS51bnNpZ25lZCAhPT0gZmFsc2UpIHZhbHVlID0gdmFsdWUudG9TaWduZWQoKTtcbiAgICAgICAgICAgIC8vIHJlZjogc3JjL2dvb2dsZS9wcm90b2J1Zi93aXJlX2Zvcm1hdF9saXRlLmhcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNoaWZ0TGVmdCgxKS54b3IodmFsdWUuc2hpZnRSaWdodCg2MykpLnRvVW5zaWduZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGEgemlnemFnIGVuY29kZWQgc2lnbmVkIDY0Yml0IGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ9IHZhbHVlIFVuc2lnbmVkIHppZ3phZyBlbmNvZGVkIGxvbmcgb3IgSmF2YVNjcmlwdCBudW1iZXJcclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNpZ25lZCBsb25nXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXIuemlnWmFnRGVjb2RlNjQgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbU51bWJlcih2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUudW5zaWduZWQgIT09IGZhbHNlKSB2YWx1ZSA9IHZhbHVlLnRvU2lnbmVkKCk7XG4gICAgICAgICAgICAvLyByZWY6IHNyYy9nb29nbGUvcHJvdG9idWYvd2lyZV9mb3JtYXRfbGl0ZS5oXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoMSkueG9yKHZhbHVlLmFuZChMb25nLk9ORSkudG9TaWduZWQoKS5uZWdhdGUoKSkudG9TaWduZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcnxMb25nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfG51bWJlcn0gYHRoaXNgIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4uXHJcbiAgICAgICAgICogQGV4cG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWYXJpbnQ2NCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgTG9uZykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgdmFsdWU6IFwiK3ZhbHVlK1wiIChub3QgYW4gaW50ZWdlciBvciBMb25nKVwiKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21OdW1iZXIodmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcodmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLnVuc2lnbmVkICE9PSBmYWxzZSkgdmFsdWUgPSB2YWx1ZS50b1NpZ25lZCgpO1xuICAgICAgICAgICAgdmFyIHNpemUgPSBCeXRlQnVmZmVyLmNhbGN1bGF0ZVZhcmludDY0KHZhbHVlKSxcclxuICAgICAgICAgICAgICAgIHBhcnQwID0gdmFsdWUudG9JbnQoKSA+Pj4gMCxcclxuICAgICAgICAgICAgICAgIHBhcnQxID0gdmFsdWUuc2hpZnRSaWdodFVuc2lnbmVkKDI4KS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICAgICAgcGFydDIgPSB2YWx1ZS5zaGlmdFJpZ2h0VW5zaWduZWQoNTYpLnRvSW50KCkgPj4+IDA7XHJcbiAgICAgICAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgICAgICAgdmFyIGNhcGFjaXR5MTEgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTEpXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTEgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTExIDogb2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCAtPSBzaXplO1xuICAgICAgICAgICAgc3dpdGNoIChzaXplKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiB0aGlzLnZpZXdbb2Zmc2V0KzldID0gKHBhcnQyID4+PiAgNykgJiAweDAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5IDogdGhpcy52aWV3W29mZnNldCs4XSA9IHNpemUgIT09IDkgPyAocGFydDIgICAgICAgKSB8IDB4ODAgOiAocGFydDIgICAgICAgKSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDggOiB0aGlzLnZpZXdbb2Zmc2V0KzddID0gc2l6ZSAhPT0gOCA/IChwYXJ0MSA+Pj4gMjEpIHwgMHg4MCA6IChwYXJ0MSA+Pj4gMjEpICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgNyA6IHRoaXMudmlld1tvZmZzZXQrNl0gPSBzaXplICE9PSA3ID8gKHBhcnQxID4+PiAxNCkgfCAweDgwIDogKHBhcnQxID4+PiAxNCkgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2IDogdGhpcy52aWV3W29mZnNldCs1XSA9IHNpemUgIT09IDYgPyAocGFydDEgPj4+ICA3KSB8IDB4ODAgOiAocGFydDEgPj4+ICA3KSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDUgOiB0aGlzLnZpZXdbb2Zmc2V0KzRdID0gc2l6ZSAhPT0gNSA/IChwYXJ0MSAgICAgICApIHwgMHg4MCA6IChwYXJ0MSAgICAgICApICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgNCA6IHRoaXMudmlld1tvZmZzZXQrM10gPSBzaXplICE9PSA0ID8gKHBhcnQwID4+PiAyMSkgfCAweDgwIDogKHBhcnQwID4+PiAyMSkgJiAweDdGO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzIDogdGhpcy52aWV3W29mZnNldCsyXSA9IHNpemUgIT09IDMgPyAocGFydDAgPj4+IDE0KSB8IDB4ODAgOiAocGFydDAgPj4+IDE0KSAmIDB4N0Y7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDIgOiB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gc2l6ZSAhPT0gMiA/IChwYXJ0MCA+Pj4gIDcpIHwgMHg4MCA6IChwYXJ0MCA+Pj4gIDcpICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMSA6IHRoaXMudmlld1tvZmZzZXQgIF0gPSBzaXplICE9PSAxID8gKHBhcnQwICAgICAgICkgfCAweDgwIDogKHBhcnQwICAgICAgICkgJiAweDdGO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc2l6ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXcml0ZXMgYSB6aWctemFnIGVuY29kZWQgNjRiaXQgYmFzZSAxMjggdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ8TG9uZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuLlxyXG4gICAgICAgICAqIEBleHBvc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlVmFyaW50NjRaaWdaYWcgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndyaXRlVmFyaW50NjQoQnl0ZUJ1ZmZlci56aWdaYWdFbmNvZGU2NCh2YWx1ZSksIG9mZnNldCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVhZHMgYSA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci4gUmVxdWlyZXMgTG9uZy5qcy5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd8IXt2YWx1ZTogTG9uZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgdmFsdWUgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgdmFsdWUgcmVhZCBhbmRcclxuICAgICAgICAgKiAgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnRcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50NjQgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMSA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVmOiBzcmMvZ29vZ2xlL3Byb3RvYnVmL2lvL2NvZGVkX3N0cmVhbS5jY1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MCA9IDAsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MSA9IDAsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MiA9IDAsXHJcbiAgICAgICAgICAgICAgICBiICA9IDA7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MCAgPSAoYiAmIDB4N0YpICAgICAgOyBpZiAoIGIgJiAweDgwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MCB8PSAoYiAmIDB4N0YpIDw8ICA3OyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MCB8PSAoYiAmIDB4N0YpIDw8IDE0OyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MCB8PSAoYiAmIDB4N0YpIDw8IDIxOyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MSAgPSAoYiAmIDB4N0YpICAgICAgOyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MSB8PSAoYiAmIDB4N0YpIDw8ICA3OyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MSB8PSAoYiAmIDB4N0YpIDw8IDE0OyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MSB8PSAoYiAmIDB4N0YpIDw8IDIxOyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MiAgPSAoYiAmIDB4N0YpICAgICAgOyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbb2Zmc2V0KytdOyBwYXJ0MiB8PSAoYiAmIDB4N0YpIDw8ICA3OyBpZiAoKGIgJiAweDgwKSB8fCAodGhpcy5ub0Fzc2VydCAmJiB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQnVmZmVyIG92ZXJydW5cIik7IH19fX19fX19fX1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gTG9uZy5mcm9tQml0cyhwYXJ0MCB8IChwYXJ0MSA8PCAyOCksIChwYXJ0MSA+Pj4gNCkgfCAocGFydDIpIDw8IDI0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICdsZW5ndGgnOiBvZmZzZXQtc3RhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCA2NGJpdCBiYXNlIDEyOCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci4gUmVxdWlyZXMgTG9uZy5qcy5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUxvbmd8IXt2YWx1ZTogTG9uZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgdmFsdWUgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgdmFsdWUgcmVhZCBhbmRcclxuICAgICAgICAgKiAgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQncyBub3QgYSB2YWxpZCB2YXJpbnRcclxuICAgICAgICAgKiBAZXhwb3NlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVmFyaW50NjRaaWdaYWcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMucmVhZFZhcmludDY0KG9mZnNldCk7XHJcbiAgICAgICAgICAgIGlmICh2YWwgJiYgdmFsWyd2YWx1ZSddIGluc3RhbmNlb2YgTG9uZylcclxuICAgICAgICAgICAgICAgIHZhbFtcInZhbHVlXCJdID0gQnl0ZUJ1ZmZlci56aWdaYWdEZWNvZGU2NCh2YWxbXCJ2YWx1ZVwiXSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHZhbCA9IEJ5dGVCdWZmZXIuemlnWmFnRGVjb2RlNjQodmFsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH0gLy8gTG9uZ1xyXG5cclxuXHJcbiAgICAvLyB0eXBlcy9zdHJpbmdzL2NzdHJpbmdcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIE5VTEwtdGVybWluYXRlZCBVVEY4IGVuY29kZWQgc3RyaW5nLiBGb3IgdGhpcyB0byB3b3JrIHRoZSBzcGVjaWZpZWQgc3RyaW5nIG11c3Qgbm90IGNvbnRhaW4gYW55IE5VTExcclxuICAgICAqICBjaGFyYWN0ZXJzIGl0c2VsZi5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICBjb250YWluZWQgaW4gYHN0cmAgKyAxIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSB0aGlzIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZUNTdHJpbmcgPSBmdW5jdGlvbihzdHIsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICB2YXIgaSxcclxuICAgICAgICAgICAgayA9IHN0ci5sZW5ndGg7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgIGZvciAoaT0wOyBpPGs7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0ci5jaGFyQ29kZUF0KGkpID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHN0cjogQ29udGFpbnMgTlVMTC1jaGFyYWN0ZXJzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICAvLyBVVEY4IHN0cmluZ3MgZG8gbm90IGNvbnRhaW4gemVybyBieXRlcyBpbiBiZXR3ZWVuIGV4Y2VwdCBmb3IgdGhlIHplcm8gY2hhcmFjdGVyLCBzbzpcclxuICAgICAgICBrID0gdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSlbMV07XHJcbiAgICAgICAgb2Zmc2V0ICs9IGsrMTtcbiAgICAgICAgdmFyIGNhcGFjaXR5MTIgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxMilcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTEyICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxMiA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSBrKzE7XG4gICAgICAgIHV0ZnguZW5jb2RlVVRGMTZ0b1VURjgoc3RyaW5nU291cmNlKHN0ciksIGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsrXSA9IGI7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gMDtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhIE5VTEwtdGVybWluYXRlZCBVVEY4IGVuY29kZWQgc3RyaW5nLiBGb3IgdGhpcyB0byB3b3JrIHRoZSBzdHJpbmcgcmVhZCBtdXN0IG5vdCBjb250YWluIGFueSBOVUxMIGNoYXJhY3RlcnNcclxuICAgICAqICBpdHNlbGYuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgKiAgcmVhZCBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkQ1N0cmluZyA9IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgIHZhciByZWxhdGl2ZSA9IHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAocmVsYXRpdmUpIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDEgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIisxK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldCxcclxuICAgICAgICAgICAgdGVtcDtcclxuICAgICAgICAvLyBVVEY4IHN0cmluZ3MgZG8gbm90IGNvbnRhaW4gemVybyBieXRlcyBpbiBiZXR3ZWVuIGV4Y2VwdCBmb3IgdGhlIHplcm8gY2hhcmFjdGVyIGl0c2VsZiwgc286XHJcbiAgICAgICAgdmFyIHNkLCBiID0gLTE7XHJcbiAgICAgICAgdXRmeC5kZWNvZGVVVEY4dG9VVEYxNihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGIgPT09IDApIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID49IHRoaXMubGltaXQpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK29mZnNldCtcIiA8IFwiK3RoaXMubGltaXQpO1xyXG4gICAgICAgICAgICBiID0gdGhpcy52aWV3W29mZnNldCsrXTtcclxuICAgICAgICAgICAgcmV0dXJuIGIgPT09IDAgPyBudWxsIDogYjtcclxuICAgICAgICB9LmJpbmQodGhpcyksIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gc2QoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgXCJzdHJpbmdcIjogc2QoKSxcclxuICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IG9mZnNldCAtIHN0YXJ0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyB0eXBlcy9zdHJpbmdzL2lzdHJpbmdcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIGxlbmd0aCBhcyB1aW50MzIgcHJlZml4ZWQgVVRGOCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICB3cml0dGVuIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSBgdGhpc2AgaWYgYG9mZnNldGAgaXMgb21pdHRlZCwgZWxzZSB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjd3JpdGVWYXJpbnQzMlxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLndyaXRlSVN0cmluZyA9IGZ1bmN0aW9uKHN0ciwgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgc3RyaW5nXCIpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgICAgICBrO1xyXG4gICAgICAgIGsgPSB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpLCB0aGlzLm5vQXNzZXJ0KVsxXTtcclxuICAgICAgICBvZmZzZXQgKz0gNCtrO1xuICAgICAgICB2YXIgY2FwYWNpdHkxMyA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTEzKVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTMgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTEzIDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IDQraztcbiAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gKGsgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGsgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGsgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gIGsgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0ICBdID0gKGsgPj4+IDI0KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzFdID0gKGsgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzJdID0gKGsgPj4+ICA4KSAmIDB4RkY7XG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KzNdID0gIGsgICAgICAgICAmIDB4RkY7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgIT09IHN0YXJ0ICsgNCArIGspXHJcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiBUcnVuY2F0ZWQgZGF0YSwgXCIrb2Zmc2V0K1wiID09IFwiKyhvZmZzZXQrNCtrKSk7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9mZnNldCAtIHN0YXJ0O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGEgbGVuZ3RoIGFzIHVpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICogIHJlYWQgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjcmVhZFZhcmludDMyXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZElTdHJpbmcgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyA0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrNCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMucmVhZFVpbnQzMihvZmZzZXQpO1xyXG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnJlYWRVVEY4U3RyaW5nKGxlbiwgQnl0ZUJ1ZmZlci5NRVRSSUNTX0JZVEVTLCBvZmZzZXQgKz0gNCk7XHJcbiAgICAgICAgb2Zmc2V0ICs9IHN0clsnbGVuZ3RoJ107XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyWydzdHJpbmcnXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ3N0cmluZyc6IHN0clsnc3RyaW5nJ10sXHJcbiAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHR5cGVzL3N0cmluZ3MvdXRmOHN0cmluZ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0cmljcyByZXByZXNlbnRpbmcgbnVtYmVyIG9mIFVURjggY2hhcmFjdGVycy4gRXZhbHVhdGVzIHRvIGBjYC5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5NRVRSSUNTX0NIQVJTID0gJ2MnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0cmljcyByZXByZXNlbnRpbmcgbnVtYmVyIG9mIGJ5dGVzLiBFdmFsdWF0ZXMgdG8gYGJgLlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMgPSAnYic7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHdyaXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gd3JpdGUgdG8uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ8bnVtYmVyfSB0aGlzIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4uXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVVEY4U3RyaW5nID0gZnVuY3Rpb24oc3RyLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaztcclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQ7XHJcbiAgICAgICAgayA9IHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0cikpWzFdO1xyXG4gICAgICAgIG9mZnNldCArPSBrO1xuICAgICAgICB2YXIgY2FwYWNpdHkxNCA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvZmZzZXQgPiBjYXBhY2l0eTE0KVxuICAgICAgICAgICAgdGhpcy5yZXNpemUoKGNhcGFjaXR5MTQgKj0gMikgPiBvZmZzZXQgPyBjYXBhY2l0eTE0IDogb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0IC09IGs7XG4gICAgICAgIHV0ZnguZW5jb2RlVVRGMTZ0b1VURjgoc3RyaW5nU291cmNlKHN0ciksIGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3W29mZnNldCsrXSA9IGI7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGFuIFVURjggZW5jb2RlZCBzdHJpbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjd3JpdGVVVEY4U3RyaW5nfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IHRoaXMgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbi5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS53cml0ZVN0cmluZyA9IEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVVVEY4U3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIFVURjggY2hhcmFjdGVycyBvZiBhIHN0cmluZy4gSmF2YVNjcmlwdCBpdHNlbGYgdXNlcyBVVEYtMTYsIHNvIHRoYXQgYSBzdHJpbmcnc1xyXG4gICAgICogIGBsZW5ndGhgIHByb3BlcnR5IGRvZXMgbm90IHJlZmxlY3QgaXRzIGFjdHVhbCBVVEY4IHNpemUgaWYgaXQgY29udGFpbnMgY29kZSBwb2ludHMgbGFyZ2VyIHRoYW4gMHhGRkZGLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gY2FsY3VsYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgVVRGOCBjaGFyYWN0ZXJzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlVVRGOENoYXJzID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0cikpWzBdO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIG9mIGEgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gY2FsY3VsYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgVVRGOCBieXRlc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmNhbGN1bGF0ZVVURjhCeXRlcyA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiB1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpKVsxXTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgVVRGOCBieXRlcyBvZiBhIHN0cmluZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlci5jYWxjdWxhdGVVVEY4Qnl0ZXN9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjYWxjdWxhdGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBVVEY4IGJ5dGVzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuY2FsY3VsYXRlU3RyaW5nID0gQnl0ZUJ1ZmZlci5jYWxjdWxhdGVVVEY4Qnl0ZXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkcyBhbiBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBOdW1iZXIgb2YgY2hhcmFjdGVycyBvciBieXRlcyB0byByZWFkLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtZXRyaWNzIE1ldHJpY3Mgc3BlY2lmeWluZyB3aGF0IGBsZW5ndGhgIGlzIG1lYW50IHRvIGNvdW50LiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlN9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHJlYWQgZnJvbS4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8IXtzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXJ9fSBUaGUgc3RyaW5nIHJlYWQgaWYgb2Zmc2V0IGlzIG9taXR0ZWQsIGVsc2UgdGhlIHN0cmluZ1xyXG4gICAgICogIHJlYWQgYW5kIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucmVhZFVURjhTdHJpbmcgPSBmdW5jdGlvbihsZW5ndGgsIG1ldHJpY3MsIG9mZnNldCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWV0cmljcyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gbWV0cmljcztcclxuICAgICAgICAgICAgbWV0cmljcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgbWV0cmljcyA9PT0gJ3VuZGVmaW5lZCcpIG1ldHJpY3MgPSBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlM7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBsZW5ndGggJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgbGVuZ3RoOiBcIitsZW5ndGgrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIGxlbmd0aCB8PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDAgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogMCA8PSBcIitvZmZzZXQrXCIgKCtcIiswK1wiKSA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpID0gMCxcclxuICAgICAgICAgICAgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgIHNkO1xyXG4gICAgICAgIGlmIChtZXRyaWNzID09PSBCeXRlQnVmZmVyLk1FVFJJQ1NfQ0hBUlMpIHsgLy8gVGhlIHNhbWUgZm9yIG5vZGUgYW5kIHRoZSBicm93c2VyXHJcbiAgICAgICAgICAgIHNkID0gc3RyaW5nRGVzdGluYXRpb24oKTtcclxuICAgICAgICAgICAgdXRmeC5kZWNvZGVVVEY4KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPCBsZW5ndGggJiYgb2Zmc2V0IDwgdGhpcy5saW1pdCA/IHRoaXMudmlld1tvZmZzZXQrK10gOiBudWxsO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgICAgICArK2k7IHV0ZnguVVRGOHRvVVRGMTYoY3AsIHNkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChpICE9PSBsZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK2krXCIgPT0gXCIrbGVuZ3RoKTtcclxuICAgICAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBcInN0cmluZ1wiOiBzZCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IG9mZnNldCAtIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRyaWNzID09PSBCeXRlQnVmZmVyLk1FVFJJQ1NfQllURVMpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IFwiK29mZnNldCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgbGVuZ3RoID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiK2xlbmd0aCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBrID0gb2Zmc2V0ICsgbGVuZ3RoO1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldCA8IGsgPyB0aGlzLnZpZXdbb2Zmc2V0KytdIDogbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCksIHRoaXMubm9Bc3NlcnQpO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBrKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IFRydW5jYXRlZCBkYXRhLCBcIitvZmZzZXQrXCIgPT0gXCIrayk7XHJcbiAgICAgICAgICAgIGlmIChyZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2QoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmluZyc6IHNkKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xlbmd0aCc6IG9mZnNldCAtIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIlVuc3VwcG9ydGVkIG1ldHJpY3M6IFwiK21ldHJpY3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWRzIGFuIFVURjggZW5jb2RlZCBzdHJpbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIEJ5dGVCdWZmZXIjcmVhZFVURjhTdHJpbmd9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIE51bWJlciBvZiBjaGFyYWN0ZXJzIG9yIGJ5dGVzIHRvIHJlYWRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWV0cmljcyBNZXRyaWNzIHNwZWNpZnlpbmcgd2hhdCBgbmAgaXMgbWVhbnQgdG8gY291bnQuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuTUVUUklDU19DSEFSU30uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gcmVhZCBmcm9tLiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcmVhZCBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whe3N0cmluZzogc3RyaW5nLCBsZW5ndGg6IG51bWJlcn19IFRoZSBzdHJpbmcgcmVhZCBpZiBvZmZzZXQgaXMgb21pdHRlZCwgZWxzZSB0aGUgc3RyaW5nXHJcbiAgICAgKiAgcmVhZCBhbmQgdGhlIGFjdHVhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkU3RyaW5nID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZWFkVVRGOFN0cmluZztcclxuXHJcbiAgICAvLyB0eXBlcy9zdHJpbmdzL3ZzdHJpbmdcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlcyBhIGxlbmd0aCBhcyB2YXJpbnQzMiBwcmVmaXhlZCBVVEY4IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gd3JpdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byB3cml0ZSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHdyaXR0ZW4gaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcnxudW1iZXJ9IGB0aGlzYCBpZiBgb2Zmc2V0YCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBhY3R1YWwgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciN3cml0ZVZhcmludDMyXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUud3JpdGVWU3RyaW5nID0gZnVuY3Rpb24oc3RyLCBvZmZzZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgICAgIGssIGw7XHJcbiAgICAgICAgayA9IHV0ZnguY2FsY3VsYXRlVVRGMTZhc1VURjgoc3RyaW5nU291cmNlKHN0ciksIHRoaXMubm9Bc3NlcnQpWzFdO1xyXG4gICAgICAgIGwgPSBCeXRlQnVmZmVyLmNhbGN1bGF0ZVZhcmludDMyKGspO1xyXG4gICAgICAgIG9mZnNldCArPSBsK2s7XG4gICAgICAgIHZhciBjYXBhY2l0eTE1ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9mZnNldCA+IGNhcGFjaXR5MTUpXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgoY2FwYWNpdHkxNSAqPSAyKSA+IG9mZnNldCA/IGNhcGFjaXR5MTUgOiBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgLT0gbCtrO1xuICAgICAgICBvZmZzZXQgKz0gdGhpcy53cml0ZVZhcmludDMyKGssIG9mZnNldCk7XHJcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOChzdHJpbmdTb3VyY2Uoc3RyKSwgZnVuY3Rpb24oYikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdbb2Zmc2V0KytdID0gYjtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgIT09IHN0YXJ0K2srbClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IFRydW5jYXRlZCBkYXRhLCBcIitvZmZzZXQrXCIgPT0gXCIrKG9mZnNldCtrK2wpKTtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSBsZW5ndGggYXMgdmFyaW50MzIgcHJlZml4ZWQgVVRGOCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byByZWFkIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICByZWFkIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfCF7c3RyaW5nOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyfX0gVGhlIHN0cmluZyByZWFkIGlmIG9mZnNldCBpcyBvbWl0dGVkLCBlbHNlIHRoZSBzdHJpbmdcclxuICAgICAqICByZWFkIGFuZCB0aGUgYWN0dWFsIG51bWJlciBvZiBieXRlcyByZWFkLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI3JlYWRWYXJpbnQzMlxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlYWRWU3RyaW5nID0gZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChyZWxhdGl2ZSkgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMSA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzErXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0O1xyXG4gICAgICAgIHZhciBsZW4gPSB0aGlzLnJlYWRWYXJpbnQzMihvZmZzZXQpO1xyXG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnJlYWRVVEY4U3RyaW5nKGxlblsndmFsdWUnXSwgQnl0ZUJ1ZmZlci5NRVRSSUNTX0JZVEVTLCBvZmZzZXQgKz0gbGVuWydsZW5ndGgnXSk7XHJcbiAgICAgICAgb2Zmc2V0ICs9IHN0clsnbGVuZ3RoJ107XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyWydzdHJpbmcnXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ3N0cmluZyc6IHN0clsnc3RyaW5nJ10sXHJcbiAgICAgICAgICAgICAgICAnbGVuZ3RoJzogb2Zmc2V0IC0gc3RhcnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZHMgc29tZSBkYXRhIHRvIHRoaXMgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYmVoaW5kIHRoZSBzcGVjaWZpZWQgb2Zmc2V0IHVwIHRvIHRoZSBhcHBlbmRlZFxyXG4gICAgICogIGRhdGEncyBsZW5ndGguXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfCFBcnJheUJ1ZmZlcnwhVWludDhBcnJheXxzdHJpbmd9IHNvdXJjZSBEYXRhIHRvIGFwcGVuZC4gSWYgYHNvdXJjZWAgaXMgYSBCeXRlQnVmZmVyLCBpdHMgb2Zmc2V0c1xyXG4gICAgICogIHdpbGwgYmUgbW9kaWZpZWQgYWNjb3JkaW5nIHRvIHRoZSBwZXJmb3JtZWQgcmVhZCBvcGVyYXRpb24uXHJcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGVuY29kaW5nIEVuY29kaW5nIGlmIGBkYXRhYCBpcyBhIHN0cmluZyAoXCJiYXNlNjRcIiwgXCJoZXhcIiwgXCJiaW5hcnlcIiwgZGVmYXVsdHMgdG8gXCJ1dGY4XCIpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gYXBwZW5kIGF0LiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAZXhhbXBsZSBBIHJlbGF0aXZlIGA8MDEgMDI+MDMuYXBwZW5kKDwwNCAwNT4pYCB3aWxsIHJlc3VsdCBpbiBgPDAxIDAyIDA0IDA1PiwgMDQgMDV8YFxyXG4gICAgICogQGV4YW1wbGUgQW4gYWJzb2x1dGUgYDwwMSAwMj4wMy5hcHBlbmQoMDQgMDU+LCAxKWAgd2lsbCByZXN1bHQgaW4gYDwwMSAwND4wNSwgMDQgMDV8YFxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHNvdXJjZSwgZW5jb2RpbmcsIG9mZnNldCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gZW5jb2Rpbmc7XHJcbiAgICAgICAgICAgIGVuY29kaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBCeXRlQnVmZmVyKSlcclxuICAgICAgICAgICAgc291cmNlID0gQnl0ZUJ1ZmZlci53cmFwKHNvdXJjZSwgZW5jb2RpbmcpO1xyXG4gICAgICAgIHZhciBsZW5ndGggPSBzb3VyY2UubGltaXQgLSBzb3VyY2Uub2Zmc2V0O1xyXG4gICAgICAgIGlmIChsZW5ndGggPD0gMCkgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gYXBwZW5kXHJcbiAgICAgICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgdmFyIGNhcGFjaXR5MTYgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob2Zmc2V0ID4gY2FwYWNpdHkxNilcbiAgICAgICAgICAgIHRoaXMucmVzaXplKChjYXBhY2l0eTE2ICo9IDIpID4gb2Zmc2V0ID8gY2FwYWNpdHkxNiA6IG9mZnNldCk7XG4gICAgICAgIG9mZnNldCAtPSBsZW5ndGg7XG4gICAgICAgIHRoaXMudmlldy5zZXQoc291cmNlLnZpZXcuc3ViYXJyYXkoc291cmNlLm9mZnNldCwgc291cmNlLmxpbWl0KSwgb2Zmc2V0KTtcclxuICAgICAgICBzb3VyY2Uub2Zmc2V0ICs9IGxlbmd0aDtcclxuICAgICAgICBpZiAocmVsYXRpdmUpIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhbm90aGVyIEJ5dGVCdWZmZXIuIFRoaXMgd2lsbCBvdmVyd3JpdGUgYW55IGNvbnRlbnRzIGF0IGFuZCBhZnRlciB0aGVcclxuICAgICAgICBzcGVjaWZpZWQgb2Zmc2V0IHVwIHRvIHRoZSBsZW5ndGggb2YgdGhpcyBCeXRlQnVmZmVyJ3MgZGF0YS5cclxuICAgICAqIEBwYXJhbSB7IUJ5dGVCdWZmZXJ9IHRhcmdldCBUYXJnZXQgQnl0ZUJ1ZmZlclxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGFwcGVuZCB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYnkgdGhlIG51bWJlciBvZiBieXRlc1xyXG4gICAgICogIHJlYWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQHNlZSBCeXRlQnVmZmVyI2FwcGVuZFxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmFwcGVuZFRvID0gZnVuY3Rpb24odGFyZ2V0LCBvZmZzZXQpIHtcclxuICAgICAgICB0YXJnZXQuYXBwZW5kKHRoaXMsIG9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyBhc3NlcnRpb25zIG9mIGFyZ3VtZW50IHR5cGVzIGFuZCBvZmZzZXRzLiBBc3NlcnRpb25zIGFyZSBlbmFibGVkIGJ5IGRlZmF1bHQgYnV0IHlvdSBjYW4gb3B0IHRvXHJcbiAgICAgKiAgZGlzYWJsZSB0aGVtIGlmIHlvdXIgY29kZSBhbHJlYWR5IG1ha2VzIHN1cmUgdGhhdCBldmVyeXRoaW5nIGlzIHZhbGlkLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBhc3NlcnQgYHRydWVgIHRvIGVuYWJsZSBhc3NlcnRpb25zLCBvdGhlcndpc2UgYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuYXNzZXJ0ID0gZnVuY3Rpb24oYXNzZXJ0KSB7XHJcbiAgICAgICAgdGhpcy5ub0Fzc2VydCA9ICFhc3NlcnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY2FwYWNpdHkgb2YgdGhpcyBCeXRlQnVmZmVyJ3MgYmFja2luZyBidWZmZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBDYXBhY2l0eSBvZiB0aGUgYmFja2luZyBidWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jYXBhY2l0eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXJzIHRoaXMgQnl0ZUJ1ZmZlcidzIG9mZnNldHMgYnkgc2V0dGluZyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IHRvIGAwYCBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9IHRvIHRoZVxyXG4gICAgICogIGJhY2tpbmcgYnVmZmVyJ3MgY2FwYWNpdHkuIERpc2NhcmRzIHtAbGluayBCeXRlQnVmZmVyI21hcmtlZE9mZnNldH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLmxpbWl0ID0gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICB0aGlzLm1hcmtlZE9mZnNldCA9IC0xO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBjbG9uZWQgaW5zdGFuY2Ugb2YgdGhpcyBCeXRlQnVmZmVyLCBwcmVzZXQgd2l0aCB0aGlzIEJ5dGVCdWZmZXIncyB2YWx1ZXMgZm9yIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0sXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbWFya2VkT2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gY29weSBXaGV0aGVyIHRvIGNvcHkgdGhlIGJhY2tpbmcgYnVmZmVyIG9yIHRvIHJldHVybiBhbm90aGVyIHZpZXcgb24gdGhlIHNhbWUsIGRlZmF1bHRzIHRvIGBmYWxzZWBcclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQ2xvbmVkIGluc3RhbmNlXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbihjb3B5KSB7XHJcbiAgICAgICAgdmFyIGJiID0gbmV3IEJ5dGVCdWZmZXIoMCwgdGhpcy5saXR0bGVFbmRpYW4sIHRoaXMubm9Bc3NlcnQpO1xyXG4gICAgICAgIGlmIChjb3B5KSB7XHJcbiAgICAgICAgICAgIGJiLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgYmIudmlldyA9IG5ldyBVaW50OEFycmF5KGJiLmJ1ZmZlcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYmIuYnVmZmVyID0gdGhpcy5idWZmZXI7XHJcbiAgICAgICAgICAgIGJiLnZpZXcgPSB0aGlzLnZpZXc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJiLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGJiLm1hcmtlZE9mZnNldCA9IHRoaXMubWFya2VkT2Zmc2V0O1xyXG4gICAgICAgIGJiLmxpbWl0ID0gdGhpcy5saW1pdDtcclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFjdHMgdGhpcyBCeXRlQnVmZmVyIHRvIGJlIGJhY2tlZCBieSBhIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn0gb2YgaXRzIGNvbnRlbnRzJyBsZW5ndGguIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXNcclxuICAgICAqICBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS4gV2lsbCBzZXQgYG9mZnNldCA9IDBgIGFuZCBgbGltaXQgPSBjYXBhY2l0eWAgYW5kXHJcbiAgICAgKiAgYWRhcHQge0BsaW5rIEJ5dGVCdWZmZXIjbWFya2VkT2Zmc2V0fSB0byB0aGUgc2FtZSByZWxhdGl2ZSBwb3NpdGlvbiBpZiBzZXQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBzdGFydCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9XHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgZW5kID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYmVnaW4gPT09IDAgJiYgZW5kID09PSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gQWxyZWFkeSBjb21wYWN0ZWRcclxuICAgICAgICB2YXIgbGVuID0gZW5kIC0gYmVnaW47XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IEVNUFRZX0JVRkZFUjtcclxuICAgICAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFya2VkT2Zmc2V0ID49IDApIHRoaXMubWFya2VkT2Zmc2V0IC09IGJlZ2luO1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubGltaXQgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihsZW4pO1xyXG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICB2aWV3LnNldCh0aGlzLnZpZXcuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICAgICAgaWYgKHRoaXMubWFya2VkT2Zmc2V0ID49IDApIHRoaXMubWFya2VkT2Zmc2V0IC09IGJlZ2luO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLmxpbWl0ID0gbGVuO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmRcclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIEJlZ2luIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIEVuZCBvZmZzZXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQ29weVxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gZW5kKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ5dGVCdWZmZXIoMCwgdGhpcy5saXR0bGVFbmRpYW4sIHRoaXMubm9Bc3NlcnQpO1xyXG4gICAgICAgIHZhciBjYXBhY2l0eSA9IGVuZCAtIGJlZ2luLFxyXG4gICAgICAgICAgICBiYiA9IG5ldyBCeXRlQnVmZmVyKGNhcGFjaXR5LCB0aGlzLmxpdHRsZUVuZGlhbiwgdGhpcy5ub0Fzc2VydCk7XHJcbiAgICAgICAgYmIub2Zmc2V0ID0gMDtcclxuICAgICAgICBiYi5saW1pdCA9IGNhcGFjaXR5O1xyXG4gICAgICAgIGlmIChiYi5tYXJrZWRPZmZzZXQgPj0gMCkgYmIubWFya2VkT2Zmc2V0IC09IGJlZ2luO1xyXG4gICAgICAgIHRoaXMuY29weVRvKGJiLCAwLCBiZWdpbiwgZW5kKTtcclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29waWVzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHRvIGFub3RoZXIgQnl0ZUJ1ZmZlci4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcn0gdGFyZ2V0IFRhcmdldCBCeXRlQnVmZmVyXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHRhcmdldE9mZnNldCBPZmZzZXQgdG8gY29weSB0by4gV2lsbCB1c2UgYW5kIGluY3JlYXNlIHRoZSB0YXJnZXQncyB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9XHJcbiAgICAgKiAgYnkgdGhlIG51bWJlciBvZiBieXRlcyBjb3BpZWQgaWYgb21pdHRlZC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gc291cmNlT2Zmc2V0IE9mZnNldCB0byBzdGFydCBjb3B5aW5nIGZyb20uIFdpbGwgdXNlIGFuZCBpbmNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZVxyXG4gICAgICogIG51bWJlciBvZiBieXRlcyBjb3BpZWQgaWYgb21pdHRlZC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gc291cmNlTGltaXQgT2Zmc2V0IHRvIGVuZCBjb3B5aW5nIGZyb20sIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fVxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuY29weVRvID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRPZmZzZXQsIHNvdXJjZU9mZnNldCwgc291cmNlTGltaXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUsXHJcbiAgICAgICAgICAgIHRhcmdldFJlbGF0aXZlO1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAoIUJ5dGVCdWZmZXIuaXNCeXRlQnVmZmVyKHRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHRhcmdldDogTm90IGEgQnl0ZUJ1ZmZlclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0T2Zmc2V0ID0gKHRhcmdldFJlbGF0aXZlID0gdHlwZW9mIHRhcmdldE9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpID8gdGFyZ2V0Lm9mZnNldCA6IHRhcmdldE9mZnNldCB8IDA7XHJcbiAgICAgICAgc291cmNlT2Zmc2V0ID0gKHJlbGF0aXZlID0gdHlwZW9mIHNvdXJjZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5vZmZzZXQgOiBzb3VyY2VPZmZzZXQgfCAwO1xyXG4gICAgICAgIHNvdXJjZUxpbWl0ID0gdHlwZW9mIHNvdXJjZUxpbWl0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMubGltaXQgOiBzb3VyY2VMaW1pdCB8IDA7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXRPZmZzZXQgPCAwIHx8IHRhcmdldE9mZnNldCA+IHRhcmdldC5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgdGFyZ2V0IHJhbmdlOiAwIDw9IFwiK3RhcmdldE9mZnNldCtcIiA8PSBcIit0YXJnZXQuYnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGlmIChzb3VyY2VPZmZzZXQgPCAwIHx8IHNvdXJjZUxpbWl0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgc291cmNlIHJhbmdlOiAwIDw9IFwiK3NvdXJjZU9mZnNldCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgdmFyIGxlbiA9IHNvdXJjZUxpbWl0IC0gc291cmNlT2Zmc2V0O1xyXG4gICAgICAgIGlmIChsZW4gPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7IC8vIE5vdGhpbmcgdG8gY29weVxyXG5cclxuICAgICAgICB0YXJnZXQuZW5zdXJlQ2FwYWNpdHkodGFyZ2V0T2Zmc2V0ICsgbGVuKTtcclxuXHJcbiAgICAgICAgdGFyZ2V0LnZpZXcuc2V0KHRoaXMudmlldy5zdWJhcnJheShzb3VyY2VPZmZzZXQsIHNvdXJjZUxpbWl0KSwgdGFyZ2V0T2Zmc2V0KTtcclxuXHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKSB0aGlzLm9mZnNldCArPSBsZW47XHJcbiAgICAgICAgaWYgKHRhcmdldFJlbGF0aXZlKSB0YXJnZXQub2Zmc2V0ICs9IGxlbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFrZXMgc3VyZSB0aGF0IHRoaXMgQnl0ZUJ1ZmZlciBpcyBiYWNrZWQgYnkgYSB7QGxpbmsgQnl0ZUJ1ZmZlciNidWZmZXJ9IG9mIGF0IGxlYXN0IHRoZSBzcGVjaWZpZWQgY2FwYWNpdHkuIElmIHRoZVxyXG4gICAgICogIGN1cnJlbnQgY2FwYWNpdHkgaXMgZXhjZWVkZWQsIGl0IHdpbGwgYmUgZG91YmxlZC4gSWYgZG91YmxlIHRoZSBjdXJyZW50IGNhcGFjaXR5IGlzIGxlc3MgdGhhbiB0aGUgcmVxdWlyZWQgY2FwYWNpdHksXHJcbiAgICAgKiAgdGhlIHJlcXVpcmVkIGNhcGFjaXR5IHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5IFJlcXVpcmVkIGNhcGFjaXR5XHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5lbnN1cmVDYXBhY2l0eSA9IGZ1bmN0aW9uKGNhcGFjaXR5KSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIGlmIChjdXJyZW50IDwgY2FwYWNpdHkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc2l6ZSgoY3VycmVudCAqPSAyKSA+IGNhcGFjaXR5ID8gY3VycmVudCA6IGNhcGFjaXR5KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVyd3JpdGVzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIHdpdGggdGhlIHNwZWNpZmllZCB2YWx1ZS4gQ29udGVudHMgYXJlIHRoZSBieXRlcyBiZXR3ZWVuXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZSBCeXRlIHZhbHVlIHRvIGZpbGwgd2l0aC4gSWYgZ2l2ZW4gYXMgYSBzdHJpbmcsIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgdXNlZC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gQmVnaW4gb2Zmc2V0LiBXaWxsIHVzZSBhbmQgaW5jcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgd3JpdHRlbiBpZiBvbWl0dGVkLiBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgRW5kIG9mZnNldCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAZXhhbXBsZSBgc29tZUJ5dGVCdWZmZXIuY2xlYXIoKS5maWxsKDApYCBmaWxscyB0aGUgZW50aXJlIGJhY2tpbmcgYnVmZmVyIHdpdGggemVyb2VzXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKHZhbHVlLCBiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gdHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gJ3VuZGVmaW5lZCcpIGJlZ2luID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSBlbmQgPSB0aGlzLmxpbWl0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCB2YWx1ZTogXCIrdmFsdWUrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIHZhbHVlIHw9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiZWdpbiA+PSBlbmQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBOb3RoaW5nIHRvIGZpbGxcclxuICAgICAgICB3aGlsZSAoYmVnaW4gPCBlbmQpIHRoaXMudmlld1tiZWdpbisrXSA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZSkgdGhpcy5vZmZzZXQgPSBiZWdpbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlcyB0aGlzIEJ5dGVCdWZmZXIgcmVhZHkgZm9yIGEgbmV3IHNlcXVlbmNlIG9mIHdyaXRlIG9yIHJlbGF0aXZlIHJlYWQgb3BlcmF0aW9ucy4gU2V0cyBgbGltaXQgPSBvZmZzZXRgIGFuZFxyXG4gICAgICogIGBvZmZzZXQgPSAwYC4gTWFrZSBzdXJlIGFsd2F5cyB0byBmbGlwIGEgQnl0ZUJ1ZmZlciB3aGVuIGFsbCByZWxhdGl2ZSByZWFkIG9yIHdyaXRlIG9wZXJhdGlvbnMgYXJlIGNvbXBsZXRlLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUuZmxpcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMubGltaXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXJrcyBhbiBvZmZzZXQgb24gdGhpcyBCeXRlQnVmZmVyIHRvIGJlIHVzZWQgbGF0ZXIuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gbWFyay4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgb2Zmc2V0YCBpcyBub3QgYSB2YWxpZCBudW1iZXJcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGBvZmZzZXRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNyZXNldFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLm1hcmsgPSBmdW5jdGlvbihvZmZzZXQpIHtcclxuICAgICAgICBvZmZzZXQgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMub2Zmc2V0IDogb2Zmc2V0O1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIG9mZnNldDogXCIrb2Zmc2V0K1wiIChub3QgYW4gaW50ZWdlcilcIik7XG4gICAgICAgICAgICBvZmZzZXQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiAwIDw9IFwiK29mZnNldCtcIiAoK1wiKzArXCIpIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tYXJrZWRPZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBieXRlIG9yZGVyLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBsaXR0bGVFbmRpYW4gYHRydWVgIGZvciBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIsIGBmYWxzZWAgZm9yIGJpZyBlbmRpYW5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLm9yZGVyID0gZnVuY3Rpb24obGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGl0dGxlRW5kaWFuICE9PSAnYm9vbGVhbicpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGxpdHRsZUVuZGlhbjogTm90IGEgYm9vbGVhblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSAhIWxpdHRsZUVuZGlhbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTd2l0Y2hlcyAodG8pIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBEZWZhdWx0cyB0byBgdHJ1ZWAsIG90aGVyd2lzZSB1c2VzIGJpZyBlbmRpYW5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLkxFID0gZnVuY3Rpb24obGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0eXBlb2YgbGl0dGxlRW5kaWFuICE9PSAndW5kZWZpbmVkJyA/ICEhbGl0dGxlRW5kaWFuIDogdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTd2l0Y2hlcyAodG8pIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGJpZ0VuZGlhbiBEZWZhdWx0cyB0byBgdHJ1ZWAsIG90aGVyd2lzZSB1c2VzIGxpdHRsZSBlbmRpYW5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLkJFID0gZnVuY3Rpb24oYmlnRW5kaWFuKSB7XHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0eXBlb2YgYmlnRW5kaWFuICE9PSAndW5kZWZpbmVkJyA/ICFiaWdFbmRpYW4gOiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFByZXBlbmRzIHNvbWUgZGF0YSB0byB0aGlzIEJ5dGVCdWZmZXIuIFRoaXMgd2lsbCBvdmVyd3JpdGUgYW55IGNvbnRlbnRzIGJlZm9yZSB0aGUgc3BlY2lmaWVkIG9mZnNldCB1cCB0byB0aGVcclxuICAgICAqICBwcmVwZW5kZWQgZGF0YSdzIGxlbmd0aC4gSWYgdGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBhdmFpbGFibGUgYmVmb3JlIHRoZSBzcGVjaWZpZWQgYG9mZnNldGAsIHRoZSBiYWNraW5nIGJ1ZmZlclxyXG4gICAgICogIHdpbGwgYmUgcmVzaXplZCBhbmQgaXRzIGNvbnRlbnRzIG1vdmVkIGFjY29yZGluZ2x5LlxyXG4gICAgICogQHBhcmFtIHshQnl0ZUJ1ZmZlcnxzdHJpbmd8IUFycmF5QnVmZmVyfSBzb3VyY2UgRGF0YSB0byBwcmVwZW5kLiBJZiBgc291cmNlYCBpcyBhIEJ5dGVCdWZmZXIsIGl0cyBvZmZzZXQgd2lsbCBiZVxyXG4gICAgICogIG1vZGlmaWVkIGFjY29yZGluZyB0byB0aGUgcGVyZm9ybWVkIHJlYWQgb3BlcmF0aW9uLlxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBlbmNvZGluZyBFbmNvZGluZyBpZiBgZGF0YWAgaXMgYSBzdHJpbmcgKFwiYmFzZTY0XCIsIFwiaGV4XCIsIFwiYmluYXJ5XCIsIGRlZmF1bHRzIHRvIFwidXRmOFwiKVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIHByZXBlbmQgYXQuIFdpbGwgdXNlIGFuZCBkZWNyZWFzZSB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGJ5IHRoZSBudW1iZXIgb2YgYnl0ZXNcclxuICAgICAqICBwcmVwZW5kZWQgaWYgb21pdHRlZC5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICogQGV4YW1wbGUgQSByZWxhdGl2ZSBgMDA8MDEgMDIgMDM+LnByZXBlbmQoPDA0IDA1PilgIHJlc3VsdHMgaW4gYDwwNCAwNSAwMSAwMiAwMz4sIDA0IDA1fGBcclxuICAgICAqIEBleGFtcGxlIEFuIGFic29sdXRlIGAwMDwwMSAwMiAwMz4ucHJlcGVuZCg8MDQgMDU+LCAyKWAgcmVzdWx0cyBpbiBgMDQ8MDUgMDIgMDM+LCAwNCAwNXxgXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uKHNvdXJjZSwgZW5jb2RpbmcsIG9mZnNldCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gZW5jb2Rpbmc7XHJcbiAgICAgICAgICAgIGVuY29kaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSB0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKHJlbGF0aXZlKSBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgb2Zmc2V0OiBcIitvZmZzZXQrXCIgKG5vdCBhbiBpbnRlZ2VyKVwiKTtcbiAgICAgICAgICAgIG9mZnNldCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAwID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IDAgPD0gXCIrb2Zmc2V0K1wiICgrXCIrMCtcIikgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBCeXRlQnVmZmVyKSlcclxuICAgICAgICAgICAgc291cmNlID0gQnl0ZUJ1ZmZlci53cmFwKHNvdXJjZSwgZW5jb2RpbmcpO1xyXG4gICAgICAgIHZhciBsZW4gPSBzb3VyY2UubGltaXQgLSBzb3VyY2Uub2Zmc2V0O1xyXG4gICAgICAgIGlmIChsZW4gPD0gMCkgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gcHJlcGVuZFxyXG4gICAgICAgIHZhciBkaWZmID0gbGVuIC0gb2Zmc2V0O1xyXG4gICAgICAgIGlmIChkaWZmID4gMCkgeyAvLyBOb3QgZW5vdWdoIHNwYWNlIGJlZm9yZSBvZmZzZXQsIHNvIHJlc2l6ZSArIG1vdmVcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoICsgZGlmZik7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICAgICAgdmlldy5zZXQodGhpcy52aWV3LnN1YmFycmF5KG9mZnNldCwgdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCksIGxlbik7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBkaWZmO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXJrZWRPZmZzZXQgPj0gMCkgdGhpcy5tYXJrZWRPZmZzZXQgKz0gZGlmZjtcclxuICAgICAgICAgICAgdGhpcy5saW1pdCArPSBkaWZmO1xyXG4gICAgICAgICAgICBvZmZzZXQgKz0gZGlmZjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYXJyYXlWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcuc2V0KHNvdXJjZS52aWV3LnN1YmFycmF5KHNvdXJjZS5vZmZzZXQsIHNvdXJjZS5saW1pdCksIG9mZnNldCAtIGxlbik7XHJcblxyXG4gICAgICAgIHNvdXJjZS5vZmZzZXQgPSBzb3VyY2UubGltaXQ7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlKVxyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJlcGVuZHMgdGhpcyBCeXRlQnVmZmVyIHRvIGFub3RoZXIgQnl0ZUJ1ZmZlci4gVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgY29udGVudHMgYmVmb3JlIHRoZSBzcGVjaWZpZWQgb2Zmc2V0IHVwIHRvIHRoZVxyXG4gICAgICogIHByZXBlbmRlZCBkYXRhJ3MgbGVuZ3RoLiBJZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSBiZWZvcmUgdGhlIHNwZWNpZmllZCBgb2Zmc2V0YCwgdGhlIGJhY2tpbmcgYnVmZmVyXHJcbiAgICAgKiAgd2lsbCBiZSByZXNpemVkIGFuZCBpdHMgY29udGVudHMgbW92ZWQgYWNjb3JkaW5nbHkuXHJcbiAgICAgKiBAcGFyYW0geyFCeXRlQnVmZmVyfSB0YXJnZXQgVGFyZ2V0IEJ5dGVCdWZmZXJcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBwcmVwZW5kIGF0LiBXaWxsIHVzZSBhbmQgZGVjcmVhc2Uge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBieSB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiAgcHJlcGVuZGVkIGlmIG9taXR0ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqIEBzZWUgQnl0ZUJ1ZmZlciNwcmVwZW5kXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUucHJlcGVuZFRvID0gZnVuY3Rpb24odGFyZ2V0LCBvZmZzZXQpIHtcclxuICAgICAgICB0YXJnZXQucHJlcGVuZCh0aGlzLCBvZmZzZXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJpbnRzIGRlYnVnIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzLlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpPX0gb3V0IE91dHB1dCBmdW5jdGlvbiB0byBjYWxsLCBkZWZhdWx0cyB0byBjb25zb2xlLmxvZ1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnByaW50RGVidWcgPSBmdW5jdGlvbihvdXQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG91dCAhPT0gJ2Z1bmN0aW9uJykgb3V0ID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcclxuICAgICAgICBvdXQoXHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJpbmcoKStcIlxcblwiK1xyXG4gICAgICAgICAgICBcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cIitcclxuICAgICAgICAgICAgdGhpcy50b0RlYnVnKC8qIGNvbHVtbnMgKi8gdHJ1ZSlcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG51bWJlciBvZiByZW1haW5pbmcgcmVhZGFibGUgYnl0ZXMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlbiB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZFxyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fSwgc28gdGhpcyByZXR1cm5zIGBsaW1pdCAtIG9mZnNldGAuXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZW1haW5pbmcgcmVhZGFibGUgYnl0ZXMuIE1heSBiZSBuZWdhdGl2ZSBpZiBgb2Zmc2V0ID4gbGltaXRgLlxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlbWFpbmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpbWl0IC0gdGhpcy5vZmZzZXQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgdGhpcyBCeXRlQnVmZmVyJ3Mge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS4gSWYgYW4gb2Zmc2V0IGhhcyBiZWVuIG1hcmtlZCB0aHJvdWdoIHtAbGluayBCeXRlQnVmZmVyI21hcmt9XHJcbiAgICAgKiAgYmVmb3JlLCBgb2Zmc2V0YCB3aWxsIGJlIHNldCB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNtYXJrZWRPZmZzZXR9LCB3aGljaCB3aWxsIHRoZW4gYmUgZGlzY2FyZGVkLiBJZiBubyBvZmZzZXQgaGFzIGJlZW5cclxuICAgICAqICBtYXJrZWQsIHNldHMgYG9mZnNldCA9IDBgLlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjbWFya1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubWFya2VkT2Zmc2V0ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLm1hcmtlZE9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5tYXJrZWRPZmZzZXQgPSAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplcyB0aGlzIEJ5dGVCdWZmZXIgdG8gYmUgYmFja2VkIGJ5IGEgYnVmZmVyIG9mIGF0IGxlYXN0IHRoZSBnaXZlbiBjYXBhY2l0eS4gV2lsbCBkbyBub3RoaW5nIGlmIGFscmVhZHkgdGhhdFxyXG4gICAgICogIGxhcmdlIG9yIGxhcmdlci5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjYXBhY2l0eSBDYXBhY2l0eSByZXF1aXJlZFxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSB0aGlzXHJcbiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBjYXBhY2l0eWAgaXMgbm90IGEgbnVtYmVyXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgY2FwYWNpdHkgPCAwYFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKGNhcGFjaXR5KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FwYWNpdHkgIT09ICdudW1iZXInIHx8IGNhcGFjaXR5ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNhcGFjaXR5OiBcIitjYXBhY2l0eStcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgY2FwYWNpdHkgfD0gMDtcbiAgICAgICAgICAgIGlmIChjYXBhY2l0eSA8IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBjYXBhY2l0eTogMCA8PSBcIitjYXBhY2l0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoIDwgY2FwYWNpdHkpIHtcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihjYXBhY2l0eSk7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICAgICAgdmlldy5zZXQodGhpcy52aWV3KTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV2ZXJzZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBzdGFydCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9XHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IHRoaXNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKSBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgfHwgYmVnaW4gJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgYmVnaW46IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgYmVnaW4gPj4+PSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IGVuZCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBlbmQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgZW5kID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiZWdpbiA8IDAgfHwgYmVnaW4gPiBlbmQgfHwgZW5kID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitiZWdpbitcIiA8PSBcIitlbmQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYmVnaW4gPT09IGVuZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIE5vdGhpbmcgdG8gcmV2ZXJzZVxyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5yZXZlcnNlLmNhbGwodGhpcy52aWV3LnN1YmFycmF5KGJlZ2luLCBlbmQpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNraXBzIHRoZSBuZXh0IGBsZW5ndGhgIGJ5dGVzLiBUaGlzIHdpbGwganVzdCBhZHZhbmNlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIE51bWJlciBvZiBieXRlcyB0byBza2lwLiBNYXkgYWxzbyBiZSBuZWdhdGl2ZSB0byBtb3ZlIHRoZSBvZmZzZXQgYmFjay5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gdGhpc1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbihsZW5ndGgpIHtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBsZW5ndGg6IFwiK2xlbmd0aCtcIiAobm90IGFuIGludGVnZXIpXCIpO1xuICAgICAgICAgICAgbGVuZ3RoIHw9IDA7XG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyBsZW5ndGg7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCBsZW5ndGg6IDAgPD0gXCIrdGhpcy5vZmZzZXQrXCIgKyBcIitsZW5ndGgrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNsaWNlcyB0aGlzIEJ5dGVCdWZmZXIgYnkgY3JlYXRpbmcgYSBjbG9uZWQgaW5zdGFuY2Ugd2l0aCBgb2Zmc2V0ID0gYmVnaW5gIGFuZCBgbGltaXQgPSBlbmRgLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBiZWdpbiBCZWdpbiBvZmZzZXQsIGRlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGVuZCBFbmQgb2Zmc2V0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IENsb25lIG9mIHRoaXMgQnl0ZUJ1ZmZlciB3aXRoIHNsaWNpbmcgYXBwbGllZCwgYmFja2VkIGJ5IHRoZSBzYW1lIHtAbGluayBCeXRlQnVmZmVyI2J1ZmZlcn1cclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJiID0gdGhpcy5jbG9uZSgpO1xyXG4gICAgICAgIGJiLm9mZnNldCA9IGJlZ2luO1xyXG4gICAgICAgIGJiLmxpbWl0ID0gZW5kO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBiYWNraW5nIGJ1ZmZlciB0aGF0IGNvbnRhaW5zIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzLiBDb250ZW50cyBhcmUgdGhlIGJ5dGVzIGJldHdlZW5cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9IGFuZCB7QGxpbmsgQnl0ZUJ1ZmZlciNsaW1pdH0uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBmb3JjZUNvcHkgSWYgYHRydWVgIHJldHVybnMgYSBjb3B5LCBvdGhlcndpc2UgcmV0dXJucyBhIHZpZXcgcmVmZXJlbmNpbmcgdGhlIHNhbWUgbWVtb3J5IGlmXHJcbiAgICAgKiAgcG9zc2libGUuIERlZmF1bHRzIHRvIGBmYWxzZWBcclxuICAgICAqIEByZXR1cm5zIHshQXJyYXlCdWZmZXJ9IENvbnRlbnRzIGFzIGFuIEFycmF5QnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXJQcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbihmb3JjZUNvcHkpIHtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQsXHJcbiAgICAgICAgICAgIGxpbWl0ID0gdGhpcy5saW1pdDtcclxuICAgICAgICBpZiAoIXRoaXMubm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBvZmZzZXQ6IE5vdCBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgICAgb2Zmc2V0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGltaXQgIT09ICdudW1iZXInIHx8IGxpbWl0ICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGxpbWl0OiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGxpbWl0ID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGxpbWl0IHx8IGxpbWl0ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogMCA8PSBcIitvZmZzZXQrXCIgPD0gXCIrbGltaXQrXCIgPD0gXCIrdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cclxuICAgICAgICAvLyBOT1RFOiBJdCdzIG5vdCBwb3NzaWJsZSB0byBoYXZlIGFub3RoZXIgQXJyYXlCdWZmZXIgcmVmZXJlbmNlIHRoZSBzYW1lIG1lbW9yeSBhcyB0aGUgYmFja2luZyBidWZmZXIuIFRoaXMgaXNcclxuICAgICAgICAvLyBwb3NzaWJsZSB3aXRoIFVpbnQ4QXJyYXkjc3ViYXJyYXkgb25seSwgYnV0IHdlIGhhdmUgdG8gcmV0dXJuIGFuIEFycmF5QnVmZmVyIGJ5IGNvbnRyYWN0LiBTbzpcclxuICAgICAgICBpZiAoIWZvcmNlQ29weSAmJiBvZmZzZXQgPT09IDAgJiYgbGltaXQgPT09IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICBpZiAob2Zmc2V0ID09PSBsaW1pdClcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGxpbWl0IC0gb2Zmc2V0KTtcclxuICAgICAgICBuZXcgVWludDhBcnJheShidWZmZXIpLnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikuc3ViYXJyYXkob2Zmc2V0LCBsaW1pdCksIDApO1xyXG4gICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHJhdyBidWZmZXIgY29tcGFjdGVkIHRvIGNvbnRhaW4gdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMuIENvbnRlbnRzIGFyZSB0aGUgYnl0ZXMgYmV0d2VlblxyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyI29mZnNldH0gYW5kIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgQnl0ZUJ1ZmZlciN0b0J1ZmZlcn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZvcmNlQ29weSBJZiBgdHJ1ZWAgcmV0dXJucyBhIGNvcHksIG90aGVyd2lzZSByZXR1cm5zIGEgdmlldyByZWZlcmVuY2luZyB0aGUgc2FtZSBtZW1vcnkuXHJcbiAgICAgKiAgRGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMgeyFBcnJheUJ1ZmZlcn0gQ29udGVudHMgYXMgYW4gQXJyYXlCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0J1ZmZlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBCeXRlQnVmZmVyJ3MgY29udGVudHMgdG8gYSBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGVuY29kaW5nIE91dHB1dCBlbmNvZGluZy4gUmV0dXJucyBhbiBpbmZvcm1hdGl2ZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gaWYgb21pdHRlZCBidXQgYWxzbyBhbGxvd3NcclxuICAgICAqICBkaXJlY3QgY29udmVyc2lvbiB0byBcInV0ZjhcIiwgXCJoZXhcIiwgXCJiYXNlNjRcIiBhbmQgXCJiaW5hcnlcIiBlbmNvZGluZy4gXCJkZWJ1Z1wiIHJldHVybnMgYSBoZXggcmVwcmVzZW50YXRpb24gd2l0aFxyXG4gICAgICogIGhpZ2hsaWdodGVkIG9mZnNldHMuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBiZWdpbiBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb25cclxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgZW5jb2RpbmdgIGlzIGludmFsaWRcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKGVuY29kaW5nLCBiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIHJldHVybiBcIkJ5dGVCdWZmZXJBQihvZmZzZXQ9XCIrdGhpcy5vZmZzZXQrXCIsbWFya2VkT2Zmc2V0PVwiK3RoaXMubWFya2VkT2Zmc2V0K1wiLGxpbWl0PVwiK3RoaXMubGltaXQrXCIsY2FwYWNpdHk9XCIrdGhpcy5jYXBhY2l0eSgpK1wiKVwiO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICBlbmNvZGluZyA9IFwidXRmOFwiLFxyXG4gICAgICAgICAgICBiZWdpbiA9IGVuY29kaW5nLFxyXG4gICAgICAgICAgICBlbmQgPSBiZWdpbjtcclxuICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1dGY4XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b1VURjgoYmVnaW4sIGVuZCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQmFzZTY0KGJlZ2luLCBlbmQpO1xyXG4gICAgICAgICAgICBjYXNlIFwiaGV4XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0hleChiZWdpbiwgZW5kKTtcclxuICAgICAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9CaW5hcnkoYmVnaW4sIGVuZCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWJ1Z1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EZWJ1ZygpO1xyXG4gICAgICAgICAgICBjYXNlIFwiY29sdW1uc1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9Db2x1bW5zKCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIlVuc3VwcG9ydGVkIGVuY29kaW5nOiBcIitlbmNvZGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBseGl2LWVtYmVkZGFibGVcclxuXHJcbiAgICAvKipcclxuICAgICAqIGx4aXYtZW1iZWRkYWJsZSAoYykgMjAxNCBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxyXG4gICAgICogc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9seGl2IGZvciBkZXRhaWxzXHJcbiAgICAgKi9cclxuICAgIHZhciBseGl2ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGx4aXYgbmFtZXNwYWNlLlxyXG4gICAgICAgICAqIEB0eXBlIHshT2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgICAgICogQGV4cG9ydHMgbHhpdlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBseGl2ID0ge307XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoYXJhY3RlciBjb2RlcyBmb3Igb3V0cHV0LlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXkuPG51bWJlcj59XHJcbiAgICAgICAgICogQGlubmVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGFvdXQgPSBbXHJcbiAgICAgICAgICAgIDY1LCA2NiwgNjcsIDY4LCA2OSwgNzAsIDcxLCA3MiwgNzMsIDc0LCA3NSwgNzYsIDc3LCA3OCwgNzksIDgwLFxyXG4gICAgICAgICAgICA4MSwgODIsIDgzLCA4NCwgODUsIDg2LCA4NywgODgsIDg5LCA5MCwgOTcsIDk4LCA5OSwgMTAwLCAxMDEsIDEwMixcclxuICAgICAgICAgICAgMTAzLCAxMDQsIDEwNSwgMTA2LCAxMDcsIDEwOCwgMTA5LCAxMTAsIDExMSwgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LFxyXG4gICAgICAgICAgICAxMTksIDEyMCwgMTIxLCAxMjIsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA0MywgNDdcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGFyYWN0ZXIgY29kZXMgZm9yIGlucHV0LlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXkuPG51bWJlcj59XHJcbiAgICAgICAgICogQGlubmVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGFpbiA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGk9MCwgaz1hb3V0Lmxlbmd0aDsgaTxrOyArK2kpXHJcbiAgICAgICAgICAgIGFpblthb3V0W2ldXSA9IGk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVuY29kZXMgYnl0ZXMgdG8gYmFzZTY0IGNoYXIgY29kZXMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIEJ5dGVzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBieXRlIHJlc3BlY3RpdmVseSBgbnVsbGAgaWZcclxuICAgICAgICAgKiAgdGhlcmUgYXJlIG5vIG1vcmUgYnl0ZXMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ2hhcmFjdGVycyBkZXN0aW5hdGlvbiBhcyBhIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCBlYWNoIGVuY29kZWQgY2hhclxyXG4gICAgICAgICAqICBjb2RlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGx4aXYuZW5jb2RlID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdmFyIGIsIHQ7XHJcbiAgICAgICAgICAgIHdoaWxlICgoYiA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZHN0KGFvdXRbKGI+PjIpJjB4M2ZdKTtcclxuICAgICAgICAgICAgICAgIHQgPSAoYiYweDMpPDw0O1xyXG4gICAgICAgICAgICAgICAgaWYgKChiID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCB8PSAoYj4+NCkmMHhmO1xyXG4gICAgICAgICAgICAgICAgICAgIGRzdChhb3V0Wyh0fCgoYj4+NCkmMHhmKSkmMHgzZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSAoYiYweGYpPDwyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYiA9IHNyYygpKSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbKHR8KChiPj42KSYweDMpKSYweDNmXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdChhb3V0W2ImMHgzZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN0KGFvdXRbdCYweDNmXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCg2MSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkc3QoYW91dFt0JjB4M2ZdKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoNjEpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCg2MSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGJhc2U2NCBjaGFyIGNvZGVzIHRvIGJ5dGVzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6bnVtYmVyfG51bGx9IHNyYyBDaGFyYWN0ZXJzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjaGFyIGNvZGUgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICogIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjaGFyYWN0ZXJzIGxlZnQuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyKX0gZHN0IEJ5dGVzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIHRoZSBuZXh0IGJ5dGUuXHJcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIGEgY2hhcmFjdGVyIGNvZGUgaXMgaW52YWxpZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGx4aXYuZGVjb2RlID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdmFyIGMsIHQxLCB0MjtcclxuICAgICAgICAgICAgZnVuY3Rpb24gZmFpbChjKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIklsbGVnYWwgY2hhcmFjdGVyIGNvZGU6IFwiK2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdDEgPSBhaW5bY107XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQxID09PSAndW5kZWZpbmVkJykgZmFpbChjKTtcclxuICAgICAgICAgICAgICAgIGlmICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQyID0gYWluW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdDIgPT09ICd1bmRlZmluZWQnKSBmYWlsKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgodDE8PDIpPj4+MHwodDImMHgzMCk+PjQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYyA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0MSA9IGFpbltjXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0MSA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gNjEpIGJyZWFrOyBlbHNlIGZhaWwoYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoKHQyJjB4Zik8PDQpPj4+MHwodDEmMHgzYyk+PjIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGMgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQyID0gYWluW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0MiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IDYxKSBicmVhazsgZWxzZSBmYWlsKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KCgodDEmMHgzKTw8Nik+Pj4wfHQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIHZhbGlkIGJhc2U2NC5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byB0ZXN0XHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICAgICAgICAgKi9cclxuICAgICAgICBseGl2LnRlc3QgPSBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC9eKD86W0EtWmEtejAtOSsvXXs0fSkqKD86W0EtWmEtejAtOSsvXXsyfT09fFtBLVphLXowLTkrL117M309KT8kLy50ZXN0KHN0cik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGx4aXY7XHJcbiAgICB9KCk7XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL2Jhc2U2NFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5jb2RlcyB0aGlzIEJ5dGVCdWZmZXIncyBjb250ZW50cyB0byBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW4gT2Zmc2V0IHRvIGJlZ2luIGF0LCBkZWZhdWx0cyB0byB7QGxpbmsgQnl0ZUJ1ZmZlciNvZmZzZXR9LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBlbmQgT2Zmc2V0IHRvIGVuZCBhdCwgZGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9LlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgYmVnaW5gIG9yIGBlbmRgIGlzIG91dCBvZiBib3VuZHNcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlclByb3RvdHlwZS50b0Jhc2U2NCA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgYmVnaW4gPSBiZWdpbiB8IDA7IGVuZCA9IGVuZCB8IDA7XHJcbiAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBlbmQgPiB0aGlzLmNhcGFjaXR5IHx8IGJlZ2luID4gZW5kKVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiYmVnaW4sIGVuZFwiKTtcclxuICAgICAgICB2YXIgc2Q7IGx4aXYuZW5jb2RlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYmVnaW4gPCBlbmQgPyB0aGlzLnZpZXdbYmVnaW4rK10gOiBudWxsO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgc2QgPSBzdHJpbmdEZXN0aW5hdGlvbigpKTtcclxuICAgICAgICByZXR1cm4gc2QoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGRlY29kZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuZnJvbUJhc2U2NCA9IGZ1bmN0aW9uKHN0ciwgbGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJzdHJcIik7XHJcbiAgICAgICAgdmFyIGJiID0gbmV3IEJ5dGVCdWZmZXIoc3RyLmxlbmd0aC80KjMsIGxpdHRsZUVuZGlhbiksXHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIGx4aXYuZGVjb2RlKHN0cmluZ1NvdXJjZShzdHIpLCBmdW5jdGlvbihiKSB7XHJcbiAgICAgICAgICAgIGJiLnZpZXdbaSsrXSA9IGI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmIubGltaXQgPSBpO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVzIGEgYmluYXJ5IHN0cmluZyB0byBiYXNlNjQgbGlrZSBgd2luZG93LmJ0b2FgIGRvZXMuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIEJpbmFyeSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93LmJ0b2FcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5idG9hID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ5dGVCdWZmZXIuZnJvbUJpbmFyeShzdHIpLnRvQmFzZTY0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjb2RlcyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB0byBiaW5hcnkgbGlrZSBgd2luZG93LmF0b2JgIGRvZXMuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYjY0IEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmluYXJ5IHN0cmluZ1xyXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93LmF0b2JcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5hdG9iID0gZnVuY3Rpb24oYjY0KSB7XHJcbiAgICAgICAgcmV0dXJuIEJ5dGVCdWZmZXIuZnJvbUJhc2U2NChiNjQpLnRvQmluYXJ5KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGVuY29kaW5ncy9iaW5hcnlcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyIHRvIGEgYmluYXJ5IGVuY29kZWQgc3RyaW5nLCB0aGF0IGlzIHVzaW5nIG9ubHkgY2hhcmFjdGVycyAweDAwLTB4RkYgYXMgYnl0ZXMuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBiZWdpbiBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIE9mZnNldCB0byBlbmQgYXQuIERlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJpbmFyeSBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldCA+IGxpbWl0YFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvQmluYXJ5ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICBiZWdpbiA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgZW5kID0gdGhpcy5saW1pdDtcclxuICAgICAgICBiZWdpbiB8PSAwOyBlbmQgfD0gMDtcclxuICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGVuZCA+IHRoaXMuY2FwYWNpdHkoKSB8fCBiZWdpbiA+IGVuZClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcImJlZ2luLCBlbmRcIik7XHJcbiAgICAgICAgaWYgKGJlZ2luID09PSBlbmQpXHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIHZhciBjaGFycyA9IFtdLFxyXG4gICAgICAgICAgICBwYXJ0cyA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChiZWdpbiA8IGVuZCkge1xyXG4gICAgICAgICAgICBjaGFycy5wdXNoKHRoaXMudmlld1tiZWdpbisrXSk7XHJcbiAgICAgICAgICAgIGlmIChjaGFycy5sZW5ndGggPj0gMTAyNClcclxuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNoYXJzKSksXHJcbiAgICAgICAgICAgICAgICBjaGFycyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFydHMuam9pbignJykgKyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2hhcnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSBiaW5hcnkgZW5jb2RlZCBzdHJpbmcsIHRoYXQgaXMgdXNpbmcgb25seSBjaGFyYWN0ZXJzIDB4MDAtMHhGRiBhcyBieXRlcywgdG8gYSBCeXRlQnVmZmVyLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gZGVjb2RlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsaXR0bGVFbmRpYW4gV2hldGhlciB0byB1c2UgbGl0dGxlIG9yIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX0VORElBTn0uXHJcbiAgICAgKiBAcmV0dXJucyB7IUJ5dGVCdWZmZXJ9IEJ5dGVCdWZmZXJcclxuICAgICAqIEBleHBvc2VcclxuICAgICAqL1xyXG4gICAgQnl0ZUJ1ZmZlci5mcm9tQmluYXJ5ID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcInN0clwiKTtcclxuICAgICAgICB2YXIgaSA9IDAsXHJcbiAgICAgICAgICAgIGsgPSBzdHIubGVuZ3RoLFxyXG4gICAgICAgICAgICBjaGFyQ29kZSxcclxuICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcihrLCBsaXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHdoaWxlIChpPGspIHtcclxuICAgICAgICAgICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgaWYgKGNoYXJDb2RlID4gMHhmZilcclxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJpbGxlZ2FsIGNoYXIgY29kZTogXCIrY2hhckNvZGUpO1xyXG4gICAgICAgICAgICBiYi52aWV3W2krK10gPSBjaGFyQ29kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmIubGltaXQgPSBrO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZW5jb2RpbmdzL2RlYnVnXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVzIHRoaXMgQnl0ZUJ1ZmZlciB0byBhIGhleCBlbmNvZGVkIHN0cmluZyB3aXRoIG1hcmtlZCBvZmZzZXRzLiBPZmZzZXQgc3ltYm9scyBhcmU6XHJcbiAgICAgKiAqIGA8YCA6IG9mZnNldCxcclxuICAgICAqICogYCdgIDogbWFya2VkT2Zmc2V0LFxyXG4gICAgICogKiBgPmAgOiBsaW1pdCxcclxuICAgICAqICogYHxgIDogb2Zmc2V0IGFuZCBsaW1pdCxcclxuICAgICAqICogYFtgIDogb2Zmc2V0IGFuZCBtYXJrZWRPZmZzZXQsXHJcbiAgICAgKiAqIGBdYCA6IG1hcmtlZE9mZnNldCBhbmQgbGltaXQsXHJcbiAgICAgKiAqIGAhYCA6IG9mZnNldCwgbWFya2VkT2Zmc2V0IGFuZCBsaW1pdFxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gY29sdW1ucyBJZiBgdHJ1ZWAgcmV0dXJucyB0d28gY29sdW1ucyBoZXggKyBhc2NpaSwgZGVmYXVsdHMgdG8gYGZhbHNlYFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3whQXJyYXkuPHN0cmluZz59IERlYnVnIHN0cmluZyBvciBhcnJheSBvZiBsaW5lcyBpZiBgYXNBcnJheSA9IHRydWVgXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAZXhhbXBsZSBgPjAwJzAxIDAyPDAzYCBjb250YWlucyBmb3VyIGJ5dGVzIHdpdGggYGxpbWl0PTAsIG1hcmtlZE9mZnNldD0xLCBvZmZzZXQ9M2BcclxuICAgICAqIEBleGFtcGxlIGAwMFswMSAwMiAwMz5gIGNvbnRhaW5zIGZvdXIgYnl0ZXMgd2l0aCBgb2Zmc2V0PW1hcmtlZE9mZnNldD0xLCBsaW1pdD00YFxyXG4gICAgICogQGV4YW1wbGUgYDAwfDAxIDAyIDAzYCBjb250YWlucyBmb3VyIGJ5dGVzIHdpdGggYG9mZnNldD1saW1pdD0xLCBtYXJrZWRPZmZzZXQ9LTFgXHJcbiAgICAgKiBAZXhhbXBsZSBgfGAgY29udGFpbnMgemVybyBieXRlcyB3aXRoIGBvZmZzZXQ9bGltaXQ9MCwgbWFya2VkT2Zmc2V0PS0xYFxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvRGVidWcgPSBmdW5jdGlvbihjb2x1bW5zKSB7XHJcbiAgICAgICAgdmFyIGkgPSAtMSxcclxuICAgICAgICAgICAgayA9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgsXHJcbiAgICAgICAgICAgIGIsXHJcbiAgICAgICAgICAgIGhleCA9IFwiXCIsXHJcbiAgICAgICAgICAgIGFzYyA9IFwiXCIsXHJcbiAgICAgICAgICAgIG91dCA9IFwiXCI7XHJcbiAgICAgICAgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLnZpZXdbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYiA8IDB4MTApIGhleCArPSBcIjBcIitiLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBoZXggKz0gYi50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zKVxyXG4gICAgICAgICAgICAgICAgICAgIGFzYyArPSBiID4gMzIgJiYgYiA8IDEyNyA/IFN0cmluZy5mcm9tQ2hhckNvZGUoYikgOiAnLic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBpZiAoY29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwICYmIGkgJSAxNiA9PT0gMCAmJiBpICE9PSBrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGhleC5sZW5ndGggPCAzKjE2KzMpIGhleCArPSBcIiBcIjtcclxuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gaGV4K2FzYytcIlxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGhleCA9IGFzYyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMub2Zmc2V0ICYmIGkgPT09IHRoaXMubGltaXQpXHJcbiAgICAgICAgICAgICAgICBoZXggKz0gaSA9PT0gdGhpcy5tYXJrZWRPZmZzZXQgPyBcIiFcIiA6IFwifFwiO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChpID09PSB0aGlzLm9mZnNldClcclxuICAgICAgICAgICAgICAgIGhleCArPSBpID09PSB0aGlzLm1hcmtlZE9mZnNldCA/IFwiW1wiIDogXCI8XCI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IHRoaXMubGltaXQpXHJcbiAgICAgICAgICAgICAgICBoZXggKz0gaSA9PT0gdGhpcy5tYXJrZWRPZmZzZXQgPyBcIl1cIiA6IFwiPlwiO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBoZXggKz0gaSA9PT0gdGhpcy5tYXJrZWRPZmZzZXQgPyBcIidcIiA6IChjb2x1bW5zIHx8IChpICE9PSAwICYmIGkgIT09IGspID8gXCIgXCIgOiBcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbHVtbnMgJiYgaGV4ICE9PSBcIiBcIikge1xyXG4gICAgICAgICAgICB3aGlsZSAoaGV4Lmxlbmd0aCA8IDMqMTYrMylcclxuICAgICAgICAgICAgICAgIGhleCArPSBcIiBcIjtcclxuICAgICAgICAgICAgb3V0ICs9IGhleCArIGFzYyArIFwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb2x1bW5zID8gb3V0IDogaGV4O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYSBoZXggZW5jb2RlZCBzdHJpbmcgd2l0aCBtYXJrZWQgb2Zmc2V0cyB0byBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIERlYnVnIHN0cmluZyB0byBkZWNvZGUgKG5vdCBiZSBnZW5lcmF0ZWQgd2l0aCBgY29sdW1ucyA9IHRydWVgKVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKiBAc2VlIEJ5dGVCdWZmZXIjdG9EZWJ1Z1xyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmZyb21EZWJ1ZyA9IGZ1bmN0aW9uKHN0ciwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIHZhciBrID0gc3RyLmxlbmd0aCxcclxuICAgICAgICAgICAgYmIgPSBuZXcgQnl0ZUJ1ZmZlcigoKGsrMSkvMyl8MCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCk7XHJcbiAgICAgICAgdmFyIGkgPSAwLCBqID0gMCwgY2gsIGIsXHJcbiAgICAgICAgICAgIHJzID0gZmFsc2UsIC8vIFJlcXVpcmUgc3ltYm9sIG5leHRcclxuICAgICAgICAgICAgaG8gPSBmYWxzZSwgaG0gPSBmYWxzZSwgaGwgPSBmYWxzZSwgLy8gQWxyZWFkeSBoYXMgb2Zmc2V0IChobyksIG1hcmtlZE9mZnNldCAoaG0pLCBsaW1pdCAoaGwpP1xyXG4gICAgICAgICAgICBmYWlsID0gZmFsc2U7XHJcbiAgICAgICAgd2hpbGUgKGk8aykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNoID0gc3RyLmNoYXJBdChpKyspKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICchJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobyB8fCBobSB8fCBobCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBobyA9IGhtID0gaGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSBiYi5tYXJrZWRPZmZzZXQgPSBiYi5saW1pdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3wnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvIHx8IGhsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gaGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSBiYi5saW1pdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1snOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvIHx8IGhtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvID0gaG0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5vZmZzZXQgPSBiYi5tYXJrZWRPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIHJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICc8JzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBobyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLm9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ10nOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhsIHx8IGhtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhsID0gaG0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBiYi5saW1pdCA9IGJiLm1hcmtlZE9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJz4nOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmIubGltaXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIHJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiJ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhtID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmIubWFya2VkT2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnICc6XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub0Fzc2VydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYiA9IHBhcnNlSW50KGNoK3N0ci5jaGFyQXQoaSsrKSwgMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGIpIHx8IGIgPCAwIHx8IGIgPiAyNTUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIHN0cjogTm90IGEgZGVidWcgZW5jb2RlZCBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJiLnZpZXdbaisrXSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmYWlsKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IEludmFsaWQgc3ltYm9sIGF0IFwiK2kpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICghaG8gfHwgIWhsKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE1pc3Npbmcgb2Zmc2V0IG9yIGxpbWl0XCIpO1xyXG4gICAgICAgICAgICBpZiAoajxiYi5idWZmZXIuYnl0ZUxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgc3RyOiBOb3QgYSBkZWJ1ZyBlbmNvZGVkIHN0cmluZyAoaXMgaXQgaGV4PykgXCIraitcIiA8IFwiK2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYmI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGVuY29kaW5ncy9oZXhcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXMgdGhpcyBCeXRlQnVmZmVyJ3MgY29udGVudHMgdG8gYSBoZXggZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IGJlZ2luIE9mZnNldCB0byBiZWdpbiBhdC4gRGVmYXVsdHMgdG8ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kIE9mZnNldCB0byBlbmQgYXQuIERlZmF1bHRzIHRvIHtAbGluayBCeXRlQnVmZmVyI2xpbWl0fS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEhleCBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIGJlZ2luID0gdHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJyA/IHRoaXMub2Zmc2V0IDogYmVnaW47XHJcbiAgICAgICAgZW5kID0gdHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmxpbWl0IDogZW5kO1xyXG4gICAgICAgIGlmICghdGhpcy5ub0Fzc2VydCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyB8fCBiZWdpbiAlIDEgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBiZWdpbjogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBiZWdpbiA+Pj49IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgZW5kICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGVuZDogTm90IGFuIGludGVnZXJcIik7XG4gICAgICAgICAgICBlbmQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKGJlZ2luIDwgMCB8fCBiZWdpbiA+IGVuZCB8fCBlbmQgPiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHJhbmdlOiAwIDw9IFwiK2JlZ2luK1wiIDw9IFwiK2VuZCtcIiA8PSBcIit0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQXJyYXkoZW5kIC0gYmVnaW4pLFxyXG4gICAgICAgICAgICBiO1xyXG4gICAgICAgIHdoaWxlIChiZWdpbiA8IGVuZCkge1xyXG4gICAgICAgICAgICBiID0gdGhpcy52aWV3W2JlZ2luKytdO1xyXG4gICAgICAgICAgICBpZiAoYiA8IDB4MTApXHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaChcIjBcIiwgYi50b1N0cmluZygxNikpO1xyXG4gICAgICAgICAgICBlbHNlIG91dC5wdXNoKGIudG9TdHJpbmcoMTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dC5qb2luKCcnKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNvZGVzIGEgaGV4IGVuY29kZWQgc3RyaW5nIHRvIGEgQnl0ZUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGRlY29kZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbGl0dGxlRW5kaWFuIFdoZXRoZXIgdG8gdXNlIGxpdHRsZSBvciBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuIERlZmF1bHRzIHRvXHJcbiAgICAgKiAge0BsaW5rIEJ5dGVCdWZmZXIuREVGQVVMVF9FTkRJQU59LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbm9Bc3NlcnQgV2hldGhlciB0byBza2lwIGFzc2VydGlvbnMgb2Ygb2Zmc2V0cyBhbmQgdmFsdWVzLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfTk9BU1NFUlR9LlxyXG4gICAgICogQHJldHVybnMgeyFCeXRlQnVmZmVyfSBCeXRlQnVmZmVyXHJcbiAgICAgKiBAZXhwb3NlXHJcbiAgICAgKi9cclxuICAgIEJ5dGVCdWZmZXIuZnJvbUhleCA9IGZ1bmN0aW9uKHN0ciwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xyXG4gICAgICAgIGlmICghbm9Bc3NlcnQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgaWYgKHN0ci5sZW5ndGggJSAyICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IExlbmd0aCBub3QgYSBtdWx0aXBsZSBvZiAyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgayA9IHN0ci5sZW5ndGgsXHJcbiAgICAgICAgICAgIGJiID0gbmV3IEJ5dGVCdWZmZXIoKGsgLyAyKSB8IDAsIGxpdHRsZUVuZGlhbiksXHJcbiAgICAgICAgICAgIGI7XHJcbiAgICAgICAgZm9yICh2YXIgaT0wLCBqPTA7IGk8azsgaSs9Mikge1xyXG4gICAgICAgICAgICBiID0gcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhpLCBpKzIpLCAxNik7XHJcbiAgICAgICAgICAgIGlmICghbm9Bc3NlcnQpXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGIpIHx8IGIgPCAwIHx8IGIgPiAyNTUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IENvbnRhaW5zIG5vbi1oZXggY2hhcmFjdGVyc1wiKTtcclxuICAgICAgICAgICAgYmIudmlld1tqKytdID0gYjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmIubGltaXQgPSBqO1xyXG4gICAgICAgIHJldHVybiBiYjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gdXRmeC1lbWJlZGRhYmxlXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB1dGZ4LWVtYmVkZGFibGUgKGMpIDIwMTQgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjBcclxuICAgICAqIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vdXRmeCBmb3IgZGV0YWlsc1xyXG4gICAgICovXHJcbiAgICB2YXIgdXRmeCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB1dGZ4IG5hbWVzcGFjZS5cclxuICAgICAgICAgKiBAaW5uZXJcclxuICAgICAgICAgKiBAdHlwZSB7IU9iamVjdC48c3RyaW5nLCo+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciB1dGZ4ID0ge307XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1heGltdW0gdmFsaWQgY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBjb25zdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguTUFYX0NPREVQT0lOVCA9IDB4MTBGRkZGO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFbmNvZGVzIFVURjggY29kZSBwb2ludHMgdG8gVVRGOCBieXRlcy5cclxuICAgICAgICAgKiBAcGFyYW0geyghZnVuY3Rpb24oKTpudW1iZXJ8bnVsbCkgfCBudW1iZXJ9IHNyYyBDb2RlIHBvaW50cyBzb3VyY2UsIGVpdGhlciBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjb2RlIHBvaW50XHJcbiAgICAgICAgICogIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY29kZSBwb2ludHMgbGVmdCBvciBhIHNpbmdsZSBudW1lcmljIGNvZGUgcG9pbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyKX0gZHN0IEJ5dGVzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIHRoZSBuZXh0IGJ5dGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmVuY29kZVVURjggPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgY3AgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICBjcCA9IHNyYyxcclxuICAgICAgICAgICAgICAgIHNyYyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVsbDsgfTtcclxuICAgICAgICAgICAgd2hpbGUgKGNwICE9PSBudWxsIHx8IChjcCA9IHNyYygpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNwIDwgMHg4MClcclxuICAgICAgICAgICAgICAgICAgICBkc3QoY3AmMHg3Rik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjcCA8IDB4ODAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj42KSYweDFGKXwweEMwKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKGNwJjB4M0YpfDB4ODApO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY3AgPCAweDEwMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj4xMikmMHgwRil8MHhFMCksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjYpJjB4M0YpfDB4ODApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoY3AmMHgzRil8MHg4MCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoY3A+PjE4KSYweDA3KXwweEYwKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChjcD4+MTIpJjB4M0YpfDB4ODApLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGNwPj42KSYweDNGKXwweDgwKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKGNwJjB4M0YpfDB4ODApO1xyXG4gICAgICAgICAgICAgICAgY3AgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVjb2RlcyBVVEY4IGJ5dGVzIHRvIFVURjggY29kZSBwb2ludHMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIEJ5dGVzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBieXRlIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmVcclxuICAgICAgICAgKiAgYXJlIG5vIG1vcmUgYnl0ZXMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ29kZSBwb2ludHMgZGVzdGluYXRpb24gYXMgYSBmdW5jdGlvbiBzdWNjZXNzaXZlbHkgY2FsbGVkIHdpdGggZWFjaCBkZWNvZGVkIGNvZGUgcG9pbnQuXHJcbiAgICAgICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYSBzdGFydGluZyBieXRlIGlzIGludmFsaWQgaW4gVVRGOFxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgbGFzdCBzZXF1ZW5jZSBpcyB0cnVuY2F0ZWQuIEhhcyBhbiBhcnJheSBwcm9wZXJ0eSBgYnl0ZXNgIGhvbGRpbmcgdGhlXHJcbiAgICAgICAgICogIHJlbWFpbmluZyBieXRlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmRlY29kZVVURjggPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgYSwgYiwgYywgZCwgZmFpbCA9IGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgICAgIGIgPSBiLnNsaWNlKDAsIGIuaW5kZXhPZihudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoYi50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIGVyci5uYW1lID0gXCJUcnVuY2F0ZWRFcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgZXJyWydieXRlcyddID0gYjtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd2hpbGUgKChhID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGEmMHg4MCkgPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KGEpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKGEmMHhFMCkgPT09IDB4QzApXHJcbiAgICAgICAgICAgICAgICAgICAgKChiID0gc3JjKCkpID09PSBudWxsKSAmJiBmYWlsKFthLCBiXSksXHJcbiAgICAgICAgICAgICAgICAgICAgZHN0KCgoYSYweDFGKTw8NikgfCAoYiYweDNGKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYSYweEYwKSA9PT0gMHhFMClcclxuICAgICAgICAgICAgICAgICAgICAoKGI9c3JjKCkpID09PSBudWxsIHx8IChjPXNyYygpKSA9PT0gbnVsbCkgJiYgZmFpbChbYSwgYiwgY10pLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdCgoKGEmMHgwRik8PDEyKSB8ICgoYiYweDNGKTw8NikgfCAoYyYweDNGKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYSYweEY4KSA9PT0gMHhGMClcclxuICAgICAgICAgICAgICAgICAgICAoKGI9c3JjKCkpID09PSBudWxsIHx8IChjPXNyYygpKSA9PT0gbnVsbCB8fCAoZD1zcmMoKSkgPT09IG51bGwpICYmIGZhaWwoW2EsIGIsIGMgLGRdKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKChhJjB4MDcpPDwxOCkgfCAoKGImMHgzRik8PDEyKSB8ICgoYyYweDNGKTw8NikgfCAoZCYweDNGKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRocm93IFJhbmdlRXJyb3IoXCJJbGxlZ2FsIHN0YXJ0aW5nIGJ5dGU6IFwiK2EpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgVVRGMTYgY2hhcmFjdGVycyB0byBVVEY4IGNvZGUgcG9pbnRzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6bnVtYmVyfG51bGx9IHNyYyBDaGFyYWN0ZXJzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjaGFyIGNvZGUgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICogIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjaGFyYWN0ZXJzIGxlZnQuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyKX0gZHN0IENvZGUgcG9pbnRzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIGVhY2ggY29udmVydGVkIGNvZGVcclxuICAgICAgICAgKiAgcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5VVEYxNnRvVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHZhciBjMSwgYzIgPSBudWxsO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChjMSA9IGMyICE9PSBudWxsID8gYzIgOiBzcmMoKSkgPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZiAoYzEgPj0gMHhEODAwICYmIGMxIDw9IDB4REZGRikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoYzIgPSBzcmMoKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMyID49IDB4REMwMCAmJiBjMiA8PSAweERGRkYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzdCgoYzEtMHhEODAwKSoweDQwMCtjMi0weERDMDArMHgxMDAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMiA9IG51bGw7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZHN0KGMxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYzIgIT09IG51bGwpIGRzdChjMik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgVVRGOCBjb2RlIHBvaW50cyB0byBVVEYxNiBjaGFyYWN0ZXJzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKSB8IG51bWJlcn0gc3JjIENvZGUgcG9pbnRzIHNvdXJjZSwgZWl0aGVyIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNvZGUgcG9pbnRcclxuICAgICAgICAgKiAgcmVzcGVjdGl2ZWx5IGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjb2RlIHBvaW50cyBsZWZ0IG9yIGEgc2luZ2xlIG51bWVyaWMgY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ2hhcmFjdGVycyBkZXN0aW5hdGlvbiBhcyBhIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCBlYWNoIGNvbnZlcnRlZCBjaGFyIGNvZGUuXHJcbiAgICAgICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYSBjb2RlIHBvaW50IGlzIG91dCBvZiByYW5nZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHV0ZnguVVRGOHRvVVRGMTYgPSBmdW5jdGlvbihzcmMsIGRzdCkge1xyXG4gICAgICAgICAgICB2YXIgY3AgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICAgICBjcCA9IHNyYywgc3JjID0gZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgICAgICAgICB3aGlsZSAoY3AgIT09IG51bGwgfHwgKGNwID0gc3JjKCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3AgPD0gMHhGRkZGKVxyXG4gICAgICAgICAgICAgICAgICAgIGRzdChjcCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgY3AgLT0gMHgxMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKGNwPj4xMCkrMHhEODAwKSxcclxuICAgICAgICAgICAgICAgICAgICBkc3QoKGNwJTB4NDAwKSsweERDMDApO1xyXG4gICAgICAgICAgICAgICAgY3AgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYW5kIGVuY29kZXMgVVRGMTYgY2hhcmFjdGVycyB0byBVVEY4IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6bnVtYmVyfG51bGx9IHNyYyBDaGFyYWN0ZXJzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjaGFyIGNvZGUgcmVzcGVjdGl2ZWx5IGBudWxsYFxyXG4gICAgICAgICAqICBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjaGFyYWN0ZXJzIGxlZnQuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24obnVtYmVyKX0gZHN0IEJ5dGVzIGRlc3RpbmF0aW9uIGFzIGEgZnVuY3Rpb24gc3VjY2Vzc2l2ZWx5IGNhbGxlZCB3aXRoIHRoZSBuZXh0IGJ5dGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5lbmNvZGVVVEYxNnRvVVRGOCA9IGZ1bmN0aW9uKHNyYywgZHN0KSB7XHJcbiAgICAgICAgICAgIHV0ZnguVVRGMTZ0b1VURjgoc3JjLCBmdW5jdGlvbihjcCkge1xyXG4gICAgICAgICAgICAgICAgdXRmeC5lbmNvZGVVVEY4KGNwLCBkc3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWNvZGVzIGFuZCBjb252ZXJ0cyBVVEY4IGJ5dGVzIHRvIFVURjE2IGNoYXJhY3RlcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHshZnVuY3Rpb24oKTpudW1iZXJ8bnVsbH0gc3JjIEJ5dGVzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBieXRlIHJlc3BlY3RpdmVseSBgbnVsbGAgaWYgdGhlcmVcclxuICAgICAgICAgKiAgYXJlIG5vIG1vcmUgYnl0ZXMgbGVmdC5cclxuICAgICAgICAgKiBAcGFyYW0geyFmdW5jdGlvbihudW1iZXIpfSBkc3QgQ2hhcmFjdGVycyBkZXN0aW5hdGlvbiBhcyBhIGZ1bmN0aW9uIHN1Y2Nlc3NpdmVseSBjYWxsZWQgd2l0aCBlYWNoIGNvbnZlcnRlZCBjaGFyIGNvZGUuXHJcbiAgICAgICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYSBzdGFydGluZyBieXRlIGlzIGludmFsaWQgaW4gVVRGOFxyXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgbGFzdCBzZXF1ZW5jZSBpcyB0cnVuY2F0ZWQuIEhhcyBhbiBhcnJheSBwcm9wZXJ0eSBgYnl0ZXNgIGhvbGRpbmcgdGhlIHJlbWFpbmluZyBieXRlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2ID0gZnVuY3Rpb24oc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgdXRmeC5kZWNvZGVVVEY4KHNyYywgZnVuY3Rpb24oY3ApIHtcclxuICAgICAgICAgICAgICAgIHV0ZnguVVRGOHRvVVRGMTYoY3AsIGRzdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIGJ5dGUgbGVuZ3RoIG9mIGFuIFVURjggY29kZSBwb2ludC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY3AgVVRGOCBjb2RlIHBvaW50XHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn0gQnl0ZSBsZW5ndGhcclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmNhbGN1bGF0ZUNvZGVQb2ludCA9IGZ1bmN0aW9uKGNwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoY3AgPCAweDgwKSA/IDEgOiAoY3AgPCAweDgwMCkgPyAyIDogKGNwIDwgMHgxMDAwMCkgPyAzIDogNDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgVVRGOCBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBVVEY4IGNvZGUgcG9pbnRzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKX0gc3JjIENvZGUgcG9pbnRzIHNvdXJjZSBhcyBhIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbmV4dCBjb2RlIHBvaW50IHJlc3BlY3RpdmVseVxyXG4gICAgICAgICAqICBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY29kZSBwb2ludHMgbGVmdC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIFVURjggYnl0ZXMgcmVxdWlyZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICB1dGZ4LmNhbGN1bGF0ZVVURjggPSBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICAgICAgdmFyIGNwLCBsPTA7XHJcbiAgICAgICAgICAgIHdoaWxlICgoY3AgPSBzcmMoKSkgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBsICs9IChjcCA8IDB4ODApID8gMSA6IChjcCA8IDB4ODAwKSA/IDIgOiAoY3AgPCAweDEwMDAwKSA/IDMgOiA0O1xyXG4gICAgICAgICAgICByZXR1cm4gbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgVVRGOCBjb2RlIHBvaW50cyByZXNwZWN0aXZlbHkgVVRGOCBieXRlcyByZXF1aXJlZCB0byBzdG9yZSBVVEYxNiBjaGFyIGNvZGVzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7KCFmdW5jdGlvbigpOm51bWJlcnxudWxsKX0gc3JjIENoYXJhY3RlcnMgc291cmNlIGFzIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBuZXh0IGNoYXIgY29kZSByZXNwZWN0aXZlbHlcclxuICAgICAgICAgKiAgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNoYXJhY3RlcnMgbGVmdC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBUaGUgbnVtYmVyIG9mIFVURjggY29kZSBwb2ludHMgYXQgaW5kZXggMCBhbmQgdGhlIG51bWJlciBvZiBVVEY4IGJ5dGVzIHJlcXVpcmVkIGF0IGluZGV4IDEuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRmeC5jYWxjdWxhdGVVVEYxNmFzVVRGOCA9IGZ1bmN0aW9uKHNyYykge1xyXG4gICAgICAgICAgICB2YXIgbj0wLCBsPTA7XHJcbiAgICAgICAgICAgIHV0ZnguVVRGMTZ0b1VURjgoc3JjLCBmdW5jdGlvbihjcCkge1xyXG4gICAgICAgICAgICAgICAgKytuOyBsICs9IChjcCA8IDB4ODApID8gMSA6IChjcCA8IDB4ODAwKSA/IDIgOiAoY3AgPCAweDEwMDAwKSA/IDMgOiA0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIFtuLGxdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB1dGZ4O1xyXG4gICAgfSgpO1xyXG5cclxuICAgIC8vIGVuY29kaW5ncy91dGY4XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVzIHRoaXMgQnl0ZUJ1ZmZlcidzIGNvbnRlbnRzIGJldHdlZW4ge0BsaW5rIEJ5dGVCdWZmZXIjb2Zmc2V0fSBhbmQge0BsaW5rIEJ5dGVCdWZmZXIjbGltaXR9IHRvIGFuIFVURjggZW5jb2RlZFxyXG4gICAgICogIHN0cmluZy5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEhleCBlbmNvZGVkIHN0cmluZ1xyXG4gICAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgYG9mZnNldCA+IGxpbWl0YFxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyUHJvdG90eXBlLnRvVVRGOCA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJlZ2luID09PSAndW5kZWZpbmVkJykgYmVnaW4gPSB0aGlzLm9mZnNldDtcclxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIGVuZCA9IHRoaXMubGltaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vQXNzZXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInIHx8IGJlZ2luICUgMSAhPT0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGJlZ2luOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGJlZ2luID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCBlbmQgJSAxICE9PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIklsbGVnYWwgZW5kOiBOb3QgYW4gaW50ZWdlclwiKTtcbiAgICAgICAgICAgIGVuZCA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYmVnaW4gPCAwIHx8IGJlZ2luID4gZW5kIHx8IGVuZCA+IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIklsbGVnYWwgcmFuZ2U6IDAgPD0gXCIrYmVnaW4rXCIgPD0gXCIrZW5kK1wiIDw9IFwiK3RoaXMuYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNkOyB0cnkge1xyXG4gICAgICAgICAgICB1dGZ4LmRlY29kZVVURjh0b1VURjE2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlZ2luIDwgZW5kID8gdGhpcy52aWV3W2JlZ2luKytdIDogbnVsbDtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBzZCA9IHN0cmluZ0Rlc3RpbmF0aW9uKCkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGJlZ2luICE9PSBlbmQpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiSWxsZWdhbCByYW5nZTogVHJ1bmNhdGVkIGRhdGEsIFwiK2JlZ2luK1wiICE9IFwiK2VuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY29kZXMgYW4gVVRGOCBlbmNvZGVkIHN0cmluZyB0byBhIEJ5dGVCdWZmZXIuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBkZWNvZGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGxpdHRsZUVuZGlhbiBXaGV0aGVyIHRvIHVzZSBsaXR0bGUgb3IgYmlnIGVuZGlhbiBieXRlIG9yZGVyLiBEZWZhdWx0cyB0b1xyXG4gICAgICogIHtAbGluayBCeXRlQnVmZmVyLkRFRkFVTFRfRU5ESUFOfS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vQXNzZXJ0IFdoZXRoZXIgdG8gc2tpcCBhc3NlcnRpb25zIG9mIG9mZnNldHMgYW5kIHZhbHVlcy4gRGVmYXVsdHMgdG9cclxuICAgICAqICB7QGxpbmsgQnl0ZUJ1ZmZlci5ERUZBVUxUX05PQVNTRVJUfS5cclxuICAgICAqIEByZXR1cm5zIHshQnl0ZUJ1ZmZlcn0gQnl0ZUJ1ZmZlclxyXG4gICAgICogQGV4cG9zZVxyXG4gICAgICovXHJcbiAgICBCeXRlQnVmZmVyLmZyb21VVEY4ID0gZnVuY3Rpb24oc3RyLCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgaWYgKCFub0Fzc2VydClcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiSWxsZWdhbCBzdHI6IE5vdCBhIHN0cmluZ1wiKTtcclxuICAgICAgICB2YXIgYmIgPSBuZXcgQnl0ZUJ1ZmZlcih1dGZ4LmNhbGN1bGF0ZVVURjE2YXNVVEY4KHN0cmluZ1NvdXJjZShzdHIpLCB0cnVlKVsxXSwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCksXHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIHV0ZnguZW5jb2RlVVRGMTZ0b1VURjgoc3RyaW5nU291cmNlKHN0ciksIGZ1bmN0aW9uKGIpIHtcclxuICAgICAgICAgICAgYmIudmlld1tpKytdID0gYjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYi5saW1pdCA9IGk7XHJcbiAgICAgICAgcmV0dXJuIGJiO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gQnl0ZUJ1ZmZlcjtcclxufSk7XHJcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwiaW1wb3J0ICogYXMgRW9zTGliIGZyb20gJ2Vvc2pzJ1xuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnXG5jb25zdCB7IGVjYyB9ID0gRW9zTGliLm1vZHVsZXNcblxuZXhwb3J0IGNvbnN0IEVvcyA9IEVvc0xpYlxuZXhwb3J0IGNvbnN0IEVjYyA9IGVjY1xuZXhwb3J0IGNvbnN0IERlYnVnID0gZGVidWdcblxuY29uc29sZS5sb2coXCJFb3NcIiwgRW9zKVxuY29uc29sZS5sb2coXCJFY2NcIiwgRWNjKVxuY29uc29sZS5sb2coXCJEZWJ1Z1wiLCBEZWJ1ZylcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBlY3VydmUgPSByZXF1aXJlKCdlY3VydmUnKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xudmFyIHNlY3AyNTZrMSA9IGVjdXJ2ZS5nZXRDdXJ2ZUJ5TmFtZSgnc2VjcDI1NmsxJyk7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG52YXIga2V5VXRpbHMgPSByZXF1aXJlKCcuL2tleV91dGlscycpO1xuXG52YXIgRyA9IHNlY3AyNTZrMS5HO1xudmFyIG4gPSBzZWNwMjU2azEubjtcblxubW9kdWxlLmV4cG9ydHMgPSBQdWJsaWNLZXk7XG5cbi8qKlxuICBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ8UHVibGljS2V5fGVjdXJ2ZS5Qb2ludH0gcHVibGljIGtleVxuICBAcGFyYW0ge3N0cmluZ30gW3B1YmtleV9wcmVmaXggPSAnRU9TJ11cbiovXG5mdW5jdGlvbiBQdWJsaWNLZXkoUSkge1xuICAgIHZhciBwdWJrZXlfcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnRU9TJztcblxuICAgIGlmICh0eXBlb2YgUSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHB1YmxpY0tleSA9IFB1YmxpY0tleS5mcm9tU3RyaW5nKFEsIHB1YmtleV9wcmVmaXgpO1xuICAgICAgICBhc3NlcnQocHVibGljS2V5ICE9IG51bGwsICdJbnZhbGlkIHB1YmxpYyBrZXknKTtcbiAgICAgICAgcmV0dXJuIHB1YmxpY0tleTtcbiAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihRKSkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIoUSk7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIFEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKFEpKSA9PT0gJ29iamVjdCcgJiYgUS5RKSB7XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkoUS5RKTtcbiAgICB9XG5cbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIFEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKFEpLCAnb2JqZWN0JywgJ0ludmFsaWQgcHVibGljIGtleScpO1xuICAgIGFzc2VydC5lcXVhbChfdHlwZW9mKFEuY29tcHJlc3NlZCksICdib29sZWFuJywgJ0ludmFsaWQgcHVibGljIGtleScpO1xuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gICAgICAgIHZhciBjb21wcmVzc2VkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBRLmNvbXByZXNzZWQ7XG5cbiAgICAgICAgcmV0dXJuIFEuZ2V0RW5jb2RlZChjb21wcmVzc2VkKTtcbiAgICB9XG5cbiAgICB2YXIgcHViZGF0YSA9IHZvaWQgMDsgLy8gY2FjaGVcblxuICAgIC8vIC8qKlxuICAgIC8vICAgICBAdG9kbyBzZWNwMjI0cjFcbiAgICAvLyAgICAgQHJldHVybiB7c3RyaW5nfSBQVUJfSzFfYmFzZTU4cHVia2V5Li5cbiAgICAvLyAqL1xuICAgIC8vIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIC8vICAgICBpZihwdWJkYXRhKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gcHViZGF0YVxuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHB1YmRhdGEgPSBgUFVCX0sxX2AgKyBrZXlVdGlscy5jaGVja0VuY29kZSh0b0J1ZmZlcigpLCAnSzEnKVxuICAgIC8vICAgICByZXR1cm4gcHViZGF0YTtcbiAgICAvLyB9XG5cbiAgICAvKiogQHRvZG8gcmVuYW1lIHRvIHRvU3RyaW5nTGVnYWN5XG4gICAgICogQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXSAtIHB1YmxpYyBrZXkgcHJlZml4XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdFT1MnO1xuXG4gICAgICAgIHJldHVybiBwdWJrZXlfcHJlZml4ICsga2V5VXRpbHMuY2hlY2tFbmNvZGUodG9CdWZmZXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9VbmNvbXByZXNzZWQoKSB7XG4gICAgICAgIHZhciBidWYgPSBRLmdldEVuY29kZWQoZmFsc2UpO1xuICAgICAgICB2YXIgcG9pbnQgPSBlY3VydmUuUG9pbnQuZGVjb2RlRnJvbShzZWNwMjU2azEsIGJ1Zik7XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbVBvaW50KHBvaW50KTtcbiAgICB9XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBmdW5jdGlvbiBjaGlsZChvZmZzZXQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRGVwcmVjYXRlZCB3YXJuaW5nOiBQdWJsaWNLZXkuY2hpbGQnKTtcblxuICAgICAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKG9mZnNldCksIFwiQnVmZmVyIHJlcXVpcmVkOiBvZmZzZXRcIik7XG4gICAgICAgIGFzc2VydC5lcXVhbChvZmZzZXQubGVuZ3RoLCAzMiwgXCJvZmZzZXQgbGVuZ3RoXCIpO1xuXG4gICAgICAgIG9mZnNldCA9IEJ1ZmZlci5jb25jYXQoW3RvQnVmZmVyKCksIG9mZnNldF0pO1xuICAgICAgICBvZmZzZXQgPSBoYXNoLnNoYTI1NihvZmZzZXQpO1xuXG4gICAgICAgIHZhciBjID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKG9mZnNldCk7XG5cbiAgICAgICAgaWYgKGMuY29tcGFyZVRvKG4pID49IDApIHRocm93IG5ldyBFcnJvcihcIkNoaWxkIG9mZnNldCB3ZW50IG91dCBvZiBib3VuZHMsIHRyeSBhZ2FpblwiKTtcblxuICAgICAgICB2YXIgY0cgPSBHLm11bHRpcGx5KGMpO1xuICAgICAgICB2YXIgUXByaW1lID0gUS5hZGQoY0cpO1xuXG4gICAgICAgIGlmIChzZWNwMjU2azEuaXNJbmZpbml0eShRcHJpbWUpKSB0aHJvdyBuZXcgRXJyb3IoXCJDaGlsZCBvZmZzZXQgZGVyaXZlZCB0byBhbiBpbnZhbGlkIGtleSwgdHJ5IGFnYWluXCIpO1xuXG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbVBvaW50KFFwcmltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBROiBRLFxuICAgICAgICB0b1N0cmluZzogdG9TdHJpbmcsXG4gICAgICAgIC8vIHRvU3RyaW5nTGVnYWN5LFxuICAgICAgICB0b1VuY29tcHJlc3NlZDogdG9VbmNvbXByZXNzZWQsXG4gICAgICAgIHRvQnVmZmVyOiB0b0J1ZmZlcixcbiAgICAgICAgY2hpbGQ6IGNoaWxkLFxuICAgICAgICB0b0hleDogdG9IZXhcbiAgICB9O1xufVxuXG4vKipcbiAgQHBhcmFtIHtzdHJpbmd8QnVmZmVyfFB1YmxpY0tleXxlY3VydmUuUG9pbnR9IHB1YmtleSAtIHB1YmxpYyBrZXlcbiAgQHBhcmFtIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddXG4qL1xuUHVibGljS2V5LmlzVmFsaWQgPSBmdW5jdGlvbiAocHVia2V5KSB7XG4gICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdFT1MnO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgUHVibGljS2V5KHB1YmtleSwgcHVia2V5X3ByZWZpeCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cblB1YmxpY0tleS5mcm9tQmluYXJ5ID0gZnVuY3Rpb24gKGJpbikge1xuICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGJpbiwgJ2JpbmFyeScpKTtcbn07XG5cblB1YmxpY0tleS5mcm9tQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgIHJldHVybiBQdWJsaWNLZXkoZWN1cnZlLlBvaW50LmRlY29kZUZyb20oc2VjcDI1NmsxLCBidWZmZXIpKTtcbn07XG5cblB1YmxpY0tleS5mcm9tUG9pbnQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gUHVibGljS2V5KHBvaW50KTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gcHVibGljX2tleSAtIGxpa2UgUFVCX0sxX2Jhc2U1OHB1YmtleS4uXG4gICAgQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXSAtIHB1YmxpYyBrZXkgcHJlZml4XG4gICAgQHJldHVybiBQdWJsaWNLZXkgb3IgYG51bGxgIChpbnZhbGlkKVxuKi9cblB1YmxpY0tleS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHB1YmxpY19rZXkpIHtcbiAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmdPclRocm93KHB1YmxpY19rZXksIHB1YmtleV9wcmVmaXgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gICAgQGFyZyB7c3RyaW5nfSBwdWJsaWNfa2V5IC0gbGlrZSBQVUJfSzFfYmFzZTU4cHVia2V5Li5cbiAgICBAYXJnIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddIC0gcHVibGljIGtleSBwcmVmaXhcblxuICAgIEB0aHJvd3Mge0Vycm9yfSBpZiBwdWJsaWMga2V5IGlzIGludmFsaWRcblxuICAgIEByZXR1cm4gUHVibGljS2V5XG4qL1xuUHVibGljS2V5LmZyb21TdHJpbmdPclRocm93ID0gZnVuY3Rpb24gKHB1YmxpY19rZXkpIHtcbiAgICB2YXIgcHVia2V5X3ByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0VPUyc7XG5cbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHB1YmxpY19rZXkgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHB1YmxpY19rZXkpLCAnc3RyaW5nJywgJ3B1YmxpY19rZXknKTtcbiAgICB2YXIgbWF0Y2ggPSBwdWJsaWNfa2V5Lm1hdGNoKC9eUFVCXyhbQS1aYS16MC05XSspXyhbQS1aYS16MC05XSspJC8pO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBsZWdhY3lcbiAgICAgICAgdmFyIHByZWZpeF9tYXRjaCA9IG5ldyBSZWdFeHAoXCJeXCIgKyBwdWJrZXlfcHJlZml4KTtcbiAgICAgICAgaWYgKHByZWZpeF9tYXRjaC50ZXN0KHB1YmxpY19rZXkpKSB7XG4gICAgICAgICAgICBwdWJsaWNfa2V5ID0gcHVibGljX2tleS5zdWJzdHJpbmcocHVia2V5X3ByZWZpeC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5jaGVja0RlY29kZShwdWJsaWNfa2V5KSk7XG4gICAgfVxuICAgIGFzc2VydChtYXRjaC5sZW5ndGggPT09IDMsICdFeHBlY3RpbmcgcHVibGljIGtleSBsaWtlOiBQVUJfSzFfYmFzZTU4cHVia2V5Li4nKTtcblxuICAgIHZhciBfbWF0Y2ggPSBfc2xpY2VkVG9BcnJheShtYXRjaCwgMyksXG4gICAgICAgIGtleVR5cGUgPSBfbWF0Y2hbMV0sXG4gICAgICAgIGtleVN0cmluZyA9IF9tYXRjaFsyXTtcblxuICAgIGFzc2VydC5lcXVhbChrZXlUeXBlLCAnSzEnLCAnSzEgcHJpdmF0ZSBrZXkgZXhwZWN0ZWQnKTtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG59O1xuXG5QdWJsaWNLZXkuZnJvbUhleCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21CdWZmZXIobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSk7XG59O1xuXG5QdWJsaWNLZXkuZnJvbVN0cmluZ0hleCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmcobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgYmFzZTU4ID0gcmVxdWlyZSgnYnM1OCcpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcblxudmFyIGhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmFuZG9tMzJCeXRlQnVmZmVyOiByYW5kb20zMkJ5dGVCdWZmZXIsXG4gICAgYWRkRW50cm9weTogYWRkRW50cm9weSxcbiAgICBjcHVFbnRyb3B5OiBjcHVFbnRyb3B5LFxuICAgIGVudHJvcHlDb3VudDogZnVuY3Rpb24gZW50cm9weUNvdW50KCkge1xuICAgICAgICByZXR1cm4gX2VudHJvcHlDb3VudDtcbiAgICB9LFxuICAgIGNoZWNrRGVjb2RlOiBjaGVja0RlY29kZSxcbiAgICBjaGVja0VuY29kZTogY2hlY2tFbmNvZGVcbn07XG5cbnZhciBlbnRyb3B5UG9zID0gMCxcbiAgICBfZW50cm9weUNvdW50ID0gMDtcblxudmFyIGV4dGVybmFsRW50cm9weUFycmF5ID0gcmFuZG9tQnl0ZXMoMTAxKTtcblxuLyoqXG4gICAgQWRkaXRpb25hbCBmb3JtcyBvZiBlbnRyb3B5IGFyZSB1c2VkLiAgQSB3ZWVrIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGNhbiBydW4gb3V0IG9mIGVudHJvcHkuICBUaGlzIHNob3VsZCBlbnN1cmUgZXZlbiB0aGUgd29yc3QgcmFuZG9tIG51bWJlciBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHJlYXNvbmFibHkgc2FmZS5cblxuICAgIEBhcmcge251bWJlcn0gW2NwdUVudHJvcHlCaXRzID0gMF0gZ2VuZXJhdGUgZW50cm9weSBvbiB0aGUgZmx5LiAgVGhpcyBpc1xuICAgIG5vdCByZXF1aXJlZCwgZW50cm9weSBjYW4gYmUgYWRkZWQgaW4gYWR2YW5jZWQgdmlhIGFkZEVudHJvcHkgb3IgaW5pdGlhbGl6ZSgpLlxuXG4gICAgQGFyZyB7Ym9vbGVhbn0gW3NhZmUgPSB0cnVlXSBmYWxzZSBmb3IgdGVzdGluZywgb3RoZXJ3aXNlIHRoaXMgd2lsbCBiZVxuICAgIHRydWUgdG8gZW5zdXJlIGluaXRpYWxpemUoKSB3YXMgY2FsbGVkLlxuXG4gICAgQHJldHVybiBhIHJhbmRvbSBidWZmZXIgb2J0YWluZWQgZnJvbSB0aGUgc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLiAgQWRkaXRpb25hbCBlbnRyb3B5IGlzIHVzZWQuXG4qL1xuZnVuY3Rpb24gcmFuZG9tMzJCeXRlQnVmZmVyKCkge1xuICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgX3JlZiRjcHVFbnRyb3B5Qml0cyA9IF9yZWYuY3B1RW50cm9weUJpdHMsXG4gICAgICAgIGNwdUVudHJvcHlCaXRzID0gX3JlZiRjcHVFbnRyb3B5Qml0cyA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkY3B1RW50cm9weUJpdHMsXG4gICAgICAgIF9yZWYkc2FmZSA9IF9yZWYuc2FmZSxcbiAgICAgICAgc2FmZSA9IF9yZWYkc2FmZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2FmZTtcblxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgY3B1RW50cm9weUJpdHMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNwdUVudHJvcHlCaXRzKSwgJ251bWJlcicsICdjcHVFbnRyb3B5Qml0cycpO1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygc2FmZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc2FmZSksICdib29sZWFuJywgJ2Jvb2xlYW4nKTtcblxuICAgIGlmIChzYWZlKSB7XG4gICAgICAgIGFzc2VydChfZW50cm9weUNvdW50ID49IDEyOCwgJ0NhbGwgaW5pdGlhbGl6ZSgpIHRvIGFkZCBlbnRyb3B5Jyk7XG4gICAgfVxuXG4gICAgLy8gaWYoZW50cm9weUNvdW50ID4gMCkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhgQWRkaXRpb25hbCBwcml2YXRlIGtleSBlbnRyb3B5OiAke2VudHJvcHlDb3VudH0gZXZlbnRzYClcbiAgICAvLyB9XG5cbiAgICB2YXIgaGFzaF9hcnJheSA9IFtdO1xuICAgIGhhc2hfYXJyYXkucHVzaChyYW5kb21CeXRlcygzMikpO1xuICAgIGhhc2hfYXJyYXkucHVzaChCdWZmZXIuZnJvbShjcHVFbnRyb3B5KGNwdUVudHJvcHlCaXRzKSkpO1xuICAgIGhhc2hfYXJyYXkucHVzaChleHRlcm5hbEVudHJvcHlBcnJheSk7XG4gICAgaGFzaF9hcnJheS5wdXNoKGJyb3dzZXJFbnRyb3B5KCkpO1xuICAgIHJldHVybiBoYXNoLnNoYTI1NihCdWZmZXIuY29uY2F0KGhhc2hfYXJyYXkpKTtcbn1cblxuLyoqXG4gICAgQWRkcyBlbnRyb3B5LiAgVGhpcyBtYXkgYmUgY2FsbGVkIG1hbnkgdGltZXMgd2hpbGUgdGhlIGFtb3VudCBvZiBkYXRhIHNhdmVkXG4gICAgaXMgYWNjdW11bGF0aXZlbHkgcmVkdWNlZCB0byAxMDEgaW50ZWdlcnMuICBEYXRhIGlzIHJldGFpbmVkIGluIFJBTSBmb3IgdGhlXG4gICAgbGlmZSBvZiB0aGlzIG1vZHVsZS5cblxuICAgIEBleGFtcGxlIFJlYWN0IDxjb2RlPlxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnJlZnMuTXlDb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uRW50cm9weUV2ZW50LCB7Y2FwdHVyZTogZmFsc2UsIHBhc3NpdmU6IHRydWV9KVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZWZzLk15Q29tcG9uZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbkVudHJvcHlFdmVudCk7XG4gICAgfVxuICAgIG9uRW50cm9weUV2ZW50ID0gKGUpID0+IHtcbiAgICAgICAgaWYoZS50eXBlID09PSAnbW91c2Vtb3ZlJylcbiAgICAgICAgICAgIGtleV91dGlscy5hZGRFbnRyb3B5KGUucGFnZVgsIGUucGFnZVksIGUuc2NyZWVuWCwgZS5zY3JlZW5ZKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnb25FbnRyb3B5RXZlbnQgVW5rbm93bicsIGUudHlwZSwgZSlcbiAgICB9XG4gICAgPC9jb2RlPlxuKi9cbmZ1bmN0aW9uIGFkZEVudHJvcHkoKSB7XG4gICAgYXNzZXJ0LmVxdWFsKGV4dGVybmFsRW50cm9weUFycmF5Lmxlbmd0aCwgMTAxLCAnZXh0ZXJuYWxFbnRyb3B5QXJyYXknKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGludHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX2VudHJvcHlDb3VudCArPSBpbnRzLmxlbmd0aDtcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gaW50c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgIHZhciBwb3MgPSBlbnRyb3B5UG9zKysgJSAxMDE7XG4gICAgICAgICAgICB2YXIgaTIgPSBleHRlcm5hbEVudHJvcHlBcnJheVtwb3NdICs9IGk7XG4gICAgICAgICAgICBpZiAoaTIgPiA5MDA3MTk5MjU0NzQwOTkxKSBleHRlcm5hbEVudHJvcHlBcnJheVtwb3NdID0gMDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAgICBUaGlzIHJ1bnMgaW4ganVzdCB1bmRlciAxIHNlY29uZCBhbmQgZW5zdXJlcyBhIG1pbmltdW0gb2YgY3B1RW50cm9weUJpdHNcbiAgICBiaXRzIG9mIGVudHJvcHkgYXJlIGdhdGhlcmVkLlxuXG4gICAgQmFzZWQgb24gbW9yZS1lbnRyb3B5LiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL21vcmUtZW50cm9weS9ibG9iL21hc3Rlci9zcmMvZ2VuZXJhdG9yLmljZWRcblxuICAgIEBhcmcge251bWJlcn0gW2NwdUVudHJvcHlCaXRzID0gMTI4XVxuICAgIEByZXR1cm4ge2FycmF5fSBjb3VudHMgZ2F0aGVyZWQgYnkgbWVhc3VyaW5nIHZhcmlhdGlvbnMgaW4gdGhlIENQVSBzcGVlZCBkdXJpbmcgZmxvYXRpbmcgcG9pbnQgb3BlcmF0aW9ucy5cbiovXG5mdW5jdGlvbiBjcHVFbnRyb3B5KCkge1xuICAgIHZhciBjcHVFbnRyb3B5Qml0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTI4O1xuXG4gICAgdmFyIGNvbGxlY3RlZCA9IFtdO1xuICAgIHZhciBsYXN0Q291bnQgPSBudWxsO1xuICAgIHZhciBsb3dFbnRyb3B5U2FtcGxlcyA9IDA7XG4gICAgd2hpbGUgKGNvbGxlY3RlZC5sZW5ndGggPCBjcHVFbnRyb3B5Qml0cykge1xuICAgICAgICB2YXIgY291bnQgPSBmbG9hdGluZ1BvaW50Q291bnQoKTtcbiAgICAgICAgaWYgKGxhc3RDb3VudCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBjb3VudCAtIGxhc3RDb3VudDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPCAxKSB7XG4gICAgICAgICAgICAgICAgbG93RW50cm9weVNhbXBsZXMrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhvdyBtYW55IGJpdHMgb2YgZW50cm9weSB3ZXJlIGluIHRoaXMgc2FtcGxlXG4gICAgICAgICAgICB2YXIgYml0cyA9IE1hdGguZmxvb3IobG9nMihNYXRoLmFicyhkZWx0YSkpICsgMSk7XG4gICAgICAgICAgICBpZiAoYml0cyA8IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYml0cyA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG93RW50cm9weVNhbXBsZXMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2xsZWN0ZWQucHVzaChkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdENvdW50ID0gY291bnQ7XG4gICAgfVxuICAgIGlmIChsb3dFbnRyb3B5U2FtcGxlcyA+IDEwKSB7XG4gICAgICAgIHZhciBwY3QgPSBOdW1iZXIobG93RW50cm9weVNhbXBsZXMgLyBjcHVFbnRyb3B5Qml0cyAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgLy8gSXMgdGhpcyBhbGdvcml0aG0gZ2V0dGluZyBpbmVmZmljaWVudD9cbiAgICAgICAgY29uc29sZS53YXJuKCdXQVJOOiAnICsgcGN0ICsgJyUgbG93IENQVSBlbnRyb3B5IHJlLXNhbXBsZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3RlZDtcbn1cblxuLyoqXG4gICAgQHByaXZhdGVcbiAgICBDb3VudCB3aGlsZSBwZXJmb3JtaW5nIGZsb2F0aW5nIHBvaW50IG9wZXJhdGlvbnMgZHVyaW5nIGEgZml4ZWQgdGltZVxuICAgICg3IG1zIGZvciBleGFtcGxlKS4gIFVzaW5nIGEgZml4ZWQgdGltZSBtYWtlcyB0aGlzIGFsZ29yaXRobVxuICAgIHByZWRpY3RhYmxlIGluIHJ1bnRpbWUuXG4qL1xuZnVuY3Rpb24gZmxvYXRpbmdQb2ludENvdW50KCkge1xuICAgIHZhciB3b3JrTWluTXMgPSA3O1xuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIHggPSAwO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIDwgZCArIHdvcmtNaW5NcyArIDEpIHtcbiAgICAgICAgeCA9IE1hdGguc2luKE1hdGguc3FydChNYXRoLmxvZygrK2kgKyB4KSkpO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cblxudmFyIGxvZzIgPSBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbn07XG5cbi8qKlxuICAgIEBwcml2YXRlXG4gICAgQXR0ZW1wdCB0byBnYXRoZXIgYW5kIGhhc2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgYnJvd3NlcidzIHdpbmRvdywgaGlzdG9yeSwgYW5kIHN1cHBvcnRlZCBtaW1lIHR5cGVzLiAgRm9yIG5vbi1icm93c2VyIGVudmlyb25tZW50cyB0aGlzIHNpbXBseSBpbmNsdWRlcyBzZWN1cmUgcmFuZG9tIGRhdGEuICBJbiBhbnkgZXZlbnQsIHRoZSBpbmZvcm1hdGlvbiBpcyByZS1oYXNoZWQgaW4gYSBsb29wIGZvciAyNSBtaWxsaXNlY29uZHMgc2Vjb25kcy5cblxuICAgIEByZXR1cm4ge0J1ZmZlcn0gMzIgYnl0ZXNcbiovXG5mdW5jdGlvbiBicm93c2VyRW50cm9weSgpIHtcbiAgICB2YXIgZW50cm9weVN0ciA9IEFycmF5KHJhbmRvbUJ5dGVzKDEwMSkpLmpvaW4oKTtcbiAgICB0cnkge1xuICAgICAgICBlbnRyb3B5U3RyICs9IG5ldyBEYXRlKCkudG9TdHJpbmcoKSArIFwiIFwiICsgd2luZG93LnNjcmVlbi5oZWlnaHQgKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4ud2lkdGggKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4uY29sb3JEZXB0aCArIFwiIFwiICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0ICsgXCIgXCIgKyB3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGggKyBcIiBcIiArIHdpbmRvdy5zY3JlZW4ucGl4ZWxEZXB0aCArIG5hdmlnYXRvci5sYW5ndWFnZSArIFwiIFwiICsgd2luZG93LmxvY2F0aW9uICsgXCIgXCIgKyB3aW5kb3cuaGlzdG9yeS5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1pbWVUeXBlOyBpIDwgbmF2aWdhdG9yLm1pbWVUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbWltZVR5cGUgPSBuYXZpZ2F0b3IubWltZVR5cGVzW2ldO1xuICAgICAgICAgICAgZW50cm9weVN0ciArPSBtaW1lVHlwZS5kZXNjcmlwdGlvbiArIFwiIFwiICsgbWltZVR5cGUudHlwZSArIFwiIFwiICsgbWltZVR5cGUuc3VmZml4ZXMgKyBcIiBcIjtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vbm9kZWpzOlJlZmVyZW5jZUVycm9yOiB3aW5kb3cgaXMgbm90IGRlZmluZWRcbiAgICAgICAgZW50cm9weVN0ciArPSBoYXNoLnNoYTI1NihuZXcgRGF0ZSgpLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHZhciBiID0gbmV3IEJ1ZmZlcihlbnRyb3B5U3RyKTtcbiAgICBlbnRyb3B5U3RyICs9IGIudG9TdHJpbmcoJ2JpbmFyeScpICsgXCIgXCIgKyBuZXcgRGF0ZSgpLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIgZW50cm9weSA9IGVudHJvcHlTdHI7XG4gICAgdmFyIHN0YXJ0X3QgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRfdCA8IDI1KSB7XG4gICAgICAgIGVudHJvcHkgPSBoYXNoLnNoYTI1NihlbnRyb3B5KTtcbiAgICB9cmV0dXJuIGVudHJvcHk7XG59XG5cbi8qKlxuICBAYXJnIHtCdWZmZXJ9IGtleUJ1ZmZlciBkYXRhXG4gIEBhcmcge3N0cmluZ30ga2V5VHlwZSA9IHNoYTI1NngyLCBLMSwgZXRjXG4gIEByZXR1cm4ge3N0cmluZ30gY2hlY2tzdW0gZW5jb2RlZCBiYXNlNTggc3RyaW5nXG4qL1xuZnVuY3Rpb24gY2hlY2tFbmNvZGUoa2V5QnVmZmVyKSB7XG4gICAgdmFyIGtleVR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGtleUJ1ZmZlciksICdleHBlY3Rpbmcga2V5QnVmZmVyPEJ1ZmZlcj4nKTtcbiAgICBpZiAoa2V5VHlwZSA9PT0gJ3NoYTI1NngyJykge1xuICAgICAgICAvLyBsZWdhY3lcbiAgICAgICAgdmFyIGNoZWNrc3VtID0gaGFzaC5zaGEyNTYoaGFzaC5zaGEyNTYoa2V5QnVmZmVyKSkuc2xpY2UoMCwgNCk7XG4gICAgICAgIHJldHVybiBiYXNlNTguZW5jb2RlKEJ1ZmZlci5jb25jYXQoW2tleUJ1ZmZlciwgY2hlY2tzdW1dKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoZWNrID0gW2tleUJ1ZmZlcl07XG4gICAgICAgIGlmIChrZXlUeXBlKSB7XG4gICAgICAgICAgICBjaGVjay5wdXNoKEJ1ZmZlci5mcm9tKGtleVR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2NoZWNrc3VtID0gaGFzaC5yaXBlbWQxNjAoQnVmZmVyLmNvbmNhdChjaGVjaykpLnNsaWNlKDAsIDQpO1xuICAgICAgICByZXR1cm4gYmFzZTU4LmVuY29kZShCdWZmZXIuY29uY2F0KFtrZXlCdWZmZXIsIF9jaGVja3N1bV0pKTtcbiAgICB9XG59XG5cbi8qKlxuICBAYXJnIHtCdWZmZXJ9IGtleVN0cmluZyBkYXRhXG4gIEBhcmcge3N0cmluZ30ga2V5VHlwZSA9IHNoYTI1NngyLCBLMSwgZXRjXG4gIEByZXR1cm4ge3N0cmluZ30gY2hlY2tzdW0gZW5jb2RlZCBiYXNlNTggc3RyaW5nXG4qL1xuZnVuY3Rpb24gY2hlY2tEZWNvZGUoa2V5U3RyaW5nKSB7XG4gICAgdmFyIGtleVR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICBhc3NlcnQoa2V5U3RyaW5nICE9IG51bGwsICdwcml2YXRlIGtleSBleHBlY3RlZCcpO1xuICAgIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGJhc2U1OC5kZWNvZGUoa2V5U3RyaW5nKSk7XG4gICAgdmFyIGNoZWNrc3VtID0gYnVmZmVyLnNsaWNlKC00KTtcbiAgICB2YXIga2V5ID0gYnVmZmVyLnNsaWNlKDAsIC00KTtcblxuICAgIHZhciBuZXdDaGVjayA9IHZvaWQgMDtcbiAgICBpZiAoa2V5VHlwZSA9PT0gJ3NoYTI1NngyJykge1xuICAgICAgICAvLyBsZWdhY3lcbiAgICAgICAgbmV3Q2hlY2sgPSBoYXNoLnNoYTI1NihoYXNoLnNoYTI1NihrZXkpKS5zbGljZSgwLCA0KTsgLy8gV0lGIChsZWdhY3kpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoZWNrID0gW2tleV07XG4gICAgICAgIGlmIChrZXlUeXBlKSB7XG4gICAgICAgICAgICBjaGVjay5wdXNoKEJ1ZmZlci5mcm9tKGtleVR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdDaGVjayA9IGhhc2gucmlwZW1kMTYwKEJ1ZmZlci5jb25jYXQoY2hlY2spKS5zbGljZSgwLCA0KTsgLy9QVlRcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzdW0udG9TdHJpbmcoKSAhPT0gbmV3Q2hlY2sudG9TdHJpbmcoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2hlY2tzdW0sICcgKyAoY2hlY2tzdW0udG9TdHJpbmcoJ2hleCcpICsgJyAhPSAnICsgbmV3Q2hlY2sudG9TdHJpbmcoJ2hleCcpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25BcGkgPSByZXF1aXJlKCcuL2FwaV9jb21tb24nKTtcbnZhciBvYmplY3RBcGkgPSByZXF1aXJlKCcuL2FwaV9vYmplY3QnKTtcblxudmFyIGVjYyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbW1vbkFwaSwgb2JqZWN0QXBpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlY2M7IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgZWN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJyk7XG52YXIgUG9pbnQgPSBlY3VydmUuUG9pbnQ7XG52YXIgc2VjcDI1NmsxID0gZWN1cnZlLmdldEN1cnZlQnlOYW1lKCdzZWNwMjU2azEnKTtcbnZhciBCaWdJbnRlZ2VyID0gcmVxdWlyZSgnYmlnaScpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpO1xudmFyIFB1YmxpY0tleSA9IHJlcXVpcmUoJy4va2V5X3B1YmxpYycpO1xudmFyIGtleVV0aWxzID0gcmVxdWlyZSgnLi9rZXlfdXRpbHMnKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciBwcm9taXNlQXN5bmMgPSByZXF1aXJlKCcuL3Byb21pc2UtYXN5bmMnKTtcblxudmFyIEcgPSBzZWNwMjU2azEuRztcbnZhciBuID0gc2VjcDI1NmsxLm47XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpdmF0ZUtleTtcblxuLyoqXG4gIEB0eXBlZGVmIHtzdHJpbmd9IHdpZiAtIGh0dHBzOi8vZW4uYml0Y29pbi5pdC93aWtpL1dhbGxldF9pbXBvcnRfZm9ybWF0XG4gIEB0eXBlZGVmIHtzdHJpbmd9IHB1YmtleSAtIEVPU0tleS4uXG4gIEB0eXBlZGVmIHtlY3VydmUuUG9pbnR9IFBvaW50XG4qL1xuXG4vKipcbiAgQHBhcmFtIHtCaWdJbnRlZ2VyfSBkXG4qL1xuZnVuY3Rpb24gUHJpdmF0ZUtleShkKSB7XG4gICAgaWYgKHR5cGVvZiBkID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKGQpO1xuICAgIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGQpKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21CdWZmZXIoZCk7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIGQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGQpKSA9PT0gJ29iamVjdCcgJiYgQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIoZC5kKSkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleShkLmQpO1xuICAgIH1cblxuICAgIGlmICghQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIoZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBwcml2YXRlIGtleScpO1xuICAgIH1cblxuICAgIC8qKiBAcmV0dXJuIHtzdHJpbmd9IHByaXZhdGUga2V5IGxpa2UgUFZUX0sxX2Jhc2U1OHByaXZhdGVrZXkuLiAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAvLyB0b2RvLCB1c2UgUFZUX0sxX1xuICAgICAgICAvLyByZXR1cm4gJ1BWVF9LMV8nICsga2V5VXRpbHMuY2hlY2tFbmNvZGUodG9CdWZmZXIoKSwgJ0sxJylcbiAgICAgICAgcmV0dXJuIHRvV2lmKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICAgIEByZXR1cm4gIHt3aWZ9XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1dpZigpIHtcbiAgICAgICAgdmFyIHByaXZhdGVfa2V5ID0gdG9CdWZmZXIoKTtcbiAgICAgICAgLy8gY2hlY2tzdW0gaW5jbHVkZXMgdGhlIHZlcnNpb25cbiAgICAgICAgcHJpdmF0ZV9rZXkgPSBCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFsweDgwXSksIHByaXZhdGVfa2V5XSk7XG4gICAgICAgIHJldHVybiBrZXlVdGlscy5jaGVja0VuY29kZShwcml2YXRlX2tleSwgJ3NoYTI1NngyJyk7XG4gICAgfVxuXG4gICAgdmFyIHB1YmxpY19rZXkgPSB2b2lkIDA7XG5cbiAgICAvKipcbiAgICAgICAgQHJldHVybiB7UG9pbnR9XG4gICAgKi9cbiAgICBmdW5jdGlvbiB0b1B1YmxpYygpIHtcbiAgICAgICAgaWYgKHB1YmxpY19rZXkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlXG4gICAgICAgICAgICAvLyBTIEwgTyBXIGluIHRoZSBicm93c2VyXG4gICAgICAgICAgICByZXR1cm4gcHVibGljX2tleTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUSA9IHNlY3AyNTZrMS5HLm11bHRpcGx5KGQpO1xuICAgICAgICByZXR1cm4gcHVibGljX2tleSA9IFB1YmxpY0tleS5mcm9tUG9pbnQoUSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiBkLnRvQnVmZmVyKDMyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgIEVDSUVTXG4gICAgICBAYXJnIHtzdHJpbmd8T2JqZWN0fSBwdWJrZXkgd2lmLCBQdWJsaWNLZXkgb2JqZWN0XG4gICAgICBAcmV0dXJuIHtCdWZmZXJ9IDY0IGJ5dGUgc2hhcmVkIHNlY3JldFxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHB1YmxpY19rZXkpIHtcbiAgICAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleShwdWJsaWNfa2V5KTtcbiAgICAgICAgdmFyIEtCID0gcHVibGljX2tleS50b1VuY29tcHJlc3NlZCgpLnRvQnVmZmVyKCk7XG4gICAgICAgIHZhciBLQlAgPSBQb2ludC5mcm9tQWZmaW5lKHNlY3AyNTZrMSwgQmlnSW50ZWdlci5mcm9tQnVmZmVyKEtCLnNsaWNlKDEsIDMzKSksIC8vIHhcbiAgICAgICAgQmlnSW50ZWdlci5mcm9tQnVmZmVyKEtCLnNsaWNlKDMzLCA2NSkpIC8vIHlcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIHIgPSB0b0J1ZmZlcigpO1xuICAgICAgICB2YXIgUCA9IEtCUC5tdWx0aXBseShCaWdJbnRlZ2VyLmZyb21CdWZmZXIocikpO1xuICAgICAgICB2YXIgUyA9IFAuYWZmaW5lWC50b0J1ZmZlcih7IHNpemU6IDMyIH0pO1xuICAgICAgICAvLyBTSEE1MTIgdXNlZCBpbiBFQ0lFU1xuICAgICAgICByZXR1cm4gaGFzaC5zaGE1MTIoUyk7XG4gICAgfVxuXG4gICAgLy8gLyoqIEVDSUVTIFRPRE8gdW5pdCB0ZXN0XG4gICAgLy8gICBAYXJnIHtzdHJpbmd8T2JqZWN0fSBwdWJrZXkgd2lmLCBQdWJsaWNLZXkgb2JqZWN0XG4gICAgLy8gICBAcmV0dXJuIHtCdWZmZXJ9IDY0IGJ5dGUgc2hhcmVkIHNlY3JldFxuICAgIC8vICovXG4gICAgLy8gZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHB1YmxpY19rZXkpIHtcbiAgICAvLyAgICAgcHVibGljX2tleSA9IFB1YmxpY0tleShwdWJsaWNfa2V5KS50b1VuY29tcHJlc3NlZCgpXG4gICAgLy8gICAgIHZhciBQID0gcHVibGljX2tleS5RLm11bHRpcGx5KCBkICk7XG4gICAgLy8gICAgIHZhciBTID0gUC5hZmZpbmVYLnRvQnVmZmVyKHtzaXplOiAzMn0pO1xuICAgIC8vICAgICAvLyBFQ0lFUywgYWRkcyBhbiBleHRyYSBzaGE1MTJcbiAgICAvLyAgICAgcmV0dXJuIGhhc2guc2hhNTEyKFMpO1xuICAgIC8vIH1cblxuICAgIC8qKlxuICAgICAgQGFyZyB7c3RyaW5nfSBuYW1lIC0gY2hpbGQga2V5IG5hbWUuXG4gICAgICBAcmV0dXJuIHtQcml2YXRlS2V5fVxuICAgICAgIEBleGFtcGxlIGFjdGl2ZVByaXZhdGUgPSBtYXN0ZXJQcml2YXRlLmdldENoaWxkS2V5KCdvd25lcicpLmdldENoaWxkS2V5KCdhY3RpdmUnKVxuICAgICAgQGV4YW1wbGUgYWN0aXZlUHJpdmF0ZS5nZXRDaGlsZEtleSgnbXljb250cmFjdCcpLmdldENoaWxkS2V5KCdteXBlcm0nKVxuICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q2hpbGRLZXkobmFtZSkge1xuICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdXQVJOSU5HOiBnZXRDaGlsZEtleSB1bnRlc3RlZCBhZ2FpbnN0IGVvc2QnKTsgLy8gbm8gZW9zZCBpbXBsIHlldFxuICAgICAgICB2YXIgaW5kZXggPSBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUodG9CdWZmZXIoKSkudXBkYXRlKG5hbWUpLmRpZ2VzdCgpO1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleShpbmRleCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkOiBkLFxuICAgICAgICB0b1dpZjogdG9XaWYsXG4gICAgICAgIHRvU3RyaW5nOiB0b1N0cmluZyxcbiAgICAgICAgdG9QdWJsaWM6IHRvUHVibGljLFxuICAgICAgICB0b0J1ZmZlcjogdG9CdWZmZXIsXG4gICAgICAgIGdldFNoYXJlZFNlY3JldDogZ2V0U2hhcmVkU2VjcmV0LFxuICAgICAgICBnZXRDaGlsZEtleTogZ2V0Q2hpbGRLZXlcbiAgICB9O1xufVxuXG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIHBhcnNlS2V5KHByaXZhdGVTdHIpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHByaXZhdGVTdHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByaXZhdGVTdHIpLCAnc3RyaW5nJywgJ3ByaXZhdGVTdHInKTtcbiAgICB2YXIgbWF0Y2ggPSBwcml2YXRlU3RyLm1hdGNoKC9eUFZUXyhbQS1aYS16MC05XSspXyhbQS1aYS16MC05XSspJC8pO1xuXG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIC8vIGxlZ2FjeSBXSUYgLSBjaGVja3N1bSBpbmNsdWRlcyB0aGUgdmVyc2lvblxuICAgICAgICB2YXIgdmVyc2lvbktleSA9IGtleVV0aWxzLmNoZWNrRGVjb2RlKHByaXZhdGVTdHIsICdzaGEyNTZ4MicpO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IHZlcnNpb25LZXkucmVhZFVJbnQ4KDApO1xuICAgICAgICBhc3NlcnQuZXF1YWwoMHg4MCwgdmVyc2lvbiwgJ0V4cGVjdGVkIHZlcnNpb24gJyArIDB4ODAgKyAnLCBpbnN0ZWFkIGdvdCAnICsgdmVyc2lvbik7XG4gICAgICAgIHZhciBfcHJpdmF0ZUtleSA9IFByaXZhdGVLZXkuZnJvbUJ1ZmZlcih2ZXJzaW9uS2V5LnNsaWNlKDEpKTtcbiAgICAgICAgdmFyIF9rZXlUeXBlID0gJ0sxJztcbiAgICAgICAgdmFyIGZvcm1hdCA9ICdXSUYnO1xuICAgICAgICByZXR1cm4geyBwcml2YXRlS2V5OiBfcHJpdmF0ZUtleSwgZm9ybWF0OiBmb3JtYXQsIGtleVR5cGU6IF9rZXlUeXBlIH07XG4gICAgfVxuXG4gICAgYXNzZXJ0KG1hdGNoLmxlbmd0aCA9PT0gMywgJ0V4cGVjdGluZyBwcml2YXRlIGtleSBsaWtlOiBQVlRfSzFfYmFzZTU4cHJpdmF0ZUtleS4uJyk7XG5cbiAgICB2YXIgX21hdGNoID0gX3NsaWNlZFRvQXJyYXkobWF0Y2gsIDMpLFxuICAgICAgICBrZXlUeXBlID0gX21hdGNoWzFdLFxuICAgICAgICBrZXlTdHJpbmcgPSBfbWF0Y2hbMl07XG5cbiAgICBhc3NlcnQuZXF1YWwoa2V5VHlwZSwgJ0sxJywgJ0sxIHByaXZhdGUga2V5IGV4cGVjdGVkJyk7XG4gICAgdmFyIHByaXZhdGVLZXkgPSBQcml2YXRlS2V5LmZyb21CdWZmZXIoa2V5VXRpbHMuY2hlY2tEZWNvZGUoa2V5U3RyaW5nLCBrZXlUeXBlKSk7XG4gICAgcmV0dXJuIHsgcHJpdmF0ZUtleTogcHJpdmF0ZUtleSwgZm9ybWF0OiAnUFZUJywga2V5VHlwZToga2V5VHlwZSB9O1xufVxuXG5Qcml2YXRlS2V5LmZyb21IZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGhleCwgJ2hleCcpKTtcbn07XG5cblByaXZhdGVLZXkuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGluZyBwYXJhbWV0ZXIgdG8gYmUgYSBCdWZmZXIgdHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDMzICYmIGJ1ZlszMl0gPT09IDEpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGNvbXByZXNzaW9uIGZsYWdcbiAgICAgICAgYnVmID0gYnVmLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgaWYgKDMyICE9PSBidWYubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIDMyIGJ5dGVzLCBpbnN0ZWFkIGdvdCAnICsgYnVmLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlS2V5KEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWYpKTtcbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gc2VlZCAtIGFueSBsZW5ndGggc3RyaW5nLiAgVGhpcyBpcyBwcml2YXRlLCB0aGUgc2FtZSBzZWVkXG4gICAgcHJvZHVjZXMgdGhlIHNhbWUgcHJpdmF0ZSBrZXkgZXZlcnkgdGltZS5cblxuICAgIEByZXR1cm4ge1ByaXZhdGVLZXl9XG4qL1xuUHJpdmF0ZUtleS5mcm9tU2VlZCA9IGZ1bmN0aW9uIChzZWVkKSB7XG4gICAgLy8gZ2VuZXJhdGVfcHJpdmF0ZV9rZXlcbiAgICBpZiAoISh0eXBlb2Ygc2VlZCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2VlZCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21CdWZmZXIoaGFzaC5zaGEyNTYoc2VlZCkpO1xufTtcblxuLyoqXG4gIEBhcmcge3dpZn0ga2V5XG4gIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYga2V5IGlzIGluIHRoZSBXYWxsZXQgSW1wb3J0IEZvcm1hdFxuKi9cblByaXZhdGVLZXkuaXNXaWYgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHRyeSB7XG4gICAgICAgIGFzc2VydChwYXJzZUtleSh0ZXh0KS5mb3JtYXQgPT09ICdXSUYnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gIEBhcmcge3dpZnxCdWZmZXJ8UHJpdmF0ZUtleX0ga2V5XG4gIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYga2V5IGlzIGNvbnZlcnRhYmxlIHRvIGEgcHJpdmF0ZSBrZXkgb2JqZWN0LlxuKi9cblByaXZhdGVLZXkuaXNWYWxpZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBQcml2YXRlS2V5KGtleSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuUHJpdmF0ZUtleS5mcm9tV2lmID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGNvbnNvbGUubG9nKCdQcml2YXRlS2V5LmZyb21XaWYgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBQcml2YXRlS2V5LmZyb21TdHJpbmcnKTtcbiAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHN0cik7XG59O1xuXG4vKipcbiAgICBAdGhyb3dzIHtBc3NlcnRFcnJvcnxFcnJvcn0gcGFyc2luZyBrZXlcbiAgICBAYXJnIHtzdHJpbmd9IHByaXZhdGVTdHIgRW9zaW8gb3IgV2FsbGV0IEltcG9ydCBGb3JtYXQgKHdpZikgLS0gYSBzZWNyZXRcbiovXG5Qcml2YXRlS2V5LmZyb21TdHJpbmcgPSBmdW5jdGlvbiAocHJpdmF0ZVN0cikge1xuICAgIHJldHVybiBwYXJzZUtleShwcml2YXRlU3RyKS5wcml2YXRlS2V5O1xufTtcblxuLyoqXG4gIENyZWF0ZSBhIG5ldyByYW5kb20gcHJpdmF0ZSBrZXkuXG5cbiAgQ2FsbCBpbml0aWFsaXplKCkgZmlyc3QgdG8gcnVuIHNvbWUgc2VsZi1jaGVja2luZyBjb2RlIGFuZCBnYXRoZXIgc29tZSBDUFVcbiAgZW50cm9weS5cblxuICBAYXJnIHtudW1iZXJ9IFtjcHVFbnRyb3B5Qml0cyA9IDBdIC0gYWRkaXRpb25hbCBDUFUgZW50cm9weSwgdGhpcyBhbHJlYWR5XG4gIGhhcHBlbnMgb25jZSBzbyBpdCBzaG91bGQgbm90IGJlIG5lZWRlZCBhZ2Fpbi5cblxuICBAcmV0dXJuIHtQcm9taXNlPFByaXZhdGVLZXk+fSAtIHJhbmRvbSBwcml2YXRlIGtleVxuKi9cblByaXZhdGVLZXkucmFuZG9tS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjcHVFbnRyb3B5Qml0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgIHJldHVybiBQcml2YXRlS2V5LmluaXRpYWxpemUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5yYW5kb20zMkJ5dGVCdWZmZXIoeyBjcHVFbnRyb3B5Qml0czogY3B1RW50cm9weUJpdHMgfSkpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gIEByZXR1cm4ge1Byb21pc2U8UHJpdmF0ZUtleT59IGZvciB0ZXN0aW5nLCBkb2VzIG5vdCByZXF1aXJlIGluaXRpYWxpemUoKS5cbiovXG5Qcml2YXRlS2V5LnVuc2FmZVJhbmRvbUtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFByaXZhdGVLZXkuZnJvbUJ1ZmZlcihrZXlVdGlscy5yYW5kb20zMkJ5dGVCdWZmZXIoeyBzYWZlOiBmYWxzZSB9KSkpO1xufTtcblxudmFyIGluaXRpYWxpemVkID0gZmFsc2UsXG4gICAgdW5pdFRlc3RlZCA9IGZhbHNlO1xuXG4vKipcbiAgUnVuIHNlbGYtY2hlY2tpbmcgY29kZSBhbmQgZ2F0aGVyIENQVSBlbnRyb3B5LlxuXG4gIEluaXRpYWxpemF0aW9uIGhhcHBlbnMgb25jZSBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cblxuICBAcmV0dXJuIHtQcm9taXNlfVxuKi9cbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1bml0VGVzdCgpO1xuICAgIGtleVV0aWxzLmFkZEVudHJvcHkuYXBwbHkoa2V5VXRpbHMsIF90b0NvbnN1bWFibGVBcnJheShrZXlVdGlscy5jcHVFbnRyb3B5KCkpKTtcbiAgICBhc3NlcnQoa2V5VXRpbHMuZW50cm9weUNvdW50KCkgPj0gMTI4LCAnaW5zdWZmaWNpZW50IGVudHJvcHknKTtcblxuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbn1cblxuUHJpdmF0ZUtleS5pbml0aWFsaXplID0gcHJvbWlzZUFzeW5jKGluaXRpYWxpemUpO1xuXG4vKipcbiAgVW5pdCB0ZXN0IGJhc2ljIHByaXZhdGUgYW5kIHB1YmxpYyBrZXkgZnVuY3Rpb25hbGl0eS5cblxuICBAdGhyb3dzIHtBc3NlcnRFcnJvcn1cbiovXG5mdW5jdGlvbiB1bml0VGVzdCgpIHtcbiAgICB2YXIgcHZ0ID0gUHJpdmF0ZUtleShoYXNoLnNoYTI1NignJykpO1xuXG4gICAgdmFyIHB2dEVycm9yID0gJ2tleSBjb21wYXJpc29uIHRlc3QgZmFpbGVkIG9uIGEga25vd24gcHJpdmF0ZSBrZXknO1xuICAgIGFzc2VydC5lcXVhbChwdnQudG9XaWYoKSwgJzVLWVpkVUVvMzl6M0ZQcnR1WDJRYmJ3R25OUDV6VGQ3eXlyMlNDMWoyOTlzQkNuV2pzcycsIHB2dEVycm9yKTtcbiAgICBhc3NlcnQuZXF1YWwocHZ0LnRvU3RyaW5nKCksICc1S1laZFVFbzM5ejNGUHJ0dVgyUWJid0duTlA1elRkN3l5cjJTQzFqMjk5c0JDbldqc3MnLCBwdnRFcnJvcik7XG4gICAgLy8gYXNzZXJ0LmVxdWFsKHB2dC50b1N0cmluZygpLCAnUFZUX0sxXzJqSDNubmh4aFIzelBVY3NLYVdXWkM5Wm1aQW5LbTNHQW5GRDF4eW5HSkUxWm51dmpkJywgcHZ0RXJyb3IpXG5cbiAgICB2YXIgcHViID0gcHZ0LnRvUHVibGljKCk7XG4gICAgdmFyIHB1YkVycm9yID0gJ3B1YmtleSBzdHJpbmcgY29tcGFyaXNvbiB0ZXN0IGZhaWxlZCBvbiBhIGtub3duIHB1YmxpYyBrZXknO1xuICAgIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmcoKSwgJ0VPUzg1OWd4Zm5YeVVyaU1nVWVUaGgxZld2M29xY3BMRnlIYTNUZkZZQzRQSzJIcWhUb1ZNJywgcHViRXJyb3IpO1xuICAgIC8vIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmcoKSwgJ1BVQl9LMV84NTlneGZuWHlVcmlNZ1VlVGhoMWZXdjNvcWNwTEZ5SGEzVGZGWUM0UEsySHQ3YmVlWCcsIHB1YkVycm9yKVxuICAgIC8vIGFzc2VydC5lcXVhbChwdWIudG9TdHJpbmdMZWdhY3koKSwgJ0VPUzg1OWd4Zm5YeVVyaU1nVWVUaGgxZld2M29xY3BMRnlIYTNUZkZZQzRQSzJIcWhUb1ZNJywgcHViRXJyb3IpXG5cbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHB2dC50b1dpZigpKTtcbiAgICB9LCAnY29udmVydGluZyBrbm93biB3aWYgZnJvbSBzdHJpbmcnKTtcbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleS5mcm9tU3RyaW5nKHB2dC50b1N0cmluZygpKTtcbiAgICB9LCAnY29udmVydGluZyBrbm93biBwdnQgZnJvbSBzdHJpbmcnKTtcbiAgICBkb2VzTm90VGhyb3coZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvU3RyaW5nKCkpO1xuICAgIH0sICdjb252ZXJ0aW5nIGtub3duIHB1YmxpYyBrZXkgZnJvbSBzdHJpbmcnKTtcbiAgICAvLyBkb2VzTm90VGhyb3coKCkgPT4gUHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvU3RyaW5nTGVnYWN5KCkpLCAnY29udmVydGluZyBrbm93biBwdWJsaWMga2V5IGZyb20gc3RyaW5nJylcblxuICAgIHVuaXRUZXN0ZWQgPSB0cnVlO1xufVxuXG4vKiogQHByaXZhdGUgKi9cbnZhciBkb2VzTm90VGhyb3cgPSBmdW5jdGlvbiBkb2VzTm90VGhyb3coY2IsIG1zZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSA9IG1zZyArICcgPT0+ICcgKyBlcnJvci5tZXNzYWdlO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59OyIsImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vdHlwZXMvbGlicydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvZ2dlciA9IChuYW1lIDogc3RyaW5nKSA9PiAoe1xuICB2ZXJib3NlOiBEZWJ1ZyhgdmVyYm9zZToke25hbWV9YCksXG4gIGluZm86IERlYnVnKGBpbmZvOiR7bmFtZX1gKSxcbiAgd2FybmluZzogRGVidWcoYHdhcm5pbmc6JHtuYW1lfWApLFxuICBlcnJvcjogRGVidWcoYGVycm9yOiR7bmFtZX1gKVxufSlcblxuY29uc3QgbmFtZXNwYWNlcyA9IERlYnVnLmRpc2FibGUoKVxuaWYgKG5hbWVzcGFjZXMgPT09ICcnKSB7XG4gICAgRGVidWcuZW5hYmxlKCdpbmZvOiosd2FybmluZzoqLGVycm9yOionKVxufSBlbHNlIHtcbiAgICBEZWJ1Zy5lbmFibGUobmFtZXNwYWNlcylcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBmb3JNcyAobXMgOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpXG4gIH0pXG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZm9yQ29uZGl0aW9uIChmblByZWRpY3QgOiBGdW5jdGlvbiwgc3Bhbk1zIDogbnVtYmVyID0gMTAwKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGZuUHJlZGljdCgpKSByZXR1cm5cbiAgICBhd2FpdCBmb3JNcyhzcGFuTXMpXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFRpbWVvdXRQcm9taXNlPFQ+IChtcyA6IG51bWJlciwgcHJvbWlzZSA6IFByb21pc2U8VD4pIHtcbiAgbGV0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZWplY3QobmV3IEVycm9yKGBUaW1lZCBvdXQgaW4gJHttc30gbXMuYCkpXG4gICAgfSwgbXMpXG4gIH0pXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgIHByb21pc2UsXG4gICAgdGltZW91dFxuICBdKVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9wbGF5ZXInXG5leHBvcnQgKiBmcm9tICcuL211bHRpU291cmNlUGxheWVyJ1xuZXhwb3J0ICogZnJvbSAnLi9vdXRPZkJveCdcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWwnXG5leHBvcnQgKiBmcm9tICcuL2NvbmZpZ3MnIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgRE9NSXRlcmFibGVzID0gKCdDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LCcgK1xuICAnRE9NVG9rZW5MaXN0LERhdGFUcmFuc2Zlckl0ZW1MaXN0LEZpbGVMaXN0LEhUTUxBbGxDb2xsZWN0aW9uLEhUTUxDb2xsZWN0aW9uLEhUTUxGb3JtRWxlbWVudCxIVE1MU2VsZWN0RWxlbWVudCwnICtcbiAgJ01lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsJyArXG4gICdTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCwnICtcbiAgJ1RleHRUcmFja0xpc3QsVG91Y2hMaXN0Jykuc3BsaXQoJywnKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBET01JdGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBET01JdGVyYWJsZXNbaV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qIDxyZXBsYWNlbWVudD4gKi9cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgd3JpdGFibGVId20gPSBvcHRpb25zLndyaXRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmICh3cml0YWJsZUh3bSB8fCB3cml0YWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbmZ1bmN0aW9uIE1ENSAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbn1cblxuaW5oZXJpdHMoTUQ1LCBIYXNoQmFzZSlcblxuTUQ1LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgTSA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBNW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG5cbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzBdLCAweGQ3NmFhNDc4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMV0sIDB4ZThjN2I3NTYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMl0sIDB4MjQyMDcwZGIsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bM10sIDB4YzFiZGNlZWUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bNF0sIDB4ZjU3YzBmYWYsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs1XSwgMHg0Nzg3YzYyYSwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVs2XSwgMHhhODMwNDYxMywgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVs3XSwgMHhmZDQ2OTUwMSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs4XSwgMHg2OTgwOThkOCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzldLCAweDhiNDRmN2FmLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmZmNWJiMSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxMV0sIDB4ODk1Y2Q3YmUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMTJdLCAweDZiOTAxMTIyLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMTNdLCAweGZkOTg3MTkzLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzE0XSwgMHhhNjc5NDM4ZSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxNV0sIDB4NDliNDA4MjEsIDIyKVxuXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2MiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzRdLCAweGU3ZDNmYmM4LCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKVxuXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs1XSwgMHhmZmZhMzk0MiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzhdLCAweDg3NzFmNjgxLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzExXSwgMHg2ZDlkNjEyMiwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxNF0sIDB4ZmRlNTM4MGMsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMV0sIDB4YTRiZWVhNDQsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs0XSwgMHg0YmRlY2ZhOSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVs3XSwgMHhmNmJiNGI2MCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxMF0sIDB4YmViZmJjNzAsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMTNdLCAweDI4OWI3ZWM2LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMF0sIDB4ZWFhMTI3ZmEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bM10sIDB4ZDRlZjMwODUsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bNl0sIDB4MDQ4ODFkMDUsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bOV0sIDB4ZDlkNGQwMzksIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVsxMl0sIDB4ZTZkYjk5ZTUsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTVdLCAweDFmYTI3Y2Y4LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzJdLCAweGM0YWM1NjY1LCAyMylcblxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZjQyOTIyNDQsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVs3XSwgMHg0MzJhZmY5NywgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxNF0sIDB4YWI5NDIzYTcsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bNV0sIDB4ZmM5M2EwMzksIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMTJdLCAweDY1NWI1OWMzLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bM10sIDB4OGYwY2NjOTIsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZWZmNDdkLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzFdLCAweDg1ODQ1ZGQxLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzhdLCAweDZmYTg3ZTRmLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTVdLCAweGZlMmNlNmUwLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzZdLCAweGEzMDE0MzE0LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzEzXSwgMHg0ZTA4MTFhMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs0XSwgMHhmNzUzN2U4MiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzExXSwgMHhiZDNhZjIzNSwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsyXSwgMHgyYWQ3ZDJiYiwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs5XSwgMHhlYjg2ZDM5MSwgMjEpXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCkgfCAwXG59XG5cbk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCJ2YXIgUG9pbnQgPSByZXF1aXJlKCcuL3BvaW50JylcbnZhciBDdXJ2ZSA9IHJlcXVpcmUoJy4vY3VydmUnKVxuXG52YXIgZ2V0Q3VydmVCeU5hbWUgPSByZXF1aXJlKCcuL25hbWVzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEN1cnZlOiBDdXJ2ZSxcbiAgUG9pbnQ6IFBvaW50LFxuICBnZXRDdXJ2ZUJ5TmFtZTogZ2V0Q3VydmVCeU5hbWVcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2ggKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbmV3IE1ENSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBuZXcgUklQRU1EMTYwKClcblxuICByZXR1cm4gbmV3IEhhc2goc2hhKGFsZykpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIFR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xudmFyIEZjYnVmZmVyID0gcmVxdWlyZSgnLi9mY2J1ZmZlcicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgY3JlYXRlID0gRmNidWZmZXIuY3JlYXRlO1xuXG4vKipcbiAgQHR5cGVkZWYge29iamVjdH0gU2VyaWFsaXplckNvbmZpZ1xuICBAcHJvcGVydHkge2Jvb2xlYW59IFtTZXJpYWxpemVyQ29uZmlnLmRlZmF1bHRzID0gZmFsc2VdIC0gSW5zZXJ0IGluIGRlZmF1bHRzIChsaWtlIDAsIGZhbHNlLCAnMDAwLi4uJywgb3IgJycpIGZvciBhbnkgbWlzc2luZyB2YWx1ZXMuICBUaGlzIGhlbHBzIHRlc3QgYW5kIGluc3BlY3Qgd2hhdCBhIGRlZmluaXRpb24gc2hvdWxkIGxvb2sgbGlrZS4gIERvIG5vdCBlbmFibGUgaW4gcHJvZHVjdGlvbi5cbiAgQHByb3BlcnR5IHtib29sZWFufSBbU2VyaWFsaXplckNvbmZpZy5kZWJ1ZyA9IGZhbHNlXSAtIFByaW50cyBsb3RzIG9mIEhFWCBhbmQgZmllbGQtbGV2ZWwgaW5mb3JtYXRpb24gdG8gaGVscCBkZWJ1ZyBiaW5hcnkgc2VyaWFsaXphdGlvbi5cbiAgQHByb3BlcnR5IHtvYmplY3R9IFtjdXN0b21UeXBlc10gLSBBZGQgb3Igb3ZlcndyaXRlIGxvdyBsZXZlbCB0eXBlcyAoc2VlIC4vc3JjL3R5cGVzLmpzIGBjb25zdCB0eXBlcyA9IHsuLi59YCkuXG4qL1xuXG4vKipcbiAgQHR5cGVkZWYge29iamVjdH0gQ3JlYXRlU3RydWN0XG4gIEBwcm9wZXJ0eSB7QXJyYXk8U3RyaW5nPn0gQ3JlYXRlU3RydWN0LmVycm9ycyAtIElmIGFueSBlcnJvcnMgZXhpc3RzLCBubyBzdHJ1dHMgd2lsbCBiZSBjcmVhdGVkLlxuICBAcHJvcGVydHkge09iamVjdH0gQ3JlYXRlU3RydWN0LnN0cnVjdCAtIFN0cnVjdCBvYmplY3RzIGtleWVkIGJ5IGRlZmluaXRpb24gbmFtZS5cbiAgQHByb3BlcnR5IHtTdHJpbmd9IENyZWF0ZVN0cnVjdC5zdHJ1Y3Quc3RydWN0TmFtZSAtIFN0cnVjdCBvYmplY3QgdGhhdCB3aWxsIHNlcmlhbGl6ZSB0aGlzIHR5cGUuXG4gIEBwcm9wZXJ0eSB7U3RydWN0fSBDcmVhdGVTdHJ1Y3Quc3RydWN0LnN0cnVjdCAtIFN0cnVjdCBvYmplY3QgdGhhdCB3aWxsIHNlcmlhbGl6ZSB0aGlzIHR5cGUgKHNlZSAuL3NyYy9zdHJ1Y3QuanMpLlxuKi9cblxuLyoqXG4gIEBhcmcge29iamVjdH0gZGVmaW5pdGlvbnMgLSBleGFtcGxlcyBodHRwczovL2dpdGh1Yi5jb20vRU9TSU8vZW9zanMtanNvbi9ibG9iL21hc3Rlci9zY2hlbWFcbiAgQGFyZyB7U2VyaWFsaXplckNvbmZpZ30gY29uZmlnXG4gIEByZXR1cm4ge0NyZWF0ZVN0cnVjdH1cbiovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRlZmluaXRpb25zKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICgodHlwZW9mIGRlZmluaXRpb25zID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkZWZpbml0aW9ucykpICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RlZmluaXRpb25zIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyJyk7XG4gIH1cblxuICBpZiAoY29uZmlnLmN1c3RvbVR5cGVzKSB7XG4gICAgZGVmaW5pdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZpbml0aW9ucyk7IC8vY2xvbmVcbiAgICBmb3IgKHZhciBrZXkgaW4gY29uZmlnLmN1c3RvbVR5cGVzKSB7XG4gICAgICAvLyBjdXN0b20gdHlwZXMgb3ZlcndyaXRlIGRlZmluaXRpb25zXG4gICAgICBkZWxldGUgZGVmaW5pdGlvbnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgdHlwZXMgPSBUeXBlcyhjb25maWcpO1xuXG4gIHZhciBfY3JlYXRlID0gY3JlYXRlKGRlZmluaXRpb25zLCB0eXBlcyksXG4gICAgICBlcnJvcnMgPSBfY3JlYXRlLmVycm9ycyxcbiAgICAgIHN0cnVjdHMgPSBfY3JlYXRlLnN0cnVjdHM7XG5cbiAgLyoqIEV4dGVuZCB3aXRoIG1vcmUgSlNPTiBzY2hlbWEgYW5kIHR5cGUgZGVmaW5pdGlvbnMgKi9cblxuXG4gIHZhciBfZXh0ZW5kID0gZnVuY3Rpb24gX2V4dGVuZChwYXJlbnQsIGNoaWxkKSB7XG4gICAgdmFyIGNvbWJpbmVkID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50LCBjaGlsZCk7XG5cbiAgICB2YXIgX2NyZWF0ZTIgPSBjcmVhdGUoY29tYmluZWQsIHR5cGVzKSxcbiAgICAgICAgc3RydWN0cyA9IF9jcmVhdGUyLnN0cnVjdHMsXG4gICAgICAgIGVycm9ycyA9IF9jcmVhdGUyLmVycm9ycztcblxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IGVycm9ycyxcbiAgICAgIHN0cnVjdHM6IHN0cnVjdHMsXG4gICAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChjaGlsZCkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZChjb21iaW5lZCwgY2hpbGQpO1xuICAgICAgfSxcbiAgICAgIGZyb21CdWZmZXI6IGZyb21CdWZmZXIodHlwZXMsIHN0cnVjdHMpLFxuICAgICAgdG9CdWZmZXI6IHRvQnVmZmVyKHR5cGVzLCBzdHJ1Y3RzKVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBlcnJvcnM6IGVycm9ycyxcbiAgICBzdHJ1Y3RzOiBzdHJ1Y3RzLFxuICAgIHR5cGVzOiB0eXBlcyxcbiAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChjaGlsZCkge1xuICAgICAgcmV0dXJuIF9leHRlbmQoZGVmaW5pdGlvbnMsIGNoaWxkKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICBAYXJnIHtzdHJpbmd9IHR5cGVOYW1lIGxvb2t1cCBzdHJ1Y3Qgb3IgdHlwZSBieSBuYW1lXG4gICAgICBAYXJnIHtCdWZmZXJ9IGJ1ZiBzZXJpYWxpemVkIGRhdGEgdG8gYmUgcGFyc2VkXG4gICAgICBAcmV0dXJuIHtvYmplY3R9IGRlc2VyaWFsaXplZCBvYmplY3RcbiAgICAqL1xuICAgIGZyb21CdWZmZXI6IGZyb21CdWZmZXIodHlwZXMsIHN0cnVjdHMpLFxuXG4gICAgLyoqXG4gICAgICBAYXJnIHtzdHJpbmd9IHR5cGVOYW1lIGxvb2t1cCBzdHJ1Y3Qgb3IgdHlwZSBieSBuYW1lXG4gICAgICBAYXJnIHtPYmplY3R9IG9iamVjdCBmb3Igc2VyaWFsaXphdGlvblxuICAgICAgQHJldHVybiB7QnVmZmVyfSBzZXJpYWxpemVkIG9iamVjdFxuICAgICovXG4gICAgdG9CdWZmZXI6IHRvQnVmZmVyKHR5cGVzLCBzdHJ1Y3RzKVxuICB9O1xufTtcblxudmFyIGZyb21CdWZmZXIgPSBmdW5jdGlvbiBmcm9tQnVmZmVyKHR5cGVzLCBzdHJ1Y3RzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodHlwZU5hbWUsIGJ1Zikge1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgdHlwZU5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHR5cGVOYW1lKSwgJ3N0cmluZycsICd0eXBlTmFtZSAodHlwZSBvciBzdHJ1Y3QgbmFtZSknKTtcbiAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZiwgJ2hleCcpO1xuICAgIH1cbiAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGJ1ZiksICdleHBlY3RpbmcgYnVmPGhleHxCdWZmZXI+Jyk7XG5cbiAgICB2YXIgdHlwZSA9IHR5cGVzW3R5cGVOYW1lXTtcbiAgICBpZiAodHlwZSkge1xuICAgICAgdHlwZSA9IHR5cGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IHN0cnVjdHNbdHlwZU5hbWVdO1xuICAgIH1cbiAgICBhc3NlcnQodHlwZSwgJ21pc3NpbmcgdHlwZSBvciBzdHJ1Y3Q6ICcgKyB0eXBlTmFtZSk7XG4gICAgcmV0dXJuIEZjYnVmZmVyLmZyb21CdWZmZXIodHlwZSwgYnVmKTtcbiAgfTtcbn07XG5cbnZhciB0b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyKHR5cGVzLCBzdHJ1Y3RzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodHlwZU5hbWUsIHZhbHVlKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiB0eXBlTmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodHlwZU5hbWUpLCAnc3RyaW5nJywgJ3R5cGVOYW1lICh0eXBlIG9yIHN0cnVjdCBuYW1lKScpO1xuICAgIGFzc2VydCh2YWx1ZSAhPSBudWxsLCAndmFsdWUgaXMgcmVxdWlyZWQnKTtcblxuICAgIHZhciB0eXBlID0gdHlwZXNbdHlwZU5hbWVdO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0eXBlID0gdHlwZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gc3RydWN0c1t0eXBlTmFtZV07XG4gICAgfVxuICAgIGFzc2VydCh0eXBlLCAnbWlzc2luZyB0eXBlIG9yIHN0cnVjdDogJyArIHR5cGVOYW1lKTtcbiAgICByZXR1cm4gRmNidWZmZXIudG9CdWZmZXIodHlwZSwgdmFsdWUpO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMuZnJvbUJ1ZmZlciA9IEZjYnVmZmVyLmZyb21CdWZmZXI7XG5tb2R1bGUuZXhwb3J0cy50b0J1ZmZlciA9IEZjYnVmZmVyLnRvQnVmZmVyOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5Jyk7XG5cbnZhciBfc2xpY2VkVG9BcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGljZWRUb0FycmF5Mik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2Vvc2pzLWVjYycpLFxuICAgIFNpZ25hdHVyZSA9IF9yZXF1aXJlLlNpZ25hdHVyZSxcbiAgICBQdWJsaWNLZXkgPSBfcmVxdWlyZS5QdWJsaWNLZXk7XG5cbnZhciBGY2J1ZmZlciA9IHJlcXVpcmUoJ2ZjYnVmZmVyJyk7XG52YXIgQnl0ZUJ1ZmZlciA9IHJlcXVpcmUoJ2J5dGVidWZmZXInKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxudmFyIHNjaGVtYSA9IHJlcXVpcmUoJy4vc2NoZW1hJyk7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL2Zvcm1hdCcpLFxuICAgIGlzTmFtZSA9IF9yZXF1aXJlMi5pc05hbWUsXG4gICAgZW5jb2RlTmFtZSA9IF9yZXF1aXJlMi5lbmNvZGVOYW1lLFxuICAgIGRlY29kZU5hbWUgPSBfcmVxdWlyZTIuZGVjb2RlTmFtZSxcbiAgICBEZWNpbWFsUGFkID0gX3JlcXVpcmUyLkRlY2ltYWxQYWQsXG4gICAgRGVjaW1hbEltcGx5ID0gX3JlcXVpcmUyLkRlY2ltYWxJbXBseSxcbiAgICBEZWNpbWFsVW5pbXBseSA9IF9yZXF1aXJlMi5EZWNpbWFsVW5pbXBseSxcbiAgICBwcmludEFzc2V0ID0gX3JlcXVpcmUyLnByaW50QXNzZXQsXG4gICAgcGFyc2VBc3NldCA9IF9yZXF1aXJlMi5wYXJzZUFzc2V0O1xuXG4vKiogQ29uZmlndXJlcyBGY2J1ZmZlciBmb3IgRU9TIHNwZWNpZmljIHN0cnVjdHMgYW5kIHR5cGVzLiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGV4dGVuZGVkU2NoZW1hID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdHJ1Y3RMb29rdXAgPSBmdW5jdGlvbiBzdHJ1Y3RMb29rdXAobG9va3VwTmFtZSwgYWNjb3VudCkge1xuICAgIHZhciBjYWNoZSA9IGNvbmZpZy5hYmlDYWNoZS5hYmkoYWNjb3VudCk7XG5cbiAgICAvLyBMb29rdXAgYnkgQUJJIGFjdGlvbiBcIm5hbWVcIlxuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gY2FjaGUuYWJpLmFjdGlvbnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAoYWN0aW9uLm5hbWUgPT09IGxvb2t1cE5hbWUpIHtcbiAgICAgICAgICB2YXIgX3N0cnVjdCA9IGNhY2hlLnN0cnVjdHNbYWN0aW9uLnR5cGVdO1xuICAgICAgICAgIGlmIChfc3RydWN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3RydWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBMb29rdXAgc3RydWN0IGJ5IFwidHlwZVwiXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN0cnVjdCA9IGNhY2hlLnN0cnVjdHNbbG9va3VwTmFtZV07XG4gICAgaWYgKHN0cnVjdCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gc3RydWN0O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBBQkkgYWN0aW9uOiAnICsgbG9va3VwTmFtZSk7XG4gIH07XG5cbiAgLy8gSWYgbm9kZW9zIGRvZXMgbm90IGhhdmUgYW4gQUJJIHNldHVwIGZvciBhIGNlcnRhaW4gYWN0aW9uLnR5cGUsIGl0IHdpbGwgdGhyb3dcbiAgLy8gYW4gZXJyb3I6IGBJbnZhbGlkIGNhc3QgZnJvbSBvYmplY3RfdHlwZSB0byBzdHJpbmdgIC4uIGZvcmNlQWN0aW9uRGF0YUhleFxuICAvLyBtYXkgYmUgdXNlZCB0byB1bnRpbCBuYXRpdmUgQUJJIGlzIGFkZGVkIG9yIGZpeGVkLlxuICB2YXIgZm9yY2VBY3Rpb25EYXRhSGV4ID0gY29uZmlnLmZvcmNlQWN0aW9uRGF0YUhleCAhPSBudWxsID8gY29uZmlnLmZvcmNlQWN0aW9uRGF0YUhleCA6IHRydWU7XG5cbiAgdmFyIG92ZXJyaWRlID0gT2JqZWN0LmFzc2lnbih7fSwgYXV0aG9yaXR5T3ZlcnJpZGUoY29uZmlnKSwgYWJpT3ZlcnJpZGUoc3RydWN0TG9va3VwKSwgd2FzbUNvZGVPdmVycmlkZShjb25maWcpLCBhY3Rpb25EYXRhT3ZlcnJpZGUoc3RydWN0TG9va3VwLCBmb3JjZUFjdGlvbkRhdGFIZXgpLCBjb25maWcub3ZlcnJpZGUpO1xuXG4gIHZhciBlb3NUeXBlcyA9IHtcbiAgICBuYW1lOiBmdW5jdGlvbiBuYW1lKCkge1xuICAgICAgcmV0dXJuIFtOYW1lXTtcbiAgICB9LFxuICAgIHB1YmxpY19rZXk6IGZ1bmN0aW9uIHB1YmxpY19rZXkoKSB7XG4gICAgICByZXR1cm4gW3ZhcmlhbnQoUHVibGljS2V5RWNjKV07XG4gICAgfSxcblxuICAgIHN5bWJvbDogZnVuY3Rpb24gc3ltYm9sKCkge1xuICAgICAgcmV0dXJuIFtfU3ltYm9sXTtcbiAgICB9LFxuICAgIHN5bWJvbF9jb2RlOiBmdW5jdGlvbiBzeW1ib2xfY29kZSgpIHtcbiAgICAgIHJldHVybiBbU3ltYm9sQ29kZV07XG4gICAgfSxcbiAgICBleHRlbmRlZF9zeW1ib2w6IGZ1bmN0aW9uIGV4dGVuZGVkX3N5bWJvbCgpIHtcbiAgICAgIHJldHVybiBbRXh0ZW5kZWRTeW1ib2xdO1xuICAgIH0sXG5cbiAgICBhc3NldDogZnVuY3Rpb24gYXNzZXQoKSB7XG4gICAgICByZXR1cm4gW0Fzc2V0XTtcbiAgICB9LCAvLyBBZnRlciBTeW1ib2w6IGFtb3VudCwgcHJlY2lzaW9uLCBzeW1ib2wsIGNvbnRyYWN0XG4gICAgZXh0ZW5kZWRfYXNzZXQ6IGZ1bmN0aW9uIGV4dGVuZGVkX2Fzc2V0KCkge1xuICAgICAgcmV0dXJuIFtFeHRlbmRlZEFzc2V0XTtcbiAgICB9LCAvLyBBZnRlciBBc3NldDogYW1vdW50LCBwcmVjaXNpb24sIHN5bWJvbCwgY29udHJhY3RcblxuICAgIHNpZ25hdHVyZTogZnVuY3Rpb24gc2lnbmF0dXJlKCkge1xuICAgICAgcmV0dXJuIFt2YXJpYW50KFNpZ25hdHVyZVR5cGUpXTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGN1c3RvbVR5cGVzID0gT2JqZWN0LmFzc2lnbih7fSwgZW9zVHlwZXMsIGNvbmZpZy5jdXN0b21UeXBlcyk7XG4gIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oeyBvdmVycmlkZTogb3ZlcnJpZGUgfSwgeyBjdXN0b21UeXBlczogY3VzdG9tVHlwZXMgfSwgY29uZmlnKTtcblxuICAvLyBEbyBub3Qgc29ydCB0cmFuc2FjdGlvbiBhY3Rpb25zXG4gIGNvbmZpZy5zb3J0ID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLnNvcnQpO1xuICBjb25maWcuc29ydFsnYWN0aW9uLmF1dGhvcml6YXRpb24nXSA9IHRydWU7XG4gIGNvbmZpZy5zb3J0WydzaWduZWRfdHJhbnNhY3Rpb24uc2lnbmF0dXJlJ10gPSB0cnVlO1xuICBjb25maWcuc29ydFsnYXV0aG9yaXR5LmFjY291bnRzJ10gPSB0cnVlO1xuICBjb25maWcuc29ydFsnYXV0aG9yaXR5LmtleXMnXSA9IHRydWU7XG5cbiAgdmFyIGZ1bGxTY2hlbWEgPSBPYmplY3QuYXNzaWduKHt9LCBzY2hlbWEsIGV4dGVuZGVkU2NoZW1hKTtcblxuICB2YXIgX0ZjYnVmZmVyID0gRmNidWZmZXIoZnVsbFNjaGVtYSwgY29uZmlnKSxcbiAgICAgIHN0cnVjdHMgPSBfRmNidWZmZXIuc3RydWN0cyxcbiAgICAgIHR5cGVzID0gX0ZjYnVmZmVyLnR5cGVzLFxuICAgICAgZXJyb3JzID0gX0ZjYnVmZmVyLmVycm9ycyxcbiAgICAgIGZyb21CdWZmZXIgPSBfRmNidWZmZXIuZnJvbUJ1ZmZlcixcbiAgICAgIHRvQnVmZmVyID0gX0ZjYnVmZmVyLnRvQnVmZmVyO1xuXG4gIGlmIChlcnJvcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGVycm9ycywgbnVsbCwgNCkpO1xuICB9XG5cbiAgcmV0dXJuIHsgc3RydWN0czogc3RydWN0cywgdHlwZXM6IHR5cGVzLCBmcm9tQnVmZmVyOiBmcm9tQnVmZmVyLCB0b0J1ZmZlcjogdG9CdWZmZXIgfTtcbn07XG5cbi8qKlxuICBOYW1lIGVvczo6dHlwZXMgbmF0aXZlLmhwcFxuKi9cbnZhciBOYW1lID0gZnVuY3Rpb24gTmFtZSh2YWxpZGF0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBuID0gZGVjb2RlTmFtZShiLnJlYWRVaW50NjQoKSwgZmFsc2UpOyAvLyBiIGlzIGFscmVhZHkgaW4gbGl0dGxlRW5kaWFuXG4gICAgICAvLyBpZih2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAvLyAgIGNvbnNvbGUuZXJyb3IoYCR7bn1gLCAnKE5hbWUuZnJvbUJ5dGVCdWZmZXIpJylcbiAgICAgIC8vIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgLy8gaWYodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgLy8gICBjb25zb2xlLmVycm9yKGAke3ZhbHVlfWAsIChOYW1lLmFwcGVuZEJ5dGVCdWZmZXIpKVxuICAgICAgLy8gfVxuICAgICAgYi53cml0ZVVpbnQ2NChlbmNvZGVOYW1lKHZhbHVlLCBmYWxzZSkpOyAvLyBiIGlzIGFscmVhZHkgaW4gbGl0dGxlRW5kaWFuXG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICBBIHZhcmlhbnQgaXMgbGlrZSBoYXZpbmcgYSB2ZXJzaW9uIG9mIGFuIG9iamVjdC4gIEEgdmFyaW50IGNvbWVzXG4gIGZpcnN0IGFuZCBpZGVudGlmaWVzIHdoaWNoIHR5cGUgb2Ygb2JqZWN0IHRoaXMgaXMuXG5cbiAgQGFyZyB7QXJyYXl9IHZhcmlhbnRBcnJheSBhcnJheSBvZiB0eXBlc1xuKi9cbnZhciB2YXJpYW50ID0gZnVuY3Rpb24gdmFyaWFudCgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhcmlhbnRBcnJheSA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhcmlhbnRBcnJheVtfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAodmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcykge1xuICAgIHZhciB2YXJpYW50cyA9IHZhcmlhbnRBcnJheS5tYXAoZnVuY3Rpb24gKFR5cGUpIHtcbiAgICAgIHJldHVybiBUeXBlKHZhbGlkYXRpb24sIGJhc2VUeXBlcywgY3VzdG9tVHlwZXMpO1xuICAgIH0pO1xuICAgIHZhciBzdGF0aWNWYXJpYW50ID0gYmFzZVR5cGVzLnN0YXRpY192YXJpYW50KHZhcmlhbnRzKTtcblxuICAgIHJldHVybiB7XG4gICAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgICByZXR1cm4gc3RhdGljVmFyaWFudC5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIH0sXG4gICAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IFswLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljVmFyaWFudC5hcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IFswLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRpY1ZhcmlhbnQuZnJvbU9iamVjdCh2YWx1ZSlbMV07XG4gICAgICB9LFxuICAgICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IFswLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRpY1ZhcmlhbnQudG9PYmplY3QodmFsdWUpWzFdO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgUHVibGljS2V5RWNjID0gZnVuY3Rpb24gUHVibGljS2V5RWNjKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGJjb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIDMzKTtcbiAgICAgIGIuc2tpcCgzMyk7XG4gICAgICB2YXIgcHViYnVmID0gQnVmZmVyLmZyb20oYmNvcHkudG9CaW5hcnkoKSwgJ2JpbmFyeScpO1xuICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tQnVmZmVyKHB1YmJ1ZikudG9TdHJpbmcodmFsaWRhdGlvbi5rZXlQcmVmaXgpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgLy8gaWYodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgLy8gICBjb25zb2xlLmVycm9yKGAke3ZhbHVlfWAsICdQdWJsaWNLZXlUeXBlLmFwcGVuZEJ5dGVCdWZmZXInKVxuICAgICAgLy8gfVxuICAgICAgdmFyIGJ1ZiA9IFB1YmxpY0tleS5mcm9tU3RyaW5nT3JUaHJvdyh2YWx1ZSwgdmFsaWRhdGlvbi5rZXlQcmVmaXgpLnRvQnVmZmVyKCk7XG4gICAgICBiLmFwcGVuZChidWYudG9TdHJpbmcoJ2JpbmFyeScpLCAnYmluYXJ5Jyk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdmFyIGtleVByZWZpeCA9IHZhbGlkYXRpb24ua2V5UHJlZml4ID8gdmFsaWRhdGlvbi5rZXlQcmVmaXggOiAnRU9TJztcbiAgICAgICAgcmV0dXJuIGtleVByZWZpeCArICc2TVJ5Li4nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICBJbnRlcm5hbDogcHJlY2lzaW9uLCBzeW1ib2xcbiAgRXh0ZXJuYWw6IHN5bWJvbFxuICBAZXhhbXBsZSAnU1lTJ1xuKi9cbnZhciBfU3ltYm9sID0gZnVuY3Rpb24gX1N5bWJvbCh2YWxpZGF0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBiY29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyA4KTtcbiAgICAgIGIuc2tpcCg4KTtcblxuICAgICAgdmFyIHByZWNpc2lvbiA9IGJjb3B5LnJlYWRVaW50OCgpO1xuICAgICAgdmFyIGJpbiA9IGJjb3B5LnRvQmluYXJ5KCk7XG5cbiAgICAgIHZhciBzeW1ib2wgPSAnJztcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gYmluW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIGNvZGUgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICBpZiAoY29kZSA9PSAnXFwwJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN5bWJvbCArPSBjb2RlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmVjaXNpb24gKyAnLCcgKyBzeW1ib2w7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICB2YXIgX3BhcnNlQXNzZXQgPSBwYXJzZUFzc2V0KHZhbHVlKSxcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldC5zeW1ib2wsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQucHJlY2lzaW9uO1xuXG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdQcmVjaXNpb24gdW5rbm93biBmb3Igc3ltYm9sOiAnICsgdmFsdWUpO1xuICAgICAgdmFyIHBhZCA9ICdcXDAnLnJlcGVhdCg3IC0gc3ltYm9sLmxlbmd0aCk7XG4gICAgICBiLmFwcGVuZChTdHJpbmcuZnJvbUNoYXJDb2RlKHByZWNpc2lvbikgKyBzeW1ib2wgKyBwYWQpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgYXNzZXJ0KHZhbHVlICE9IG51bGwsICdTeW1ib2wgaXMgcmVxdWlyZWQ6ICcgKyB2YWx1ZSk7XG5cbiAgICAgIHZhciBfcGFyc2VBc3NldDIgPSBwYXJzZUFzc2V0KHZhbHVlKSxcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDIuc3ltYm9sLFxuICAgICAgICAgIHByZWNpc2lvbiA9IF9wYXJzZUFzc2V0Mi5wcmVjaXNpb247XG5cbiAgICAgIGlmIChwcmVjaXNpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3ltYm9sO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSW50ZXJuYWwgb2JqZWN0LCB0aGlzIGNhbiBoYXZlIHRoZSBwcmVjaXNpb24gcHJlZml4XG4gICAgICAgIHJldHVybiBwcmVjaXNpb24gKyAnLCcgKyBzeW1ib2w7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdTWVMnO1xuICAgICAgfVxuICAgICAgLy8gc3ltYm9sIG9ubHkgKHdpdGhvdXQgcHJlY2lzaW9uIHByZWZpeClcbiAgICAgIHJldHVybiBwYXJzZUFzc2V0KHZhbHVlKS5zeW1ib2w7XG4gICAgfVxuICB9O1xufTtcblxuLyoqIFN5bWJvbCB0eXBlIHdpdGhvdXQgdGhlIHByZWNpc2lvbiAqL1xudmFyIFN5bWJvbENvZGUgPSBmdW5jdGlvbiBTeW1ib2xDb2RlKHZhbGlkYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIGJjb3B5ID0gYi5jb3B5KGIub2Zmc2V0LCBiLm9mZnNldCArIDgpO1xuICAgICAgYi5za2lwKDgpO1xuXG4gICAgICB2YXIgYmluID0gYmNvcHkudG9CaW5hcnkoKTtcblxuICAgICAgdmFyIHN5bWJvbCA9ICcnO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBiaW5bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgY29kZSA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICAgIGlmIChjb2RlID09ICdcXDAnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3ltYm9sICs9IGNvZGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnICsgc3ltYm9sO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFyIF9wYXJzZUFzc2V0MyA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIHN5bWJvbCA9IF9wYXJzZUFzc2V0My5zeW1ib2w7XG5cbiAgICAgIHZhciBwYWQgPSAnXFwwJy5yZXBlYXQoOCAtIHN5bWJvbC5sZW5ndGgpO1xuICAgICAgYi5hcHBlbmQoc3ltYm9sICsgcGFkKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIGFzc2VydCh2YWx1ZSAhPSBudWxsLCAnU3ltYm9sIGlzIHJlcXVpcmVkOiAnICsgdmFsdWUpO1xuXG4gICAgICB2YXIgX3BhcnNlQXNzZXQ0ID0gcGFyc2VBc3NldCh2YWx1ZSksXG4gICAgICAgICAgc3ltYm9sID0gX3BhcnNlQXNzZXQ0LnN5bWJvbDtcblxuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ1NZUyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VBc3NldCh2YWx1ZSkuc3ltYm9sO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICBJbnRlcm5hbDogcHJlY2lzaW9uLCBzeW1ib2wsIGNvbnRyYWN0XG4gIEV4dGVybmFsOiBzeW1ib2wsIGNvbnRyYWN0XG4gIEBleGFtcGxlICdTWVNAY29udHJhY3QnXG4qL1xudmFyIEV4dGVuZGVkU3ltYm9sID0gZnVuY3Rpb24gRXh0ZW5kZWRTeW1ib2wodmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcykge1xuICB2YXIgc3ltYm9sVHlwZSA9IGN1c3RvbVR5cGVzLnN5bWJvbCh2YWxpZGF0aW9uKTtcbiAgdmFyIGNvbnRyYWN0TmFtZSA9IGN1c3RvbVR5cGVzLm5hbWUodmFsaWRhdGlvbik7XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbFR5cGUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgICB2YXIgY29udHJhY3QgPSBjb250cmFjdE5hbWUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgICByZXR1cm4gc3ltYm9sICsgJ0AnICsgY29udHJhY3Q7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSwgJ3N0cmluZycsICdJbnZhbGlkIGV4dGVuZGVkIHN5bWJvbDogJyArIHZhbHVlKTtcblxuICAgICAgdmFyIF92YWx1ZSRzcGxpdCA9IHZhbHVlLnNwbGl0KCdAJyksXG4gICAgICAgICAgX3ZhbHVlJHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkoX3ZhbHVlJHNwbGl0LCAyKSxcbiAgICAgICAgICBzeW1ib2wgPSBfdmFsdWUkc3BsaXQyWzBdLFxuICAgICAgICAgIGNvbnRyYWN0ID0gX3ZhbHVlJHNwbGl0MlsxXTtcblxuICAgICAgYXNzZXJ0KGNvbnRyYWN0ICE9IG51bGwsICdNaXNzaW5nIEBjb250cmFjdCBzdWZmaXggaW4gZXh0ZW5kZWQgc3ltYm9sOiAnICsgdmFsdWUpO1xuXG4gICAgICBzeW1ib2xUeXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgc3ltYm9sKTtcbiAgICAgIGNvbnRyYWN0TmFtZS5hcHBlbmRCeXRlQnVmZmVyKGIsIGNvbnRyYWN0KTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ1NZU0Bjb250cmFjdCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIEludGVybmFsOiBhbW91bnQsIHByZWNpc2lvbiwgc3ltYm9sLCBjb250cmFjdFxuICBAZXhhbXBsZSAnMS4wMDAwIFNZUydcbiovXG52YXIgQXNzZXQgPSBmdW5jdGlvbiBBc3NldCh2YWxpZGF0aW9uLCBiYXNlVHlwZXMsIGN1c3RvbVR5cGVzKSB7XG4gIHZhciBhbW91bnRUeXBlID0gYmFzZVR5cGVzLmludDY0KHZhbGlkYXRpb24pO1xuICB2YXIgc3ltYm9sVHlwZSA9IGN1c3RvbVR5cGVzLnN5bWJvbCh2YWxpZGF0aW9uKTtcblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYW1vdW50ID0gYW1vdW50VHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICAgIGFzc2VydChhbW91bnQgIT0gbnVsbCwgJ2Ftb3VudCcpO1xuXG4gICAgICB2YXIgc3ltID0gc3ltYm9sVHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcblxuICAgICAgdmFyIF9wYXJzZUFzc2V0NSA9IHBhcnNlQXNzZXQoJycgKyBzeW0pLFxuICAgICAgICAgIHByZWNpc2lvbiA9IF9wYXJzZUFzc2V0NS5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gX3BhcnNlQXNzZXQ1LnN5bWJvbDtcblxuICAgICAgYXNzZXJ0KHByZWNpc2lvbiAhPSBudWxsLCAncHJlY2lzaW9uJyk7XG4gICAgICBhc3NlcnQoc3ltYm9sICE9IG51bGwsICdzeW1ib2wnKTtcblxuICAgICAgcmV0dXJuIERlY2ltYWxVbmltcGx5KGFtb3VudCwgcHJlY2lzaW9uKSArICcgJyArIHN5bWJvbDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhciBfcGFyc2VBc3NldDYgPSBwYXJzZUFzc2V0KHZhbHVlKSxcbiAgICAgICAgICBhbW91bnQgPSBfcGFyc2VBc3NldDYuYW1vdW50LFxuICAgICAgICAgIHByZWNpc2lvbiA9IF9wYXJzZUFzc2V0Ni5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gX3BhcnNlQXNzZXQ2LnN5bWJvbDtcblxuICAgICAgYXNzZXJ0KGFtb3VudCAhPSBudWxsLCAnYW1vdW50Jyk7XG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdwcmVjaXNpb24nKTtcbiAgICAgIGFzc2VydChzeW1ib2wgIT0gbnVsbCwgJ3N5bWJvbCcpO1xuXG4gICAgICBhbW91bnRUeXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgRGVjaW1hbEltcGx5KGFtb3VudCwgcHJlY2lzaW9uKSk7XG4gICAgICBzeW1ib2xUeXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgcHJlY2lzaW9uICsgJywnICsgc3ltYm9sKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciBfcGFyc2VBc3NldDcgPSBwYXJzZUFzc2V0KHZhbHVlKSxcbiAgICAgICAgICBhbW91bnQgPSBfcGFyc2VBc3NldDcuYW1vdW50LFxuICAgICAgICAgIHByZWNpc2lvbiA9IF9wYXJzZUFzc2V0Ny5wcmVjaXNpb24sXG4gICAgICAgICAgc3ltYm9sID0gX3BhcnNlQXNzZXQ3LnN5bWJvbDtcblxuICAgICAgYXNzZXJ0KGFtb3VudCAhPSBudWxsLCAnYW1vdW50Jyk7XG4gICAgICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdwcmVjaXNpb24nKTtcbiAgICAgIGFzc2VydChzeW1ib2wgIT0gbnVsbCwgJ3N5bWJvbCcpO1xuXG4gICAgICByZXR1cm4gRGVjaW1hbFBhZChhbW91bnQsIHByZWNpc2lvbikgKyAnICcgKyBzeW1ib2w7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcwLjAwMDEgU1lTJztcbiAgICAgIH1cblxuICAgICAgdmFyIF9wYXJzZUFzc2V0OCA9IHBhcnNlQXNzZXQodmFsdWUpLFxuICAgICAgICAgIGFtb3VudCA9IF9wYXJzZUFzc2V0OC5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gX3BhcnNlQXNzZXQ4LnByZWNpc2lvbixcbiAgICAgICAgICBzeW1ib2wgPSBfcGFyc2VBc3NldDguc3ltYm9sO1xuXG4gICAgICBhc3NlcnQoYW1vdW50ICE9IG51bGwsICdhbW91bnQnKTtcbiAgICAgIGFzc2VydChwcmVjaXNpb24gIT0gbnVsbCwgJ3ByZWNpc2lvbicpO1xuICAgICAgYXNzZXJ0KHN5bWJvbCAhPSBudWxsLCAnc3ltYm9sJyk7XG5cbiAgICAgIHJldHVybiBEZWNpbWFsUGFkKGFtb3VudCwgcHJlY2lzaW9uKSArICcgJyArIHN5bWJvbDtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAgQGV4YW1wbGUgJzEuMDAwMCBTWVNAY29udHJhY3QnXG4qL1xudmFyIEV4dGVuZGVkQXNzZXQgPSBmdW5jdGlvbiBFeHRlbmRlZEFzc2V0KHZhbGlkYXRpb24sIGJhc2VUeXBlcywgY3VzdG9tVHlwZXMpIHtcbiAgdmFyIGFzc2V0VHlwZSA9IGN1c3RvbVR5cGVzLmFzc2V0KHZhbGlkYXRpb24pO1xuICB2YXIgY29udHJhY3ROYW1lID0gY3VzdG9tVHlwZXMubmFtZSh2YWxpZGF0aW9uKTtcblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYXNzZXQgPSBhc3NldFR5cGUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgICB2YXIgY29udHJhY3QgPSBjb250cmFjdE5hbWUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgICByZXR1cm4gcGFyc2VBc3NldChhc3NldCArICdAJyArIGNvbnRyYWN0KTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpLCAnb2JqZWN0JywgJ2V4cGVjdGluZyBleHRlbmRlZF9hc3NldCBvYmplY3QsIGdvdCAnICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpKTtcblxuICAgICAgdmFyIGFzc2V0ID0gcHJpbnRBc3NldCh2YWx1ZSk7XG5cbiAgICAgIHZhciBfYXNzZXQkc3BsaXQgPSBhc3NldC5zcGxpdCgnQCcpLFxuICAgICAgICAgIF9hc3NldCRzcGxpdDIgPSAoMCwgX3NsaWNlZFRvQXJyYXkzLmRlZmF1bHQpKF9hc3NldCRzcGxpdCwgMiksXG4gICAgICAgICAgY29udHJhY3QgPSBfYXNzZXQkc3BsaXQyWzFdO1xuXG4gICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGNvbnRyYWN0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNvbnRyYWN0KSwgJ3N0cmluZycsICdJbnZhbGlkIGV4dGVuZGVkIGFzc2V0OiAnICsgdmFsdWUpO1xuXG4gICAgICAvLyBhc3NldCBpbmNsdWRlcyBjb250cmFjdCAoYXNzZXRUeXBlIG5lZWRzIHRoaXMpXG4gICAgICBhc3NldFR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBhc3NldCk7XG4gICAgICBjb250cmFjdE5hbWUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBjb250cmFjdCk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICAvLyBsaWtlOiAxLjAwMDAgU1lTQGNvbnRyYWN0IG9yIDEgU1lTQGNvbnRyYWN0XG4gICAgICB2YXIgYXNzZXQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXNzZXQsIHBhcnNlQXNzZXQodmFsdWUpKTtcbiAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBPYmplY3QuYXNzaWduKGFzc2V0LCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3NlcnQoZmFsc2UsICdleHBlY3RpbmcgZXh0ZW5kZWRfYXNzZXQ8b2JqZWN0fHN0cmluZz4sIGdvdDogJyArICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbW91bnQgPSBhc3NldC5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gYXNzZXQucHJlY2lzaW9uLFxuICAgICAgICAgIHN5bWJvbCA9IGFzc2V0LnN5bWJvbCxcbiAgICAgICAgICBjb250cmFjdCA9IGFzc2V0LmNvbnRyYWN0O1xuXG4gICAgICBhc3NlcnQoYW1vdW50ICE9IG51bGwsICdtaXNzaW5nIGFtb3VudCcpO1xuICAgICAgYXNzZXJ0KHByZWNpc2lvbiAhPSBudWxsLCAnbWlzc2luZyBwcmVjaXNpb24nKTtcbiAgICAgIGFzc2VydChzeW1ib2wgIT0gbnVsbCwgJ21pc3Npbmcgc3ltYm9sJyk7XG4gICAgICBhc3NlcnQoY29udHJhY3QgIT0gbnVsbCwgJ21pc3NpbmcgY29udHJhY3QnKTtcblxuICAgICAgcmV0dXJuIHsgYW1vdW50OiBhbW91bnQsIHByZWNpc2lvbjogcHJlY2lzaW9uLCBzeW1ib2w6IHN5bWJvbCwgY29udHJhY3Q6IGNvbnRyYWN0IH07XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhbW91bnQ6ICcxLjAwMDAnLFxuICAgICAgICAgIHByZWNpc2lvbjogNCxcbiAgICAgICAgICBzeW1ib2w6ICdTWVMnLFxuICAgICAgICAgIGNvbnRyYWN0OiAnZW9zaW8udG9rZW4nXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpLCAnb2JqZWN0JywgJ2V4cGVjdGluZyBleHRlbmRlZF9hc3NldCBvYmplY3QnKTtcbiAgICAgIHZhciBhbW91bnQgPSB2YWx1ZS5hbW91bnQsXG4gICAgICAgICAgcHJlY2lzaW9uID0gdmFsdWUucHJlY2lzaW9uLFxuICAgICAgICAgIHN5bWJvbCA9IHZhbHVlLnN5bWJvbCxcbiAgICAgICAgICBjb250cmFjdCA9IHZhbHVlLmNvbnRyYWN0O1xuXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFtb3VudDogRGVjaW1hbFBhZChhbW91bnQsIHByZWNpc2lvbiksXG4gICAgICAgIHByZWNpc2lvbjogcHJlY2lzaW9uLFxuICAgICAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICAgICAgY29udHJhY3Q6IGNvbnRyYWN0XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBTaWduYXR1cmVUeXBlID0gZnVuY3Rpb24gU2lnbmF0dXJlVHlwZSh2YWxpZGF0aW9uLCBiYXNlVHlwZXMpIHtcbiAgdmFyIHNpZ25hdHVyZVR5cGUgPSBiYXNlVHlwZXMuZml4ZWRfYnl0ZXM2NSh2YWxpZGF0aW9uKTtcbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgdmFyIHNpZ25hdHVyZUJ1ZmZlciA9IHNpZ25hdHVyZVR5cGUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgICB2YXIgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20oc2lnbmF0dXJlQnVmZmVyKTtcbiAgICAgIHJldHVybiBzaWduYXR1cmUudG9TdHJpbmcoKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhciBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbSh2YWx1ZSk7XG4gICAgICBzaWduYXR1cmVUeXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgc2lnbmF0dXJlLnRvQnVmZmVyKCkpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHZhbHVlKTtcbiAgICAgIHJldHVybiBzaWduYXR1cmUudG9TdHJpbmcoKTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ1NJR19LMV9iYXM1OHNpZ25hdHVyZS4uJztcbiAgICAgIH1cbiAgICAgIHZhciBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbSh2YWx1ZSk7XG4gICAgICByZXR1cm4gc2lnbmF0dXJlLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGF1dGhvcml0eU92ZXJyaWRlID0gZnVuY3Rpb24gYXV0aG9yaXR5T3ZlcnJpZGUoY29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgLyoqIHNob3J0aGFuZCBgRU9TNk1SeUFqLi5gICovXG4gICAgJ2F1dGhvcml0eS5mcm9tT2JqZWN0JzogZnVuY3Rpb24gYXV0aG9yaXR5RnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKFB1YmxpY0tleS5mcm9tU3RyaW5nKHZhbHVlLCBjb25maWcua2V5UHJlZml4KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRocmVzaG9sZDogMSxcbiAgICAgICAgICBrZXlzOiBbeyBrZXk6IHZhbHVlLCB3ZWlnaHQ6IDEgfV1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBfdmFsdWUkc3BsaXQzID0gdmFsdWUuc3BsaXQoJ0AnKSxcbiAgICAgICAgICAgIF92YWx1ZSRzcGxpdDQgPSAoMCwgX3NsaWNlZFRvQXJyYXkzLmRlZmF1bHQpKF92YWx1ZSRzcGxpdDMsIDIpLFxuICAgICAgICAgICAgYWNjb3VudCA9IF92YWx1ZSRzcGxpdDRbMF0sXG4gICAgICAgICAgICBfdmFsdWUkc3BsaXQ0JCA9IF92YWx1ZSRzcGxpdDRbMV0sXG4gICAgICAgICAgICBwZXJtaXNzaW9uID0gX3ZhbHVlJHNwbGl0NCQgPT09IHVuZGVmaW5lZCA/ICdhY3RpdmUnIDogX3ZhbHVlJHNwbGl0NCQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aHJlc2hvbGQ6IDEsXG4gICAgICAgICAgYWNjb3VudHM6IFt7XG4gICAgICAgICAgICBwZXJtaXNzaW9uOiB7XG4gICAgICAgICAgICAgIGFjdG9yOiBhY2NvdW50LFxuICAgICAgICAgICAgICBwZXJtaXNzaW9uOiBwZXJtaXNzaW9uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2VpZ2h0OiAxXG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG52YXIgYWJpT3ZlcnJpZGUgPSBmdW5jdGlvbiBhYmlPdmVycmlkZShzdHJ1Y3RMb29rdXApIHtcbiAgcmV0dXJuIHtcbiAgICAnYWJpX2RlZi5mcm9tT2JqZWN0JzogZnVuY3Rpb24gYWJpX2RlZkZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBqc29uID0gQnVmZmVyLmZyb20odmFsdWUsICdoZXgnKS50b1N0cmluZygpO1xuICAgICAgICBpZiAoanNvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBqc29uID0gQnVmZmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbik7XG4gICAgICB9XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsOyAvLyBsZXQgdGhlIGRlZmF1bHQgdHlwZSB0YWtlIGNhcmUgb2YgaXRcbiAgICB9LFxuXG4gICAgJ3NldGFiaS5hYmkuYXBwZW5kQnl0ZUJ1ZmZlcic6IGZ1bmN0aW9uIHNldGFiaUFiaUFwcGVuZEJ5dGVCdWZmZXIoX3JlZikge1xuICAgICAgdmFyIGZpZWxkcyA9IF9yZWYuZmllbGRzLFxuICAgICAgICAgIG9iamVjdCA9IF9yZWYub2JqZWN0LFxuICAgICAgICAgIGIgPSBfcmVmLmI7XG5cbiAgICAgIHZhciBzZXIgPSBzdHJ1Y3RMb29rdXAoJ2FiaV9kZWYnLCAnZW9zaW8nKTtcbiAgICAgIHZhciBiMiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcblxuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmplY3QuYWJpKSkge1xuICAgICAgICBiMi5hcHBlbmQob2JqZWN0LmFiaSk7XG4gICAgICB9IGVsc2UgaWYgKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShvYmplY3QuYWJpKSA9PSAnb2JqZWN0Jykge1xuICAgICAgICBzZXIuYXBwZW5kQnl0ZUJ1ZmZlcihiMiwgb2JqZWN0LmFiaSk7XG4gICAgICB9XG5cbiAgICAgIGIud3JpdGVWYXJpbnQzMihiMi5vZmZzZXQpOyAvLyBsZW5ndGggcHJlZml4XG4gICAgICBiLmFwcGVuZChiMi5jb3B5KDAsIGIyLm9mZnNldCksICdiaW5hcnknKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgd2FzbUNvZGVPdmVycmlkZSA9IGZ1bmN0aW9uIHdhc21Db2RlT3ZlcnJpZGUoY29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgJ3NldGNvZGUuY29kZS5mcm9tT2JqZWN0JzogZnVuY3Rpb24gc2V0Y29kZUNvZGVGcm9tT2JqZWN0KF9yZWYyKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gX3JlZjIub2JqZWN0LFxuICAgICAgICAgIHJlc3VsdCA9IF9yZWYyLnJlc3VsdDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGNvZGUgPSBvYmplY3QuY29kZS50b1N0cmluZygpO1xuICAgICAgICBpZiAoL15cXHMqXFwobW9kdWxlLy50ZXN0KGNvZGUpKSB7XG4gICAgICAgICAgdmFyIGJpbmFyeWVuID0gY29uZmlnLmJpbmFyeWVuO1xuXG4gICAgICAgICAgYXNzZXJ0KGJpbmFyeWVuICE9IG51bGwsICdyZXF1aXJlZDogY29uZmlnLmJpbmFyeWVuID0gcmVxdWlyZShcImJpbmFyeWVuXCIpJyk7XG4gICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Fzc2VtYmxpbmcgV0FTTS4uJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB3YXNtID0gQnVmZmVyLmZyb20oYmluYXJ5ZW4ucGFyc2VUZXh0KGNvZGUpLmVtaXRCaW5hcnkoKSk7XG4gICAgICAgICAgcmVzdWx0LmNvZGUgPSB3YXNtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5jb2RlID0gb2JqZWN0LmNvZGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IsIG9iamVjdC5jb2RlKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gIE5lc3RlZCBzZXJpYWxpemVkIHN0cnVjdHVyZS4gIE5lc3RlZCBzdHJ1Y3QgbWF5IGJlIGluIEhFWCBvciBvYmplY3QgZm9ybWF0LlxuKi9cbnZhciBhY3Rpb25EYXRhT3ZlcnJpZGUgPSBmdW5jdGlvbiBhY3Rpb25EYXRhT3ZlcnJpZGUoc3RydWN0TG9va3VwLCBmb3JjZUFjdGlvbkRhdGFIZXgpIHtcbiAgcmV0dXJuIHtcbiAgICAnYWN0aW9uLmRhdGEuZnJvbUJ5dGVCdWZmZXInOiBmdW5jdGlvbiBhY3Rpb25EYXRhRnJvbUJ5dGVCdWZmZXIoX3JlZjMpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfcmVmMy5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZjMub2JqZWN0LFxuICAgICAgICAgIGIgPSBfcmVmMy5iLFxuICAgICAgICAgIGNvbmZpZyA9IF9yZWYzLmNvbmZpZztcblxuICAgICAgdmFyIHNlciA9IChvYmplY3QubmFtZSB8fCAnJykgPT0gJycgPyBmaWVsZHMuZGF0YSA6IHN0cnVjdExvb2t1cChvYmplY3QubmFtZSwgb2JqZWN0LmFjY291bnQpO1xuICAgICAgaWYgKHNlcikge1xuICAgICAgICBiLnJlYWRWYXJpbnQzMigpOyAvLyBsZW5ndGggcHJlZml4ICh1c2VmdWxsIGlmIG9iamVjdC5uYW1lIGlzIHVua25vd24pXG4gICAgICAgIG9iamVjdC5kYXRhID0gc2VyLmZyb21CeXRlQnVmZmVyKGIsIGNvbmZpZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgVW5rbm93biBBY3Rpb24ubmFtZSAke29iamVjdC5uYW1lfWApXG4gICAgICAgIHZhciBsZW5QcmVmaXggPSBiLnJlYWRWYXJpbnQzMigpO1xuICAgICAgICB2YXIgYkNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgbGVuUHJlZml4KTtcbiAgICAgICAgYi5za2lwKGxlblByZWZpeCk7XG4gICAgICAgIG9iamVjdC5kYXRhID0gQnVmZmVyLmZyb20oYkNvcHkudG9CaW5hcnkoKSwgJ2JpbmFyeScpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAnYWN0aW9uLmRhdGEuYXBwZW5kQnl0ZUJ1ZmZlcic6IGZ1bmN0aW9uIGFjdGlvbkRhdGFBcHBlbmRCeXRlQnVmZmVyKF9yZWY0KSB7XG4gICAgICB2YXIgZmllbGRzID0gX3JlZjQuZmllbGRzLFxuICAgICAgICAgIG9iamVjdCA9IF9yZWY0Lm9iamVjdCxcbiAgICAgICAgICBiID0gX3JlZjQuYjtcblxuICAgICAgdmFyIHNlciA9IChvYmplY3QubmFtZSB8fCAnJykgPT0gJycgPyBmaWVsZHMuZGF0YSA6IHN0cnVjdExvb2t1cChvYmplY3QubmFtZSwgb2JqZWN0LmFjY291bnQpO1xuICAgICAgaWYgKHNlcikge1xuICAgICAgICB2YXIgYjIgPSBuZXcgQnl0ZUJ1ZmZlcihCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFksIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTik7XG4gICAgICAgIHNlci5hcHBlbmRCeXRlQnVmZmVyKGIyLCBvYmplY3QuZGF0YSk7XG4gICAgICAgIGIud3JpdGVWYXJpbnQzMihiMi5vZmZzZXQpO1xuICAgICAgICBiLmFwcGVuZChiMi5jb3B5KDAsIGIyLm9mZnNldCksICdiaW5hcnknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBVbmtub3duIEFjdGlvbi5uYW1lICR7b2JqZWN0Lm5hbWV9YClcbiAgICAgICAgdmFyIGRhdGEgPSB0eXBlb2Ygb2JqZWN0LmRhdGEgPT09ICdzdHJpbmcnID8gQnVmZmVyLmZyb20ob2JqZWN0LmRhdGEsICdoZXgnKSA6IG9iamVjdC5kYXRhO1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gc3RydWN0IFxcJycgKyBvYmplY3QubmFtZSArICdcXCcgZm9yIGNvbnRyYWN0IFxcJycgKyBvYmplY3QuYWNjb3VudCArICdcXCcsIGxvY2F0ZSB0aGlzIHN0cnVjdCBvciBwcm92aWRlIHNlcmlhbGl6ZWQgYWN0aW9uLmRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICBiLndyaXRlVmFyaW50MzIoZGF0YS5sZW5ndGgpO1xuICAgICAgICBiLmFwcGVuZChkYXRhLnRvU3RyaW5nKCdiaW5hcnknKSwgJ2JpbmFyeScpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAnYWN0aW9uLmRhdGEuZnJvbU9iamVjdCc6IGZ1bmN0aW9uIGFjdGlvbkRhdGFGcm9tT2JqZWN0KF9yZWY1KSB7XG4gICAgICB2YXIgZmllbGRzID0gX3JlZjUuZmllbGRzLFxuICAgICAgICAgIG9iamVjdCA9IF9yZWY1Lm9iamVjdCxcbiAgICAgICAgICByZXN1bHQgPSBfcmVmNS5yZXN1bHQ7XG4gICAgICB2YXIgZGF0YSA9IG9iamVjdC5kYXRhLFxuICAgICAgICAgIG5hbWUgPSBvYmplY3QubmFtZTtcblxuICAgICAgdmFyIHNlciA9IChuYW1lIHx8ICcnKSA9PSAnJyA/IGZpZWxkcy5kYXRhIDogc3RydWN0TG9va3VwKG5hbWUsIG9iamVjdC5hY2NvdW50KTtcbiAgICAgIGlmIChzZXIpIHtcbiAgICAgICAgaWYgKCh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgcmVzdWx0LmRhdGEgPSBzZXIuZnJvbU9iamVjdChkYXRhKTsgLy8gcmVzb2x2ZSBzaG9ydGhhbmRcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmZyb20oZGF0YSwgJ2hleCcpO1xuICAgICAgICAgIHJlc3VsdC5kYXRhID0gRmNidWZmZXIuZnJvbUJ1ZmZlcihzZXIsIGJ1Zik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0aW5nIGhleCBzdHJpbmcgb3Igb2JqZWN0IGluIGFjdGlvbi5kYXRhJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBVbmtub3duIEFjdGlvbi5uYW1lICR7b2JqZWN0Lm5hbWV9YClcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBkYXRhO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAnYWN0aW9uLmRhdGEudG9PYmplY3QnOiBmdW5jdGlvbiBhY3Rpb25EYXRhVG9PYmplY3QoX3JlZjYpIHtcbiAgICAgIHZhciBmaWVsZHMgPSBfcmVmNi5maWVsZHMsXG4gICAgICAgICAgb2JqZWN0ID0gX3JlZjYub2JqZWN0LFxuICAgICAgICAgIHJlc3VsdCA9IF9yZWY2LnJlc3VsdCxcbiAgICAgICAgICBjb25maWcgPSBfcmVmNi5jb25maWc7XG5cbiAgICAgIHZhciBfcmVmNyA9IG9iamVjdCB8fCB7fSxcbiAgICAgICAgICBkYXRhID0gX3JlZjcuZGF0YSxcbiAgICAgICAgICBuYW1lID0gX3JlZjcubmFtZTtcblxuICAgICAgdmFyIHNlciA9IChuYW1lIHx8ICcnKSA9PSAnJyA/IGZpZWxkcy5kYXRhIDogc3RydWN0TG9va3VwKG5hbWUsIG9iamVjdC5hY2NvdW50KTtcbiAgICAgIGlmICghc2VyKSB7XG4gICAgICAgIC8vIFR5cGVzIHdpdGhvdXQgYW4gQUJJIHdpbGwgYWNjZXB0IGhleFxuICAgICAgICByZXN1bHQuZGF0YSA9IEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSA/IGRhdGEudG9TdHJpbmcoJ2hleCcpIDogZGF0YTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9yY2VBY3Rpb25EYXRhSGV4KSB7XG4gICAgICAgIHZhciBiMiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICBzZXIuYXBwZW5kQnl0ZUJ1ZmZlcihiMiwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmRhdGEgPSBiMi5jb3B5KDAsIGIyLm9mZnNldCkudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncmVzdWx0LmRhdGEnLCByZXN1bHQuZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXJpYWxpemFibGUgSlNPTlxuICAgICAgcmVzdWx0LmRhdGEgPSBzZXIudG9PYmplY3QoZGF0YSwgY29uZmlnKTtcbiAgICB9XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2lzSXRlcmFibGUyID0gcmVxdWlyZShcIi4uL2NvcmUtanMvaXMtaXRlcmFibGVcIik7XG5cbnZhciBfaXNJdGVyYWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0l0ZXJhYmxlMik7XG5cbnZhciBfZ2V0SXRlcmF0b3IyID0gcmVxdWlyZShcIi4uL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCIpO1xuXG52YXIgX2dldEl0ZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEl0ZXJhdG9yMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHtcbiAgICB2YXIgX2FyciA9IFtdO1xuICAgIHZhciBfbiA9IHRydWU7XG4gICAgdmFyIF9kID0gZmFsc2U7XG4gICAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pID0gKDAsIF9nZXRJdGVyYXRvcjMuZGVmYXVsdCkoYXJyKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9IHRydWU7XG4gICAgICBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzSXRlcmFibGUzLmRlZmF1bHQpKE9iamVjdChhcnIpKSkge1xuICAgICAgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG4gICAgfVxuICB9O1xufSgpOyIsImltcG9ydCBBc3NldCBmcm9tICcuL21vZGVsL2Fzc2V0J1xuaW1wb3J0IHtjcmVhdGVMb2dnZXJ9IGZyb20gJy4vdXRpbHMvbG9nJ1xuXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vdXRpbHMvZXZlbnRIYW5kbGVyJ1xuaW1wb3J0IENoYWluSGVscGVyIGZyb20gJy4vaGVscGVycy9jaGFpbidcbmltcG9ydCBLaEhlbHBlciBmcm9tICcuL2hlbHBlcnMva2gnXG5pbXBvcnQgRW9zUHJvdmlkZXIgZnJvbSAnLi9tb2RlbC9lb3NQcm92aWRlcidcblxuY29uc3QgbG9nID0gY3JlYXRlTG9nZ2VyKCdjaGFpbicpO1xuXG5jb25zdCBwYWNrYWdlSnNvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpXG5cbi8qKlxuICogZXZlbnQgbmFtZXMgc3VwcG9ydGVkIGluIHBsYXllclxuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICogQHR5cGUge3tFUlJfVFJBTlNDQUxfRkFJTEVEOiBzdHJpbmd9fVxuICovXG5jb25zdCBFVkVOVF9OQU1FUyA9IHtcbiAgICBFUlJfVFJBTlNGRVJfRkFJTEVEOiAnRVJSX1RSQU5TRkVSX0ZBSUxFRCcsXG4gICAgRVJSX1RSQU5TQ0FMX0ZBSUxFRDogJ0VSUl9UUkFOU0NBTF9GQUlMRUQnLFxuICAgIEVSUl9UUkFOU0VORF9GQUlMRUQ6ICdFUlJfVFJBTlNFTkRfRkFJTEVEJ1xufVxuXG4vKipcbiAqIFBsYXllclxuICovXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgRW9zUHJvdmlkZXIge1xuXG4gICAgcHJvdGVjdGVkIF9ldmVudHM6IEV2ZW50SGFuZGxlciA9IG5ldyBFdmVudEhhbmRsZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmV2ZW50cy5lbmFibGVFdmVudHMoRVZFTlRfTkFNRVMpXG4gICAgfVxuXG4gICAgcHVibGljIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXIoKSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNoYWluKCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYWluSGVscGVyKHRoaXMuZW9zQ2xpZW50KVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQga2goKSB7XG4gICAgICAgIHJldHVybiBuZXcgS2hIZWxwZXIodGhpcy5jaGFpbilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWNjb3VudCBpbmZvIG9mIGFueSB1c2VyLCBpZiB0aGUgYWNjb3VudCBuYW1lIG5vdCBnaXZlbiwgYWNjb3VudCBpbmZvIG9mIGN1cnJlbnQgaWRlbnRpdHkgd2lsbCByZXR1cm5cbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7QWNjb3VudEluZm99Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lPzogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYWluLmdldEFjY291bnRJbmZvKGFjY291bnRfbmFtZSB8fCAoYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpKS5uYW1lKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gY29kZSAtIEFjY291bnQgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0LiBUaGUgZGVmYXVsdCBjb2RlIGlzIFwiZW9zaW8udG9rZW5cIiwgd2hpY2ggaXMgdGhlIGN1cnJlbmN5IGNvZGUgb2YgZW9zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIHVzZXIncyBhY2NvdW50IG5hbWUsIG5hbWUgb2YgY3VyIGlkZW50aXR5IGJ5IGRlZmF1bHRcbiAgICAgKiBAcGFyYW0gc3ltYm9sTmFtZSAtIHRoZSB0b2tlbidzIHN5bWJvbCBuYW1lXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmd8dW5kZWZpbmVkPn0gYXNzZXQgZm9ybWF0ICcxLjAwMDAgRU9TJ1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRCYWxhbmNlKGFjY291bnRfbmFtZT86IHN0cmluZywgY29kZTogc3RyaW5nID0gJ2Vvc2lvLnRva2VuJywgc3ltYm9sTmFtZT86IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFpbi5nZXRCYWxhbmNlKGFjY291bnRfbmFtZSB8fCAoYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpKS5uYW1lLCBjb2RlLCBzeW1ib2xOYW1lKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlcyBsaXN0IG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gY29kZSAtIEFjY291bnQgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0LiBUaGUgZGVmYXVsdCBjb2RlIGlzIFwiZW9zaW8udG9rZW5cIlxuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSB1c2VyJ3MgYWNjb3VudCBuYW1lLCBuYW1lIG9mIGN1ciBpZGVudGl0eSBieSBkZWZhdWx0XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheS48c3RyaW5nPj59IGFzc2V0IGZvcm1hdCAnMS4wMDAwIEVPUydcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QmFsYW5jZXMoYWNjb3VudF9uYW1lPzogc3RyaW5nLCBjb2RlOiBzdHJpbmcgPSAnZW9zaW8udG9rZW4nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYWluLmdldEJhbGFuY2VzKGFjY291bnRfbmFtZSB8fCAoYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpKS5uYW1lLCBjb2RlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIHZhbHVlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gY29kZSAtIEFjY291bnQgb2YgdGhlIGN1cnJlbmN5IGNvbnRyYWN0LiBUaGUgZGVmYXVsdCBjb2RlIGlzIFwiZW9zaW8udG9rZW5cIiwgd2hpY2ggaXMgdGhlIGN1cnJlbmN5IGNvZGUgb2YgZW9zXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIHVzZXIncyBhY2NvdW50IG5hbWUsIG5hbWUgb2YgY3VyIGlkZW50aXR5IGJ5IGRlZmF1bHRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFzc2V0Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QmFsYW5jZUFzc2V0KGFjY291bnRfbmFtZT86IHN0cmluZywgY29kZSA9ICdlb3Npby50b2tlbicpIHtcbiAgICAgICAgbGV0IHN0ckFzc2V0ID0gYXdhaXQgdGhpcy5nZXRCYWxhbmNlKGFjY291bnRfbmFtZSwgY29kZSk7XG4gICAgICAgIHJldHVybiBBc3NldC5wYXJzZShzdHJBc3NldClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cmFuc2ZlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdHkgLSBlb3MgYXNzZXQgZm9ybWF0LCBlLnAuIFwiMS4wMDAwIEVPU1wiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lbW8gLSBtZW1vXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSB0cmFuc2FjdGlvbkRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgdHJhbnNmZXIodGFyZ2V0OiBzdHJpbmcsIHF1YW50aXR5OiBzdHJpbmcsIG1lbW86IHN0cmluZyA9ICcnKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYWluLnRyYW5zZmVyKFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRJZGVudGl0eSgpLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcXVhbnRpdHksXG4gICAgICAgICAgICBtZW1vLFxuICAgICAgICAgICAgKGVycjogRXJyb3IpID0+IHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfVFJBTlNDQUxfRkFJTEVELCBlcnIpXG4gICAgICAgIClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjYWxsIGtoIGNvbnRyYWN0IHdpdGggdHJhbnNmZXIgKG1hdGNoIGVvc2tpdClcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IC0gZW9zIGFjY291bnQsIGNhbiBiZSB1c2VyIG9yIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1YW50aXR5IC0gZW9zIGFzc2V0IGZvcm1hdCwgZS5wLiBcIjEuMDAwMCBFT1NcIlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gZnVuY3Rpb24gbmFtZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59IHRyYW5zYWN0aW9uRGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyB0cmFuc2NhbCh0YXJnZXQ6IHN0cmluZywgcXVhbnRpdHk6IHN0cmluZywgZnVuYzogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5raC50cmFuc2NhbChcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0SWRlbnRpdHkoKSxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHF1YW50aXR5LFxuICAgICAgICAgICAgZnVuYyxcbiAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICAoZXJyOiBFcnJvcikgPT4gdGhpcy5ldmVudHMuZW1pdEV2ZW50KEVWRU5UX05BTUVTLkVSUl9UUkFOU0NBTF9GQUlMRUQsIGVycikpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2VuZCBhY3Rpb24gdG8gYSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gYWNjb3VudCBvZiBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gZnVuY3Rpb24gbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0ganNvbkRhdGEgLSBkYXRhXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gLSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjYWxsKGNvZGU6c3RyaW5nLCBmdW5jOnN0cmluZywganNvbkRhdGE6YW55KSB7XG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5KCk7XG4gICAgICAgIGxldCB0cnggPSBhd2FpdCB0aGlzLmNoYWluLmNhbGwoY29kZSwgZnVuYywganNvbkRhdGEsIHtcbiAgICAgICAgICAgIGFjdG9yOiBhY2NvdW50Lm5hbWUsXG4gICAgICAgICAgICBwZXJtaXNzaW9uOiBhY2NvdW50LmF1dGhvcml0eVxuICAgICAgICB9KVxuICAgICAgICBpZiAodHJ4KSB7XG4gICAgICAgICAgICBsb2cuaW5mbyhgY2FsbCBvcGVyYXRpb24gZGVhbGVkLCB0eElEOiAke3RyeC50cmFuc2FjdGlvbl9pZH1gKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnhcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBhY2NvdW50IHdpdGggcHVibGljIGtleVxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHBhcmFtIGFjdGl2ZUtleVxuICAgICAqIEBwYXJhbSBvd25lcktleVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIG5ld0FjY291bnQobmFtZTpzdHJpbmcsIGFjdGl2ZUtleTpzdHJpbmcsIG93bmVyS2V5OnN0cmluZykge1xuICAgICAgICBpZiAoIWFjdGl2ZUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXdBY2NvdW50IDogYWN0aXZlIGtleSBlcnJvciAnKVxuICAgICAgICB9XG4gICAgICAgIGlmICghb3duZXJLZXkpIHtcbiAgICAgICAgICAgIG93bmVyS2V5ID0gYWN0aXZlS2V5XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNyZWF0b3IgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5KCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmVvc0NsaWVudC50cmFuc2FjdGlvbigodHIgOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRyLm5ld2FjY291bnQoe1xuICAgICAgICAgICAgICAgIGNyZWF0b3I6IGNyZWF0b3IubmFtZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIG93bmVyOiBvd25lcktleSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGFjdGl2ZUtleVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdHIuYnV5cmFtYnl0ZXMoe1xuICAgICAgICAgICAgICAgIHBheWVyOiBjcmVhdG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZXI6IG5hbWUsXG4gICAgICAgICAgICAgICAgYnl0ZXM6IDgxOTJcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRyLmRlbGVnYXRlYncoe1xuICAgICAgICAgICAgICAgIGZyb206IGNyZWF0b3IubmFtZSxcbiAgICAgICAgICAgICAgICByZWNlaXZlcjogbmFtZSxcbiAgICAgICAgICAgICAgICBzdGFrZV9uZXRfcXVhbnRpdHk6ICcxLjAwMDAgRU9TJyxcbiAgICAgICAgICAgICAgICBzdGFrZV9jcHVfcXVhbnRpdHk6ICcxLjAwMDAgRU9TJyxcbiAgICAgICAgICAgICAgICB0cmFuc2ZlcjogMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgZ2V0IHZlcnNpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgdmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIGAke3BhY2thZ2VKc29uLm5hbWV9ICMgJHtwYWNrYWdlSnNvbi52ZXJzaW9ufWBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgZ2V0IGhlbHAgaW5mb1xuICAgICAqL1xuICAgIHB1YmxpYyBoZWxwKCkge1xuICAgICAgICByZXR1cm4gYFxuXFxgXFxgXFxganNcbiAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAtLS0tLSAgICAgIC0tLS0tLSAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAgICAgICAtLS0tLSAgICAgLS0tLS0gICAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAgICAgIC0tLS0tICAgLS0tLS0gICAgICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgICAgICAtLS0tLSAgLS0tLS0gICAgICAgICAgICAgLS0tLS0tICAgICAgLS0tLS0tLVxuICAgICAgICAgICAtLS0tLS0tLS0tICAgICAgICAgICAgICAgIC0tLS0tIC0tLS0gLS0tLS0tIFxuICAgICAgICAgIC0tLS0tICAtLS0tLSAgICAgICAgICAgICAgLS0tLS0gLS0tLSAtLS0tLS1cbiAgICAgICAgIC0tLS0tICAgIC0tLS0tICAgICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgIC0tLS0tICAgICAgLS0tLS0tICAgICAgICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgLS0tLS0tICAgICAgIC0tLS0tLS0gICAgIC0tLS0tLSAgICAgIC0tLS0tLS1cbiAgICAgIC0tLS0tLS0tICAgICAgLS0tLS0tLS0tICAtLS0tLS0gICAgICAtLS0tLS0tXG4gICAgICAgIFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxcYFxcYFxcYFxuLS0tXG5cbiMgZW9zcGxheWVyICR7dGhpcy52ZXJzaW9ufVxuICAgICAgICBcbiMjIFVzYWdlIG9mIGVvc3BsYXllclxuXG4jIyMgRXZlbnRzXG5cblxcYEVSUl9UUkFOU0ZFUl9GQUlMRURcXGBcblxcYEVSUl9UUkFOU0NBTF9GQUlMRURcXGBcblxcYEVSUl9UUkFOU0VORF9GQUlMRURcXGBcblxuIyMjIEFQSXNcblxuXFxgXFxgXFxganNcbntTdHJpbmd9IGdldCBoZWxwIC8vIGdldCBoZWxwIGluZm8gb2YgdXNhZ2VcbntTdHJpbmd9IGdldCB2ZXJzaW9uIC8vIGdldCB0aGUgdmVyc2lvbiBpbmZvXG57Q2hhaW5IZWxwZXJ9IGdldCBjaGFpbiAvLyBnZXQgdGhlIGNoYWluIGhlbHBlclxue0toSGVscGVyfSBnZXQga2ggLy8gZ2V0IHRoZSBraCBjb250cmFjdCBoZWxwZXJcblxue1ZvaWR9IGVvc3BsYXllci5ldmVudC5zZXRFdmVudChldmVudCwgZm5DYWxsYmFjaywgY29udGV4dCkgLy9saXN0ZW4gdG8gYSBldmVudFxuXG57RW9zfSBnZXQgZW9zcGxheWVyLmVvc0NsaWVudCAvLyBnZXQgZW9zIGluc3RhbmNlXG57SWRlbnRpdHl9IGFzeW5jIGVvc3BsYXllci5nZXRJZGVudGl0eSgpIC8vIGdldCBpZGVudGl0eVxuXG57QWNjb3VudEluZm99IGFzeW5jIGVvc3BsYXllci5nZXRBY2NvdW50SW5mbyhhY2NvdW50X25hbWUgPSBpZGVudGl0eS5uYW1lKSBcbiAgICAvLyBnZXQgYWNjb3VudCBpbmZvIGZvciBhbnkgdXNlclxuXG57U3RyaW5nfSBhc3luYyBlb3NwbGF5ZXIuZ2V0QmFsYW5jZShhY2NvdW50X25hbWUgPSB1bmRlZmluZWQsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIsIHN5bWJvbE5hbWUgPSB1bmRlZmluZWQpICBcbiAgICAvLyBnZXQgYmFsYW5jZSBzdHJpbmcgb2YgYSBhY2NvdW50LiBleC4gXCIxLjAwMDAgRU9TXCIsIG51bGwgbWVhbnMgdGhhdCB0aGUgYWNjb3VudCBkb3Nlbid0IGhhdmUgYW55IHRva2VuLFxuXG57QXJyYXkuPFN0cmluZz59IGFzeW5jIGdldEJhbGFuY2VzKGFjY291bnRfbmFtZSA9IHVuZGVmaW5lZCwgY29kZSA9IFwiZW9zaW8udG9rZW5cIilcbiAgICAvLyBnZXQgYmFsYW5jZXNcblxue1N0cmluZ30gYXN5bmMgZW9zcGxheWVyLmdldEJhbGFuY2VBc3NldChhY2NvdW50X25hbWUgPSB1bmRlZmluZWQsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIpIFxuICAgIC8vIGdldCBiYWxhbmNlIHN0cnVjdHVyZSBvZiBhIGFjY291bnQuIGV4LiB7dmFsOjEsIHN5bTpcIkVPU1wiLCBkZWNpbWFsOjR9XG5cbntUeH0gYXN5bmMgZW9zcGxheWVyLnRyYW5zZmVyKHRhcmdldCwgcXVhbnRpdHksIG1lbW8gPSBcIlwiKVxuICAgIC8vIHRyYW5zZmVyIHRva2VucyB0byB0YXJnZXRcblxue1R4fSBhc3luYyBlb3NwbGF5ZXIudHJhbnNjYWwoY29kZSwgcXVhbnRpdHksIGZ1bmMsIC4uLmFyZ3MpIFxuICAgIC8vIHNlbmQgYSBhY3Rpb24gb2YgdHJhbnNjYWwgdG8gY29udHJhY3Rcblxue1R4fSBhc3luYyBlb3NwbGF5ZXIuY2FsbChjb2RlLCBmdW5jLCBqc29uRGF0YSlcbiAgICAvLyBzZW5kIGEgYWN0aW9uIHRvIGNvbnRyYWN0XG4gICAgXG57VHh9IGFzeW5jIGVvc3BsYXllci5uZXdBY2NvdW50KG5hbWUsIGFjdGl2ZUtleSwgb3duZXJLZXkpXG4gICAgLy8gY3JlYXRlIGEgYWNjb3VudCB3aXRoIHB1YmxpYyBrZXlcblxcYFxcYFxcYFxuXG4ke0NoYWluSGVscGVyLmhlbHAoKX1gXG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCJpbXBvcnQge0lFb3NOb2RlQ29uZmlnfSBmcm9tIFwiLi9jb25maWdzXCI7XG5cbmltcG9ydCB7SVJlYWRpbmdQbGF5ZXJDb25maWd9IGZyb20gXCIuL291dE9mQm94XCI7XG5pbXBvcnQge1BsYXllcn0gZnJvbSBcIi4vcGxheWVyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU11bHRpU291cmNlUGxheWVyQ29uZmlnIHtcbiAgICBub2RlOiBJRW9zTm9kZUNvbmZpZyxcbiAgICB1cmxzOiBzdHJpbmdbXVxufVxuXG5jb25zdCBkZWZhdWx0Q29uZmlnOiBJUmVhZGluZ1BsYXllckNvbmZpZyA9IHtcbiAgICBub2RlOiB7XG4gICAgICAgIGNoYWluSWQ6ICdjZjA1N2JiZmI3MjY0MDQ3MWZkOTEwYmNiNjc2MzljMjJkZjlmOTI0NzA5MzZjZGRjMWFkZTBlMmYyZTdkYzRmJyxcbiAgICAgICAgbW9ja1RyYW5zYWN0aW9uczogKCk6IG51bGwgPT4gbnVsbCxcbiAgICAgICAgZXhwaXJlSW5TZWNvbmRzOiA2MCxcbiAgICAgICAgYnJvYWRjYXN0OiB0cnVlLFxuICAgICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICAgIHNpZ246IHRydWUsXG4gICAgfSxcbiAgICB1cmxzOiBbXG4gICAgICAgICdodHRwczovL21hcnMuZm4uZW9zYml4aW4uY29tJyxcbiAgICAgICAgJ2h0dHBzOi8vZW9zLmVvc2NhZmVibG9jay5jb20nLFxuICAgICAgICAnaHR0cHM6Ly9hcGkuZW9zZHVibGluLmlvJ1xuICAgIF1cbn1cblxuZXhwb3J0IGNsYXNzIE11bHRpU291cmNlUGxheWVyIGV4dGVuZHMgUGxheWVyIHtcblxuICAgIHByb3RlY3RlZCBfY29uZjogYW55O1xuICAgIHByb3RlY3RlZCBfdXJsczogc3RyaW5nW10gPSBbXTtcbiAgICBwcm90ZWN0ZWQgX25vZGVDb25maWdzOiBJRW9zTm9kZUNvbmZpZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mOiBJTXVsdGlTb3VyY2VQbGF5ZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3Qge25vZGUsIHVybHN9ID0gY29uZjtcbiAgICAgICAgdGhpcy5fY29uZiA9IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRDb25maWcubm9kZSxcbiAgICAgICAgICAgIC4uLm5vZGVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdXJscyA9IHVybHM7XG4gICAgICAgIHRoaXMuX25vZGVDb25maWdzID0gdGhpcy5fdXJscy5tYXAodXJsID0+IHtcbiAgICAgICAgICAgIGxldCByZXQ6IElFb3NOb2RlQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6ICcnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuX2NvbmYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NvbmYuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWVcbiAgICAgICAgICAgICAgICByZXRba2V5XSA9IHRoaXMuX2NvbmZba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0Lmh0dHBFbmRwb2ludCA9IHVybDtcbiAgICAgICAgICAgIHJldHVybiByZXRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbmVlZCBpbXBsZW1lbnQgZW9zQ2xpZW50IGFuZCBnZXRJZGVudGl0eSBpbiBjaGlsZCBjbGFzc1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBlY2MgPSByZXF1aXJlKCdlb3Nqcy1lY2MnKTtcbnZhciBGY2J1ZmZlciA9IHJlcXVpcmUoJ2ZjYnVmZmVyJyk7XG52YXIgRW9zQXBpID0gcmVxdWlyZSgnZW9zanMtYXBpJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5cbnZhciBTdHJ1Y3RzID0gcmVxdWlyZSgnLi9zdHJ1Y3RzJyk7XG52YXIgQWJpQ2FjaGUgPSByZXF1aXJlKCcuL2FiaS1jYWNoZScpO1xudmFyIHdyaXRlQXBpR2VuID0gcmVxdWlyZSgnLi93cml0ZS1hcGknKTtcbnZhciBmb3JtYXQgPSByZXF1aXJlKCcuL2Zvcm1hdCcpO1xudmFyIHNjaGVtYSA9IHJlcXVpcmUoJy4vc2NoZW1hJyk7XG5cbnZhciB0b2tlbiA9IHJlcXVpcmUoJy4vc2NoZW1hL2Vvc2lvLnRva2VuLmFiaS5qc29uJyk7XG52YXIgc3lzdGVtID0gcmVxdWlyZSgnLi9zY2hlbWEvZW9zaW8uc3lzdGVtLmFiaS5qc29uJyk7XG52YXIgZW9zaW9fbnVsbCA9IHJlcXVpcmUoJy4vc2NoZW1hL2Vvc2lvLm51bGwuYWJpLmpzb24nKTtcblxudmFyIEVvcyA9IGZ1bmN0aW9uIEVvcygpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGNvbmZpZ0RlZmF1bHRzID0ge1xuICAgIGh0dHBFbmRwb2ludDogJ2h0dHA6Ly8xMjcuMC4wLjE6ODg4OCcsXG4gICAgZGVidWc6IGZhbHNlLFxuICAgIHZlcmJvc2U6IGZhbHNlLFxuICAgIGJyb2FkY2FzdDogdHJ1ZSxcbiAgICBsb2dnZXI6IHtcbiAgICAgIGxvZzogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy52ZXJib3NlID8gKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpIDogbnVsbDtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICAgIHZhciBfY29uc29sZTI7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZy52ZXJib3NlID8gKF9jb25zb2xlMiA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlMiwgYXJndW1lbnRzKSA6IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaWduOiB0cnVlXG4gIH07XG5cbiAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyh0YXJnZXQsIGRlZmF1bHRzKSB7XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHRhcmdldFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXBwbHlEZWZhdWx0cyhjb25maWcsIGNvbmZpZ0RlZmF1bHRzKTtcbiAgYXBwbHlEZWZhdWx0cyhjb25maWcubG9nZ2VyLCBjb25maWdEZWZhdWx0cy5sb2dnZXIpO1xuICByZXR1cm4gY3JlYXRlRW9zKGNvbmZpZyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVvcztcblxuT2JqZWN0LmFzc2lnbihFb3MsIHtcbiAgdmVyc2lvbjogJzE2LjAuMCcsXG4gIG1vZHVsZXM6IHtcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBhcGk6IEVvc0FwaSxcbiAgICBlY2M6IGVjYyxcbiAgICBqc29uOiB7XG4gICAgICBhcGk6IEVvc0FwaS5hcGksXG4gICAgICBzY2hlbWE6IHNjaGVtYVxuICAgIH0sXG4gICAgRmNidWZmZXI6IEZjYnVmZmVyXG4gIH0sXG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIFRlc3RuZXQ6IGZ1bmN0aW9uIFRlc3RuZXQoY29uZmlnKSB7XG4gICAgY29uc29sZS5lcnJvcignZGVwcmVjYXRlZCwgY2hhbmdlIEVvcy5UZXN0bmV0KC4uKSB0byBqdXN0IEVvcyguLiknKTtcbiAgICByZXR1cm4gRW9zKGNvbmZpZyk7XG4gIH0sXG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIExvY2FsbmV0OiBmdW5jdGlvbiBMb2NhbG5ldChjb25maWcpIHtcbiAgICBjb25zb2xlLmVycm9yKCdkZXByZWNhdGVkLCBjaGFuZ2UgRW9zLkxvY2FsbmV0KC4uKSB0byBqdXN0IEVvcyguLiknKTtcbiAgICByZXR1cm4gRW9zKGNvbmZpZyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVFb3MoY29uZmlnKSB7XG4gIHZhciBuZXR3b3JrID0gY29uZmlnLmh0dHBFbmRwb2ludCAhPSBudWxsID8gRW9zQXBpKGNvbmZpZykgOiBudWxsO1xuICBjb25maWcubmV0d29yayA9IG5ldHdvcms7XG5cbiAgdmFyIGFiaXMgPSBbXTtcbiAgdmFyIGFiaUNhY2hlID0gQWJpQ2FjaGUobmV0d29yaywgY29uZmlnKTtcbiAgYWJpcy5wdXNoKGFiaUNhY2hlLmFiaSgnZW9zaW8ubnVsbCcsIGVvc2lvX251bGwpKTtcbiAgYWJpcy5wdXNoKGFiaUNhY2hlLmFiaSgnZW9zaW8udG9rZW4nLCB0b2tlbikpO1xuICBhYmlzLnB1c2goYWJpQ2FjaGUuYWJpKCdlb3NpbycsIHN5c3RlbSkpO1xuXG4gIGlmICghY29uZmlnLmNoYWluSWQpIHtcbiAgICBjb25maWcuY2hhaW5JZCA9ICdjZjA1N2JiZmI3MjY0MDQ3MWZkOTEwYmNiNjc2MzljMjJkZjlmOTI0NzA5MzZjZGRjMWFkZTBlMmYyZTdkYzRmJztcbiAgfVxuXG4gIGlmIChuZXR3b3JrKSB7XG4gICAgY2hlY2tDaGFpbklkKG5ldHdvcmssIGNvbmZpZy5jaGFpbklkLCBjb25maWcubG9nZ2VyKTtcbiAgfVxuXG4gIGlmIChjb25maWcubW9ja1RyYW5zYWN0aW9ucyAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcubW9ja1RyYW5zYWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBtb2NrID0gY29uZmlnLm1vY2tUcmFuc2FjdGlvbnM7XG4gICAgICBjb25maWcubW9ja1RyYW5zYWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG1vY2s7XG4gICAgICB9O1xuICAgIH1cbiAgICBhc3NlcnQuZXF1YWwoKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zKSwgJ2Z1bmN0aW9uJywgJ2NvbmZpZy5tb2NrVHJhbnNhY3Rpb25zJyk7XG4gIH1cblxuICB2YXIgX1N0cnVjdHMgPSBTdHJ1Y3RzKGNvbmZpZyksXG4gICAgICBzdHJ1Y3RzID0gX1N0cnVjdHMuc3RydWN0cyxcbiAgICAgIHR5cGVzID0gX1N0cnVjdHMudHlwZXMsXG4gICAgICBmcm9tQnVmZmVyID0gX1N0cnVjdHMuZnJvbUJ1ZmZlcixcbiAgICAgIHRvQnVmZmVyID0gX1N0cnVjdHMudG9CdWZmZXI7XG5cbiAgdmFyIGVvcyA9IG1lcmdlV3JpdGVGdW5jdGlvbnMoY29uZmlnLCBFb3NBcGksIHN0cnVjdHMsIGFiaXMpO1xuXG4gIE9iamVjdC5hc3NpZ24oZW9zLCB7XG4gICAgY29uZmlnOiBzYWZlQ29uZmlnKGNvbmZpZyksXG4gICAgZmM6IHtcbiAgICAgIHN0cnVjdHM6IHN0cnVjdHMsXG4gICAgICB0eXBlczogdHlwZXMsXG4gICAgICBmcm9tQnVmZmVyOiBmcm9tQnVmZmVyLFxuICAgICAgdG9CdWZmZXI6IHRvQnVmZmVyLFxuICAgICAgYWJpQ2FjaGU6IGFiaUNhY2hlXG4gICAgfSxcbiAgICAvLyBSZXBlYXQgb2Ygc3RhdGljIEVvcy5tb2R1bGVzLCBoZWxwIGFwcHMgdGhhdCB1c2UgZGVwZW5kZW5jeSBpbmplY3Rpb25cbiAgICBtb2R1bGVzOiB7XG4gICAgICBmb3JtYXQ6IGZvcm1hdFxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFjb25maWcuc2lnblByb3ZpZGVyKSB7XG4gICAgY29uZmlnLnNpZ25Qcm92aWRlciA9IGRlZmF1bHRTaWduUHJvdmlkZXIoZW9zLCBjb25maWcpO1xuICB9XG5cbiAgcmV0dXJuIGVvcztcbn1cblxuLyoqXG4gIFNldCBlYWNoIHByb3BlcnR5IGFzIHJlYWQtb25seSwgcmVhZC13cml0ZSwgbm8tYWNjZXNzLiAgVGhpcyBpcyBzaGFsbG93XG4gIGluIHRoYXQgaXQgYXBwbGllcyBvbmx5IHRvIHRoZSByb290IG9iamVjdCBhbmQgZG9lcyBub3QgbGltaXQgYWNjZXNzXG4gIHRvIHByb3BlcnRpZXMgdW5kZXIgYSBnaXZlbiBvYmplY3QuXG4qL1xuZnVuY3Rpb24gc2FmZUNvbmZpZyhjb25maWcpIHtcbiAgLy8gYWNjZXNzIGNvbnRyb2wgaXMgc2hhbGxvdyByZWZlcmVuY2VzIG9ubHlcbiAgdmFyIHJlYWRPbmx5ID0gbmV3IFNldChbJ2h0dHBFbmRwb2ludCcsICdhYmlDYWNoZScsICdjaGFpbklkJywgJ2V4cGlyZUluU2Vjb25kcyddKTtcbiAgdmFyIHJlYWRXcml0ZSA9IG5ldyBTZXQoWyd2ZXJib3NlJywgJ2RlYnVnJywgJ2Jyb2FkY2FzdCcsICdsb2dnZXInLCAnc2lnbiddKTtcbiAgdmFyIHByb3RlY3RlZENvbmZpZyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RlY3RlZENvbmZpZywga2V5LCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAocmVhZFdyaXRlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgY29uZmlnW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY2Nlc3MgZGVuaWVkJyk7XG4gICAgICB9LFxuXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHJlYWRPbmx5LmhhcyhrZXkpIHx8IHJlYWRXcml0ZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjb25maWdba2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjY2VzcyBkZW5pZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBwcm90ZWN0ZWRDb25maWc7XG59XG5cbi8qKlxuICBNZXJnZSBpbiB3cml0ZSBmdW5jdGlvbnMgKG9wZXJhdGlvbnMpLiAgVGVzdGVkIGFnYWluc3QgZXhpc3RpbmcgbWV0aG9kcyBmb3JcbiAgbmFtZSBjb25mbGljdHMuXG5cbiAgQGFyZyB7b2JqZWN0fSBjb25maWcubmV0d29yayAtIHJlYWQtb25seSBhcGkgY2FsbHNcbiAgQGFyZyB7b2JqZWN0fSBFb3NBcGkgLSBhcGlbRW9zQXBpXSByZWFkLW9ubHkgYXBpIGNhbGxzXG4gIEByZXR1cm4ge29iamVjdH0gLSByZWFkIGFuZCB3cml0ZSBtZXRob2QgY2FsbHMgKGNyZWF0ZSBhbmQgc2lnbiB0cmFuc2FjdGlvbnMpXG4gIEB0aHJvdyB7VHlwZUVycm9yfSBpZiBhIGZ1bmNpdG9uIG5hbWUgY29uZmxpY3RzXG4qL1xuZnVuY3Rpb24gbWVyZ2VXcml0ZUZ1bmN0aW9ucyhjb25maWcsIEVvc0FwaSwgc3RydWN0cywgYWJpcykge1xuICB2YXIgbmV0d29yayA9IGNvbmZpZy5uZXR3b3JrO1xuXG5cbiAgdmFyIG1lcmdlID0gT2JqZWN0LmFzc2lnbih7fSwgbmV0d29yayk7XG5cbiAgdmFyIHdyaXRlQXBpID0gd3JpdGVBcGlHZW4oRW9zQXBpLCBuZXR3b3JrLCBzdHJ1Y3RzLCBjb25maWcsIGFiaXMpO1xuICB0aHJvd09uRHVwbGljYXRlKG1lcmdlLCB3cml0ZUFwaSwgJ0NvbmZsaWN0aW5nIG1ldGhvZHMgaW4gRW9zQXBpIGFuZCBUcmFuc2FjdGlvbiBBcGknKTtcbiAgT2JqZWN0LmFzc2lnbihtZXJnZSwgd3JpdGVBcGkpO1xuXG4gIHJldHVybiBtZXJnZTtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkR1cGxpY2F0ZShvMSwgbzIsIG1zZykge1xuICBmb3IgKHZhciBrZXkgaW4gbzEpIHtcbiAgICBpZiAobzJba2V5XSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cgKyAnOiAnICsga2V5KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gIFRoZSBkZWZhdWx0IHNpZ24gcHJvdmlkZXIgaXMgZGVzaWduZWQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgYXZhaWxhYmxlIHB1YmxpY1xuICBrZXlzIChtYXliZSBqdXN0IG9uZSksIHRoZSB0cmFuc2FjdGlvbiwgYW5kIHRoZSBibG9ja2NoYWluIHRvIGZpZ3VyZSBvdXRcbiAgdGhlIG1pbmltdW0gc2V0IG9mIHNpZ25pbmcga2V5cy5cblxuICBJZiBvbmx5IG9uZSBrZXkgaXMgYXZhaWxhYmxlLCB0aGUgYmxvY2tjaGFpbiBBUEkgY2FsbHMgYXJlIHNraXBwZWQgYW5kIHRoYXRcbiAga2V5IGlzIHVzZWQgdG8gc2lnbiB0aGUgdHJhbnNhY3Rpb24uXG4qL1xudmFyIGRlZmF1bHRTaWduUHJvdmlkZXIgPSBmdW5jdGlvbiBkZWZhdWx0U2lnblByb3ZpZGVyKGVvcywgY29uZmlnKSB7XG4gIHJldHVybiBmdW5jdGlvbiBfY2FsbGVlKF9yZWYpIHtcbiAgICB2YXIgc2lnbiA9IF9yZWYuc2lnbixcbiAgICAgICAgYnVmID0gX3JlZi5idWYsXG4gICAgICAgIHRyYW5zYWN0aW9uID0gX3JlZi50cmFuc2FjdGlvbixcbiAgICAgICAgb3B0aW9uc0tleVByb3ZpZGVyID0gX3JlZi5vcHRpb25zS2V5UHJvdmlkZXI7XG5cbiAgICB2YXIga2V5UHJvdmlkZXIsIGtleXMsIHB2dCwgc2lncywgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiwgX2RpZEl0ZXJhdG9yRXJyb3IsIF9pdGVyYXRvckVycm9yLCBfaXRlcmF0b3IsIF9zdGVwLCBrZXksIGtleU1hcCwgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIsIF9kaWRJdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yRXJyb3IyLCBfaXRlcmF0b3IyLCBfc3RlcDIsIF9rZXksIGlzUHJpdmF0ZSwgaXNQdWJsaWMsIHB1YmtleXM7XG5cbiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgLy8gb3B0aW9uc0tleVByb3ZpZGVyIGlzIGEgcGVyLWFjdGlvbiBrZXk6IGF3YWl0IGVvcy5zb21lQWN0aW9uKCd1c2VyMicgLi4sIHtrZXlQcm92aWRlcjogcHJpdmF0ZUtleTJ9KVxuICAgICAgICAgICAga2V5UHJvdmlkZXIgPSBvcHRpb25zS2V5UHJvdmlkZXIgPyBvcHRpb25zS2V5UHJvdmlkZXIgOiBjb25maWcua2V5UHJvdmlkZXI7XG5cbiAgICAgICAgICAgIGlmIChrZXlQcm92aWRlcikge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXMgdHJhbnNhY3Rpb24gcmVxdWlyZXMgYSBrZXlQcm92aWRlciBmb3Igc2lnbmluZycpO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAga2V5cyA9IGtleVByb3ZpZGVyO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleVByb3ZpZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGtleXMgPSBrZXlQcm92aWRlcih7IHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbiB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8ga2V5UHJvdmlkZXIgbWF5IHJldHVybiBrZXlzIG9yIFByb21pc2U8a2V5cz5cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xuICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hd3JhcChQcm9taXNlLnJlc29sdmUoa2V5cykpO1xuXG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAga2V5cyA9IF9jb250ZXh0LnNlbnQ7XG5cblxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICAgICAgICAgIGtleXMgPSBba2V5c107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXplIGZvcm1hdCAoV0lGID0+IFBWVF9LMV9iYXNlNThwcml2YXRlS2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHByaXZhdGU6IGVjYy5Qcml2YXRlS2V5KGtleSkudG9TdHJpbmcoKSB9O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXplIGZvcm1hdCAoRU9TS2V5ID0+IFBVQl9LMV9iYXNlNThwdWJsaWNLZXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcHVibGljOiBlY2MuUHVibGljS2V5KGtleSkudG9TdHJpbmcoKSB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgJ2V4cGVjdGluZyBwdWJsaWMgb3IgcHJpdmF0ZSBrZXlzIGZyb20ga2V5UHJvdmlkZXInKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGtleSwgY2hlY2sgeW91ciBrZXlQcm92aWRlcicpO1xuXG4gICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIGlmICghKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0ucHJpdmF0ZSkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHZ0ID0ga2V5c1swXS5wcml2YXRlO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgc2lnbihidWYsIHB2dCkpO1xuXG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIGlmICghKGNvbmZpZy5odHRwRW5kcG9pbnQgPT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM3O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2lncyA9IFtdO1xuICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjA7XG5cbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yID0ga2V5c1tTeW1ib2wuaXRlcmF0b3JdKCk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICBrZXkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICBzaWdzLnB1c2goc2lnbihidWYsIGtleS5wcml2YXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjQ7XG4gICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDIwKTtcbiAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gX2NvbnRleHQudDA7XG5cbiAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI4O1xuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI5O1xuXG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMxO1xuXG4gICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXG4gICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMzEpO1xuXG4gICAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMjgpO1xuXG4gICAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIHNpZ3MpO1xuXG4gICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIGtleU1hcCA9IG5ldyBNYXAoKTtcblxuICAgICAgICAgICAgLy8ga2V5cyBhcmUgZWl0aGVyIHB1YmxpYyBvciBwcml2YXRlIGtleXNcblxuICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNDE7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIgPSBrZXlzW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgICAgICBfa2V5ID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgICAgICBpc1ByaXZhdGUgPSBfa2V5LnByaXZhdGUgIT0gbnVsbDtcbiAgICAgICAgICAgICAgaXNQdWJsaWMgPSBfa2V5LnB1YmxpYyAhPSBudWxsO1xuXG5cbiAgICAgICAgICAgICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgICAgIGtleU1hcC5zZXQoZWNjLnByaXZhdGVUb1B1YmxpYyhfa2V5LnByaXZhdGUpLCBfa2V5LnByaXZhdGUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleU1hcC5zZXQoX2tleS5wdWJsaWMsIG51bGwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0NTtcbiAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbJ2NhdGNoJ10oNDEpO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IF9jb250ZXh0LnQxO1xuXG4gICAgICAgICAgY2FzZSA0OTpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0OTtcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1MDtcblxuICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSA1MjpcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1MjtcblxuICAgICAgICAgICAgaWYgKCFfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuXG4gICAgICAgICAgY2FzZSA1NTpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNTIpO1xuXG4gICAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNDkpO1xuXG4gICAgICAgICAgY2FzZSA1NzpcbiAgICAgICAgICAgIHB1YmtleXMgPSBBcnJheS5mcm9tKGtleU1hcC5rZXlzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgZW9zLmdldFJlcXVpcmVkS2V5cyh0cmFuc2FjdGlvbiwgcHVia2V5cykudGhlbihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkX2tleXMgPSBfcmVmMi5yZXF1aXJlZF9rZXlzO1xuXG4gICAgICAgICAgICAgIGlmICghcmVxdWlyZWRfa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgcmVxdWlyZWQga2V5cyBmb3IgJyArIEpTT04uc3RyaW5naWZ5KHRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcHZ0cyA9IFtdLFxuICAgICAgICAgICAgICAgICAgbWlzc2luZ0tleXMgPSBbXTtcblxuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gcmVxdWlyZWRfa2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkS2V5ID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgKEVPU0tleS4uID0+IFBVQl9LMV9LZXkuLilcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkS2V5ID0gZWNjLlB1YmxpY0tleShyZXF1aXJlZEtleSkudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgICAgdmFyIHdpZiA9IGtleU1hcC5nZXQocmVxdWlyZWRLZXkpO1xuICAgICAgICAgICAgICAgICAgaWYgKHdpZikge1xuICAgICAgICAgICAgICAgICAgICBwdnRzLnB1c2god2lmKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdLZXlzLnB1c2gocmVxdWlyZWRLZXkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG1pc3NpbmdLZXlzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFzc2VydCh0eXBlb2Yga2V5UHJvdmlkZXIgPT09ICdmdW5jdGlvbicsICdrZXlQcm92aWRlciBmdW5jdGlvbiBpcyBuZWVkZWQgZm9yIHByaXZhdGUga2V5IGxvb2t1cCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgcHVia2V5cyA9IG1pc3NpbmdLZXlzLm1hcChrZXkgPT4gZWNjLlB1YmxpY0tleShrZXkpLnRvU3RyaW5nTGVnYWN5KCkpXG4gICAgICAgICAgICAgICAga2V5UHJvdmlkZXIoeyBwdWJrZXlzOiBtaXNzaW5nS2V5cyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChwdnQpIHtcbiAgICAgICAgICAgICAgICAgIHB2dHMucHVzaChwdnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHNpZ3MgPSBbXTtcbiAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHB2dHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBfcHZ0ID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICBzaWdzLnB1c2goc2lnbihidWYsIF9wdnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBzaWdzO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIG51bGwsIHRoaXMsIFtbMjAsIDI0LCAyOCwgMzZdLCBbMjksLCAzMSwgMzVdLCBbNDEsIDQ1LCA0OSwgNTddLCBbNTAsLCA1MiwgNTZdXSk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBjaGVja0NoYWluSWQobmV0d29yaywgY2hhaW5JZCwgbG9nZ2VyKSB7XG4gIG5ldHdvcmsuZ2V0SW5mbyh7fSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgIGlmIChpbmZvLmNoYWluX2lkICE9PSBjaGFpbklkKSB7XG4gICAgICBpZiAobG9nZ2VyLmxvZykge1xuICAgICAgICBsb2dnZXIubG9nKCdjaGFpbklkIG1pc21hdGNoLCBzaWduYXR1cmVzIHdpbGwgbm90IG1hdGNoIHRyYW5zYWN0aW9uIGF1dGhvcml0eS4gJyArICgnZXhwZWN0ZWQgJyArIGNoYWluSWQgKyAnICE9PSBhY3R1YWwgJyArIGluZm8uY2hhaW5faWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGlmIChsb2dnZXIuZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignV2FybmluZywgdW5hYmxlIHRvIHZhbGlkYXRlIGNoYWluSWQ6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH0pO1xufSIsIjsoZnVuY3Rpb24gKGdsb2JhbE9iamVjdCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbi8qXHJcbiAqICAgICAgYmlnbnVtYmVyLmpzIHY4LjAuMVxyXG4gKiAgICAgIEEgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBhcmJpdHJhcnktcHJlY2lzaW9uIGFyaXRobWV0aWMuXHJcbiAqICAgICAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnbnVtYmVyLmpzXHJcbiAqICAgICAgQ29weXJpZ2h0IChjKSAyMDE4IE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XHJcbiAqICAgICAgTUlUIExpY2Vuc2VkLlxyXG4gKlxyXG4gKiAgICAgIEJpZ051bWJlci5wcm90b3R5cGUgbWV0aG9kcyAgICAgfCAgQmlnTnVtYmVyIG1ldGhvZHNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBhYnNvbHV0ZVZhbHVlICAgICAgICAgICAgYWJzICAgIHwgIGNsb25lXHJcbiAqICAgICAgY29tcGFyZWRUbyAgICAgICAgICAgICAgICAgICAgICB8ICBjb25maWcgICAgICAgICAgICAgICBzZXRcclxuICogICAgICBkZWNpbWFsUGxhY2VzICAgICAgICAgICAgZHAgICAgIHwgICAgICBERUNJTUFMX1BMQUNFU1xyXG4gKiAgICAgIGRpdmlkZWRCeSAgICAgICAgICAgICAgICBkaXYgICAgfCAgICAgIFJPVU5ESU5HX01PREVcclxuICogICAgICBkaXZpZGVkVG9JbnRlZ2VyQnkgICAgICAgaWRpdiAgIHwgICAgICBFWFBPTkVOVElBTF9BVFxyXG4gKiAgICAgIGV4cG9uZW50aWF0ZWRCeSAgICAgICAgICBwb3cgICAgfCAgICAgIFJBTkdFXHJcbiAqICAgICAgaW50ZWdlclZhbHVlICAgICAgICAgICAgICAgICAgICB8ICAgICAgQ1JZUFRPXHJcbiAqICAgICAgaXNFcXVhbFRvICAgICAgICAgICAgICAgIGVxICAgICB8ICAgICAgTU9EVUxPX01PREVcclxuICogICAgICBpc0Zpbml0ZSAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICBQT1dfUFJFQ0lTSU9OXHJcbiAqICAgICAgaXNHcmVhdGVyVGhhbiAgICAgICAgICAgIGd0ICAgICB8ICAgICAgRk9STUFUXHJcbiAqICAgICAgaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyAgIGd0ZSAgICB8ICAgICAgQUxQSEFCRVRcclxuICogICAgICBpc0ludGVnZXIgICAgICAgICAgICAgICAgICAgICAgIHwgIGlzQmlnTnVtYmVyXHJcbiAqICAgICAgaXNMZXNzVGhhbiAgICAgICAgICAgICAgIGx0ICAgICB8ICBtYXhpbXVtICAgICAgICAgICAgICBtYXhcclxuICogICAgICBpc0xlc3NUaGFuT3JFcXVhbFRvICAgICAgbHRlICAgIHwgIG1pbmltdW0gICAgICAgICAgICAgIG1pblxyXG4gKiAgICAgIGlzTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgcmFuZG9tXHJcbiAqICAgICAgaXNOZWdhdGl2ZSAgICAgICAgICAgICAgICAgICAgICB8ICBzdW1cclxuICogICAgICBpc1Bvc2l0aXZlICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBpc1plcm8gICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBtaW51cyAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBtb2R1bG8gICAgICAgICAgICAgICAgICAgbW9kICAgIHxcclxuICogICAgICBtdWx0aXBsaWVkQnkgICAgICAgICAgICAgdGltZXMgIHxcclxuICogICAgICBuZWdhdGVkICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBwbHVzICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBwcmVjaXNpb24gICAgICAgICAgICAgICAgc2QgICAgIHxcclxuICogICAgICBzaGlmdGVkQnkgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICBzcXVhcmVSb290ICAgICAgICAgICAgICAgc3FydCAgIHxcclxuICogICAgICB0b0V4cG9uZW50aWFsICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0ZpeGVkICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0Zvcm1hdCAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0ZyYWN0aW9uICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b0pTT04gICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b051bWJlciAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b1ByZWNpc2lvbiAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB0b1N0cmluZyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogICAgICB2YWx1ZU9mICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICpcclxuICovXHJcblxyXG5cclxuICB2YXIgQmlnTnVtYmVyLFxyXG4gICAgaXNOdW1lcmljID0gL14tPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoPzplWystXT9cXGQrKT8kL2ksXHJcblxyXG4gICAgbWF0aGNlaWwgPSBNYXRoLmNlaWwsXHJcbiAgICBtYXRoZmxvb3IgPSBNYXRoLmZsb29yLFxyXG5cclxuICAgIGJpZ251bWJlckVycm9yID0gJ1tCaWdOdW1iZXIgRXJyb3JdICcsXHJcbiAgICB0b29NYW55RGlnaXRzID0gYmlnbnVtYmVyRXJyb3IgKyAnTnVtYmVyIHByaW1pdGl2ZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czogJyxcclxuXHJcbiAgICBCQVNFID0gMWUxNCxcclxuICAgIExPR19CQVNFID0gMTQsXHJcbiAgICBNQVhfU0FGRV9JTlRFR0VSID0gMHgxZmZmZmZmZmZmZmZmZiwgICAgICAgICAvLyAyXjUzIC0gMVxyXG4gICAgLy8gTUFYX0lOVDMyID0gMHg3ZmZmZmZmZiwgICAgICAgICAgICAgICAgICAgLy8gMl4zMSAtIDFcclxuICAgIFBPV1NfVEVOID0gWzEsIDEwLCAxMDAsIDFlMywgMWU0LCAxZTUsIDFlNiwgMWU3LCAxZTgsIDFlOSwgMWUxMCwgMWUxMSwgMWUxMiwgMWUxM10sXHJcbiAgICBTUVJUX0JBU0UgPSAxZTcsXHJcblxyXG4gICAgLy8gRURJVEFCTEVcclxuICAgIC8vIFRoZSBsaW1pdCBvbiB0aGUgdmFsdWUgb2YgREVDSU1BTF9QTEFDRVMsIFRPX0VYUF9ORUcsIFRPX0VYUF9QT1MsIE1JTl9FWFAsIE1BWF9FWFAsIGFuZFxyXG4gICAgLy8gdGhlIGFyZ3VtZW50cyB0byB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCwgYW5kIHRvUHJlY2lzaW9uLlxyXG4gICAgTUFYID0gMUU5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhfSU5UMzJcclxuXHJcblxyXG4gIC8qXHJcbiAgICogQ3JlYXRlIGFuZCByZXR1cm4gYSBCaWdOdW1iZXIgY29uc3RydWN0b3IuXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY2xvbmUoY29uZmlnT2JqZWN0KSB7XHJcbiAgICB2YXIgZGl2LCBjb252ZXJ0QmFzZSwgcGFyc2VOdW1lcmljLFxyXG4gICAgICBQID0gQmlnTnVtYmVyLnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IEJpZ051bWJlciwgdG9TdHJpbmc6IG51bGwsIHZhbHVlT2Y6IG51bGwgfSxcclxuICAgICAgT05FID0gbmV3IEJpZ051bWJlcigxKSxcclxuXHJcblxyXG4gICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVESVRBQkxFIENPTkZJRyBERUZBVUxUUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cclxuICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93IG11c3QgYmUgaW50ZWdlcnMgd2l0aGluIHRoZSBpbmNsdXNpdmUgcmFuZ2VzIHN0YXRlZC5cclxuICAgICAgLy8gVGhlIHZhbHVlcyBjYW4gYWxzbyBiZSBjaGFuZ2VkIGF0IHJ1bi10aW1lIHVzaW5nIEJpZ051bWJlci5zZXQuXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIG9wZXJhdGlvbnMgaW52b2x2aW5nIGRpdmlzaW9uLlxyXG4gICAgICBERUNJTUFMX1BMQUNFUyA9IDIwLCAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgICAvLyBUaGUgcm91bmRpbmcgbW9kZSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLCBhbmQgd2hlbiB1c2luZ1xyXG4gICAgICAvLyB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCBhbmQgdG9QcmVjaXNpb24sIGFuZCByb3VuZCAoZGVmYXVsdCB2YWx1ZSkuXHJcbiAgICAgIC8vIFVQICAgICAgICAgMCBBd2F5IGZyb20gemVyby5cclxuICAgICAgLy8gRE9XTiAgICAgICAxIFRvd2FyZHMgemVyby5cclxuICAgICAgLy8gQ0VJTCAgICAgICAyIFRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBGTE9PUiAgICAgIDMgVG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgIC8vIEhBTEZfVVAgICAgNCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdXAuXHJcbiAgICAgIC8vIEhBTEZfRE9XTiAgNSBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgZG93bi5cclxuICAgICAgLy8gSEFMRl9FVkVOICA2IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIGV2ZW4gbmVpZ2hib3VyLlxyXG4gICAgICAvLyBIQUxGX0NFSUwgIDcgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgK0luZmluaXR5LlxyXG4gICAgICAvLyBIQUxGX0ZMT09SIDggVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgLUluZmluaXR5LlxyXG4gICAgICBST1VORElOR19NT0RFID0gNCwgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOFxyXG5cclxuICAgICAgLy8gRVhQT05FTlRJQUxfQVQgOiBbVE9fRVhQX05FRyAsIFRPX0VYUF9QT1NdXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGJlbmVhdGggd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAgLy8gTnVtYmVyIHR5cGU6IC03XHJcbiAgICAgIFRPX0VYUF9ORUcgPSAtNywgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byAtTUFYXHJcblxyXG4gICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGFib3ZlIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgIC8vIE51bWJlciB0eXBlOiAyMVxyXG4gICAgICBUT19FWFBfUE9TID0gMjEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXHJcblxyXG4gICAgICAvLyBSQU5HRSA6IFtNSU5fRVhQLCBNQVhfRVhQXVxyXG5cclxuICAgICAgLy8gVGhlIG1pbmltdW0gZXhwb25lbnQgdmFsdWUsIGJlbmVhdGggd2hpY2ggdW5kZXJmbG93IHRvIHplcm8gb2NjdXJzLlxyXG4gICAgICAvLyBOdW1iZXIgdHlwZTogLTMyNCAgKDVlLTMyNClcclxuICAgICAgTUlOX0VYUCA9IC0xZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtMSB0byAtTUFYXHJcblxyXG4gICAgICAvLyBUaGUgbWF4aW11bSBleHBvbmVudCB2YWx1ZSwgYWJvdmUgd2hpY2ggb3ZlcmZsb3cgdG8gSW5maW5pdHkgb2NjdXJzLlxyXG4gICAgICAvLyBOdW1iZXIgdHlwZTogIDMwOCAgKDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KVxyXG4gICAgICAvLyBGb3IgTUFYX0VYUCA+IDFlNywgZS5nLiBuZXcgQmlnTnVtYmVyKCcxZTEwMDAwMDAwMCcpLnBsdXMoMSkgbWF5IGJlIHNsb3cuXHJcbiAgICAgIE1BWF9FWFAgPSAxZTcsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSB0byBNQVhcclxuXHJcbiAgICAgIC8vIFdoZXRoZXIgdG8gdXNlIGNyeXB0b2dyYXBoaWNhbGx5LXNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24sIGlmIGF2YWlsYWJsZS5cclxuICAgICAgQ1JZUFRPID0gZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVlIG9yIGZhbHNlXHJcblxyXG4gICAgICAvLyBUaGUgbW9kdWxvIG1vZGUgdXNlZCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBtb2R1bHVzOiBhIG1vZCBuLlxyXG4gICAgICAvLyBUaGUgcXVvdGllbnQgKHEgPSBhIC8gbikgaXMgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcm91bmRpbmcgbW9kZS5cclxuICAgICAgLy8gVGhlIHJlbWFpbmRlciAocikgaXMgY2FsY3VsYXRlZCBhczogciA9IGEgLSBuICogcS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVVAgICAgICAgIDAgVGhlIHJlbWFpbmRlciBpcyBwb3NpdGl2ZSBpZiB0aGUgZGl2aWRlbmQgaXMgbmVnYXRpdmUsIGVsc2UgaXMgbmVnYXRpdmUuXHJcbiAgICAgIC8vIERPV04gICAgICAxIFRoZSByZW1haW5kZXIgaGFzIHRoZSBzYW1lIHNpZ24gYXMgdGhlIGRpdmlkZW5kLlxyXG4gICAgICAvLyAgICAgICAgICAgICBUaGlzIG1vZHVsbyBtb2RlIGlzIGNvbW1vbmx5IGtub3duIGFzICd0cnVuY2F0ZWQgZGl2aXNpb24nIGFuZCBpc1xyXG4gICAgICAvLyAgICAgICAgICAgICBlcXVpdmFsZW50IHRvIChhICUgbikgaW4gSmF2YVNjcmlwdC5cclxuICAgICAgLy8gRkxPT1IgICAgIDMgVGhlIHJlbWFpbmRlciBoYXMgdGhlIHNhbWUgc2lnbiBhcyB0aGUgZGl2aXNvciAoUHl0aG9uICUpLlxyXG4gICAgICAvLyBIQUxGX0VWRU4gNiBUaGlzIG1vZHVsbyBtb2RlIGltcGxlbWVudHMgdGhlIElFRUUgNzU0IHJlbWFpbmRlciBmdW5jdGlvbi5cclxuICAgICAgLy8gRVVDTElEICAgIDkgRXVjbGlkaWFuIGRpdmlzaW9uLiBxID0gc2lnbihuKSAqIGZsb29yKGEgLyBhYnMobikpLlxyXG4gICAgICAvLyAgICAgICAgICAgICBUaGUgcmVtYWluZGVyIGlzIGFsd2F5cyBwb3NpdGl2ZS5cclxuICAgICAgLy9cclxuICAgICAgLy8gVGhlIHRydW5jYXRlZCBkaXZpc2lvbiwgZmxvb3JlZCBkaXZpc2lvbiwgRXVjbGlkaWFuIGRpdmlzaW9uIGFuZCBJRUVFIDc1NCByZW1haW5kZXJcclxuICAgICAgLy8gbW9kZXMgYXJlIGNvbW1vbmx5IHVzZWQgZm9yIHRoZSBtb2R1bHVzIG9wZXJhdGlvbi5cclxuICAgICAgLy8gQWx0aG91Z2ggdGhlIG90aGVyIHJvdW5kaW5nIG1vZGVzIGNhbiBhbHNvIGJlIHVzZWQsIHRoZXkgbWF5IG5vdCBnaXZlIHVzZWZ1bCByZXN1bHRzLlxyXG4gICAgICBNT0RVTE9fTU9ERSA9IDEsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gOVxyXG5cclxuICAgICAgLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgcmVzdWx0IG9mIHRoZSBleHBvbmVudGlhdGVkQnkgb3BlcmF0aW9uLlxyXG4gICAgICAvLyBJZiBQT1dfUFJFQ0lTSU9OIGlzIDAsIHRoZXJlIHdpbGwgYmUgdW5saW1pdGVkIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgICAgUE9XX1BSRUNJU0lPTiA9IDAsICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIE1BWFxyXG5cclxuICAgICAgLy8gVGhlIGZvcm1hdCBzcGVjaWZpY2F0aW9uIHVzZWQgYnkgdGhlIEJpZ051bWJlci5wcm90b3R5cGUudG9Gb3JtYXQgbWV0aG9kLlxyXG4gICAgICBGT1JNQVQgPSB7XHJcbiAgICAgICAgcHJlZml4OiAnJyxcclxuICAgICAgICBncm91cFNpemU6IDMsXHJcbiAgICAgICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICAgIGdyb3VwU2VwYXJhdG9yOiAnLCcsXHJcbiAgICAgICAgZGVjaW1hbFNlcGFyYXRvcjogJy4nLFxyXG4gICAgICAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICAgIGZyYWN0aW9uR3JvdXBTZXBhcmF0b3I6ICdcXHhBMCcsICAgICAgLy8gbm9uLWJyZWFraW5nIHNwYWNlXHJcbiAgICAgICAgc3VmZml4OiAnJ1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gVGhlIGFscGhhYmV0IHVzZWQgZm9yIGJhc2UgY29udmVyc2lvbi4gSXQgbXVzdCBiZSBhdCBsZWFzdCAyIGNoYXJhY3RlcnMgbG9uZywgd2l0aCBubyAnKycsXHJcbiAgICAgIC8vICctJywgJy4nLCB3aGl0ZXNwYWNlLCBvciByZXBlYXRlZCBjaGFyYWN0ZXIuXHJcbiAgICAgIC8vICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWiRfJ1xyXG4gICAgICBBTFBIQUJFVCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xyXG5cclxuXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHJcbiAgICAvLyBDT05TVFJVQ1RPUlxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogVGhlIEJpZ051bWJlciBjb25zdHJ1Y3RvciBhbmQgZXhwb3J0ZWQgZnVuY3Rpb24uXHJcbiAgICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZ051bWJlciBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAqIFtiXSB7bnVtYmVyfSBUaGUgYmFzZSBvZiBuLiBJbnRlZ2VyLCAyIHRvIEFMUEhBQkVULmxlbmd0aCBpbmNsdXNpdmUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEJpZ051bWJlcihuLCBiKSB7XHJcbiAgICAgIHZhciBhbHBoYWJldCwgYywgY2FzZUNoYW5nZWQsIGUsIGksIGlzTnVtLCBsZW4sIHN0cixcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIC8vIEVuYWJsZSBjb25zdHJ1Y3RvciB1c2FnZSB3aXRob3V0IG5ldy5cclxuICAgICAgaWYgKCEoeCBpbnN0YW5jZW9mIEJpZ051bWJlcikpIHtcclxuXHJcbiAgICAgICAgLy8gRG9uJ3QgdGhyb3cgb24gY29uc3RydWN0b3IgY2FsbCB3aXRob3V0IG5ldyAoIzgxKS5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQ29uc3RydWN0b3IgY2FsbCB3aXRob3V0IG5ldzoge259J1xyXG4gICAgICAgIC8vdGhyb3cgRXJyb3IoYmlnbnVtYmVyRXJyb3IgKyAnIENvbnN0cnVjdG9yIGNhbGwgd2l0aG91dCBuZXc6ICcgKyBuKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihuLCBiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGIgPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAvLyBEdXBsaWNhdGUuXHJcbiAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBCaWdOdW1iZXIpIHtcclxuICAgICAgICAgIHgucyA9IG4ucztcclxuICAgICAgICAgIHguZSA9IG4uZTtcclxuICAgICAgICAgIHguYyA9IChuID0gbi5jKSA/IG4uc2xpY2UoKSA6IG47XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc051bSA9IHR5cGVvZiBuID09ICdudW1iZXInO1xyXG5cclxuICAgICAgICBpZiAoaXNOdW0gJiYgbiAqIDAgPT0gMCkge1xyXG5cclxuICAgICAgICAgIC8vIFVzZSBgMSAvIG5gIHRvIGhhbmRsZSBtaW51cyB6ZXJvIGFsc28uXHJcbiAgICAgICAgICB4LnMgPSAxIC8gbiA8IDAgPyAobiA9IC1uLCAtMSkgOiAxO1xyXG5cclxuICAgICAgICAgIC8vIEZhc3RlciBwYXRoIGZvciBpbnRlZ2Vycy5cclxuICAgICAgICAgIGlmIChuID09PSB+fm4pIHtcclxuICAgICAgICAgICAgZm9yIChlID0gMCwgaSA9IG47IGkgPj0gMTA7IGkgLz0gMTAsIGUrKyk7XHJcbiAgICAgICAgICAgIHguZSA9IGU7XHJcbiAgICAgICAgICAgIHguYyA9IFtuXTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHN0ciA9IFN0cmluZyhuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RyID0gU3RyaW5nKG4pO1xyXG4gICAgICAgICAgaWYgKCFpc051bWVyaWMudGVzdChzdHIpKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0pO1xyXG4gICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT0gNDUgPyAoc3RyID0gc3RyLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGVjaW1hbCBwb2ludD9cclxuICAgICAgICBpZiAoKGUgPSBzdHIuaW5kZXhPZignLicpKSA+IC0xKSBzdHIgPSBzdHIucmVwbGFjZSgnLicsICcnKTtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRpYWwgZm9ybT9cclxuICAgICAgICBpZiAoKGkgPSBzdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAgICAgICAvLyBEZXRlcm1pbmUgZXhwb25lbnQuXHJcbiAgICAgICAgICBpZiAoZSA8IDApIGUgPSBpO1xyXG4gICAgICAgICAgZSArPSArc3RyLnNsaWNlKGkgKyAxKTtcclxuICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgICAgICAgIC8vIEludGVnZXIuXHJcbiAgICAgICAgICBlID0gc3RyLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICAgICAgaW50Q2hlY2soYiwgMiwgQUxQSEFCRVQubGVuZ3RoLCAnQmFzZScpO1xyXG4gICAgICAgIHN0ciA9IFN0cmluZyhuKTtcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYmUgdXNlZCB3aXRoIGJhc2UgMTAgYXJndW1lbnQsIHdoaWxlXHJcbiAgICAgICAgLy8gYWxzbyByb3VuZGluZyB0byBERUNJTUFMX1BMQUNFUyBhcyB3aXRoIG90aGVyIGJhc2VzLlxyXG4gICAgICAgIGlmIChiID09IDEwKSB7XHJcbiAgICAgICAgICB4ID0gbmV3IEJpZ051bWJlcihuIGluc3RhbmNlb2YgQmlnTnVtYmVyID8gbiA6IHN0cik7XHJcbiAgICAgICAgICByZXR1cm4gcm91bmQoeCwgREVDSU1BTF9QTEFDRVMgKyB4LmUgKyAxLCBST1VORElOR19NT0RFKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzTnVtID0gdHlwZW9mIG4gPT0gJ251bWJlcic7XHJcblxyXG4gICAgICAgIGlmIChpc051bSkge1xyXG5cclxuICAgICAgICAgIC8vIEF2b2lkIHBvdGVudGlhbCBpbnRlcnByZXRhdGlvbiBvZiBJbmZpbml0eSBhbmQgTmFOIGFzIGJhc2UgNDQrIHZhbHVlcy5cclxuICAgICAgICAgIGlmIChuICogMCAhPSAwKSByZXR1cm4gcGFyc2VOdW1lcmljKHgsIHN0ciwgaXNOdW0sIGIpO1xyXG5cclxuICAgICAgICAgIHgucyA9IDEgLyBuIDwgMCA/IChzdHIgPSBzdHIuc2xpY2UoMSksIC0xKSA6IDE7XHJcblxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE51bWJlciBwcmltaXRpdmUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHM6IHtufSdcclxuICAgICAgICAgIGlmIChCaWdOdW1iZXIuREVCVUcgJiYgc3RyLnJlcGxhY2UoL14wXFwuMCp8XFwuLywgJycpLmxlbmd0aCA+IDE1KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAodG9vTWFueURpZ2l0cyArIG4pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFByZXZlbnQgbGF0ZXIgY2hlY2sgZm9yIGxlbmd0aCBvbiBjb252ZXJ0ZWQgbnVtYmVyLlxyXG4gICAgICAgICAgaXNOdW0gPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT09IDQ1ID8gKHN0ciA9IHN0ci5zbGljZSgxKSwgLTEpIDogMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFscGhhYmV0ID0gQUxQSEFCRVQuc2xpY2UoMCwgYik7XHJcbiAgICAgICAgZSA9IGkgPSAwO1xyXG5cclxuICAgICAgICAvLyBDaGVjayB0aGF0IHN0ciBpcyBhIHZhbGlkIGJhc2UgYiBudW1iZXIuXHJcbiAgICAgICAgLy8gRG9uJ3QgdXNlIFJlZ0V4cCBzbyBhbHBoYWJldCBjYW4gY29udGFpbiBzcGVjaWFsIGNoYXJhY3RlcnMuXHJcbiAgICAgICAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgIGlmIChhbHBoYWJldC5pbmRleE9mKGMgPSBzdHIuY2hhckF0KGkpKSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKGMgPT0gJy4nKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIElmICcuJyBpcyBub3QgdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgaXQgaGFzIG5vdCBiZSBmb3VuZCBiZWZvcmUuXHJcbiAgICAgICAgICAgICAgaWYgKGkgPiBlKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gbGVuO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFjYXNlQ2hhbmdlZCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBBbGxvdyBlLmcuIGhleGFkZWNpbWFsICdGRicgYXMgd2VsbCBhcyAnZmYnLlxyXG4gICAgICAgICAgICAgIGlmIChzdHIgPT0gc3RyLnRvVXBwZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpKSB8fFxyXG4gICAgICAgICAgICAgICAgICBzdHIgPT0gc3RyLnRvTG93ZXJDYXNlKCkgJiYgKHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWMoeCwgU3RyaW5nKG4pLCBpc051bSwgYik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdHIgPSBjb252ZXJ0QmFzZShzdHIsIGIsIDEwLCB4LnMpO1xyXG5cclxuICAgICAgICAvLyBEZWNpbWFsIHBvaW50P1xyXG4gICAgICAgIGlmICgoZSA9IHN0ci5pbmRleE9mKCcuJykpID4gLTEpIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgIGVsc2UgZSA9IHN0ci5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIERldGVybWluZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKGkgPSAwOyBzdHIuY2hhckNvZGVBdChpKSA9PT0gNDg7IGkrKyk7XHJcblxyXG4gICAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAobGVuID0gc3RyLmxlbmd0aDsgc3RyLmNoYXJDb2RlQXQoLS1sZW4pID09PSA0ODspO1xyXG5cclxuICAgICAgc3RyID0gc3RyLnNsaWNlKGksICsrbGVuKTtcclxuXHJcbiAgICAgIGlmIChzdHIpIHtcclxuICAgICAgICBsZW4gLT0gaTtcclxuXHJcbiAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE51bWJlciBwcmltaXRpdmUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHM6IHtufSdcclxuICAgICAgICBpZiAoaXNOdW0gJiYgQmlnTnVtYmVyLkRFQlVHICYmXHJcbiAgICAgICAgICBsZW4gPiAxNSAmJiAobiA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgbiAhPT0gbWF0aGZsb29yKG4pKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvclxyXG4gICAgICAgICAgICAgKHRvb01hbnlEaWdpdHMgKyAoeC5zICogbikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZSA9IGUgLSBpIC0gMTtcclxuXHJcbiAgICAgICAgIC8vIE92ZXJmbG93P1xyXG4gICAgICAgIGlmIChlID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgICAgIC8vIEluZmluaXR5LlxyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gVW5kZXJmbG93P1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZSA8IE1JTl9FWFApIHtcclxuXHJcbiAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4LmUgPSBlO1xyXG4gICAgICAgICAgeC5jID0gW107XHJcblxyXG4gICAgICAgICAgLy8gVHJhbnNmb3JtIGJhc2VcclxuXHJcbiAgICAgICAgICAvLyBlIGlzIHRoZSBiYXNlIDEwIGV4cG9uZW50LlxyXG4gICAgICAgICAgLy8gaSBpcyB3aGVyZSB0byBzbGljZSBzdHIgdG8gZ2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2VmZmljaWVudCBhcnJheS5cclxuICAgICAgICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XHJcbiAgICAgICAgICBpZiAoZSA8IDApIGkgKz0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgaWYgKGkgPCBsZW4pIHtcclxuICAgICAgICAgICAgaWYgKGkpIHguYy5wdXNoKCtzdHIuc2xpY2UoMCwgaSkpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47KSB7XHJcbiAgICAgICAgICAgICAgeC5jLnB1c2goK3N0ci5zbGljZShpLCBpICs9IExPR19CQVNFKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZShpKTtcclxuICAgICAgICAgICAgaSA9IExPR19CQVNFIC0gc3RyLmxlbmd0aDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGkgLT0gbGVuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgeC5jLnB1c2goK3N0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBDT05TVFJVQ1RPUiBQUk9QRVJUSUVTXHJcblxyXG5cclxuICAgIEJpZ051bWJlci5jbG9uZSA9IGNsb25lO1xyXG5cclxuICAgIEJpZ051bWJlci5ST1VORF9VUCA9IDA7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfRE9XTiA9IDE7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfQ0VJTCA9IDI7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfRkxPT1IgPSAzO1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfVVAgPSA0O1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRE9XTiA9IDU7XHJcbiAgICBCaWdOdW1iZXIuUk9VTkRfSEFMRl9FVkVOID0gNjtcclxuICAgIEJpZ051bWJlci5ST1VORF9IQUxGX0NFSUwgPSA3O1xyXG4gICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRkxPT1IgPSA4O1xyXG4gICAgQmlnTnVtYmVyLkVVQ0xJRCA9IDk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBDb25maWd1cmUgaW5mcmVxdWVudGx5LWNoYW5naW5nIGxpYnJhcnktd2lkZSBzZXR0aW5ncy5cclxuICAgICAqXHJcbiAgICAgKiBBY2NlcHQgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25hbCBwcm9wZXJ0aWVzIChpZiB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBpc1xyXG4gICAgICogYSBudW1iZXIsIGl0IG11c3QgYmUgYW4gaW50ZWdlciB3aXRoaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBzdGF0ZWQpOlxyXG4gICAgICpcclxuICAgICAqICAgREVDSU1BTF9QTEFDRVMgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byBNQVhcclxuICAgICAqICAgUk9VTkRJTkdfTU9ERSAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA4XHJcbiAgICAgKiAgIEVYUE9ORU5USUFMX0FUICAge251bWJlcnxudW1iZXJbXX0gIC1NQVggdG8gTUFYICBvciAgWy1NQVggdG8gMCwgMCB0byBNQVhdXHJcbiAgICAgKiAgIFJBTkdFICAgICAgICAgICAge251bWJlcnxudW1iZXJbXX0gIC1NQVggdG8gTUFYIChub3QgemVybykgIG9yICBbLU1BWCB0byAtMSwgMSB0byBNQVhdXHJcbiAgICAgKiAgIENSWVBUTyAgICAgICAgICAge2Jvb2xlYW59ICAgICAgICAgIHRydWUgb3IgZmFsc2VcclxuICAgICAqICAgTU9EVUxPX01PREUgICAgICB7bnVtYmVyfSAgICAgICAgICAgMCB0byA5XHJcbiAgICAgKiAgIFBPV19QUkVDSVNJT04gICAgICAge251bWJlcn0gICAgICAgICAgIDAgdG8gTUFYXHJcbiAgICAgKiAgIEFMUEhBQkVUICAgICAgICAge3N0cmluZ30gICAgICAgICAgIEEgc3RyaW5nIG9mIHR3byBvciBtb3JlIHVuaXF1ZSBjaGFyYWN0ZXJzIHdoaWNoIGRvZXNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGNvbnRhaW4gJy4nLlxyXG4gICAgICogICBGT1JNQVQgICAgICAgICAgIHtvYmplY3R9ICAgICAgICAgICBBbiBvYmplY3Qgd2l0aCBzb21lIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICBwcmVmaXggICAgICAgICAgICAgICAgIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgZ3JvdXBTaXplICAgICAgICAgICAgICB7bnVtYmVyfVxyXG4gICAgICogICAgIHNlY29uZGFyeUdyb3VwU2l6ZSAgICAge251bWJlcn1cclxuICAgICAqICAgICBncm91cFNlcGFyYXRvciAgICAgICAgIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgZGVjaW1hbFNlcGFyYXRvciAgICAgICB7c3RyaW5nfVxyXG4gICAgICogICAgIGZyYWN0aW9uR3JvdXBTaXplICAgICAge251bWJlcn1cclxuICAgICAqICAgICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yIHtzdHJpbmd9XHJcbiAgICAgKiAgICAgc3VmZml4ICAgICAgICAgICAgICAgICB7c3RyaW5nfVxyXG4gICAgICpcclxuICAgICAqIChUaGUgdmFsdWVzIGFzc2lnbmVkIHRvIHRoZSBhYm92ZSBGT1JNQVQgb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBjaGVja2VkIGZvciB2YWxpZGl0eS4pXHJcbiAgICAgKlxyXG4gICAgICogRS5nLlxyXG4gICAgICogQmlnTnVtYmVyLmNvbmZpZyh7IERFQ0lNQUxfUExBQ0VTIDogMjAsIFJPVU5ESU5HX01PREUgOiA0IH0pXHJcbiAgICAgKlxyXG4gICAgICogSWdub3JlIHByb3BlcnRpZXMvcGFyYW1ldGVycyBzZXQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGV4Y2VwdCBmb3IgQUxQSEFCRVQuXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJuIGFuIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGN1cnJlbnQgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBCaWdOdW1iZXIuY29uZmlnID0gQmlnTnVtYmVyLnNldCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgdmFyIHAsIHY7XHJcblxyXG4gICAgICBpZiAob2JqICE9IG51bGwpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcclxuXHJcbiAgICAgICAgICAvLyBERUNJTUFMX1BMQUNFUyB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gREVDSU1BTF9QTEFDRVMge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0RFQ0lNQUxfUExBQ0VTJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaW50Q2hlY2sodiwgMCwgTUFYLCBwKTtcclxuICAgICAgICAgICAgREVDSU1BTF9QTEFDRVMgPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJPVU5ESU5HX01PREUge251bWJlcn0gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBST1VORElOR19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdST1VORElOR19NT0RFJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaW50Q2hlY2sodiwgMCwgOCwgcCk7XHJcbiAgICAgICAgICAgIFJPVU5ESU5HX01PREUgPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEVYUE9ORU5USUFMX0FUIHtudW1iZXJ8bnVtYmVyW119XHJcbiAgICAgICAgICAvLyBJbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcclxuICAgICAgICAgIC8vIFtpbnRlZ2VyIC1NQVggdG8gMCBpbmNsdXNpdmUsIDAgdG8gTUFYIGluY2x1c2l2ZV0uXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gRVhQT05FTlRJQUxfQVQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge3Z9J1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0VYUE9ORU5USUFMX0FUJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaWYgKHYgJiYgdi5wb3ApIHtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzBdLCAtTUFYLCAwLCBwKTtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzFdLCAwLCBNQVgsIHApO1xyXG4gICAgICAgICAgICAgIFRPX0VYUF9ORUcgPSB2WzBdO1xyXG4gICAgICAgICAgICAgIFRPX0VYUF9QT1MgPSB2WzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgICAgVE9fRVhQX05FRyA9IC0oVE9fRVhQX1BPUyA9IHYgPCAwID8gLXYgOiB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJBTkdFIHtudW1iZXJ8bnVtYmVyW119IE5vbi16ZXJvIGludGVnZXIsIC1NQVggdG8gTUFYIGluY2x1c2l2ZSBvclxyXG4gICAgICAgICAgLy8gW2ludGVnZXIgLU1BWCB0byAtMSBpbmNsdXNpdmUsIGludGVnZXIgMSB0byBNQVggaW5jbHVzaXZlXS5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBSQU5HRSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V8Y2Fubm90IGJlIHplcm99OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUkFOR0UnKSkge1xyXG4gICAgICAgICAgICB2ID0gb2JqW3BdO1xyXG4gICAgICAgICAgICBpZiAodiAmJiB2LnBvcCkge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHZbMF0sIC1NQVgsIC0xLCBwKTtcclxuICAgICAgICAgICAgICBpbnRDaGVjayh2WzFdLCAxLCBNQVgsIHApO1xyXG4gICAgICAgICAgICAgIE1JTl9FWFAgPSB2WzBdO1xyXG4gICAgICAgICAgICAgIE1BWF9FWFAgPSB2WzFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGludENoZWNrKHYsIC1NQVgsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgIE1JTl9FWFAgPSAtKE1BWF9FWFAgPSB2IDwgMCA/IC12IDogdik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgcCArICcgY2Fubm90IGJlIHplcm86ICcgKyB2KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBDUllQVE8ge2Jvb2xlYW59IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gQ1JZUFRPIG5vdCB0cnVlIG9yIGZhbHNlOiB7dn0nXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gY3J5cHRvIHVuYXZhaWxhYmxlJ1xyXG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwID0gJ0NSWVBUTycpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGlmICh2ID09PSAhIXYpIHtcclxuICAgICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvICYmXHJcbiAgICAgICAgICAgICAgICAgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgfHwgY3J5cHRvLnJhbmRvbUJ5dGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICBDUllQVE8gPSB2O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgQ1JZUFRPID0gIXY7XHJcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnY3J5cHRvIHVuYXZhaWxhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIENSWVBUTyA9IHY7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIG5vdCB0cnVlIG9yIGZhbHNlOiAnICsgdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBNT0RVTE9fTU9ERSB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIDkgaW5jbHVzaXZlLlxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIE1PRFVMT19NT0RFIHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHt2fSdcclxuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCA9ICdNT0RVTE9fTU9ERScpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIDAsIDksIHApO1xyXG4gICAgICAgICAgICBNT0RVTE9fTU9ERSA9IHY7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUE9XX1BSRUNJU0lPTiB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gUE9XX1BSRUNJU0lPTiB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnUE9XX1BSRUNJU0lPTicpKSB7XHJcbiAgICAgICAgICAgIHYgPSBvYmpbcF07XHJcbiAgICAgICAgICAgIGludENoZWNrKHYsIDAsIE1BWCwgcCk7XHJcbiAgICAgICAgICAgIFBPV19QUkVDSVNJT04gPSB2O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEZPUk1BVCB7b2JqZWN0fVxyXG4gICAgICAgICAgLy8gJ1tCaWdOdW1iZXIgRXJyb3JdIEZPUk1BVCBub3QgYW4gb2JqZWN0OiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnRk9STUFUJykpIHtcclxuICAgICAgICAgICAgdiA9IG9ialtwXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdvYmplY3QnKSBGT1JNQVQgPSB2O1xyXG4gICAgICAgICAgICBlbHNlIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyBwICsgJyBub3QgYW4gb2JqZWN0OiAnICsgdik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQUxQSEFCRVQge3N0cmluZ31cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBBTFBIQUJFVCBpbnZhbGlkOiB7dn0nXHJcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHAgPSAnQUxQSEFCRVQnKSkge1xyXG4gICAgICAgICAgICB2ID0gb2JqW3BdO1xyXG5cclxuICAgICAgICAgICAgLy8gRGlzYWxsb3cgaWYgb25seSBvbmUgY2hhcmFjdGVyLFxyXG4gICAgICAgICAgICAvLyBvciBpZiBpdCBjb250YWlucyAnKycsICctJywgJy4nLCB3aGl0ZXNwYWNlLCBvciBhIHJlcGVhdGVkIGNoYXJhY3Rlci5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09ICdzdHJpbmcnICYmICEvXi4kfFsrLS5cXHNdfCguKS4qXFwxLy50ZXN0KHYpKSB7XHJcbiAgICAgICAgICAgICAgQUxQSEFCRVQgPSB2O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArIHAgKyAnIGludmFsaWQ6ICcgKyB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vICdbQmlnTnVtYmVyIEVycm9yXSBPYmplY3QgZXhwZWN0ZWQ6IHt2fSdcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ09iamVjdCBleHBlY3RlZDogJyArIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIERFQ0lNQUxfUExBQ0VTOiBERUNJTUFMX1BMQUNFUyxcclxuICAgICAgICBST1VORElOR19NT0RFOiBST1VORElOR19NT0RFLFxyXG4gICAgICAgIEVYUE9ORU5USUFMX0FUOiBbVE9fRVhQX05FRywgVE9fRVhQX1BPU10sXHJcbiAgICAgICAgUkFOR0U6IFtNSU5fRVhQLCBNQVhfRVhQXSxcclxuICAgICAgICBDUllQVE86IENSWVBUTyxcclxuICAgICAgICBNT0RVTE9fTU9ERTogTU9EVUxPX01PREUsXHJcbiAgICAgICAgUE9XX1BSRUNJU0lPTjogUE9XX1BSRUNJU0lPTixcclxuICAgICAgICBGT1JNQVQ6IEZPUk1BVCxcclxuICAgICAgICBBTFBIQUJFVDogQUxQSEFCRVRcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB2IGlzIGEgQmlnTnVtYmVyIGluc3RhbmNlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICpcclxuICAgICAqIHYge2FueX1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLmlzQmlnTnVtYmVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgcmV0dXJuIHYgaW5zdGFuY2VvZiBCaWdOdW1iZXIgfHwgdiAmJiB2Ll9pc0JpZ051bWJlciA9PT0gdHJ1ZSB8fCBmYWxzZTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtYXhpbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLm1heGltdW0gPSBCaWdOdW1iZXIubWF4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmx0KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtaW5pbXVtIG9mIHRoZSBhcmd1bWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogYXJndW1lbnRzIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn1cclxuICAgICAqL1xyXG4gICAgQmlnTnVtYmVyLm1pbmltdW0gPSBCaWdOdW1iZXIubWluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gbWF4T3JNaW4oYXJndW1lbnRzLCBQLmd0KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdpdGggYSByYW5kb20gdmFsdWUgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIDAgYW5kIGxlc3MgdGhhbiAxLFxyXG4gICAgICogYW5kIHdpdGggZHAsIG9yIERFQ0lNQUxfUExBQ0VTIGlmIGRwIGlzIG9taXR0ZWQsIGRlY2ltYWwgcGxhY2VzIChvciBsZXNzIGlmIHRyYWlsaW5nXHJcbiAgICAgKiB6ZXJvcyBhcmUgcHJvZHVjZWQpLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfSdcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBjcnlwdG8gdW5hdmFpbGFibGUnXHJcbiAgICAgKi9cclxuICAgIEJpZ051bWJlci5yYW5kb20gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgcG93Ml81MyA9IDB4MjAwMDAwMDAwMDAwMDA7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gYSA1MyBiaXQgaW50ZWdlciBuLCB3aGVyZSAwIDw9IG4gPCA5MDA3MTk5MjU0NzQwOTkyLlxyXG4gICAgICAvLyBDaGVjayBpZiBNYXRoLnJhbmRvbSgpIHByb2R1Y2VzIG1vcmUgdGhhbiAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXHJcbiAgICAgIC8vIElmIGl0IGRvZXMsIGFzc3VtZSBhdCBsZWFzdCA1MyBiaXRzIGFyZSBwcm9kdWNlZCwgb3RoZXJ3aXNlIGFzc3VtZSBhdCBsZWFzdCAzMCBiaXRzLlxyXG4gICAgICAvLyAweDQwMDAwMDAwIGlzIDJeMzAsIDB4ODAwMDAwIGlzIDJeMjMsIDB4MWZmZmZmIGlzIDJeMjEgLSAxLlxyXG4gICAgICB2YXIgcmFuZG9tNTNiaXRJbnQgPSAoTWF0aC5yYW5kb20oKSAqIHBvdzJfNTMpICYgMHgxZmZmZmZcclxuICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0aGZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3cyXzUzKTsgfVxyXG4gICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoKE1hdGgucmFuZG9tKCkgKiAweDQwMDAwMDAwIHwgMCkgKiAweDgwMDAwMCkgK1xyXG4gICAgICAgICAoTWF0aC5yYW5kb20oKSAqIDB4ODAwMDAwIHwgMCk7IH07XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgdmFyIGEsIGIsIGUsIGssIHYsXHJcbiAgICAgICAgICBpID0gMCxcclxuICAgICAgICAgIGMgPSBbXSxcclxuICAgICAgICAgIHJhbmQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcblxyXG4gICAgICAgIGlmIChkcCA9PSBudWxsKSBkcCA9IERFQ0lNQUxfUExBQ0VTO1xyXG4gICAgICAgIGVsc2UgaW50Q2hlY2soZHAsIDAsIE1BWCk7XHJcblxyXG4gICAgICAgIGsgPSBtYXRoY2VpbChkcCAvIExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgaWYgKENSWVBUTykge1xyXG5cclxuICAgICAgICAgIC8vIEJyb3dzZXJzIHN1cHBvcnRpbmcgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5cclxuICAgICAgICAgIGlmIChjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XHJcblxyXG4gICAgICAgICAgICBhID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoayAqPSAyKSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKDsgaSA8IGs7KSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIDUzIGJpdHM6XHJcbiAgICAgICAgICAgICAgLy8gKChNYXRoLnBvdygyLCAzMikgLSAxKSAqIE1hdGgucG93KDIsIDIxKSkudG9TdHJpbmcoMilcclxuICAgICAgICAgICAgICAvLyAxMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTEwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMFxyXG4gICAgICAgICAgICAgIC8vICgoTWF0aC5wb3coMiwgMzIpIC0gMSkgPj4+IDExKS50b1N0cmluZygyKVxyXG4gICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExMTExIDExMTExMTExIDExMTExMTExXHJcbiAgICAgICAgICAgICAgLy8gMHgyMDAwMCBpcyAyXjIxLlxyXG4gICAgICAgICAgICAgIHYgPSBhW2ldICogMHgyMDAwMCArIChhW2kgKyAxXSA+Pj4gMTEpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBSZWplY3Rpb24gc2FtcGxpbmc6XHJcbiAgICAgICAgICAgICAgLy8gMCA8PSB2IDwgOTAwNzE5OTI1NDc0MDk5MlxyXG4gICAgICAgICAgICAgIC8vIFByb2JhYmlsaXR5IHRoYXQgdiA+PSA5ZTE1LCBpc1xyXG4gICAgICAgICAgICAgIC8vIDcxOTkyNTQ3NDA5OTIgLyA5MDA3MTk5MjU0NzQwOTkyIH49IDAuMDAwOCwgaS5lLiAxIGluIDEyNTFcclxuICAgICAgICAgICAgICBpZiAodiA+PSA5ZTE1KSB7XHJcbiAgICAgICAgICAgICAgICBiID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMikpO1xyXG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbMF07XHJcbiAgICAgICAgICAgICAgICBhW2kgKyAxXSA9IGJbMV07XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwIDw9IHYgPD0gODk5OTk5OTk5OTk5OTk5OVxyXG4gICAgICAgICAgICAgICAgLy8gMCA8PSAodiAlIDFlMTQpIDw9IDk5OTk5OTk5OTk5OTk5XHJcbiAgICAgICAgICAgICAgICBjLnB1c2godiAlIDFlMTQpO1xyXG4gICAgICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gayAvIDI7XHJcblxyXG4gICAgICAgICAgLy8gTm9kZS5qcyBzdXBwb3J0aW5nIGNyeXB0by5yYW5kb21CeXRlcy5cclxuICAgICAgICAgIH0gZWxzZSBpZiAoY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBidWZmZXJcclxuICAgICAgICAgICAgYSA9IGNyeXB0by5yYW5kb21CeXRlcyhrICo9IDcpO1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IGkgPCBrOykge1xyXG5cclxuICAgICAgICAgICAgICAvLyAweDEwMDAwMDAwMDAwMDAgaXMgMl40OCwgMHgxMDAwMDAwMDAwMCBpcyAyXjQwXHJcbiAgICAgICAgICAgICAgLy8gMHgxMDAwMDAwMDAgaXMgMl4zMiwgMHgxMDAwMDAwIGlzIDJeMjRcclxuICAgICAgICAgICAgICAvLyAxMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMSAxMTExMTExMVxyXG4gICAgICAgICAgICAgIC8vIDAgPD0gdiA8IDkwMDcxOTkyNTQ3NDA5OTJcclxuICAgICAgICAgICAgICB2ID0gKChhW2ldICYgMzEpICogMHgxMDAwMDAwMDAwMDAwKSArIChhW2kgKyAxXSAqIDB4MTAwMDAwMDAwMDApICtcclxuICAgICAgICAgICAgICAgICAoYVtpICsgMl0gKiAweDEwMDAwMDAwMCkgKyAoYVtpICsgM10gKiAweDEwMDAwMDApICtcclxuICAgICAgICAgICAgICAgICAoYVtpICsgNF0gPDwgMTYpICsgKGFbaSArIDVdIDw8IDgpICsgYVtpICsgNl07XHJcblxyXG4gICAgICAgICAgICAgIGlmICh2ID49IDllMTUpIHtcclxuICAgICAgICAgICAgICAgIGNyeXB0by5yYW5kb21CeXRlcyg3KS5jb3B5KGEsIGkpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMCA8PSAodiAlIDFlMTQpIDw9IDk5OTk5OTk5OTk5OTk5XHJcbiAgICAgICAgICAgICAgICBjLnB1c2godiAlIDFlMTQpO1xyXG4gICAgICAgICAgICAgICAgaSArPSA3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gayAvIDc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBDUllQVE8gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdjcnlwdG8gdW5hdmFpbGFibGUnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVzZSBNYXRoLnJhbmRvbS5cclxuICAgICAgICBpZiAoIUNSWVBUTykge1xyXG5cclxuICAgICAgICAgIGZvciAoOyBpIDwgazspIHtcclxuICAgICAgICAgICAgdiA9IHJhbmRvbTUzYml0SW50KCk7XHJcbiAgICAgICAgICAgIGlmICh2IDwgOWUxNSkgY1tpKytdID0gdiAlIDFlMTQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrID0gY1stLWldO1xyXG4gICAgICAgIGRwICU9IExPR19CQVNFO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHRyYWlsaW5nIGRpZ2l0cyB0byB6ZXJvcyBhY2NvcmRpbmcgdG8gZHAuXHJcbiAgICAgICAgaWYgKGsgJiYgZHApIHtcclxuICAgICAgICAgIHYgPSBQT1dTX1RFTltMT0dfQkFTRSAtIGRwXTtcclxuICAgICAgICAgIGNbaV0gPSBtYXRoZmxvb3IoayAvIHYpICogdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBlbGVtZW50cyB3aGljaCBhcmUgemVyby5cclxuICAgICAgICBmb3IgKDsgY1tpXSA9PT0gMDsgYy5wb3AoKSwgaS0tKTtcclxuXHJcbiAgICAgICAgLy8gWmVybz9cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIGMgPSBbZSA9IDBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgZWxlbWVudHMgd2hpY2ggYXJlIHplcm8gYW5kIGFkanVzdCBleHBvbmVudCBhY2NvcmRpbmdseS5cclxuICAgICAgICAgIGZvciAoZSA9IC0xIDsgY1swXSA9PT0gMDsgYy5zcGxpY2UoMCwgMSksIGUgLT0gTE9HX0JBU0UpO1xyXG5cclxuICAgICAgICAgIC8vIENvdW50IHRoZSBkaWdpdHMgb2YgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYyB0byBkZXRlcm1pbmUgbGVhZGluZyB6ZXJvcywgYW5kLi4uXHJcbiAgICAgICAgICBmb3IgKGkgPSAxLCB2ID0gY1swXTsgdiA+PSAxMDsgdiAvPSAxMCwgaSsrKTtcclxuXHJcbiAgICAgICAgICAvLyBhZGp1c3QgdGhlIGV4cG9uZW50IGFjY29yZGluZ2x5LlxyXG4gICAgICAgICAgaWYgKGkgPCBMT0dfQkFTRSkgZSAtPSBMT0dfQkFTRSAtIGk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByYW5kLmUgPSBlO1xyXG4gICAgICAgIHJhbmQuYyA9IGM7XHJcbiAgICAgICAgcmV0dXJuIHJhbmQ7XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBzdW0gb2YgdGhlIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBCaWdOdW1iZXIuc3VtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgaSA9IDEsXHJcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcclxuICAgICAgICBzdW0gPSBuZXcgQmlnTnVtYmVyKGFyZ3NbMF0pO1xyXG4gICAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOykgc3VtID0gc3VtLnBsdXMoYXJnc1tpKytdKTtcclxuICAgICAgcmV0dXJuIHN1bTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIFBSSVZBVEUgRlVOQ1RJT05TXHJcblxyXG5cclxuICAgIC8vIENhbGxlZCBieSBCaWdOdW1iZXIgYW5kIEJpZ051bWJlci5wcm90b3R5cGUudG9TdHJpbmcuXHJcbiAgICBjb252ZXJ0QmFzZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBkZWNpbWFsID0gJzAxMjM0NTY3ODknO1xyXG5cclxuICAgICAgLypcclxuICAgICAgICogQ29udmVydCBzdHJpbmcgb2YgYmFzZUluIHRvIGFuIGFycmF5IG9mIG51bWJlcnMgb2YgYmFzZU91dC5cclxuICAgICAgICogRWcuIHRvQmFzZU91dCgnMjU1JywgMTAsIDE2KSByZXR1cm5zIFsxNSwgMTVdLlxyXG4gICAgICAgKiBFZy4gdG9CYXNlT3V0KCdmZicsIDE2LCAxMCkgcmV0dXJucyBbMiwgNSwgNV0uXHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiB0b0Jhc2VPdXQoc3RyLCBiYXNlSW4sIGJhc2VPdXQsIGFscGhhYmV0KSB7XHJcbiAgICAgICAgdmFyIGosXHJcbiAgICAgICAgICBhcnIgPSBbMF0sXHJcbiAgICAgICAgICBhcnJMLFxyXG4gICAgICAgICAgaSA9IDAsXHJcbiAgICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgICBmb3IgKDsgaSA8IGxlbjspIHtcclxuICAgICAgICAgIGZvciAoYXJyTCA9IGFyci5sZW5ndGg7IGFyckwtLTsgYXJyW2FyckxdICo9IGJhc2VJbik7XHJcblxyXG4gICAgICAgICAgYXJyWzBdICs9IGFscGhhYmV0LmluZGV4T2Yoc3RyLmNoYXJBdChpKyspKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJyW2pdID4gYmFzZU91dCAtIDEpIHtcclxuICAgICAgICAgICAgICBpZiAoYXJyW2ogKyAxXSA9PSBudWxsKSBhcnJbaiArIDFdID0gMDtcclxuICAgICAgICAgICAgICBhcnJbaiArIDFdICs9IGFycltqXSAvIGJhc2VPdXQgfCAwO1xyXG4gICAgICAgICAgICAgIGFycltqXSAlPSBiYXNlT3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXJyLnJldmVyc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29udmVydCBhIG51bWVyaWMgc3RyaW5nIG9mIGJhc2VJbiB0byBhIG51bWVyaWMgc3RyaW5nIG9mIGJhc2VPdXQuXHJcbiAgICAgIC8vIElmIHRoZSBjYWxsZXIgaXMgdG9TdHJpbmcsIHdlIGFyZSBjb252ZXJ0aW5nIGZyb20gYmFzZSAxMCB0byBiYXNlT3V0LlxyXG4gICAgICAvLyBJZiB0aGUgY2FsbGVyIGlzIEJpZ051bWJlciwgd2UgYXJlIGNvbnZlcnRpbmcgZnJvbSBiYXNlSW4gdG8gYmFzZSAxMC5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIsIGJhc2VJbiwgYmFzZU91dCwgc2lnbiwgY2FsbGVySXNUb1N0cmluZykge1xyXG4gICAgICAgIHZhciBhbHBoYWJldCwgZCwgZSwgaywgciwgeCwgeGMsIHksXHJcbiAgICAgICAgICBpID0gc3RyLmluZGV4T2YoJy4nKSxcclxuICAgICAgICAgIGRwID0gREVDSU1BTF9QTEFDRVMsXHJcbiAgICAgICAgICBybSA9IFJPVU5ESU5HX01PREU7XHJcblxyXG4gICAgICAgIC8vIE5vbi1pbnRlZ2VyLlxyXG4gICAgICAgIGlmIChpID49IDApIHtcclxuICAgICAgICAgIGsgPSBQT1dfUFJFQ0lTSU9OO1xyXG5cclxuICAgICAgICAgIC8vIFVubGltaXRlZCBwcmVjaXNpb24uXHJcbiAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gMDtcclxuICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCcuJywgJycpO1xyXG4gICAgICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoYmFzZUluKTtcclxuICAgICAgICAgIHggPSB5LnBvdyhzdHIubGVuZ3RoIC0gaSk7XHJcbiAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gaztcclxuXHJcbiAgICAgICAgICAvLyBDb252ZXJ0IHN0ciBhcyBpZiBhbiBpbnRlZ2VyLCB0aGVuIHJlc3RvcmUgdGhlIGZyYWN0aW9uIHBhcnQgYnkgZGl2aWRpbmcgdGhlXHJcbiAgICAgICAgICAvLyByZXN1bHQgYnkgaXRzIGJhc2UgcmFpc2VkIHRvIGEgcG93ZXIuXHJcblxyXG4gICAgICAgICAgeS5jID0gdG9CYXNlT3V0KHRvRml4ZWRQb2ludChjb2VmZlRvU3RyaW5nKHguYyksIHguZSwgJzAnKSxcclxuICAgICAgICAgICAxMCwgYmFzZU91dCwgZGVjaW1hbCk7XHJcbiAgICAgICAgICB5LmUgPSB5LmMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29udmVydCB0aGUgbnVtYmVyIGFzIGludGVnZXIuXHJcblxyXG4gICAgICAgIHhjID0gdG9CYXNlT3V0KHN0ciwgYmFzZUluLCBiYXNlT3V0LCBjYWxsZXJJc1RvU3RyaW5nXHJcbiAgICAgICAgID8gKGFscGhhYmV0ID0gQUxQSEFCRVQsIGRlY2ltYWwpXHJcbiAgICAgICAgIDogKGFscGhhYmV0ID0gZGVjaW1hbCwgQUxQSEFCRVQpKTtcclxuXHJcbiAgICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGFzIGFuIGludGVnZXIgYW5kIGNvbnZlcnRlZCB0byBiYXNlT3V0LiBlIGlzIHRoZSBleHBvbmVudC5cclxuICAgICAgICBlID0gayA9IHhjLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoOyB4Y1stLWtdID09IDA7IHhjLnBvcCgpKTtcclxuXHJcbiAgICAgICAgLy8gWmVybz9cclxuICAgICAgICBpZiAoIXhjWzBdKSByZXR1cm4gYWxwaGFiZXQuY2hhckF0KDApO1xyXG5cclxuICAgICAgICAvLyBEb2VzIHN0ciByZXByZXNlbnQgYW4gaW50ZWdlcj8gSWYgc28sIG5vIG5lZWQgZm9yIHRoZSBkaXZpc2lvbi5cclxuICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgIC0tZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeC5jID0geGM7XHJcbiAgICAgICAgICB4LmUgPSBlO1xyXG5cclxuICAgICAgICAgIC8vIFRoZSBzaWduIGlzIG5lZWRlZCBmb3IgY29ycmVjdCByb3VuZGluZy5cclxuICAgICAgICAgIHgucyA9IHNpZ247XHJcbiAgICAgICAgICB4ID0gZGl2KHgsIHksIGRwLCBybSwgYmFzZU91dCk7XHJcbiAgICAgICAgICB4YyA9IHguYztcclxuICAgICAgICAgIHIgPSB4LnI7XHJcbiAgICAgICAgICBlID0geC5lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8geGMgbm93IHJlcHJlc2VudHMgc3RyIGNvbnZlcnRlZCB0byBiYXNlT3V0LlxyXG5cclxuICAgICAgICAvLyBUSGUgaW5kZXggb2YgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgIGQgPSBlICsgZHAgKyAxO1xyXG5cclxuICAgICAgICAvLyBUaGUgcm91bmRpbmcgZGlnaXQ6IHRoZSBkaWdpdCB0byB0aGUgcmlnaHQgb2YgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgaSA9IHhjW2RdO1xyXG5cclxuICAgICAgICAvLyBMb29rIGF0IHRoZSByb3VuZGluZyBkaWdpdHMgYW5kIG1vZGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcm91bmQgdXAuXHJcblxyXG4gICAgICAgIGsgPSBiYXNlT3V0IC8gMjtcclxuICAgICAgICByID0gciB8fCBkIDwgMCB8fCB4Y1tkICsgMV0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgciA9IHJtIDwgNCA/IChpICE9IG51bGwgfHwgcikgJiYgKHJtID09IDAgfHwgcm0gPT0gKHgucyA8IDAgPyAzIDogMikpXHJcbiAgICAgICAgICAgICAgOiBpID4gayB8fCBpID09IGsgJiYocm0gPT0gNCB8fCByIHx8IHJtID09IDYgJiYgeGNbZCAtIDFdICYgMSB8fFxyXG4gICAgICAgICAgICAgICBybSA9PSAoeC5zIDwgMCA/IDggOiA3KSk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBpbmRleCBvZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgbm90IGdyZWF0ZXIgdGhhbiB6ZXJvLCBvciB4YyByZXByZXNlbnRzXHJcbiAgICAgICAgLy8gemVybywgdGhlbiB0aGUgcmVzdWx0IG9mIHRoZSBiYXNlIGNvbnZlcnNpb24gaXMgemVybyBvciwgaWYgcm91bmRpbmcgdXAsIGEgdmFsdWVcclxuICAgICAgICAvLyBzdWNoIGFzIDAuMDAwMDEuXHJcbiAgICAgICAgaWYgKGQgPCAxIHx8ICF4Y1swXSkge1xyXG5cclxuICAgICAgICAgIC8vIDFeLWRwIG9yIDBcclxuICAgICAgICAgIHN0ciA9IHIgPyB0b0ZpeGVkUG9pbnQoYWxwaGFiZXQuY2hhckF0KDEpLCAtZHAsIGFscGhhYmV0LmNoYXJBdCgwKSkgOiBhbHBoYWJldC5jaGFyQXQoMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBUcnVuY2F0ZSB4YyB0byB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICAgICAgeGMubGVuZ3RoID0gZDtcclxuXHJcbiAgICAgICAgICAvLyBSb3VuZCB1cD9cclxuICAgICAgICAgIGlmIChyKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBSb3VuZGluZyB1cCBtYXkgbWVhbiB0aGUgcHJldmlvdXMgZGlnaXQgaGFzIHRvIGJlIHJvdW5kZWQgdXAgYW5kIHNvIG9uLlxyXG4gICAgICAgICAgICBmb3IgKC0tYmFzZU91dDsgKyt4Y1stLWRdID4gYmFzZU91dDspIHtcclxuICAgICAgICAgICAgICB4Y1tkXSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgIGlmICghZCkge1xyXG4gICAgICAgICAgICAgICAgKytlO1xyXG4gICAgICAgICAgICAgICAgeGMgPSBbMV0uY29uY2F0KHhjKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBEZXRlcm1pbmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICBmb3IgKGsgPSB4Yy5sZW5ndGg7ICF4Y1stLWtdOyk7XHJcblxyXG4gICAgICAgICAgLy8gRS5nLiBbNCwgMTEsIDE1XSBiZWNvbWVzIDRiZi5cclxuICAgICAgICAgIGZvciAoaSA9IDAsIHN0ciA9ICcnOyBpIDw9IGs7IHN0ciArPSBhbHBoYWJldC5jaGFyQXQoeGNbaSsrXSkpO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCBsZWFkaW5nIHplcm9zLCBkZWNpbWFsIHBvaW50IGFuZCB0cmFpbGluZyB6ZXJvcyBhcyByZXF1aXJlZC5cclxuICAgICAgICAgIHN0ciA9IHRvRml4ZWRQb2ludChzdHIsIGUsIGFscGhhYmV0LmNoYXJBdCgwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgY2FsbGVyIHdpbGwgYWRkIHRoZSBzaWduLlxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvLyBQZXJmb3JtIGRpdmlzaW9uIGluIHRoZSBzcGVjaWZpZWQgYmFzZS4gQ2FsbGVkIGJ5IGRpdiBhbmQgY29udmVydEJhc2UuXHJcbiAgICBkaXYgPSAoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgLy8gQXNzdW1lIG5vbi16ZXJvIHggYW5kIGsuXHJcbiAgICAgIGZ1bmN0aW9uIG11bHRpcGx5KHgsIGssIGJhc2UpIHtcclxuICAgICAgICB2YXIgbSwgdGVtcCwgeGxvLCB4aGksXHJcbiAgICAgICAgICBjYXJyeSA9IDAsXHJcbiAgICAgICAgICBpID0geC5sZW5ndGgsXHJcbiAgICAgICAgICBrbG8gPSBrICUgU1FSVF9CQVNFLFxyXG4gICAgICAgICAga2hpID0gayAvIFNRUlRfQkFTRSB8IDA7XHJcblxyXG4gICAgICAgIGZvciAoeCA9IHguc2xpY2UoKTsgaS0tOykge1xyXG4gICAgICAgICAgeGxvID0geFtpXSAlIFNRUlRfQkFTRTtcclxuICAgICAgICAgIHhoaSA9IHhbaV0gLyBTUVJUX0JBU0UgfCAwO1xyXG4gICAgICAgICAgbSA9IGtoaSAqIHhsbyArIHhoaSAqIGtsbztcclxuICAgICAgICAgIHRlbXAgPSBrbG8gKiB4bG8gKyAoKG0gJSBTUVJUX0JBU0UpICogU1FSVF9CQVNFKSArIGNhcnJ5O1xyXG4gICAgICAgICAgY2FycnkgPSAodGVtcCAvIGJhc2UgfCAwKSArIChtIC8gU1FSVF9CQVNFIHwgMCkgKyBraGkgKiB4aGk7XHJcbiAgICAgICAgICB4W2ldID0gdGVtcCAlIGJhc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FycnkpIHggPSBbY2FycnldLmNvbmNhdCh4KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYiwgYUwsIGJMKSB7XHJcbiAgICAgICAgdmFyIGksIGNtcDtcclxuXHJcbiAgICAgICAgaWYgKGFMICE9IGJMKSB7XHJcbiAgICAgICAgICBjbXAgPSBhTCA+IGJMID8gMSA6IC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgZm9yIChpID0gY21wID0gMDsgaSA8IGFMOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChhW2ldICE9IGJbaV0pIHtcclxuICAgICAgICAgICAgICBjbXAgPSBhW2ldID4gYltpXSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNtcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc3VidHJhY3QoYSwgYiwgYUwsIGJhc2UpIHtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IGIgZnJvbSBhLlxyXG4gICAgICAgIGZvciAoOyBhTC0tOykge1xyXG4gICAgICAgICAgYVthTF0gLT0gaTtcclxuICAgICAgICAgIGkgPSBhW2FMXSA8IGJbYUxdID8gMSA6IDA7XHJcbiAgICAgICAgICBhW2FMXSA9IGkgKiBiYXNlICsgYVthTF0gLSBiW2FMXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7IGEuc3BsaWNlKDAsIDEpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8geDogZGl2aWRlbmQsIHk6IGRpdmlzb3IuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSwgZHAsIHJtLCBiYXNlKSB7XHJcbiAgICAgICAgdmFyIGNtcCwgZSwgaSwgbW9yZSwgbiwgcHJvZCwgcHJvZEwsIHEsIHFjLCByZW0sIHJlbUwsIHJlbTAsIHhpLCB4TCwgeWMwLFxyXG4gICAgICAgICAgeUwsIHl6LFxyXG4gICAgICAgICAgcyA9IHgucyA9PSB5LnMgPyAxIDogLTEsXHJcbiAgICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICAgIHljID0geS5jO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgTmFOLCBJbmZpbml0eSBvciAwP1xyXG4gICAgICAgIGlmICgheGMgfHwgIXhjWzBdIHx8ICF5YyB8fCAheWNbMF0pIHtcclxuXHJcbiAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihcclxuXHJcbiAgICAgICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgTmFOLCBvciBib3RoIEluZmluaXR5IG9yIDAuXHJcbiAgICAgICAgICAgIXgucyB8fCAheS5zIHx8ICh4YyA/IHljICYmIHhjWzBdID09IHljWzBdIDogIXljKSA/IE5hTiA6XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gwrEwIGlmIHggaXMgwrEwIG9yIHkgaXMgwrFJbmZpbml0eSwgb3IgcmV0dXJuIMKxSW5maW5pdHkgYXMgeSBpcyDCsTAuXHJcbiAgICAgICAgICAgIHhjICYmIHhjWzBdID09IDAgfHwgIXljID8gcyAqIDAgOiBzIC8gMFxyXG4gICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcSA9IG5ldyBCaWdOdW1iZXIocyk7XHJcbiAgICAgICAgcWMgPSBxLmMgPSBbXTtcclxuICAgICAgICBlID0geC5lIC0geS5lO1xyXG4gICAgICAgIHMgPSBkcCArIGUgKyAxO1xyXG5cclxuICAgICAgICBpZiAoIWJhc2UpIHtcclxuICAgICAgICAgIGJhc2UgPSBCQVNFO1xyXG4gICAgICAgICAgZSA9IGJpdEZsb29yKHguZSAvIExPR19CQVNFKSAtIGJpdEZsb29yKHkuZSAvIExPR19CQVNFKTtcclxuICAgICAgICAgIHMgPSBzIC8gTE9HX0JBU0UgfCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVzdWx0IGV4cG9uZW50IG1heSBiZSBvbmUgbGVzcyB0aGVuIHRoZSBjdXJyZW50IHZhbHVlIG9mIGUuXHJcbiAgICAgICAgLy8gVGhlIGNvZWZmaWNpZW50cyBvZiB0aGUgQmlnTnVtYmVycyBmcm9tIGNvbnZlcnRCYXNlIG1heSBoYXZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgIGZvciAoaSA9IDA7IHljW2ldID09ICh4Y1tpXSB8fCAwKTsgaSsrKTtcclxuXHJcbiAgICAgICAgaWYgKHljW2ldID4gKHhjW2ldIHx8IDApKSBlLS07XHJcblxyXG4gICAgICAgIGlmIChzIDwgMCkge1xyXG4gICAgICAgICAgcWMucHVzaCgxKTtcclxuICAgICAgICAgIG1vcmUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4TCA9IHhjLmxlbmd0aDtcclxuICAgICAgICAgIHlMID0geWMubGVuZ3RoO1xyXG4gICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICBzICs9IDI7XHJcblxyXG4gICAgICAgICAgLy8gTm9ybWFsaXNlIHhjIGFuZCB5YyBzbyBoaWdoZXN0IG9yZGVyIGRpZ2l0IG9mIHljIGlzID49IGJhc2UgLyAyLlxyXG5cclxuICAgICAgICAgIG4gPSBtYXRoZmxvb3IoYmFzZSAvICh5Y1swXSArIDEpKTtcclxuXHJcbiAgICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5LCBidXQgdG8gaGFuZGxlIG9kZCBiYXNlcyB3aGVyZSB5Y1swXSA9PSAoYmFzZSAvIDIpIC0gMS5cclxuICAgICAgICAgIC8vIGlmIChuID4gMSB8fCBuKysgPT0gMSAmJiB5Y1swXSA8IGJhc2UgLyAyKSB7XHJcbiAgICAgICAgICBpZiAobiA+IDEpIHtcclxuICAgICAgICAgICAgeWMgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICAgIHhjID0gbXVsdGlwbHkoeGMsIG4sIGJhc2UpO1xyXG4gICAgICAgICAgICB5TCA9IHljLmxlbmd0aDtcclxuICAgICAgICAgICAgeEwgPSB4Yy5sZW5ndGg7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgeGkgPSB5TDtcclxuICAgICAgICAgIHJlbSA9IHhjLnNsaWNlKDAsIHlMKTtcclxuICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgIC8vIEFkZCB6ZXJvcyB0byBtYWtlIHJlbWFpbmRlciBhcyBsb25nIGFzIGRpdmlzb3IuXHJcbiAgICAgICAgICBmb3IgKDsgcmVtTCA8IHlMOyByZW1bcmVtTCsrXSA9IDApO1xyXG4gICAgICAgICAgeXogPSB5Yy5zbGljZSgpO1xyXG4gICAgICAgICAgeXogPSBbMF0uY29uY2F0KHl6KTtcclxuICAgICAgICAgIHljMCA9IHljWzBdO1xyXG4gICAgICAgICAgaWYgKHljWzFdID49IGJhc2UgLyAyKSB5YzArKztcclxuICAgICAgICAgIC8vIE5vdCBuZWNlc3NhcnksIGJ1dCB0byBwcmV2ZW50IHRyaWFsIGRpZ2l0IG4gPiBiYXNlLCB3aGVuIHVzaW5nIGJhc2UgMy5cclxuICAgICAgICAgIC8vIGVsc2UgaWYgKGJhc2UgPT0gMyAmJiB5YzAgPT0gMSkgeWMwID0gMSArIDFlLTE1O1xyXG5cclxuICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgbiA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgY21wID0gY29tcGFyZSh5YywgcmVtLCB5TCwgcmVtTCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBkaXZpc29yIDwgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBpZiAoY21wIDwgMCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdHJpYWwgZGlnaXQsIG4uXHJcblxyXG4gICAgICAgICAgICAgIHJlbTAgPSByZW1bMF07XHJcbiAgICAgICAgICAgICAgaWYgKHlMICE9IHJlbUwpIHJlbTAgPSByZW0wICogYmFzZSArIChyZW1bMV0gfHwgMCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIG4gaXMgaG93IG1hbnkgdGltZXMgdGhlIGRpdmlzb3IgZ29lcyBpbnRvIHRoZSBjdXJyZW50IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBuID0gbWF0aGZsb29yKHJlbTAgLyB5YzApO1xyXG5cclxuICAgICAgICAgICAgICAvLyAgQWxnb3JpdGhtOlxyXG4gICAgICAgICAgICAgIC8vICBwcm9kdWN0ID0gZGl2aXNvciBtdWx0aXBsaWVkIGJ5IHRyaWFsIGRpZ2l0IChuKS5cclxuICAgICAgICAgICAgICAvLyAgQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgLy8gIElmIHByb2R1Y3QgaXMgZ3JlYXRlciB0aGFuIHJlbWFpbmRlcjpcclxuICAgICAgICAgICAgICAvLyAgICBTdWJ0cmFjdCBkaXZpc29yIGZyb20gcHJvZHVjdCwgZGVjcmVtZW50IHRyaWFsIGRpZ2l0LlxyXG4gICAgICAgICAgICAgIC8vICBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIC8vICBJZiBwcm9kdWN0IHdhcyBsZXNzIHRoYW4gcmVtYWluZGVyIGF0IHRoZSBsYXN0IGNvbXBhcmU6XHJcbiAgICAgICAgICAgICAgLy8gICAgQ29tcGFyZSBuZXcgcmVtYWluZGVyIGFuZCBkaXZpc29yLlxyXG4gICAgICAgICAgICAgIC8vICAgIElmIHJlbWFpbmRlciBpcyBncmVhdGVyIHRoYW4gZGl2aXNvcjpcclxuICAgICAgICAgICAgICAvLyAgICAgIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIsIGluY3JlbWVudCB0cmlhbCBkaWdpdC5cclxuXHJcbiAgICAgICAgICAgICAgaWYgKG4gPiAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbiBtYXkgYmUgPiBiYXNlIG9ubHkgd2hlbiBiYXNlIGlzIDMuXHJcbiAgICAgICAgICAgICAgICBpZiAobiA+PSBiYXNlKSBuID0gYmFzZSAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3IgKiB0cmlhbCBkaWdpdC5cclxuICAgICAgICAgICAgICAgIHByb2QgPSBtdWx0aXBseSh5YywgbiwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBwcm9kdWN0IGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0ID4gcmVtYWluZGVyIHRoZW4gdHJpYWwgZGlnaXQgbiB0b28gaGlnaC5cclxuICAgICAgICAgICAgICAgIC8vIG4gaXMgMSB0b28gaGlnaCBhYm91dCA1JSBvZiB0aGUgdGltZSwgYW5kIGlzIG5vdCBrbm93biB0byBoYXZlXHJcbiAgICAgICAgICAgICAgICAvLyBldmVyIGJlZW4gbW9yZSB0aGFuIDEgdG9vIGhpZ2guXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY29tcGFyZShwcm9kLCByZW0sIHByb2RMLCByZW1MKSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIG4tLTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSBwcm9kdWN0LlxyXG4gICAgICAgICAgICAgICAgICBzdWJ0cmFjdChwcm9kLCB5TCA8IHByb2RMID8geXogOiB5YywgcHJvZEwsIGJhc2UpO1xyXG4gICAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICBjbXAgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbiBpcyAwIG9yIDEsIGNtcCBpcyAtMS5cclxuICAgICAgICAgICAgICAgIC8vIElmIG4gaXMgMCwgdGhlcmUgaXMgbm8gbmVlZCB0byBjb21wYXJlIHljIGFuZCByZW0gYWdhaW4gYmVsb3csXHJcbiAgICAgICAgICAgICAgICAvLyBzbyBjaGFuZ2UgY21wIHRvIDEgdG8gYXZvaWQgaXQuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBuIGlzIDEsIGxlYXZlIGNtcCBhcyAtMSwgc28geWMgYW5kIHJlbSBhcmUgY29tcGFyZWQgYWdhaW4uXHJcbiAgICAgICAgICAgICAgICBpZiAobiA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBkaXZpc29yIDwgcmVtYWluZGVyLCBzbyBuIG11c3QgYmUgYXQgbGVhc3QgMS5cclxuICAgICAgICAgICAgICAgICAgY21wID0gbiA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3JcclxuICAgICAgICAgICAgICAgIHByb2QgPSB5Yy5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChwcm9kTCA8IHJlbUwpIHByb2QgPSBbMF0uY29uY2F0KHByb2QpO1xyXG5cclxuICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBwcm9kdWN0IGZyb20gcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgIHN1YnRyYWN0KHJlbSwgcHJvZCwgcmVtTCwgYmFzZSk7XHJcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBJZiBwcm9kdWN0IHdhcyA8IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICBpZiAoY21wID09IC0xKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCBuZXcgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICAgICAgLy8gSWYgZGl2aXNvciA8IG5ldyByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBUcmlhbCBkaWdpdCBuIHRvbyBsb3cuXHJcbiAgICAgICAgICAgICAgICAvLyBuIGlzIDEgdG9vIGxvdyBhYm91dCA1JSBvZiB0aGUgdGltZSwgYW5kIHZlcnkgcmFyZWx5IDIgdG9vIGxvdy5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChjb21wYXJlKHljLCByZW0sIHlMLCByZW1MKSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgbisrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZGl2aXNvciBmcm9tIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICAgICAgc3VidHJhY3QocmVtLCB5TCA8IHJlbUwgPyB5eiA6IHljLCByZW1MLCBiYXNlKTtcclxuICAgICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIG4rKztcclxuICAgICAgICAgICAgICByZW0gPSBbMF07XHJcbiAgICAgICAgICAgIH0gLy8gZWxzZSBjbXAgPT09IDEgYW5kIG4gd2lsbCBiZSAwXHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIG5leHQgZGlnaXQsIG4sIHRvIHRoZSByZXN1bHQgYXJyYXkuXHJcbiAgICAgICAgICAgIHFjW2krK10gPSBuO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgIGlmIChyZW1bMF0pIHtcclxuICAgICAgICAgICAgICByZW1bcmVtTCsrXSA9IHhjW3hpXSB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlbSA9IFt4Y1t4aV1dO1xyXG4gICAgICAgICAgICAgIHJlbUwgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IHdoaWxlICgoeGkrKyA8IHhMIHx8IHJlbVswXSAhPSBudWxsKSAmJiBzLS0pO1xyXG5cclxuICAgICAgICAgIG1vcmUgPSByZW1bMF0gIT0gbnVsbDtcclxuXHJcbiAgICAgICAgICAvLyBMZWFkaW5nIHplcm8/XHJcbiAgICAgICAgICBpZiAoIXFjWzBdKSBxYy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmFzZSA9PSBCQVNFKSB7XHJcblxyXG4gICAgICAgICAgLy8gVG8gY2FsY3VsYXRlIHEuZSwgZmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHFjWzBdLlxyXG4gICAgICAgICAgZm9yIChpID0gMSwgcyA9IHFjWzBdOyBzID49IDEwOyBzIC89IDEwLCBpKyspO1xyXG5cclxuICAgICAgICAgIHJvdW5kKHEsIGRwICsgKHEuZSA9IGkgKyBlICogTE9HX0JBU0UgLSAxKSArIDEsIHJtLCBtb3JlKTtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGVyIGlzIGNvbnZlcnRCYXNlLlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBxLmUgPSBlO1xyXG4gICAgICAgICAgcS5yID0gK21vcmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcTtcclxuICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIgbiBpbiBmaXhlZC1wb2ludCBvciBleHBvbmVudGlhbFxyXG4gICAgICogbm90YXRpb24gcm91bmRlZCB0byB0aGUgc3BlY2lmaWVkIGRlY2ltYWwgcGxhY2VzIG9yIHNpZ25pZmljYW50IGRpZ2l0cy5cclxuICAgICAqXHJcbiAgICAgKiBuOiBhIEJpZ051bWJlci5cclxuICAgICAqIGk6IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBkaWdpdCByZXF1aXJlZCAoaS5lLiB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cCkuXHJcbiAgICAgKiBybTogdGhlIHJvdW5kaW5nIG1vZGUuXHJcbiAgICAgKiBpZDogMSAodG9FeHBvbmVudGlhbCkgb3IgMiAodG9QcmVjaXNpb24pLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmb3JtYXQobiwgaSwgcm0sIGlkKSB7XHJcbiAgICAgIHZhciBjMCwgZSwgbmUsIGxlbiwgc3RyO1xyXG5cclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICBpZiAoIW4uYykgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIGMwID0gbi5jWzBdO1xyXG4gICAgICBuZSA9IG4uZTtcclxuXHJcbiAgICAgIGlmIChpID09IG51bGwpIHtcclxuICAgICAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKG4uYyk7XHJcbiAgICAgICAgc3RyID0gaWQgPT0gMSB8fCBpZCA9PSAyICYmIG5lIDw9IFRPX0VYUF9ORUdcclxuICAgICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgbmUpXHJcbiAgICAgICAgIDogdG9GaXhlZFBvaW50KHN0ciwgbmUsICcwJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbiA9IHJvdW5kKG5ldyBCaWdOdW1iZXIobiksIGksIHJtKTtcclxuXHJcbiAgICAgICAgLy8gbi5lIG1heSBoYXZlIGNoYW5nZWQgaWYgdGhlIHZhbHVlIHdhcyByb3VuZGVkIHVwLlxyXG4gICAgICAgIGUgPSBuLmU7XHJcblxyXG4gICAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyB0b1ByZWNpc2lvbiByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzXHJcbiAgICAgICAgLy8gc3BlY2lmaWVkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBpbnRlZ2VyXHJcbiAgICAgICAgLy8gcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24uXHJcblxyXG4gICAgICAgIC8vIEV4cG9uZW50aWFsIG5vdGF0aW9uLlxyXG4gICAgICAgIGlmIChpZCA9PSAxIHx8IGlkID09IDIgJiYgKGkgPD0gZSB8fCBlIDw9IFRPX0VYUF9ORUcpKSB7XHJcblxyXG4gICAgICAgICAgLy8gQXBwZW5kIHplcm9zP1xyXG4gICAgICAgICAgZm9yICg7IGxlbiA8IGk7IHN0ciArPSAnMCcsIGxlbisrKTtcclxuICAgICAgICAgIHN0ciA9IHRvRXhwb25lbnRpYWwoc3RyLCBlKTtcclxuXHJcbiAgICAgICAgLy8gRml4ZWQtcG9pbnQgbm90YXRpb24uXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGkgLT0gbmU7XHJcbiAgICAgICAgICBzdHIgPSB0b0ZpeGVkUG9pbnQoc3RyLCBlLCAnMCcpO1xyXG5cclxuICAgICAgICAgIC8vIEFwcGVuZCB6ZXJvcz9cclxuICAgICAgICAgIGlmIChlICsgMSA+IGxlbikge1xyXG4gICAgICAgICAgICBpZiAoLS1pID4gMCkgZm9yIChzdHIgKz0gJy4nOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaSArPSBlIC0gbGVuO1xyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICBpZiAoZSArIDEgPT0gbGVuKSBzdHIgKz0gJy4nO1xyXG4gICAgICAgICAgICAgIGZvciAoOyBpLS07IHN0ciArPSAnMCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbi5zIDwgMCAmJiBjMCA/ICctJyArIHN0ciA6IHN0cjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSGFuZGxlIEJpZ051bWJlci5tYXggYW5kIEJpZ051bWJlci5taW4uXHJcbiAgICBmdW5jdGlvbiBtYXhPck1pbihhcmdzLCBtZXRob2QpIHtcclxuICAgICAgdmFyIG4sXHJcbiAgICAgICAgaSA9IDEsXHJcbiAgICAgICAgbSA9IG5ldyBCaWdOdW1iZXIoYXJnc1swXSk7XHJcblxyXG4gICAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBuID0gbmV3IEJpZ051bWJlcihhcmdzW2ldKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYW55IG51bWJlciBpcyBOYU4sIHJldHVybiBOYU4uXHJcbiAgICAgICAgaWYgKCFuLnMpIHtcclxuICAgICAgICAgIG0gPSBuO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QuY2FsbChtLCBuKSkge1xyXG4gICAgICAgICAgbSA9IG47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFN0cmlwIHRyYWlsaW5nIHplcm9zLCBjYWxjdWxhdGUgYmFzZSAxMCBleHBvbmVudCBhbmQgY2hlY2sgYWdhaW5zdCBNSU5fRVhQIGFuZCBNQVhfRVhQLlxyXG4gICAgICogQ2FsbGVkIGJ5IG1pbnVzLCBwbHVzIGFuZCB0aW1lcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbm9ybWFsaXNlKG4sIGMsIGUpIHtcclxuICAgICAgdmFyIGkgPSAxLFxyXG4gICAgICAgIGogPSBjLmxlbmd0aDtcclxuXHJcbiAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgIGZvciAoOyAhY1stLWpdOyBjLnBvcCgpKTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYmFzZSAxMCBleHBvbmVudC4gRmlyc3QgZ2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIGNbMF0uXHJcbiAgICAgIGZvciAoaiA9IGNbMF07IGogPj0gMTA7IGogLz0gMTAsIGkrKyk7XHJcblxyXG4gICAgICAvLyBPdmVyZmxvdz9cclxuICAgICAgaWYgKChlID0gaSArIGUgKiBMT0dfQkFTRSAtIDEpID4gTUFYX0VYUCkge1xyXG5cclxuICAgICAgICAvLyBJbmZpbml0eS5cclxuICAgICAgICBuLmMgPSBuLmUgPSBudWxsO1xyXG5cclxuICAgICAgLy8gVW5kZXJmbG93P1xyXG4gICAgICB9IGVsc2UgaWYgKGUgPCBNSU5fRVhQKSB7XHJcblxyXG4gICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgbi5jID0gW24uZSA9IDBdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG4uZSA9IGU7XHJcbiAgICAgICAgbi5jID0gYztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEhhbmRsZSB2YWx1ZXMgdGhhdCBmYWlsIHRoZSB2YWxpZGl0eSB0ZXN0IGluIEJpZ051bWJlci5cclxuICAgIHBhcnNlTnVtZXJpYyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaSxcclxuICAgICAgICBkb3RBZnRlciA9IC9eKFteLl0rKVxcLiQvLFxyXG4gICAgICAgIGRvdEJlZm9yZSA9IC9eXFwuKFteLl0rKSQvLFxyXG4gICAgICAgIGlzSW5maW5pdHlPck5hTiA9IC9eLT8oSW5maW5pdHl8TmFOKSQvLFxyXG4gICAgICAgIHdoaXRlc3BhY2VPclBsdXMgPSAvXlxccypcXCsoPz1bXFx3Ll0pfF5cXHMrfFxccyskL2c7XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgsIHN0ciwgaXNOdW0sIGIpIHtcclxuICAgICAgICB2YXIgYmFzZSxcclxuICAgICAgICAgIHMgPSBpc051bSA/IHN0ciA6IHN0ci5yZXBsYWNlKHdoaXRlc3BhY2VPclBsdXMsICcnKTtcclxuXHJcbiAgICAgICAgLy8gTm8gZXhjZXB0aW9uIG9uIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICAgIGlmIChpc0luZmluaXR5T3JOYU4udGVzdChzKSkge1xyXG4gICAgICAgICAgeC5zID0gaXNOYU4ocykgPyBudWxsIDogcyA8IDAgPyAtMSA6IDE7XHJcbiAgICAgICAgICB4LmMgPSB4LmUgPSBudWxsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoIWlzTnVtKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaVxyXG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKGJhc2VQcmVmaXgsIGZ1bmN0aW9uIChtLCBwMSwgcDIpIHtcclxuICAgICAgICAgICAgICBiYXNlID0gKHAyID0gcDIudG9Mb3dlckNhc2UoKSkgPT0gJ3gnID8gMTYgOiBwMiA9PSAnYicgPyAyIDogODtcclxuICAgICAgICAgICAgICByZXR1cm4gIWIgfHwgYiA9PSBiYXNlID8gcDEgOiBtO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChiKSB7XHJcbiAgICAgICAgICAgICAgYmFzZSA9IGI7XHJcblxyXG4gICAgICAgICAgICAgIC8vIEUuZy4gJzEuJyB0byAnMScsICcuMScgdG8gJzAuMSdcclxuICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlKGRvdEFmdGVyLCAnJDEnKS5yZXBsYWNlKGRvdEJlZm9yZSwgJzAuJDEnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHN0ciAhPSBzKSByZXR1cm4gbmV3IEJpZ051bWJlcihzLCBiYXNlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgICAvLyAnW0JpZ051bWJlciBFcnJvcl0gTm90IGEgYmFzZSB7Yn0gbnVtYmVyOiB7bn0nXHJcbiAgICAgICAgICBpZiAoQmlnTnVtYmVyLkRFQlVHKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgICAgKGJpZ251bWJlckVycm9yICsgJ05vdCBhJyArIChiID8gJyBiYXNlICcgKyBiIDogJycpICsgJyBudW1iZXI6ICcgKyBzdHIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIE5hTlxyXG4gICAgICAgICAgeC5jID0geC5lID0geC5zID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSb3VuZCB4IHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLiBDaGVjayBmb3Igb3Zlci91bmRlci1mbG93LlxyXG4gICAgICogSWYgciBpcyB0cnV0aHksIGl0IGlzIGtub3duIHRoYXQgdGhlcmUgYXJlIG1vcmUgZGlnaXRzIGFmdGVyIHRoZSByb3VuZGluZyBkaWdpdC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcm91bmQoeCwgc2QsIHJtLCByKSB7XHJcbiAgICAgIHZhciBkLCBpLCBqLCBrLCBuLCBuaSwgcmQsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgcG93czEwID0gUE9XU19URU47XHJcblxyXG4gICAgICAvLyBpZiB4IGlzIG5vdCBJbmZpbml0eSBvciBOYU4uLi5cclxuICAgICAgaWYgKHhjKSB7XHJcblxyXG4gICAgICAgIC8vIHJkIGlzIHRoZSByb3VuZGluZyBkaWdpdCwgaS5lLiB0aGUgZGlnaXQgYWZ0ZXIgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgLy8gbiBpcyBhIGJhc2UgMWUxNCBudW1iZXIsIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBvZiBhcnJheSB4LmMgY29udGFpbmluZyByZC5cclxuICAgICAgICAvLyBuaSBpcyB0aGUgaW5kZXggb2YgbiB3aXRoaW4geC5jLlxyXG4gICAgICAgIC8vIGQgaXMgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAvLyBpIGlzIHRoZSBpbmRleCBvZiByZCB3aXRoaW4gbiBpbmNsdWRpbmcgbGVhZGluZyB6ZXJvcy5cclxuICAgICAgICAvLyBqIGlzIHRoZSBhY3R1YWwgaW5kZXggb2YgcmQgd2l0aGluIG4gKGlmIDwgMCwgcmQgaXMgYSBsZWFkaW5nIHplcm8pLlxyXG4gICAgICAgIG91dDoge1xyXG5cclxuICAgICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiB4Yy5cclxuICAgICAgICAgIGZvciAoZCA9IDEsIGsgPSB4Y1swXTsgayA+PSAxMDsgayAvPSAxMCwgZCsrKTtcclxuICAgICAgICAgIGkgPSBzZCAtIGQ7XHJcblxyXG4gICAgICAgICAgLy8gSWYgdGhlIHJvdW5kaW5nIGRpZ2l0IGlzIGluIHRoZSBmaXJzdCBlbGVtZW50IG9mIHhjLi4uXHJcbiAgICAgICAgICBpZiAoaSA8IDApIHtcclxuICAgICAgICAgICAgaSArPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgaiA9IHNkO1xyXG4gICAgICAgICAgICBuID0geGNbbmkgPSAwXTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcm91bmRpbmcgZGlnaXQgYXQgaW5kZXggaiBvZiBuLlxyXG4gICAgICAgICAgICByZCA9IG4gLyBwb3dzMTBbZCAtIGogLSAxXSAlIDEwIHwgMDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5pID0gbWF0aGNlaWwoKGkgKyAxKSAvIExPR19CQVNFKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuaSA+PSB4Yy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkZWQgYnkgc3FydC5cclxuICAgICAgICAgICAgICAgIGZvciAoOyB4Yy5sZW5ndGggPD0gbmk7IHhjLnB1c2goMCkpO1xyXG4gICAgICAgICAgICAgICAgbiA9IHJkID0gMDtcclxuICAgICAgICAgICAgICAgIGQgPSAxO1xyXG4gICAgICAgICAgICAgICAgaSAlPSBMT0dfQkFTRTtcclxuICAgICAgICAgICAgICAgIGogPSBpIC0gTE9HX0JBU0UgKyAxO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhayBvdXQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIG4gPSBrID0geGNbbmldO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2Ygbi5cclxuICAgICAgICAgICAgICBmb3IgKGQgPSAxOyBrID49IDEwOyBrIC89IDEwLCBkKyspO1xyXG5cclxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHJkIHdpdGhpbiBuLlxyXG4gICAgICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XHJcblxyXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIG4sIGFkanVzdGVkIGZvciBsZWFkaW5nIHplcm9zLlxyXG4gICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyBvZiBuIGlzIGdpdmVuIGJ5IExPR19CQVNFIC0gZC5cclxuICAgICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgZDtcclxuXHJcbiAgICAgICAgICAgICAgLy8gR2V0IHRoZSByb3VuZGluZyBkaWdpdCBhdCBpbmRleCBqIG9mIG4uXHJcbiAgICAgICAgICAgICAgcmQgPSBqIDwgMCA/IDAgOiBuIC8gcG93czEwW2QgLSBqIC0gMV0gJSAxMCB8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByID0gciB8fCBzZCA8IDAgfHxcclxuXHJcbiAgICAgICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XHJcbiAgICAgICAgICAvLyBUaGUgZXhwcmVzc2lvbiAgbiAlIHBvd3MxMFtkIC0gaiAtIDFdICByZXR1cm5zIGFsbCBkaWdpdHMgb2YgbiB0byB0aGUgcmlnaHRcclxuICAgICAgICAgIC8vIG9mIHRoZSBkaWdpdCBhdCBqLCBlLmcuIGlmIG4gaXMgOTA4NzE0IGFuZCBqIGlzIDIsIHRoZSBleHByZXNzaW9uIGdpdmVzIDcxNC5cclxuICAgICAgICAgICB4Y1tuaSArIDFdICE9IG51bGwgfHwgKGogPCAwID8gbiA6IG4gJSBwb3dzMTBbZCAtIGogLSAxXSk7XHJcblxyXG4gICAgICAgICAgciA9IHJtIDwgNFxyXG4gICAgICAgICAgID8gKHJkIHx8IHIpICYmIChybSA9PSAwIHx8IHJtID09ICh4LnMgPCAwID8gMyA6IDIpKVxyXG4gICAgICAgICAgIDogcmQgPiA1IHx8IHJkID09IDUgJiYgKHJtID09IDQgfHwgciB8fCBybSA9PSA2ICYmXHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBkaWdpdCB0byB0aGUgbGVmdCBvZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgb2RkLlxyXG4gICAgICAgICAgICAoKGkgPiAwID8gaiA+IDAgPyBuIC8gcG93czEwW2QgLSBqXSA6IDAgOiB4Y1tuaSAtIDFdKSAlIDEwKSAmIDEgfHxcclxuICAgICAgICAgICAgIHJtID09ICh4LnMgPCAwID8gOCA6IDcpKTtcclxuXHJcbiAgICAgICAgICBpZiAoc2QgPCAxIHx8ICF4Y1swXSkge1xyXG4gICAgICAgICAgICB4Yy5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gQ29udmVydCBzZCB0byBkZWNpbWFsIHBsYWNlcy5cclxuICAgICAgICAgICAgICBzZCAtPSB4LmUgKyAxO1xyXG5cclxuICAgICAgICAgICAgICAvLyAxLCAwLjEsIDAuMDEsIDAuMDAxLCAwLjAwMDEgZXRjLlxyXG4gICAgICAgICAgICAgIHhjWzBdID0gcG93czEwWyhMT0dfQkFTRSAtIHNkICUgTE9HX0JBU0UpICUgTE9HX0JBU0VdO1xyXG4gICAgICAgICAgICAgIHguZSA9IC1zZCB8fCAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgICAgIHhjWzBdID0geC5lID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGV4Y2VzcyBkaWdpdHMuXHJcbiAgICAgICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pO1xyXG4gICAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgICAgbmktLTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pICsgMTtcclxuICAgICAgICAgICAgayA9IHBvd3MxMFtMT0dfQkFTRSAtIGldO1xyXG5cclxuICAgICAgICAgICAgLy8gRS5nLiA1NjcwMCBiZWNvbWVzIDU2MDAwIGlmIDcgaXMgdGhlIHJvdW5kaW5nIGRpZ2l0LlxyXG4gICAgICAgICAgICAvLyBqID4gMCBtZWFucyBpID4gbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2Ygbi5cclxuICAgICAgICAgICAgeGNbbmldID0gaiA+IDAgPyBtYXRoZmxvb3IobiAvIHBvd3MxMFtkIC0gal0gJSBwb3dzMTBbal0pICogayA6IDA7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUm91bmQgdXA/XHJcbiAgICAgICAgICBpZiAocikge1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IDspIHtcclxuXHJcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGRpZ2l0IHRvIGJlIHJvdW5kZWQgdXAgaXMgaW4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgeGMuLi5cclxuICAgICAgICAgICAgICBpZiAobmkgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGkgd2lsbCBiZSB0aGUgbGVuZ3RoIG9mIHhjWzBdIGJlZm9yZSBrIGlzIGFkZGVkLlxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMSwgaiA9IHhjWzBdOyBqID49IDEwOyBqIC89IDEwLCBpKyspO1xyXG4gICAgICAgICAgICAgICAgaiA9IHhjWzBdICs9IGs7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAxOyBqID49IDEwOyBqIC89IDEwLCBrKyspO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGkgIT0gayB0aGUgbGVuZ3RoIGhhcyBpbmNyZWFzZWQuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSBrKSB7XHJcbiAgICAgICAgICAgICAgICAgIHguZSsrO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoeGNbMF0gPT0gQkFTRSkgeGNbMF0gPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB4Y1tuaV0gKz0gaztcclxuICAgICAgICAgICAgICAgIGlmICh4Y1tuaV0gIT0gQkFTRSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB4Y1tuaS0tXSA9IDA7XHJcbiAgICAgICAgICAgICAgICBrID0gMTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICBmb3IgKGkgPSB4Yy5sZW5ndGg7IHhjWy0taV0gPT09IDA7IHhjLnBvcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE92ZXJmbG93PyBJbmZpbml0eS5cclxuICAgICAgICBpZiAoeC5lID4gTUFYX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0geC5lID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gVW5kZXJmbG93PyBaZXJvLlxyXG4gICAgICAgIH0gZWxzZSBpZiAoeC5lIDwgTUlOX0VYUCkge1xyXG4gICAgICAgICAgeC5jID0gW3guZSA9IDBdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbHVlT2Yobikge1xyXG4gICAgICB2YXIgc3RyLFxyXG4gICAgICAgIGUgPSBuLmU7XHJcblxyXG4gICAgICBpZiAoZSA9PT0gbnVsbCkgcmV0dXJuIG4udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcobi5jKTtcclxuXHJcbiAgICAgIHN0ciA9IGUgPD0gVE9fRVhQX05FRyB8fCBlID49IFRPX0VYUF9QT1NcclxuICAgICAgICA/IHRvRXhwb25lbnRpYWwoc3RyLCBlKVxyXG4gICAgICAgIDogdG9GaXhlZFBvaW50KHN0ciwgZSwgJzAnKTtcclxuXHJcbiAgICAgIHJldHVybiBuLnMgPCAwID8gJy0nICsgc3RyIDogc3RyO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBQUk9UT1RZUEUvSU5TVEFOQ0UgTUVUSE9EU1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIuXHJcbiAgICAgKi9cclxuICAgIFAuYWJzb2x1dGVWYWx1ZSA9IFAuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgeCA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XHJcbiAgICAgIGlmICh4LnMgPCAwKSB4LnMgPSAxO1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm5cclxuICAgICAqICAgMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICAgKiAgIC0xIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcclxuICAgICAqICAgMCBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUsXHJcbiAgICAgKiAgIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIGVpdGhlciBpcyBOYU4uXHJcbiAgICAgKi9cclxuICAgIFAuY29tcGFyZWRUbyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIElmIGRwIGlzIHVuZGVmaW5lZCBvciBudWxsIG9yIHRydWUgb3IgZmFsc2UsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9mIHRoZVxyXG4gICAgICogdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICpcclxuICAgICAqIE90aGVyd2lzZSwgaWYgZHAgaXMgYSBudW1iZXIsIHJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXNcclxuICAgICAqIEJpZ051bWJlciByb3VuZGVkIHRvIGEgbWF4aW11bSBvZiBkcCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAgICogUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXM6IGludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfHJtfSdcclxuICAgICAqL1xyXG4gICAgUC5kZWNpbWFsUGxhY2VzID0gUC5kcCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgdmFyIGMsIG4sIHYsXHJcbiAgICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICAgIGlmIChybSA9PSBudWxsKSBybSA9IFJPVU5ESU5HX01PREU7XHJcbiAgICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3VuZChuZXcgQmlnTnVtYmVyKHgpLCBkcCArIHguZSArIDEsIHJtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCEoYyA9IHguYykpIHJldHVybiBudWxsO1xyXG4gICAgICBuID0gKCh2ID0gYy5sZW5ndGggLSAxKSAtIGJpdEZsb29yKHRoaXMuZSAvIExPR19CQVNFKSkgKiBMT0dfQkFTRTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3QgbnVtYmVyLlxyXG4gICAgICBpZiAodiA9IGNbdl0pIGZvciAoOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tKTtcclxuICAgICAgaWYgKG4gPCAwKSBuID0gMDtcclxuXHJcbiAgICAgIHJldHVybiBuO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuIC8gMCA9IElcclxuICAgICAqICBuIC8gTiA9IE5cclxuICAgICAqICBuIC8gSSA9IDBcclxuICAgICAqICAwIC8gbiA9IDBcclxuICAgICAqICAwIC8gMCA9IE5cclxuICAgICAqICAwIC8gTiA9IE5cclxuICAgICAqICAwIC8gSSA9IDBcclxuICAgICAqICBOIC8gbiA9IE5cclxuICAgICAqICBOIC8gMCA9IE5cclxuICAgICAqICBOIC8gTiA9IE5cclxuICAgICAqICBOIC8gSSA9IE5cclxuICAgICAqICBJIC8gbiA9IElcclxuICAgICAqICBJIC8gMCA9IElcclxuICAgICAqICBJIC8gTiA9IE5cclxuICAgICAqICBJIC8gSSA9IE5cclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBkaXZpZGVkIGJ5IHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLCByb3VuZGVkIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmQgUk9VTkRJTkdfTU9ERS5cclxuICAgICAqL1xyXG4gICAgUC5kaXZpZGVkQnkgPSBQLmRpdiA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBkaXYodGhpcywgbmV3IEJpZ051bWJlcih5LCBiKSwgREVDSU1BTF9QTEFDRVMsIFJPVU5ESU5HX01PREUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIGludGVnZXIgcGFydCBvZiBkaXZpZGluZyB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAgICogQmlnTnVtYmVyIGJ5IHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYikuXHJcbiAgICAgKi9cclxuICAgIFAuZGl2aWRlZFRvSW50ZWdlckJ5ID0gUC5pZGl2ID0gZnVuY3Rpb24gKHksIGIpIHtcclxuICAgICAgcmV0dXJuIGRpdih0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpLCAwLCAxKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGV4cG9uZW50aWF0ZWQgYnkgbi5cclxuICAgICAqXHJcbiAgICAgKiBJZiBtIGlzIHByZXNlbnQsIHJldHVybiB0aGUgcmVzdWx0IG1vZHVsbyBtLlxyXG4gICAgICogSWYgbiBpcyBuZWdhdGl2ZSByb3VuZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKiBJZiBQT1dfUFJFQ0lTSU9OIGlzIG5vbi16ZXJvIGFuZCBtIGlzIG5vdCBwcmVzZW50LCByb3VuZCB0byBQT1dfUFJFQ0lTSU9OIHVzaW5nIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIG1vZHVsYXIgcG93ZXIgb3BlcmF0aW9uIHdvcmtzIGVmZmljaWVudGx5IHdoZW4geCwgbiwgYW5kIG0gYXJlIGludGVnZXJzLCBvdGhlcndpc2UgaXRcclxuICAgICAqIGlzIGVxdWl2YWxlbnQgdG8gY2FsY3VsYXRpbmcgeC5leHBvbmVudGlhdGVkQnkobikubW9kdWxvKG0pIHdpdGggYSBQT1dfUFJFQ0lTSU9OIG9mIDAuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBleHBvbmVudC4gQW4gaW50ZWdlci5cclxuICAgICAqIFttXSB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IFRoZSBtb2R1bHVzLlxyXG4gICAgICpcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBFeHBvbmVudCBub3QgYW4gaW50ZWdlcjoge259J1xyXG4gICAgICovXHJcbiAgICBQLmV4cG9uZW50aWF0ZWRCeSA9IFAucG93ID0gZnVuY3Rpb24gKG4sIG0pIHtcclxuICAgICAgdmFyIGhhbGYsIGlzTW9kRXhwLCBpLCBrLCBtb3JlLCBuSXNCaWcsIG5Jc05lZywgbklzT2RkLCB5LFxyXG4gICAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobik7XHJcblxyXG4gICAgICAvLyBBbGxvdyBOYU4gYW5kIMKxSW5maW5pdHksIGJ1dCBub3Qgb3RoZXIgbm9uLWludGVnZXJzLlxyXG4gICAgICBpZiAobi5jICYmICFuLmlzSW50ZWdlcigpKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdFeHBvbmVudCBub3QgYW4gaW50ZWdlcjogJyArIHZhbHVlT2YobikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobSAhPSBudWxsKSBtID0gbmV3IEJpZ051bWJlcihtKTtcclxuXHJcbiAgICAgIC8vIEV4cG9uZW50IG9mIE1BWF9TQUZFX0lOVEVHRVIgaXMgMTUuXHJcbiAgICAgIG5Jc0JpZyA9IG4uZSA+IDE0O1xyXG5cclxuICAgICAgLy8gSWYgeCBpcyBOYU4sIMKxSW5maW5pdHksIMKxMCBvciDCsTEsIG9yIG4gaXMgwrFJbmZpbml0eSwgTmFOIG9yIMKxMC5cclxuICAgICAgaWYgKCF4LmMgfHwgIXguY1swXSB8fCB4LmNbMF0gPT0gMSAmJiAheC5lICYmIHguYy5sZW5ndGggPT0gMSB8fCAhbi5jIHx8ICFuLmNbMF0pIHtcclxuXHJcbiAgICAgICAgLy8gVGhlIHNpZ24gb2YgdGhlIHJlc3VsdCBvZiBwb3cgd2hlbiB4IGlzIG5lZ2F0aXZlIGRlcGVuZHMgb24gdGhlIGV2ZW5uZXNzIG9mIG4uXHJcbiAgICAgICAgLy8gSWYgK24gb3ZlcmZsb3dzIHRvIMKxSW5maW5pdHksIHRoZSBldmVubmVzcyBvZiBuIHdvdWxkIGJlIG5vdCBiZSBrbm93bi5cclxuICAgICAgICB5ID0gbmV3IEJpZ051bWJlcihNYXRoLnBvdygrdmFsdWVPZih4KSwgbklzQmlnID8gMiAtIGlzT2RkKG4pIDogK3ZhbHVlT2YobikpKTtcclxuICAgICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogeTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbklzTmVnID0gbi5zIDwgMDtcclxuXHJcbiAgICAgIGlmIChtKSB7XHJcblxyXG4gICAgICAgIC8vIHggJSBtIHJldHVybnMgTmFOIGlmIGFicyhtKSBpcyB6ZXJvLCBvciBtIGlzIE5hTi5cclxuICAgICAgICBpZiAobS5jID8gIW0uY1swXSA6ICFtLnMpIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgICAgIGlzTW9kRXhwID0gIW5Jc05lZyAmJiB4LmlzSW50ZWdlcigpICYmIG0uaXNJbnRlZ2VyKCk7XHJcblxyXG4gICAgICAgIGlmIChpc01vZEV4cCkgeCA9IHgubW9kKG0pO1xyXG5cclxuICAgICAgLy8gT3ZlcmZsb3cgdG8gwrFJbmZpbml0eTogPj0yKioxZTEwIG9yID49MS4wMDAwMDI0KioxZTE1LlxyXG4gICAgICAvLyBVbmRlcmZsb3cgdG8gwrEwOiA8PTAuNzkqKjFlMTAgb3IgPD0wLjk5OTk5NzUqKjFlMTUuXHJcbiAgICAgIH0gZWxzZSBpZiAobi5lID4gOSAmJiAoeC5lID4gMCB8fCB4LmUgPCAtMSB8fCAoeC5lID09IDBcclxuICAgICAgICAvLyBbMSwgMjQwMDAwMDAwXVxyXG4gICAgICAgID8geC5jWzBdID4gMSB8fCBuSXNCaWcgJiYgeC5jWzFdID49IDI0ZTdcclxuICAgICAgICAvLyBbODAwMDAwMDAwMDAwMDBdICBbOTk5OTk3NTAwMDAwMDBdXHJcbiAgICAgICAgOiB4LmNbMF0gPCA4ZTEzIHx8IG5Jc0JpZyAmJiB4LmNbMF0gPD0gOTk5OTk3NWU3KSkpIHtcclxuXHJcbiAgICAgICAgLy8gSWYgeCBpcyBuZWdhdGl2ZSBhbmQgbiBpcyBvZGQsIGsgPSAtMCwgZWxzZSBrID0gMC5cclxuICAgICAgICBrID0geC5zIDwgMCAmJiBpc09kZChuKSA/IC0wIDogMDtcclxuXHJcbiAgICAgICAgLy8gSWYgeCA+PSAxLCBrID0gwrFJbmZpbml0eS5cclxuICAgICAgICBpZiAoeC5lID4gLTEpIGsgPSAxIC8gaztcclxuXHJcbiAgICAgICAgLy8gSWYgbiBpcyBuZWdhdGl2ZSByZXR1cm4gwrEwLCBlbHNlIHJldHVybiDCsUluZmluaXR5LlxyXG4gICAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKG5Jc05lZyA/IDEgLyBrIDogayk7XHJcblxyXG4gICAgICB9IGVsc2UgaWYgKFBPV19QUkVDSVNJT04pIHtcclxuXHJcbiAgICAgICAgLy8gVHJ1bmNhdGluZyBlYWNoIGNvZWZmaWNpZW50IGFycmF5IHRvIGEgbGVuZ3RoIG9mIGsgYWZ0ZXIgZWFjaCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIC8vIGVxdWF0ZXMgdG8gdHJ1bmNhdGluZyBzaWduaWZpY2FudCBkaWdpdHMgdG8gUE9XX1BSRUNJU0lPTiArIFsyOCwgNDFdLFxyXG4gICAgICAgIC8vIGkuZS4gdGhlcmUgd2lsbCBiZSBhIG1pbmltdW0gb2YgMjggZ3VhcmQgZGlnaXRzIHJldGFpbmVkLlxyXG4gICAgICAgIGsgPSBtYXRoY2VpbChQT1dfUFJFQ0lTSU9OIC8gTE9HX0JBU0UgKyAyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5Jc0JpZykge1xyXG4gICAgICAgIGhhbGYgPSBuZXcgQmlnTnVtYmVyKDAuNSk7XHJcbiAgICAgICAgaWYgKG5Jc05lZykgbi5zID0gMTtcclxuICAgICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpID0gTWF0aC5hYnMoK3ZhbHVlT2YobikpO1xyXG4gICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB5ID0gbmV3IEJpZ051bWJlcihPTkUpO1xyXG5cclxuICAgICAgLy8gUGVyZm9ybXMgNTQgbG9vcCBpdGVyYXRpb25zIGZvciBuIG9mIDkwMDcxOTkyNTQ3NDA5OTEuXHJcbiAgICAgIGZvciAoOyA7KSB7XHJcblxyXG4gICAgICAgIGlmIChuSXNPZGQpIHtcclxuICAgICAgICAgIHkgPSB5LnRpbWVzKHgpO1xyXG4gICAgICAgICAgaWYgKCF5LmMpIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGlmIChrKSB7XHJcbiAgICAgICAgICAgIGlmICh5LmMubGVuZ3RoID4gaykgeS5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9kRXhwKSB7XHJcbiAgICAgICAgICAgIHkgPSB5Lm1vZChtKTsgICAgLy95ID0geS5taW51cyhkaXYoeSwgbSwgMCwgTU9EVUxPX01PREUpLnRpbWVzKG0pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICBpID0gbWF0aGZsb29yKGkgLyAyKTtcclxuICAgICAgICAgIGlmIChpID09PSAwKSBicmVhaztcclxuICAgICAgICAgIG5Jc09kZCA9IGkgJSAyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuID0gbi50aW1lcyhoYWxmKTtcclxuICAgICAgICAgIHJvdW5kKG4sIG4uZSArIDEsIDEpO1xyXG5cclxuICAgICAgICAgIGlmIChuLmUgPiAxNCkge1xyXG4gICAgICAgICAgICBuSXNPZGQgPSBpc09kZChuKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGkgPSArdmFsdWVPZihuKTtcclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICBuSXNPZGQgPSBpICUgMjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHggPSB4LnRpbWVzKHgpO1xyXG5cclxuICAgICAgICBpZiAoaykge1xyXG4gICAgICAgICAgaWYgKHguYyAmJiB4LmMubGVuZ3RoID4gaykgeC5jLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc01vZEV4cCkge1xyXG4gICAgICAgICAgeCA9IHgubW9kKG0pOyAgICAvL3ggPSB4Lm1pbnVzKGRpdih4LCBtLCAwLCBNT0RVTE9fTU9ERSkudGltZXMobSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzTW9kRXhwKSByZXR1cm4geTtcclxuICAgICAgaWYgKG5Jc05lZykgeSA9IE9ORS5kaXYoeSk7XHJcblxyXG4gICAgICByZXR1cm4gbSA/IHkubW9kKG0pIDogayA/IHJvdW5kKHksIFBPV19QUkVDSVNJT04sIFJPVU5ESU5HX01PREUsIG1vcmUpIDogeTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIGFuIGludGVnZXJcclxuICAgICAqIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIFJPVU5ESU5HX01PREUgaWYgcm0gaXMgb21pdHRlZC5cclxuICAgICAqXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtybX0nXHJcbiAgICAgKi9cclxuICAgIFAuaW50ZWdlclZhbHVlID0gZnVuY3Rpb24gKHJtKSB7XHJcbiAgICAgIHZhciBuID0gbmV3IEJpZ051bWJlcih0aGlzKTtcclxuICAgICAgaWYgKHJtID09IG51bGwpIHJtID0gUk9VTkRJTkdfTU9ERTtcclxuICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcbiAgICAgIHJldHVybiByb3VuZChuLCBuLmUgKyAxLCBybSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXHJcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzRXF1YWxUbyA9IFAuZXEgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZSh0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpKSA9PT0gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgYSBmaW5pdGUgbnVtYmVyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzRmluaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gISF0aGlzLmM7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyKHksIGIpLFxyXG4gICAgICogb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5pc0dyZWF0ZXJUaGFuID0gUC5ndCA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpID4gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzR3JlYXRlclRoYW5PckVxdWFsVG8gPSBQLmd0ZSA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHJldHVybiAoYiA9IGNvbXBhcmUodGhpcywgbmV3IEJpZ051bWJlcih5LCBiKSkpID09PSAxIHx8IGIgPT09IDA7XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBhbiBpbnRlZ2VyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzSW50ZWdlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICEhdGhpcy5jICYmIGJpdEZsb29yKHRoaXMuZSAvIExPR19CQVNFKSA+IHRoaXMuYy5sZW5ndGggLSAyO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcclxuICAgICAqIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuaXNMZXNzVGhhbiA9IFAubHQgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZSh0aGlzLCBuZXcgQmlnTnVtYmVyKHksIGIpKSA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5pc0xlc3NUaGFuT3JFcXVhbFRvID0gUC5sdGUgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICByZXR1cm4gKGIgPSBjb21wYXJlKHRoaXMsIG5ldyBCaWdOdW1iZXIoeSwgYikpKSA9PT0gLTEgfHwgYiA9PT0gMDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgTmFOLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzTmFOID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gIXRoaXMucztcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbmVnYXRpdmUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucyA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIHBvc2l0aXZlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnMgPiAwO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyAwIG9yIC0wLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICEhdGhpcy5jICYmIHRoaXMuY1swXSA9PSAwO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuIC0gMCA9IG5cclxuICAgICAqICBuIC0gTiA9IE5cclxuICAgICAqICBuIC0gSSA9IC1JXHJcbiAgICAgKiAgMCAtIG4gPSAtblxyXG4gICAgICogIDAgLSAwID0gMFxyXG4gICAgICogIDAgLSBOID0gTlxyXG4gICAgICogIDAgLSBJID0gLUlcclxuICAgICAqICBOIC0gbiA9IE5cclxuICAgICAqICBOIC0gMCA9IE5cclxuICAgICAqICBOIC0gTiA9IE5cclxuICAgICAqICBOIC0gSSA9IE5cclxuICAgICAqICBJIC0gbiA9IElcclxuICAgICAqICBJIC0gMCA9IElcclxuICAgICAqICBJIC0gTiA9IE5cclxuICAgICAqICBJIC0gSSA9IE5cclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBtaW51cyB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKS5cclxuICAgICAqL1xyXG4gICAgUC5taW51cyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBpLCBqLCB0LCB4TFR5LFxyXG4gICAgICAgIHggPSB0aGlzLFxyXG4gICAgICAgIGEgPSB4LnM7XHJcblxyXG4gICAgICB5ID0gbmV3IEJpZ051bWJlcih5LCBiKTtcclxuICAgICAgYiA9IHkucztcclxuXHJcbiAgICAgIC8vIEVpdGhlciBOYU4/XHJcbiAgICAgIGlmICghYSB8fCAhYikgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgICAgaWYgKGEgIT0gYikge1xyXG4gICAgICAgIHkucyA9IC1iO1xyXG4gICAgICAgIHJldHVybiB4LnBsdXMoeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxyXG4gICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgSW5maW5pdHk/XHJcbiAgICAgICAgaWYgKCF4YyB8fCAheWMpIHJldHVybiB4YyA/ICh5LnMgPSAtYiwgeSkgOiBuZXcgQmlnTnVtYmVyKHljID8geCA6IE5hTik7XHJcblxyXG4gICAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICAgIGlmICgheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgICAgLy8gUmV0dXJuIHkgaWYgeSBpcyBub24temVybywgeCBpZiB4IGlzIG5vbi16ZXJvLCBvciB6ZXJvIGlmIGJvdGggYXJlIHplcm8uXHJcbiAgICAgICAgICByZXR1cm4geWNbMF0gPyAoeS5zID0gLWIsIHkpIDogbmV3IEJpZ051bWJlcih4Y1swXSA/IHggOlxyXG5cclxuICAgICAgICAgICAvLyBJRUVFIDc1NCAoMjAwOCkgNi4zOiBuIC0gbiA9IC0wIHdoZW4gcm91bmRpbmcgdG8gLUluZmluaXR5XHJcbiAgICAgICAgICAgUk9VTkRJTkdfTU9ERSA9PSAzID8gLTAgOiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHhlID0gYml0Rmxvb3IoeGUpO1xyXG4gICAgICB5ZSA9IGJpdEZsb29yKHllKTtcclxuICAgICAgeGMgPSB4Yy5zbGljZSgpO1xyXG5cclxuICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGlzIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG4gICAgICBpZiAoYSA9IHhlIC0geWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHhMVHkgPSBhIDwgMCkge1xyXG4gICAgICAgICAgYSA9IC1hO1xyXG4gICAgICAgICAgdCA9IHhjO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdC5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLlxyXG4gICAgICAgIGZvciAoYiA9IGE7IGItLTsgdC5wdXNoKDApKTtcclxuICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRzIGVxdWFsLiBDaGVjayBkaWdpdCBieSBkaWdpdC5cclxuICAgICAgICBqID0gKHhMVHkgPSAoYSA9IHhjLmxlbmd0aCkgPCAoYiA9IHljLmxlbmd0aCkpID8gYSA6IGI7XHJcblxyXG4gICAgICAgIGZvciAoYSA9IGIgPSAwOyBiIDwgajsgYisrKSB7XHJcblxyXG4gICAgICAgICAgaWYgKHhjW2JdICE9IHljW2JdKSB7XHJcbiAgICAgICAgICAgIHhMVHkgPSB4Y1tiXSA8IHljW2JdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHggPCB5PyBQb2ludCB4YyB0byB0aGUgYXJyYXkgb2YgdGhlIGJpZ2dlciBudW1iZXIuXHJcbiAgICAgIGlmICh4TFR5KSB0ID0geGMsIHhjID0geWMsIHljID0gdCwgeS5zID0gLXkucztcclxuXHJcbiAgICAgIGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCk7XHJcblxyXG4gICAgICAvLyBBcHBlbmQgemVyb3MgdG8geGMgaWYgc2hvcnRlci5cclxuICAgICAgLy8gTm8gbmVlZCB0byBhZGQgemVyb3MgdG8geWMgaWYgc2hvcnRlciBhcyBzdWJ0cmFjdCBvbmx5IG5lZWRzIHRvIHN0YXJ0IGF0IHljLmxlbmd0aC5cclxuICAgICAgaWYgKGIgPiAwKSBmb3IgKDsgYi0tOyB4Y1tpKytdID0gMCk7XHJcbiAgICAgIGIgPSBCQVNFIC0gMTtcclxuXHJcbiAgICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuXHJcbiAgICAgIGZvciAoOyBqID4gYTspIHtcclxuXHJcbiAgICAgICAgaWYgKHhjWy0tal0gPCB5Y1tqXSkge1xyXG4gICAgICAgICAgZm9yIChpID0gajsgaSAmJiAheGNbLS1pXTsgeGNbaV0gPSBiKTtcclxuICAgICAgICAgIC0teGNbaV07XHJcbiAgICAgICAgICB4Y1tqXSArPSBCQVNFO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeGNbal0gLT0geWNbal07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuXHJcbiAgICAgIGZvciAoOyB4Y1swXSA9PSAwOyB4Yy5zcGxpY2UoMCwgMSksIC0teWUpO1xyXG5cclxuICAgICAgLy8gWmVybz9cclxuICAgICAgaWYgKCF4Y1swXSkge1xyXG5cclxuICAgICAgICAvLyBGb2xsb3dpbmcgSUVFRSA3NTQgKDIwMDgpIDYuMyxcclxuICAgICAgICAvLyBuIC0gbiA9ICswICBidXQgIG4gLSBuID0gLTAgIHdoZW4gcm91bmRpbmcgdG93YXJkcyAtSW5maW5pdHkuXHJcbiAgICAgICAgeS5zID0gUk9VTkRJTkdfTU9ERSA9PSAzID8gLTEgOiAxO1xyXG4gICAgICAgIHkuYyA9IFt5LmUgPSAwXTtcclxuICAgICAgICByZXR1cm4geTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgSW5maW5pdHkgYXMgK3ggLSAreSAhPSBJbmZpbml0eSAmJiAteCAtIC15ICE9IEluZmluaXR5XHJcbiAgICAgIC8vIGZvciBmaW5pdGUgeCBhbmQgeS5cclxuICAgICAgcmV0dXJuIG5vcm1hbGlzZSh5LCB4YywgeWUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICAgbiAlIDAgPSAgTlxyXG4gICAgICogICBuICUgTiA9ICBOXHJcbiAgICAgKiAgIG4gJSBJID0gIG5cclxuICAgICAqICAgMCAlIG4gPSAgMFxyXG4gICAgICogIC0wICUgbiA9IC0wXHJcbiAgICAgKiAgIDAgJSAwID0gIE5cclxuICAgICAqICAgMCAlIE4gPSAgTlxyXG4gICAgICogICAwICUgSSA9ICAwXHJcbiAgICAgKiAgIE4gJSBuID0gIE5cclxuICAgICAqICAgTiAlIDAgPSAgTlxyXG4gICAgICogICBOICUgTiA9ICBOXHJcbiAgICAgKiAgIE4gJSBJID0gIE5cclxuICAgICAqICAgSSAlIG4gPSAgTlxyXG4gICAgICogICBJICUgMCA9ICBOXHJcbiAgICAgKiAgIEkgJSBOID0gIE5cclxuICAgICAqICAgSSAlIEkgPSAgTlxyXG4gICAgICpcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG1vZHVsbyB0aGUgdmFsdWUgb2ZcclxuICAgICAqIEJpZ051bWJlcih5LCBiKS4gVGhlIHJlc3VsdCBkZXBlbmRzIG9uIHRoZSB2YWx1ZSBvZiBNT0RVTE9fTU9ERS5cclxuICAgICAqL1xyXG4gICAgUC5tb2R1bG8gPSBQLm1vZCA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBxLCBzLFxyXG4gICAgICAgIHggPSB0aGlzO1xyXG5cclxuICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoeSwgYik7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gTmFOIGlmIHggaXMgSW5maW5pdHkgb3IgTmFOLCBvciB5IGlzIE5hTiBvciB6ZXJvLlxyXG4gICAgICBpZiAoIXguYyB8fCAheS5zIHx8IHkuYyAmJiAheS5jWzBdKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoTmFOKTtcclxuXHJcbiAgICAgIC8vIFJldHVybiB4IGlmIHkgaXMgSW5maW5pdHkgb3IgeCBpcyB6ZXJvLlxyXG4gICAgICB9IGVsc2UgaWYgKCF5LmMgfHwgeC5jICYmICF4LmNbMF0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcih4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKE1PRFVMT19NT0RFID09IDkpIHtcclxuXHJcbiAgICAgICAgLy8gRXVjbGlkaWFuIGRpdmlzaW9uOiBxID0gc2lnbih5KSAqIGZsb29yKHggLyBhYnMoeSkpXHJcbiAgICAgICAgLy8gciA9IHggLSBxeSAgICB3aGVyZSAgMCA8PSByIDwgYWJzKHkpXHJcbiAgICAgICAgcyA9IHkucztcclxuICAgICAgICB5LnMgPSAxO1xyXG4gICAgICAgIHEgPSBkaXYoeCwgeSwgMCwgMyk7XHJcbiAgICAgICAgeS5zID0gcztcclxuICAgICAgICBxLnMgKj0gcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBxID0gZGl2KHgsIHksIDAsIE1PRFVMT19NT0RFKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgeSA9IHgubWludXMocS50aW1lcyh5KSk7XHJcblxyXG4gICAgICAvLyBUbyBtYXRjaCBKYXZhU2NyaXB0ICUsIGVuc3VyZSBzaWduIG9mIHplcm8gaXMgc2lnbiBvZiBkaXZpZGVuZC5cclxuICAgICAgaWYgKCF5LmNbMF0gJiYgTU9EVUxPX01PREUgPT0gMSkgeS5zID0geC5zO1xyXG5cclxuICAgICAgcmV0dXJuIHk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogIG4gKiAwID0gMFxyXG4gICAgICogIG4gKiBOID0gTlxyXG4gICAgICogIG4gKiBJID0gSVxyXG4gICAgICogIDAgKiBuID0gMFxyXG4gICAgICogIDAgKiAwID0gMFxyXG4gICAgICogIDAgKiBOID0gTlxyXG4gICAgICogIDAgKiBJID0gTlxyXG4gICAgICogIE4gKiBuID0gTlxyXG4gICAgICogIE4gKiAwID0gTlxyXG4gICAgICogIE4gKiBOID0gTlxyXG4gICAgICogIE4gKiBJID0gTlxyXG4gICAgICogIEkgKiBuID0gSVxyXG4gICAgICogIEkgKiAwID0gTlxyXG4gICAgICogIEkgKiBOID0gTlxyXG4gICAgICogIEkgKiBJID0gSVxyXG4gICAgICpcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG11bHRpcGxpZWQgYnkgdGhlIHZhbHVlXHJcbiAgICAgKiBvZiBCaWdOdW1iZXIoeSwgYikuXHJcbiAgICAgKi9cclxuICAgIFAubXVsdGlwbGllZEJ5ID0gUC50aW1lcyA9IGZ1bmN0aW9uICh5LCBiKSB7XHJcbiAgICAgIHZhciBjLCBlLCBpLCBqLCBrLCBtLCB4Y0wsIHhsbywgeGhpLCB5Y0wsIHlsbywgeWhpLCB6YyxcclxuICAgICAgICBiYXNlLCBzcXJ0QmFzZSxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICB5YyA9ICh5ID0gbmV3IEJpZ051bWJlcih5LCBiKSkuYztcclxuXHJcbiAgICAgIC8vIEVpdGhlciBOYU4sIMKxSW5maW5pdHkgb3IgwrEwP1xyXG4gICAgICBpZiAoIXhjIHx8ICF5YyB8fCAheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBOYU4gaWYgZWl0aGVyIGlzIE5hTiwgb3Igb25lIGlzIDAgYW5kIHRoZSBvdGhlciBpcyBJbmZpbml0eS5cclxuICAgICAgICBpZiAoIXgucyB8fCAheS5zIHx8IHhjICYmICF4Y1swXSAmJiAheWMgfHwgeWMgJiYgIXljWzBdICYmICF4Yykge1xyXG4gICAgICAgICAgeS5jID0geS5lID0geS5zID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeS5zICo9IHgucztcclxuXHJcbiAgICAgICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgaXMgwrFJbmZpbml0eS5cclxuICAgICAgICAgIGlmICgheGMgfHwgIXljKSB7XHJcbiAgICAgICAgICAgIHkuYyA9IHkuZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgLy8gUmV0dXJuIMKxMCBpZiBlaXRoZXIgaXMgwrEwLlxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeS5jID0gWzBdO1xyXG4gICAgICAgICAgICB5LmUgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGUgPSBiaXRGbG9vcih4LmUgLyBMT0dfQkFTRSkgKyBiaXRGbG9vcih5LmUgLyBMT0dfQkFTRSk7XHJcbiAgICAgIHkucyAqPSB4LnM7XHJcbiAgICAgIHhjTCA9IHhjLmxlbmd0aDtcclxuICAgICAgeWNMID0geWMubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gRW5zdXJlIHhjIHBvaW50cyB0byBsb25nZXIgYXJyYXkgYW5kIHhjTCB0byBpdHMgbGVuZ3RoLlxyXG4gICAgICBpZiAoeGNMIDwgeWNMKSB6YyA9IHhjLCB4YyA9IHljLCB5YyA9IHpjLCBpID0geGNMLCB4Y0wgPSB5Y0wsIHljTCA9IGk7XHJcblxyXG4gICAgICAvLyBJbml0aWFsaXNlIHRoZSByZXN1bHQgYXJyYXkgd2l0aCB6ZXJvcy5cclxuICAgICAgZm9yIChpID0geGNMICsgeWNMLCB6YyA9IFtdOyBpLS07IHpjLnB1c2goMCkpO1xyXG5cclxuICAgICAgYmFzZSA9IEJBU0U7XHJcbiAgICAgIHNxcnRCYXNlID0gU1FSVF9CQVNFO1xyXG5cclxuICAgICAgZm9yIChpID0geWNMOyAtLWkgPj0gMDspIHtcclxuICAgICAgICBjID0gMDtcclxuICAgICAgICB5bG8gPSB5Y1tpXSAlIHNxcnRCYXNlO1xyXG4gICAgICAgIHloaSA9IHljW2ldIC8gc3FydEJhc2UgfCAwO1xyXG5cclxuICAgICAgICBmb3IgKGsgPSB4Y0wsIGogPSBpICsgazsgaiA+IGk7KSB7XHJcbiAgICAgICAgICB4bG8gPSB4Y1stLWtdICUgc3FydEJhc2U7XHJcbiAgICAgICAgICB4aGkgPSB4Y1trXSAvIHNxcnRCYXNlIHwgMDtcclxuICAgICAgICAgIG0gPSB5aGkgKiB4bG8gKyB4aGkgKiB5bG87XHJcbiAgICAgICAgICB4bG8gPSB5bG8gKiB4bG8gKyAoKG0gJSBzcXJ0QmFzZSkgKiBzcXJ0QmFzZSkgKyB6Y1tqXSArIGM7XHJcbiAgICAgICAgICBjID0gKHhsbyAvIGJhc2UgfCAwKSArIChtIC8gc3FydEJhc2UgfCAwKSArIHloaSAqIHhoaTtcclxuICAgICAgICAgIHpjW2otLV0gPSB4bG8gJSBiYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgemNbal0gPSBjO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYykge1xyXG4gICAgICAgICsrZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB6Yy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBub3JtYWxpc2UoeSwgemMsIGUpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG5lZ2F0ZWQsXHJcbiAgICAgKiBpLmUuIG11bHRpcGxpZWQgYnkgLTEuXHJcbiAgICAgKi9cclxuICAgIFAubmVnYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHggPSBuZXcgQmlnTnVtYmVyKHRoaXMpO1xyXG4gICAgICB4LnMgPSAteC5zIHx8IG51bGw7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqICBuICsgMCA9IG5cclxuICAgICAqICBuICsgTiA9IE5cclxuICAgICAqICBuICsgSSA9IElcclxuICAgICAqICAwICsgbiA9IG5cclxuICAgICAqICAwICsgMCA9IDBcclxuICAgICAqICAwICsgTiA9IE5cclxuICAgICAqICAwICsgSSA9IElcclxuICAgICAqICBOICsgbiA9IE5cclxuICAgICAqICBOICsgMCA9IE5cclxuICAgICAqICBOICsgTiA9IE5cclxuICAgICAqICBOICsgSSA9IE5cclxuICAgICAqICBJICsgbiA9IElcclxuICAgICAqICBJICsgMCA9IElcclxuICAgICAqICBJICsgTiA9IE5cclxuICAgICAqICBJICsgSSA9IElcclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBwbHVzIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogQmlnTnVtYmVyKHksIGIpLlxyXG4gICAgICovXHJcbiAgICBQLnBsdXMgPSBmdW5jdGlvbiAoeSwgYikge1xyXG4gICAgICB2YXIgdCxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICBhID0geC5zO1xyXG5cclxuICAgICAgeSA9IG5ldyBCaWdOdW1iZXIoeSwgYik7XHJcbiAgICAgIGIgPSB5LnM7XHJcblxyXG4gICAgICAvLyBFaXRoZXIgTmFOP1xyXG4gICAgICBpZiAoIWEgfHwgIWIpIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XHJcblxyXG4gICAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICAgICBpZiAoYSAhPSBiKSB7XHJcbiAgICAgICAgeS5zID0gLWI7XHJcbiAgICAgICAgcmV0dXJuIHgubWludXMoeSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxyXG4gICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXHJcbiAgICAgICAgeGMgPSB4LmMsXHJcbiAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICBpZiAoIXhlIHx8ICF5ZSkge1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gwrFJbmZpbml0eSBpZiBlaXRoZXIgwrFJbmZpbml0eS5cclxuICAgICAgICBpZiAoIXhjIHx8ICF5YykgcmV0dXJuIG5ldyBCaWdOdW1iZXIoYSAvIDApO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgemVybz9cclxuICAgICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLCB4IGlmIHggaXMgbm9uLXplcm8sIG9yIHplcm8gaWYgYm90aCBhcmUgemVyby5cclxuICAgICAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgcmV0dXJuIHljWzBdID8geSA6IG5ldyBCaWdOdW1iZXIoeGNbMF0gPyB4IDogYSAqIDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB4ZSA9IGJpdEZsb29yKHhlKTtcclxuICAgICAgeWUgPSBiaXRGbG9vcih5ZSk7XHJcbiAgICAgIHhjID0geGMuc2xpY2UoKTtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLiBGYXN0ZXIgdG8gdXNlIHJldmVyc2UgdGhlbiBkbyB1bnNoaWZ0cy5cclxuICAgICAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcbiAgICAgICAgaWYgKGEgPiAwKSB7XHJcbiAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgICB0ID0geGM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgICBmb3IgKDsgYS0tOyB0LnB1c2goMCkpO1xyXG4gICAgICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhID0geGMubGVuZ3RoO1xyXG4gICAgICBiID0geWMubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gUG9pbnQgeGMgdG8gdGhlIGxvbmdlciBhcnJheSwgYW5kIGIgdG8gdGhlIHNob3J0ZXIgbGVuZ3RoLlxyXG4gICAgICBpZiAoYSAtIGIgPCAwKSB0ID0geWMsIHljID0geGMsIHhjID0gdCwgYiA9IGE7XHJcblxyXG4gICAgICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5Yy5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4YyBjYW4gYmUgaWdub3JlZC5cclxuICAgICAgZm9yIChhID0gMDsgYjspIHtcclxuICAgICAgICBhID0gKHhjWy0tYl0gPSB4Y1tiXSArIHljW2JdICsgYSkgLyBCQVNFIHwgMDtcclxuICAgICAgICB4Y1tiXSA9IEJBU0UgPT09IHhjW2JdID8gMCA6IHhjW2JdICUgQkFTRTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGEpIHtcclxuICAgICAgICB4YyA9IFthXS5jb25jYXQoeGMpO1xyXG4gICAgICAgICsreWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgZm9yIHplcm8sIGFzICt4ICsgK3kgIT0gMCAmJiAteCArIC15ICE9IDBcclxuICAgICAgLy8geWUgPSBNQVhfRVhQICsgMSBwb3NzaWJsZVxyXG4gICAgICByZXR1cm4gbm9ybWFsaXNlKHksIHhjLCB5ZSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogSWYgc2QgaXMgdW5kZWZpbmVkIG9yIG51bGwgb3IgdHJ1ZSBvciBmYWxzZSwgcmV0dXJuIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzIG9mXHJcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIsIG9yIG51bGwgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIMKxSW5maW5pdHkgb3IgTmFOLlxyXG4gICAgICogSWYgc2QgaXMgdHJ1ZSBpbmNsdWRlIGludGVnZXItcGFydCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgY291bnQuXHJcbiAgICAgKlxyXG4gICAgICogT3RoZXJ3aXNlLCBpZiBzZCBpcyBhIG51bWJlciwgcmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpc1xyXG4gICAgICogQmlnTnVtYmVyIHJvdW5kZWQgdG8gYSBtYXhpbXVtIG9mIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvclxyXG4gICAgICogUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxyXG4gICAgICpcclxuICAgICAqIHNkIHtudW1iZXJ8Ym9vbGVhbn0gbnVtYmVyOiBzaWduaWZpY2FudCBkaWdpdHM6IGludGVnZXIsIDEgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbjogd2hldGhlciB0byBjb3VudCBpbnRlZ2VyLXBhcnQgdHJhaWxpbmcgemVyb3M6IHRydWUgb3IgZmFsc2UuXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtzZHxybX0nXHJcbiAgICAgKi9cclxuICAgIFAucHJlY2lzaW9uID0gUC5zZCA9IGZ1bmN0aW9uIChzZCwgcm0pIHtcclxuICAgICAgdmFyIGMsIG4sIHYsXHJcbiAgICAgICAgeCA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2QgIT0gbnVsbCAmJiBzZCAhPT0gISFzZCkge1xyXG4gICAgICAgIGludENoZWNrKHNkLCAxLCBNQVgpO1xyXG4gICAgICAgIGlmIChybSA9PSBudWxsKSBybSA9IFJPVU5ESU5HX01PREU7XHJcbiAgICAgICAgZWxzZSBpbnRDaGVjayhybSwgMCwgOCk7XHJcblxyXG4gICAgICAgIHJldHVybiByb3VuZChuZXcgQmlnTnVtYmVyKHgpLCBzZCwgcm0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIShjID0geC5jKSkgcmV0dXJuIG51bGw7XHJcbiAgICAgIHYgPSBjLmxlbmd0aCAtIDE7XHJcbiAgICAgIG4gPSB2ICogTE9HX0JBU0UgKyAxO1xyXG5cclxuICAgICAgaWYgKHYgPSBjW3ZdKSB7XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3Mgb2YgdGhlIGxhc3QgZWxlbWVudC5cclxuICAgICAgICBmb3IgKDsgdiAlIDEwID09IDA7IHYgLz0gMTAsIG4tLSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgICAgICBmb3IgKHYgPSBjWzBdOyB2ID49IDEwOyB2IC89IDEwLCBuKyspO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2QgJiYgeC5lICsgMSA+IG4pIG4gPSB4LmUgKyAxO1xyXG5cclxuICAgICAgcmV0dXJuIG47XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgc2hpZnRlZCBieSBrIHBsYWNlc1xyXG4gICAgICogKHBvd2VycyBvZiAxMCkuIFNoaWZ0IHRvIHRoZSByaWdodCBpZiBuID4gMCwgYW5kIHRvIHRoZSBsZWZ0IGlmIG4gPCAwLlxyXG4gICAgICpcclxuICAgICAqIGsge251bWJlcn0gSW50ZWdlciwgLU1BWF9TQUZFX0lOVEVHRVIgdG8gTUFYX1NBRkVfSU5URUdFUiBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtrfSdcclxuICAgICAqL1xyXG4gICAgUC5zaGlmdGVkQnkgPSBmdW5jdGlvbiAoaykge1xyXG4gICAgICBpbnRDaGVjayhrLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUik7XHJcbiAgICAgIHJldHVybiB0aGlzLnRpbWVzKCcxZScgKyBrKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiAgc3FydCgtbikgPSAgTlxyXG4gICAgICogIHNxcnQoTikgPSAgTlxyXG4gICAgICogIHNxcnQoLUkpID0gIE5cclxuICAgICAqICBzcXJ0KEkpID0gIElcclxuICAgICAqICBzcXJ0KDApID0gIDBcclxuICAgICAqICBzcXJ0KC0wKSA9IC0wXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLFxyXG4gICAgICogcm91bmRlZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kIFJPVU5ESU5HX01PREUuXHJcbiAgICAgKi9cclxuICAgIFAuc3F1YXJlUm9vdCA9IFAuc3FydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIG0sIG4sIHIsIHJlcCwgdCxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICBjID0geC5jLFxyXG4gICAgICAgIHMgPSB4LnMsXHJcbiAgICAgICAgZSA9IHguZSxcclxuICAgICAgICBkcCA9IERFQ0lNQUxfUExBQ0VTICsgNCxcclxuICAgICAgICBoYWxmID0gbmV3IEJpZ051bWJlcignMC41Jyk7XHJcblxyXG4gICAgICAvLyBOZWdhdGl2ZS9OYU4vSW5maW5pdHkvemVybz9cclxuICAgICAgaWYgKHMgIT09IDEgfHwgIWMgfHwgIWNbMF0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcighcyB8fCBzIDwgMCAmJiAoIWMgfHwgY1swXSkgPyBOYU4gOiBjID8geCA6IDEgLyAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSW5pdGlhbCBlc3RpbWF0ZS5cclxuICAgICAgcyA9IE1hdGguc3FydCgrdmFsdWVPZih4KSk7XHJcblxyXG4gICAgICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xyXG4gICAgICAvLyBQYXNzIHggdG8gTWF0aC5zcXJ0IGFzIGludGVnZXIsIHRoZW4gYWRqdXN0IHRoZSBleHBvbmVudCBvZiB0aGUgcmVzdWx0LlxyXG4gICAgICBpZiAocyA9PSAwIHx8IHMgPT0gMSAvIDApIHtcclxuICAgICAgICBuID0gY29lZmZUb1N0cmluZyhjKTtcclxuICAgICAgICBpZiAoKG4ubGVuZ3RoICsgZSkgJSAyID09IDApIG4gKz0gJzAnO1xyXG4gICAgICAgIHMgPSBNYXRoLnNxcnQoK24pO1xyXG4gICAgICAgIGUgPSBiaXRGbG9vcigoZSArIDEpIC8gMikgLSAoZSA8IDAgfHwgZSAlIDIpO1xyXG5cclxuICAgICAgICBpZiAocyA9PSAxIC8gMCkge1xyXG4gICAgICAgICAgbiA9ICcxZScgKyBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuID0gcy50b0V4cG9uZW50aWFsKCk7XHJcbiAgICAgICAgICBuID0gbi5zbGljZSgwLCBuLmluZGV4T2YoJ2UnKSArIDEpICsgZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHIgPSBuZXcgQmlnTnVtYmVyKG4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHIgPSBuZXcgQmlnTnVtYmVyKHMgKyAnJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGZvciB6ZXJvLlxyXG4gICAgICAvLyByIGNvdWxkIGJlIHplcm8gaWYgTUlOX0VYUCBpcyBjaGFuZ2VkIGFmdGVyIHRoZSB0aGlzIHZhbHVlIHdhcyBjcmVhdGVkLlxyXG4gICAgICAvLyBUaGlzIHdvdWxkIGNhdXNlIGEgZGl2aXNpb24gYnkgemVybyAoeC90KSBhbmQgaGVuY2UgSW5maW5pdHkgYmVsb3csIHdoaWNoIHdvdWxkIGNhdXNlXHJcbiAgICAgIC8vIGNvZWZmVG9TdHJpbmcgdG8gdGhyb3cuXHJcbiAgICAgIGlmIChyLmNbMF0pIHtcclxuICAgICAgICBlID0gci5lO1xyXG4gICAgICAgIHMgPSBlICsgZHA7XHJcbiAgICAgICAgaWYgKHMgPCAzKSBzID0gMDtcclxuXHJcbiAgICAgICAgLy8gTmV3dG9uLVJhcGhzb24gaXRlcmF0aW9uLlxyXG4gICAgICAgIGZvciAoOyA7KSB7XHJcbiAgICAgICAgICB0ID0gcjtcclxuICAgICAgICAgIHIgPSBoYWxmLnRpbWVzKHQucGx1cyhkaXYoeCwgdCwgZHAsIDEpKSk7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZWZmVG9TdHJpbmcodC5jKS5zbGljZSgwLCBzKSA9PT0gKG4gPSBjb2VmZlRvU3RyaW5nKHIuYykpLnNsaWNlKDAsIHMpKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGUgZXhwb25lbnQgb2YgciBtYXkgaGVyZSBiZSBvbmUgbGVzcyB0aGFuIHRoZSBmaW5hbCByZXN1bHQgZXhwb25lbnQsXHJcbiAgICAgICAgICAgIC8vIGUuZyAwLjAwMDk5OTkgKGUtNCkgLS0+IDAuMDAxIChlLTMpLCBzbyBhZGp1c3QgcyBzbyB0aGUgcm91bmRpbmcgZGlnaXRzXHJcbiAgICAgICAgICAgIC8vIGFyZSBpbmRleGVkIGNvcnJlY3RseS5cclxuICAgICAgICAgICAgaWYgKHIuZSA8IGUpIC0tcztcclxuICAgICAgICAgICAgbiA9IG4uc2xpY2UocyAtIDMsIHMgKyAxKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZSA0dGggcm91bmRpbmcgZGlnaXQgbWF5IGJlIGluIGVycm9yIGJ5IC0xIHNvIGlmIHRoZSA0IHJvdW5kaW5nIGRpZ2l0c1xyXG4gICAgICAgICAgICAvLyBhcmUgOTk5OSBvciA0OTk5IChpLmUuIGFwcHJvYWNoaW5nIGEgcm91bmRpbmcgYm91bmRhcnkpIGNvbnRpbnVlIHRoZVxyXG4gICAgICAgICAgICAvLyBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgIGlmIChuID09ICc5OTk5JyB8fCAhcmVwICYmIG4gPT0gJzQ5OTknKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIE9uIHRoZSBmaXJzdCBpdGVyYXRpb24gb25seSwgY2hlY2sgdG8gc2VlIGlmIHJvdW5kaW5nIHVwIGdpdmVzIHRoZVxyXG4gICAgICAgICAgICAgIC8vIGV4YWN0IHJlc3VsdCBhcyB0aGUgbmluZXMgbWF5IGluZmluaXRlbHkgcmVwZWF0LlxyXG4gICAgICAgICAgICAgIGlmICghcmVwKSB7XHJcbiAgICAgICAgICAgICAgICByb3VuZCh0LCB0LmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0LnRpbWVzKHQpLmVxKHgpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHIgPSB0O1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGRwICs9IDQ7XHJcbiAgICAgICAgICAgICAgcyArPSA0O1xyXG4gICAgICAgICAgICAgIHJlcCA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIElmIHJvdW5kaW5nIGRpZ2l0cyBhcmUgbnVsbCwgMHswLDR9IG9yIDUwezAsM30sIGNoZWNrIGZvciBleGFjdFxyXG4gICAgICAgICAgICAgIC8vIHJlc3VsdC4gSWYgbm90LCB0aGVuIHRoZXJlIGFyZSBmdXJ0aGVyIGRpZ2l0cyBhbmQgbSB3aWxsIGJlIHRydXRoeS5cclxuICAgICAgICAgICAgICBpZiAoIStuIHx8ICErbi5zbGljZSgxKSAmJiBuLmNoYXJBdCgwKSA9PSAnNScpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUcnVuY2F0ZSB0byB0aGUgZmlyc3Qgcm91bmRpbmcgZGlnaXQuXHJcbiAgICAgICAgICAgICAgICByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDIsIDEpO1xyXG4gICAgICAgICAgICAgICAgbSA9ICFyLnRpbWVzKHIpLmVxKHgpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByb3VuZChyLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDEsIFJPVU5ESU5HX01PREUsIG0pO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGV4cG9uZW50aWFsIG5vdGF0aW9uIGFuZFxyXG4gICAgICogcm91bmRlZCB1c2luZyBST1VORElOR19NT0RFIHRvIGRwIGZpeGVkIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQge25vdCBhIHByaW1pdGl2ZSBudW1iZXJ8bm90IGFuIGludGVnZXJ8b3V0IG9mIHJhbmdlfToge2RwfHJtfSdcclxuICAgICAqL1xyXG4gICAgUC50b0V4cG9uZW50aWFsID0gZnVuY3Rpb24gKGRwLCBybSkge1xyXG4gICAgICBpZiAoZHAgIT0gbnVsbCkge1xyXG4gICAgICAgIGludENoZWNrKGRwLCAwLCBNQVgpO1xyXG4gICAgICAgIGRwKys7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZvcm1hdCh0aGlzLCBkcCwgcm0sIDEpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGZpeGVkLXBvaW50IG5vdGF0aW9uIHJvdW5kaW5nXHJcbiAgICAgKiB0byBkcCBmaXhlZCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciBST1VORElOR19NT0RFIGlmIHJtIGlzIG9taXR0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogYXMgd2l0aCBKYXZhU2NyaXB0J3MgbnVtYmVyIHR5cGUsICgtMCkudG9GaXhlZCgwKSBpcyAnMCcsXHJcbiAgICAgKiBidXQgZS5nLiAoLTAuMDAwMDEpLnRvRml4ZWQoMCkgaXMgJy0wJy5cclxuICAgICAqXHJcbiAgICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXHJcbiAgICAgKiBbcm1dIHtudW1iZXJ9IFJvdW5kaW5nIG1vZGUuIEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICAgKi9cclxuICAgIFAudG9GaXhlZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgaWYgKGRwICE9IG51bGwpIHtcclxuICAgICAgICBpbnRDaGVjayhkcCwgMCwgTUFYKTtcclxuICAgICAgICBkcCA9IGRwICsgdGhpcy5lICsgMTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZm9ybWF0KHRoaXMsIGRwLCBybSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24gcm91bmRlZFxyXG4gICAgICogdXNpbmcgcm0gb3IgUk9VTkRJTkdfTU9ERSB0byBkcCBkZWNpbWFsIHBsYWNlcywgYW5kIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHByb3BlcnRpZXNcclxuICAgICAqIG9mIHRoZSBmb3JtYXQgb3IgRk9STUFUIG9iamVjdCAoc2VlIEJpZ051bWJlci5zZXQpLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBmb3JtYXR0aW5nIG9iamVjdCBtYXkgY29udGFpbiBzb21lIG9yIGFsbCBvZiB0aGUgcHJvcGVydGllcyBzaG93biBiZWxvdy5cclxuICAgICAqXHJcbiAgICAgKiBGT1JNQVQgPSB7XHJcbiAgICAgKiAgIHByZWZpeDogJycsXHJcbiAgICAgKiAgIGdyb3VwU2l6ZTogMyxcclxuICAgICAqICAgc2Vjb25kYXJ5R3JvdXBTaXplOiAwLFxyXG4gICAgICogICBncm91cFNlcGFyYXRvcjogJywnLFxyXG4gICAgICogICBkZWNpbWFsU2VwYXJhdG9yOiAnLicsXHJcbiAgICAgKiAgIGZyYWN0aW9uR3JvdXBTaXplOiAwLFxyXG4gICAgICogICBmcmFjdGlvbkdyb3VwU2VwYXJhdG9yOiAnXFx4QTAnLCAgICAgIC8vIG5vbi1icmVha2luZyBzcGFjZVxyXG4gICAgICogICBzdWZmaXg6ICcnXHJcbiAgICAgKiB9O1xyXG4gICAgICpcclxuICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cclxuICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cclxuICAgICAqIFtmb3JtYXRdIHtvYmplY3R9IEZvcm1hdHRpbmcgb3B0aW9ucy4gU2VlIEZPUk1BVCBwYmplY3QgYWJvdmUuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYSBwcmltaXRpdmUgbnVtYmVyfG5vdCBhbiBpbnRlZ2VyfG91dCBvZiByYW5nZX06IHtkcHxybX0nXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQXJndW1lbnQgbm90IGFuIG9iamVjdDoge2Zvcm1hdH0nXHJcbiAgICAgKi9cclxuICAgIFAudG9Gb3JtYXQgPSBmdW5jdGlvbiAoZHAsIHJtLCBmb3JtYXQpIHtcclxuICAgICAgdmFyIHN0cixcclxuICAgICAgICB4ID0gdGhpcztcclxuXHJcbiAgICAgIGlmIChmb3JtYXQgPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChkcCAhPSBudWxsICYmIHJtICYmIHR5cGVvZiBybSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgZm9ybWF0ID0gcm07XHJcbiAgICAgICAgICBybSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkcCAmJiB0eXBlb2YgZHAgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIGZvcm1hdCA9IGRwO1xyXG4gICAgICAgICAgZHAgPSBybSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvcm1hdCA9IEZPUk1BVDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAoYmlnbnVtYmVyRXJyb3IgKyAnQXJndW1lbnQgbm90IGFuIG9iamVjdDogJyArIGZvcm1hdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0ciA9IHgudG9GaXhlZChkcCwgcm0pO1xyXG5cclxuICAgICAgaWYgKHguYykge1xyXG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgYXJyID0gc3RyLnNwbGl0KCcuJyksXHJcbiAgICAgICAgICBnMSA9ICtmb3JtYXQuZ3JvdXBTaXplLFxyXG4gICAgICAgICAgZzIgPSArZm9ybWF0LnNlY29uZGFyeUdyb3VwU2l6ZSxcclxuICAgICAgICAgIGdyb3VwU2VwYXJhdG9yID0gZm9ybWF0Lmdyb3VwU2VwYXJhdG9yIHx8ICcnLFxyXG4gICAgICAgICAgaW50UGFydCA9IGFyclswXSxcclxuICAgICAgICAgIGZyYWN0aW9uUGFydCA9IGFyclsxXSxcclxuICAgICAgICAgIGlzTmVnID0geC5zIDwgMCxcclxuICAgICAgICAgIGludERpZ2l0cyA9IGlzTmVnID8gaW50UGFydC5zbGljZSgxKSA6IGludFBhcnQsXHJcbiAgICAgICAgICBsZW4gPSBpbnREaWdpdHMubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoZzIpIGkgPSBnMSwgZzEgPSBnMiwgZzIgPSBpLCBsZW4gLT0gaTtcclxuXHJcbiAgICAgICAgaWYgKGcxID4gMCAmJiBsZW4gPiAwKSB7XHJcbiAgICAgICAgICBpID0gbGVuICUgZzEgfHwgZzE7XHJcbiAgICAgICAgICBpbnRQYXJ0ID0gaW50RGlnaXRzLnN1YnN0cigwLCBpKTtcclxuICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpICs9IGcxKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnN1YnN0cihpLCBnMSk7XHJcbiAgICAgICAgICBpZiAoZzIgPiAwKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnNsaWNlKGkpO1xyXG4gICAgICAgICAgaWYgKGlzTmVnKSBpbnRQYXJ0ID0gJy0nICsgaW50UGFydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0ciA9IGZyYWN0aW9uUGFydFxyXG4gICAgICAgICA/IGludFBhcnQgKyAoZm9ybWF0LmRlY2ltYWxTZXBhcmF0b3IgfHwgJycpICsgKChnMiA9ICtmb3JtYXQuZnJhY3Rpb25Hcm91cFNpemUpXHJcbiAgICAgICAgICA/IGZyYWN0aW9uUGFydC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxkeycgKyBnMiArICd9XFxcXEInLCAnZycpLFxyXG4gICAgICAgICAgICckJicgKyAoZm9ybWF0LmZyYWN0aW9uR3JvdXBTZXBhcmF0b3IgfHwgJycpKVxyXG4gICAgICAgICAgOiBmcmFjdGlvblBhcnQpXHJcbiAgICAgICAgIDogaW50UGFydDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIChmb3JtYXQucHJlZml4IHx8ICcnKSArIHN0ciArIChmb3JtYXQuc3VmZml4IHx8ICcnKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgdHdvIEJpZ051bWJlcnMgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBhcyBhIHNpbXBsZVxyXG4gICAgICogZnJhY3Rpb24gd2l0aCBhbiBpbnRlZ2VyIG51bWVyYXRvciBhbmQgYW4gaW50ZWdlciBkZW5vbWluYXRvci5cclxuICAgICAqIFRoZSBkZW5vbWluYXRvciB3aWxsIGJlIGEgcG9zaXRpdmUgbm9uLXplcm8gdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWRcclxuICAgICAqIG1heGltdW0gZGVub21pbmF0b3IuIElmIGEgbWF4aW11bSBkZW5vbWluYXRvciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZGVub21pbmF0b3Igd2lsbCBiZVxyXG4gICAgICogdGhlIGxvd2VzdCB2YWx1ZSBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBudW1iZXIgZXhhY3RseS5cclxuICAgICAqXHJcbiAgICAgKiBbbWRdIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gSW50ZWdlciA+PSAxLCBvciBJbmZpbml0eS4gVGhlIG1heGltdW0gZGVub21pbmF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogJ1tCaWdOdW1iZXIgRXJyb3JdIEFyZ3VtZW50IHtub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9IDoge21kfSdcclxuICAgICAqL1xyXG4gICAgUC50b0ZyYWN0aW9uID0gZnVuY3Rpb24gKG1kKSB7XHJcbiAgICAgIHZhciBkLCBkMCwgZDEsIGQyLCBlLCBleHAsIG4sIG4wLCBuMSwgcSwgciwgcyxcclxuICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICB4YyA9IHguYztcclxuXHJcbiAgICAgIGlmIChtZCAhPSBudWxsKSB7XHJcbiAgICAgICAgbiA9IG5ldyBCaWdOdW1iZXIobWQpO1xyXG5cclxuICAgICAgICAvLyBUaHJvdyBpZiBtZCBpcyBsZXNzIHRoYW4gb25lIG9yIGlzIG5vdCBhbiBpbnRlZ2VyLCB1bmxlc3MgaXQgaXMgSW5maW5pdHkuXHJcbiAgICAgICAgaWYgKCFuLmlzSW50ZWdlcigpICYmIChuLmMgfHwgbi5zICE9PSAxKSB8fCBuLmx0KE9ORSkpIHtcclxuICAgICAgICAgIHRocm93IEVycm9yXHJcbiAgICAgICAgICAgIChiaWdudW1iZXJFcnJvciArICdBcmd1bWVudCAnICtcclxuICAgICAgICAgICAgICAobi5pc0ludGVnZXIoKSA/ICdvdXQgb2YgcmFuZ2U6ICcgOiAnbm90IGFuIGludGVnZXI6ICcpICsgdmFsdWVPZihuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXhjKSByZXR1cm4gbmV3IEJpZ051bWJlcih4KTtcclxuXHJcbiAgICAgIGQgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIG4xID0gZDAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIGQxID0gbjAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XHJcbiAgICAgIHMgPSBjb2VmZlRvU3RyaW5nKHhjKTtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSBpbml0aWFsIGRlbm9taW5hdG9yLlxyXG4gICAgICAvLyBkIGlzIGEgcG93ZXIgb2YgMTAgYW5kIHRoZSBtaW5pbXVtIG1heCBkZW5vbWluYXRvciB0aGF0IHNwZWNpZmllcyB0aGUgdmFsdWUgZXhhY3RseS5cclxuICAgICAgZSA9IGQuZSA9IHMubGVuZ3RoIC0geC5lIC0gMTtcclxuICAgICAgZC5jWzBdID0gUE9XU19URU5bKGV4cCA9IGUgJSBMT0dfQkFTRSkgPCAwID8gTE9HX0JBU0UgKyBleHAgOiBleHBdO1xyXG4gICAgICBtZCA9ICFtZCB8fCBuLmNvbXBhcmVkVG8oZCkgPiAwID8gKGUgPiAwID8gZCA6IG4xKSA6IG47XHJcblxyXG4gICAgICBleHAgPSBNQVhfRVhQO1xyXG4gICAgICBNQVhfRVhQID0gMSAvIDA7XHJcbiAgICAgIG4gPSBuZXcgQmlnTnVtYmVyKHMpO1xyXG5cclxuICAgICAgLy8gbjAgPSBkMSA9IDBcclxuICAgICAgbjAuY1swXSA9IDA7XHJcblxyXG4gICAgICBmb3IgKDsgOykgIHtcclxuICAgICAgICBxID0gZGl2KG4sIGQsIDAsIDEpO1xyXG4gICAgICAgIGQyID0gZDAucGx1cyhxLnRpbWVzKGQxKSk7XHJcbiAgICAgICAgaWYgKGQyLmNvbXBhcmVkVG8obWQpID09IDEpIGJyZWFrO1xyXG4gICAgICAgIGQwID0gZDE7XHJcbiAgICAgICAgZDEgPSBkMjtcclxuICAgICAgICBuMSA9IG4wLnBsdXMocS50aW1lcyhkMiA9IG4xKSk7XHJcbiAgICAgICAgbjAgPSBkMjtcclxuICAgICAgICBkID0gbi5taW51cyhxLnRpbWVzKGQyID0gZCkpO1xyXG4gICAgICAgIG4gPSBkMjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZDIgPSBkaXYobWQubWludXMoZDApLCBkMSwgMCwgMSk7XHJcbiAgICAgIG4wID0gbjAucGx1cyhkMi50aW1lcyhuMSkpO1xyXG4gICAgICBkMCA9IGQwLnBsdXMoZDIudGltZXMoZDEpKTtcclxuICAgICAgbjAucyA9IG4xLnMgPSB4LnM7XHJcbiAgICAgIGUgPSBlICogMjtcclxuXHJcbiAgICAgIC8vIERldGVybWluZSB3aGljaCBmcmFjdGlvbiBpcyBjbG9zZXIgdG8geCwgbjAvZDAgb3IgbjEvZDFcclxuICAgICAgciA9IGRpdihuMSwgZDEsIGUsIFJPVU5ESU5HX01PREUpLm1pbnVzKHgpLmFicygpLmNvbXBhcmVkVG8oXHJcbiAgICAgICAgICBkaXYobjAsIGQwLCBlLCBST1VORElOR19NT0RFKS5taW51cyh4KS5hYnMoKSkgPCAxID8gW24xLCBkMV0gOiBbbjAsIGQwXTtcclxuXHJcbiAgICAgIE1BWF9FWFAgPSBleHA7XHJcblxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGNvbnZlcnRlZCB0byBhIG51bWJlciBwcmltaXRpdmUuXHJcbiAgICAgKi9cclxuICAgIFAudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiArdmFsdWVPZih0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0c1xyXG4gICAgICogdXNpbmcgcm91bmRpbmcgbW9kZSBybSBvciBST1VORElOR19NT0RFLiBJZiBzZCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHNcclxuICAgICAqIG5lY2Vzc2FyeSB0byByZXByZXNlbnQgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24sIHRoZW4gdXNlXHJcbiAgICAgKiBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBbc2RdIHtudW1iZXJ9IFNpZ25pZmljYW50IGRpZ2l0cy4gSW50ZWdlciwgMSB0byBNQVggaW5jbHVzaXZlLlxyXG4gICAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxyXG4gICAgICpcclxuICAgICAqICdbQmlnTnVtYmVyIEVycm9yXSBBcmd1bWVudCB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7c2R8cm19J1xyXG4gICAgICovXHJcbiAgICBQLnRvUHJlY2lzaW9uID0gZnVuY3Rpb24gKHNkLCBybSkge1xyXG4gICAgICBpZiAoc2QgIT0gbnVsbCkgaW50Q2hlY2soc2QsIDEsIE1BWCk7XHJcbiAgICAgIHJldHVybiBmb3JtYXQodGhpcywgc2QsIHJtLCAyKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpbiBiYXNlIGIsIG9yIGJhc2UgMTAgaWYgYiBpc1xyXG4gICAgICogb21pdHRlZC4gSWYgYSBiYXNlIGlzIHNwZWNpZmllZCwgaW5jbHVkaW5nIGJhc2UgMTAsIHJvdW5kIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmRcclxuICAgICAqIFJPVU5ESU5HX01PREUuIElmIGEgYmFzZSBpcyBub3Qgc3BlY2lmaWVkLCBhbmQgdGhpcyBCaWdOdW1iZXIgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnRcclxuICAgICAqIHRoYXQgaXMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIFRPX0VYUF9QT1MsIG9yIGEgbmVnYXRpdmUgZXhwb25lbnQgZXF1YWwgdG8gb3IgbGVzcyB0aGFuXHJcbiAgICAgKiBUT19FWFBfTkVHLCByZXR1cm4gZXhwb25lbnRpYWwgbm90YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogW2JdIHtudW1iZXJ9IEludGVnZXIsIDIgdG8gQUxQSEFCRVQubGVuZ3RoIGluY2x1c2l2ZS5cclxuICAgICAqXHJcbiAgICAgKiAnW0JpZ051bWJlciBFcnJvcl0gQmFzZSB7bm90IGEgcHJpbWl0aXZlIG51bWJlcnxub3QgYW4gaW50ZWdlcnxvdXQgb2YgcmFuZ2V9OiB7Yn0nXHJcbiAgICAgKi9cclxuICAgIFAudG9TdHJpbmcgPSBmdW5jdGlvbiAoYikge1xyXG4gICAgICB2YXIgc3RyLFxyXG4gICAgICAgIG4gPSB0aGlzLFxyXG4gICAgICAgIHMgPSBuLnMsXHJcbiAgICAgICAgZSA9IG4uZTtcclxuXHJcbiAgICAgIC8vIEluZmluaXR5IG9yIE5hTj9cclxuICAgICAgaWYgKGUgPT09IG51bGwpIHtcclxuICAgICAgICBpZiAocykge1xyXG4gICAgICAgICAgc3RyID0gJ0luZmluaXR5JztcclxuICAgICAgICAgIGlmIChzIDwgMCkgc3RyID0gJy0nICsgc3RyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdHIgPSAnTmFOJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyID0gY29lZmZUb1N0cmluZyhuLmMpO1xyXG5cclxuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XHJcbiAgICAgICAgICBzdHIgPSBlIDw9IFRPX0VYUF9ORUcgfHwgZSA+PSBUT19FWFBfUE9TXHJcbiAgICAgICAgICAgPyB0b0V4cG9uZW50aWFsKHN0ciwgZSlcclxuICAgICAgICAgICA6IHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGludENoZWNrKGIsIDIsIEFMUEhBQkVULmxlbmd0aCwgJ0Jhc2UnKTtcclxuICAgICAgICAgIHN0ciA9IGNvbnZlcnRCYXNlKHRvRml4ZWRQb2ludChzdHIsIGUsICcwJyksIDEwLCBiLCBzLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzIDwgMCAmJiBuLmNbMF0pIHN0ciA9ICctJyArIHN0cjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYXMgdG9TdHJpbmcsIGJ1dCBkbyBub3QgYWNjZXB0IGEgYmFzZSBhcmd1bWVudCwgYW5kIGluY2x1ZGUgdGhlIG1pbnVzIHNpZ24gZm9yXHJcbiAgICAgKiBuZWdhdGl2ZSB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBQLnZhbHVlT2YgPSBQLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlT2YodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBQLl9pc0JpZ051bWJlciA9IHRydWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnKSB7XHJcbiAgICAgIFBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdCaWdOdW1iZXInO1xyXG4gICAgICAvLyBOb2RlLmpzIHYxMC4xMi4wK1xyXG4gICAgICBQW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gUC52YWx1ZU9mO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb25maWdPYmplY3QgIT0gbnVsbCkgQmlnTnVtYmVyLnNldChjb25maWdPYmplY3QpO1xyXG5cclxuICAgIHJldHVybiBCaWdOdW1iZXI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUFJJVkFURSBIRUxQRVIgRlVOQ1RJT05TXHJcblxyXG5cclxuICBmdW5jdGlvbiBiaXRGbG9vcihuKSB7XHJcbiAgICB2YXIgaSA9IG4gfCAwO1xyXG4gICAgcmV0dXJuIG4gPiAwIHx8IG4gPT09IGkgPyBpIDogaSAtIDE7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gUmV0dXJuIGEgY29lZmZpY2llbnQgYXJyYXkgYXMgYSBzdHJpbmcgb2YgYmFzZSAxMCBkaWdpdHMuXHJcbiAgZnVuY3Rpb24gY29lZmZUb1N0cmluZyhhKSB7XHJcbiAgICB2YXIgcywgeixcclxuICAgICAgaSA9IDEsXHJcbiAgICAgIGogPSBhLmxlbmd0aCxcclxuICAgICAgciA9IGFbMF0gKyAnJztcclxuXHJcbiAgICBmb3IgKDsgaSA8IGo7KSB7XHJcbiAgICAgIHMgPSBhW2krK10gKyAnJztcclxuICAgICAgeiA9IExPR19CQVNFIC0gcy5sZW5ndGg7XHJcbiAgICAgIGZvciAoOyB6LS07IHMgPSAnMCcgKyBzKTtcclxuICAgICAgciArPSBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgIGZvciAoaiA9IHIubGVuZ3RoOyByLmNoYXJDb2RlQXQoLS1qKSA9PT0gNDg7KTtcclxuXHJcbiAgICByZXR1cm4gci5zbGljZSgwLCBqICsgMSB8fCAxKTtcclxuICB9XHJcblxyXG5cclxuICAvLyBDb21wYXJlIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXJzIHggYW5kIHkuXHJcbiAgZnVuY3Rpb24gY29tcGFyZSh4LCB5KSB7XHJcbiAgICB2YXIgYSwgYixcclxuICAgICAgeGMgPSB4LmMsXHJcbiAgICAgIHljID0geS5jLFxyXG4gICAgICBpID0geC5zLFxyXG4gICAgICBqID0geS5zLFxyXG4gICAgICBrID0geC5lLFxyXG4gICAgICBsID0geS5lO1xyXG5cclxuICAgIC8vIEVpdGhlciBOYU4/XHJcbiAgICBpZiAoIWkgfHwgIWopIHJldHVybiBudWxsO1xyXG5cclxuICAgIGEgPSB4YyAmJiAheGNbMF07XHJcbiAgICBiID0geWMgJiYgIXljWzBdO1xyXG5cclxuICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgaWYgKGEgfHwgYikgcmV0dXJuIGEgPyBiID8gMCA6IC1qIDogaTtcclxuXHJcbiAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICBpZiAoaSAhPSBqKSByZXR1cm4gaTtcclxuXHJcbiAgICBhID0gaSA8IDA7XHJcbiAgICBiID0gayA9PSBsO1xyXG5cclxuICAgIC8vIEVpdGhlciBJbmZpbml0eT9cclxuICAgIGlmICgheGMgfHwgIXljKSByZXR1cm4gYiA/IDAgOiAheGMgXiBhID8gMSA6IC0xO1xyXG5cclxuICAgIC8vIENvbXBhcmUgZXhwb25lbnRzLlxyXG4gICAgaWYgKCFiKSByZXR1cm4gayA+IGwgXiBhID8gMSA6IC0xO1xyXG5cclxuICAgIGogPSAoayA9IHhjLmxlbmd0aCkgPCAobCA9IHljLmxlbmd0aCkgPyBrIDogbDtcclxuXHJcbiAgICAvLyBDb21wYXJlIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gICAgZm9yIChpID0gMDsgaSA8IGo7IGkrKykgaWYgKHhjW2ldICE9IHljW2ldKSByZXR1cm4geGNbaV0gPiB5Y1tpXSBeIGEgPyAxIDogLTE7XHJcblxyXG4gICAgLy8gQ29tcGFyZSBsZW5ndGhzLlxyXG4gICAgcmV0dXJuIGsgPT0gbCA/IDAgOiBrID4gbCBeIGEgPyAxIDogLTE7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBDaGVjayB0aGF0IG4gaXMgYSBwcmltaXRpdmUgbnVtYmVyLCBhbiBpbnRlZ2VyLCBhbmQgaW4gcmFuZ2UsIG90aGVyd2lzZSB0aHJvdy5cclxuICAgKi9cclxuICBmdW5jdGlvbiBpbnRDaGVjayhuLCBtaW4sIG1heCwgbmFtZSkge1xyXG4gICAgaWYgKG4gPCBtaW4gfHwgbiA+IG1heCB8fCBuICE9PSAobiA8IDAgPyBtYXRoY2VpbChuKSA6IG1hdGhmbG9vcihuKSkpIHtcclxuICAgICAgdGhyb3cgRXJyb3JcclxuICAgICAgIChiaWdudW1iZXJFcnJvciArIChuYW1lIHx8ICdBcmd1bWVudCcpICsgKHR5cGVvZiBuID09ICdudW1iZXInXHJcbiAgICAgICAgID8gbiA8IG1pbiB8fCBuID4gbWF4ID8gJyBvdXQgb2YgcmFuZ2U6ICcgOiAnIG5vdCBhbiBpbnRlZ2VyOiAnXHJcbiAgICAgICAgIDogJyBub3QgYSBwcmltaXRpdmUgbnVtYmVyOiAnKSArIFN0cmluZyhuKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQXNzdW1lcyBmaW5pdGUgbi5cclxuICBmdW5jdGlvbiBpc09kZChuKSB7XHJcbiAgICB2YXIgayA9IG4uYy5sZW5ndGggLSAxO1xyXG4gICAgcmV0dXJuIGJpdEZsb29yKG4uZSAvIExPR19CQVNFKSA9PSBrICYmIG4uY1trXSAlIDIgIT0gMDtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKHN0ciwgZSkge1xyXG4gICAgcmV0dXJuIChzdHIubGVuZ3RoID4gMSA/IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSkgOiBzdHIpICtcclxuICAgICAoZSA8IDAgPyAnZScgOiAnZSsnKSArIGU7XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gdG9GaXhlZFBvaW50KHN0ciwgZSwgeikge1xyXG4gICAgdmFyIGxlbiwgenM7XHJcblxyXG4gICAgLy8gTmVnYXRpdmUgZXhwb25lbnQ/XHJcbiAgICBpZiAoZSA8IDApIHtcclxuXHJcbiAgICAgIC8vIFByZXBlbmQgemVyb3MuXHJcbiAgICAgIGZvciAoenMgPSB6ICsgJy4nOyArK2U7IHpzICs9IHopO1xyXG4gICAgICBzdHIgPSB6cyArIHN0cjtcclxuXHJcbiAgICAvLyBQb3NpdGl2ZSBleHBvbmVudFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIEFwcGVuZCB6ZXJvcy5cclxuICAgICAgaWYgKCsrZSA+IGxlbikge1xyXG4gICAgICAgIGZvciAoenMgPSB6LCBlIC09IGxlbjsgLS1lOyB6cyArPSB6KTtcclxuICAgICAgICBzdHIgKz0genM7XHJcbiAgICAgIH0gZWxzZSBpZiAoZSA8IGxlbikge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCBlKSArICcuJyArIHN0ci5zbGljZShlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gRVhQT1JUXHJcblxyXG5cclxuICBCaWdOdW1iZXIgPSBjbG9uZSgpO1xyXG4gIEJpZ051bWJlclsnZGVmYXVsdCddID0gQmlnTnVtYmVyLkJpZ051bWJlciA9IEJpZ051bWJlcjtcclxuXHJcbiAgLy8gQU1ELlxyXG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpZ051bWJlcjsgfSk7XHJcblxyXG4gIC8vIE5vZGUuanMgYW5kIG90aGVyIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMuXHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJpZ051bWJlcjtcclxuXHJcbiAgLy8gQnJvd3Nlci5cclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKCFnbG9iYWxPYmplY3QpIHtcclxuICAgICAgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiA/IHNlbGYgOiB3aW5kb3c7XHJcbiAgICB9XHJcblxyXG4gICAgZ2xvYmFsT2JqZWN0LkJpZ051bWJlciA9IEJpZ051bWJlcjtcclxuICB9XHJcbn0pKHRoaXMpO1xyXG4iLCJleHBvcnQgKiBmcm9tICcuL2Vvc05vZGVzJyIsImltcG9ydCB7IEVvcyB9IGZyb20gJy4uLy4uL3R5cGVzL2xpYnMnXG5cbmltcG9ydCBEQiBmcm9tICcuL2RiJ1xuXG5pbXBvcnQge1BsYXllcn0gZnJvbSAnLi4vLi4vcGxheWVyJ1xuaW1wb3J0IHtmb3JNcywgZm9yQ29uZGl0aW9ufSBmcm9tICcuLi8uLi91dGlscy93YWl0J1xuXG5pbXBvcnQge2NyZWF0ZUxvZ2dlcn0gZnJvbSAnLi4vLi4vdXRpbHMvbG9nJ1xuaW1wb3J0IHtJRW9zQ2xpZW50LCBJSWRlbnRpdHl9IGZyb20gXCIuLi8uLi90eXBlcy9lb3NcIjtcbmltcG9ydCB7SVNjYXR0ZXJ9IGZyb20gXCIuLi8uLi90eXBlcy9zY2F0dGVyXCI7XG5cbmNvbnN0IGxvZyA9IGNyZWF0ZUxvZ2dlcignc2NhdHRlclBsYXllcicpXG5cbi8qKlxuICogRXZlbnQgbmFtZXMgc3VwcG9ydGVkIGluIHNjYXR0ZXIgcGxheWVyXG4gKiBAdHlwZSB7e0VSUl9HRVRfU0NBVFRFUl9GQUlMRUQ6IHN0cmluZywgRVJSX0dFVF9JREVOVElUWV9GQUlMRUQ6IHN0cmluZ319XG4gKi9cbmNvbnN0IEVWRU5UX05BTUVTID0ge1xuICAgIEVSUl9HRVRfU0NBVFRFUl9GQUlMRUQ6ICdFUlJfR0VUX1NDQVRURVJfRkFJTEVEJyxcbiAgICBFUlJfR0VUX0lERU5USVRZX0ZBSUxFRDogJ0VSUl9HRVRfSURFTlRJVFlfRkFJTEVEJyxcbiAgICBFUlJfTE9HT1VUX0ZBSUxFRDogJ0VSUl9MT0dPVVRfRkFJTEVEJyxcbiAgICBFUlJfQ09ORl9OT1RfRk9VTkQ6ICdFUlJfQ09ORl9OT1RfRk9VTkQnXG59XG5cbi8qKlxuICogUGxheWVyIG9uIGJyb3dzZXIgKG5lZWQgc2NhdHRlcilcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuZXhwb3J0IGNsYXNzIFNjYXR0ZXJQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuXG4gICAgcHJvdGVjdGVkIGlkZW50aXR5UmVjZWl2ZXI6IEZ1bmN0aW9uW10gPSBbXVxuICAgIHB1YmxpYyByZWFkb25seSBzdG9yYWdlOiBEQiA9IG5ldyBEQih7XG4gICAgICAgIG5ldHdvcmtfbmFtZTogJ2RldicsXG4gICAgICAgIGxhbmc6ICdjaCdcbiAgICB9KVxuICAgIHByb3RlY3RlZCBfZW9zQ2xpZW50OiBJRW9zQ2xpZW50ID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfbmV0d29ya3M6IGFueSkge1xuICAgICAgICBzdXBlcigpXG4gICAgICAgIHRoaXMuZXZlbnRzLmVuYWJsZUV2ZW50cyhFVkVOVF9OQU1FUylcbiAgICAgICAgbG9nLmluZm8oYGVvcyBwbGF5ZXIgY3JlYXRlZDogXFxuJHt0aGlzLm5ldE5hbWV9IFxcbiR7SlNPTi5zdHJpbmdpZnkodGhpcy5uZXRDb25mLCBudWxsLCAyKX1gKVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogc3dpdGNoIHRvIGFuIG5ldHdvcmsgd2l0aCBuYW1lXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqL1xuICAgIHB1YmxpYyBzd2l0Y2hOZXR3b3JrKGtleTogc3RyaW5nKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5fbmV0d29ya3MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXQoJ25ldHdvcmtfbmFtZScsIGtleSlcbiAgICAgICAgICAgIHRoaXMuX2Vvc0NsaWVudCA9IG51bGxcbiAgICAgICAgICAgIGxvZy5pbmZvKGBuZXR3b3JrIGNoYW5nZWQgdG8gJHt0aGlzLm5ldE5hbWV9LmApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2cud2FybmluZyhgbmV0d29yayAke2tleX0gY2Fubm90IGZpbmQuYClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBuZXQgY29uZmlnIHRvIHRhYmxlIGF0IHJ1bnRpbWVcbiAgICAgKiBAcGFyYW0gbmV0TmFtZVxuICAgICAqIEBwYXJhbSBjb25mXG4gICAgICovXG4gICAgcHVibGljIHNldE5ldENvbmYobmV0TmFtZTogc3RyaW5nLCBjb25mOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fbmV0d29ya3NbbmV0TmFtZV0gPSBjb25mXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5ldHdvcmsgbmFtZSBpbiB1c2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG5ldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0KCduZXR3b3JrX25hbWUnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBuZXR3b3JrIGNvbmZpZyBvZiBjdXIgbmV0TmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgbmV0Q29uZigpIHtcbiAgICAgICAgbGV0IGNvbmYgPSB0aGlzLl9uZXR3b3Jrc1t0aGlzLm5ldE5hbWVdXG4gICAgICAgIGlmICghY29uZikge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdEV2ZW50KEVWRU5UX05BTUVTLkVSUl9DT05GX05PVF9GT1VORCwgbmV3IEVycm9yKGBjYW5ub3QgZmluZCBjb25maWcgb2YgJHt0aGlzLm5ldE5hbWV9YCkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmZcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cnkgZ2V0IHNjYXR0ZXJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2V0LXNjYXR0ZXIuY29tL2RvY3MvZXhhbXBsZXMtaW50ZXJhY3Rpb24tZmxvd1xuICAgICAqIEByZXR1cm4ge1NjYXR0ZXJ9XG4gICAgICovXG4gICAgcHVibGljIGdldCBzY2F0dGVyKCkgOiBJU2NhdHRlciB7XG4gICAgICAgIGxldCBzY2F0dGVyID0gKHdpbmRvdyBhcyBhbnkpLnNjYXR0ZXJcbiAgICAgICAgaWYgKCFzY2F0dGVyKSB7XG4gICAgICAgICAgICBsZXQgZXJyID0gbmV3IEVycm9yKCdzY2F0dGVyIGNhbm5vdCBmb3VuZCcpXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0RXZlbnQoRVZFTlRfTkFNRVMuRVJSX0dFVF9TQ0FUVEVSX0ZBSUxFRCwgZXJyKVxuICAgICAgICAgICAgLy8gdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY2F0dGVyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJ5IGdldCBzY2F0dGVyIGFzeW5jIC0gaWYgbm90IGZpbmRcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2V0LXNjYXR0ZXIuY29tL2RvY3MvZXhhbXBsZXMtaW50ZXJhY3Rpb24tZmxvd1xuICAgICAqIEByZXR1cm4ge1NjYXR0ZXJ9XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldFNjYXR0ZXJBc3luYyhtYXhUcnkgPSAxMDApIDogUHJvbWlzZTxJU2NhdHRlcj4ge1xuICAgICAgICB3aGlsZSAoISh3aW5kb3cgYXMgYW55KS5zY2F0dGVyICYmIG1heFRyeS0tKSB7XG4gICAgICAgICAgICBsb2cudmVyYm9zZSgnZ2V0IHNjYXR0ZXIgZmFpbGVkLCByZXRyeSA6JywgbWF4VHJ5KVxuICAgICAgICAgICAgYXdhaXQgZm9yTXMoMTAwKVxuICAgICAgICB9XG4gICAgICAgIGlmICghKHdpbmRvdyBhcyBhbnkpLnNjYXR0ZXIpIHtcbiAgICAgICAgICAgIGxldCBlcnIgPSBuZXcgRXJyb3IoJ3NjYXR0ZXIgY2Fubm90IGZvdW5kJylcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfR0VUX1NDQVRURVJfRkFJTEVELCBlcnIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh3aW5kb3cgYXMgYW55KS5zY2F0dGVyXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbG9naW4gLSByZXF1aXJlIGFjY291bnQgaWRlbnRpdHkgZnJvbSBzY2F0dGVyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7SWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgbG9naW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldElkZW50aXR5KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsb2dvdXRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBsb2dvdXQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgKGF3YWl0IHRoaXMuZ2V0U2NhdHRlckFzeW5jKCkpLmZvcmdldElkZW50aXR5KClcbiAgICAgICAgICAgIGxvZy5pbmZvKGBsb2cgb3V0IGZyb20gJHt0aGlzLnN0b3JhZ2UuZ2V0KCdsYXRlc3RfY2hhaW5faWQnKX1gKVxuICAgICAgICAgICAgcmV0dXJuIHJldFxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXRFdmVudChFVkVOVF9OQU1FUy5FUlJfTE9HT1VUX0ZBSUxFRCwgZXJyKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG9yIGNyZWF0ZSBzY2F0dGVyXG4gICAgICogQHJldHVybiB7ZW9zQVBJfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZW9zQ2xpZW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Vvc0NsaWVudCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RoaXMuc2NhdHRlcicsIHRoaXMuc2NhdHRlcilcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGlzLm5ldENvbmYnLCB0aGlzLm5ldENvbmYpXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRW9zJywgRW9zKVxuICAgICAgICAgICAgdGhpcy5fZW9zQ2xpZW50ID0gdGhpcy5zY2F0dGVyLmVvcyh0aGlzLm5ldENvbmYsIEVvcywge30sIHRoaXMubmV0Q29uZi5wcm90b2NvbClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZW9zQ2xpZW50XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0SWRlbnRpdHkgb2YgY3VyIHNjYXR0ZXIgdXNlclxuICAgICAqIEBhdHRlbnRpb24gV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgY29uY3VycmVudCBnZXRJZGVudGl0eSByZXF1ZXN0cywgc2NhdHRlciB3aWxsIG9ubHkgcmV0dXJuIHRoZSBmaXJzdCBvbmUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx7SWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0SWRlbnRpdHkoKSB7XG4gICAgICAgIGxldCBzY2F0dGVyXyA9IGF3YWl0IHRoaXMuZ2V0U2NhdHRlckFzeW5jKClcblxuICAgICAgICBsZXQgb3JpZ2luQ2hhaW5JRCA9IHRoaXMuc3RvcmFnZS5nZXQoJ2xhdGVzdF9jaGFpbl9pZCcpXG4gICAgICAgIGxldCBjaGFpbklEID0gdGhpcy5uZXRDb25mLmNoYWluSWRcblxuICAgICAgICBpZiAoKCEhb3JpZ2luQ2hhaW5JRCkgJiYgY2hhaW5JRCAhPT0gb3JpZ2luQ2hhaW5JRCkge1xuICAgICAgICAgICAgbG9nLmluZm8oYGEgY2hhbmdpbmcgb2YgY2hhaW5faWQgZGV0ZWN0ZWQ6ICR7b3JpZ2luQ2hhaW5JRH0gLT4gJHtjaGFpbklEfSBgKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2dvdXQoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXQoJ2xhdGVzdF9jaGFpbl9pZCcsIGNoYWluSUQpXG5cbiAgICAgICAgLy8gdXNpbmcgbWVzc2FnZSBxdWV1ZSB0byBkZWxcbiAgICAgICAgbGV0IGlkZW50aXR5OiBJSWRlbnRpdHkgfCBFcnJvciB8IGFueVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZU9yRXJyb3IoaWRlbnRpdHlfOiBJSWRlbnRpdHkpIHtcbiAgICAgICAgICAgIGlkZW50aXR5ID0gaWRlbnRpdHlfXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlkZW50aXR5UmVjZWl2ZXIucHVzaChyZWNlaXZlSW5zdGFuY2VPckVycm9yKVxuXG4gICAgICAgIGlmICh0aGlzLmlkZW50aXR5UmVjZWl2ZXIubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIHNjYXR0ZXJfLmdldElkZW50aXR5KHtcbiAgICAgICAgICAgICAgICBhY2NvdW50czogW3RoaXMubmV0Q29uZl0gLy8gbmVlZCBzbG90ICdjaGFpbmlkJyBhbmQgJ2Jsb2NrY2hhaW4nXG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5UmVjZWl2ZXIuZm9yRWFjaChcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXIgPT4gcmVjZWl2ZXIoc2NhdHRlcl8uaWRlbnRpdHkuYWNjb3VudHMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgIChhY2M6IGFueSkgPT4gYWNjLmJsb2NrY2hhaW4gPT09ICdlb3MnKSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHlSZWNlaXZlciA9IFtdXG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHlSZWNlaXZlci5mb3JFYWNoKHJlY2VpdmVyID0+IHJlY2VpdmVyKGVycikpO1xuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHlSZWNlaXZlciA9IFtdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGZvckNvbmRpdGlvbigoKSA9PiAhIWlkZW50aXR5KSAvLyB1c2luZyB1bmRlZmluZWQgdG8gYmxvY2sgb3BlcmF0aW9uLCB1c2luZyBudWxsIHRvIGhhbmRsZSBlcnJvclxuXG4gICAgICAgIGlmIChpZGVudGl0eSBpbnN0YW5jZW9mIEVycm9yIHx8IChpZGVudGl0eS5pc0Vycm9yKSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdEV2ZW50KEVWRU5UX05BTUVTLkVSUl9HRVRfSURFTlRJVFlfRkFJTEVELCBpZGVudGl0eSk7XG4gICAgICAgICAgICB0aHJvdyBpZGVudGl0eVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkZW50aXR5XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2lnbiBhIG1lc3NhZ2Ugd2l0aCBjdXJyZW50IGlkZW50aXR5XG4gICAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSAtIHNpZ25lZCBkYXRhXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHNpZ24obWVzc2FnZSA6IHN0cmluZykge1xuICAgICAgICBsZXQgaWRlbnRpdHkgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5KClcbiAgICAgICAgbGV0IHB1YmtleXMgPSBhd2FpdCB0aGlzLmNoYWluLmdldFB1YktleXMoaWRlbnRpdHkubmFtZSwgaWRlbnRpdHkuYXV0aG9yaXR5KVxuXG4gICAgICAgIGxldCByZXQgPSAnJ1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHB1YmtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbG9nLmluZm8oYHRyeSBzaWduICgke0pTT04uc3RyaW5naWZ5KHB1YmtleXNbaV0pfSkgOiAke21lc3NhZ2V9YClcbiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLnNjYXR0ZXIuZ2V0QXJiaXRyYXJ5U2lnbmF0dXJlKHB1YmtleXNbaV0ua2V5LCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuaW5nKGB0cnkgcHViIGtleSBmYWlsZWQgJHtwdWJrZXlzW2ldfWApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIHB1YmxpYyBoZWxwKCkgOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gc3VwZXIuaGVscCgpICsgYFxuICBcbiMjIFVzYWdlIG9mIGVvc3BsYXllciAoZm9yIGJyb3N3ZXIpXG4gIFxuIyMjIEV2ZW50c1xuXG5FUlJfR0VUX1NDQVRURVJfRkFJTEVEICBcbkVSUl9HRVRfSURFTlRJVFlfRkFJTEVEICBcbkVSUl9MT0dPVVRfRkFJTEVEICBcblxuIyMjIEFQSXNcblxuXFxgXFxgXFxganNcbnt2b2lkfSBlb3NwbGF5ZXIuc3dpdGNoTmV0d29yayh2YWwpIC8vIHN3aXRjaCBuZXR3b3JrXG57dm9pZH0gZW9zcGxheWVyLnNldE5ldENvbmYobmV0d29ya19uYW1lLCBjb25mKSAvLyBhZGQgYSBuZXR3b3JrIGNvbmZpZyBhdCBydW50aW1lICAgIFxuXG5nZXQge1NjYXR0ZXJ9IGVvc3BsYXllci5zY2F0dGVyIC8vIGdldCBzY2F0dGVyIGluc3RhbmNlXG5nZXQge1NjYXR0ZXJ9IGFzeW5jIGdldFNjYXR0ZXJBc3luYyhtYXhUcnkgPSAxMDApIC8vIGdldCBzY2F0dGVyIGluc3RhbmNlXG5cbmdldCB7c3RyaW5nfSBlb3NwbGF5ZXIubmV0TmFtZSAvLyBnZXQgY3VycmVudCBuZXR3b3JrIG5hbWVcbmdldCB7c3RyaW5nfSBlb3NwbGF5ZXIubmV0Q29uZiAvLyBnZXQgY3VycmVudCBuZXR3b3JrIGNvbmZpZ1xuICAgICAgICBcbmFzeW5jIHtJZGVudGl0eX0gZW9zcGxheWVyLmxvZ2luKCkgLy8gbGV0IHVzZXIgYWxsb3cgeW91IHVzaW5nIGlkZW50aXR5XG5hc3luYyB7dm9pZH0gZW9zcGxheWVyLmxvZ291dCgpIC8vIHJldHVybiBiYWNrIHRoZSBpZGVudGl0eVxuXG5hc3luYyB7c3RyaW5nfSBzaWduKG1lc3NhZ2UpIC8vIHNpZ24gYSBtZXNzYWdlIHdpdGggY3VycmVudCBpZGVudGl0eVxuXFxgXFxgXFxgXG5cbiMjIEltcG9ydGVkIGxpYnNcblxuXFxgXFxgXFxganNcbndpbmRvdy5lb3NqcyA9IEVvczsgLyoqIHRoZSBlb3NqcyBsaWIgQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9lb3Nqc30gKi8gIFxud2luZG93LmVudiA9IGVudjsgLyoqIHtpc1BjfSAqLyAgXG53aW5kb3cuaWRiID0gaWRiOyAvKiogaWRiIGxpYiBmb3IgYnJvd3NlciBzdG9yYWdlIEBzZWUge0B1cmwgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaWRiIH0gKi8gXG53aW5kb3cuQmlnTnVtYmVyID0gQmlnTnVtYmVyOyAvKiogYmlnIG51bWJlciBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JpZ251bWJlci5qc30gKi9cblxud2luZG93LmtoLmVvcy5QbGF5ZXJcbndpbmRvdy5raC5lb3MuU2NhdHRlclBsYXllclxud2luZG93LmVvc3BsYXllciA9IG5ldyBTY2F0dGVyUGxheWVyKG5ldHdvcmtzKTsgIFxuXFxgXFxgXFxgICAgICAgICBcbmBcbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xudmFyIEJ5dGVCdWZmZXIgPSByZXF1aXJlKCdieXRlYnVmZmVyJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBQdWJsaWNLZXkgPSByZXF1aXJlKCcuL2tleV9wdWJsaWMnKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi9rZXlfcHJpdmF0ZScpO1xudmFyIGhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKTtcblxudmFyIExvbmcgPSBCeXRlQnVmZmVyLkxvbmc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGVuY3J5cHQ6IGVuY3J5cHQsXG4gICAgZGVjcnlwdDogZGVjcnlwdFxuXG4gICAgLyoqXG4gICAgICAgIFNwZWM6IGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMi9zdGVlbS9AZGFudGhlbWFuL2hvdy10by1lbmNyeXB0LWEtbWVtby13aGVuLXRyYW5zZmVycmluZy1zdGVlbVxuICAgIFxuICAgICAgICBAdGhyb3dzIHtFcnJvcnxUeXBlRXJyb3J9IC0gXCJJbnZhbGlkIEtleSwgLi4uXCJcbiAgICBcbiAgICAgICAgQGFyZyB7UHJpdmF0ZUtleX0gcHJpdmF0ZV9rZXkgLSByZXF1aXJlZCBhbmQgdXNlZCBmb3IgZGVjcnlwdGlvblxuICAgICAgICBAYXJnIHtQdWJsaWNLZXl9IHB1YmxpY19rZXkgLSByZXF1aXJlZCBhbmQgdXNlZCB0byBjYWxjdWFsdGUgdGhlIHNoYXJlZCBzZWNyZXRcbiAgICAgICAgQGFyZyB7c3RyaW5nfSBbbm9uY2UgPSB1bmlxdWVOb25jZSgpXSAtIGFzc2lnbmVkIGEgcmFuZG9tIHVuaXF1ZSB1aW50NjRcbiAgICBcbiAgICAgICAgQHJldHVybiB7b2JqZWN0fVxuICAgICAgICBAcHJvcGVydHkge3N0cmluZ30gbm9uY2UgLSByYW5kb20gb3IgdW5pcXVlIHVpbnQ2NCwgcHJvdmlkZXMgZW50cm9weSB3aGVuIHJlLXVzaW5nIHRoZSBzYW1lIHByaXZhdGUvcHVibGljIGtleXMuXG4gICAgICAgIEBwcm9wZXJ0eSB7QnVmZmVyfSBtZXNzYWdlIC0gUGxhaW4gdGV4dCBtZXNzYWdlXG4gICAgICAgIEBwcm9wZXJ0eSB7bnVtYmVyfSBjaGVja3N1bSAtIHNoYXJlZCBzZWNyZXQgY2hlY2tzdW1cbiAgICAqL1xufTtmdW5jdGlvbiBlbmNyeXB0KHByaXZhdGVfa2V5LCBwdWJsaWNfa2V5LCBtZXNzYWdlKSB7XG4gICAgdmFyIG5vbmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB1bmlxdWVOb25jZSgpO1xuXG4gICAgcmV0dXJuIGNyeXB0KHByaXZhdGVfa2V5LCBwdWJsaWNfa2V5LCBub25jZSwgbWVzc2FnZSk7XG59XG5cbi8qKlxuICAgIFNwZWM6IGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMi9zdGVlbS9AZGFudGhlbWFuL2hvdy10by1lbmNyeXB0LWEtbWVtby13aGVuLXRyYW5zZmVycmluZy1zdGVlbVxuXG4gICAgQGFyZyB7UHJpdmF0ZUtleX0gcHJpdmF0ZV9rZXkgLSByZXF1aXJlZCBhbmQgdXNlZCBmb3IgZGVjcnlwdGlvblxuICAgIEBhcmcge1B1YmxpY0tleX0gcHVibGljX2tleSAtIHJlcXVpcmVkIGFuZCB1c2VkIHRvIGNhbGN1YWx0ZSB0aGUgc2hhcmVkIHNlY3JldFxuICAgIEBhcmcge3N0cmluZ30gbm9uY2UgLSByYW5kb20gb3IgdW5pcXVlIHVpbnQ2NCwgcHJvdmlkZXMgZW50cm9weSB3aGVuIHJlLXVzaW5nIHRoZSBzYW1lIHByaXZhdGUvcHVibGljIGtleXMuXG4gICAgQGFyZyB7QnVmZmVyfSBtZXNzYWdlIC0gRW5jcnlwdGVkIG9yIHBsYWluIHRleHQgbWVzc2FnZVxuICAgIEBhcmcge251bWJlcn0gY2hlY2tzdW0gLSBzaGFyZWQgc2VjcmV0IGNoZWNrc3VtXG5cbiAgICBAdGhyb3dzIHtFcnJvcnxUeXBlRXJyb3J9IC0gXCJJbnZhbGlkIEtleSwgLi4uXCJcblxuICAgIEByZXR1cm4ge0J1ZmZlcn0gLSBtZXNzYWdlXG4qL1xuZnVuY3Rpb24gZGVjcnlwdChwcml2YXRlX2tleSwgcHVibGljX2tleSwgbm9uY2UsIG1lc3NhZ2UsIGNoZWNrc3VtKSB7XG4gICAgcmV0dXJuIGNyeXB0KHByaXZhdGVfa2V5LCBwdWJsaWNfa2V5LCBub25jZSwgbWVzc2FnZSwgY2hlY2tzdW0pLm1lc3NhZ2U7XG59XG5cbi8qKlxuICAgIEBhcmcge0J1ZmZlcn0gbWVzc2FnZSAtIEVuY3J5cHRlZCBvciBwbGFpbiB0ZXh0IG1lc3NhZ2UgKHNlZSBjaGVja3N1bSlcbiAgICBAYXJnIHtudW1iZXJ9IGNoZWNrc3VtIC0gc2hhcmVkIHNlY3JldCBjaGVja3N1bSAobnVsbCB0byBlbmNyeXB0LCBub24tbnVsbCB0byBkZWNyeXB0KVxuICAgIEBwcml2YXRlXG4qL1xuZnVuY3Rpb24gY3J5cHQocHJpdmF0ZV9rZXksIHB1YmxpY19rZXksIG5vbmNlLCBtZXNzYWdlLCBjaGVja3N1bSkge1xuICAgIHByaXZhdGVfa2V5ID0gUHJpdmF0ZUtleShwcml2YXRlX2tleSk7XG4gICAgaWYgKCFwcml2YXRlX2tleSkgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJpdmF0ZV9rZXkgaXMgcmVxdWlyZWQnKTtcblxuICAgIHB1YmxpY19rZXkgPSBQdWJsaWNLZXkocHVibGljX2tleSk7XG4gICAgaWYgKCFwdWJsaWNfa2V5KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdwdWJsaWNfa2V5IGlzIHJlcXVpcmVkJyk7XG5cbiAgICBub25jZSA9IHRvTG9uZ09iaihub25jZSk7XG4gICAgaWYgKCFub25jZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbm9uY2UgaXMgcmVxdWlyZWQnKTtcblxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKG1lc3NhZ2UpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21lc3NhZ2Ugc2hvdWxkIGJlIGJ1ZmZlciBvciBzdHJpbmcnKTtcbiAgICAgICAgbWVzc2FnZSA9IG5ldyBCdWZmZXIobWVzc2FnZSwgJ2JpbmFyeScpO1xuICAgIH1cbiAgICBpZiAoY2hlY2tzdW0gJiYgdHlwZW9mIGNoZWNrc3VtICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IFR5cGVFcnJvcignY2hlY2tzdW0gc2hvdWxkIGJlIGEgbnVtYmVyJyk7XG5cbiAgICB2YXIgUyA9IHByaXZhdGVfa2V5LmdldFNoYXJlZFNlY3JldChwdWJsaWNfa2V5KTtcbiAgICB2YXIgZWJ1ZiA9IG5ldyBCeXRlQnVmZmVyKEJ5dGVCdWZmZXIuREVGQVVMVF9DQVBBQ0lUWSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgICBlYnVmLndyaXRlVWludDY0KG5vbmNlKTtcbiAgICBlYnVmLmFwcGVuZChTLnRvU3RyaW5nKCdiaW5hcnknKSwgJ2JpbmFyeScpO1xuICAgIGVidWYgPSBuZXcgQnVmZmVyKGVidWYuY29weSgwLCBlYnVmLm9mZnNldCkudG9CaW5hcnkoKSwgJ2JpbmFyeScpO1xuICAgIHZhciBlbmNyeXB0aW9uX2tleSA9IGhhc2guc2hhNTEyKGVidWYpO1xuXG4gICAgLy8gRCBFIEIgVSBHXG4gICAgLy8gY29uc29sZS5sb2coJ2NyeXB0Jywge1xuICAgIC8vICAgICBwcml2X3RvX3B1YjogcHJpdmF0ZV9rZXkudG9QdWJsaWMoKS50b1N0cmluZygpLFxuICAgIC8vICAgICBwdWI6IHB1YmxpY19rZXkudG9TdHJpbmcoKSxcbiAgICAvLyAgICAgbm9uY2U6IG5vbmNlLnRvU3RyaW5nKCksXG4gICAgLy8gICAgIG1lc3NhZ2U6IG1lc3NhZ2UubGVuZ3RoLFxuICAgIC8vICAgICBjaGVja3N1bSxcbiAgICAvLyAgICAgUzogUy50b1N0cmluZygnaGV4JyksXG4gICAgLy8gICAgIGVuY3J5cHRpb25fa2V5OiBlbmNyeXB0aW9uX2tleS50b1N0cmluZygnaGV4JyksXG4gICAgLy8gfSlcblxuICAgIHZhciBpdiA9IGVuY3J5cHRpb25fa2V5LnNsaWNlKDMyLCA0OCk7XG4gICAgdmFyIGtleSA9IGVuY3J5cHRpb25fa2V5LnNsaWNlKDAsIDMyKTtcblxuICAgIC8vIGNoZWNrIGlzIGZpcnN0IDY0IGJpdCBvZiBzaGEyNTYgaGFzaCB0cmVhdGVkIGFzIHVpbnQ2NF90IHRydW5jYXRlZCB0byAzMiBiaXRzLlxuICAgIHZhciBjaGVjayA9IGhhc2guc2hhMjU2KGVuY3J5cHRpb25fa2V5KTtcbiAgICBjaGVjayA9IGNoZWNrLnNsaWNlKDAsIDQpO1xuICAgIHZhciBjYnVmID0gQnl0ZUJ1ZmZlci5mcm9tQmluYXJ5KGNoZWNrLnRvU3RyaW5nKCdiaW5hcnknKSwgQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuICAgIGNoZWNrID0gY2J1Zi5yZWFkVWludDMyKCk7XG5cbiAgICBpZiAoY2hlY2tzdW0pIHtcbiAgICAgICAgaWYgKGNoZWNrICE9PSBjaGVja3N1bSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGtleScpO1xuICAgICAgICBtZXNzYWdlID0gY3J5cHRvSnNEZWNyeXB0KG1lc3NhZ2UsIGtleSwgaXYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgPSBjcnlwdG9Kc0VuY3J5cHQobWVzc2FnZSwga2V5LCBpdik7XG4gICAgfVxuICAgIHJldHVybiB7IG5vbmNlOiBub25jZSwgbWVzc2FnZTogbWVzc2FnZSwgY2hlY2tzdW06IGNoZWNrIH07XG59XG5cbi8qKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB1c2UgYSBjaGVja3N1bSwgdGhlIHJldHVybmVkIGRhdGEgbXVzdCBiZSB2YWxpZGF0ZWQgc29tZSBvdGhlciB3YXkuXG5cbiAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBtZXNzYWdlIC0gY2lwaGVydGV4dCBiaW5hcnkgZm9ybWF0XG4gICAgQGFyZyB7c3RyaW5nPHV0Zjg+fEJ1ZmZlcn0ga2V5IC0gMjU2Yml0XG4gICAgQGFyZyB7c3RyaW5nPHV0Zjg+fEJ1ZmZlcn0gaXYgLSAxMjhiaXRcblxuICAgIEByZXR1cm4ge0J1ZmZlcn1cbiovXG5mdW5jdGlvbiBjcnlwdG9Kc0RlY3J5cHQobWVzc2FnZSwga2V5LCBpdikge1xuICAgIGFzc2VydChtZXNzYWdlLCBcIk1pc3NpbmcgY2lwaGVyIHRleHRcIik7XG4gICAgbWVzc2FnZSA9IHRvQmluYXJ5QnVmZmVyKG1lc3NhZ2UpO1xuICAgIHZhciBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KCdhZXMtMjU2LWNiYycsIGtleSwgaXYpO1xuICAgIC8vIGRlY2lwaGVyLnNldEF1dG9QYWRkaW5nKHRydWUpXG4gICAgbWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoW2RlY2lwaGVyLnVwZGF0ZShtZXNzYWdlKSwgZGVjaXBoZXIuZmluYWwoKV0pO1xuICAgIHJldHVybiBtZXNzYWdlO1xufVxuXG4vKiogVGhpcyBtZXRob2QgZG9lcyBub3QgdXNlIGEgY2hlY2tzdW0sIHRoZSByZXR1cm5lZCBkYXRhIG11c3QgYmUgdmFsaWRhdGVkIHNvbWUgb3RoZXIgd2F5LlxuICAgIEBhcmcge3N0cmluZ3xCdWZmZXJ9IG1lc3NhZ2UgLSBwbGFpbnRleHQgYmluYXJ5IGZvcm1hdFxuICAgIEBhcmcge3N0cmluZzx1dGY4PnxCdWZmZXJ9IGtleSAtIDI1NmJpdFxuICAgIEBhcmcge3N0cmluZzx1dGY4PnxCdWZmZXJ9IGl2IC0gMTI4Yml0XG5cbiAgICBAcmV0dXJuIHtCdWZmZXJ9XG4qL1xuZnVuY3Rpb24gY3J5cHRvSnNFbmNyeXB0KG1lc3NhZ2UsIGtleSwgaXYpIHtcbiAgICBhc3NlcnQobWVzc2FnZSwgXCJNaXNzaW5nIHBsYWluIHRleHRcIik7XG4gICAgbWVzc2FnZSA9IHRvQmluYXJ5QnVmZmVyKG1lc3NhZ2UpO1xuICAgIHZhciBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoJ2Flcy0yNTYtY2JjJywga2V5LCBpdik7XG4gICAgLy8gY2lwaGVyLnNldEF1dG9QYWRkaW5nKHRydWUpXG4gICAgbWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoW2NpcGhlci51cGRhdGUobWVzc2FnZSksIGNpcGhlci5maW5hbCgpXSk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG5cbi8qKiBAcmV0dXJuIHtzdHJpbmd9IHVuaXF1ZSA2NCBiaXQgdW5zaWduZWQgbnVtYmVyIHN0cmluZy4gIEJlaW5nIHRpbWUgYmFzZWQsIHRoaXMgaXMgY2FyZWZ1bCB0byBuZXZlciBjaG9vc2UgdGhlIHNhbWUgbm9uY2UgdHdpY2UuICBUaGlzIHZhbHVlIGNvdWxkIGJlIHJlY29yZGVkIGluIHRoZSBibG9ja2NoYWluIGZvciBhIGxvbmcgdGltZS5cbiovXG5mdW5jdGlvbiB1bmlxdWVOb25jZSgpIHtcbiAgICBpZiAodW5pcXVlX25vbmNlX2VudHJvcHkgPT09IG51bGwpIHtcbiAgICAgICAgdmFyIGIgPSBuZXcgVWludDhBcnJheShyYW5kb21CeXRlcygyKSk7XG4gICAgICAgIHVuaXF1ZV9ub25jZV9lbnRyb3B5ID0gcGFyc2VJbnQoYlswXSA8PCA4IHwgYlsxXSwgMTApO1xuICAgIH1cbiAgICB2YXIgbG9uZyA9IExvbmcuZnJvbU51bWJlcihEYXRlLm5vdygpKTtcbiAgICB2YXIgZW50cm9weSA9ICsrdW5pcXVlX25vbmNlX2VudHJvcHkgJSAweEZGRkY7XG4gICAgLy8gY29uc29sZS5sb2coJ3VuaXF1ZU5vbmNlIGRhdGVcXHQnLCBCeXRlQnVmZmVyLmFsbG9jYXRlKDgpLndyaXRlVWludDY0KGxvbmcpLnRvSGV4KDApKVxuICAgIC8vIGNvbnNvbGUubG9nKCd1bmlxdWVOb25jZSBlbnRyb3B5XFx0JywgQnl0ZUJ1ZmZlci5hbGxvY2F0ZSg4KS53cml0ZVVpbnQ2NChMb25nLmZyb21OdW1iZXIoZW50cm9weSkpLnRvSGV4KDApKVxuICAgIGxvbmcgPSBsb25nLnNoaWZ0TGVmdCgxNikub3IoTG9uZy5mcm9tTnVtYmVyKGVudHJvcHkpKTtcbiAgICAvLyBjb25zb2xlLmxvZygndW5pcXVlTm9uY2UgZmluYWxcXHQnLCBCeXRlQnVmZmVyLmFsbG9jYXRlKDgpLndyaXRlVWludDY0KGxvbmcpLnRvSGV4KDApKVxuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG52YXIgdW5pcXVlX25vbmNlX2VudHJvcHkgPSBudWxsO1xuLy8gZm9yKGxldCBpPTE7IGkgPCAxMDsgaSsrKSBrZXkudW5pcXVlTm9uY2UoKVxuXG52YXIgdG9Mb25nT2JqID0gZnVuY3Rpb24gdG9Mb25nT2JqKG8pIHtcbiAgICByZXR1cm4gbyA/IExvbmcuaXNMb25nKG8pID8gbyA6IExvbmcuZnJvbVN0cmluZyhvKSA6IG87XG59O1xudmFyIHRvQmluYXJ5QnVmZmVyID0gZnVuY3Rpb24gdG9CaW5hcnlCdWZmZXIobykge1xuICAgIHJldHVybiBvID8gQnVmZmVyLmlzQnVmZmVyKG8pID8gbyA6IG5ldyBCdWZmZXIobywgJ2JpbmFyeScpIDogbztcbn07IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignU2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cXG5Vc2UgQ2hyb21lLCBGaXJlZm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cblxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXNcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gb2xkQnJvd3NlclxufVxuXG5mdW5jdGlvbiByYW5kb21CeXRlcyAoc2l6ZSwgY2IpIHtcbiAgLy8gcGhhbnRvbWpzIG5lZWRzIHRvIHRocm93XG4gIGlmIChzaXplID4gNjU1MzYpIHRocm93IG5ldyBFcnJvcigncmVxdWVzdGVkIHRvbyBtYW55IHJhbmRvbSBieXRlcycpXG4gIC8vIGluIGNhc2UgYnJvd3NlcmlmeSAgaXNuJ3QgdXNpbmcgdGhlIFVpbnQ4QXJyYXkgdmVyc2lvblxuICB2YXIgcmF3Qnl0ZXMgPSBuZXcgZ2xvYmFsLlVpbnQ4QXJyYXkoc2l6ZSlcblxuICAvLyBUaGlzIHdpbGwgbm90IHdvcmsgaW4gb2xkZXIgYnJvd3NlcnMuXG4gIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXNcbiAgaWYgKHNpemUgPiAwKSB7ICAvLyBnZXRSYW5kb21WYWx1ZXMgZmFpbHMgb24gSUUgaWYgc2l6ZSA9PSAwXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYXdCeXRlcylcbiAgfVxuXG4gIC8vIFhYWDogcGhhbnRvbWpzIGRvZXNuJ3QgbGlrZSBhIGJ1ZmZlciBiZWluZyBwYXNzZWQgaGVyZVxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuZnJvbShyYXdCeXRlcy5idWZmZXIpXG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsInZhciBtb2RlTW9kdWxlcyA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL2N0cicpXG59XG5cbnZhciBtb2RlcyA9IHJlcXVpcmUoJy4vbGlzdC5qc29uJylcblxuZm9yICh2YXIga2V5IGluIG1vZGVzKSB7XG4gIG1vZGVzW2tleV0ubW9kdWxlID0gbW9kZU1vZHVsZXNbbW9kZXNba2V5XS5tb2RlXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGVzXG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuLi9pbmNyMzInKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgYmxvY2tTaXplID0gMTZcbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB2YXIgY2h1bmtOdW0gPSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKVxuICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9jYWNoZSxcbiAgICBCdWZmZXIuYWxsb2NVbnNhZmUoY2h1bmtOdW0gKiBibG9ja1NpemUpXG4gIF0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOdW07IGkrKykge1xuICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKVxuICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemVcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFswXSwgb2Zmc2V0ICsgMClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsxXSwgb2Zmc2V0ICsgNClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFszXSwgb2Zmc2V0ICsgMTIpXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsImZ1bmN0aW9uIGluY3IzMiAoaXYpIHtcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgaXRlbVxuICB3aGlsZSAobGVuLS0pIHtcbiAgICBpdGVtID0gaXYucmVhZFVJbnQ4KGxlbilcbiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7XG4gICAgICBpdi53cml0ZVVJbnQ4KDAsIGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSsrXG4gICAgICBpdi53cml0ZVVJbnQ4KGl0ZW0sIGxlbilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY3IzMlxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4vaW5jcjMyJylcblxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSBvdXQrK1xuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBjYWxjSXYgKHNlbGYsIGl2LCBjaykge1xuICBpZiAoaXYubGVuZ3RoID09PSAxMikge1xuICAgIHNlbGYuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxXSldKVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDJdKV0pXG4gIH1cbiAgdmFyIGdoYXNoID0gbmV3IEdIQVNIKGNrKVxuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciB0b1BhZCA9IGxlbiAlIDE2XG4gIGdoYXNoLnVwZGF0ZShpdilcbiAgaWYgKHRvUGFkKSB7XG4gICAgdG9QYWQgPSAxNiAtIHRvUGFkXG4gICAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyh0b1BhZCwgMCkpXG4gIH1cbiAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyg4LCAwKSlcbiAgdmFyIGl2Qml0cyA9IGxlbiAqIDhcbiAgdmFyIHRhaWwgPSBCdWZmZXIuYWxsb2MoOClcbiAgdGFpbC53cml0ZVVJbnRCRShpdkJpdHMsIDAsIDgpXG4gIGdoYXNoLnVwZGF0ZSh0YWlsKVxuICBzZWxmLl9maW5JRCA9IGdoYXNoLnN0YXRlXG4gIHZhciBvdXQgPSBCdWZmZXIuZnJvbShzZWxmLl9maW5JRClcbiAgaW5jcjMyKG91dClcbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdmFyIGggPSBCdWZmZXIuYWxsb2MoNCwgMClcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHZhciBjayA9IHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIGl2ID0gY2FsY0l2KHRoaXMsIGl2LCBjaylcblxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgdGhpcy5fbW9kZSA9IG1vZGVcblxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gQnVmZmVyLmFsbG9jKHJ1bXAsIDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cblxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgfHwgIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICh0aGlzLl9jYWxsZWQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTtcblN0cmVhbS5Xcml0YWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcycpO1xuU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTtcblN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnKTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cblxuXG4vLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50XG4vLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLlxuXG5mdW5jdGlvbiBTdHJlYW0oKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5cblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUpIHtcbiAgICAgIGlmIChmYWxzZSA9PT0gZGVzdC53cml0ZShjaHVuaykgJiYgc291cmNlLnBhdXNlKSB7XG4gICAgICAgIHNvdXJjZS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZGF0YScsIG9uZGF0YSk7XG5cbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cblxuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgLy8gc291cmNlIGdldHMgdGhlICdlbmQnIG9yICdjbG9zZScgZXZlbnRzLiAgT25seSBkZXN0LmVuZCgpIG9uY2UuXG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfVxuXG4gIHZhciBkaWRPbkVuZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcbiAgfVxuXG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7XG4gIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNvdXJjZSk7XG5cbiAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQylcbiAgcmV0dXJuIGRlc3Q7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCd3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTtcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59O1xuXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rLCB0aGlzLl9kZWNyeXB0KVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlCaXRzLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoc2FsdCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgJ2JpbmFyeScpXG4gICAgaWYgKHNhbHQubGVuZ3RoICE9PSA4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2FsdCBzaG91bGQgYmUgQnVmZmVyIHdpdGggOCBieXRlIGxlbmd0aCcpXG4gIH1cblxuICB2YXIga2V5TGVuID0ga2V5Qml0cyAvIDhcbiAgdmFyIGtleSA9IEJ1ZmZlci5hbGxvYyhrZXlMZW4pXG4gIHZhciBpdiA9IEJ1ZmZlci5hbGxvYyhpdkxlbiB8fCAwKVxuICB2YXIgdG1wID0gQnVmZmVyLmFsbG9jKDApXG5cbiAgd2hpbGUgKGtleUxlbiA+IDAgfHwgaXZMZW4gPiAwKSB7XG4gICAgdmFyIGhhc2ggPSBuZXcgTUQ1KClcbiAgICBoYXNoLnVwZGF0ZSh0bXApXG4gICAgaGFzaC51cGRhdGUocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIGhhc2gudXBkYXRlKHNhbHQpXG4gICAgdG1wID0gaGFzaC5kaWdlc3QoKVxuXG4gICAgdmFyIHVzZWQgPSAwXG5cbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgdmFyIGtleVN0YXJ0ID0ga2V5Lmxlbmd0aCAtIGtleUxlblxuICAgICAgdXNlZCA9IE1hdGgubWluKGtleUxlbiwgdG1wLmxlbmd0aClcbiAgICAgIHRtcC5jb3B5KGtleSwga2V5U3RhcnQsIDAsIHVzZWQpXG4gICAgICBrZXlMZW4gLT0gdXNlZFxuICAgIH1cblxuICAgIGlmICh1c2VkIDwgdG1wLmxlbmd0aCAmJiBpdkxlbiA+IDApIHtcbiAgICAgIHZhciBpdlN0YXJ0ID0gaXYubGVuZ3RoIC0gaXZMZW5cbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihpdkxlbiwgdG1wLmxlbmd0aCAtIHVzZWQpXG4gICAgICB0bXAuY29weShpdiwgaXZTdGFydCwgdXNlZCwgdXNlZCArIGxlbmd0aClcbiAgICAgIGl2TGVuIC09IGxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHRtcC5maWxsKDApXG4gIHJldHVybiB7IGtleToga2V5LCBpdjogaXYgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIgKHZhbCwgcHJlZml4KSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbCkgJiYgdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHByZWZpeCArICcgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpXG4gIH1cbn1cblxuZnVuY3Rpb24gSGFzaEJhc2UgKGJsb2NrU2l6ZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2NrU2l6ZSlcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB0aGlzLl9sZW5ndGggPSBbMCwgMCwgMCwgMF1cblxuICB0aGlzLl9maW5hbGl6ZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhIYXNoQmFzZSwgVHJhbnNmb3JtKVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnVwZGF0ZShjaHVuaywgZW5jb2RpbmcpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIoZGF0YSwgJ0RhdGEnKVxuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpXG5cbiAgLy8gY29uc3VtZSBkYXRhXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBvZmZzZXQgPSAwXG4gIHdoaWxlICh0aGlzLl9ibG9ja09mZnNldCArIGRhdGEubGVuZ3RoIC0gb2Zmc2V0ID49IHRoaXMuX2Jsb2NrU2l6ZSkge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLl9ibG9ja09mZnNldDsgaSA8IHRoaXMuX2Jsb2NrU2l6ZTspIGJsb2NrW2krK10gPSBkYXRhW29mZnNldCsrXVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cbiAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSBibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IGRhdGFbb2Zmc2V0KytdXG5cbiAgLy8gdXBkYXRlIGxlbmd0aFxuICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBkYXRhLmxlbmd0aCAqIDg7IGNhcnJ5ID4gMDsgKytqKSB7XG4gICAgdGhpcy5fbGVuZ3RoW2pdICs9IGNhcnJ5XG4gICAgY2FycnkgPSAodGhpcy5fbGVuZ3RoW2pdIC8gMHgwMTAwMDAwMDAwKSB8IDBcbiAgICBpZiAoY2FycnkgPiAwKSB0aGlzLl9sZW5ndGhbal0gLT0gMHgwMTAwMDAwMDAwICogY2FycnlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIHRoaXMuX2ZpbmFsaXplZCA9IHRydWVcblxuICB2YXIgZGlnZXN0ID0gdGhpcy5fZGlnZXN0KClcbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIGRpZ2VzdCA9IGRpZ2VzdC50b1N0cmluZyhlbmNvZGluZylcblxuICAvLyByZXNldCBzdGF0ZVxuICB0aGlzLl9ibG9jay5maWxsKDApXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkgdGhpcy5fbGVuZ3RoW2ldID0gMFxuXG4gIHJldHVybiBkaWdlc3Rcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX2RpZ2VzdCBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hCYXNlXG4iLCJ2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcblxudmFyIFRIUkVFID0gQmlnSW50ZWdlci52YWx1ZU9mKDMpXG5cbmZ1bmN0aW9uIFBvaW50IChjdXJ2ZSwgeCwgeSwgeikge1xuICBhc3NlcnQubm90U3RyaWN0RXF1YWwoeiwgdW5kZWZpbmVkLCAnTWlzc2luZyBaIGNvb3JkaW5hdGUnKVxuXG4gIHRoaXMuY3VydmUgPSBjdXJ2ZVxuICB0aGlzLnggPSB4XG4gIHRoaXMueSA9IHlcbiAgdGhpcy56ID0gelxuICB0aGlzLl96SW52ID0gbnVsbFxuXG4gIHRoaXMuY29tcHJlc3NlZCA9IHRydWVcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFBvaW50LnByb3RvdHlwZSwgJ3pJbnYnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl96SW52ID09PSBudWxsKSB7XG4gICAgICB0aGlzLl96SW52ID0gdGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5wKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl96SW52XG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICdhZmZpbmVYJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy54Lm11bHRpcGx5KHRoaXMuekludikubW9kKHRoaXMuY3VydmUucClcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFBvaW50LnByb3RvdHlwZSwgJ2FmZmluZVknLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnkubXVsdGlwbHkodGhpcy56SW52KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICB9XG59KVxuXG5Qb2ludC5mcm9tQWZmaW5lID0gZnVuY3Rpb24gKGN1cnZlLCB4LCB5KSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIHgsIHksIEJpZ0ludGVnZXIuT05FKVxufVxuXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIGlmIChvdGhlciA9PT0gdGhpcykgcmV0dXJuIHRydWVcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIHRoaXMuY3VydmUuaXNJbmZpbml0eShvdGhlcilcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eShvdGhlcikpIHJldHVybiB0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcylcblxuICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgdmFyIHUgPSBvdGhlci55Lm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55Lm11bHRpcGx5KG90aGVyLnopKS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIGlmICh1LnNpZ251bSgpICE9PSAwKSByZXR1cm4gZmFsc2VcblxuICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgdmFyIHYgPSBvdGhlci54Lm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54Lm11bHRpcGx5KG90aGVyLnopKS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIHJldHVybiB2LnNpZ251bSgpID09PSAwXG59XG5cblBvaW50LnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB5ID0gdGhpcy5jdXJ2ZS5wLnN1YnRyYWN0KHRoaXMueSlcblxuICByZXR1cm4gbmV3IFBvaW50KHRoaXMuY3VydmUsIHRoaXMueCwgeSwgdGhpcy56KVxufVxuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIGJcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eShiKSkgcmV0dXJuIHRoaXNcblxuICB2YXIgeDEgPSB0aGlzLnhcbiAgdmFyIHkxID0gdGhpcy55XG4gIHZhciB4MiA9IGIueFxuICB2YXIgeTIgPSBiLnlcblxuICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgdmFyIHUgPSB5Mi5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHkxLm11bHRpcGx5KGIueikpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHYgPSBYMiAqIFoxIC0gWDEgKiBaMlxuICB2YXIgdiA9IHgyLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QoeDEubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucClcblxuICBpZiAodi5zaWdudW0oKSA9PT0gMCkge1xuICAgIGlmICh1LnNpZ251bSgpID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy50d2ljZSgpIC8vIHRoaXMgPT0gYiwgc28gZG91YmxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuaW5maW5pdHkgLy8gdGhpcyA9IC1iLCBzbyBpbmZpbml0eVxuICB9XG5cbiAgdmFyIHYyID0gdi5zcXVhcmUoKVxuICB2YXIgdjMgPSB2Mi5tdWx0aXBseSh2KVxuICB2YXIgeDF2MiA9IHgxLm11bHRpcGx5KHYyKVxuICB2YXIgenUyID0gdS5zcXVhcmUoKS5tdWx0aXBseSh0aGlzLnopXG5cbiAgLy8geDMgPSB2ICogKHoyICogKHoxICogdV4yIC0gMiAqIHgxICogdl4yKSAtIHZeMylcbiAgdmFyIHgzID0genUyLnN1YnRyYWN0KHgxdjIuc2hpZnRMZWZ0KDEpKS5tdWx0aXBseShiLnopLnN1YnRyYWN0KHYzKS5tdWx0aXBseSh2KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB5MyA9IHoyICogKDMgKiB4MSAqIHUgKiB2XjIgLSB5MSAqIHZeMyAtIHoxICogdV4zKSArIHUgKiB2XjNcbiAgdmFyIHkzID0geDF2Mi5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkodSkuc3VidHJhY3QoeTEubXVsdGlwbHkodjMpKS5zdWJ0cmFjdCh6dTIubXVsdGlwbHkodSkpLm11bHRpcGx5KGIueikuYWRkKHUubXVsdGlwbHkodjMpKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB6MyA9IHZeMyAqIHoxICogejJcbiAgdmFyIHozID0gdjMubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShiLnopLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB4MywgeTMsIHozKVxufVxuXG5Qb2ludC5wcm90b3R5cGUudHdpY2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiB0aGlzXG4gIGlmICh0aGlzLnkuc2lnbnVtKCkgPT09IDApIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5XG5cbiAgdmFyIHgxID0gdGhpcy54XG4gIHZhciB5MSA9IHRoaXMueVxuXG4gIHZhciB5MXoxID0geTEubXVsdGlwbHkodGhpcy56KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICB2YXIgeTFzcXoxID0geTF6MS5tdWx0aXBseSh5MSkubW9kKHRoaXMuY3VydmUucClcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmFcblxuICAvLyB3ID0gMyAqIHgxXjIgKyBhICogejFeMlxuICB2YXIgdyA9IHgxLnNxdWFyZSgpLm11bHRpcGx5KFRIUkVFKVxuXG4gIGlmIChhLnNpZ251bSgpICE9PSAwKSB7XG4gICAgdyA9IHcuYWRkKHRoaXMuei5zcXVhcmUoKS5tdWx0aXBseShhKSlcbiAgfVxuXG4gIHcgPSB3Lm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHgzID0gMiAqIHkxICogejEgKiAod14yIC0gOCAqIHgxICogeTFeMiAqIHoxKVxuICB2YXIgeDMgPSB3LnNxdWFyZSgpLnN1YnRyYWN0KHgxLnNoaWZ0TGVmdCgzKS5tdWx0aXBseSh5MXNxejEpKS5zaGlmdExlZnQoMSkubXVsdGlwbHkoeTF6MSkubW9kKHRoaXMuY3VydmUucClcbiAgLy8geTMgPSA0ICogeTFeMiAqIHoxICogKDMgKiB3ICogeDEgLSAyICogeTFeMiAqIHoxKSAtIHdeM1xuICB2YXIgeTMgPSB3Lm11bHRpcGx5KFRIUkVFKS5tdWx0aXBseSh4MSkuc3VidHJhY3QoeTFzcXoxLnNoaWZ0TGVmdCgxKSkuc2hpZnRMZWZ0KDIpLm11bHRpcGx5KHkxc3F6MSkuc3VidHJhY3Qody5wb3coMykpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHozID0gOCAqICh5MSAqIHoxKV4zXG4gIHZhciB6MyA9IHkxejEucG93KDMpLnNoaWZ0TGVmdCgzKS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIHJldHVybiBuZXcgUG9pbnQodGhpcy5jdXJ2ZSwgeDMsIHkzLCB6Mylcbn1cblxuLy8gU2ltcGxlIE5BRiAoTm9uLUFkamFjZW50IEZvcm0pIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuLy8gVE9ETzogbW9kdWxhcml6ZSB0aGUgbXVsdGlwbGljYXRpb24gYWxnb3JpdGhtXG5Qb2ludC5wcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbiAoaykge1xuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gdGhpc1xuICBpZiAoay5zaWdudW0oKSA9PT0gMCkgcmV0dXJuIHRoaXMuY3VydmUuaW5maW5pdHlcblxuICB2YXIgZSA9IGtcbiAgdmFyIGggPSBlLm11bHRpcGx5KFRIUkVFKVxuXG4gIHZhciBuZWcgPSB0aGlzLm5lZ2F0ZSgpXG4gIHZhciBSID0gdGhpc1xuXG4gIGZvciAodmFyIGkgPSBoLmJpdExlbmd0aCgpIC0gMjsgaSA+IDA7IC0taSkge1xuICAgIHZhciBoQml0ID0gaC50ZXN0Qml0KGkpXG4gICAgdmFyIGVCaXQgPSBlLnRlc3RCaXQoaSlcblxuICAgIFIgPSBSLnR3aWNlKClcblxuICAgIGlmIChoQml0ICE9PSBlQml0KSB7XG4gICAgICBSID0gUi5hZGQoaEJpdCA/IHRoaXMgOiBuZWcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJcbn1cblxuLy8gQ29tcHV0ZSB0aGlzKmogKyB4KmsgKHNpbXVsdGFuZW91cyBtdWx0aXBsaWNhdGlvbilcblBvaW50LnByb3RvdHlwZS5tdWx0aXBseVR3byA9IGZ1bmN0aW9uIChqLCB4LCBrKSB7XG4gIHZhciBpID0gTWF0aC5tYXgoai5iaXRMZW5ndGgoKSwgay5iaXRMZW5ndGgoKSkgLSAxXG4gIHZhciBSID0gdGhpcy5jdXJ2ZS5pbmZpbml0eVxuICB2YXIgYm90aCA9IHRoaXMuYWRkKHgpXG5cbiAgd2hpbGUgKGkgPj0gMCkge1xuICAgIHZhciBqQml0ID0gai50ZXN0Qml0KGkpXG4gICAgdmFyIGtCaXQgPSBrLnRlc3RCaXQoaSlcblxuICAgIFIgPSBSLnR3aWNlKClcblxuICAgIGlmIChqQml0KSB7XG4gICAgICBpZiAoa0JpdCkge1xuICAgICAgICBSID0gUi5hZGQoYm90aClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFIgPSBSLmFkZCh0aGlzKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa0JpdCkge1xuICAgICAgUiA9IFIuYWRkKHgpXG4gICAgfVxuICAgIC0taVxuICB9XG5cbiAgcmV0dXJuIFJcbn1cblxuUG9pbnQucHJvdG90eXBlLmdldEVuY29kZWQgPSBmdW5jdGlvbiAoY29tcHJlc3NlZCkge1xuICBpZiAoY29tcHJlc3NlZCA9PSBudWxsKSBjb21wcmVzc2VkID0gdGhpcy5jb21wcmVzc2VkXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiBCdWZmZXIuYWxsb2MoMSwgMCkgLy8gSW5maW5pdHkgcG9pbnQgZW5jb2RlZCBpcyBzaW1wbHkgJzAwJ1xuXG4gIHZhciB4ID0gdGhpcy5hZmZpbmVYXG4gIHZhciB5ID0gdGhpcy5hZmZpbmVZXG4gIHZhciBieXRlTGVuZ3RoID0gdGhpcy5jdXJ2ZS5wTGVuZ3RoXG4gIHZhciBidWZmZXJcblxuICAvLyAweDAyLzB4MDMgfCBYXG4gIGlmIChjb21wcmVzc2VkKSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyBieXRlTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KHkuaXNFdmVuKCkgPyAweDAyIDogMHgwMywgMClcblxuICAvLyAweDA0IHwgWCB8IFlcbiAgfSBlbHNlIHtcbiAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMSArIGJ5dGVMZW5ndGggKyBieXRlTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KDB4MDQsIDApXG5cbiAgICB5LnRvQnVmZmVyKGJ5dGVMZW5ndGgpLmNvcHkoYnVmZmVyLCAxICsgYnl0ZUxlbmd0aClcbiAgfVxuXG4gIHgudG9CdWZmZXIoYnl0ZUxlbmd0aCkuY29weShidWZmZXIsIDEpXG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5Qb2ludC5kZWNvZGVGcm9tID0gZnVuY3Rpb24gKGN1cnZlLCBidWZmZXIpIHtcbiAgdmFyIHR5cGUgPSBidWZmZXIucmVhZFVJbnQ4KDApXG4gIHZhciBjb21wcmVzc2VkID0gKHR5cGUgIT09IDQpXG5cbiAgdmFyIGJ5dGVMZW5ndGggPSBNYXRoLmZsb29yKChjdXJ2ZS5wLmJpdExlbmd0aCgpICsgNykgLyA4KVxuICB2YXIgeCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWZmZXIuc2xpY2UoMSwgMSArIGJ5dGVMZW5ndGgpKVxuXG4gIHZhciBRXG4gIGlmIChjb21wcmVzc2VkKSB7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5sZW5ndGgsIGJ5dGVMZW5ndGggKyAxLCAnSW52YWxpZCBzZXF1ZW5jZSBsZW5ndGgnKVxuICAgIGFzc2VydCh0eXBlID09PSAweDAyIHx8IHR5cGUgPT09IDB4MDMsICdJbnZhbGlkIHNlcXVlbmNlIHRhZycpXG5cbiAgICB2YXIgaXNPZGQgPSAodHlwZSA9PT0gMHgwMylcbiAgICBRID0gY3VydmUucG9pbnRGcm9tWChpc09kZCwgeClcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnQuZXF1YWwoYnVmZmVyLmxlbmd0aCwgMSArIGJ5dGVMZW5ndGggKyBieXRlTGVuZ3RoLCAnSW52YWxpZCBzZXF1ZW5jZSBsZW5ndGgnKVxuXG4gICAgdmFyIHkgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEgKyBieXRlTGVuZ3RoKSlcbiAgICBRID0gUG9pbnQuZnJvbUFmZmluZShjdXJ2ZSwgeCwgeSlcbiAgfVxuXG4gIFEuY29tcHJlc3NlZCA9IGNvbXByZXNzZWRcbiAgcmV0dXJuIFFcbn1cblxuUG9pbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gJyhJTkZJTklUWSknXG5cbiAgcmV0dXJuICcoJyArIHRoaXMuYWZmaW5lWC50b1N0cmluZygpICsgJywnICsgdGhpcy5hZmZpbmVZLnRvU3RyaW5nKCkgKyAnKSdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb2ludFxuIiwiLy8gKHB1YmxpYykgQ29uc3RydWN0b3JcbmZ1bmN0aW9uIEJpZ0ludGVnZXIoYSwgYiwgYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQmlnSW50ZWdlcikpXG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGEsIGIsIGMpXG5cbiAgaWYgKGEgIT0gbnVsbCkge1xuICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiBhKSB0aGlzLmZyb21OdW1iZXIoYSwgYiwgYylcbiAgICBlbHNlIGlmIChiID09IG51bGwgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgYSkgdGhpcy5mcm9tU3RyaW5nKGEsIDI1NilcbiAgICBlbHNlIHRoaXMuZnJvbVN0cmluZyhhLCBiKVxuICB9XG59XG5cbnZhciBwcm90byA9IEJpZ0ludGVnZXIucHJvdG90eXBlXG5cbi8vIGR1Y2stdHlwZWQgaXNCaWdJbnRlZ2VyXG5wcm90by5fX2JpZ2kgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uXG5CaWdJbnRlZ2VyLmlzQmlnSW50ZWdlciA9IGZ1bmN0aW9uIChvYmosIGNoZWNrX3Zlcikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2JpZ2kgJiYgKCFjaGVja192ZXIgfHwgb2JqLl9fYmlnaSA9PT0gcHJvdG8uX19iaWdpKVxufVxuXG4vLyBCaXRzIHBlciBkaWdpdFxudmFyIGRiaXRzXG5cbi8vIGFtOiBDb21wdXRlIHdfaiArPSAoeCp0aGlzX2kpLCBwcm9wYWdhdGUgY2Fycmllcyxcbi8vIGMgaXMgaW5pdGlhbCBjYXJyeSwgcmV0dXJucyBmaW5hbCBjYXJyeS5cbi8vIGMgPCAzKmR2YWx1ZSwgeCA8IDIqZHZhbHVlLCB0aGlzX2kgPCBkdmFsdWVcbi8vIFdlIG5lZWQgdG8gc2VsZWN0IHRoZSBmYXN0ZXN0IG9uZSB0aGF0IHdvcmtzIGluIHRoaXMgZW52aXJvbm1lbnQuXG5cbi8vIGFtMTogdXNlIGEgc2luZ2xlIG11bHQgYW5kIGRpdmlkZSB0byBnZXQgdGhlIGhpZ2ggYml0cyxcbi8vIG1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSAyNiBiZWNhdXNlXG4vLyBtYXggaW50ZXJuYWwgdmFsdWUgPSAyKmR2YWx1ZV4yLTIqZHZhbHVlICg8IDJeNTMpXG5mdW5jdGlvbiBhbTEoaSwgeCwgdywgaiwgYywgbikge1xuICB3aGlsZSAoLS1uID49IDApIHtcbiAgICB2YXIgdiA9IHggKiB0aGlzW2krK10gKyB3W2pdICsgY1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyAweDQwMDAwMDApXG4gICAgd1tqKytdID0gdiAmIDB4M2ZmZmZmZlxuICB9XG4gIHJldHVybiBjXG59XG4vLyBhbTIgYXZvaWRzIGEgYmlnIG11bHQtYW5kLWV4dHJhY3QgY29tcGxldGVseS5cbi8vIE1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSA8PSAzMCBiZWNhdXNlIHdlIGRvIGJpdHdpc2Ugb3BzXG4vLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG5mdW5jdGlvbiBhbTIoaSwgeCwgdywgaiwgYywgbikge1xuICB2YXIgeGwgPSB4ICYgMHg3ZmZmLFxuICAgIHhoID0geCA+PiAxNVxuICB3aGlsZSAoLS1uID49IDApIHtcbiAgICB2YXIgbCA9IHRoaXNbaV0gJiAweDdmZmZcbiAgICB2YXIgaCA9IHRoaXNbaSsrXSA+PiAxNVxuICAgIHZhciBtID0geGggKiBsICsgaCAqIHhsXG4gICAgbCA9IHhsICogbCArICgobSAmIDB4N2ZmZikgPDwgMTUpICsgd1tqXSArIChjICYgMHgzZmZmZmZmZilcbiAgICBjID0gKGwgPj4+IDMwKSArIChtID4+PiAxNSkgKyB4aCAqIGggKyAoYyA+Pj4gMzApXG4gICAgd1tqKytdID0gbCAmIDB4M2ZmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuLy8gQWx0ZXJuYXRlbHksIHNldCBtYXggZGlnaXQgYml0cyB0byAyOCBzaW5jZSBzb21lXG4vLyBicm93c2VycyBzbG93IGRvd24gd2hlbiBkZWFsaW5nIHdpdGggMzItYml0IG51bWJlcnMuXG5mdW5jdGlvbiBhbTMoaSwgeCwgdywgaiwgYywgbikge1xuICB2YXIgeGwgPSB4ICYgMHgzZmZmLFxuICAgIHhoID0geCA+PiAxNFxuICB3aGlsZSAoLS1uID49IDApIHtcbiAgICB2YXIgbCA9IHRoaXNbaV0gJiAweDNmZmZcbiAgICB2YXIgaCA9IHRoaXNbaSsrXSA+PiAxNFxuICAgIHZhciBtID0geGggKiBsICsgaCAqIHhsXG4gICAgbCA9IHhsICogbCArICgobSAmIDB4M2ZmZikgPDwgMTQpICsgd1tqXSArIGNcbiAgICBjID0gKGwgPj4gMjgpICsgKG0gPj4gMTQpICsgeGggKiBoXG4gICAgd1tqKytdID0gbCAmIDB4ZmZmZmZmZlxuICB9XG4gIHJldHVybiBjXG59XG5cbi8vIHd0Zj9cbkJpZ0ludGVnZXIucHJvdG90eXBlLmFtID0gYW0xXG5kYml0cyA9IDI2XG5cbkJpZ0ludGVnZXIucHJvdG90eXBlLkRCID0gZGJpdHNcbkJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxIDw8IGRiaXRzKSAtIDEpXG52YXIgRFYgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5EViA9ICgxIDw8IGRiaXRzKVxuXG52YXIgQklfRlAgPSA1MlxuQmlnSW50ZWdlci5wcm90b3R5cGUuRlYgPSBNYXRoLnBvdygyLCBCSV9GUClcbkJpZ0ludGVnZXIucHJvdG90eXBlLkYxID0gQklfRlAgLSBkYml0c1xuQmlnSW50ZWdlci5wcm90b3R5cGUuRjIgPSAyICogZGJpdHMgLSBCSV9GUFxuXG4vLyBEaWdpdCBjb252ZXJzaW9uc1xudmFyIEJJX1JNID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIlxudmFyIEJJX1JDID0gbmV3IEFycmF5KClcbnZhciByciwgdnZcbnJyID0gXCIwXCIuY2hhckNvZGVBdCgwKVxuZm9yICh2diA9IDA7IHZ2IDw9IDk7ICsrdnYpIEJJX1JDW3JyKytdID0gdnZcbnJyID0gXCJhXCIuY2hhckNvZGVBdCgwKVxuZm9yICh2diA9IDEwOyB2diA8IDM2OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2XG5yciA9IFwiQVwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2dlxuXG5mdW5jdGlvbiBpbnQyY2hhcihuKSB7XG4gIHJldHVybiBCSV9STS5jaGFyQXQobilcbn1cblxuZnVuY3Rpb24gaW50QXQocywgaSkge1xuICB2YXIgYyA9IEJJX1JDW3MuY2hhckNvZGVBdChpKV1cbiAgcmV0dXJuIChjID09IG51bGwpID8gLTEgOiBjXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvcHkgdGhpcyB0byByXG5mdW5jdGlvbiBibnBDb3B5VG8ocikge1xuICBmb3IgKHZhciBpID0gdGhpcy50IC0gMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSB0aGlzW2ldXG4gIHIudCA9IHRoaXMudFxuICByLnMgPSB0aGlzLnNcbn1cblxuLy8gKHByb3RlY3RlZCkgc2V0IGZyb20gaW50ZWdlciB2YWx1ZSB4LCAtRFYgPD0geCA8IERWXG5mdW5jdGlvbiBibnBGcm9tSW50KHgpIHtcbiAgdGhpcy50ID0gMVxuICB0aGlzLnMgPSAoeCA8IDApID8gLTEgOiAwXG4gIGlmICh4ID4gMCkgdGhpc1swXSA9IHhcbiAgZWxzZSBpZiAoeCA8IC0xKSB0aGlzWzBdID0geCArIERWXG4gIGVsc2UgdGhpcy50ID0gMFxufVxuXG4vLyByZXR1cm4gYmlnaW50IGluaXRpYWxpemVkIHRvIHZhbHVlXG5mdW5jdGlvbiBuYnYoaSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgci5mcm9tSW50KGkpXG4gIHJldHVybiByXG59XG5cbi8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIHN0cmluZyBhbmQgcmFkaXhcbmZ1bmN0aW9uIGJucEZyb21TdHJpbmcocywgYikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICB2YXIga1xuICBpZiAoYiA9PSAxNikgayA9IDRcbiAgZWxzZSBpZiAoYiA9PSA4KSBrID0gM1xuICBlbHNlIGlmIChiID09IDI1NikgayA9IDg7IC8vIGJ5dGUgYXJyYXlcbiAgZWxzZSBpZiAoYiA9PSAyKSBrID0gMVxuICBlbHNlIGlmIChiID09IDMyKSBrID0gNVxuICBlbHNlIGlmIChiID09IDQpIGsgPSAyXG4gIGVsc2Uge1xuICAgIHNlbGYuZnJvbVJhZGl4KHMsIGIpXG4gICAgcmV0dXJuXG4gIH1cbiAgc2VsZi50ID0gMFxuICBzZWxmLnMgPSAwXG4gIHZhciBpID0gcy5sZW5ndGgsXG4gICAgbWkgPSBmYWxzZSxcbiAgICBzaCA9IDBcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdmFyIHggPSAoayA9PSA4KSA/IHNbaV0gJiAweGZmIDogaW50QXQocywgaSlcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIikgbWkgPSB0cnVlXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBtaSA9IGZhbHNlXG4gICAgaWYgKHNoID09IDApXG4gICAgICBzZWxmW3NlbGYudCsrXSA9IHhcbiAgICBlbHNlIGlmIChzaCArIGsgPiBzZWxmLkRCKSB7XG4gICAgICBzZWxmW3NlbGYudCAtIDFdIHw9ICh4ICYgKCgxIDw8IChzZWxmLkRCIC0gc2gpKSAtIDEpKSA8PCBzaFxuICAgICAgc2VsZltzZWxmLnQrK10gPSAoeCA+PiAoc2VsZi5EQiAtIHNoKSlcbiAgICB9IGVsc2VcbiAgICAgIHNlbGZbc2VsZi50IC0gMV0gfD0geCA8PCBzaFxuICAgIHNoICs9IGtcbiAgICBpZiAoc2ggPj0gc2VsZi5EQikgc2ggLT0gc2VsZi5EQlxuICB9XG4gIGlmIChrID09IDggJiYgKHNbMF0gJiAweDgwKSAhPSAwKSB7XG4gICAgc2VsZi5zID0gLTFcbiAgICBpZiAoc2ggPiAwKSBzZWxmW3NlbGYudCAtIDFdIHw9ICgoMSA8PCAoc2VsZi5EQiAtIHNoKSkgLSAxKSA8PCBzaFxuICB9XG4gIHNlbGYuY2xhbXAoKVxuICBpZiAobWkpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhzZWxmLCBzZWxmKVxufVxuXG4vLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHNcbmZ1bmN0aW9uIGJucENsYW1wKCkge1xuICB2YXIgYyA9IHRoaXMucyAmIHRoaXMuRE1cbiAgd2hpbGUgKHRoaXMudCA+IDAgJiYgdGhpc1t0aGlzLnQgLSAxXSA9PSBjKS0tdGhpcy50XG59XG5cbi8vIChwdWJsaWMpIHJldHVybiBzdHJpbmcgcmVwcmVzZW50YXRpb24gaW4gZ2l2ZW4gcmFkaXhcbmZ1bmN0aW9uIGJuVG9TdHJpbmcoYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHNlbGYucyA8IDApIHJldHVybiBcIi1cIiArIHNlbGYubmVnYXRlKClcbiAgICAudG9TdHJpbmcoYilcbiAgdmFyIGtcbiAgaWYgKGIgPT0gMTYpIGsgPSA0XG4gIGVsc2UgaWYgKGIgPT0gOCkgayA9IDNcbiAgZWxzZSBpZiAoYiA9PSAyKSBrID0gMVxuICBlbHNlIGlmIChiID09IDMyKSBrID0gNVxuICBlbHNlIGlmIChiID09IDQpIGsgPSAyXG4gIGVsc2UgcmV0dXJuIHNlbGYudG9SYWRpeChiKVxuICB2YXIga20gPSAoMSA8PCBrKSAtIDEsXG4gICAgZCwgbSA9IGZhbHNlLFxuICAgIHIgPSBcIlwiLFxuICAgIGkgPSBzZWxmLnRcbiAgdmFyIHAgPSBzZWxmLkRCIC0gKGkgKiBzZWxmLkRCKSAlIGtcbiAgaWYgKGktLSA+IDApIHtcbiAgICBpZiAocCA8IHNlbGYuREIgJiYgKGQgPSBzZWxmW2ldID4+IHApID4gMCkge1xuICAgICAgbSA9IHRydWVcbiAgICAgIHIgPSBpbnQyY2hhcihkKVxuICAgIH1cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICBpZiAocCA8IGspIHtcbiAgICAgICAgZCA9IChzZWxmW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8IChrIC0gcClcbiAgICAgICAgZCB8PSBzZWxmWy0taV0gPj4gKHAgKz0gc2VsZi5EQiAtIGspXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkID0gKHNlbGZbaV0gPj4gKHAgLT0gaykpICYga21cbiAgICAgICAgaWYgKHAgPD0gMCkge1xuICAgICAgICAgIHAgKz0gc2VsZi5EQlxuICAgICAgICAgIC0taVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZCA+IDApIG0gPSB0cnVlXG4gICAgICBpZiAobSkgciArPSBpbnQyY2hhcihkKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbSA/IHIgOiBcIjBcIlxufVxuXG4vLyAocHVibGljKSAtdGhpc1xuZnVuY3Rpb24gYm5OZWdhdGUoKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcywgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgfHRoaXN8XG5mdW5jdGlvbiBibkFicygpIHtcbiAgcmV0dXJuICh0aGlzLnMgPCAwKSA/IHRoaXMubmVnYXRlKCkgOiB0aGlzXG59XG5cbi8vIChwdWJsaWMpIHJldHVybiArIGlmIHRoaXMgPiBhLCAtIGlmIHRoaXMgPCBhLCAwIGlmIGVxdWFsXG5mdW5jdGlvbiBibkNvbXBhcmVUbyhhKSB7XG4gIHZhciByID0gdGhpcy5zIC0gYS5zXG4gIGlmIChyICE9IDApIHJldHVybiByXG4gIHZhciBpID0gdGhpcy50XG4gIHIgPSBpIC0gYS50XG4gIGlmIChyICE9IDApIHJldHVybiAodGhpcy5zIDwgMCkgPyAtciA6IHJcbiAgd2hpbGUgKC0taSA+PSAwKVxuICAgIGlmICgociA9IHRoaXNbaV0gLSBhW2ldKSAhPSAwKSByZXR1cm4gclxuICByZXR1cm4gMFxufVxuXG4vLyByZXR1cm5zIGJpdCBsZW5ndGggb2YgdGhlIGludGVnZXIgeFxuZnVuY3Rpb24gbmJpdHMoeCkge1xuICB2YXIgciA9IDEsXG4gICAgdFxuICBpZiAoKHQgPSB4ID4+PiAxNikgIT0gMCkge1xuICAgIHggPSB0XG4gICAgciArPSAxNlxuICB9XG4gIGlmICgodCA9IHggPj4gOCkgIT0gMCkge1xuICAgIHggPSB0XG4gICAgciArPSA4XG4gIH1cbiAgaWYgKCh0ID0geCA+PiA0KSAhPSAwKSB7XG4gICAgeCA9IHRcbiAgICByICs9IDRcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDIpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMlxuICB9XG4gIGlmICgodCA9IHggPj4gMSkgIT0gMCkge1xuICAgIHggPSB0XG4gICAgciArPSAxXG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYml0cyBpbiBcInRoaXNcIlxuZnVuY3Rpb24gYm5CaXRMZW5ndGgoKSB7XG4gIGlmICh0aGlzLnQgPD0gMCkgcmV0dXJuIDBcbiAgcmV0dXJuIHRoaXMuREIgKiAodGhpcy50IC0gMSkgKyBuYml0cyh0aGlzW3RoaXMudCAtIDFdIF4gKHRoaXMucyAmIHRoaXMuRE0pKVxufVxuXG4vLyAocHVibGljKSByZXR1cm4gdGhlIG51bWJlciBvZiBieXRlcyBpbiBcInRoaXNcIlxuZnVuY3Rpb24gYm5CeXRlTGVuZ3RoKCkge1xuICByZXR1cm4gdGhpcy5iaXRMZW5ndGgoKSA+PiAzXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIDw8IG4qREJcbmZ1bmN0aW9uIGJucERMU2hpZnRUbyhuLCByKSB7XG4gIHZhciBpXG4gIGZvciAoaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByW2kgKyBuXSA9IHRoaXNbaV1cbiAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gMFxuICByLnQgPSB0aGlzLnQgKyBuXG4gIHIucyA9IHRoaXMuc1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuKkRCXG5mdW5jdGlvbiBibnBEUlNoaWZ0VG8obiwgcikge1xuICBmb3IgKHZhciBpID0gbjsgaSA8IHRoaXMudDsgKytpKSByW2kgLSBuXSA9IHRoaXNbaV1cbiAgci50ID0gTWF0aC5tYXgodGhpcy50IC0gbiwgMClcbiAgci5zID0gdGhpcy5zXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIDw8IG5cbmZ1bmN0aW9uIGJucExTaGlmdFRvKG4sIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBicyA9IG4gJSBzZWxmLkRCXG4gIHZhciBjYnMgPSBzZWxmLkRCIC0gYnNcbiAgdmFyIGJtID0gKDEgPDwgY2JzKSAtIDFcbiAgdmFyIGRzID0gTWF0aC5mbG9vcihuIC8gc2VsZi5EQiksXG4gICAgYyA9IChzZWxmLnMgPDwgYnMpICYgc2VsZi5ETSxcbiAgICBpXG4gIGZvciAoaSA9IHNlbGYudCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgcltpICsgZHMgKyAxXSA9IChzZWxmW2ldID4+IGNicykgfCBjXG4gICAgYyA9IChzZWxmW2ldICYgYm0pIDw8IGJzXG4gIH1cbiAgZm9yIChpID0gZHMgLSAxOyBpID49IDA7IC0taSkgcltpXSA9IDBcbiAgcltkc10gPSBjXG4gIHIudCA9IHNlbGYudCArIGRzICsgMVxuICByLnMgPSBzZWxmLnNcbiAgci5jbGFtcCgpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG5cbmZ1bmN0aW9uIGJucFJTaGlmdFRvKG4sIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHIucyA9IHNlbGYuc1xuICB2YXIgZHMgPSBNYXRoLmZsb29yKG4gLyBzZWxmLkRCKVxuICBpZiAoZHMgPj0gc2VsZi50KSB7XG4gICAgci50ID0gMFxuICAgIHJldHVyblxuICB9XG4gIHZhciBicyA9IG4gJSBzZWxmLkRCXG4gIHZhciBjYnMgPSBzZWxmLkRCIC0gYnNcbiAgdmFyIGJtID0gKDEgPDwgYnMpIC0gMVxuICByWzBdID0gc2VsZltkc10gPj4gYnNcbiAgZm9yICh2YXIgaSA9IGRzICsgMTsgaSA8IHNlbGYudDsgKytpKSB7XG4gICAgcltpIC0gZHMgLSAxXSB8PSAoc2VsZltpXSAmIGJtKSA8PCBjYnNcbiAgICByW2kgLSBkc10gPSBzZWxmW2ldID4+IGJzXG4gIH1cbiAgaWYgKGJzID4gMCkgcltzZWxmLnQgLSBkcyAtIDFdIHw9IChzZWxmLnMgJiBibSkgPDwgY2JzXG4gIHIudCA9IHNlbGYudCAtIGRzXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyAtIGFcbmZ1bmN0aW9uIGJucFN1YlRvKGEsIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBpID0gMCxcbiAgICBjID0gMCxcbiAgICBtID0gTWF0aC5taW4oYS50LCBzZWxmLnQpXG4gIHdoaWxlIChpIDwgbSkge1xuICAgIGMgKz0gc2VsZltpXSAtIGFbaV1cbiAgICByW2krK10gPSBjICYgc2VsZi5ETVxuICAgIGMgPj49IHNlbGYuREJcbiAgfVxuICBpZiAoYS50IDwgc2VsZi50KSB7XG4gICAgYyAtPSBhLnNcbiAgICB3aGlsZSAoaSA8IHNlbGYudCkge1xuICAgICAgYyArPSBzZWxmW2ldXG4gICAgICByW2krK10gPSBjICYgc2VsZi5ETVxuICAgICAgYyA+Pj0gc2VsZi5EQlxuICAgIH1cbiAgICBjICs9IHNlbGYuc1xuICB9IGVsc2Uge1xuICAgIGMgKz0gc2VsZi5zXG4gICAgd2hpbGUgKGkgPCBhLnQpIHtcbiAgICAgIGMgLT0gYVtpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyAtPSBhLnNcbiAgfVxuICByLnMgPSAoYyA8IDApID8gLTEgOiAwXG4gIGlmIChjIDwgLTEpIHJbaSsrXSA9IHNlbGYuRFYgKyBjXG4gIGVsc2UgaWYgKGMgPiAwKSByW2krK10gPSBjXG4gIHIudCA9IGlcbiAgci5jbGFtcCgpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICogYSwgciAhPSB0aGlzLGEgKEhBQyAxNC4xMilcbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5VG8oYSwgcikge1xuICB2YXIgeCA9IHRoaXMuYWJzKCksXG4gICAgeSA9IGEuYWJzKClcbiAgdmFyIGkgPSB4LnRcbiAgci50ID0gaSArIHkudFxuICB3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwXG4gIGZvciAoaSA9IDA7IGkgPCB5LnQ7ICsraSkgcltpICsgeC50XSA9IHguYW0oMCwgeVtpXSwgciwgaSwgMCwgeC50KVxuICByLnMgPSAwXG4gIHIuY2xhbXAoKVxuICBpZiAodGhpcy5zICE9IGEucykgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIsIHIpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzXjIsIHIgIT0gdGhpcyAoSEFDIDE0LjE2KVxuZnVuY3Rpb24gYm5wU3F1YXJlVG8ocikge1xuICB2YXIgeCA9IHRoaXMuYWJzKClcbiAgdmFyIGkgPSByLnQgPSAyICogeC50XG4gIHdoaWxlICgtLWkgPj0gMCkgcltpXSA9IDBcbiAgZm9yIChpID0gMDsgaSA8IHgudCAtIDE7ICsraSkge1xuICAgIHZhciBjID0geC5hbShpLCB4W2ldLCByLCAyICogaSwgMCwgMSlcbiAgICBpZiAoKHJbaSArIHgudF0gKz0geC5hbShpICsgMSwgMiAqIHhbaV0sIHIsIDIgKiBpICsgMSwgYywgeC50IC0gaSAtIDEpKSA+PSB4LkRWKSB7XG4gICAgICByW2kgKyB4LnRdIC09IHguRFZcbiAgICAgIHJbaSArIHgudCArIDFdID0gMVxuICAgIH1cbiAgfVxuICBpZiAoci50ID4gMCkgcltyLnQgLSAxXSArPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKVxuICByLnMgPSAwXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSBkaXZpZGUgdGhpcyBieSBtLCBxdW90aWVudCBhbmQgcmVtYWluZGVyIHRvIHEsIHIgKEhBQyAxNC4yMClcbi8vIHIgIT0gcSwgdGhpcyAhPSBtLiAgcSBvciByIG1heSBiZSBudWxsLlxuZnVuY3Rpb24gYm5wRGl2UmVtVG8obSwgcSwgcikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHBtID0gbS5hYnMoKVxuICBpZiAocG0udCA8PSAwKSByZXR1cm5cbiAgdmFyIHB0ID0gc2VsZi5hYnMoKVxuICBpZiAocHQudCA8IHBtLnQpIHtcbiAgICBpZiAocSAhPSBudWxsKSBxLmZyb21JbnQoMClcbiAgICBpZiAociAhPSBudWxsKSBzZWxmLmNvcHlUbyhyKVxuICAgIHJldHVyblxuICB9XG4gIGlmIChyID09IG51bGwpIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHZhciB5ID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICB0cyA9IHNlbGYucyxcbiAgICBtcyA9IG0uc1xuICB2YXIgbnNoID0gc2VsZi5EQiAtIG5iaXRzKHBtW3BtLnQgLSAxXSk7IC8vIG5vcm1hbGl6ZSBtb2R1bHVzXG4gIGlmIChuc2ggPiAwKSB7XG4gICAgcG0ubFNoaWZ0VG8obnNoLCB5KVxuICAgIHB0LmxTaGlmdFRvKG5zaCwgcilcbiAgfSBlbHNlIHtcbiAgICBwbS5jb3B5VG8oeSlcbiAgICBwdC5jb3B5VG8ocilcbiAgfVxuICB2YXIgeXMgPSB5LnRcbiAgdmFyIHkwID0geVt5cyAtIDFdXG4gIGlmICh5MCA9PSAwKSByZXR1cm5cbiAgdmFyIHl0ID0geTAgKiAoMSA8PCBzZWxmLkYxKSArICgoeXMgPiAxKSA/IHlbeXMgLSAyXSA+PiBzZWxmLkYyIDogMClcbiAgdmFyIGQxID0gc2VsZi5GViAvIHl0LFxuICAgIGQyID0gKDEgPDwgc2VsZi5GMSkgLyB5dCxcbiAgICBlID0gMSA8PCBzZWxmLkYyXG4gIHZhciBpID0gci50LFxuICAgIGogPSBpIC0geXMsXG4gICAgdCA9IChxID09IG51bGwpID8gbmV3IEJpZ0ludGVnZXIoKSA6IHFcbiAgeS5kbFNoaWZ0VG8oaiwgdClcbiAgaWYgKHIuY29tcGFyZVRvKHQpID49IDApIHtcbiAgICByW3IudCsrXSA9IDFcbiAgICByLnN1YlRvKHQsIHIpXG4gIH1cbiAgQmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKHlzLCB0KVxuICB0LnN1YlRvKHksIHkpOyAvLyBcIm5lZ2F0aXZlXCIgeSBzbyB3ZSBjYW4gcmVwbGFjZSBzdWIgd2l0aCBhbSBsYXRlclxuICB3aGlsZSAoeS50IDwgeXMpIHlbeS50KytdID0gMFxuICB3aGlsZSAoLS1qID49IDApIHtcbiAgICAvLyBFc3RpbWF0ZSBxdW90aWVudCBkaWdpdFxuICAgIHZhciBxZCA9IChyWy0taV0gPT0geTApID8gc2VsZi5ETSA6IE1hdGguZmxvb3IocltpXSAqIGQxICsgKHJbaSAtIDFdICsgZSkgKiBkMilcbiAgICBpZiAoKHJbaV0gKz0geS5hbSgwLCBxZCwgciwgaiwgMCwgeXMpKSA8IHFkKSB7IC8vIFRyeSBpdCBvdXRcbiAgICAgIHkuZGxTaGlmdFRvKGosIHQpXG4gICAgICByLnN1YlRvKHQsIHIpXG4gICAgICB3aGlsZSAocltpXSA8IC0tcWQpIHIuc3ViVG8odCwgcilcbiAgICB9XG4gIH1cbiAgaWYgKHEgIT0gbnVsbCkge1xuICAgIHIuZHJTaGlmdFRvKHlzLCBxKVxuICAgIGlmICh0cyAhPSBtcykgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHEsIHEpXG4gIH1cbiAgci50ID0geXNcbiAgci5jbGFtcCgpXG4gIGlmIChuc2ggPiAwKSByLnJTaGlmdFRvKG5zaCwgcik7IC8vIERlbm9ybWFsaXplIHJlbWFpbmRlclxuICBpZiAodHMgPCAwKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ociwgcilcbn1cblxuLy8gKHB1YmxpYykgdGhpcyBtb2QgYVxuZnVuY3Rpb24gYm5Nb2QoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5hYnMoKVxuICAgIC5kaXZSZW1UbyhhLCBudWxsLCByKVxuICBpZiAodGhpcy5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkgYS5zdWJUbyhyLCByKVxuICByZXR1cm4gclxufVxuXG4vLyBNb2R1bGFyIHJlZHVjdGlvbiB1c2luZyBcImNsYXNzaWNcIiBhbGdvcml0aG1cbmZ1bmN0aW9uIENsYXNzaWMobSkge1xuICB0aGlzLm0gPSBtXG59XG5cbmZ1bmN0aW9uIGNDb252ZXJ0KHgpIHtcbiAgaWYgKHgucyA8IDAgfHwgeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSByZXR1cm4geC5tb2QodGhpcy5tKVxuICBlbHNlIHJldHVybiB4XG59XG5cbmZ1bmN0aW9uIGNSZXZlcnQoeCkge1xuICByZXR1cm4geFxufVxuXG5mdW5jdGlvbiBjUmVkdWNlKHgpIHtcbiAgeC5kaXZSZW1Ubyh0aGlzLm0sIG51bGwsIHgpXG59XG5cbmZ1bmN0aW9uIGNNdWxUbyh4LCB5LCByKSB7XG4gIHgubXVsdGlwbHlUbyh5LCByKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5mdW5jdGlvbiBjU3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbkNsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydFxuQ2xhc3NpYy5wcm90b3R5cGUucmV2ZXJ0ID0gY1JldmVydFxuQ2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZVxuQ2xhc3NpYy5wcm90b3R5cGUubXVsVG8gPSBjTXVsVG9cbkNsYXNzaWMucHJvdG90eXBlLnNxclRvID0gY1NxclRvXG5cbi8vIChwcm90ZWN0ZWQpIHJldHVybiBcIi0xL3RoaXMgJSAyXkRCXCI7IHVzZWZ1bCBmb3IgTW9udC4gcmVkdWN0aW9uXG4vLyBqdXN0aWZpY2F0aW9uOlxuLy8gICAgICAgICB4eSA9PSAxIChtb2QgbSlcbi8vICAgICAgICAgeHkgPSAgMStrbVxuLy8gICB4eSgyLXh5KSA9ICgxK2ttKSgxLWttKVxuLy8geFt5KDIteHkpXSA9IDEta14ybV4yXG4vLyB4W3koMi14eSldID09IDEgKG1vZCBtXjIpXG4vLyBpZiB5IGlzIDEveCBtb2QgbSwgdGhlbiB5KDIteHkpIGlzIDEveCBtb2QgbV4yXG4vLyBzaG91bGQgcmVkdWNlIHggYW5kIHkoMi14eSkgYnkgbV4yIGF0IGVhY2ggc3RlcCB0byBrZWVwIHNpemUgYm91bmRlZC5cbi8vIEpTIG11bHRpcGx5IFwib3ZlcmZsb3dzXCIgZGlmZmVyZW50bHkgZnJvbSBDL0MrKywgc28gY2FyZSBpcyBuZWVkZWQgaGVyZS5cbmZ1bmN0aW9uIGJucEludkRpZ2l0KCkge1xuICBpZiAodGhpcy50IDwgMSkgcmV0dXJuIDBcbiAgdmFyIHggPSB0aGlzWzBdXG4gIGlmICgoeCAmIDEpID09IDApIHJldHVybiAwXG4gIHZhciB5ID0geCAmIDM7IC8vIHkgPT0gMS94IG1vZCAyXjJcbiAgeSA9ICh5ICogKDIgLSAoeCAmIDB4ZikgKiB5KSkgJiAweGY7IC8vIHkgPT0gMS94IG1vZCAyXjRcbiAgeSA9ICh5ICogKDIgLSAoeCAmIDB4ZmYpICogeSkpICYgMHhmZjsgLy8geSA9PSAxL3ggbW9kIDJeOFxuICB5ID0gKHkgKiAoMiAtICgoKHggJiAweGZmZmYpICogeSkgJiAweGZmZmYpKSkgJiAweGZmZmY7IC8vIHkgPT0gMS94IG1vZCAyXjE2XG4gIC8vIGxhc3Qgc3RlcCAtIGNhbGN1bGF0ZSBpbnZlcnNlIG1vZCBEViBkaXJlY3RseVxuICAvLyBhc3N1bWVzIDE2IDwgREIgPD0gMzIgYW5kIGFzc3VtZXMgYWJpbGl0eSB0byBoYW5kbGUgNDgtYml0IGludHNcbiAgeSA9ICh5ICogKDIgLSB4ICogeSAlIHRoaXMuRFYpKSAlIHRoaXMuRFY7IC8vIHkgPT0gMS94IG1vZCAyXmRiaXRzXG4gIC8vIHdlIHJlYWxseSB3YW50IHRoZSBuZWdhdGl2ZSBpbnZlcnNlLCBhbmQgLURWIDwgeSA8IERWXG4gIHJldHVybiAoeSA+IDApID8gdGhpcy5EViAtIHkgOiAteVxufVxuXG4vLyBNb250Z29tZXJ5IHJlZHVjdGlvblxuZnVuY3Rpb24gTW9udGdvbWVyeShtKSB7XG4gIHRoaXMubSA9IG1cbiAgdGhpcy5tcCA9IG0uaW52RGlnaXQoKVxuICB0aGlzLm1wbCA9IHRoaXMubXAgJiAweDdmZmZcbiAgdGhpcy5tcGggPSB0aGlzLm1wID4+IDE1XG4gIHRoaXMudW0gPSAoMSA8PCAobS5EQiAtIDE1KSkgLSAxXG4gIHRoaXMubXQyID0gMiAqIG0udFxufVxuXG4vLyB4UiBtb2QgbVxuZnVuY3Rpb24gbW9udENvbnZlcnQoeCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgeC5hYnMoKVxuICAgIC5kbFNoaWZ0VG8odGhpcy5tLnQsIHIpXG4gIHIuZGl2UmVtVG8odGhpcy5tLCBudWxsLCByKVxuICBpZiAoeC5zIDwgMCAmJiByLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pID4gMCkgdGhpcy5tLnN1YlRvKHIsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIHgvUiBtb2QgbVxuZnVuY3Rpb24gbW9udFJldmVydCh4KSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB4LmNvcHlUbyhyKVxuICB0aGlzLnJlZHVjZShyKVxuICByZXR1cm4gclxufVxuXG4vLyB4ID0geC9SIG1vZCBtIChIQUMgMTQuMzIpXG5mdW5jdGlvbiBtb250UmVkdWNlKHgpIHtcbiAgd2hpbGUgKHgudCA8PSB0aGlzLm10MikgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyXG4gICAgeFt4LnQrK10gPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tLnQ7ICsraSkge1xuICAgIC8vIGZhc3RlciB3YXkgb2YgY2FsY3VsYXRpbmcgdTAgPSB4W2ldKm1wIG1vZCBEVlxuICAgIHZhciBqID0geFtpXSAmIDB4N2ZmZlxuICAgIHZhciB1MCA9IChqICogdGhpcy5tcGwgKyAoKChqICogdGhpcy5tcGggKyAoeFtpXSA+PiAxNSkgKiB0aGlzLm1wbCkgJiB0aGlzLnVtKSA8PCAxNSkpICYgeC5ETVxuICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbFxuICAgIGogPSBpICsgdGhpcy5tLnRcbiAgICB4W2pdICs9IHRoaXMubS5hbSgwLCB1MCwgeCwgaSwgMCwgdGhpcy5tLnQpXG4gICAgLy8gcHJvcGFnYXRlIGNhcnJ5XG4gICAgd2hpbGUgKHhbal0gPj0geC5EVikge1xuICAgICAgeFtqXSAtPSB4LkRWXG4gICAgICB4Wysral0rK1xuICAgIH1cbiAgfVxuICB4LmNsYW1wKClcbiAgeC5kclNoaWZ0VG8odGhpcy5tLnQsIHgpXG4gIGlmICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHguc3ViVG8odGhpcy5tLCB4KVxufVxuXG4vLyByID0gXCJ4XjIvUiBtb2QgbVwiOyB4ICE9IHJcbmZ1bmN0aW9uIG1vbnRTcXJUbyh4LCByKSB7XG4gIHguc3F1YXJlVG8ocilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuLy8gciA9IFwieHkvUiBtb2QgbVwiOyB4LHkgIT0gclxuZnVuY3Rpb24gbW9udE11bFRvKHgsIHksIHIpIHtcbiAgeC5tdWx0aXBseVRvKHksIHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbk1vbnRnb21lcnkucHJvdG90eXBlLmNvbnZlcnQgPSBtb250Q29udmVydFxuTW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0ID0gbW9udFJldmVydFxuTW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlID0gbW9udFJlZHVjZVxuTW9udGdvbWVyeS5wcm90b3R5cGUubXVsVG8gPSBtb250TXVsVG9cbk1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gbW9udFNxclRvXG5cbi8vIChwcm90ZWN0ZWQpIHRydWUgaWZmIHRoaXMgaXMgZXZlblxuZnVuY3Rpb24gYm5wSXNFdmVuKCkge1xuICByZXR1cm4gKCh0aGlzLnQgPiAwKSA/ICh0aGlzWzBdICYgMSkgOiB0aGlzLnMpID09IDBcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpc15lLCBlIDwgMl4zMiwgZG9pbmcgc3FyIGFuZCBtdWwgd2l0aCBcInJcIiAoSEFDIDE0Ljc5KVxuZnVuY3Rpb24gYm5wRXhwKGUsIHopIHtcbiAgaWYgKGUgPiAweGZmZmZmZmZmIHx8IGUgPCAxKSByZXR1cm4gQmlnSW50ZWdlci5PTkVcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpLFxuICAgIHIyID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICBnID0gei5jb252ZXJ0KHRoaXMpLFxuICAgIGkgPSBuYml0cyhlKSAtIDFcbiAgZy5jb3B5VG8ocilcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgei5zcXJUbyhyLCByMilcbiAgICBpZiAoKGUgJiAoMSA8PCBpKSkgPiAwKSB6Lm11bFRvKHIyLCBnLCByKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHQgPSByXG4gICAgICByID0gcjJcbiAgICAgIHIyID0gdFxuICAgIH1cbiAgfVxuICByZXR1cm4gei5yZXZlcnQocilcbn1cblxuLy8gKHB1YmxpYykgdGhpc15lICUgbSwgMCA8PSBlIDwgMl4zMlxuZnVuY3Rpb24gYm5Nb2RQb3dJbnQoZSwgbSkge1xuICB2YXIgelxuICBpZiAoZSA8IDI1NiB8fCBtLmlzRXZlbigpKSB6ID0gbmV3IENsYXNzaWMobSlcbiAgZWxzZSB6ID0gbmV3IE1vbnRnb21lcnkobSlcbiAgcmV0dXJuIHRoaXMuZXhwKGUsIHopXG59XG5cbi8vIHByb3RlY3RlZFxucHJvdG8uY29weVRvID0gYm5wQ29weVRvXG5wcm90by5mcm9tSW50ID0gYm5wRnJvbUludFxucHJvdG8uZnJvbVN0cmluZyA9IGJucEZyb21TdHJpbmdcbnByb3RvLmNsYW1wID0gYm5wQ2xhbXBcbnByb3RvLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUb1xucHJvdG8uZHJTaGlmdFRvID0gYm5wRFJTaGlmdFRvXG5wcm90by5sU2hpZnRUbyA9IGJucExTaGlmdFRvXG5wcm90by5yU2hpZnRUbyA9IGJucFJTaGlmdFRvXG5wcm90by5zdWJUbyA9IGJucFN1YlRvXG5wcm90by5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUb1xucHJvdG8uc3F1YXJlVG8gPSBibnBTcXVhcmVUb1xucHJvdG8uZGl2UmVtVG8gPSBibnBEaXZSZW1Ub1xucHJvdG8uaW52RGlnaXQgPSBibnBJbnZEaWdpdFxucHJvdG8uaXNFdmVuID0gYm5wSXNFdmVuXG5wcm90by5leHAgPSBibnBFeHBcblxuLy8gcHVibGljXG5wcm90by50b1N0cmluZyA9IGJuVG9TdHJpbmdcbnByb3RvLm5lZ2F0ZSA9IGJuTmVnYXRlXG5wcm90by5hYnMgPSBibkFic1xucHJvdG8uY29tcGFyZVRvID0gYm5Db21wYXJlVG9cbnByb3RvLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoXG5wcm90by5ieXRlTGVuZ3RoID0gYm5CeXRlTGVuZ3RoXG5wcm90by5tb2QgPSBibk1vZFxucHJvdG8ubW9kUG93SW50ID0gYm5Nb2RQb3dJbnRcblxuLy8gKHB1YmxpYylcbmZ1bmN0aW9uIGJuQ2xvbmUoKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmNvcHlUbyhyKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgaW50ZWdlclxuZnVuY3Rpb24gYm5JbnRWYWx1ZSgpIHtcbiAgaWYgKHRoaXMucyA8IDApIHtcbiAgICBpZiAodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdIC0gdGhpcy5EVlxuICAgIGVsc2UgaWYgKHRoaXMudCA9PSAwKSByZXR1cm4gLTFcbiAgfSBlbHNlIGlmICh0aGlzLnQgPT0gMSkgcmV0dXJuIHRoaXNbMF1cbiAgZWxzZSBpZiAodGhpcy50ID09IDApIHJldHVybiAwXG4gIC8vIGFzc3VtZXMgMTYgPCBEQiA8IDMyXG4gIHJldHVybiAoKHRoaXNbMV0gJiAoKDEgPDwgKDMyIC0gdGhpcy5EQikpIC0gMSkpIDw8IHRoaXMuREIpIHwgdGhpc1swXVxufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgYnl0ZVxuZnVuY3Rpb24gYm5CeXRlVmFsdWUoKSB7XG4gIHJldHVybiAodGhpcy50ID09IDApID8gdGhpcy5zIDogKHRoaXNbMF0gPDwgMjQpID4+IDI0XG59XG5cbi8vIChwdWJsaWMpIHJldHVybiB2YWx1ZSBhcyBzaG9ydCAoYXNzdW1lcyBEQj49MTYpXG5mdW5jdGlvbiBiblNob3J0VmFsdWUoKSB7XG4gIHJldHVybiAodGhpcy50ID09IDApID8gdGhpcy5zIDogKHRoaXNbMF0gPDwgMTYpID4+IDE2XG59XG5cbi8vIChwcm90ZWN0ZWQpIHJldHVybiB4IHMudC4gcl54IDwgRFZcbmZ1bmN0aW9uIGJucENodW5rU2l6ZShyKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGguTE4yICogdGhpcy5EQiAvIE1hdGgubG9nKHIpKVxufVxuXG4vLyAocHVibGljKSAwIGlmIHRoaXMgPT0gMCwgMSBpZiB0aGlzID4gMFxuZnVuY3Rpb24gYm5TaWdOdW0oKSB7XG4gIGlmICh0aGlzLnMgPCAwKSByZXR1cm4gLTFcbiAgZWxzZSBpZiAodGhpcy50IDw9IDAgfHwgKHRoaXMudCA9PSAxICYmIHRoaXNbMF0gPD0gMCkpIHJldHVybiAwXG4gIGVsc2UgcmV0dXJuIDFcbn1cblxuLy8gKHByb3RlY3RlZCkgY29udmVydCB0byByYWRpeCBzdHJpbmdcbmZ1bmN0aW9uIGJucFRvUmFkaXgoYikge1xuICBpZiAoYiA9PSBudWxsKSBiID0gMTBcbiAgaWYgKHRoaXMuc2lnbnVtKCkgPT0gMCB8fCBiIDwgMiB8fCBiID4gMzYpIHJldHVybiBcIjBcIlxuICB2YXIgY3MgPSB0aGlzLmNodW5rU2l6ZShiKVxuICB2YXIgYSA9IE1hdGgucG93KGIsIGNzKVxuICB2YXIgZCA9IG5idihhKSxcbiAgICB5ID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICB6ID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICByID0gXCJcIlxuICB0aGlzLmRpdlJlbVRvKGQsIHksIHopXG4gIHdoaWxlICh5LnNpZ251bSgpID4gMCkge1xuICAgIHIgPSAoYSArIHouaW50VmFsdWUoKSlcbiAgICAgIC50b1N0cmluZyhiKVxuICAgICAgLnN1YnN0cigxKSArIHJcbiAgICB5LmRpdlJlbVRvKGQsIHksIHopXG4gIH1cbiAgcmV0dXJuIHouaW50VmFsdWUoKVxuICAgIC50b1N0cmluZyhiKSArIHJcbn1cblxuLy8gKHByb3RlY3RlZCkgY29udmVydCBmcm9tIHJhZGl4IHN0cmluZ1xuZnVuY3Rpb24gYm5wRnJvbVJhZGl4KHMsIGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHNlbGYuZnJvbUludCgwKVxuICBpZiAoYiA9PSBudWxsKSBiID0gMTBcbiAgdmFyIGNzID0gc2VsZi5jaHVua1NpemUoYilcbiAgdmFyIGQgPSBNYXRoLnBvdyhiLCBjcyksXG4gICAgbWkgPSBmYWxzZSxcbiAgICBqID0gMCxcbiAgICB3ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgeCA9IGludEF0KHMsIGkpXG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBpZiAocy5jaGFyQXQoaSkgPT0gXCItXCIgJiYgc2VsZi5zaWdudW0oKSA9PSAwKSBtaSA9IHRydWVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIHcgPSBiICogdyArIHhcbiAgICBpZiAoKytqID49IGNzKSB7XG4gICAgICBzZWxmLmRNdWx0aXBseShkKVxuICAgICAgc2VsZi5kQWRkT2Zmc2V0KHcsIDApXG4gICAgICBqID0gMFxuICAgICAgdyA9IDBcbiAgICB9XG4gIH1cbiAgaWYgKGogPiAwKSB7XG4gICAgc2VsZi5kTXVsdGlwbHkoTWF0aC5wb3coYiwgaikpXG4gICAgc2VsZi5kQWRkT2Zmc2V0KHcsIDApXG4gIH1cbiAgaWYgKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oc2VsZiwgc2VsZilcbn1cblxuLy8gKHByb3RlY3RlZCkgYWx0ZXJuYXRlIGNvbnN0cnVjdG9yXG5mdW5jdGlvbiBibnBGcm9tTnVtYmVyKGEsIGIsIGMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChcIm51bWJlclwiID09IHR5cGVvZiBiKSB7XG4gICAgLy8gbmV3IEJpZ0ludGVnZXIoaW50LGludCxSTkcpXG4gICAgaWYgKGEgPCAyKSBzZWxmLmZyb21JbnQoMSlcbiAgICBlbHNlIHtcbiAgICAgIHNlbGYuZnJvbU51bWJlcihhLCBjKVxuICAgICAgaWYgKCFzZWxmLnRlc3RCaXQoYSAtIDEpKSAvLyBmb3JjZSBNU0Igc2V0XG4gICAgICAgIHNlbGYuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIG9wX29yLCBzZWxmKVxuICAgICAgaWYgKHNlbGYuaXNFdmVuKCkpIHNlbGYuZEFkZE9mZnNldCgxLCAwKTsgLy8gZm9yY2Ugb2RkXG4gICAgICB3aGlsZSAoIXNlbGYuaXNQcm9iYWJsZVByaW1lKGIpKSB7XG4gICAgICAgIHNlbGYuZEFkZE9mZnNldCgyLCAwKVxuICAgICAgICBpZiAoc2VsZi5iaXRMZW5ndGgoKSA+IGEpIHNlbGYuc3ViVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGEgLSAxKSwgc2VsZilcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gbmV3IEJpZ0ludGVnZXIoaW50LFJORylcbiAgICB2YXIgeCA9IG5ldyBBcnJheSgpLFxuICAgICAgdCA9IGEgJiA3XG4gICAgeC5sZW5ndGggPSAoYSA+PiAzKSArIDFcbiAgICBiLm5leHRCeXRlcyh4KVxuICAgIGlmICh0ID4gMCkgeFswXSAmPSAoKDEgPDwgdCkgLSAxKVxuICAgIGVsc2UgeFswXSA9IDBcbiAgICBzZWxmLmZyb21TdHJpbmcoeCwgMjU2KVxuICB9XG59XG5cbi8vIChwdWJsaWMpIGNvbnZlcnQgdG8gYmlnZW5kaWFuIGJ5dGUgYXJyYXlcbmZ1bmN0aW9uIGJuVG9CeXRlQXJyYXkoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSA9IHNlbGYudCxcbiAgICByID0gbmV3IEFycmF5KClcbiAgclswXSA9IHNlbGYuc1xuICB2YXIgcCA9IHNlbGYuREIgLSAoaSAqIHNlbGYuREIpICUgOCxcbiAgICBkLCBrID0gMFxuICBpZiAoaS0tID4gMCkge1xuICAgIGlmIChwIDwgc2VsZi5EQiAmJiAoZCA9IHNlbGZbaV0gPj4gcCkgIT0gKHNlbGYucyAmIHNlbGYuRE0pID4+IHApXG4gICAgICByW2srK10gPSBkIHwgKHNlbGYucyA8PCAoc2VsZi5EQiAtIHApKVxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIGlmIChwIDwgOCkge1xuICAgICAgICBkID0gKHNlbGZbaV0gJiAoKDEgPDwgcCkgLSAxKSkgPDwgKDggLSBwKVxuICAgICAgICBkIHw9IHNlbGZbLS1pXSA+PiAocCArPSBzZWxmLkRCIC0gOClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGQgPSAoc2VsZltpXSA+PiAocCAtPSA4KSkgJiAweGZmXG4gICAgICAgIGlmIChwIDw9IDApIHtcbiAgICAgICAgICBwICs9IHNlbGYuREJcbiAgICAgICAgICAtLWlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKChkICYgMHg4MCkgIT0gMCkgZCB8PSAtMjU2XG4gICAgICBpZiAoayA9PT0gMCAmJiAoc2VsZi5zICYgMHg4MCkgIT0gKGQgJiAweDgwKSkrK2tcbiAgICAgIGlmIChrID4gMCB8fCBkICE9IHNlbGYucykgcltrKytdID0gZFxuICAgIH1cbiAgfVxuICByZXR1cm4gclxufVxuXG5mdW5jdGlvbiBibkVxdWFscyhhKSB7XG4gIHJldHVybiAodGhpcy5jb21wYXJlVG8oYSkgPT0gMClcbn1cblxuZnVuY3Rpb24gYm5NaW4oYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpIDwgMCkgPyB0aGlzIDogYVxufVxuXG5mdW5jdGlvbiBibk1heChhKSB7XG4gIHJldHVybiAodGhpcy5jb21wYXJlVG8oYSkgPiAwKSA/IHRoaXMgOiBhXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIG9wIGEgKGJpdHdpc2UpXG5mdW5jdGlvbiBibnBCaXR3aXNlVG8oYSwgb3AsIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBpLCBmLCBtID0gTWF0aC5taW4oYS50LCBzZWxmLnQpXG4gIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHJbaV0gPSBvcChzZWxmW2ldLCBhW2ldKVxuICBpZiAoYS50IDwgc2VsZi50KSB7XG4gICAgZiA9IGEucyAmIHNlbGYuRE1cbiAgICBmb3IgKGkgPSBtOyBpIDwgc2VsZi50OyArK2kpIHJbaV0gPSBvcChzZWxmW2ldLCBmKVxuICAgIHIudCA9IHNlbGYudFxuICB9IGVsc2Uge1xuICAgIGYgPSBzZWxmLnMgJiBzZWxmLkRNXG4gICAgZm9yIChpID0gbTsgaSA8IGEudDsgKytpKSByW2ldID0gb3AoZiwgYVtpXSlcbiAgICByLnQgPSBhLnRcbiAgfVxuICByLnMgPSBvcChzZWxmLnMsIGEucylcbiAgci5jbGFtcCgpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgJiBhXG5mdW5jdGlvbiBvcF9hbmQoeCwgeSkge1xuICByZXR1cm4geCAmIHlcbn1cblxuZnVuY3Rpb24gYm5BbmQoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIHwgYVxuZnVuY3Rpb24gb3Bfb3IoeCwgeSkge1xuICByZXR1cm4geCB8IHlcbn1cblxuZnVuY3Rpb24gYm5PcihhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmJpdHdpc2VUbyhhLCBvcF9vciwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyBeIGFcbmZ1bmN0aW9uIG9wX3hvcih4LCB5KSB7XG4gIHJldHVybiB4IF4geVxufVxuXG5mdW5jdGlvbiBiblhvcihhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmJpdHdpc2VUbyhhLCBvcF94b3IsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgJiB+YVxuZnVuY3Rpb24gb3BfYW5kbm90KHgsIHkpIHtcbiAgcmV0dXJuIHggJiB+eVxufVxuXG5mdW5jdGlvbiBibkFuZE5vdChhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmJpdHdpc2VUbyhhLCBvcF9hbmRub3QsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIH50aGlzXG5mdW5jdGlvbiBibk5vdCgpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHJbaV0gPSB0aGlzLkRNICYgfnRoaXNbaV1cbiAgci50ID0gdGhpcy50XG4gIHIucyA9IH50aGlzLnNcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyA8PCBuXG5mdW5jdGlvbiBiblNoaWZ0TGVmdChuKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICBpZiAobiA8IDApIHRoaXMuclNoaWZ0VG8oLW4sIHIpXG4gIGVsc2UgdGhpcy5sU2hpZnRUbyhuLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzID4+IG5cbmZ1bmN0aW9uIGJuU2hpZnRSaWdodChuKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICBpZiAobiA8IDApIHRoaXMubFNoaWZ0VG8oLW4sIHIpXG4gIGVsc2UgdGhpcy5yU2hpZnRUbyhuLCByKVxuICByZXR1cm4gclxufVxuXG4vLyByZXR1cm4gaW5kZXggb2YgbG93ZXN0IDEtYml0IGluIHgsIHggPCAyXjMxXG5mdW5jdGlvbiBsYml0KHgpIHtcbiAgaWYgKHggPT0gMCkgcmV0dXJuIC0xXG4gIHZhciByID0gMFxuICBpZiAoKHggJiAweGZmZmYpID09IDApIHtcbiAgICB4ID4+PSAxNlxuICAgIHIgKz0gMTZcbiAgfVxuICBpZiAoKHggJiAweGZmKSA9PSAwKSB7XG4gICAgeCA+Pj0gOFxuICAgIHIgKz0gOFxuICB9XG4gIGlmICgoeCAmIDB4ZikgPT0gMCkge1xuICAgIHggPj49IDRcbiAgICByICs9IDRcbiAgfVxuICBpZiAoKHggJiAzKSA9PSAwKSB7XG4gICAgeCA+Pj0gMlxuICAgIHIgKz0gMlxuICB9XG4gIGlmICgoeCAmIDEpID09IDApKytyXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHJldHVybnMgaW5kZXggb2YgbG93ZXN0IDEtYml0IChvciAtMSBpZiBub25lKVxuZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpXG4gICAgaWYgKHRoaXNbaV0gIT0gMCkgcmV0dXJuIGkgKiB0aGlzLkRCICsgbGJpdCh0aGlzW2ldKVxuICBpZiAodGhpcy5zIDwgMCkgcmV0dXJuIHRoaXMudCAqIHRoaXMuREJcbiAgcmV0dXJuIC0xXG59XG5cbi8vIHJldHVybiBudW1iZXIgb2YgMSBiaXRzIGluIHhcbmZ1bmN0aW9uIGNiaXQoeCkge1xuICB2YXIgciA9IDBcbiAgd2hpbGUgKHggIT0gMCkge1xuICAgIHggJj0geCAtIDFcbiAgICArK3JcbiAgfVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSByZXR1cm4gbnVtYmVyIG9mIHNldCBiaXRzXG5mdW5jdGlvbiBibkJpdENvdW50KCkge1xuICB2YXIgciA9IDAsXG4gICAgeCA9IHRoaXMucyAmIHRoaXMuRE1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSkgciArPSBjYml0KHRoaXNbaV0gXiB4KVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0cnVlIGlmZiBudGggYml0IGlzIHNldFxuZnVuY3Rpb24gYm5UZXN0Qml0KG4pIHtcbiAgdmFyIGogPSBNYXRoLmZsb29yKG4gLyB0aGlzLkRCKVxuICBpZiAoaiA+PSB0aGlzLnQpIHJldHVybiAodGhpcy5zICE9IDApXG4gIHJldHVybiAoKHRoaXNbal0gJiAoMSA8PCAobiAlIHRoaXMuREIpKSkgIT0gMClcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyBvcCAoMTw8bilcbmZ1bmN0aW9uIGJucENoYW5nZUJpdChuLCBvcCkge1xuICB2YXIgciA9IEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChuKVxuICB0aGlzLmJpdHdpc2VUbyhyLCBvcCwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyB8ICgxPDxuKVxuZnVuY3Rpb24gYm5TZXRCaXQobikge1xuICByZXR1cm4gdGhpcy5jaGFuZ2VCaXQobiwgb3Bfb3IpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgJiB+KDE8PG4pXG5mdW5jdGlvbiBibkNsZWFyQml0KG4pIHtcbiAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX2FuZG5vdClcbn1cblxuLy8gKHB1YmxpYykgdGhpcyBeICgxPDxuKVxuZnVuY3Rpb24gYm5GbGlwQml0KG4pIHtcbiAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX3hvcilcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgKyBhXG5mdW5jdGlvbiBibnBBZGRUbyhhLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHZhciBpID0gMCxcbiAgICBjID0gMCxcbiAgICBtID0gTWF0aC5taW4oYS50LCBzZWxmLnQpXG4gIHdoaWxlIChpIDwgbSkge1xuICAgIGMgKz0gc2VsZltpXSArIGFbaV1cbiAgICByW2krK10gPSBjICYgc2VsZi5ETVxuICAgIGMgPj49IHNlbGYuREJcbiAgfVxuICBpZiAoYS50IDwgc2VsZi50KSB7XG4gICAgYyArPSBhLnNcbiAgICB3aGlsZSAoaSA8IHNlbGYudCkge1xuICAgICAgYyArPSBzZWxmW2ldXG4gICAgICByW2krK10gPSBjICYgc2VsZi5ETVxuICAgICAgYyA+Pj0gc2VsZi5EQlxuICAgIH1cbiAgICBjICs9IHNlbGYuc1xuICB9IGVsc2Uge1xuICAgIGMgKz0gc2VsZi5zXG4gICAgd2hpbGUgKGkgPCBhLnQpIHtcbiAgICAgIGMgKz0gYVtpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBhLnNcbiAgfVxuICByLnMgPSAoYyA8IDApID8gLTEgOiAwXG4gIGlmIChjID4gMCkgcltpKytdID0gY1xuICBlbHNlIGlmIChjIDwgLTEpIHJbaSsrXSA9IHNlbGYuRFYgKyBjXG4gIHIudCA9IGlcbiAgci5jbGFtcCgpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgKyBhXG5mdW5jdGlvbiBibkFkZChhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmFkZFRvKGEsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgLSBhXG5mdW5jdGlvbiBiblN1YnRyYWN0KGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuc3ViVG8oYSwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyAqIGFcbmZ1bmN0aW9uIGJuTXVsdGlwbHkoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5tdWx0aXBseVRvKGEsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXNeMlxuZnVuY3Rpb24gYm5TcXVhcmUoKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnNxdWFyZVRvKHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgLyBhXG5mdW5jdGlvbiBibkRpdmlkZShhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmRpdlJlbVRvKGEsIHIsIG51bGwpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgJSBhXG5mdW5jdGlvbiBiblJlbWFpbmRlcihhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLmRpdlJlbVRvKGEsIG51bGwsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIFt0aGlzL2EsdGhpcyVhXVxuZnVuY3Rpb24gYm5EaXZpZGVBbmRSZW1haW5kZXIoYSkge1xuICB2YXIgcSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCBxLCByKVxuICByZXR1cm4gbmV3IEFycmF5KHEsIHIpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXMgKj0gbiwgdGhpcyA+PSAwLCAxIDwgbiA8IERWXG5mdW5jdGlvbiBibnBETXVsdGlwbHkobikge1xuICB0aGlzW3RoaXMudF0gPSB0aGlzLmFtKDAsIG4gLSAxLCB0aGlzLCAwLCAwLCB0aGlzLnQpXG4gICsrdGhpcy50XG4gIHRoaXMuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzICs9IG4gPDwgdyB3b3JkcywgdGhpcyA+PSAwXG5mdW5jdGlvbiBibnBEQWRkT2Zmc2V0KG4sIHcpIHtcbiAgaWYgKG4gPT0gMCkgcmV0dXJuXG4gIHdoaWxlICh0aGlzLnQgPD0gdykgdGhpc1t0aGlzLnQrK10gPSAwXG4gIHRoaXNbd10gKz0gblxuICB3aGlsZSAodGhpc1t3XSA+PSB0aGlzLkRWKSB7XG4gICAgdGhpc1t3XSAtPSB0aGlzLkRWXG4gICAgaWYgKCsrdyA+PSB0aGlzLnQpIHRoaXNbdGhpcy50KytdID0gMFxuICAgICsrdGhpc1t3XVxuICB9XG59XG5cbi8vIEEgXCJudWxsXCIgcmVkdWNlclxuZnVuY3Rpb24gTnVsbEV4cCgpIHt9XG5cbmZ1bmN0aW9uIG5Ob3AoeCkge1xuICByZXR1cm4geFxufVxuXG5mdW5jdGlvbiBuTXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbn1cblxuZnVuY3Rpb24gblNxclRvKHgsIHIpIHtcbiAgeC5zcXVhcmVUbyhyKVxufVxuXG5OdWxsRXhwLnByb3RvdHlwZS5jb252ZXJ0ID0gbk5vcFxuTnVsbEV4cC5wcm90b3R5cGUucmV2ZXJ0ID0gbk5vcFxuTnVsbEV4cC5wcm90b3R5cGUubXVsVG8gPSBuTXVsVG9cbk51bGxFeHAucHJvdG90eXBlLnNxclRvID0gblNxclRvXG5cbi8vIChwdWJsaWMpIHRoaXNeZVxuZnVuY3Rpb24gYm5Qb3coZSkge1xuICByZXR1cm4gdGhpcy5leHAoZSwgbmV3IE51bGxFeHAoKSlcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IGxvd2VyIG4gd29yZHMgb2YgXCJ0aGlzICogYVwiLCBhLnQgPD0gblxuLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuZnVuY3Rpb24gYm5wTXVsdGlwbHlMb3dlclRvKGEsIG4sIHIpIHtcbiAgdmFyIGkgPSBNYXRoLm1pbih0aGlzLnQgKyBhLnQsIG4pXG4gIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgci50ID0gaVxuICB3aGlsZSAoaSA+IDApIHJbLS1pXSA9IDBcbiAgdmFyIGpcbiAgZm9yIChqID0gci50IC0gdGhpcy50OyBpIDwgajsgKytpKSByW2kgKyB0aGlzLnRdID0gdGhpcy5hbSgwLCBhW2ldLCByLCBpLCAwLCB0aGlzLnQpXG4gIGZvciAoaiA9IE1hdGgubWluKGEudCwgbik7IGkgPCBqOyArK2kpIHRoaXMuYW0oMCwgYVtpXSwgciwgaSwgMCwgbiAtIGkpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gXCJ0aGlzICogYVwiIHdpdGhvdXQgbG93ZXIgbiB3b3JkcywgbiA+IDBcbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5VXBwZXJUbyhhLCBuLCByKSB7XG4gIC0tblxuICB2YXIgaSA9IHIudCA9IHRoaXMudCArIGEudCAtIG5cbiAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICB3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwXG4gIGZvciAoaSA9IE1hdGgubWF4KG4gLSB0aGlzLnQsIDApOyBpIDwgYS50OyArK2kpXG4gICAgclt0aGlzLnQgKyBpIC0gbl0gPSB0aGlzLmFtKG4gLSBpLCBhW2ldLCByLCAwLCAwLCB0aGlzLnQgKyBpIC0gbilcbiAgci5jbGFtcCgpXG4gIHIuZHJTaGlmdFRvKDEsIHIpXG59XG5cbi8vIEJhcnJldHQgbW9kdWxhciByZWR1Y3Rpb25cbmZ1bmN0aW9uIEJhcnJldHQobSkge1xuICAvLyBzZXR1cCBCYXJyZXR0XG4gIHRoaXMucjIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMucTMgPSBuZXcgQmlnSW50ZWdlcigpXG4gIEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbygyICogbS50LCB0aGlzLnIyKVxuICB0aGlzLm11ID0gdGhpcy5yMi5kaXZpZGUobSlcbiAgdGhpcy5tID0gbVxufVxuXG5mdW5jdGlvbiBiYXJyZXR0Q29udmVydCh4KSB7XG4gIGlmICh4LnMgPCAwIHx8IHgudCA+IDIgKiB0aGlzLm0udCkgcmV0dXJuIHgubW9kKHRoaXMubSlcbiAgZWxzZSBpZiAoeC5jb21wYXJlVG8odGhpcy5tKSA8IDApIHJldHVybiB4XG4gIGVsc2Uge1xuICAgIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICAgIHguY29weVRvKHIpXG4gICAgdGhpcy5yZWR1Y2UocilcbiAgICByZXR1cm4gclxuICB9XG59XG5cbmZ1bmN0aW9uIGJhcnJldHRSZXZlcnQoeCkge1xuICByZXR1cm4geFxufVxuXG4vLyB4ID0geCBtb2QgbSAoSEFDIDE0LjQyKVxuZnVuY3Rpb24gYmFycmV0dFJlZHVjZSh4KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB4LmRyU2hpZnRUbyhzZWxmLm0udCAtIDEsIHNlbGYucjIpXG4gIGlmICh4LnQgPiBzZWxmLm0udCArIDEpIHtcbiAgICB4LnQgPSBzZWxmLm0udCArIDFcbiAgICB4LmNsYW1wKClcbiAgfVxuICBzZWxmLm11Lm11bHRpcGx5VXBwZXJUbyhzZWxmLnIyLCBzZWxmLm0udCArIDEsIHNlbGYucTMpXG4gIHNlbGYubS5tdWx0aXBseUxvd2VyVG8oc2VsZi5xMywgc2VsZi5tLnQgKyAxLCBzZWxmLnIyKVxuICB3aGlsZSAoeC5jb21wYXJlVG8oc2VsZi5yMikgPCAwKSB4LmRBZGRPZmZzZXQoMSwgc2VsZi5tLnQgKyAxKVxuICB4LnN1YlRvKHNlbGYucjIsIHgpXG4gIHdoaWxlICh4LmNvbXBhcmVUbyhzZWxmLm0pID49IDApIHguc3ViVG8oc2VsZi5tLCB4KVxufVxuXG4vLyByID0geF4yIG1vZCBtOyB4ICE9IHJcbmZ1bmN0aW9uIGJhcnJldHRTcXJUbyh4LCByKSB7XG4gIHguc3F1YXJlVG8ocilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuLy8gciA9IHgqeSBtb2QgbTsgeCx5ICE9IHJcbmZ1bmN0aW9uIGJhcnJldHRNdWxUbyh4LCB5LCByKSB7XG4gIHgubXVsdGlwbHlUbyh5LCByKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5CYXJyZXR0LnByb3RvdHlwZS5jb252ZXJ0ID0gYmFycmV0dENvbnZlcnRcbkJhcnJldHQucHJvdG90eXBlLnJldmVydCA9IGJhcnJldHRSZXZlcnRcbkJhcnJldHQucHJvdG90eXBlLnJlZHVjZSA9IGJhcnJldHRSZWR1Y2VcbkJhcnJldHQucHJvdG90eXBlLm11bFRvID0gYmFycmV0dE11bFRvXG5CYXJyZXR0LnByb3RvdHlwZS5zcXJUbyA9IGJhcnJldHRTcXJUb1xuXG4vLyAocHVibGljKSB0aGlzXmUgJSBtIChIQUMgMTQuODUpXG5mdW5jdGlvbiBibk1vZFBvdyhlLCBtKSB7XG4gIHZhciBpID0gZS5iaXRMZW5ndGgoKSxcbiAgICBrLCByID0gbmJ2KDEpLFxuICAgIHpcbiAgaWYgKGkgPD0gMCkgcmV0dXJuIHJcbiAgZWxzZSBpZiAoaSA8IDE4KSBrID0gMVxuICBlbHNlIGlmIChpIDwgNDgpIGsgPSAzXG4gIGVsc2UgaWYgKGkgPCAxNDQpIGsgPSA0XG4gIGVsc2UgaWYgKGkgPCA3NjgpIGsgPSA1XG4gIGVsc2UgayA9IDZcbiAgaWYgKGkgPCA4KVxuICAgIHogPSBuZXcgQ2xhc3NpYyhtKVxuICBlbHNlIGlmIChtLmlzRXZlbigpKVxuICAgIHogPSBuZXcgQmFycmV0dChtKVxuICBlbHNlXG4gICAgeiA9IG5ldyBNb250Z29tZXJ5KG0pXG5cbiAgLy8gcHJlY29tcHV0YXRpb25cbiAgdmFyIGcgPSBuZXcgQXJyYXkoKSxcbiAgICBuID0gMyxcbiAgICBrMSA9IGsgLSAxLFxuICAgIGttID0gKDEgPDwgaykgLSAxXG4gIGdbMV0gPSB6LmNvbnZlcnQodGhpcylcbiAgaWYgKGsgPiAxKSB7XG4gICAgdmFyIGcyID0gbmV3IEJpZ0ludGVnZXIoKVxuICAgIHouc3FyVG8oZ1sxXSwgZzIpXG4gICAgd2hpbGUgKG4gPD0ga20pIHtcbiAgICAgIGdbbl0gPSBuZXcgQmlnSW50ZWdlcigpXG4gICAgICB6Lm11bFRvKGcyLCBnW24gLSAyXSwgZ1tuXSlcbiAgICAgIG4gKz0gMlxuICAgIH1cbiAgfVxuXG4gIHZhciBqID0gZS50IC0gMSxcbiAgICB3LCBpczEgPSB0cnVlLFxuICAgIHIyID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICB0XG4gIGkgPSBuYml0cyhlW2pdKSAtIDFcbiAgd2hpbGUgKGogPj0gMCkge1xuICAgIGlmIChpID49IGsxKSB3ID0gKGVbal0gPj4gKGkgLSBrMSkpICYga21cbiAgICBlbHNlIHtcbiAgICAgIHcgPSAoZVtqXSAmICgoMSA8PCAoaSArIDEpKSAtIDEpKSA8PCAoazEgLSBpKVxuICAgICAgaWYgKGogPiAwKSB3IHw9IGVbaiAtIDFdID4+ICh0aGlzLkRCICsgaSAtIGsxKVxuICAgIH1cblxuICAgIG4gPSBrXG4gICAgd2hpbGUgKCh3ICYgMSkgPT0gMCkge1xuICAgICAgdyA+Pj0gMVxuICAgICAgLS1uXG4gICAgfVxuICAgIGlmICgoaSAtPSBuKSA8IDApIHtcbiAgICAgIGkgKz0gdGhpcy5EQlxuICAgICAgLS1qXG4gICAgfVxuICAgIGlmIChpczEpIHsgLy8gcmV0ID09IDEsIGRvbid0IGJvdGhlciBzcXVhcmluZyBvciBtdWx0aXBseWluZyBpdFxuICAgICAgZ1t3XS5jb3B5VG8ocilcbiAgICAgIGlzMSA9IGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChuID4gMSkge1xuICAgICAgICB6LnNxclRvKHIsIHIyKVxuICAgICAgICB6LnNxclRvKHIyLCByKVxuICAgICAgICBuIC09IDJcbiAgICAgIH1cbiAgICAgIGlmIChuID4gMCkgei5zcXJUbyhyLCByMilcbiAgICAgIGVsc2Uge1xuICAgICAgICB0ID0gclxuICAgICAgICByID0gcjJcbiAgICAgICAgcjIgPSB0XG4gICAgICB9XG4gICAgICB6Lm11bFRvKHIyLCBnW3ddLCByKVxuICAgIH1cblxuICAgIHdoaWxlIChqID49IDAgJiYgKGVbal0gJiAoMSA8PCBpKSkgPT0gMCkge1xuICAgICAgei5zcXJUbyhyLCByMilcbiAgICAgIHQgPSByXG4gICAgICByID0gcjJcbiAgICAgIHIyID0gdFxuICAgICAgaWYgKC0taSA8IDApIHtcbiAgICAgICAgaSA9IHRoaXMuREIgLSAxXG4gICAgICAgIC0talxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gei5yZXZlcnQocilcbn1cblxuLy8gKHB1YmxpYykgZ2NkKHRoaXMsYSkgKEhBQyAxNC41NClcbmZ1bmN0aW9uIGJuR0NEKGEpIHtcbiAgdmFyIHggPSAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpcy5jbG9uZSgpXG4gIHZhciB5ID0gKGEucyA8IDApID8gYS5uZWdhdGUoKSA6IGEuY2xvbmUoKVxuICBpZiAoeC5jb21wYXJlVG8oeSkgPCAwKSB7XG4gICAgdmFyIHQgPSB4XG4gICAgeCA9IHlcbiAgICB5ID0gdFxuICB9XG4gIHZhciBpID0geC5nZXRMb3dlc3RTZXRCaXQoKSxcbiAgICBnID0geS5nZXRMb3dlc3RTZXRCaXQoKVxuICBpZiAoZyA8IDApIHJldHVybiB4XG4gIGlmIChpIDwgZykgZyA9IGlcbiAgaWYgKGcgPiAwKSB7XG4gICAgeC5yU2hpZnRUbyhnLCB4KVxuICAgIHkuclNoaWZ0VG8oZywgeSlcbiAgfVxuICB3aGlsZSAoeC5zaWdudW0oKSA+IDApIHtcbiAgICBpZiAoKGkgPSB4LmdldExvd2VzdFNldEJpdCgpKSA+IDApIHguclNoaWZ0VG8oaSwgeClcbiAgICBpZiAoKGkgPSB5LmdldExvd2VzdFNldEJpdCgpKSA+IDApIHkuclNoaWZ0VG8oaSwgeSlcbiAgICBpZiAoeC5jb21wYXJlVG8oeSkgPj0gMCkge1xuICAgICAgeC5zdWJUbyh5LCB4KVxuICAgICAgeC5yU2hpZnRUbygxLCB4KVxuICAgIH0gZWxzZSB7XG4gICAgICB5LnN1YlRvKHgsIHkpXG4gICAgICB5LnJTaGlmdFRvKDEsIHkpXG4gICAgfVxuICB9XG4gIGlmIChnID4gMCkgeS5sU2hpZnRUbyhnLCB5KVxuICByZXR1cm4geVxufVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzICUgbiwgbiA8IDJeMjZcbmZ1bmN0aW9uIGJucE1vZEludChuKSB7XG4gIGlmIChuIDw9IDApIHJldHVybiAwXG4gIHZhciBkID0gdGhpcy5EViAlIG4sXG4gICAgciA9ICh0aGlzLnMgPCAwKSA/IG4gLSAxIDogMFxuICBpZiAodGhpcy50ID4gMClcbiAgICBpZiAoZCA9PSAwKSByID0gdGhpc1swXSAlIG5cbiAgICBlbHNlXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50IC0gMTsgaSA+PSAwOyAtLWkpIHIgPSAoZCAqIHIgKyB0aGlzW2ldKSAlIG5cbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgMS90aGlzICUgbSAoSEFDIDE0LjYxKVxuZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKG0pIHtcbiAgdmFyIGFjID0gbS5pc0V2ZW4oKVxuICBpZiAodGhpcy5zaWdudW0oKSA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdkaXZpc2lvbiBieSB6ZXJvJylcbiAgaWYgKCh0aGlzLmlzRXZlbigpICYmIGFjKSB8fCBtLnNpZ251bSgpID09IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk9cbiAgdmFyIHUgPSBtLmNsb25lKCksXG4gICAgdiA9IHRoaXMuY2xvbmUoKVxuICB2YXIgYSA9IG5idigxKSxcbiAgICBiID0gbmJ2KDApLFxuICAgIGMgPSBuYnYoMCksXG4gICAgZCA9IG5idigxKVxuICB3aGlsZSAodS5zaWdudW0oKSAhPSAwKSB7XG4gICAgd2hpbGUgKHUuaXNFdmVuKCkpIHtcbiAgICAgIHUuclNoaWZ0VG8oMSwgdSlcbiAgICAgIGlmIChhYykge1xuICAgICAgICBpZiAoIWEuaXNFdmVuKCkgfHwgIWIuaXNFdmVuKCkpIHtcbiAgICAgICAgICBhLmFkZFRvKHRoaXMsIGEpXG4gICAgICAgICAgYi5zdWJUbyhtLCBiKVxuICAgICAgICB9XG4gICAgICAgIGEuclNoaWZ0VG8oMSwgYSlcbiAgICAgIH0gZWxzZSBpZiAoIWIuaXNFdmVuKCkpIGIuc3ViVG8obSwgYilcbiAgICAgIGIuclNoaWZ0VG8oMSwgYilcbiAgICB9XG4gICAgd2hpbGUgKHYuaXNFdmVuKCkpIHtcbiAgICAgIHYuclNoaWZ0VG8oMSwgdilcbiAgICAgIGlmIChhYykge1xuICAgICAgICBpZiAoIWMuaXNFdmVuKCkgfHwgIWQuaXNFdmVuKCkpIHtcbiAgICAgICAgICBjLmFkZFRvKHRoaXMsIGMpXG4gICAgICAgICAgZC5zdWJUbyhtLCBkKVxuICAgICAgICB9XG4gICAgICAgIGMuclNoaWZ0VG8oMSwgYylcbiAgICAgIH0gZWxzZSBpZiAoIWQuaXNFdmVuKCkpIGQuc3ViVG8obSwgZClcbiAgICAgIGQuclNoaWZ0VG8oMSwgZClcbiAgICB9XG4gICAgaWYgKHUuY29tcGFyZVRvKHYpID49IDApIHtcbiAgICAgIHUuc3ViVG8odiwgdSlcbiAgICAgIGlmIChhYykgYS5zdWJUbyhjLCBhKVxuICAgICAgYi5zdWJUbyhkLCBiKVxuICAgIH0gZWxzZSB7XG4gICAgICB2LnN1YlRvKHUsIHYpXG4gICAgICBpZiAoYWMpIGMuc3ViVG8oYSwgYylcbiAgICAgIGQuc3ViVG8oYiwgZClcbiAgICB9XG4gIH1cbiAgaWYgKHYuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSAhPSAwKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPXG4gIHdoaWxlIChkLmNvbXBhcmVUbyhtKSA+PSAwKSBkLnN1YlRvKG0sIGQpXG4gIHdoaWxlIChkLnNpZ251bSgpIDwgMCkgZC5hZGRUbyhtLCBkKVxuICByZXR1cm4gZFxufVxuXG52YXIgbG93cHJpbWVzID0gW1xuICAyLCAzLCA1LCA3LCAxMSwgMTMsIDE3LCAxOSwgMjMsIDI5LCAzMSwgMzcsIDQxLCA0MywgNDcsIDUzLCA1OSwgNjEsIDY3LCA3MSxcbiAgNzMsIDc5LCA4MywgODksIDk3LCAxMDEsIDEwMywgMTA3LCAxMDksIDExMywgMTI3LCAxMzEsIDEzNywgMTM5LCAxNDksIDE1MSxcbiAgMTU3LCAxNjMsIDE2NywgMTczLCAxNzksIDE4MSwgMTkxLCAxOTMsIDE5NywgMTk5LCAyMTEsIDIyMywgMjI3LCAyMjksIDIzMyxcbiAgMjM5LCAyNDEsIDI1MSwgMjU3LCAyNjMsIDI2OSwgMjcxLCAyNzcsIDI4MSwgMjgzLCAyOTMsIDMwNywgMzExLCAzMTMsIDMxNyxcbiAgMzMxLCAzMzcsIDM0NywgMzQ5LCAzNTMsIDM1OSwgMzY3LCAzNzMsIDM3OSwgMzgzLCAzODksIDM5NywgNDAxLCA0MDksIDQxOSxcbiAgNDIxLCA0MzEsIDQzMywgNDM5LCA0NDMsIDQ0OSwgNDU3LCA0NjEsIDQ2MywgNDY3LCA0NzksIDQ4NywgNDkxLCA0OTksIDUwMyxcbiAgNTA5LCA1MjEsIDUyMywgNTQxLCA1NDcsIDU1NywgNTYzLCA1NjksIDU3MSwgNTc3LCA1ODcsIDU5MywgNTk5LCA2MDEsIDYwNyxcbiAgNjEzLCA2MTcsIDYxOSwgNjMxLCA2NDEsIDY0MywgNjQ3LCA2NTMsIDY1OSwgNjYxLCA2NzMsIDY3NywgNjgzLCA2OTEsIDcwMSxcbiAgNzA5LCA3MTksIDcyNywgNzMzLCA3MzksIDc0MywgNzUxLCA3NTcsIDc2MSwgNzY5LCA3NzMsIDc4NywgNzk3LCA4MDksIDgxMSxcbiAgODIxLCA4MjMsIDgyNywgODI5LCA4MzksIDg1MywgODU3LCA4NTksIDg2MywgODc3LCA4ODEsIDg4MywgODg3LCA5MDcsIDkxMSxcbiAgOTE5LCA5MjksIDkzNywgOTQxLCA5NDcsIDk1MywgOTY3LCA5NzEsIDk3NywgOTgzLCA5OTEsIDk5N1xuXVxuXG52YXIgbHBsaW0gPSAoMSA8PCAyNikgLyBsb3dwcmltZXNbbG93cHJpbWVzLmxlbmd0aCAtIDFdXG5cbi8vIChwdWJsaWMpIHRlc3QgcHJpbWFsaXR5IHdpdGggY2VydGFpbnR5ID49IDEtLjVedFxuZnVuY3Rpb24gYm5Jc1Byb2JhYmxlUHJpbWUodCkge1xuICB2YXIgaSwgeCA9IHRoaXMuYWJzKClcbiAgaWYgKHgudCA9PSAxICYmIHhbMF0gPD0gbG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGggLSAxXSkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBsb3dwcmltZXMubGVuZ3RoOyArK2kpXG4gICAgICBpZiAoeFswXSA9PSBsb3dwcmltZXNbaV0pIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKHguaXNFdmVuKCkpIHJldHVybiBmYWxzZVxuICBpID0gMVxuICB3aGlsZSAoaSA8IGxvd3ByaW1lcy5sZW5ndGgpIHtcbiAgICB2YXIgbSA9IGxvd3ByaW1lc1tpXSxcbiAgICAgIGogPSBpICsgMVxuICAgIHdoaWxlIChqIDwgbG93cHJpbWVzLmxlbmd0aCAmJiBtIDwgbHBsaW0pIG0gKj0gbG93cHJpbWVzW2orK11cbiAgICBtID0geC5tb2RJbnQobSlcbiAgICB3aGlsZSAoaSA8IGopIGlmIChtICUgbG93cHJpbWVzW2krK10gPT0gMCkgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHgubWlsbGVyUmFiaW4odClcbn1cblxuLy8gKHByb3RlY3RlZCkgdHJ1ZSBpZiBwcm9iYWJseSBwcmltZSAoSEFDIDQuMjQsIE1pbGxlci1SYWJpbilcbmZ1bmN0aW9uIGJucE1pbGxlclJhYmluKHQpIHtcbiAgdmFyIG4xID0gdGhpcy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSlcbiAgdmFyIGsgPSBuMS5nZXRMb3dlc3RTZXRCaXQoKVxuICBpZiAoayA8PSAwKSByZXR1cm4gZmFsc2VcbiAgdmFyIHIgPSBuMS5zaGlmdFJpZ2h0KGspXG4gIHQgPSAodCArIDEpID4+IDFcbiAgaWYgKHQgPiBsb3dwcmltZXMubGVuZ3RoKSB0ID0gbG93cHJpbWVzLmxlbmd0aFxuICB2YXIgYSA9IG5ldyBCaWdJbnRlZ2VyKG51bGwpXG4gIHZhciBqLCBiYXNlcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdDsgKytpKSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgaiA9IGxvd3ByaW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsb3dwcmltZXMubGVuZ3RoKV1cbiAgICAgIGlmIChiYXNlcy5pbmRleE9mKGopID09IC0xKSBicmVha1xuICAgIH1cbiAgICBiYXNlcy5wdXNoKGopXG4gICAgYS5mcm9tSW50KGopXG4gICAgdmFyIHkgPSBhLm1vZFBvdyhyLCB0aGlzKVxuICAgIGlmICh5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMCkge1xuICAgICAgdmFyIGogPSAxXG4gICAgICB3aGlsZSAoaisrIDwgayAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMCkge1xuICAgICAgICB5ID0geS5tb2RQb3dJbnQoMiwgdGhpcylcbiAgICAgICAgaWYgKHkuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSA9PSAwKSByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmICh5LmNvbXBhcmVUbyhuMSkgIT0gMCkgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8vIHByb3RlY3RlZFxucHJvdG8uY2h1bmtTaXplID0gYm5wQ2h1bmtTaXplXG5wcm90by50b1JhZGl4ID0gYm5wVG9SYWRpeFxucHJvdG8uZnJvbVJhZGl4ID0gYm5wRnJvbVJhZGl4XG5wcm90by5mcm9tTnVtYmVyID0gYm5wRnJvbU51bWJlclxucHJvdG8uYml0d2lzZVRvID0gYm5wQml0d2lzZVRvXG5wcm90by5jaGFuZ2VCaXQgPSBibnBDaGFuZ2VCaXRcbnByb3RvLmFkZFRvID0gYm5wQWRkVG9cbnByb3RvLmRNdWx0aXBseSA9IGJucERNdWx0aXBseVxucHJvdG8uZEFkZE9mZnNldCA9IGJucERBZGRPZmZzZXRcbnByb3RvLm11bHRpcGx5TG93ZXJUbyA9IGJucE11bHRpcGx5TG93ZXJUb1xucHJvdG8ubXVsdGlwbHlVcHBlclRvID0gYm5wTXVsdGlwbHlVcHBlclRvXG5wcm90by5tb2RJbnQgPSBibnBNb2RJbnRcbnByb3RvLm1pbGxlclJhYmluID0gYm5wTWlsbGVyUmFiaW5cblxuLy8gcHVibGljXG5wcm90by5jbG9uZSA9IGJuQ2xvbmVcbnByb3RvLmludFZhbHVlID0gYm5JbnRWYWx1ZVxucHJvdG8uYnl0ZVZhbHVlID0gYm5CeXRlVmFsdWVcbnByb3RvLnNob3J0VmFsdWUgPSBiblNob3J0VmFsdWVcbnByb3RvLnNpZ251bSA9IGJuU2lnTnVtXG5wcm90by50b0J5dGVBcnJheSA9IGJuVG9CeXRlQXJyYXlcbnByb3RvLmVxdWFscyA9IGJuRXF1YWxzXG5wcm90by5taW4gPSBibk1pblxucHJvdG8ubWF4ID0gYm5NYXhcbnByb3RvLmFuZCA9IGJuQW5kXG5wcm90by5vciA9IGJuT3JcbnByb3RvLnhvciA9IGJuWG9yXG5wcm90by5hbmROb3QgPSBibkFuZE5vdFxucHJvdG8ubm90ID0gYm5Ob3RcbnByb3RvLnNoaWZ0TGVmdCA9IGJuU2hpZnRMZWZ0XG5wcm90by5zaGlmdFJpZ2h0ID0gYm5TaGlmdFJpZ2h0XG5wcm90by5nZXRMb3dlc3RTZXRCaXQgPSBibkdldExvd2VzdFNldEJpdFxucHJvdG8uYml0Q291bnQgPSBibkJpdENvdW50XG5wcm90by50ZXN0Qml0ID0gYm5UZXN0Qml0XG5wcm90by5zZXRCaXQgPSBiblNldEJpdFxucHJvdG8uY2xlYXJCaXQgPSBibkNsZWFyQml0XG5wcm90by5mbGlwQml0ID0gYm5GbGlwQml0XG5wcm90by5hZGQgPSBibkFkZFxucHJvdG8uc3VidHJhY3QgPSBiblN1YnRyYWN0XG5wcm90by5tdWx0aXBseSA9IGJuTXVsdGlwbHlcbnByb3RvLmRpdmlkZSA9IGJuRGl2aWRlXG5wcm90by5yZW1haW5kZXIgPSBiblJlbWFpbmRlclxucHJvdG8uZGl2aWRlQW5kUmVtYWluZGVyID0gYm5EaXZpZGVBbmRSZW1haW5kZXJcbnByb3RvLm1vZFBvdyA9IGJuTW9kUG93XG5wcm90by5tb2RJbnZlcnNlID0gYm5Nb2RJbnZlcnNlXG5wcm90by5wb3cgPSBiblBvd1xucHJvdG8uZ2NkID0gYm5HQ0RcbnByb3RvLmlzUHJvYmFibGVQcmltZSA9IGJuSXNQcm9iYWJsZVByaW1lXG5cbi8vIEpTQk4tc3BlY2lmaWMgZXh0ZW5zaW9uXG5wcm90by5zcXVhcmUgPSBiblNxdWFyZVxuXG4vLyBjb25zdGFudHNcbkJpZ0ludGVnZXIuWkVSTyA9IG5idigwKVxuQmlnSW50ZWdlci5PTkUgPSBuYnYoMSlcbkJpZ0ludGVnZXIudmFsdWVPZiA9IG5idlxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpZ0ludGVnZXJcbiIsInZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcblxudmFyIFBvaW50ID0gcmVxdWlyZSgnLi9wb2ludCcpXG5cbmZ1bmN0aW9uIEN1cnZlIChwLCBhLCBiLCBHeCwgR3ksIG4sIGgpIHtcbiAgdGhpcy5wID0gcFxuICB0aGlzLmEgPSBhXG4gIHRoaXMuYiA9IGJcbiAgdGhpcy5HID0gUG9pbnQuZnJvbUFmZmluZSh0aGlzLCBHeCwgR3kpXG4gIHRoaXMubiA9IG5cbiAgdGhpcy5oID0gaFxuXG4gIHRoaXMuaW5maW5pdHkgPSBuZXcgUG9pbnQodGhpcywgbnVsbCwgbnVsbCwgQmlnSW50ZWdlci5aRVJPKVxuXG4gIC8vIHJlc3VsdCBjYWNoaW5nXG4gIHRoaXMucE92ZXJGb3VyID0gcC5hZGQoQmlnSW50ZWdlci5PTkUpLnNoaWZ0UmlnaHQoMilcblxuICAvLyBkZXRlcm1pbmUgc2l6ZSBvZiBwIGluIGJ5dGVzXG4gIHRoaXMucExlbmd0aCA9IE1hdGguZmxvb3IoKHRoaXMucC5iaXRMZW5ndGgoKSArIDcpIC8gOClcbn1cblxuQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiAoaXNPZGQsIHgpIHtcbiAgdmFyIGFscGhhID0geC5wb3coMykuYWRkKHRoaXMuYS5tdWx0aXBseSh4KSkuYWRkKHRoaXMuYikubW9kKHRoaXMucClcbiAgdmFyIGJldGEgPSBhbHBoYS5tb2RQb3codGhpcy5wT3ZlckZvdXIsIHRoaXMucCkgLy8gWFhYOiBub3QgY29tcGF0aWJsZSB3aXRoIGFsbCBjdXJ2ZXNcblxuICB2YXIgeSA9IGJldGFcbiAgaWYgKGJldGEuaXNFdmVuKCkgXiAhaXNPZGQpIHtcbiAgICB5ID0gdGhpcy5wLnN1YnRyYWN0KHkpIC8vIC15ICUgcFxuICB9XG5cbiAgcmV0dXJuIFBvaW50LmZyb21BZmZpbmUodGhpcywgeCwgeSlcbn1cblxuQ3VydmUucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiAoUSkge1xuICBpZiAoUSA9PT0gdGhpcy5pbmZpbml0eSkgcmV0dXJuIHRydWVcblxuICByZXR1cm4gUS56LnNpZ251bSgpID09PSAwICYmIFEueS5zaWdudW0oKSAhPT0gMFxufVxuXG5DdXJ2ZS5wcm90b3R5cGUuaXNPbkN1cnZlID0gZnVuY3Rpb24gKFEpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eShRKSkgcmV0dXJuIHRydWVcblxuICB2YXIgeCA9IFEuYWZmaW5lWFxuICB2YXIgeSA9IFEuYWZmaW5lWVxuICB2YXIgYSA9IHRoaXMuYVxuICB2YXIgYiA9IHRoaXMuYlxuICB2YXIgcCA9IHRoaXMucFxuXG4gIC8vIENoZWNrIHRoYXQgeFEgYW5kIHlRIGFyZSBpbnRlZ2VycyBpbiB0aGUgaW50ZXJ2YWwgWzAsIHAgLSAxXVxuICBpZiAoeC5zaWdudW0oKSA8IDAgfHwgeC5jb21wYXJlVG8ocCkgPj0gMCkgcmV0dXJuIGZhbHNlXG4gIGlmICh5LnNpZ251bSgpIDwgMCB8fCB5LmNvbXBhcmVUbyhwKSA+PSAwKSByZXR1cm4gZmFsc2VcblxuICAvLyBhbmQgY2hlY2sgdGhhdCB5XjIgPSB4XjMgKyBheCArIGIgKG1vZCBwKVxuICB2YXIgbGhzID0geS5zcXVhcmUoKS5tb2QocClcbiAgdmFyIHJocyA9IHgucG93KDMpLmFkZChhLm11bHRpcGx5KHgpKS5hZGQoYikubW9kKHApXG4gIHJldHVybiBsaHMuZXF1YWxzKHJocylcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBhbiBlbGxpcHRpYyBjdXJ2ZSBwb2ludC5cbiAqXG4gKiBTZWUgU0VDIDEsIHNlY3Rpb24gMy4yLjIuMTogRWxsaXB0aWMgQ3VydmUgUHVibGljIEtleSBWYWxpZGF0aW9uIFByaW1pdGl2ZVxuICovXG5DdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiAoUSkge1xuICAvLyBDaGVjayBRICE9IE9cbiAgYXNzZXJ0KCF0aGlzLmlzSW5maW5pdHkoUSksICdQb2ludCBpcyBhdCBpbmZpbml0eScpXG4gIGFzc2VydCh0aGlzLmlzT25DdXJ2ZShRKSwgJ1BvaW50IGlzIG5vdCBvbiB0aGUgY3VydmUnKVxuXG4gIC8vIENoZWNrIG5RID0gTyAod2hlcmUgUSBpcyBhIHNjYWxhciBtdWx0aXBsZSBvZiBHKVxuICB2YXIgblEgPSBRLm11bHRpcGx5KHRoaXMubilcbiAgYXNzZXJ0KHRoaXMuaXNJbmZpbml0eShuUSksICdQb2ludCBpcyBub3QgYSBzY2FsYXIgbXVsdGlwbGUgb2YgRycpXG5cbiAgcmV0dXJuIHRydWVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDdXJ2ZVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaEJhc2UgPSByZXF1aXJlKCdoYXNoLWJhc2UnKVxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxudmFyIHpsID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dXG5cbnZhciB6ciA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXVxuXG52YXIgc2wgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dXG5cbnZhciBzciA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl1cblxudmFyIGhsID0gWzB4MDAwMDAwMDAsIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4YTk1M2ZkNGVdXG52YXIgaHIgPSBbMHg1MGEyOGJlNiwgMHg1YzRkZDEyNCwgMHg2ZDcwM2VmMywgMHg3YTZkNzZlOSwgMHgwMDAwMDAwMF1cblxuZnVuY3Rpb24gUklQRU1EMTYwICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxufVxuXG5pbmhlcml0cyhSSVBFTUQxNjAsIEhhc2hCYXNlKVxuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB3b3JkcyA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB3b3Jkc1tqXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGogKiA0KVxuXG4gIHZhciBhbCA9IHRoaXMuX2EgfCAwXG4gIHZhciBibCA9IHRoaXMuX2IgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2MgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2UgfCAwXG5cbiAgdmFyIGFyID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJyID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNyID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRyID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVyID0gdGhpcy5fZSB8IDBcblxuICAvLyBjb21wdXRhdGlvblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpICs9IDEpIHtcbiAgICB2YXIgdGxcbiAgICB2YXIgdHJcbiAgICBpZiAoaSA8IDE2KSB7XG4gICAgICB0bCA9IGZuMShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjUoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzBdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCAzMikge1xuICAgICAgdGwgPSBmbjIoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzFdLCBzbFtpXSlcbiAgICAgIHRyID0gZm40KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsxXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcbiAgICAgIHRsID0gZm4zKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsyXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMyhhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMl0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDY0KSB7XG4gICAgICB0bCA9IGZuNChhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbM10sIHNsW2ldKVxuICAgICAgdHIgPSBmbjIoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzNdLCBzcltpXSlcbiAgICB9IGVsc2UgeyAvLyBpZiAoaTw4MCkge1xuICAgICAgdGwgPSBmbjUoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzRdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4xKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBocls0XSwgc3JbaV0pXG4gICAgfVxuXG4gICAgYWwgPSBlbFxuICAgIGVsID0gZGxcbiAgICBkbCA9IHJvdGwoY2wsIDEwKVxuICAgIGNsID0gYmxcbiAgICBibCA9IHRsXG5cbiAgICBhciA9IGVyXG4gICAgZXIgPSBkclxuICAgIGRyID0gcm90bChjciwgMTApXG4gICAgY3IgPSBiclxuICAgIGJyID0gdHJcbiAgfVxuXG4gIC8vIHVwZGF0ZSBzdGF0ZVxuICB2YXIgdCA9ICh0aGlzLl9iICsgY2wgKyBkcikgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYyArIGRsICsgZXIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2QgKyBlbCArIGFyKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9lICsgYWwgKyBicikgfCAwXG4gIHRoaXMuX2UgPSAodGhpcy5fYSArIGJsICsgY3IpIHwgMFxuICB0aGlzLl9hID0gdFxufVxuXG5SSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNyZWF0ZSBwYWRkaW5nIGFuZCBoYW5kbGUgYmxvY2tzXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gMHg4MFxuICBpZiAodGhpcy5fYmxvY2tPZmZzZXQgPiA1Nikge1xuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDY0KVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cblxuICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMF0sIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFsxXSwgNjApXG4gIHRoaXMuX3VwZGF0ZSgpXG5cbiAgLy8gcHJvZHVjZSByZXN1bHRcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyA/IEJ1ZmZlci5hbGxvYygyMCkgOiBuZXcgQnVmZmVyKDIwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2UsIDE2KVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbjEgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjIgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMyAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgfCAofmMpKSBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm40IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjUgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiAoYyB8ICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUklQRU1EMTYwXG4iLCJ2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU0hBIChhbGdvcml0aG0pIHtcbiAgYWxnb3JpdGhtID0gYWxnb3JpdGhtLnRvTG93ZXJDYXNlKClcblxuICB2YXIgQWxnb3JpdGhtID0gZXhwb3J0c1thbGdvcml0aG1dXG4gIGlmICghQWxnb3JpdGhtKSB0aHJvdyBuZXcgRXJyb3IoYWxnb3JpdGhtICsgJyBpcyBub3Qgc3VwcG9ydGVkICh3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cyknKVxuXG4gIHJldHVybiBuZXcgQWxnb3JpdGhtKClcbn1cblxuZXhwb3J0cy5zaGEgPSByZXF1aXJlKCcuL3NoYScpXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYTEnKVxuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYTIyNCcpXG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEzODQnKVxuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOEEyRjk4LCAweDcxMzc0NDkxLCAweEI1QzBGQkNGLCAweEU5QjVEQkE1LFxuICAweDM5NTZDMjVCLCAweDU5RjExMUYxLCAweDkyM0Y4MkE0LCAweEFCMUM1RUQ1LFxuICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAweDcyQkU1RDc0LCAweDgwREVCMUZFLCAweDlCREMwNkE3LCAweEMxOUJGMTc0LFxuICAweEU0OUI2OUMxLCAweEVGQkU0Nzg2LCAweDBGQzE5REM2LCAweDI0MENBMUNDLFxuICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAweDk4M0U1MTUyLCAweEE4MzFDNjZELCAweEIwMDMyN0M4LCAweEJGNTk3RkM3LFxuICAweEM2RTAwQkYzLCAweEQ1QTc5MTQ3LCAweDA2Q0E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAweDY1MEE3MzU0LCAweDc2NkEwQUJCLCAweDgxQzJDOTJFLCAweDkyNzIyQzg1LFxuICAweEEyQkZFOEExLCAweEE4MUE2NjRCLCAweEMyNEI4QjcwLCAweEM3NkM1MUEzLFxuICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAweDE5QTRDMTE2LCAweDFFMzc2QzA4LCAweDI3NDg3NzRDLCAweDM0QjBCQ0I1LFxuICAweDM5MUMwQ0IzLCAweDRFRDhBQTRBLCAweDVCOUNDQTRGLCAweDY4MkU2RkYzLFxuICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAweDkwQkVGRkZBLCAweEE0NTA2Q0VCLCAweEJFRjlBM0Y3LCAweEM2NzE3OEYyXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyNTYgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cblNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYiA9IDB4YmI2N2FlODVcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZSA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faCA9IDB4NWJlMGNkMTlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBjaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBnYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBnYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgNjQ7ICsraSkgV1tpXSA9IChnYW1tYTEoV1tpIC0gMl0pICsgV1tpIC0gN10gKyBnYW1tYTAoV1tpIC0gMTVdKSArIFdbaSAtIDE2XSkgfCAwXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA2NDsgKytqKSB7XG4gICAgdmFyIFQxID0gKGggKyBzaWdtYTEoZSkgKyBjaChlLCBmLCBnKSArIEtbal0gKyBXW2pdKSB8IDBcbiAgICB2YXIgVDIgPSAoc2lnbWEwKGEpICsgbWFqKGEsIGIsIGMpKSB8IDBcblxuICAgIGggPSBnXG4gICAgZyA9IGZcbiAgICBmID0gZVxuICAgIGUgPSAoZCArIFQxKSB8IDBcbiAgICBkID0gY1xuICAgIGMgPSBiXG4gICAgYiA9IGFcbiAgICBhID0gKFQxICsgVDIpIHwgMFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICB0aGlzLl9mID0gKGYgKyB0aGlzLl9mKSB8IDBcbiAgdGhpcy5fZyA9IChnICsgdGhpcy5fZykgfCAwXG4gIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxufVxuXG5TaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgzMilcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyNTZcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTUxMiAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGE1MTIsIEhhc2gpXG5cblNoYTUxMi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweDZhMDllNjY3XG4gIHRoaXMuX2JoID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jaCA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZGggPSAweGE1NGZmNTNhXG4gIHRoaXMuX2VoID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9maCA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZ2ggPSAweDFmODNkOWFiXG4gIHRoaXMuX2hoID0gMHg1YmUwY2QxOVxuXG4gIHRoaXMuX2FsID0gMHhmM2JjYzkwOFxuICB0aGlzLl9ibCA9IDB4ODRjYWE3M2JcbiAgdGhpcy5fY2wgPSAweGZlOTRmODJiXG4gIHRoaXMuX2RsID0gMHg1ZjFkMzZmMVxuICB0aGlzLl9lbCA9IDB4YWRlNjgyZDFcbiAgdGhpcy5fZmwgPSAweDJiM2U2YzFmXG4gIHRoaXMuX2dsID0gMHhmYjQxYmQ2YlxuICB0aGlzLl9obCA9IDB4MTM3ZTIxNzlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBDaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMjggfCB4bCA8PCA0KSBeICh4bCA+Pj4gMiB8IHggPDwgMzApIF4gKHhsID4+PiA3IHwgeCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE0IHwgeGwgPDwgMTgpIF4gKHggPj4+IDE4IHwgeGwgPDwgMTQpIF4gKHhsID4+PiA5IHwgeCA8PCAyMylcbn1cblxuZnVuY3Rpb24gR2FtbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3KVxufVxuXG5mdW5jdGlvbiBHYW1tYTBsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDEgfCB4bCA8PCAzMSkgXiAoeCA+Pj4gOCB8IHhsIDw8IDI0KSBeICh4ID4+PiA3IHwgeGwgPDwgMjUpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMWwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2IHwgeGwgPDwgMjYpXG59XG5cbmZ1bmN0aW9uIGdldENhcnJ5IChhLCBiKSB7XG4gIHJldHVybiAoYSA+Pj4gMCkgPCAoYiA+Pj4gMCkgPyAxIDogMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYWggPSB0aGlzLl9haCB8IDBcbiAgdmFyIGJoID0gdGhpcy5fYmggfCAwXG4gIHZhciBjaCA9IHRoaXMuX2NoIHwgMFxuICB2YXIgZGggPSB0aGlzLl9kaCB8IDBcbiAgdmFyIGVoID0gdGhpcy5fZWggfCAwXG4gIHZhciBmaCA9IHRoaXMuX2ZoIHwgMFxuICB2YXIgZ2ggPSB0aGlzLl9naCB8IDBcbiAgdmFyIGhoID0gdGhpcy5faGggfCAwXG5cbiAgdmFyIGFsID0gdGhpcy5fYWwgfCAwXG4gIHZhciBibCA9IHRoaXMuX2JsIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jbCB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZGwgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2VsIHwgMFxuICB2YXIgZmwgPSB0aGlzLl9mbCB8IDBcbiAgdmFyIGdsID0gdGhpcy5fZ2wgfCAwXG4gIHZhciBobCA9IHRoaXMuX2hsIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkgKz0gMikge1xuICAgIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICAgIFdbaSArIDFdID0gTS5yZWFkSW50MzJCRShpICogNCArIDQpXG4gIH1cbiAgZm9yICg7IGkgPCAxNjA7IGkgKz0gMikge1xuICAgIHZhciB4aCA9IFdbaSAtIDE1ICogMl1cbiAgICB2YXIgeGwgPSBXW2kgLSAxNSAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTAgPSBHYW1tYTAoeGgsIHhsKVxuICAgIHZhciBnYW1tYTBsID0gR2FtbWEwbCh4bCwgeGgpXG5cbiAgICB4aCA9IFdbaSAtIDIgKiAyXVxuICAgIHhsID0gV1tpIC0gMiAqIDIgKyAxXVxuICAgIHZhciBnYW1tYTEgPSBHYW1tYTEoeGgsIHhsKVxuICAgIHZhciBnYW1tYTFsID0gR2FtbWExbCh4bCwgeGgpXG5cbiAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cbiAgICB2YXIgV2k3aCA9IFdbaSAtIDcgKiAyXVxuICAgIHZhciBXaTdsID0gV1tpIC0gNyAqIDIgKyAxXVxuXG4gICAgdmFyIFdpMTZoID0gV1tpIC0gMTYgKiAyXVxuICAgIHZhciBXaTE2bCA9IFdbaSAtIDE2ICogMiArIDFdXG5cbiAgICB2YXIgV2lsID0gKGdhbW1hMGwgKyBXaTdsKSB8IDBcbiAgICB2YXIgV2loID0gKGdhbW1hMCArIFdpN2ggKyBnZXRDYXJyeShXaWwsIGdhbW1hMGwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgZ2FtbWExbCkgfCAwXG4gICAgV2loID0gKFdpaCArIGdhbW1hMSArIGdldENhcnJ5KFdpbCwgZ2FtbWExbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBXaTE2bCkgfCAwXG4gICAgV2loID0gKFdpaCArIFdpMTZoICsgZ2V0Q2FycnkoV2lsLCBXaTE2bCkpIHwgMFxuXG4gICAgV1tpXSA9IFdpaFxuICAgIFdbaSArIDFdID0gV2lsXG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2MDsgaiArPSAyKSB7XG4gICAgV2loID0gV1tqXVxuICAgIFdpbCA9IFdbaiArIDFdXG5cbiAgICB2YXIgbWFqaCA9IG1haihhaCwgYmgsIGNoKVxuICAgIHZhciBtYWpsID0gbWFqKGFsLCBibCwgY2wpXG5cbiAgICB2YXIgc2lnbWEwaCA9IHNpZ21hMChhaCwgYWwpXG4gICAgdmFyIHNpZ21hMGwgPSBzaWdtYTAoYWwsIGFoKVxuICAgIHZhciBzaWdtYTFoID0gc2lnbWExKGVoLCBlbClcbiAgICB2YXIgc2lnbWExbCA9IHNpZ21hMShlbCwgZWgpXG5cbiAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbal0gKyBXW2pdXG4gICAgdmFyIEtpaCA9IEtbal1cbiAgICB2YXIgS2lsID0gS1tqICsgMV1cblxuICAgIHZhciBjaGggPSBDaChlaCwgZmgsIGdoKVxuICAgIHZhciBjaGwgPSBDaChlbCwgZmwsIGdsKVxuXG4gICAgdmFyIHQxbCA9IChobCArIHNpZ21hMWwpIHwgMFxuICAgIHZhciB0MWggPSAoaGggKyBzaWdtYTFoICsgZ2V0Q2FycnkodDFsLCBobCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBjaGwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBjaGggKyBnZXRDYXJyeSh0MWwsIGNobCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBLaWwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBLaWggKyBnZXRDYXJyeSh0MWwsIEtpbCkpIHwgMFxuICAgIHQxbCA9ICh0MWwgKyBXaWwpIHwgMFxuICAgIHQxaCA9ICh0MWggKyBXaWggKyBnZXRDYXJyeSh0MWwsIFdpbCkpIHwgMFxuXG4gICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcbiAgICB2YXIgdDJsID0gKHNpZ21hMGwgKyBtYWpsKSB8IDBcbiAgICB2YXIgdDJoID0gKHNpZ21hMGggKyBtYWpoICsgZ2V0Q2FycnkodDJsLCBzaWdtYTBsKSkgfCAwXG5cbiAgICBoaCA9IGdoXG4gICAgaGwgPSBnbFxuICAgIGdoID0gZmhcbiAgICBnbCA9IGZsXG4gICAgZmggPSBlaFxuICAgIGZsID0gZWxcbiAgICBlbCA9IChkbCArIHQxbCkgfCAwXG4gICAgZWggPSAoZGggKyB0MWggKyBnZXRDYXJyeShlbCwgZGwpKSB8IDBcbiAgICBkaCA9IGNoXG4gICAgZGwgPSBjbFxuICAgIGNoID0gYmhcbiAgICBjbCA9IGJsXG4gICAgYmggPSBhaFxuICAgIGJsID0gYWxcbiAgICBhbCA9ICh0MWwgKyB0MmwpIHwgMFxuICAgIGFoID0gKHQxaCArIHQyaCArIGdldENhcnJ5KGFsLCB0MWwpKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2FsID0gKHRoaXMuX2FsICsgYWwpIHwgMFxuICB0aGlzLl9ibCA9ICh0aGlzLl9ibCArIGJsKSB8IDBcbiAgdGhpcy5fY2wgPSAodGhpcy5fY2wgKyBjbCkgfCAwXG4gIHRoaXMuX2RsID0gKHRoaXMuX2RsICsgZGwpIHwgMFxuICB0aGlzLl9lbCA9ICh0aGlzLl9lbCArIGVsKSB8IDBcbiAgdGhpcy5fZmwgPSAodGhpcy5fZmwgKyBmbCkgfCAwXG4gIHRoaXMuX2dsID0gKHRoaXMuX2dsICsgZ2wpIHwgMFxuICB0aGlzLl9obCA9ICh0aGlzLl9obCArIGhsKSB8IDBcblxuICB0aGlzLl9haCA9ICh0aGlzLl9haCArIGFoICsgZ2V0Q2FycnkodGhpcy5fYWwsIGFsKSkgfCAwXG4gIHRoaXMuX2JoID0gKHRoaXMuX2JoICsgYmggKyBnZXRDYXJyeSh0aGlzLl9ibCwgYmwpKSB8IDBcbiAgdGhpcy5fY2ggPSAodGhpcy5fY2ggKyBjaCArIGdldENhcnJ5KHRoaXMuX2NsLCBjbCkpIHwgMFxuICB0aGlzLl9kaCA9ICh0aGlzLl9kaCArIGRoICsgZ2V0Q2FycnkodGhpcy5fZGwsIGRsKSkgfCAwXG4gIHRoaXMuX2VoID0gKHRoaXMuX2VoICsgZWggKyBnZXRDYXJyeSh0aGlzLl9lbCwgZWwpKSB8IDBcbiAgdGhpcy5fZmggPSAodGhpcy5fZmggKyBmaCArIGdldENhcnJ5KHRoaXMuX2ZsLCBmbCkpIHwgMFxuICB0aGlzLl9naCA9ICh0aGlzLl9naCArIGdoICsgZ2V0Q2FycnkodGhpcy5fZ2wsIGdsKSkgfCAwXG4gIHRoaXMuX2hoID0gKHRoaXMuX2hoICsgaGggKyBnZXRDYXJyeSh0aGlzLl9obCwgaGwpKSB8IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNjQpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuICB3cml0ZUludDY0QkUodGhpcy5fZ2gsIHRoaXMuX2dsLCA0OClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2hoLCB0aGlzLl9obCwgNTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGE1MTJcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBlY2RzYSA9IHJlcXVpcmUoJy4vZWNkc2EnKTtcbnZhciBoYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG52YXIgY3VydmUgPSByZXF1aXJlKCdlY3VydmUnKS5nZXRDdXJ2ZUJ5TmFtZSgnc2VjcDI1NmsxJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKTtcbnZhciBrZXlVdGlscyA9IHJlcXVpcmUoJy4va2V5X3V0aWxzJyk7XG52YXIgUHVibGljS2V5ID0gcmVxdWlyZSgnLi9rZXlfcHVibGljJyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4va2V5X3ByaXZhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFNpZ25hdHVyZShyLCBzLCBpKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHIgIT0gbnVsbCwgdHJ1ZSwgJ01pc3NpbmcgcGFyYW1ldGVyJyk7XG4gICAgYXNzZXJ0LmVxdWFsKHMgIT0gbnVsbCwgdHJ1ZSwgJ01pc3NpbmcgcGFyYW1ldGVyJyk7XG4gICAgYXNzZXJ0LmVxdWFsKGkgIT0gbnVsbCwgdHJ1ZSwgJ01pc3NpbmcgcGFyYW1ldGVyJyk7XG5cbiAgICAvKipcbiAgICAgICAgVmVyaWZ5IHNpZ25lZCBkYXRhLlxuICAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YSAtIGZ1bGwgZGF0YVxuICAgICAgICBAYXJnIHtwdWJrZXl8UHVibGljS2V5fSBwdWJrZXkgLSBFT1NLZXkuLlxuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICd1dGY4J10gLSBkYXRhIGVuY29kaW5nIChpZiBkYXRhIGlzIGEgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7Ym9vbGVhbn1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeShkYXRhLCBwdWJrZXkpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAndXRmOCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGRhdGEpLCAnZGF0YSBpcyBhIHJlcXVpcmVkIFN0cmluZyBvciBCdWZmZXInKTtcbiAgICAgICAgZGF0YSA9IGhhc2guc2hhMjU2KGRhdGEpO1xuICAgICAgICByZXR1cm4gdmVyaWZ5SGFzaChkYXRhLCBwdWJrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAgICBWZXJpZnkgYSBidWZmZXIgb2YgZXhhY3RhbGx5IDMyIGJ5dGVzIGluIHNpemUgKHNoYTI1Nih0ZXh0KSlcbiAgICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGFTaGEyNTYgLSAzMiBieXRlIGJ1ZmZlciBvciBzdHJpbmdcbiAgICAgICAgQGFyZyB7U3RyaW5nfFB1YmxpY0tleX0gcHVia2V5IC0gRU9TS2V5Li5cbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAnaGV4J10gLSBkYXRhU2hhMjU2IGVuY29kaW5nIChpZiBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtib29sZWFufVxuICAgICovXG4gICAgZnVuY3Rpb24gdmVyaWZ5SGFzaChkYXRhU2hhMjU2LCBwdWJrZXkpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaGV4JztcblxuICAgICAgICBpZiAodHlwZW9mIGRhdGFTaGEyNTYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkYXRhU2hhMjU2ID0gQnVmZmVyLmZyb20oZGF0YVNoYTI1NiwgZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhU2hhMjU2Lmxlbmd0aCAhPT0gMzIgfHwgIUJ1ZmZlci5pc0J1ZmZlcihkYXRhU2hhMjU2KSkgdGhyb3cgbmV3IEVycm9yKFwiZGF0YVNoYTI1NjogMzIgYnl0ZXMgcmVxdWlyZWRcIik7XG5cbiAgICAgICAgdmFyIHB1YmxpY0tleSA9IFB1YmxpY0tleShwdWJrZXkpO1xuICAgICAgICBhc3NlcnQocHVibGljS2V5LCAncHVia2V5IHJlcXVpcmVkJyk7XG5cbiAgICAgICAgcmV0dXJuIGVjZHNhLnZlcmlmeShjdXJ2ZSwgZGF0YVNoYTI1NiwgeyByOiByLCBzOiBzIH0sIHB1YmxpY0tleS5RKTtcbiAgICB9O1xuXG4gICAgLyoqIEBkZXByZWNhdGVkXG4gICAgICAgICBWZXJpZnkgaGV4IGRhdGEgYnkgY29udmVydGluZyB0byBhIGJ1ZmZlciB0aGVuIGhhc2hpbmcuXG4gICAgICAgICBAcmV0dXJuIHtib29sZWFufVxuICAgICovXG4gICAgZnVuY3Rpb24gdmVyaWZ5SGV4KGhleCwgcHVia2V5KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdEZXByZWNhdGVkOiB1c2UgdmVyaWZ5KGRhdGEsIHB1YmtleSwgXCJoZXhcIiknKTtcblxuICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmZyb20oaGV4LCAnaGV4Jyk7XG4gICAgICAgIHJldHVybiB2ZXJpZnkoYnVmLCBwdWJrZXkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgICAgUmVjb3ZlciB0aGUgcHVibGljIGtleSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHNpZ25hdHVyZSB1c2luZyBmdWxsIGRhdGEuXG4gICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBkYXRhIC0gZnVsbCBkYXRhXG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ3V0ZjgnXSAtIGRhdGEgZW5jb2RpbmcgKGlmIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge1B1YmxpY0tleX1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlY292ZXIoZGF0YSkge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd1dGY4JztcblxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIoZGF0YSksICdkYXRhIGlzIGEgcmVxdWlyZWQgU3RyaW5nIG9yIEJ1ZmZlcicpO1xuICAgICAgICBkYXRhID0gaGFzaC5zaGEyNTYoZGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIHJlY292ZXJIYXNoKGRhdGEpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gZGF0YVNoYTI1NiAtIHNoYTI1NiBoYXNoIDMyIGJ5dGUgYnVmZmVyIG9yIGhleCBzdHJpbmdcbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAnaGV4J10gLSBkYXRhU2hhMjU2IGVuY29kaW5nIChpZiBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtQdWJsaWNLZXl9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZWNvdmVySGFzaChkYXRhU2hhMjU2KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2hleCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhU2hhMjU2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YVNoYTI1NiA9IEJ1ZmZlci5mcm9tKGRhdGFTaGEyNTYsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVNoYTI1Ni5sZW5ndGggIT09IDMyIHx8ICFCdWZmZXIuaXNCdWZmZXIoZGF0YVNoYTI1NikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRhdGFTaGEyNTY6IDMyIGJ5dGUgU3RyaW5nIG9yIGJ1ZmZlciByZXF1cmVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGUgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoZGF0YVNoYTI1Nik7XG4gICAgICAgIHZhciBpMiA9IGk7XG4gICAgICAgIGkyIC09IDI3O1xuICAgICAgICBpMiA9IGkyICYgMztcbiAgICAgICAgdmFyIFEgPSBlY2RzYS5yZWNvdmVyUHViS2V5KGN1cnZlLCBlLCB7IHI6IHIsIHM6IHMsIGk6IGkgfSwgaTIpO1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb21Qb2ludChRKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXIoKSB7XG4gICAgICAgIHZhciBidWY7XG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIoNjUpO1xuICAgICAgICBidWYud3JpdGVVSW50OChpLCAwKTtcbiAgICAgICAgci50b0J1ZmZlcigzMikuY29weShidWYsIDEpO1xuICAgICAgICBzLnRvQnVmZmVyKDMyKS5jb3B5KGJ1ZiwgMzMpO1xuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0b0hleCgpIHtcbiAgICAgICAgcmV0dXJuIHRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgfTtcblxuICAgIHZhciBzaWduYXR1cmVDYWNoZSA9IHZvaWQgMDtcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAoc2lnbmF0dXJlQ2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWduYXR1cmVDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBzaWduYXR1cmVDYWNoZSA9ICdTSUdfSzFfJyArIGtleVV0aWxzLmNoZWNrRW5jb2RlKHRvQnVmZmVyKCksICdLMScpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlQ2FjaGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogciwgczogcywgaTogaSxcbiAgICAgICAgdG9CdWZmZXI6IHRvQnVmZmVyLFxuICAgICAgICB2ZXJpZnk6IHZlcmlmeSxcbiAgICAgICAgdmVyaWZ5SGFzaDogdmVyaWZ5SGFzaCxcbiAgICAgICAgdmVyaWZ5SGV4OiB2ZXJpZnlIZXgsIC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgcmVjb3ZlcjogcmVjb3ZlcixcbiAgICAgICAgcmVjb3Zlckhhc2g6IHJlY292ZXJIYXNoLFxuICAgICAgICB0b0hleDogdG9IZXgsXG4gICAgICAgIHRvU3RyaW5nOiB0b1N0cmluZyxcblxuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHZlcmlmeSAoc2FtZSBhcmd1bWVudHMgYW5kIHJldHVybikgKi9cbiAgICAgICAgdmVyaWZ5QnVmZmVyOiBmdW5jdGlvbiB2ZXJpZnlCdWZmZXIoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVwcmVjYXRlZDogdXNlIHNpZ25hdHVyZS52ZXJpZnkgaW5zdGVhZCAoc2FtZSBhcmd1bWVudHMpJyk7XG4gICAgICAgICAgICByZXR1cm4gdmVyaWZ5LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHJlY292ZXIgKHNhbWUgYXJndW1lbnRzIGFuZCByZXR1cm4pICovXG4gICAgICAgIHJlY292ZXJQdWJsaWNLZXk6IGZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVwcmVjYXRlZDogdXNlIHNpZ25hdHVyZS5yZWNvdmVyIGluc3RlYWQgKHNhbWUgYXJndW1lbnRzKScpO1xuICAgICAgICAgICAgcmV0dXJuIHJlY292ZXIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgcmVjb3Zlckhhc2ggKHNhbWUgYXJndW1lbnRzIGFuZCByZXR1cm4pICovXG4gICAgICAgIHJlY292ZXJQdWJsaWNLZXlGcm9tQnVmZmVyOiBmdW5jdGlvbiByZWNvdmVyUHVibGljS2V5RnJvbUJ1ZmZlcigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZXByZWNhdGVkOiB1c2Ugc2lnbmF0dXJlLnJlY292ZXJIYXNoIGluc3RlYWQgKHNhbWUgYXJndW1lbnRzKScpO1xuICAgICAgICAgICAgcmV0dXJuIHJlY292ZXJIYXNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKlxuICAgIEhhc2ggYW5kIHNpZ24gYXJiaXRyYXJ5IGRhdGEuXG5cbiAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhIC0gZnVsbCBkYXRhXG4gICAgQGFyZyB7d2lmfFByaXZhdGVLZXl9IHByaXZhdGVLZXlcbiAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICd1dGY4J10gLSBkYXRhIGVuY29kaW5nIChpZiBzdHJpbmcpXG5cbiAgICBAcmV0dXJuIHtTaWduYXR1cmV9XG4qL1xuU2lnbmF0dXJlLnNpZ24gPSBmdW5jdGlvbiAoZGF0YSwgcHJpdmF0ZUtleSkge1xuICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ3V0ZjgnO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKGRhdGEpLCAnZGF0YSBpcyBhIHJlcXVpcmVkIFN0cmluZyBvciBCdWZmZXInKTtcbiAgICBkYXRhID0gaGFzaC5zaGEyNTYoZGF0YSk7XG4gICAgcmV0dXJuIFNpZ25hdHVyZS5zaWduSGFzaChkYXRhLCBwcml2YXRlS2V5KTtcbn07XG5cbi8qKlxuICAgIFNpZ24gYSBidWZmZXIgb2YgZXhhY3RhbGx5IDMyIGJ5dGVzIGluIHNpemUgKHNoYTI1Nih0ZXh0KSlcblxuICAgIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGFTaGEyNTYgLSAzMiBieXRlIGJ1ZmZlciBvciBzdHJpbmdcbiAgICBAYXJnIHt3aWZ8UHJpdmF0ZUtleX0gcHJpdmF0ZUtleVxuICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgc3RyaW5nKVxuXG4gICAgQHJldHVybiB7U2lnbmF0dXJlfVxuKi9cblNpZ25hdHVyZS5zaWduSGFzaCA9IGZ1bmN0aW9uIChkYXRhU2hhMjU2LCBwcml2YXRlS2V5KSB7XG4gICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaGV4JztcblxuICAgIGlmICh0eXBlb2YgZGF0YVNoYTI1NiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YVNoYTI1NiA9IEJ1ZmZlci5mcm9tKGRhdGFTaGEyNTYsIGVuY29kaW5nKTtcbiAgICB9XG4gICAgaWYgKGRhdGFTaGEyNTYubGVuZ3RoICE9PSAzMiB8fCAhQnVmZmVyLmlzQnVmZmVyKGRhdGFTaGEyNTYpKSB0aHJvdyBuZXcgRXJyb3IoXCJkYXRhU2hhMjU2OiAzMiBieXRlIGJ1ZmZlciByZXF1cmVkXCIpO1xuXG4gICAgcHJpdmF0ZUtleSA9IFByaXZhdGVLZXkocHJpdmF0ZUtleSk7XG4gICAgYXNzZXJ0KHByaXZhdGVLZXksICdwcml2YXRlS2V5IHJlcXVpcmVkJyk7XG5cbiAgICB2YXIgZGVyLCBlLCBlY3NpZ25hdHVyZSwgaSwgbGVuUiwgbGVuUywgbm9uY2U7XG4gICAgaSA9IG51bGw7XG4gICAgbm9uY2UgPSAwO1xuICAgIGUgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoZGF0YVNoYTI1Nik7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgZWNzaWduYXR1cmUgPSBlY2RzYS5zaWduKGN1cnZlLCBkYXRhU2hhMjU2LCBwcml2YXRlS2V5LmQsIG5vbmNlKyspO1xuICAgICAgICBkZXIgPSBlY3NpZ25hdHVyZS50b0RFUigpO1xuICAgICAgICBsZW5SID0gZGVyWzNdO1xuICAgICAgICBsZW5TID0gZGVyWzUgKyBsZW5SXTtcbiAgICAgICAgaWYgKGxlblIgPT09IDMyICYmIGxlblMgPT09IDMyKSB7XG4gICAgICAgICAgICBpID0gZWNkc2EuY2FsY1B1YktleVJlY292ZXJ5UGFyYW0oY3VydmUsIGUsIGVjc2lnbmF0dXJlLCBwcml2YXRlS2V5LnRvUHVibGljKCkuUSk7XG4gICAgICAgICAgICBpICs9IDQ7IC8vIGNvbXByZXNzZWRcbiAgICAgICAgICAgIGkgKz0gMjc7IC8vIGNvbXBhY3QgIC8vICAyNCBvciAyNyA6KCBmb3JjaW5nIG9kZC15IDJuZCBrZXkgY2FuZGlkYXRlKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vbmNlICUgMTAgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV0FSTjogXCIgKyBub25jZSArIFwiIGF0dGVtcHRzIHRvIGZpbmQgY2Fub25pY2FsIHNpZ25hdHVyZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gU2lnbmF0dXJlKGVjc2lnbmF0dXJlLnIsIGVjc2lnbmF0dXJlLnMsIGkpO1xufTtcblxuU2lnbmF0dXJlLmZyb21CdWZmZXIgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgdmFyIGksIHIsIHM7XG4gICAgYXNzZXJ0KEJ1ZmZlci5pc0J1ZmZlcihidWYpLCAnQnVmZmVyIGlzIHJlcXVpcmVkJyk7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1Zi5sZW5ndGgsIDY1LCAnSW52YWxpZCBzaWduYXR1cmUgbGVuZ3RoJyk7XG4gICAgaSA9IGJ1Zi5yZWFkVUludDgoMCk7XG4gICAgYXNzZXJ0LmVxdWFsKGkgLSAyNywgaSAtIDI3ICYgNywgJ0ludmFsaWQgc2lnbmF0dXJlIHBhcmFtZXRlcicpO1xuICAgIHIgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmLnNsaWNlKDEsIDMzKSk7XG4gICAgcyA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWYuc2xpY2UoMzMpKTtcbiAgICByZXR1cm4gU2lnbmF0dXJlKHIsIHMsIGkpO1xufTtcblxuU2lnbmF0dXJlLmZyb21IZXggPSBmdW5jdGlvbiAoaGV4KSB7XG4gICAgcmV0dXJuIFNpZ25hdHVyZS5mcm9tQnVmZmVyKEJ1ZmZlci5mcm9tKGhleCwgXCJoZXhcIikpO1xufTtcblxuLyoqXG4gICAgQGFyZyB7c3RyaW5nfSBzaWduYXR1cmUgLSBsaWtlIFNJR19LMV9iYXNlNThzaWduYXR1cmUuLlxuICAgIEByZXR1cm4ge1NpZ25hdHVyZX0gb3IgYG51bGxgIChpbnZhbGlkKVxuKi9cblNpZ25hdHVyZS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBTaWduYXR1cmUuZnJvbVN0cmluZ09yVGhyb3coc2lnbmF0dXJlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICAgIEBhcmcge3N0cmluZ30gc2lnbmF0dXJlIC0gbGlrZSBTSUdfSzFfYmFzZTU4c2lnbmF0dXJlLi5cbiAgICBAdGhyb3dzIHtFcnJvcn0gaW52YWxpZFxuICAgIEByZXR1cm4ge1NpZ25hdHVyZX1cbiovXG5TaWduYXR1cmUuZnJvbVN0cmluZ09yVGhyb3cgPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBzaWduYXR1cmUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHNpZ25hdHVyZSksICdzdHJpbmcnLCAnc2lnbmF0dXJlJyk7XG4gICAgdmFyIG1hdGNoID0gc2lnbmF0dXJlLm1hdGNoKC9eU0lHXyhbQS1aYS16MC05XSspXyhbQS1aYS16MC05XSspJC8pO1xuICAgIGFzc2VydChtYXRjaCAhPSBudWxsICYmIG1hdGNoLmxlbmd0aCA9PT0gMywgJ0V4cGVjdGluZyBzaWduYXR1cmUgbGlrZTogU0lHX0sxX2Jhc2U1OHNpZ25hdHVyZS4uJyk7XG5cbiAgICB2YXIgX21hdGNoID0gX3NsaWNlZFRvQXJyYXkobWF0Y2gsIDMpLFxuICAgICAgICBrZXlUeXBlID0gX21hdGNoWzFdLFxuICAgICAgICBrZXlTdHJpbmcgPSBfbWF0Y2hbMl07XG5cbiAgICBhc3NlcnQuZXF1YWwoa2V5VHlwZSwgJ0sxJywgJ0sxIHNpZ25hdHVyZSBleHBlY3RlZCcpO1xuICAgIHJldHVybiBTaWduYXR1cmUuZnJvbUJ1ZmZlcihrZXlVdGlscy5jaGVja0RlY29kZShrZXlTdHJpbmcsIGtleVR5cGUpKTtcbn07XG5cbi8qKlxuICAgIEBhcmcge1N0cmluZ3xTaWduYXR1cmV9IG8gLSBoZXggc3RyaW5nXG4gICAgQHJldHVybiB7U2lnbmF0dXJlfVxuKi9cblNpZ25hdHVyZS5mcm9tID0gZnVuY3Rpb24gKG8pIHtcbiAgICB2YXIgc2lnbmF0dXJlID0gbyA/IG8uciAmJiBvLnMgJiYgby5pID8gbyA6IHR5cGVvZiBvID09PSAnc3RyaW5nJyAmJiBvLmxlbmd0aCA9PT0gMTMwID8gU2lnbmF0dXJlLmZyb21IZXgobykgOiB0eXBlb2YgbyA9PT0gJ3N0cmluZycgJiYgby5sZW5ndGggIT09IDEzMCA/IFNpZ25hdHVyZS5mcm9tU3RyaW5nT3JUaHJvdyhvKSA6IEJ1ZmZlci5pc0J1ZmZlcihvKSA/IFNpZ25hdHVyZS5mcm9tQnVmZmVyKG8pIDogbnVsbCA6IG87IC8qbnVsbCBvciB1bmRlZmluZWQqL1xuXG4gICAgaWYgKCFzaWduYXR1cmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2lnbmF0dXJlIHNob3VsZCBiZSBhIGhleCBzdHJpbmcgb3IgYnVmZmVyJyk7XG4gICAgfVxuICAgIHJldHVybiBzaWduYXR1cmU7XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmZvcmNlKHR5cGUsIHZhbHVlKSB7XG4gIC8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luanMvYml0Y29pbmpzLWxpYlxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBcnJheSc6XG4gICAgICB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdCdWZmZXInOlxuICAgICAge1xuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm47XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBpZiAoZ2V0TmFtZSh2YWx1ZS5jb25zdHJ1Y3RvcikgPT09IGdldE5hbWUodHlwZSkpIHJldHVybjtcbiAgICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkICcgKyAoZ2V0TmFtZSh0eXBlKSB8fCB0eXBlKSArICcsIGdvdCAnICsgdmFsdWUpO1xufTtcblxuZnVuY3Rpb24gZ2V0TmFtZShmbikge1xuICAvLyBXaHkgbm90IGZuLm5hbWU6IGh0dHBzOi8va2FuZ2F4LmdpdGh1Yi5pby9jb21wYXQtdGFibGUvZXM2LyNmdW5jdGlvbl9uYW1lX3Byb3BlcnR5XG4gIHZhciBtYXRjaCA9IGZuLnRvU3RyaW5nKCkubWF0Y2goL2Z1bmN0aW9uICguKj8pXFwoLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhcGkgPSByZXF1aXJlKCcuL2FwaS92MScpO1xudmFyIGFwaUdlbiA9IHJlcXVpcmUoJy4vYXBpZ2VuJyk7XG52YXIgcHJvY2Vzc0FyZ3MgPSByZXF1aXJlKCcuL3Byb2Nlc3MtYXJncycpO1xuXG52YXIgRW9zQXBpID0gZnVuY3Rpb24gRW9zQXBpKGNvbmZpZykge1xuICByZXR1cm4gYXBpR2VuKCd2MScsIGFwaSwgY29uZmlnKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oRW9zQXBpLCB7XG4gIHByb2Nlc3NBcmdzOiBwcm9jZXNzQXJncyxcbiAgYXBpOiBhcGksXG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIFRlc3RuZXQ6IGZ1bmN0aW9uIFRlc3RuZXQoY29uZmlnKSB7XG4gICAgY29uc29sZS5lcnJvcignZGVwcmVjYXRlZCwgY2hhbmdlIEVvc0FwaS5UZXN0bmV0KC4uKSB0byBqdXN0IEVvc0FwaSguLiknKTtcbiAgICByZXR1cm4gRW9zQXBpKGNvbmZpZyk7XG4gIH0sXG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIExvY2FsbmV0OiBmdW5jdGlvbiBMb2NhbG5ldChjb25maWcpIHtcbiAgICBjb25zb2xlLmVycm9yKCdkZXByZWNhdGVkLCBjaGFuZ2UgRW9zQXBpLkxvY2FsbmV0KC4uKSB0byBqdXN0IEVvc0FwaSguLiknKTtcbiAgICByZXR1cm4gRW9zQXBpKGNvbmZpZyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVvc0FwaTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzQXJncztcblxuLyoqXG4gIEB0eXBlZGVmIHtvYmplY3R9IHByb2Nlc3NlZEFyZ3MgLSBOb3JtYWxpemVkIG9iamVjdCBjb250YWluaW5nIGFyZ3VtZW50cywgYW5kXG4gIGEgY2hhaW5lZCBwcm9taXNlIGFuZCBhIGNhbGxiYWNrLlxuXG4gIEBwcm9wZXJ0eSB7b2JqZWN0fSBwYXJhbXMgLSBub3JtYWxpemVkIGFyZ3Mgb25seSwgcGFyYW1ldGVycyBieSBuYW1lLCBubyBleHRyYSBvcHRpb25zIG9yIGNhbGxiYWNrLlxuXG4gIEBwcm9wZXJ0eSB7b2JqZWN0fSBvcHRpb25zIC0gbm9uLW51bGwgb3Igbm9uLXVuZGVmaW5lZCByZXR1cm4gdmFsdWUgZnJvbSBpbnZvY2F0aW9uIG9mXG4gIG9wdGlvbnNGb3JtYXR0ZXIob3B0aW9uc1BhcmFtKS5cblxuICBAcHJvcGVydHkge2Z1bmN0aW9ufSBjYWxsYmFjayAtY2hhaW5lZCB0byBvcHRpb25hbCBjYWxsYmFjayBwcm92aWRlZCBpbiBhcmdzLiAgUmVzb2x2ZXNcbiAgb3IgcmVqZWN0cyByZXR1cm5Qcm9taXNlLlxuXG4gIEBwcm9wZXJ0eSB7UHJvbWlzZX0gcmV0dXJuUHJvbWlzZSAtIHByb21pc2UgaXMgcmV0dXJuZWQgd2hlbiBubyBjYWxsYmFjayBpcyBwcm92aWRlZCBpblxuICBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0uICBVbmRlZmluZWQgd2hlbiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuKi9cbi8qKlxuICBDb252ZXJ0IGFyZ3MgYXJyYXkgb3Igb2JqZWN0IGludG8gYSBub3JtYWxpemVkIHZhbHVlIG9iamVjdC4gIFN1cHBvb3J0cyBleHRyYVxuICBvcHRpb25zIGFuZChvcikgY2FsbGJhY2sgcGFyYW1ldGVycy5cblxuICBQZXIgdGhlIFByb21pc2UgQVBJIGZlYXR1cmUgcHJvbWlzaWZ5QWxsIChzZWUgYWxzbyBzYi1wcm9taXNpZnkpLCB0aGUgY2FsbGJhY2tcbiAgKGlmIHByb3ZpZGVkKSBtdXN0IGFsd2F5cyBiZSBsYXN0LlxuXG4gIEBhcmcge0FycmF5fG9iamVjdH0gYXJncyAtIFVzZXItcHJvdmlkZWQgcGFyYW1ldGVyIG9iamVjdCBvciBhcnJheSBvZiBwYXJhbWV0ZXJzXG4gIEBhcmcge0FycmF5fSBkZWZQYXJhbXMgLSBOYW1lcyBmb3IgdGhlIHBhcmFtZXRlcnMuXG4gIEBhcmcge3N0cmluZ30gbWV0aG9kTmFtZSAtIGZvciBlcnJvciByZXBvcnRpbmdcbiAgQGFyZyB7ZnVuY3Rpb259IFtvcHRpb25zRm9ybWF0dGVyKGV4dHJhUGFyYW0pID0gbnVsbF0gLSBvcHRpb25hbCBjYWxsYmFjayB1c2VkIGlmIGFuXG4gICAgZXh0cmEgb3B0aW9uYWwgKG5vbi1jYWxsYmFjaykgcGFyYW1ldGVyIGlzIHByb3ZpZGVkLlxuXG5cbiAgQHJldHVybiB7cHJvY2Vzc2VkQXJnc30gcHJvY2Vzc2VkQXJnc1xuICBAdGhyb3dzIFR5cGVFcnJvciAtIHdoZW4gcGFyYW1ldGVyIGNvdW50IGlzIG5vdCBleGFjdCAoYWZ0ZXIgYWRqdXN0aW5nIGZvclxuICBvcHRpb25zIGFuZCBjYWxsYmFjaylcblxuICBAZXhhbXBsZSBhcGkucHJvY2Vzc0FyZ3MoYXJncywgWydhY2NvdW50J10sICdjb250cmFjdCcsIG9wdGlvbnNGb3JtYXR0ZXIpXG4qL1xuZnVuY3Rpb24gcHJvY2Vzc0FyZ3MoYXJncywgZGVmUGFyYW1zKSB7XG4gIHZhciBtZXRob2ROYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnbWV0aG9kJztcbiAgdmFyIG9wdGlvbnNGb3JtYXR0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIHBhcmFtcyA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBleHBlY3RlZEFyZ0NvdW50ID0gZGVmUGFyYW1zLmxlbmd0aDtcblxuICAvLyBFeHRyYSBjYWxsYmFjayBhcmd1bWVudD8gIExhc3QgcGVyIHByb21pc2lmeUFsbCBzdGFuZGFyZC5cbiAgdmFyIGNhbGxiYWNrQXJnID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrQXJnID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gMSk7XG4gIH1cblxuICB2YXIgY2FsbGJhY2sgPSB2b2lkIDA7XG4gIHZhciByZXR1cm5Qcm9taXNlID0gdm9pZCAwO1xuICBpZiAoY2FsbGJhY2tBcmcpIHtcbiAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVyciwgcmVzdWx0KSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrQXJnKGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFja0FyZyhudWxsLCByZXN1bHQpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIExvb2sgZm9yIHRoZSBvcHRpb25zIHBhcmFtZXRlciAoYWZ0ZXIgcG90ZW50aWFsIGNhbGxiYWNrIHdhcyByZW1vdmVkKVxuICBpZiAodHlwZW9mIG9wdGlvbnNGb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicgJiYgYXJncy5sZW5ndGggPiAwICYmIChfdHlwZW9mKGFyZ3NbMF0pID09PSAnb2JqZWN0JyAmJiBhcmdzLmxlbmd0aCA9PT0gMiB8fCBhcmdzLmxlbmd0aCA9PT0gZXhwZWN0ZWRBcmdDb3VudCArIDEpKSB7XG4gICAgLy9BbiBleHRyYSBvcHRpb25zIGFyZ3VtZW50XG4gICAgb3B0aW9ucyA9IG9wdGlvbnNGb3JtYXR0ZXIoYXJnc1thcmdzLmxlbmd0aCAtIDFdKTtcbiAgICBpZiAob3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAvLyBJdCBpcyB2YWxpZCwgcmVtb3ZlIGl0IHRvIGF2b2lkIHBhcmFtZXRlciBjb3VudCBhbiBlcnJvciBiZWxvd1xuICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMCwgYXJncy5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cblxuICAvLyBQYXJhbWV0ZXRlcnMgKGFyZ3MpIGNhbiBiZSBvcmRlcmVkIG9yIGFuIG9iamVjdFxuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgX3R5cGVvZihhcmdzWzBdKSA9PT0gJ29iamVjdCcpIHtcbiAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICB9IGVsc2Uge1xuICAgIC8vIGdpdmUgb3JkZXJlZCBwYXJhbWF0ZXJzIG5hbWVzXG5cbiAgICBpZiAoYXJncy5sZW5ndGggPiBleHBlY3RlZEFyZ0NvdW50KSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygndHlwZW9mIGRlZlBhcmFtc1tleHBlY3RlZEFyZ0NvdW50XScsIGFyZ3MpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1ldGhvZE5hbWUgKyAnIGlzIGV4cGVjdGluZyAnICsgZXhwZWN0ZWRBcmdDb3VudCArICcgcGFyYW1ldGVycyBidXQgJyArIGFyZ3MubGVuZ3RoICsgJyB3aGVyZSBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgb3JkZXJlZCBwYXJhbWV0ZXJzIGludG8gYSB2YWx1ZSBvYmplY3QgYnkgcGFyYW1ldGVyIG5hbWVcbiAgICB2YXIgcG9zID0gMDtcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGRlZlBhcmFtc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgdmFyIGRlZlBhcmFtID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgcGFyYW1zW2RlZlBhcmFtXSA9IGFyZ3NbcG9zXTtcbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7IHBhcmFtczogcGFyYW1zLCBvcHRpb25zOiBvcHRpb25zLCBjYWxsYmFjazogY2FsbGJhY2ssIHJldHVyblByb21pc2U6IHJldHVyblByb21pc2UgfTtcbn0iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzY2hlbWEgPSBPYmplY3QuYXNzaWduKHt9LCByZXF1aXJlKCcuL2NoYWluX3R5cGVzLmpzb24nKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2NoZW1hOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5Jyk7XG5cbnZhciBfc2xpY2VkVG9BcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGljZWRUb0FycmF5Mik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpLFxuICAgIExvbmcgPSBfcmVxdWlyZS5Mb25nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVUxvbmc6IFVMb25nLFxuICBpc05hbWU6IGlzTmFtZSxcbiAgZW5jb2RlTmFtZTogZW5jb2RlTmFtZSwgLy8gZW5jb2RlIGh1bWFuIHJlYWRhYmxlIG5hbWUgdG8gdWludDY0IChudW1iZXIgc3RyaW5nKVxuICBkZWNvZGVOYW1lOiBkZWNvZGVOYW1lLCAvLyBkZWNvZGUgZnJvbSB1aW50NjQgdG8gaHVtYW4gcmVhZGFibGVcbiAgZW5jb2RlTmFtZUhleDogZnVuY3Rpb24gZW5jb2RlTmFtZUhleChuYW1lKSB7XG4gICAgcmV0dXJuIExvbmcuZnJvbVN0cmluZyhlbmNvZGVOYW1lKG5hbWUpLCB0cnVlKS50b1N0cmluZygxNik7XG4gIH0sXG4gIGRlY29kZU5hbWVIZXg6IGZ1bmN0aW9uIGRlY29kZU5hbWVIZXgoaGV4KSB7XG4gICAgdmFyIGxpdHRsZUVuZGlhbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICByZXR1cm4gZGVjb2RlTmFtZShMb25nLmZyb21TdHJpbmcoaGV4LCB0cnVlLCAxNikudG9TdHJpbmcoKSwgbGl0dGxlRW5kaWFuKTtcbiAgfSxcbiAgRGVjaW1hbFN0cmluZzogRGVjaW1hbFN0cmluZyxcbiAgRGVjaW1hbFBhZDogRGVjaW1hbFBhZCxcbiAgRGVjaW1hbEltcGx5OiBEZWNpbWFsSW1wbHksXG4gIERlY2ltYWxVbmltcGx5OiBEZWNpbWFsVW5pbXBseSxcbiAgcHJpbnRBc3NldDogcHJpbnRBc3NldCxcbiAgcGFyc2VBc3NldDogcGFyc2VBc3NldFxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xufTt2YXIgc2lnbmVkID0gZnVuY3Rpb24gc2lnbmVkKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbn07XG5cbmZ1bmN0aW9uIFVMb25nKHZhbHVlKSB7XG4gIHZhciB1bnNpZ25lZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgdmFyIHJhZGl4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxMDtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNvbWUgSlNPTiBsaWJzIHVzZSBudW1iZXJzIGZvciB2YWx1ZXMgdW5kZXIgNTMgYml0cyBvciBzdHJpbmdzIGZvciBsYXJnZXIuXG4gICAgLy8gQWNjb21pZGF0ZSBidXQgZG91YmxlLWNoZWNrIGl0Li5cbiAgICBpZiAodmFsdWUgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsdWUgcGFyYW1ldGVyIG92ZXJmbG93Jyk7XG5cbiAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyhTdHJpbmcodmFsdWUpLCB1bnNpZ25lZCwgcmFkaXgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IExvbmcuZnJvbVN0cmluZyh2YWx1ZSwgdW5zaWduZWQsIHJhZGl4KTtcbiAgfSBlbHNlIGlmICghTG9uZy5pc0xvbmcodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsdWUgcGFyYW1ldGVyIGlzIGEgcmVxdWllZCBMb25nLCBOdW1iZXIgb3IgU3RyaW5nJyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBpc05hbWUoc3RyLCBlcnIpIHtcbiAgdHJ5IHtcbiAgICBlbmNvZGVOYW1lKHN0cik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgZXJyKGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbnZhciBjaGFybWFwID0gJy4xMjM0NWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcbnZhciBjaGFyaWR4ID0gZnVuY3Rpb24gY2hhcmlkeChjaCkge1xuICB2YXIgaWR4ID0gY2hhcm1hcC5pbmRleE9mKGNoKTtcbiAgaWYgKGlkeCA9PT0gLTEpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyOiBcXCcnICsgY2ggKyAnXFwnJyk7XG5cbiAgcmV0dXJuIGlkeDtcbn07XG5cbi8qKiBPcmlnaW5hbCBOYW1lIGVuY29kZSBhbmQgZGVjb2RlIGxvZ2ljIGlzIGluIGdpdGh1Yi5jb20vZW9zaW8vZW9zICBuYXRpdmUuaHBwICovXG5cbi8qKlxuICBFbmNvZGUgYSBuYW1lIChhIGJhc2UzMiBzdHJpbmcpIHRvIGEgbnVtYmVyLlxuXG4gIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB0aGUgYmxvY2tjaGFpbiB1c2VzIHRoZSBudW1lcmljYWwgZW5jb2Rpbmcgb2Ygc3RyaW5nc1xuICBmb3IgdmVyeSBjb21tb24gdHlwZXMgbGlrZSBhY2NvdW50IG5hbWVzLlxuXG4gIEBzZWUgdHlwZXMuaHBwIHN0cmluZ190b19uYW1lXG5cbiAgQGFyZyB7c3RyaW5nfSBuYW1lIC0gQSBzdHJpbmcgdG8gZW5jb2RlLCB1cCB0byAxMiBjaGFyYWN0ZXJzIGxvbmcuXG4gIEBhcmcge3N0cmluZ30gW2xpdHRsZUVuZGlhbiA9IHRydWVdIC0gTGl0dGxlIG9yIEJpZ2VuZGlhbiBlbmNvZGluZ1xuXG4gIEByZXR1cm4ge3N0cmluZzx1aW50NjQ+fSAtIGNvbXByZXNzZWQgc3RyaW5nIChmcm9tIG5hbWUgYXJnKS4gIEEgc3RyaW5nIGlzXG4gICAgYWx3YXlzIHVzZWQgYmVjYXVzZSBhIG51bWJlciBjb3VsZCBleGNlZWQgSmF2YVNjcmlwdCdzIDUyIGJpdCBsaW1pdC5cbiovXG5mdW5jdGlvbiBlbmNvZGVOYW1lKG5hbWUpIHtcbiAgdmFyIGxpdHRsZUVuZGlhbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCduYW1lIHBhcmFtZXRlciBpcyBhIHJlcXVpcmVkIHN0cmluZycpO1xuXG4gIGlmIChuYW1lLmxlbmd0aCA+IDEyKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIG5hbWUgY2FuIGJlIHVwIHRvIDEyIGNoYXJhY3RlcnMgbG9uZycpO1xuXG4gIHZhciBiaXRzdHIgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMTI7IGkrKykge1xuICAgIC8vIHByb2Nlc3MgYWxsIDY0IGJpdHMgKGV2ZW4gaWYgbmFtZSBpcyBzaG9ydClcbiAgICB2YXIgYyA9IGkgPCBuYW1lLmxlbmd0aCA/IGNoYXJpZHgobmFtZVtpXSkgOiAwO1xuICAgIHZhciBiaXRsZW4gPSBpIDwgMTIgPyA1IDogNDtcbiAgICB2YXIgYml0cyA9IE51bWJlcihjKS50b1N0cmluZygyKTtcbiAgICBpZiAoYml0cy5sZW5ndGggPiBiaXRsZW4pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbmFtZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIGJpdHMgPSAnMCcucmVwZWF0KGJpdGxlbiAtIGJpdHMubGVuZ3RoKSArIGJpdHM7XG4gICAgYml0c3RyICs9IGJpdHM7XG4gIH1cblxuICB2YXIgdmFsdWUgPSBMb25nLmZyb21TdHJpbmcoYml0c3RyLCB0cnVlLCAyKTtcblxuICAvLyBjb252ZXJ0IHRvIExJVFRMRV9FTkRJQU5cbiAgdmFyIGxlSGV4ID0gJyc7XG4gIHZhciBieXRlcyA9IGxpdHRsZUVuZGlhbiA/IHZhbHVlLnRvQnl0ZXNMRSgpIDogdmFsdWUudG9CeXRlc0JFKCk7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGJ5dGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIGIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdmFyIG4gPSBOdW1iZXIoYikudG9TdHJpbmcoMTYpO1xuICAgICAgbGVIZXggKz0gKG4ubGVuZ3RoID09PSAxID8gJzAnIDogJycpICsgbjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHVsTmFtZSA9IExvbmcuZnJvbVN0cmluZyhsZUhleCwgdHJ1ZSwgMTYpLnRvU3RyaW5nKCk7XG5cbiAgLy8gY29uc29sZS5sb2coJ2VuY29kZU5hbWUnLCBuYW1lLCB2YWx1ZS50b1N0cmluZygpLCB1bE5hbWUudG9TdHJpbmcoKSwgSlNPTi5zdHJpbmdpZnkoYml0c3RyLnNwbGl0KC8oLi4uLi4pLykuc2xpY2UoMSkpKVxuXG4gIHJldHVybiB1bE5hbWUudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gIEBhcmcge0xvbmd8U3RyaW5nfG51bWJlcn0gdmFsdWUgdWludDY0XG4gIEBhcmcge3N0cmluZ30gW2xpdHRsZUVuZGlhbiA9IHRydWVdIC0gTGl0dGxlIG9yIEJpZ2VuZGlhbiBlbmNvZGluZ1xuXG4gIEByZXR1cm4ge3N0cmluZ31cbiovXG5mdW5jdGlvbiBkZWNvZGVOYW1lKHZhbHVlKSB7XG4gIHZhciBsaXR0bGVFbmRpYW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgdmFsdWUgPSBVTG9uZyh2YWx1ZSk7XG5cbiAgLy8gY29udmVydCBmcm9tIExJVFRMRV9FTkRJQU5cbiAgdmFyIGJlSGV4ID0gJyc7XG4gIHZhciBieXRlcyA9IGxpdHRsZUVuZGlhbiA/IHZhbHVlLnRvQnl0ZXNMRSgpIDogdmFsdWUudG9CeXRlc0JFKCk7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBieXRlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIGIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHZhciBuID0gTnVtYmVyKGIpLnRvU3RyaW5nKDE2KTtcbiAgICAgIGJlSGV4ICs9IChuLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIG47XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBiZUhleCArPSAnMCcucmVwZWF0KDE2IC0gYmVIZXgubGVuZ3RoKTtcblxuICB2YXIgZml2ZUJpdHMgPSBMb25nLmZyb21OdW1iZXIoMHgxZiwgdHJ1ZSk7XG4gIHZhciBmb3VyQml0cyA9IExvbmcuZnJvbU51bWJlcigweDBmLCB0cnVlKTtcbiAgdmFyIGJlVmFsdWUgPSBMb25nLmZyb21TdHJpbmcoYmVIZXgsIHRydWUsIDE2KTtcblxuICB2YXIgc3RyID0gJyc7XG4gIHZhciB0bXAgPSBiZVZhbHVlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IDEyOyBpKyspIHtcbiAgICB2YXIgYyA9IGNoYXJtYXBbdG1wLmFuZChpID09PSAwID8gZm91ckJpdHMgOiBmaXZlQml0cyldO1xuICAgIHN0ciA9IGMgKyBzdHI7XG4gICAgdG1wID0gdG1wLnNoaWZ0UmlnaHQoaSA9PT0gMCA/IDQgOiA1KTtcbiAgfVxuICBzdHIgPSBzdHIucmVwbGFjZSgvXFwuKyQvLCAnJyk7IC8vIHJlbW92ZSB0cmFpbGluZyBkb3RzIChhbGwgb2YgdGhlbSlcblxuICAvLyBjb25zb2xlLmxvZygnZGVjb2RlTmFtZScsIHN0ciwgYmVWYWx1ZS50b1N0cmluZygpLCB2YWx1ZS50b1N0cmluZygpLCBKU09OLnN0cmluZ2lmeShiZVZhbHVlLnRvU3RyaW5nKDIpLnNwbGl0KC8oLi4uLi4pLykuc2xpY2UoMSkpKVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICBOb3JtYWxpemUgYW5kIHZhbGlkYXRlIGRlY2ltYWwgc3RyaW5nIChwb3RlbnRpYWxseSBsYXJnZSB2YWx1ZXMpLiAgU2hvdWxkXG4gIGF2b2lkIGludGVybmF0aW9uYWxpemF0aW9uIGlzc3VlcyBpZiBwb3NzaWJsZSBidXQgd2lsbCBiZSBzYWZlIGFuZFxuICB0aHJvdyBhbiBlcnJvciBmb3IgYW4gaW52YWxpZCBudW1iZXIuXG5cbiAgTm9ybWFsaXphdGlvbiByZW1vdmVzIGV4dHJhIHplcm9zIG9yIGRlY2ltYWwuXG5cbiAgQHJldHVybiB7c3RyaW5nfSB2YWx1ZVxuKi9cbmZ1bmN0aW9uIERlY2ltYWxTdHJpbmcodmFsdWUpIHtcbiAgYXNzZXJ0KHZhbHVlICE9IG51bGwsICd2YWx1ZSBpcyByZXF1aXJlZCcpO1xuICB2YWx1ZSA9IHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS50b1N0cmluZyA/IHZhbHVlLnRvU3RyaW5nKCkgOiBTdHJpbmcodmFsdWUpO1xuXG4gIHZhciBuZWcgPSAvXi0vLnRlc3QodmFsdWUpO1xuICBpZiAobmVnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICBpZiAodmFsdWVbMF0gPT09ICcuJykge1xuICAgIHZhbHVlID0gJzAnICsgdmFsdWU7XG4gIH1cblxuICB2YXIgcGFydCA9IHZhbHVlLnNwbGl0KCcuJyk7XG4gIGFzc2VydChwYXJ0Lmxlbmd0aCA8PSAyLCAnaW52YWxpZCBkZWNpbWFsICcgKyB2YWx1ZSk7XG4gIGFzc2VydCgvXlxcZCsoLD9cXGQpKlxcZCokLy50ZXN0KHBhcnRbMF0pLCAnaW52YWxpZCBkZWNpbWFsICcgKyB2YWx1ZSk7XG5cbiAgaWYgKHBhcnQubGVuZ3RoID09PSAyKSB7XG4gICAgYXNzZXJ0KC9eXFxkKiQvLnRlc3QocGFydFsxXSksICdpbnZhbGlkIGRlY2ltYWwgJyArIHZhbHVlKTtcbiAgICBwYXJ0WzFdID0gcGFydFsxXS5yZXBsYWNlKC8wKyQvLCAnJyk7IC8vIHJlbW92ZSBzdWZmaXhpbmcgemVyb3NcbiAgICBpZiAocGFydFsxXSA9PT0gJycpIHtcbiAgICAgIHBhcnQucG9wKCk7XG4gICAgfVxuICB9XG5cbiAgcGFydFswXSA9IHBhcnRbMF0ucmVwbGFjZSgvXjAqLywgJycpOyAvLyByZW1vdmUgbGVhZGluZyB6ZXJvc1xuICBpZiAocGFydFswXSA9PT0gJycpIHtcbiAgICBwYXJ0WzBdID0gJzAnO1xuICB9XG4gIHJldHVybiAobmVnID8gJy0nIDogJycpICsgcGFydC5qb2luKCcuJyk7XG59XG5cbi8qKlxuICBFbnN1cmUgYSBmaXhlZCBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMuICBTYWZlIGZvciBsYXJnZSBudW1iZXJzLlxuXG4gIEBzZWUgLi9mb3JtYXQudGVzdC5qc1xuXG4gIEBleGFtcGxlIERlY2ltYWxQYWQoMTAuMiwgMykgPT09ICcxMC4yMDAnXG5cbiAgQGFyZyB7bnVtYmVyfHN0cmluZ3xvYmplY3QudG9TdHJpbmd9IG51bVxuICBAYXJnIHtudW1iZXJ9IFtwcmVjaXNpb24gPSBudWxsXSAtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcy4gIE51bGwgc2tpcHNcbiAgICBwYWRkaW5nIHN1ZmZpeCBidXQgc3RpbGwgYXBwbGllcyBudW1iZXIgZm9ybWF0IG5vcm1hbGl6YXRpb24uXG4gIEByZXR1cm4ge3N0cmluZ30gZGVjaW1hbCBwYXJ0IGlzIGFkZGVkIGFuZCB6ZXJvIHBhZGRlZCB0byBtYXRjaCBwcmVjaXNpb25cbiovXG5mdW5jdGlvbiBEZWNpbWFsUGFkKG51bSwgcHJlY2lzaW9uKSB7XG4gIHZhciB2YWx1ZSA9IERlY2ltYWxTdHJpbmcobnVtKTtcbiAgaWYgKHByZWNpc2lvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgYXNzZXJ0KHByZWNpc2lvbiA+PSAwICYmIHByZWNpc2lvbiA8PSAxOCwgJ1ByZWNpc2lvbiBzaG91bGQgYmUgMTggY2hhcmFjdGVycyBvciBsZXNzJyk7XG5cbiAgdmFyIHBhcnQgPSB2YWx1ZS5zcGxpdCgnLicpO1xuXG4gIGlmIChwcmVjaXNpb24gPT09IDAgJiYgcGFydC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcGFydFswXTtcbiAgfVxuXG4gIGlmIChwYXJ0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBwYXJ0WzBdICsgJy4nICsgJzAnLnJlcGVhdChwcmVjaXNpb24pO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYWQgPSBwcmVjaXNpb24gLSBwYXJ0WzFdLmxlbmd0aDtcbiAgICBhc3NlcnQocGFkID49IDAsICdkZWNpbWFsIFxcJycgKyB2YWx1ZSArICdcXCcgZXhjZWVkcyBwcmVjaXNpb24gJyArIHByZWNpc2lvbik7XG4gICAgcmV0dXJuIHBhcnRbMF0gKyAnLicgKyBwYXJ0WzFdICsgJzAnLnJlcGVhdChwYWQpO1xuICB9XG59XG5cbi8qKiBFbnN1cmVzIHByb3BlciB0cmFpbGluZyB6ZXJvcyB0aGVuIHJlbW92ZXMgZGVjaW1hbCBwbGFjZS4gKi9cbmZ1bmN0aW9uIERlY2ltYWxJbXBseSh2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gIHJldHVybiBEZWNpbWFsUGFkKHZhbHVlLCBwcmVjaXNpb24pLnJlcGxhY2UoJy4nLCAnJyk7XG59XG5cbi8qKlxuICBQdXQgdGhlIGRlY2ltYWwgcGxhY2UgYmFjayBpbiBpdHMgcG9zaXRpb24gYW5kIHJldHVybiB0aGUgbm9ybWFsaXplZCBudW1iZXJcbiAgc3RyaW5nICh3aXRoIGFueSB1bm5lY2Vzc2FyeSB6ZXJvcyBvciBhbiB1bm5lY2Vzc2FyeSBkZWNpbWFsIHJlbW92ZWQpLlxuXG4gIEBhcmcge3N0cmluZ3xudW1iZXJ8dmFsdWUudG9TdHJpbmd9IHZhbHVlIDEwMDAwXG4gIEBhcmcge251bWJlcn0gcHJlY2lzaW9uIDRcbiAgQHJldHVybiB7bnVtYmVyfSAxLjAwMDBcbiovXG5mdW5jdGlvbiBEZWNpbWFsVW5pbXBseSh2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gIGFzc2VydCh2YWx1ZSAhPSBudWxsLCAndmFsdWUgaXMgcmVxdWlyZWQnKTtcbiAgdmFsdWUgPSB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUudG9TdHJpbmcgPyB2YWx1ZS50b1N0cmluZygpIDogU3RyaW5nKHZhbHVlKTtcbiAgdmFyIG5lZyA9IC9eLS8udGVzdCh2YWx1ZSk7XG4gIGlmIChuZWcpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcbiAgfVxuICBhc3NlcnQoL15cXGQrJC8udGVzdCh2YWx1ZSksICdpbnZhbGlkIHdob2xlIG51bWJlciAnICsgdmFsdWUpO1xuICBhc3NlcnQocHJlY2lzaW9uICE9IG51bGwsICdwcmVjaXNpb24gcmVxdWlyZWQnKTtcbiAgYXNzZXJ0KHByZWNpc2lvbiA+PSAwICYmIHByZWNpc2lvbiA8PSAxOCwgJ1ByZWNpc2lvbiBzaG91bGQgYmUgMTggY2hhcmFjdGVycyBvciBsZXNzJyk7XG5cbiAgLy8gRW5zdXJlIG1pbmltdW0gbGVuZ3RoXG4gIHZhciBwYWQgPSBwcmVjaXNpb24gLSB2YWx1ZS5sZW5ndGg7XG4gIGlmIChwYWQgPiAwKSB7XG4gICAgdmFsdWUgPSAnJyArICcwJy5yZXBlYXQocGFkKSArIHZhbHVlO1xuICB9XG5cbiAgdmFyIGRvdElkeCA9IHZhbHVlLmxlbmd0aCAtIHByZWNpc2lvbjtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBkb3RJZHgpICsgJy4nICsgdmFsdWUuc2xpY2UoZG90SWR4KTtcbiAgcmV0dXJuIChuZWcgPyAnLScgOiAnJykgKyBEZWNpbWFsUGFkKHZhbHVlLCBwcmVjaXNpb24pOyAvLyBOb3JtYWxpemVcbn1cblxuLyoqIEBwcml2YXRlIGZvciBub3csIHN1cHBvcnQgZm9yIGFzc2V0IHN0cmluZ3MgaXMgbGltaXRlZFxuKi9cbmZ1bmN0aW9uIHByaW50QXNzZXQoX3JlZikge1xuICB2YXIgYW1vdW50ID0gX3JlZi5hbW91bnQsXG4gICAgICBwcmVjaXNpb24gPSBfcmVmLnByZWNpc2lvbixcbiAgICAgIHN5bWJvbCA9IF9yZWYuc3ltYm9sLFxuICAgICAgY29udHJhY3QgPSBfcmVmLmNvbnRyYWN0O1xuXG4gIGFzc2VydC5lcXVhbCh0eXBlb2Ygc3ltYm9sID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN5bWJvbCksICdzdHJpbmcnLCAnc3ltYm9sIGlzIGEgcmVxdWlyZWQgc3RyaW5nJyk7XG5cbiAgaWYgKGFtb3VudCAhPSBudWxsICYmIHByZWNpc2lvbiAhPSBudWxsKSB7XG4gICAgYW1vdW50ID0gRGVjaW1hbFBhZChhbW91bnQsIHByZWNpc2lvbik7XG4gIH1cblxuICB2YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4oZTEsIGUyKSB7XG4gICAgcmV0dXJuIGUxID09IG51bGwgPyAnJyA6IGUyID09IG51bGwgPyAnJyA6IGUxICsgZTI7XG4gIH07XG5cbiAgaWYgKGFtb3VudCAhPSBudWxsKSB7XG4gICAgLy8gdGhlIGFtb3VudCBjb250YWlucyB0aGUgcHJlY2lzaW9uXG4gICAgcmV0dXJuIGpvaW4oYW1vdW50LCAnICcpICsgc3ltYm9sICsgam9pbignQCcsIGNvbnRyYWN0KTtcbiAgfVxuXG4gIHJldHVybiBqb2luKHByZWNpc2lvbiwgJywnKSArIHN5bWJvbCArIGpvaW4oJ0AnLCBjb250cmFjdCk7XG59XG5cbi8qKlxuICBBdHRlbXB0cyB0byBwYXJzZSBhbGwgZm9ybXMgb2YgdGhlIGFzc2V0IHN0cmluZ3MgKHN5bWJvbCwgYXNzZXQsIG9yIGV4dGVuZGVkXG4gIHZlcnNpb25zKS4gIElmIHRoZSBwcm92aWRlZCBzdHJpbmcgY29udGFpbnMgYW55IGFkZGl0aW9uYWwgb3IgYXBwZWFycyB0byBoYXZlXG4gIGludmFsaWQgaW5mb3JtYXRpb24gYW4gZXJyb3IgaXMgdGhyb3duLlxuXG4gIEByZXR1cm4ge29iamVjdH0ge2Ftb3VudCwgcHJlY2lzaW9uLCBzeW1ib2wsIGNvbnRyYWN0fVxuICBAdGhyb3dzIEFzc2VydGlvbkVycm9yXG4qL1xuZnVuY3Rpb24gcGFyc2VBc3NldChzdHIpIHtcbiAgdmFyIF9zdHIkc3BsaXQgPSBzdHIuc3BsaXQoJyAnKSxcbiAgICAgIF9zdHIkc3BsaXQyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfc3RyJHNwbGl0LCAxKSxcbiAgICAgIGFtb3VudFJhdyA9IF9zdHIkc3BsaXQyWzBdO1xuXG4gIHZhciBhbW91bnRNYXRjaCA9IGFtb3VudFJhdy5tYXRjaCgvXigtP1swLTldKyhcXC5bMC05XSspPykoIHwkKS8pO1xuICB2YXIgYW1vdW50ID0gYW1vdW50TWF0Y2ggPyBhbW91bnRNYXRjaFsxXSA6IG51bGw7XG5cbiAgdmFyIHByZWNpc2lvbk1hdGNoID0gc3RyLm1hdGNoKC8oXnwgKShbMC05XSspLChbQS1aXSspKEB8JCkvKTtcbiAgdmFyIHByZWNpc2lvblN5bWJvbCA9IHByZWNpc2lvbk1hdGNoID8gTnVtYmVyKHByZWNpc2lvbk1hdGNoWzJdKSA6IG51bGw7XG4gIHZhciBwcmVjaXNpb25BbW91bnQgPSBhbW91bnQgPyAoYW1vdW50LnNwbGl0KCcuJylbMV0gfHwgJycpLmxlbmd0aCA6IG51bGw7XG4gIHZhciBwcmVjaXNpb24gPSBwcmVjaXNpb25TeW1ib2wgIT0gbnVsbCA/IHByZWNpc2lvblN5bWJvbCA6IHByZWNpc2lvbkFtb3VudDtcblxuICB2YXIgc3ltYm9sTWF0Y2ggPSBzdHIubWF0Y2goLyhefCB8LCkoW0EtWl0rKShAfCQpLyk7XG4gIHZhciBzeW1ib2wgPSBzeW1ib2xNYXRjaCA/IHN5bWJvbE1hdGNoWzJdIDogbnVsbDtcblxuICB2YXIgX3N0ciRzcGxpdDMgPSBzdHIuc3BsaXQoJ0AnKSxcbiAgICAgIF9zdHIkc3BsaXQ0ID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfc3RyJHNwbGl0MywgMiksXG4gICAgICBfc3RyJHNwbGl0NCQgPSBfc3RyJHNwbGl0NFsxXSxcbiAgICAgIGNvbnRyYWN0UmF3ID0gX3N0ciRzcGxpdDQkID09PSB1bmRlZmluZWQgPyAnJyA6IF9zdHIkc3BsaXQ0JDtcblxuICB2YXIgY29udHJhY3QgPSAvXlthLXowLTVdKyhcXC5bYS16MC01XSspKiQvLnRlc3QoY29udHJhY3RSYXcpID8gY29udHJhY3RSYXcgOiBudWxsO1xuXG4gIHZhciBjaGVjayA9IHByaW50QXNzZXQoeyBhbW91bnQ6IGFtb3VudCwgcHJlY2lzaW9uOiBwcmVjaXNpb24sIHN5bWJvbDogc3ltYm9sLCBjb250cmFjdDogY29udHJhY3QgfSk7XG5cbiAgYXNzZXJ0LmVxdWFsKHN0ciwgY2hlY2ssICdJbnZhbGlkIGFzc2V0IHN0cmluZzogJyArIHN0ciArICcgIT09ICcgKyBjaGVjayk7XG5cbiAgaWYgKHByZWNpc2lvbiAhPSBudWxsKSB7XG4gICAgYXNzZXJ0KHByZWNpc2lvbiA+PSAwICYmIHByZWNpc2lvbiA8PSAxOCwgJ1ByZWNpc2lvbiBzaG91bGQgYmUgMTggY2hhcmFjdGVycyBvciBsZXNzJyk7XG4gIH1cbiAgaWYgKHN5bWJvbCAhPSBudWxsKSB7XG4gICAgYXNzZXJ0KHN5bWJvbC5sZW5ndGggPD0gNywgJ0Fzc2V0IHN5bWJvbCBpcyA3IGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuICB9XG4gIGlmIChjb250cmFjdCAhPSBudWxsKSB7XG4gICAgYXNzZXJ0KGNvbnRyYWN0Lmxlbmd0aCA8PSAxMiwgJ0NvbnRyYWN0IGlzIDEyIGNoYXJhY3RlcnMgb3IgbGVzcycpO1xuICB9XG5cbiAgcmV0dXJuIHsgYW1vdW50OiBhbW91bnQsIHByZWNpc2lvbjogcHJlY2lzaW9uLCBzeW1ib2w6IHN5bWJvbCwgY29udHJhY3Q6IGNvbnRyYWN0IH07XG59IiwiJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogQXNzZXQgLSBhc3NldCB0eXBlIG9mIGVvc1xuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBc3NldCB7XG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIF92YWw6IG51bWJlciwgcHJvdGVjdGVkIF9zeW06IHN0cmluZywgcHJvdGVjdGVkIF9kZWNpbWFsID0gNCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB2YWx1ZVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgZ2V0IHZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBzeW1ib2xcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIGdldCBzeW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zeW1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgZGVjaW1hbFxuICAgICAqIEByZXR1cm4ge251bWJlcnwqfVxuICAgICAqL1xuICAgIGdldCBkZWNpbWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVjaW1hbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBTdHJpbmcgdmFsIHdpdGhvdXQgc3ltYm9sXG4gICAgICogQHJldHVybiB7c3RyaW5nIHwgKn1cbiAgICAgKi9cbiAgICBnZXQgdmFsU3RyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsLnRvRml4ZWQodGhpcy5kZWNpbWFsKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBzdHJpbmcgdmFsIHdpdGggc3ltYm9sLCBzdWNoIGFzICcxLjAwMDAgRU9TJ1xuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMudmFsU3RyfSAke3RoaXMuc3ltfWBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBhc3NldCBieSBhc3NldCBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXNzZXRTdHJcbiAgICAgKiBAcmV0dXJuIHtBc3NldH1cbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2UoYXNzZXRTdHI6IHN0cmluZykge1xuICAgICAgICBpZiAoIWFzc2V0U3RyKSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGFzc2V0U3RyID0gYXNzZXRTdHIudHJpbSgpXG4gICAgICAgIGxldCBibGFua1BvcyA9IGFzc2V0U3RyLmluZGV4T2YoJyAnKVxuICAgICAgICBpZiAoYmxhbmtQb3MgPCAwKSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGxldCBzdHJWYWwgPSBhc3NldFN0ci5zbGljZSgwLCBibGFua1BvcylcbiAgICAgICAgbGV0IHN0clN5bSA9IGFzc2V0U3RyLnNsaWNlKDEgKyBibGFua1BvcylcbiAgICAgICAgaWYgKCFzdHJWYWwgfHwgIXN0clN5bSkgcmV0dXJuIG51bGxcbiAgICAgICAgbGV0IGRlY2ltYWxQb3MgPSBhc3NldFN0ci5pbmRleE9mKCcuJylcbiAgICAgICAgbGV0IGRlY2ltYWwgPSBkZWNpbWFsUG9zIDwgMCA/IDAgOiBibGFua1BvcyAtIGRlY2ltYWxQb3MgLSAxXG4gICAgICAgIGxldCB2YWwgPSBwYXJzZUZsb2F0KHN0clZhbClcblxuICAgICAgICByZXR1cm4gbmV3IEFzc2V0KHZhbCwgc3RyU3ltLCBkZWNpbWFsKVxuICAgIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgYnRvYSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYnRvYSAmJiB3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdykpIHx8IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idG9hJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGxvYWRFdmVudCA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xuICAgIHZhciB4RG9tYWluID0gZmFsc2U7XG5cbiAgICAvLyBGb3IgSUUgOC85IENPUlMgc3VwcG9ydFxuICAgIC8vIE9ubHkgc3VwcG9ydHMgUE9TVCBhbmQgR0VUIGNhbGxzIGFuZCBkb2Vzbid0IHJldHVybnMgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkgJiZcbiAgICAgICAgIWlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcbiAgICAgIGxvYWRFdmVudCA9ICdvbmxvYWQnO1xuICAgICAgeERvbWFpbiA9IHRydWU7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge307XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdFtsb2FkRXZlbnRdID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAvLyBJRSBzZW5kcyAxMjIzIGluc3RlYWQgb2YgMjA0IChodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiB0b0FycmF5KGFycikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKSB7XG4gICAgdmFyIHJlcXVlc3Q7XG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3QgPSBvYmpbbWV0aG9kXS5hcHBseShvYmosIGFyZ3MpO1xuICAgICAgcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBwLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKTtcbiAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgcC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UHJvcGVydGllcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUNsYXNzLnByb3RvdHlwZSwgcHJvcCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdLmFwcGx5KHRoaXNbdGFyZ2V0UHJvcF0sIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEluZGV4KGluZGV4KSB7XG4gICAgdGhpcy5faW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhJbmRleCwgJ19pbmRleCcsIFtcbiAgICAnbmFtZScsXG4gICAgJ2tleVBhdGgnLFxuICAgICdtdWx0aUVudHJ5JyxcbiAgICAndW5pcXVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnZ2V0JyxcbiAgICAnZ2V0S2V5JyxcbiAgICAnZ2V0QWxsJyxcbiAgICAnZ2V0QWxsS2V5cycsXG4gICAgJ2NvdW50J1xuICBdKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnb3BlbkN1cnNvcicsXG4gICAgJ29wZW5LZXlDdXJzb3InXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIEN1cnNvcihjdXJzb3IsIHJlcXVlc3QpIHtcbiAgICB0aGlzLl9jdXJzb3IgPSBjdXJzb3I7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoQ3Vyc29yLCAnX2N1cnNvcicsIFtcbiAgICAnZGlyZWN0aW9uJyxcbiAgICAna2V5JyxcbiAgICAncHJpbWFyeUtleScsXG4gICAgJ3ZhbHVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEN1cnNvciwgJ19jdXJzb3InLCBJREJDdXJzb3IsIFtcbiAgICAndXBkYXRlJyxcbiAgICAnZGVsZXRlJ1xuICBdKTtcblxuICAvLyBwcm94eSAnbmV4dCcgbWV0aG9kc1xuICBbJ2FkdmFuY2UnLCAnY29udGludWUnLCAnY29udGludWVQcmltYXJ5S2V5J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgaWYgKCEobWV0aG9kTmFtZSBpbiBJREJDdXJzb3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgIEN1cnNvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJzb3IgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgY3Vyc29yLl9jdXJzb3JbbWV0aG9kTmFtZV0uYXBwbHkoY3Vyc29yLl9jdXJzb3IsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChjdXJzb3IuX3JlcXVlc3QpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIGN1cnNvci5fcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gT2JqZWN0U3RvcmUoc3RvcmUpIHtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICB9XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmNyZWF0ZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5jcmVhdGVJbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5pbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ2luZGV4TmFtZXMnLFxuICAgICdhdXRvSW5jcmVtZW50J1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAncHV0JyxcbiAgICAnYWRkJyxcbiAgICAnZGVsZXRlJyxcbiAgICAnY2xlYXInLFxuICAgICdnZXQnLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAnZGVsZXRlSW5kZXgnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKGlkYlRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fdHggPSBpZGJUcmFuc2FjdGlvbjtcbiAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5vYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fdHgub2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fdHgsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhUcmFuc2FjdGlvbiwgJ190eCcsIFtcbiAgICAnb2JqZWN0U3RvcmVOYW1lcycsXG4gICAgJ21vZGUnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhUcmFuc2FjdGlvbiwgJ190eCcsIElEQlRyYW5zYWN0aW9uLCBbXG4gICAgJ2Fib3J0J1xuICBdKTtcblxuICBmdW5jdGlvbiBVcGdyYWRlREIoZGIsIG9sZFZlcnNpb24sIHRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgICB0aGlzLm9sZFZlcnNpb24gPSBvbGRWZXJzaW9uO1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgVXBncmFkZURCLnByb3RvdHlwZS5jcmVhdGVPYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fZGIuY3JlYXRlT2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhVcGdyYWRlREIsICdfZGInLCBbXG4gICAgJ25hbWUnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFVwZ3JhZGVEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2RlbGV0ZU9iamVjdFN0b3JlJyxcbiAgICAnY2xvc2UnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIERCKGRiKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgfVxuXG4gIERCLnByb3RvdHlwZS50cmFuc2FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24odGhpcy5fZGIudHJhbnNhY3Rpb24uYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoREIsICdfZGInLCBJREJEYXRhYmFzZSwgW1xuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgLy8gQWRkIGN1cnNvciBpdGVyYXRvcnNcbiAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBicm93c2VycyBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aCBwcm9taXNlc1xuICBbJ29wZW5DdXJzb3InLCAnb3BlbktleUN1cnNvciddLmZvckVhY2goZnVuY3Rpb24oZnVuY05hbWUpIHtcbiAgICBbT2JqZWN0U3RvcmUsIEluZGV4XS5mb3JFYWNoKGZ1bmN0aW9uKENvbnN0cnVjdG9yKSB7XG4gICAgICAvLyBEb24ndCBjcmVhdGUgaXRlcmF0ZUtleUN1cnNvciBpZiBvcGVuS2V5Q3Vyc29yIGRvZXNuJ3QgZXhpc3QuXG4gICAgICBpZiAoIShmdW5jTmFtZSBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG5cbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jTmFtZS5yZXBsYWNlKCdvcGVuJywgJ2l0ZXJhdGUnKV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG5hdGl2ZU9iamVjdCA9IHRoaXMuX3N0b3JlIHx8IHRoaXMuX2luZGV4O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IG5hdGl2ZU9iamVjdFtmdW5jTmFtZV0uYXBwbHkobmF0aXZlT2JqZWN0LCBhcmdzLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcG9seWZpbGwgZ2V0QWxsXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCkgcmV0dXJuO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihxdWVyeSwgY291bnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgaW5zdGFuY2UuaXRlcmF0ZUN1cnNvcihxdWVyeSwgZnVuY3Rpb24oY3Vyc29yKSB7XG4gICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPT0gY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgZXhwID0ge1xuICAgIG9wZW46IGZ1bmN0aW9uKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdvcGVuJywgW25hbWUsIHZlcnNpb25dKTtcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgICAgdXBncmFkZUNhbGxiYWNrKG5ldyBVcGdyYWRlREIocmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24sIHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlbGYuaWRiID0gZXhwO1xuICB9XG59KCkpO1xuIiwiaW1wb3J0IGlkYiBmcm9tICdpZGInXG5pbXBvcnQgRW9zIGZyb20gJ2Vvc2pzJ1xuaW1wb3J0IEVjYyBmcm9tICdlb3Nqcy1lY2MnXG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gJ2JpZ251bWJlci5qcydcblxuaW1wb3J0IHsgZW9zTm9kZUNvbmZpZ3MgfSBmcm9tICcuL3NyYy9jb25maWdzJ1xuXG5pbXBvcnQgeyBTY2F0dGVyUGxheWVyIH0gZnJvbSAnLi9zcmMvb3V0T2ZCb3gvc2NhdHRlclBsYXllci9zY2F0dGVyUGxheWVyJ1xuaW1wb3J0IHsgUGxheWVyLCBTaWduUGxheWVyLCBSZWFkaW5nUGxheWVyIH0gZnJvbSAnLi9zcmMnXG5cbi8qKlxuICogZW52IG9mIGJyb3dzZXJcbiAqIEB0eXBlIHtpc1BjfVxuICovXG53aW5kb3cuZW52ID0gY2xhc3MgZW52IHtcbiAgc3RhdGljIGdldCBpc1BjICgpIHtcbiAgICByZXR1cm4gIS9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUG9kfEJsYWNrQmVycnkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG4gIH1cbn1cblxuLyoqXG4gKiBlb3Nqc1xuICogQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9lb3Nqc31cbiAqIEB0eXBlIHtFb3N9XG4gKi9cbndpbmRvdy5lb3NqcyA9IEVvc1xuXG4vKipcbiAqIGVvc2pzX2VjY1xuICogQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9lb3Nqcy1lY2N9XG4gKiBAdHlwZSB7RWNjfVxuICovXG53aW5kb3cuZW9zanNfZWNjID0gRWNjXG5cbi8qKlxuICogYmlnIG51bWJlclxuICogQHNlZSB7QHVybCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iaWdudW1iZXIuanN9XG4gKiBAdHlwZSB7QmlnTnVtYmVyfVxuICovXG53aW5kb3cuQmlnTnVtYmVyID0gQmlnTnVtYmVyXG5cbi8qKlxuICogaW5kZXggZGF0YSBiYXNlXG4gKiBAc2VlIHtAdXJsIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2lkYiB9XG4gKi9cbndpbmRvdy5pZGIgPSBpZGJcblxuLyoqXG4gKiB0aGUgZW9zIHBsYXllclxuICogQHR5cGUge1BsYXllcn1cbiAqL1xud2luZG93LmVvc3BsYXllciA9IG5ldyBTY2F0dGVyUGxheWVyKGVvc05vZGVDb25maWdzKVxuaWYgKCF3aW5kb3cua2gpIHtcbiAgd2luZG93LmtoID0ge31cbn1cblxud2luZG93LmtoLmVvcyA9IHtcbiAgUGxheWVyLFxuICBTY2F0dGVyUGxheWVyLFxuICBTaWduUGxheWVyLFxuICBSZWFkaW5nUGxheWVyXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIEFlcyA9IHJlcXVpcmUoXCIuL2Flc1wiKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZShcIi4va2V5X3ByaXZhdGVcIik7XG52YXIgUHVibGljS2V5ID0gcmVxdWlyZShcIi4va2V5X3B1YmxpY1wiKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKFwiLi9zaWduYXR1cmVcIik7XG52YXIga2V5X3V0aWxzID0gcmVxdWlyZShcIi4va2V5X3V0aWxzXCIpO1xudmFyIGhhc2ggPSByZXF1aXJlKFwiLi9oYXNoXCIpO1xuXG4vKipcbiAgICBbV2FsbGV0IEltcG9ydCBGb3JtYXRdKGh0dHBzOi8vZW4uYml0Y29pbi5pdC93aWtpL1dhbGxldF9pbXBvcnRfZm9ybWF0KVxuICAgIEB0eXBlZGVmIHtzdHJpbmd9IHdpZlxuKi9cbi8qKlxuICAgIEVPU0tleS4uXG4gICAgQHR5cGVkZWYge3N0cmluZ30gcHVia2V5XG4qL1xuXG4vKiogQG5hbWVzcGFjZSAqL1xudmFyIGVjYyA9IHtcbiAgICAvKipcbiAgICAgIEluaXRpYWxpemUgYnkgcnVubmluZyBzb21lIHNlbGYtY2hlY2tpbmcgY29kZS4gIFRoaXMgc2hvdWxkIHRha2UgYVxuICAgICAgc2Vjb25kIHRvIGdhdGhlciBhZGRpdGlvbmFsIENQVSBlbnRyb3B5IHVzZWQgZHVyaW5nIHByaXZhdGUga2V5XG4gICAgICBnZW5lcmF0aW9uLlxuICAgICAgIEluaXRpYWxpemF0aW9uIGhhcHBlbnMgb25jZSBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgaW5pdGlhbGl6ZTogUHJpdmF0ZUtleS5pbml0aWFsaXplLFxuXG4gICAgLyoqXG4gICAgICBEb2VzIG5vdCBwYXVzZSB0byBnYXRoZXIgQ1BVIGVudHJvcHkuXG4gICAgICBAcmV0dXJuIHtQcm9taXNlPFByaXZhdGVLZXk+fSB0ZXN0IGtleVxuICAgICovXG4gICAgdW5zYWZlUmFuZG9tS2V5OiBmdW5jdGlvbiB1bnNhZmVSYW5kb21LZXkoKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LnVuc2FmZVJhbmRvbUtleSgpLnRoZW4oZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleS50b1N0cmluZygpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge251bWJlcn0gW2NwdUVudHJvcHlCaXRzID0gMF0gZ2F0aGVyIGFkZGl0aW9uYWwgZW50cm9weVxuICAgICAgICBmcm9tIGEgQ1BVIG1pbmluZyBhbGdvcml0aG0uICBUaGlzIHdpbGwgYWxyZWFkeSBoYXBwZW4gb25jZSBieVxuICAgICAgICBkZWZhdWx0LlxuICAgICAgICAgQHJldHVybiB7UHJvbWlzZTx3aWY+fVxuICAgICAgICAgQGV4YW1wbGVcbiAgICBlY2MucmFuZG9tS2V5KCkudGhlbihwcml2YXRlS2V5ID0+IHtcbiAgICBjb25zb2xlLmxvZygnUHJpdmF0ZSBLZXk6XFx0JywgcHJpdmF0ZUtleSkgLy8gd2lmXG4gICAgY29uc29sZS5sb2coJ1B1YmxpYyBLZXk6XFx0JywgZWNjLnByaXZhdGVUb1B1YmxpYyhwcml2YXRlS2V5KSkgLy8gRU9Ta2V5Li4uXG4gICAgfSlcbiAgICAqL1xuICAgIHJhbmRvbUtleTogZnVuY3Rpb24gcmFuZG9tS2V5KGNwdUVudHJvcHlCaXRzKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LnJhbmRvbUtleShjcHVFbnRyb3B5Qml0cykudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgIEBhcmcge3N0cmluZ30gc2VlZCAtIGFueSBsZW5ndGggc3RyaW5nLiAgVGhpcyBpcyBwcml2YXRlLiAgVGhlIHNhbWVcbiAgICAgICAgc2VlZCBwcm9kdWNlcyB0aGUgc2FtZSBwcml2YXRlIGtleSBldmVyeSB0aW1lLiAgQXQgbGVhc3QgMTI4IHJhbmRvbVxuICAgICAgICBiaXRzIHNob3VsZCBiZSB1c2VkIHRvIHByb2R1Y2UgYSBnb29kIHByaXZhdGUga2V5LlxuICAgICAgICBAcmV0dXJuIHt3aWZ9XG4gICAgICAgICBAZXhhbXBsZSBlY2Muc2VlZFByaXZhdGUoJ3NlY3JldCcpID09PSB3aWZcbiAgICAqL1xuICAgIHNlZWRQcml2YXRlOiBmdW5jdGlvbiBzZWVkUHJpdmF0ZShzZWVkKSB7XG4gICAgICAgIHJldHVybiBQcml2YXRlS2V5LmZyb21TZWVkKHNlZWQpLnRvU3RyaW5nKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBAYXJnIHt3aWZ9IHdpZlxuICAgICAgICBAYXJnIHtzdHJpbmd9IFtwdWJrZXlfcHJlZml4ID0gJ0VPUyddIC0gcHVibGljIGtleSBwcmVmaXhcbiAgICAgICAgIEByZXR1cm4ge3B1YmtleX1cbiAgICAgICAgIEBleGFtcGxlIGVjYy5wcml2YXRlVG9QdWJsaWMod2lmKSA9PT0gcHVia2V5XG4gICAgKi9cbiAgICBwcml2YXRlVG9QdWJsaWM6IGZ1bmN0aW9uIHByaXZhdGVUb1B1YmxpYyh3aWYpIHtcbiAgICAgICAgdmFyIHB1YmtleV9wcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdFT1MnO1xuICAgICAgICByZXR1cm4gUHJpdmF0ZUtleSh3aWYpLnRvUHVibGljKCkudG9TdHJpbmcocHVia2V5X3ByZWZpeCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBAYXJnIHtwdWJrZXl9IHB1YmtleSAtIGxpa2UgRU9TS2V5Li5cbiAgICAgICAgQGFyZyB7c3RyaW5nfSBbcHVia2V5X3ByZWZpeCA9ICdFT1MnXVxuICAgICAgICAgQHJldHVybiB7Ym9vbGVhbn0gdmFsaWRcbiAgICAgICAgIEBleGFtcGxlIGVjYy5pc1ZhbGlkUHVibGljKHB1YmtleSkgPT09IHRydWVcbiAgICAqL1xuICAgIGlzVmFsaWRQdWJsaWM6IGZ1bmN0aW9uIGlzVmFsaWRQdWJsaWMocHVia2V5KSB7XG4gICAgICAgIHZhciBwdWJrZXlfcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnRU9TJztcbiAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5pc1ZhbGlkKHB1YmtleSwgcHVia2V5X3ByZWZpeCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBAYXJnIHt3aWZ9IHdpZlxuICAgICAgICBAcmV0dXJuIHtib29sZWFufSB2YWxpZFxuICAgICAgICAgQGV4YW1wbGUgZWNjLmlzVmFsaWRQcml2YXRlKHdpZikgPT09IHRydWVcbiAgICAqL1xuICAgIGlzVmFsaWRQcml2YXRlOiBmdW5jdGlvbiBpc1ZhbGlkUHJpdmF0ZSh3aWYpIHtcbiAgICAgICAgcmV0dXJuIFByaXZhdGVLZXkuaXNWYWxpZCh3aWYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgICAgQ3JlYXRlIGEgc2lnbmF0dXJlIHVzaW5nIGRhdGEgb3IgYSBoYXNoLlxuICAgICAgICAgQGFyZyB7c3RyaW5nfEJ1ZmZlcn0gZGF0YVxuICAgICAgICBAYXJnIHt3aWZ8UHJpdmF0ZUtleX0gcHJpdmF0ZUtleVxuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICd1dGY4J10gLSBkYXRhIGVuY29kaW5nIChpZiBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtzdHJpbmd9IHN0cmluZyBzaWduYXR1cmVcbiAgICAgICAgIEBleGFtcGxlIGVjYy5zaWduKCdJIGFtIGFsaXZlJywgd2lmKVxuICAgICovXG4gICAgc2lnbjogZnVuY3Rpb24gc2lnbihkYXRhLCBwcml2YXRlS2V5KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ3V0ZjgnO1xuXG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQVBJIGNoYW5nZWQsIHVzZSBzaWduSGFzaCguLikgaW5zdGVhZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXYXJuaW5nOiBlY2Muc2lnbiBoYXNoRGF0YSBwYXJhbWV0ZXIgd2FzIHJlbW92ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU2lnbmF0dXJlLnNpZ24oZGF0YSwgcHJpdmF0ZUtleSwgZW5jb2RpbmcpLnRvU3RyaW5nKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBkYXRhU2hhMjU2IC0gc2hhMjU2IGhhc2ggMzIgYnl0ZSBidWZmZXIgb3Igc3RyaW5nXG4gICAgICAgIEBhcmcge3dpZnxQcml2YXRlS2V5fSBwcml2YXRlS2V5XG4gICAgICAgIEBhcmcge1N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gZGF0YVNoYTI1NiBlbmNvZGluZyAoaWYgc3RyaW5nKVxuICAgICAgICAgQHJldHVybiB7c3RyaW5nfSBzdHJpbmcgc2lnbmF0dXJlXG4gICAgKi9cbiAgICBzaWduSGFzaDogZnVuY3Rpb24gc2lnbkhhc2goZGF0YVNoYTI1NiwgcHJpdmF0ZUtleSkge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdoZXgnO1xuXG4gICAgICAgIHJldHVybiBTaWduYXR1cmUuc2lnbkhhc2goZGF0YVNoYTI1NiwgcHJpdmF0ZUtleSwgZW5jb2RpbmcpLnRvU3RyaW5nKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAgICBWZXJpZnkgc2lnbmVkIGRhdGEuXG4gICAgICAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBzaWduYXR1cmUgLSBidWZmZXIgb3IgaGV4IHN0cmluZ1xuICAgICAgICBAYXJnIHtzdHJpbmd8QnVmZmVyfSBkYXRhXG4gICAgICAgIEBhcmcge3B1YmtleXxQdWJsaWNLZXl9IHB1YmtleVxuICAgICAgICBAYXJnIHtib29sZWFufSBbaGFzaERhdGEgPSB0cnVlXSAtIHNoYTI1NiBoYXNoIGRhdGEgYmVmb3JlIHZlcmlmeVxuICAgICAgICBAcmV0dXJuIHtib29sZWFufVxuICAgICAgICAgQGV4YW1wbGUgZWNjLnZlcmlmeShzaWduYXR1cmUsICdJIGFtIGFsaXZlJywgcHVia2V5KSA9PT0gdHJ1ZVxuICAgICovXG4gICAgdmVyaWZ5OiBmdW5jdGlvbiB2ZXJpZnkoc2lnbmF0dXJlLCBkYXRhLCBwdWJrZXkpIHtcbiAgICAgICAgdmFyIGVuY29kaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAndXRmOCc7XG5cbiAgICAgICAgaWYgKGVuY29kaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBUEkgY2hhbmdlZCwgdXNlIHZlcmlmeUhhc2goLi4pIGluc3RlYWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnV2FybmluZzogZWNjLnZlcmlmeSBoYXNoRGF0YSBwYXJhbWV0ZXIgd2FzIHJlbW92ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmUpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlLnZlcmlmeShkYXRhLCBwdWJrZXksIGVuY29kaW5nKTtcbiAgICB9LFxuXG4gICAgdmVyaWZ5SGFzaDogZnVuY3Rpb24gdmVyaWZ5SGFzaChzaWduYXR1cmUsIGRhdGFTaGEyNTYsIHB1YmtleSkge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICdoZXgnO1xuXG4gICAgICAgIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHNpZ25hdHVyZSk7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmUudmVyaWZ5SGFzaChkYXRhU2hhMjU2LCBwdWJrZXksIGVuY29kaW5nKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgICAgUmVjb3ZlciB0aGUgcHVibGljIGtleSB1c2VkIHRvIGNyZWF0ZSB0aGUgc2lnbmF0dXJlLlxuICAgICAgICAgQGFyZyB7U3RyaW5nfEJ1ZmZlcn0gc2lnbmF0dXJlIChFT1NiYXNlNThzaWcuLiwgSGV4LCBCdWZmZXIpXG4gICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IGRhdGEgLSBmdWxsIGRhdGFcbiAgICAgICAgQGFyZyB7U3RyaW5nfSBbZW5jb2RpbmcgPSAndXRmOCddIC0gZGF0YSBlbmNvZGluZyAoaWYgZGF0YSBpcyBhIHN0cmluZylcbiAgICAgICAgIEByZXR1cm4ge3B1YmtleX1cbiAgICAgICAgIEBleGFtcGxlIGVjYy5yZWNvdmVyKHNpZ25hdHVyZSwgJ0kgYW0gYWxpdmUnKSA9PT0gcHVia2V5XG4gICAgKi9cbiAgICByZWNvdmVyOiBmdW5jdGlvbiByZWNvdmVyKHNpZ25hdHVyZSwgZGF0YSkge1xuICAgICAgICB2YXIgZW5jb2RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICd1dGY4JztcblxuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FQSSBjaGFuZ2VkLCB1c2UgcmVjb3Zlckhhc2goc2lnbmF0dXJlLCBkYXRhKSBpbnN0ZWFkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1dhcm5pbmc6IGVjYy5yZWNvdmVyIGhhc2hEYXRhIHBhcmFtZXRlciB3YXMgcmVtb3ZlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHNpZ25hdHVyZSk7XG4gICAgICAgIHJldHVybiBzaWduYXR1cmUucmVjb3ZlcihkYXRhLCBlbmNvZGluZykudG9TdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAgIEBhcmcge1N0cmluZ3xCdWZmZXJ9IHNpZ25hdHVyZSAoRU9TYmFzZTU4c2lnLi4sIEhleCwgQnVmZmVyKVxuICAgICAgICBAYXJnIHtTdHJpbmd8QnVmZmVyfSBkYXRhU2hhMjU2IC0gc2hhMjU2IGhhc2ggMzIgYnl0ZSBidWZmZXIgb3IgaGV4IHN0cmluZ1xuICAgICAgICBAYXJnIHtTdHJpbmd9IFtlbmNvZGluZyA9ICdoZXgnXSAtIGRhdGFTaGEyNTYgZW5jb2RpbmcgKGlmIGRhdGFTaGEyNTYgaXMgYSBzdHJpbmcpXG4gICAgICAgICBAcmV0dXJuIHtQdWJsaWNLZXl9XG4gICAgKi9cbiAgICByZWNvdmVySGFzaDogZnVuY3Rpb24gcmVjb3Zlckhhc2goc2lnbmF0dXJlLCBkYXRhU2hhMjU2KSB7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2hleCc7XG5cbiAgICAgICAgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20oc2lnbmF0dXJlKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVySGFzaChkYXRhU2hhMjU2LCBlbmNvZGluZykudG9TdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqIEBhcmcge3N0cmluZ3xCdWZmZXJ9IGRhdGEgLSBhbHdheXMgYmluYXJ5LCB5b3UgbWF5IG5lZWQgQnVmZmVyLmZyb20oZGF0YSwgJ2hleCcpXG4gICAgICAgIEBhcmcge3N0cmluZ30gW2VuY29kaW5nID0gJ2hleCddIC0gcmVzdWx0IGVuY29kaW5nICdoZXgnLCAnYmluYXJ5JyBvciAnYmFzZTY0J1xuICAgICAgICBAcmV0dXJuIHtzdHJpbmd8QnVmZmVyfSAtIEJ1ZmZlciB3aGVuIGVuY29kaW5nIGlzIG51bGwsIG9yIHN0cmluZ1xuICAgICAgICAgQGV4YW1wbGUgZWNjLnNoYTI1NignaGFzaG1lJykgPT09ICcwMjIwOGIuLidcbiAgICAgICAgQGV4YW1wbGUgZWNjLnNoYTI1NihCdWZmZXIuZnJvbSgnMDIyMDhiJywgJ2hleCcpKSA9PT0gJzI5YTIzLi4nXG4gICAgKi9cbiAgICBzaGEyNTY6IGZ1bmN0aW9uIHNoYTI1NihkYXRhKSB7XG4gICAgICAgIHZhciByZXN1bHRFbmNvZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2hleCc7XG4gICAgICAgIHJldHVybiBoYXNoLnNoYTI1NihkYXRhLCByZXN1bHRFbmNvZGluZyk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlY2M7IiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIvKlxyXG4gQ29weXJpZ2h0IDIwMTMgRGFuaWVsIFdpcnR6IDxkY29kZUBkY29kZS5pbz5cclxuIENvcHlyaWdodCAyMDA5IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcblxyXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxyXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcblxyXG4vKipcclxuICogQGxpY2Vuc2UgbG9uZy5qcyAoYykgMjAxMyBEYW5pZWwgV2lydHogPGRjb2RlQGRjb2RlLmlvPlxyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wXHJcbiAqIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vbG9uZy5qcyBmb3IgZGV0YWlsc1xyXG4gKi9cclxuKGZ1bmN0aW9uKGdsb2JhbCwgZmFjdG9yeSkge1xyXG5cclxuICAgIC8qIEFNRCAqLyBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbXCJhbWRcIl0pXHJcbiAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcclxuICAgIC8qIENvbW1vbkpTICovIGVsc2UgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlICYmIG1vZHVsZVtcImV4cG9ydHNcIl0pXHJcbiAgICAgICAgbW9kdWxlW1wiZXhwb3J0c1wiXSA9IGZhY3RvcnkoKTtcclxuICAgIC8qIEdsb2JhbCAqLyBlbHNlXHJcbiAgICAgICAgKGdsb2JhbFtcImRjb2RlSU9cIl0gPSBnbG9iYWxbXCJkY29kZUlPXCJdIHx8IHt9KVtcIkxvbmdcIl0gPSBmYWN0b3J5KCk7XHJcblxyXG59KSh0aGlzLCBmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0cyBhIDY0IGJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIsIGdpdmVuIGl0cyBsb3cgYW5kIGhpZ2ggMzIgYml0IHZhbHVlcyBhcyAqc2lnbmVkKiBpbnRlZ2Vycy5cclxuICAgICAqICBTZWUgdGhlIGZyb20qIGZ1bmN0aW9ucyBiZWxvdyBmb3IgbW9yZSBjb252ZW5pZW50IHdheXMgb2YgY29uc3RydWN0aW5nIExvbmdzLlxyXG4gICAgICogQGV4cG9ydHMgTG9uZ1xyXG4gICAgICogQGNsYXNzIEEgTG9uZyBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgVGhlIGxvdyAoc2lnbmVkKSAzMiBiaXRzIG9mIHRoZSBsb25nXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGlnaCBUaGUgaGlnaCAoc2lnbmVkKSAzMiBiaXRzIG9mIHRoZSBsb25nXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gYGZhbHNlYCBmb3Igc2lnbmVkXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTG9uZyhsb3csIGhpZ2gsIHVuc2lnbmVkKSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb3cgMzIgYml0cyBhcyBhIHNpZ25lZCB2YWx1ZS5cclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubG93ID0gbG93IHwgMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCB2YWx1ZS5cclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaGlnaCA9IGhpZ2ggfCAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdC5cclxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnVuc2lnbmVkID0gISF1bnNpZ25lZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYSBsb25nIGlzIHRoZSB0d28gZ2l2ZW4gc2lnbmVkLCAzMi1iaXQgdmFsdWVzLlxyXG4gICAgLy8gV2UgdXNlIDMyLWJpdCBwaWVjZXMgYmVjYXVzZSB0aGVzZSBhcmUgdGhlIHNpemUgb2YgaW50ZWdlcnMgb24gd2hpY2hcclxuICAgIC8vIEphdmFzY3JpcHQgcGVyZm9ybXMgYml0LW9wZXJhdGlvbnMuICBGb3Igb3BlcmF0aW9ucyBsaWtlIGFkZGl0aW9uIGFuZFxyXG4gICAgLy8gbXVsdGlwbGljYXRpb24sIHdlIHNwbGl0IGVhY2ggbnVtYmVyIGludG8gMTYgYml0IHBpZWNlcywgd2hpY2ggY2FuIGVhc2lseSBiZVxyXG4gICAgLy8gbXVsdGlwbGllZCB3aXRoaW4gSmF2YXNjcmlwdCdzIGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgb3ZlcmZsb3dcclxuICAgIC8vIG9yIGNoYW5nZSBpbiBzaWduLlxyXG4gICAgLy9cclxuICAgIC8vIEluIHRoZSBhbGdvcml0aG1zIGJlbG93LCB3ZSBmcmVxdWVudGx5IHJlZHVjZSB0aGUgbmVnYXRpdmUgY2FzZSB0byB0aGVcclxuICAgIC8vIHBvc2l0aXZlIGNhc2UgYnkgbmVnYXRpbmcgdGhlIGlucHV0KHMpIGFuZCB0aGVuIHBvc3QtcHJvY2Vzc2luZyB0aGUgcmVzdWx0LlxyXG4gICAgLy8gTm90ZSB0aGF0IHdlIG11c3QgQUxXQVlTIGNoZWNrIHNwZWNpYWxseSB3aGV0aGVyIHRob3NlIHZhbHVlcyBhcmUgTUlOX1ZBTFVFXHJcbiAgICAvLyAoLTJeNjMpIGJlY2F1c2UgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUUgKHNpbmNlIDJeNjMgY2Fubm90IGJlIHJlcHJlc2VudGVkIGFzXHJcbiAgICAvLyBhIHBvc2l0aXZlIG51bWJlciwgaXQgb3ZlcmZsb3dzIGJhY2sgaW50byBhIG5lZ2F0aXZlKS4gIE5vdCBoYW5kbGluZyB0aGlzXHJcbiAgICAvLyBjYXNlIHdvdWxkIG9mdGVuIHJlc3VsdCBpbiBpbmZpbml0ZSByZWN1cnNpb24uXHJcbiAgICAvL1xyXG4gICAgLy8gQ29tbW9uIGNvbnN0YW50IHZhbHVlcyBaRVJPLCBPTkUsIE5FR19PTkUsIGV0Yy4gYXJlIGRlZmluZWQgYmVsb3cgdGhlIGZyb20qXHJcbiAgICAvLyBtZXRob2RzIG9uIHdoaWNoIHRoZXkgZGVwZW5kLlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gaW5kaWNhdG9yIHVzZWQgdG8gcmVsaWFibHkgZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIExvbmcgb3Igbm90LlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIExvbmcucHJvdG90eXBlLl9faXNMb25nX187XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvbmcucHJvdG90eXBlLCBcIl9faXNMb25nX19cIiwge1xyXG4gICAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzTG9uZyhvYmopIHtcclxuICAgICAgICByZXR1cm4gKG9iaiAmJiBvYmpbXCJfX2lzTG9uZ19fXCJdKSA9PT0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGlzIGEgTG9uZy5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZy5pc0xvbmcgPSBpc0xvbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCBpbnRlZ2VyIHZhbHVlcy5cclxuICAgICAqIEB0eXBlIHshT2JqZWN0fVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBJTlRfQ0FDSEUgPSB7fTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLlxyXG4gICAgICogQHR5cGUgeyFPYmplY3R9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFVJTlRfQ0FDSEUgPSB7fTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmcm9tSW50KHZhbHVlLCB1bnNpZ25lZCkge1xyXG4gICAgICAgIHZhciBvYmosIGNhY2hlZE9iaiwgY2FjaGU7XHJcbiAgICAgICAgaWYgKHVuc2lnbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID4+Pj0gMDtcclxuICAgICAgICAgICAgaWYgKGNhY2hlID0gKDAgPD0gdmFsdWUgJiYgdmFsdWUgPCAyNTYpKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZWRPYmogPSBVSU5UX0NBQ0hFW3ZhbHVlXTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWRPYmopXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE9iajtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmogPSBmcm9tQml0cyh2YWx1ZSwgKHZhbHVlIHwgMCkgPCAwID8gLTEgOiAwLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlKVxyXG4gICAgICAgICAgICAgICAgVUlOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICAgICAgaWYgKGNhY2hlID0gKC0xMjggPD0gdmFsdWUgJiYgdmFsdWUgPCAxMjgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZWRPYmogPSBJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkT2JqO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCB2YWx1ZSA8IDAgPyAtMSA6IDAsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlKVxyXG4gICAgICAgICAgICAgICAgSU5UX0NBQ0hFW3ZhbHVlXSA9IG9iajtcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIDMyIGJpdCBpbnRlZ2VyIHZhbHVlLlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIDMyIGJpdCBpbnRlZ2VyIGluIHF1ZXN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gYGZhbHNlYCBmb3Igc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tSW50ID0gZnJvbUludDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlLCB1bnNpZ25lZCkge1xyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSlcclxuICAgICAgICAgICAgcmV0dXJuIHVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgICAgIGlmICh1bnNpZ25lZCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVaRVJPO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPj0gVFdPX1BXUl82NF9EQkwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTUFYX1VOU0lHTkVEX1ZBTFVFO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8PSAtVFdPX1BXUl82M19EQkwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgKyAxID49IFRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1BWF9WQUxVRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMClcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21OdW1iZXIoLXZhbHVlLCB1bnNpZ25lZCkubmVnKCk7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKCh2YWx1ZSAlIFRXT19QV1JfMzJfREJMKSB8IDAsICh2YWx1ZSAvIFRXT19QV1JfMzJfREJMKSB8IDAsIHVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gdmFsdWUsIHByb3ZpZGVkIHRoYXQgaXQgaXMgYSBmaW5pdGUgbnVtYmVyLiBPdGhlcndpc2UsIHplcm8gaXMgcmV0dXJuZWQuXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgbnVtYmVyIGluIHF1ZXN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gYGZhbHNlYCBmb3Igc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tTnVtYmVyID0gZnJvbU51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dCaXRzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGlnaEJpdHNcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbUJpdHMobG93Qml0cywgaGlnaEJpdHMsIHVuc2lnbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMb25nKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIDY0IGJpdCBpbnRlZ2VyIHRoYXQgY29tZXMgYnkgY29uY2F0ZW5hdGluZyB0aGUgZ2l2ZW4gbG93IGFuZCBoaWdoIGJpdHMuIEVhY2ggaXNcclxuICAgICAqICBhc3N1bWVkIHRvIHVzZSAzMiBiaXRzLlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93Qml0cyBUaGUgbG93IDMyIGJpdHNcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0cyBUaGUgaGlnaCAzMiBiaXRzXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gYGZhbHNlYCBmb3Igc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tQml0cyA9IGZyb21CaXRzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmFzZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGV4cG9uZW50XHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBwb3dfZGJsID0gTWF0aC5wb3c7IC8vIFVzZWQgNCB0aW1lcyAoNCo4IHRvIDE1KzQpXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAgICAgKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSByYWRpeFxyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcoc3RyLCB1bnNpZ25lZCwgcmFkaXgpIHtcclxuICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2VtcHR5IHN0cmluZycpO1xyXG4gICAgICAgIGlmIChzdHIgPT09IFwiTmFOXCIgfHwgc3RyID09PSBcIkluZmluaXR5XCIgfHwgc3RyID09PSBcIitJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCItSW5maW5pdHlcIilcclxuICAgICAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICAgICAgaWYgKHR5cGVvZiB1bnNpZ25lZCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgLy8gRm9yIGdvb2cubWF0aC5sb25nIGNvbXBhdGliaWxpdHlcclxuICAgICAgICAgICAgcmFkaXggPSB1bnNpZ25lZCxcclxuICAgICAgICAgICAgdW5zaWduZWQgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1bnNpZ25lZCA9ICEhIHVuc2lnbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgICAgIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcclxuICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcigncmFkaXgnKTtcclxuXHJcbiAgICAgICAgdmFyIHA7XHJcbiAgICAgICAgaWYgKChwID0gc3RyLmluZGV4T2YoJy0nKSkgPiAwKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignaW50ZXJpb3IgaHlwaGVuJyk7XHJcbiAgICAgICAgZWxzZSBpZiAocCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbVN0cmluZyhzdHIuc3Vic3RyaW5nKDEpLCB1bnNpZ25lZCwgcmFkaXgpLm5lZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRG8gc2V2ZXJhbCAoOCkgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgICAgIHZhciByYWRpeFRvUG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIDgpKTtcclxuXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFpFUk87XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDgpIHtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSBNYXRoLm1pbig4LCBzdHIubGVuZ3RoIC0gaSksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoaSwgaSArIHNpemUpLCByYWRpeCk7XHJcbiAgICAgICAgICAgIGlmIChzaXplIDwgOCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCBzaXplKSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsKHBvd2VyKS5hZGQoZnJvbU51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChyYWRpeFRvUG93ZXIpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChmcm9tTnVtYmVyKHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LnVuc2lnbmVkID0gdW5zaWduZWQ7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlIHNwZWNpZmllZCByYWRpeC5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgTG9uZ1xyXG4gICAgICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIGBmYWxzZWAgZm9yIHNpZ25lZFxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBUaGUgcmFkaXggaW4gd2hpY2ggdGhlIHRleHQgaXMgd3JpdHRlbiAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICAgICAqL1xyXG4gICAgTG9uZy5mcm9tU3RyaW5nID0gZnJvbVN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfCF7bG93OiBudW1iZXIsIGhpZ2g6IG51bWJlciwgdW5zaWduZWQ6IGJvb2xlYW59fSB2YWxcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmcm9tVmFsdWUodmFsKSB7XHJcbiAgICAgICAgaWYgKHZhbCAvKiBpcyBjb21wYXRpYmxlICovIGluc3RhbmNlb2YgTG9uZylcclxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tTnVtYmVyKHZhbCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbVN0cmluZyh2YWwpO1xyXG4gICAgICAgIC8vIFRocm93cyBmb3Igbm9uLW9iamVjdHMsIGNvbnZlcnRzIG5vbi1pbnN0YW5jZW9mIExvbmc6XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKHZhbC5sb3csIHZhbC5oaWdoLCB2YWwudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhlIHNwZWNpZmllZCB2YWx1ZSB0byBhIExvbmcuXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsIFZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuZnJvbVZhbHVlID0gZnJvbVZhbHVlO1xyXG5cclxuICAgIC8vIE5PVEU6IHRoZSBjb21waWxlciBzaG91bGQgaW5saW5lIHRoZXNlIGNvbnN0YW50IHZhbHVlcyBiZWxvdyBhbmQgdGhlbiByZW1vdmUgdGhlc2UgdmFyaWFibGVzLCBzbyB0aGVyZSBzaG91bGQgYmVcclxuICAgIC8vIG5vIHJ1bnRpbWUgcGVuYWx0eSBmb3IgdGhlc2UuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfMTZfREJMID0gMSA8PCAxNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl8yNF9EQkwgPSAxIDw8IDI0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBUV09fUFdSXzMyX0RCTCA9IFRXT19QV1JfMTZfREJMICogVFdPX1BXUl8xNl9EQkw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIFRXT19QV1JfNjRfREJMID0gVFdPX1BXUl8zMl9EQkwgKiBUV09fUFdSXzMyX0RCTDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl82M19EQkwgPSBUV09fUFdSXzY0X0RCTCAvIDI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVFdPX1BXUl8yNCA9IGZyb21JbnQoVFdPX1BXUl8yNF9EQkwpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBaRVJPID0gZnJvbUludCgwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNpZ25lZCB6ZXJvLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLlpFUk8gPSBaRVJPO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBVWkVSTyA9IGZyb21JbnQoMCwgdHJ1ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnNpZ25lZCB6ZXJvLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLlVaRVJPID0gVVpFUk87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIE9ORSA9IGZyb21JbnQoMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaWduZWQgb25lLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLk9ORSA9IE9ORTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICB2YXIgVU9ORSA9IGZyb21JbnQoMSwgdHJ1ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnNpZ25lZCBvbmUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuVU9ORSA9IFVPTkU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIE5FR19PTkUgPSBmcm9tSW50KC0xKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNpZ25lZCBuZWdhdGl2ZSBvbmUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuTkVHX09ORSA9IE5FR19PTkU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIE1BWF9WQUxVRSA9IGZyb21CaXRzKDB4RkZGRkZGRkZ8MCwgMHg3RkZGRkZGRnwwLCBmYWxzZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXhpbXVtIHNpZ25lZCB2YWx1ZS5cclxuICAgICAqIEB0eXBlIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZy5NQVhfVkFMVUUgPSBNQVhfVkFMVUU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKiBAaW5uZXJcclxuICAgICAqL1xyXG4gICAgdmFyIE1BWF9VTlNJR05FRF9WQUxVRSA9IGZyb21CaXRzKDB4RkZGRkZGRkZ8MCwgMHhGRkZGRkZGRnwwLCB0cnVlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gdW5zaWduZWQgdmFsdWUuXHJcbiAgICAgKiBAdHlwZSB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmcuTUFYX1VOU0lHTkVEX1ZBTFVFID0gTUFYX1VOU0lHTkVEX1ZBTFVFO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBNSU5fVkFMVUUgPSBmcm9tQml0cygwLCAweDgwMDAwMDAwfDAsIGZhbHNlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1pbmltdW0gc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nLk1JTl9WQUxVRSA9IE1JTl9WQUxVRTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBhbGlhcyBMb25nLnByb3RvdHlwZVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBMb25nUHJvdG90eXBlID0gTG9uZy5wcm90b3R5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIDMyIGJpdCBpbnRlZ2VyLCBhc3N1bWluZyBpdCBpcyBhIDMyIGJpdCBpbnRlZ2VyLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS50b0ludCA9IGZ1bmN0aW9uIHRvSW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gdGhpcy5sb3cgPj4+IDAgOiB0aGlzLmxvdztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIHRoZSBuZWFyZXN0IGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdmFsdWUgKGRvdWJsZSwgNTMgYml0IG1hbnRpc3NhKS5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlcigpIHtcclxuICAgICAgICBpZiAodGhpcy51bnNpZ25lZClcclxuICAgICAgICAgICAgcmV0dXJuICgodGhpcy5oaWdoID4+PiAwKSAqIFRXT19QV1JfMzJfREJMKSArICh0aGlzLmxvdyA+Pj4gMCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCAqIFRXT19QV1JfMzJfREJMICsgKHRoaXMubG93ID4+PiAwKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIHN0cmluZyB3cml0dGVuIGluIHRoZSBzcGVjaWZpZWQgcmFkaXguXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFJhZGl4ICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGByYWRpeGAgaXMgb3V0IG9mIHJhbmdlXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhyYWRpeCkge1xyXG4gICAgICAgIHJhZGl4ID0gcmFkaXggfHwgMTA7XHJcbiAgICAgICAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KVxyXG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKCdyYWRpeCcpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gJzAnO1xyXG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkgeyAvLyBVbnNpZ25lZCBMb25ncyBhcmUgbmV2ZXIgbmVnYXRpdmVcclxuICAgICAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGFuZ2UgdGhlIExvbmcgdmFsdWUgYmVmb3JlIGl0IGNhbiBiZSBuZWdhdGVkLCBzbyB3ZSByZW1vdmVcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBib3R0b20tbW9zdCBkaWdpdCBpbiB0aGlzIGJhc2UgYW5kIHRoZW4gcmVjdXJzZSB0byBkbyB0aGUgcmVzdC5cclxuICAgICAgICAgICAgICAgIHZhciByYWRpeExvbmcgPSBmcm9tTnVtYmVyKHJhZGl4KSxcclxuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmRpdihyYWRpeExvbmcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbTEgPSBkaXYubXVsKHJhZGl4TG9uZykuc3ViKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpdi50b1N0cmluZyhyYWRpeCkgKyByZW0xLnRvSW50KCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiAnLScgKyB0aGlzLm5lZygpLnRvU3RyaW5nKHJhZGl4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERvIHNldmVyYWwgKDYpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgICAgICAvLyBtaW5pbWl6ZSB0aGUgY2FsbHMgdG8gdGhlIHZlcnkgZXhwZW5zaXZlIGVtdWxhdGVkIGRpdi5cclxuICAgICAgICB2YXIgcmFkaXhUb1Bvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCA2KSwgdGhpcy51bnNpZ25lZCksXHJcbiAgICAgICAgICAgIHJlbSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHZhciByZW1EaXYgPSByZW0uZGl2KHJhZGl4VG9Qb3dlciksXHJcbiAgICAgICAgICAgICAgICBpbnR2YWwgPSByZW0uc3ViKHJlbURpdi5tdWwocmFkaXhUb1Bvd2VyKSkudG9JbnQoKSA+Pj4gMCxcclxuICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGludHZhbC50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgICAgIHJlbSA9IHJlbURpdjtcclxuICAgICAgICAgICAgaWYgKHJlbS5pc1plcm8oKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGRpZ2l0cy5sZW5ndGggPCA2KVxyXG4gICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9ICcwJyArIGRpZ2l0cztcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICcnICsgZGlnaXRzICsgcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGhpZ2ggYml0c1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24gZ2V0SGlnaEJpdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuc2lnbmVkIGhpZ2ggYml0c1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRIaWdoQml0c1Vuc2lnbmVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2ggPj4+IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbG93IDMyIGJpdHMgYXMgYSBzaWduZWQgaW50ZWdlci5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFNpZ25lZCBsb3cgYml0c1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmdldExvd0JpdHMgPSBmdW5jdGlvbiBnZXRMb3dCaXRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvdztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgbG93IGJpdHNcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRMb3dCaXRzVW5zaWduZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG93ID4+PiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBiaXRzIG5lZWRlZCB0byByZXByZXNlbnQgdGhlIGFic29sdXRlIHZhbHVlIG9mIHRoaXMgTG9uZy5cclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ2V0TnVtQml0c0FicyA9IGZ1bmN0aW9uIGdldE51bUJpdHNBYnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSAvLyBVbnNpZ25lZCBMb25ncyBhcmUgbmV2ZXIgbmVnYXRpdmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXEoTUlOX1ZBTFVFKSA/IDY0IDogdGhpcy5uZWcoKS5nZXROdW1CaXRzQWJzKCk7XHJcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMuaGlnaCAhPSAwID8gdGhpcy5oaWdoIDogdGhpcy5sb3c7XHJcbiAgICAgICAgZm9yICh2YXIgYml0ID0gMzE7IGJpdCA+IDA7IGJpdC0tKVxyXG4gICAgICAgICAgICBpZiAoKHZhbCAmICgxIDw8IGJpdCkpICE9IDApXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICByZXR1cm4gdGhpcy5oaWdoICE9IDAgPyBiaXQgKyAzMyA6IGJpdCArIDE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHplcm8uXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlnaCA9PT0gMCAmJiB0aGlzLmxvdyA9PT0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBuZWdhdGl2ZS5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmlzTmVnYXRpdmUgPSBmdW5jdGlvbiBpc05lZ2F0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy51bnNpZ25lZCAmJiB0aGlzLmhpZ2ggPCAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIHBvc2l0aXZlLlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuaXNQb3NpdGl2ZSA9IGZ1bmN0aW9uIGlzUG9zaXRpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgfHwgdGhpcy5oaWdoID49IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgb2RkLlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubG93ICYgMSkgPT09IDE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZXZlbi5cclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubG93ICYgMSkgPT09IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLnVuc2lnbmVkICE9PSBvdGhlci51bnNpZ25lZCAmJiAodGhpcy5oaWdoID4+PiAzMSkgPT09IDEgJiYgKG90aGVyLmhpZ2ggPj4+IDMxKSA9PT0gMSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2VxdWFsc30uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmVxID0gTG9uZ1Byb3RvdHlwZS5lcXVhbHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubm90RXF1YWxzID0gZnVuY3Rpb24gbm90RXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmVxKC8qIHZhbGlkYXRlcyAqLyBvdGhlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5uZXEgPSBMb25nUHJvdG90eXBlLm5vdEVxdWFscztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbiA9IGZ1bmN0aW9uIGxlc3NUaGFuKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDwgMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2xlc3NUaGFufS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubHQgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGxlc3NUaGFuT3JFcXVhbChvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA8PSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubHRlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbiBncmVhdGVyVGhhbihvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbn0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmd0ID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBncmVhdGVyVGhhbk9yRXF1YWwob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPj0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFuT3JFcXVhbH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmd0ZSA9IExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lLCAxIGlmIHRoZSB0aGlzIGlzIGdyZWF0ZXIgYW5kIC0xXHJcbiAgICAgKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUob3RoZXIpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICBpZiAodGhpcy5lcShvdGhlcikpXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIHZhciB0aGlzTmVnID0gdGhpcy5pc05lZ2F0aXZlKCksXHJcbiAgICAgICAgICAgIG90aGVyTmVnID0gb3RoZXIuaXNOZWdhdGl2ZSgpO1xyXG4gICAgICAgIGlmICh0aGlzTmVnICYmICFvdGhlck5lZylcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGlmICghdGhpc05lZyAmJiBvdGhlck5lZylcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgc2lnbiBiaXRzIGFyZSB0aGUgc2FtZVxyXG4gICAgICAgIGlmICghdGhpcy51bnNpZ25lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViKG90aGVyKS5pc05lZ2F0aXZlKCkgPyAtMSA6IDE7XHJcbiAgICAgICAgLy8gQm90aCBhcmUgcG9zaXRpdmUgaWYgYXQgbGVhc3Qgb25lIGlzIHVuc2lnbmVkXHJcbiAgICAgICAgcmV0dXJuIChvdGhlci5oaWdoID4+PiAwKSA+ICh0aGlzLmhpZ2ggPj4+IDApIHx8IChvdGhlci5oaWdoID09PSB0aGlzLmhpZ2ggJiYgKG90aGVyLmxvdyA+Pj4gMCkgPiAodGhpcy5sb3cgPj4+IDApKSA/IC0xIDogMTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNjb21wYXJlfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyIGFuZCAtMVxyXG4gICAgICogIGlmIHRoZSBnaXZlbiBvbmUgaXMgZ3JlYXRlclxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmNvbXAgPSBMb25nUHJvdG90eXBlLmNvbXBhcmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOZWdhdGVzIHRoaXMgTG9uZydzIHZhbHVlLlxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbiBuZWdhdGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkICYmIHRoaXMuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub3QoKS5hZGQoT05FKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOZWdhdGVzIHRoaXMgTG9uZydzIHZhbHVlLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI25lZ2F0ZX0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gTmVnYXRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubmVnID0gTG9uZ1Byb3RvdHlwZS5uZWdhdGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBhZGRlbmQgQWRkZW5kXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFN1bVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChhZGRlbmQpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhhZGRlbmQpKVxyXG4gICAgICAgICAgICBhZGRlbmQgPSBmcm9tVmFsdWUoYWRkZW5kKTtcclxuXHJcbiAgICAgICAgLy8gRGl2aWRlIGVhY2ggbnVtYmVyIGludG8gNCBjaHVua3Mgb2YgMTYgYml0cywgYW5kIHRoZW4gc3VtIHRoZSBjaHVua3MuXHJcblxyXG4gICAgICAgIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xyXG4gICAgICAgIHZhciBhMzIgPSB0aGlzLmhpZ2ggJiAweEZGRkY7XHJcbiAgICAgICAgdmFyIGExNiA9IHRoaXMubG93ID4+PiAxNjtcclxuICAgICAgICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgICAgIHZhciBiNDggPSBhZGRlbmQuaGlnaCA+Pj4gMTY7XHJcbiAgICAgICAgdmFyIGIzMiA9IGFkZGVuZC5oaWdoICYgMHhGRkZGO1xyXG4gICAgICAgIHZhciBiMTYgPSBhZGRlbmQubG93ID4+PiAxNjtcclxuICAgICAgICB2YXIgYjAwID0gYWRkZW5kLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICAgICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICAgICAgYzAwICs9IGEwMCArIGIwMDtcclxuICAgICAgICBjMTYgKz0gYzAwID4+PiAxNjtcclxuICAgICAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMxNiArPSBhMTYgKyBiMTY7XHJcbiAgICAgICAgYzMyICs9IGMxNiA+Pj4gMTY7XHJcbiAgICAgICAgYzE2ICY9IDB4RkZGRjtcclxuICAgICAgICBjMzIgKz0gYTMyICsgYjMyO1xyXG4gICAgICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzQ4ICs9IGE0OCArIGI0ODtcclxuICAgICAgICBjNDggJj0gMHhGRkZGO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBzdWJ0cmFoZW5kIFN1YnRyYWhlbmRcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gRGlmZmVyZW5jZVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3Qoc3VidHJhaGVuZCkge1xyXG4gICAgICAgIGlmICghaXNMb25nKHN1YnRyYWhlbmQpKVxyXG4gICAgICAgICAgICBzdWJ0cmFoZW5kID0gZnJvbVZhbHVlKHN1YnRyYWhlbmQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZChzdWJ0cmFoZW5kLm5lZygpKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzdWJ0cmFjdH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gc3VidHJhaGVuZCBTdWJ0cmFoZW5kXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IERpZmZlcmVuY2VcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zdWIgPSBMb25nUHJvdG90eXBlLnN1YnRyYWN0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcHJvZHVjdCBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbiBtdWx0aXBseShtdWx0aXBsaWVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBaRVJPO1xyXG4gICAgICAgIGlmICghaXNMb25nKG11bHRpcGxpZXIpKVxyXG4gICAgICAgICAgICBtdWx0aXBsaWVyID0gZnJvbVZhbHVlKG11bHRpcGxpZXIpO1xyXG4gICAgICAgIGlmIChtdWx0aXBsaWVyLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gWkVSTztcclxuICAgICAgICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICByZXR1cm4gbXVsdGlwbGllci5pc09kZCgpID8gTUlOX1ZBTFVFIDogWkVSTztcclxuICAgICAgICBpZiAobXVsdGlwbGllci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc09kZCgpID8gTUlOX1ZBTFVFIDogWkVSTztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLm11bChtdWx0aXBsaWVyLm5lZygpKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIpLm5lZygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobXVsdGlwbGllci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11bChtdWx0aXBsaWVyLm5lZygpKS5uZWcoKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYm90aCBsb25ncyBhcmUgc21hbGwsIHVzZSBmbG9hdCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIGlmICh0aGlzLmx0KFRXT19QV1JfMjQpICYmIG11bHRpcGxpZXIubHQoVFdPX1BXUl8yNCkpXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tTnVtYmVyKHRoaXMudG9OdW1iZXIoKSAqIG11bHRpcGxpZXIudG9OdW1iZXIoKSwgdGhpcy51bnNpZ25lZCk7XHJcblxyXG4gICAgICAgIC8vIERpdmlkZSBlYWNoIGxvbmcgaW50byA0IGNodW5rcyBvZiAxNiBiaXRzLCBhbmQgdGhlbiBhZGQgdXAgNHg0IHByb2R1Y3RzLlxyXG4gICAgICAgIC8vIFdlIGNhbiBza2lwIHByb2R1Y3RzIHRoYXQgd291bGQgb3ZlcmZsb3cuXHJcblxyXG4gICAgICAgIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xyXG4gICAgICAgIHZhciBhMzIgPSB0aGlzLmhpZ2ggJiAweEZGRkY7XHJcbiAgICAgICAgdmFyIGExNiA9IHRoaXMubG93ID4+PiAxNjtcclxuICAgICAgICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgICAgIHZhciBiNDggPSBtdWx0aXBsaWVyLmhpZ2ggPj4+IDE2O1xyXG4gICAgICAgIHZhciBiMzIgPSBtdWx0aXBsaWVyLmhpZ2ggJiAweEZGRkY7XHJcbiAgICAgICAgdmFyIGIxNiA9IG11bHRpcGxpZXIubG93ID4+PiAxNjtcclxuICAgICAgICB2YXIgYjAwID0gbXVsdGlwbGllci5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgICAgIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xyXG4gICAgICAgIGMwMCArPSBhMDAgKiBiMDA7XHJcbiAgICAgICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICAgICAgYzAwICY9IDB4RkZGRjtcclxuICAgICAgICBjMTYgKz0gYTE2ICogYjAwO1xyXG4gICAgICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzE2ICs9IGEwMCAqIGIxNjtcclxuICAgICAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgICAgICBjMTYgJj0gMHhGRkZGO1xyXG4gICAgICAgIGMzMiArPSBhMzIgKiBiMDA7XHJcbiAgICAgICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICAgICAgYzMyICY9IDB4RkZGRjtcclxuICAgICAgICBjMzIgKz0gYTE2ICogYjE2O1xyXG4gICAgICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICAgICAgYzMyICs9IGEwMCAqIGIzMjtcclxuICAgICAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgICAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgICAgIGM0OCArPSBhNDggKiBiMDAgKyBhMzIgKiBiMTYgKyBhMTYgKiBiMzIgKyBhMDAgKiBiNDg7XHJcbiAgICAgICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtdWx0aXBseX0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gbXVsdGlwbGllciBNdWx0aXBsaWVyXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFByb2R1Y3RcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5tdWwgPSBMb25nUHJvdG90eXBlLm11bHRpcGx5O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGUgcmVzdWx0IGlzIHNpZ25lZCBpZiB0aGlzIExvbmcgaXMgc2lnbmVkIG9yXHJcbiAgICAgKiAgdW5zaWduZWQgaWYgdGhpcyBMb25nIGlzIHVuc2lnbmVkLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5kaXZpZGUgPSBmdW5jdGlvbiBkaXZpZGUoZGl2aXNvcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKGRpdmlzb3IpKVxyXG4gICAgICAgICAgICBkaXZpc29yID0gZnJvbVZhbHVlKGRpdmlzb3IpO1xyXG4gICAgICAgIGlmIChkaXZpc29yLmlzWmVybygpKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZGl2aXNpb24gYnkgemVybycpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IFVaRVJPIDogWkVSTztcclxuICAgICAgICB2YXIgYXBwcm94LCByZW0sIHJlcztcclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQpIHtcclxuICAgICAgICAgICAgLy8gVGhpcyBzZWN0aW9uIGlzIG9ubHkgcmVsZXZhbnQgZm9yIHNpZ25lZCBsb25ncyBhbmQgaXMgZGVyaXZlZCBmcm9tIHRoZVxyXG4gICAgICAgICAgICAvLyBjbG9zdXJlIGxpYnJhcnkgYXMgYSB3aG9sZS5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpdmlzb3IuZXEoT05FKSB8fCBkaXZpc29yLmVxKE5FR19PTkUpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNSU5fVkFMVUU7ICAvLyByZWNhbGwgdGhhdCAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPTkU7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBoYXZlIHxvdGhlcnwgPj0gMiwgc28gfHRoaXMvb3RoZXJ8IDwgfE1JTl9WQUxVRXwuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbGZUaGlzID0gdGhpcy5zaHIoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwcm94ID0gaGFsZlRoaXMuZGl2KGRpdmlzb3IpLnNobCgxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwcm94LmVxKFpFUk8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXZpc29yLmlzTmVnYXRpdmUoKSA/IE9ORSA6IE5FR19PTkU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtID0gdGhpcy5zdWIoZGl2aXNvci5tdWwoYXBwcm94KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IGFwcHJveC5hZGQocmVtLmRpdihkaXZpc29yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpdmlzb3IuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXZpc29yLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5kaXYoZGl2aXNvci5uZWcoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5kaXYoZGl2aXNvcikubmVnKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXYoZGl2aXNvci5uZWcoKSkubmVnKCk7XHJcbiAgICAgICAgICAgIHJlcyA9IFpFUk87XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlIGFsZ29yaXRobSBiZWxvdyBoYXMgbm90IGJlZW4gbWFkZSBmb3IgdW5zaWduZWQgbG9uZ3MuIEl0J3MgdGhlcmVmb3JlXHJcbiAgICAgICAgICAgIC8vIHJlcXVpcmVkIHRvIHRha2Ugc3BlY2lhbCBjYXJlIG9mIHRoZSBNU0IgcHJpb3IgdG8gcnVubmluZyBpdC5cclxuICAgICAgICAgICAgaWYgKCFkaXZpc29yLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICAgICAgZGl2aXNvciA9IGRpdmlzb3IudG9VbnNpZ25lZCgpO1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5ndCh0aGlzKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBVWkVSTztcclxuICAgICAgICAgICAgaWYgKGRpdmlzb3IuZ3QodGhpcy5zaHJ1KDEpKSkgLy8gMTUgPj4+IDEgPSA3IDsgd2l0aCBkaXZpc29yID0gOCA7IHRydWVcclxuICAgICAgICAgICAgICAgIHJldHVybiBVT05FO1xyXG4gICAgICAgICAgICByZXMgPSBVWkVSTztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlcGVhdCB0aGUgZm9sbG93aW5nIHVudGlsIHRoZSByZW1haW5kZXIgaXMgbGVzcyB0aGFuIG90aGVyOiAgZmluZCBhXHJcbiAgICAgICAgLy8gZmxvYXRpbmctcG9pbnQgdGhhdCBhcHByb3hpbWF0ZXMgcmVtYWluZGVyIC8gb3RoZXIgKmZyb20gYmVsb3cqLCBhZGQgdGhpc1xyXG4gICAgICAgIC8vIGludG8gdGhlIHJlc3VsdCwgYW5kIHN1YnRyYWN0IGl0IGZyb20gdGhlIHJlbWFpbmRlci4gIEl0IGlzIGNyaXRpY2FsIHRoYXRcclxuICAgICAgICAvLyB0aGUgYXBwcm94aW1hdGUgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSByZWFsIHZhbHVlIHNvIHRoYXQgdGhlXHJcbiAgICAgICAgLy8gcmVtYWluZGVyIG5ldmVyIGJlY29tZXMgbmVnYXRpdmUuXHJcbiAgICAgICAgcmVtID0gdGhpcztcclxuICAgICAgICB3aGlsZSAocmVtLmd0ZShkaXZpc29yKSkge1xyXG4gICAgICAgICAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXHJcbiAgICAgICAgICAgIC8vIHNtYWxsZXIgdGhhbiB0aGUgYWN0dWFsIHZhbHVlLlxyXG4gICAgICAgICAgICBhcHByb3ggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHJlbS50b051bWJlcigpIC8gZGl2aXNvci50b051bWJlcigpKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXZSB3aWxsIHR3ZWFrIHRoZSBhcHByb3hpbWF0ZSByZXN1bHQgYnkgY2hhbmdpbmcgaXQgaW4gdGhlIDQ4LXRoIGRpZ2l0IG9yXHJcbiAgICAgICAgICAgIC8vIHRoZSBzbWFsbGVzdCBub24tZnJhY3Rpb25hbCBkaWdpdCwgd2hpY2hldmVyIGlzIGxhcmdlci5cclxuICAgICAgICAgICAgdmFyIGxvZzIgPSBNYXRoLmNlaWwoTWF0aC5sb2coYXBwcm94KSAvIE1hdGguTE4yKSxcclxuICAgICAgICAgICAgICAgIGRlbHRhID0gKGxvZzIgPD0gNDgpID8gMSA6IHBvd19kYmwoMiwgbG9nMiAtIDQ4KSxcclxuXHJcbiAgICAgICAgICAgIC8vIERlY3JlYXNlIHRoZSBhcHByb3hpbWF0aW9uIHVudGlsIGl0IGlzIHNtYWxsZXIgdGhhbiB0aGUgcmVtYWluZGVyLiAgTm90ZVxyXG4gICAgICAgICAgICAvLyB0aGF0IGlmIGl0IGlzIHRvbyBsYXJnZSwgdGhlIHByb2R1Y3Qgb3ZlcmZsb3dzIGFuZCBpcyBuZWdhdGl2ZS5cclxuICAgICAgICAgICAgICAgIGFwcHJveFJlcyA9IGZyb21OdW1iZXIoYXBwcm94KSxcclxuICAgICAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWwoZGl2aXNvcik7XHJcbiAgICAgICAgICAgIHdoaWxlIChhcHByb3hSZW0uaXNOZWdhdGl2ZSgpIHx8IGFwcHJveFJlbS5ndChyZW0pKSB7XHJcbiAgICAgICAgICAgICAgICBhcHByb3ggLT0gZGVsdGE7XHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZW0gPSBhcHByb3hSZXMubXVsKGRpdmlzb3IpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXZSBrbm93IHRoZSBhbnN3ZXIgY2FuJ3QgYmUgemVyby4uLiBhbmQgYWN0dWFsbHksIHplcm8gd291bGQgY2F1c2VcclxuICAgICAgICAgICAgLy8gaW5maW5pdGUgcmVjdXJzaW9uIHNpbmNlIHdlIHdvdWxkIG1ha2Ugbm8gcHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgICAgICBhcHByb3hSZXMgPSBPTkU7XHJcblxyXG4gICAgICAgICAgICByZXMgPSByZXMuYWRkKGFwcHJveFJlcyk7XHJcbiAgICAgICAgICAgIHJlbSA9IHJlbS5zdWIoYXBwcm94UmVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyBkaXZpZGVkIGJ5IHRoZSBzcGVjaWZpZWQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZGl2aWRlfS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5kaXYgPSBMb25nUHJvdG90eXBlLmRpdmlkZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gUmVtYWluZGVyXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUubW9kdWxvID0gZnVuY3Rpb24gbW9kdWxvKGRpdmlzb3IpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhkaXZpc29yKSlcclxuICAgICAgICAgICAgZGl2aXNvciA9IGZyb21WYWx1ZShkaXZpc29yKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWIodGhpcy5kaXYoZGl2aXNvcikubXVsKGRpdmlzb3IpKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5tb2QgPSBMb25nUHJvdG90eXBlLm1vZHVsbztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGJpdHdpc2UgTk9UIG9mIHRoaXMgTG9uZy5cclxuICAgICAqIEByZXR1cm5zIHshTG9uZ31cclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5ub3QgPSBmdW5jdGlvbiBub3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKH50aGlzLmxvdywgfnRoaXMuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYml0d2lzZSBBTkQgb2YgdGhpcyBMb25nIGFuZCB0aGUgc3BlY2lmaWVkLlxyXG4gICAgICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93ICYgb3RoZXIubG93LCB0aGlzLmhpZ2ggJiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBiaXR3aXNlIE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3Iob3RoZXIpIHtcclxuICAgICAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgfCBvdGhlci5sb3csIHRoaXMuaGlnaCB8IG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGJpdHdpc2UgWE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIGdpdmVuIG9uZS5cclxuICAgICAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfVxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvcihvdGhlcikge1xyXG4gICAgICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyBeIG90aGVyLmxvdywgdGhpcy5oaWdoIF4gb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHNoaWZ0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnNoaWZ0TGVmdCA9IGZ1bmN0aW9uIHNoaWZ0TGVmdChudW1CaXRzKSB7XHJcbiAgICAgICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICAgICAgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcclxuICAgICAgICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBlbHNlIGlmIChudW1CaXRzIDwgMzIpXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyA8PCBudW1CaXRzLCAodGhpcy5oaWdoIDw8IG51bUJpdHMpIHwgKHRoaXMubG93ID4+PiAoMzIgLSBudW1CaXRzKSksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKDAsIHRoaXMubG93IDw8IChudW1CaXRzIC0gMzIpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0TGVmdH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnNobCA9IExvbmdQcm90b3R5cGUuc2hpZnRMZWZ0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGFyaXRobWV0aWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICAgICAqL1xyXG4gICAgTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0ID0gZnVuY3Rpb24gc2hpZnRSaWdodChudW1CaXRzKSB7XHJcbiAgICAgICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICAgICAgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcclxuICAgICAgICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBlbHNlIGlmIChudW1CaXRzIDwgMzIpXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQml0cygodGhpcy5sb3cgPj4+IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA8PCAoMzIgLSBudW1CaXRzKSksIHRoaXMuaGlnaCA+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2ggPj4gKG51bUJpdHMgLSAzMiksIHRoaXMuaGlnaCA+PSAwID8gMCA6IC0xLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgYXJpdGhtZXRpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0fS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc2hyID0gTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICAgICAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkID0gZnVuY3Rpb24gc2hpZnRSaWdodFVuc2lnbmVkKG51bUJpdHMpIHtcclxuICAgICAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgICAgIG51bUJpdHMgJj0gNjM7XHJcbiAgICAgICAgaWYgKG51bUJpdHMgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgaGlnaCA9IHRoaXMuaGlnaDtcclxuICAgICAgICAgICAgaWYgKG51bUJpdHMgPCAzMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvdyA9IHRoaXMubG93O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKChsb3cgPj4+IG51bUJpdHMpIHwgKGhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCBoaWdoID4+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1CaXRzID09PSAzMilcclxuICAgICAgICAgICAgICAgIHJldHVybiBmcm9tQml0cyhoaWdoLCAwLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKGhpZ2ggPj4+IChudW1CaXRzIC0gMzIpLCAwLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3NoaWZ0UmlnaHRVbnNpZ25lZH0uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnNocnUgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBzaWduZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7IUxvbmd9IFNpZ25lZCBsb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9TaWduZWQgPSBmdW5jdGlvbiB0b1NpZ25lZCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdywgdGhpcy5oaWdoLCBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdGhpcyBMb25nIHRvIHVuc2lnbmVkLlxyXG4gICAgICogQHJldHVybnMgeyFMb25nfSBVbnNpZ25lZCBsb25nXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9VbnNpZ25lZCA9IGZ1bmN0aW9uIHRvVW5zaWduZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdywgdGhpcy5oaWdoLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsZSBXaGV0aGVyIGxpdHRsZSBvciBiaWcgZW5kaWFuLCBkZWZhdWx0cyB0byBiaWcgZW5kaWFuXHJcbiAgICAgKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBCeXRlIHJlcHJlc2VudGF0aW9uXHJcbiAgICAgKi9cclxuICAgIExvbmdQcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uKGxlKSB7XHJcbiAgICAgICAgcmV0dXJuIGxlID8gdGhpcy50b0J5dGVzTEUoKSA6IHRoaXMudG9CeXRlc0JFKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGxpdHRsZSBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IExpdHRsZSBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvblxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvQnl0ZXNMRSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoaSA9IHRoaXMuaGlnaCxcclxuICAgICAgICAgICAgbG8gPSB0aGlzLmxvdztcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgbG8gICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChsbyA+Pj4gIDgpICYgMHhmZixcclxuICAgICAgICAgICAgKGxvID4+PiAxNikgJiAweGZmLFxyXG4gICAgICAgICAgICAobG8gPj4+IDI0KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgICBoaSAgICAgICAgICYgMHhmZixcclxuICAgICAgICAgICAgKGhpID4+PiAgOCkgJiAweGZmLFxyXG4gICAgICAgICAgICAoaGkgPj4+IDE2KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChoaSA+Pj4gMjQpICYgMHhmZlxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICAgICAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvblxyXG4gICAgICovXHJcbiAgICBMb25nUHJvdG90eXBlLnRvQnl0ZXNCRSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoaSA9IHRoaXMuaGlnaCxcclxuICAgICAgICAgICAgbG8gPSB0aGlzLmxvdztcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAoaGkgPj4+IDI0KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChoaSA+Pj4gMTYpICYgMHhmZixcclxuICAgICAgICAgICAgKGhpID4+PiAgOCkgJiAweGZmLFxyXG4gICAgICAgICAgICAgaGkgICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgICAgIChsbyA+Pj4gMjQpICYgMHhmZixcclxuICAgICAgICAgICAgKGxvID4+PiAxNikgJiAweGZmLFxyXG4gICAgICAgICAgICAobG8gPj4+ICA4KSAmIDB4ZmYsXHJcbiAgICAgICAgICAgICBsbyAgICAgICAgICYgMHhmZlxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIExvbmc7XHJcbn0pO1xyXG4iLCJ2YXIgY2lwaGVycyA9IHJlcXVpcmUoJy4vZW5jcnlwdGVyJylcbnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzL2xpc3QuanNvbicpXG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZXMpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsImV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhibG9jaylcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIGRhdGEgPSB4b3IoYmxvY2ssIHNlbGYuX3ByZXYpXG5cbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soZGF0YSlcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBwYWQgPSBzZWxmLl9wcmV2XG5cbiAgc2VsZi5fcHJldiA9IGJsb2NrXG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxuXG4gIHJldHVybiB4b3Iob3V0LCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cblxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fcHJldi5zbGljZSgxKSxcbiAgICBCdWZmZXIuZnJvbShbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXG4gIF0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmZyb20oW3ZhbHVlXSldKVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuVHJhbnNmb3JtXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgWkVST0VTID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuXG5mdW5jdGlvbiB0b0FycmF5IChidWYpIHtcbiAgcmV0dXJuIFtcbiAgICBidWYucmVhZFVJbnQzMkJFKDApLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoNCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDEyKVxuICBdXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheSAob3V0KSB7XG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSA+Pj4gMCwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdID4+PiAwLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0gPj4+IDAsIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSA+Pj4gMCwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gR0hBU0ggKGtleSkge1xuICB0aGlzLmggPSBrZXlcbiAgdGhpcy5zdGF0ZSA9IEJ1ZmZlci5hbGxvYygxNiwgMClcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG4vLyBmcm9tIGh0dHA6Ly9iaXR3aXNlc2hpZnRsZWZ0LmdpdGh1Yi5pby9zamNsL2RvYy9zeW1ib2xzL3NyYy9jb3JlX2djbS5qcy5odG1sXG4vLyBieSBKdWhvIFbDpGjDpC1IZXJ0dHVhXG5HSEFTSC5wcm90b3R5cGUuZ2hhc2ggPSBmdW5jdGlvbiAoYmxvY2spIHtcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgYmxvY2subGVuZ3RoKSB7XG4gICAgdGhpcy5zdGF0ZVtpXSBePSBibG9ja1tpXVxuICB9XG4gIHRoaXMuX211bHRpcGx5KClcbn1cblxuR0hBU0gucHJvdG90eXBlLl9tdWx0aXBseSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFZpID0gdG9BcnJheSh0aGlzLmgpXG4gIHZhciBaaSA9IFswLCAwLCAwLCAwXVxuICB2YXIgaiwgeGksIGxzYlZpXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IDEyOCkge1xuICAgIHhpID0gKHRoaXMuc3RhdGVbfn4oaSAvIDgpXSAmICgxIDw8ICg3IC0gKGkgJSA4KSkpKSAhPT0gMFxuICAgIGlmICh4aSkge1xuICAgICAgLy8gWl9pKzEgPSBaX2kgXiBWX2lcbiAgICAgIFppWzBdIF49IFZpWzBdXG4gICAgICBaaVsxXSBePSBWaVsxXVxuICAgICAgWmlbMl0gXj0gVmlbMl1cbiAgICAgIFppWzNdIF49IFZpWzNdXG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpXG4gICAgbHNiVmkgPSAoVmlbM10gJiAxKSAhPT0gMFxuXG4gICAgLy8gVl9pKzEgPSBWX2kgPj4gMVxuICAgIGZvciAoaiA9IDM7IGogPiAwOyBqLS0pIHtcbiAgICAgIFZpW2pdID0gKFZpW2pdID4+PiAxKSB8ICgoVmlbaiAtIDFdICYgMSkgPDwgMzEpXG4gICAgfVxuICAgIFZpWzBdID0gVmlbMF0gPj4+IDFcblxuICAgIC8vIElmIExTQihWX2kpIGlzIDEsIFZfaSsxID0gKFZfaSA+PiAxKSBeIFJcbiAgICBpZiAobHNiVmkpIHtcbiAgICAgIFZpWzBdID0gVmlbMF0gXiAoMHhlMSA8PCAyNClcbiAgICB9XG4gIH1cbiAgdGhpcy5zdGF0ZSA9IGZyb21BcnJheShaaSlcbn1cblxuR0hBU0gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGJ1Zl0pXG4gIHZhciBjaHVua1xuICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICBjaHVuayA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgdGhpcy5naGFzaChjaHVuaylcbiAgfVxufVxuXG5HSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICB0aGlzLmdoYXNoKEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIFpFUk9FU10sIDE2KSlcbiAgfVxuXG4gIHRoaXMuZ2hhc2goZnJvbUFycmF5KFswLCBhYmwsIDAsIGJsXSkpXG4gIHJldHVybiB0aGlzLnN0YXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gR0hBU0hcbiIsInZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1PREVTID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gRGVjaXBoZXIgKG1vZGUsIGtleSwgaXYpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2xhc3QgPSB2b2lkIDBcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhEZWNpcGhlciwgVHJhbnNmb3JtKVxuXG5EZWNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KHRoaXMuX2F1dG9wYWRkaW5nKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgcmV0dXJuIHVucGFkKHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuaykpXG4gIH0gZWxzZSBpZiAoY2h1bmspIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhdXRvUGFkZGluZykge1xuICB2YXIgb3V0XG4gIGlmIChhdXRvUGFkZGluZykge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSByZXR1cm4gdGhpcy5jYWNoZVxufVxuXG5mdW5jdGlvbiB1bnBhZCAobGFzdCkge1xuICB2YXIgcGFkZGVkID0gbGFzdFsxNV1cbiAgaWYgKHBhZGRlZCA8IDEgfHwgcGFkZGVkID4gMTYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICB9XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IHBhZGRlZCkge1xuICAgIGlmIChsYXN0WyhpICsgKDE2IC0gcGFkZGVkKSldICE9PSBwYWRkZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gICAgfVxuICB9XG4gIGlmIChwYWRkZWQgPT09IDE2KSByZXR1cm5cblxuICByZXR1cm4gbGFzdC5zbGljZSgwLCAxNiAtIHBhZGRlZClcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIGlmIChjb25maWcubW9kZSAhPT0gJ0dDTScgJiYgaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaXYgbGVuZ3RoICcgKyBpdi5sZW5ndGgpXG5cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQpXG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcblxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSAnYXV0aCcpIHtcbiAgICByZXR1cm4gbmV3IEF1dGhDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2LCB0cnVlKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBEZWNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdilcbiAgcmV0dXJuIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCIvLyBGSVhNRTogS2luZCBvZiBhIHdlaXJkIHdheSB0byB0aHJvdyBleGNlcHRpb25zLCBjb25zaWRlciByZW1vdmluZ1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJy4vYmlnaScpXG5cbi8qKlxuICogVHVybnMgYSBieXRlIGFycmF5IGludG8gYSBiaWcgaW50ZWdlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgaW50ZXJwcmV0IGEgYnl0ZSBhcnJheSBhcyBhIGJpZyBpbnRlZ2VyIGluIGJpZ1xuICogZW5kaWFuIG5vdGF0aW9uLlxuICovXG5CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZCA9IGZ1bmN0aW9uKGJ5dGVBcnJheSkge1xuICAvLyBCaWdJbnRlZ2VyIGV4cGVjdHMgYSBERVIgaW50ZWdlciBjb25mb3JtYW50IGJ5dGUgYXJyYXlcbiAgaWYgKGJ5dGVBcnJheVswXSAmIDB4ODApIHtcbiAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoWzBdLmNvbmNhdChieXRlQXJyYXkpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGJ5dGVBcnJheSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYnl0ZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgYmlnIGludGVnZXIuXG4gKlxuICogVGhpcyByZXR1cm5zIHRoZSBhYnNvbHV0ZSBvZiB0aGUgY29udGFpbmVkIHZhbHVlIGluIGJpZyBlbmRpYW5cbiAqIGZvcm0uIEEgdmFsdWUgb2YgemVybyByZXN1bHRzIGluIGFuIGVtcHR5IGFycmF5LlxuICovXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J5dGVBcnJheVVuc2lnbmVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBieXRlQXJyYXkgPSB0aGlzLnRvQnl0ZUFycmF5KClcbiAgcmV0dXJuIGJ5dGVBcnJheVswXSA9PT0gMCA/IGJ5dGVBcnJheS5zbGljZSgxKSA6IGJ5dGVBcnJheVxufVxuXG5CaWdJbnRlZ2VyLmZyb21ERVJJbnRlZ2VyID0gZnVuY3Rpb24oYnl0ZUFycmF5KSB7XG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihieXRlQXJyYXkpXG59XG5cbi8qXG4gKiBDb252ZXJ0cyBCaWdJbnRlZ2VyIHRvIGEgREVSIGludGVnZXIgcmVwcmVzZW50YXRpb24uXG4gKlxuICogVGhlIGZvcm1hdCBmb3IgdGhpcyB2YWx1ZSB1c2VzIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdCBhcyBhIHNpZ25cbiAqIGJpdC4gIElmIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdCBpcyBhbHJlYWR5IHNldCBhbmQgdGhlIGludGVnZXIgaXNcbiAqIHBvc2l0aXZlLCBhIDB4MDAgaXMgcHJlcGVuZGVkLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgMCA9PiAgICAgMHgwMFxuICogICAgICAxID0+ICAgICAweDAxXG4gKiAgICAgLTEgPT4gICAgIDB4ZmZcbiAqICAgIDEyNyA9PiAgICAgMHg3ZlxuICogICAtMTI3ID0+ICAgICAweDgxXG4gKiAgICAxMjggPT4gICAweDAwODBcbiAqICAgLTEyOCA9PiAgICAgMHg4MFxuICogICAgMjU1ID0+ICAgMHgwMGZmXG4gKiAgIC0yNTUgPT4gICAweGZmMDFcbiAqICAxNjMwMCA9PiAgIDB4M2ZhY1xuICogLTE2MzAwID0+ICAgMHhjMDU0XG4gKiAgNjIzMDAgPT4gMHgwMGYzNWNcbiAqIC02MjMwMCA9PiAweGZmMGNhNFxuKi9cbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvREVSSW50ZWdlciA9IEJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5XG5cbkJpZ0ludGVnZXIuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAvLyBCaWdJbnRlZ2VyIGV4cGVjdHMgYSBERVIgaW50ZWdlciBjb25mb3JtYW50IGJ5dGUgYXJyYXlcbiAgaWYgKGJ1ZmZlclswXSAmIDB4ODApIHtcbiAgICB2YXIgYnl0ZUFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnVmZmVyKVxuXG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKFswXS5jb25jYXQoYnl0ZUFycmF5KSlcbiAgfVxuXG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihidWZmZXIpXG59XG5cbkJpZ0ludGVnZXIuZnJvbUhleCA9IGZ1bmN0aW9uKGhleCkge1xuICBpZiAoaGV4ID09PSAnJykgcmV0dXJuIEJpZ0ludGVnZXIuWkVST1xuXG4gIGFzc2VydC5lcXVhbChoZXgsIGhleC5tYXRjaCgvXltBLUZhLWYwLTldKy8pLCAnSW52YWxpZCBoZXggc3RyaW5nJylcbiAgYXNzZXJ0LmVxdWFsKGhleC5sZW5ndGggJSAyLCAwLCAnSW5jb21wbGV0ZSBoZXgnKVxuICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoaGV4LCAxNilcbn1cblxuQmlnSW50ZWdlci5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbihzaXplKSB7XG4gIHZhciBieXRlQXJyYXkgPSB0aGlzLnRvQnl0ZUFycmF5VW5zaWduZWQoKVxuICB2YXIgemVyb3MgPSBbXVxuXG4gIHZhciBwYWRkaW5nID0gc2l6ZSAtIGJ5dGVBcnJheS5sZW5ndGhcbiAgd2hpbGUgKHplcm9zLmxlbmd0aCA8IHBhZGRpbmcpIHplcm9zLnB1c2goMClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcih6ZXJvcy5jb25jYXQoYnl0ZUFycmF5KSlcbn1cblxuQmlnSW50ZWdlci5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbihzaXplKSB7XG4gIHJldHVybiB0aGlzLnRvQnVmZmVyKHNpemUpLnRvU3RyaW5nKCdoZXgnKVxufVxuIiwidmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcblxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzLmpzb24nKVxudmFyIEN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpXG5cbmZ1bmN0aW9uIGdldEN1cnZlQnlOYW1lIChuYW1lKSB7XG4gIHZhciBjdXJ2ZSA9IGN1cnZlc1tuYW1lXVxuICBpZiAoIWN1cnZlKSByZXR1cm4gbnVsbFxuXG4gIHZhciBwID0gbmV3IEJpZ0ludGVnZXIoY3VydmUucCwgMTYpXG4gIHZhciBhID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuYSwgMTYpXG4gIHZhciBiID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuYiwgMTYpXG4gIHZhciBuID0gbmV3IEJpZ0ludGVnZXIoY3VydmUubiwgMTYpXG4gIHZhciBoID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuaCwgMTYpXG4gIHZhciBHeCA9IG5ldyBCaWdJbnRlZ2VyKGN1cnZlLkd4LCAxNilcbiAgdmFyIEd5ID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuR3ksIDE2KVxuXG4gIHJldHVybiBuZXcgQ3VydmUocCwgYSwgYiwgR3gsIEd5LCBuLCBoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEN1cnZlQnlOYW1lXG4iLCIvKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0wLCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIFBVQiAxODAtMVxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBkZXJpdmVkIGZyb20gc2hhMS5qcyBvZiB0aGUgc2FtZSByZXBvc2l0b3J5LlxuICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBTSEEtMCBhbmQgU0hBLTEgaXMganVzdCBhIGJpdHdpc2Ugcm90YXRlIGxlZnRcbiAqIG9wZXJhdGlvbiB3YXMgYWRkZWQuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhLCBIYXNoKVxuXG5TaGEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7ICsraikge1xuICAgIHZhciBzID0gfn4oaiAvIDIwKVxuICAgIHZhciB0ID0gKHJvdGw1KGEpICsgZnQocywgYiwgYywgZCkgKyBlICsgV1tqXSArIEtbc10pIHwgMFxuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb3RsMzAoYilcbiAgICBiID0gYVxuICAgIGEgPSB0XG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhXG4iLCIvKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIFBVQiAxODAtMVxuICogVmVyc2lvbiAyLjFhIENvcHlyaWdodCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDAyLlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgZGV0YWlscy5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhMSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMSwgSGFzaClcblxuU2hhMS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsMSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDEpIHwgKG51bSA+Pj4gMzEpXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSByb3RsMShXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdKVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7ICsraikge1xuICAgIHZhciBzID0gfn4oaiAvIDIwKVxuICAgIHZhciB0ID0gKHJvdGw1KGEpICsgZnQocywgYiwgYywgZCkgKyBlICsgV1tqXSArIEtbc10pIHwgMFxuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb3RsMzAoYilcbiAgICBiID0gYVxuICAgIGEgPSB0XG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYTEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTFcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyMjQgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyMjQsIFNoYTI1NilcblxuU2hhMjI0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHhjMTA1OWVkOFxuICB0aGlzLl9iID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jID0gMHgzMDcwZGQxN1xuICB0aGlzLl9kID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mID0gMHg2ODU4MTUxMVxuICB0aGlzLl9nID0gMHg2NGY5OGZhN1xuICB0aGlzLl9oID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTIyNC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDI4KVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjI0XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhMzg0ICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTM4NCwgU0hBNTEyKVxuXG5TaGEzODQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHhjYmJiOWQ1ZFxuICB0aGlzLl9iaCA9IDB4NjI5YTI5MmFcbiAgdGhpcy5fY2ggPSAweDkxNTkwMTVhXG4gIHRoaXMuX2RoID0gMHgxNTJmZWNkOFxuICB0aGlzLl9laCA9IDB4NjczMzI2NjdcbiAgdGhpcy5fZmggPSAweDhlYjQ0YTg3XG4gIHRoaXMuX2doID0gMHhkYjBjMmUwZFxuICB0aGlzLl9oaCA9IDB4NDdiNTQ4MWRcblxuICB0aGlzLl9hbCA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2NsID0gMHgzMDcwZGQxN1xuICB0aGlzLl9kbCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2ZsID0gMHg2ODU4MTUxMVxuICB0aGlzLl9nbCA9IDB4NjRmOThmYTdcbiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMzg0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNDgpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMzg0XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBMZWdhY3kgPSByZXF1aXJlKCcuL2xlZ2FjeScpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcblxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAgdmFyIGhhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgICBrZXkgPSBoYXNoLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cbiAgdGhpcy5faGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICB0aGlzLl9oYXNoLnVwZGF0ZShpcGFkKVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIGhhc2ggPSB0aGlzLl9hbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKHRoaXMuX2FsZylcbiAgcmV0dXJuIGhhc2gudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhtYWMgKGFsZywga2V5KSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHtcbiAgICByZXR1cm4gbmV3IEhtYWMoJ3JtZDE2MCcsIGtleSlcbiAgfVxuICBpZiAoYWxnID09PSAnbWQ1Jykge1xuICAgIHJldHVybiBuZXcgTGVnYWN5KG1kNSwga2V5KVxuICB9XG4gIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIGJsb2Nrc2l6ZSA9IDY0XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gYWxnKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBbaXBhZF1cbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gucHVzaChkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQodGhpcy5faGFzaCkpXG4gIHJldHVybiB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdChbdGhpcy5fb3BhZCwgaF0pKVxufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjXG4iLCJ2YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBuZXcgTUQ1KCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbn1cbiIsInZhciBiYXNleCA9IHJlcXVpcmUoJ2Jhc2UteCcpXG52YXIgQUxQSEFCRVQgPSAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNleChBTFBIQUJFVClcbiIsIi8vIGJhc2UteCBlbmNvZGluZ1xuLy8gRm9ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0b2NvaW5qcy9iczU4XG4vLyBPcmlnaW5hbGx5IHdyaXR0ZW4gYnkgTWlrZSBIZWFybiBmb3IgQml0Y29pbkpcbi8vIENvcHlyaWdodCAoYykgMjAxMSBHb29nbGUgSW5jXG4vLyBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBTdGVmYW4gVGhvbWFzXG4vLyBNZXJnZWQgQnVmZmVyIHJlZmFjdG9yaW5ncyBmcm9tIGJhc2U1OC1uYXRpdmUgYnkgU3RlcGhlbiBQYWlyXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTMgQml0UGF5IEluY1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiYXNlIChBTFBIQUJFVCkge1xuICB2YXIgQUxQSEFCRVRfTUFQID0ge31cbiAgdmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGhcbiAgdmFyIExFQURFUiA9IEFMUEhBQkVULmNoYXJBdCgwKVxuXG4gIC8vIHByZS1jb21wdXRlIGxvb2t1cCB0YWJsZVxuICBmb3IgKHZhciB6ID0gMDsgeiA8IEFMUEhBQkVULmxlbmd0aDsgeisrKSB7XG4gICAgdmFyIHggPSBBTFBIQUJFVC5jaGFyQXQoeilcblxuICAgIGlmIChBTFBIQUJFVF9NQVBbeF0gIT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBhbWJpZ3VvdXMnKVxuICAgIEFMUEhBQkVUX01BUFt4XSA9IHpcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZSAoc291cmNlKSB7XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHJldHVybiAnJ1xuXG4gICAgdmFyIGRpZ2l0cyA9IFswXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBzb3VyY2VbaV07IGogPCBkaWdpdHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgY2FycnkgKz0gZGlnaXRzW2pdIDw8IDhcbiAgICAgICAgZGlnaXRzW2pdID0gY2FycnkgJSBCQVNFXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gQkFTRSkgfCAwXG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChjYXJyeSA+IDApIHtcbiAgICAgICAgZGlnaXRzLnB1c2goY2FycnkgJSBCQVNFKVxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpIHwgMFxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSAnJ1xuXG4gICAgLy8gZGVhbCB3aXRoIGxlYWRpbmcgemVyb3NcbiAgICBmb3IgKHZhciBrID0gMDsgc291cmNlW2tdID09PSAwICYmIGsgPCBzb3VyY2UubGVuZ3RoIC0gMTsgKytrKSBzdHJpbmcgKz0gTEVBREVSXG4gICAgLy8gY29udmVydCBkaWdpdHMgdG8gYSBzdHJpbmdcbiAgICBmb3IgKHZhciBxID0gZGlnaXRzLmxlbmd0aCAtIDE7IHEgPj0gMDsgLS1xKSBzdHJpbmcgKz0gQUxQSEFCRVRbZGlnaXRzW3FdXVxuXG4gICAgcmV0dXJuIHN0cmluZ1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlVW5zYWZlIChzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFN0cmluZycpXG4gICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2NVbnNhZmUoMClcblxuICAgIHZhciBieXRlcyA9IFswXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBBTFBIQUJFVF9NQVBbc3RyaW5nW2ldXVxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVyblxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSB2YWx1ZTsgaiA8IGJ5dGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGJ5dGVzW2pdICogQkFTRVxuICAgICAgICBieXRlc1tqXSA9IGNhcnJ5ICYgMHhmZlxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goY2FycnkgJiAweGZmKVxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgZm9yICh2YXIgayA9IDA7IHN0cmluZ1trXSA9PT0gTEVBREVSICYmIGsgPCBzdHJpbmcubGVuZ3RoIC0gMTsgKytrKSB7XG4gICAgICBieXRlcy5wdXNoKDApXG4gICAgfVxuXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVzLnJldmVyc2UoKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZSAoc3RyaW5nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IGRlY29kZVVuc2FmZShzdHJpbmcpXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGJ1ZmZlclxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tYmFzZScgKyBCQVNFICsgJyBjaGFyYWN0ZXInKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBkZWNvZGVVbnNhZmU6IGRlY29kZVVuc2FmZSxcbiAgICBkZWNvZGU6IGRlY29kZVxuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gIENvbnZlcnQgYSBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIGEgYXN5bmNocm9ub3VzIG9uZSAodmlhIHNldFRpbWVvdXQpXG4gIHdyYXBwaW5nIGl0IGluIGEgcHJvbWlzZS4gIFRoaXMgZG9lcyBub3QgZXhwZWN0IHRoZSBmdW5jdGlvbiB0byBoYXZlIGFcbiAgY2FsbGJhY2sgcGFyYW10ZXIuXG5cbiAgQGFyZyB7ZnVuY3Rpb259IGZ1bmMgLSBub24tY2FsbGJhY2sgZnVuY3Rpb25cblxuICBAZXhhbXBsZSBwcm9taXNlQXN5bmMobXlmdW5jdGlvbilcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc29sdmUoZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTsgLy8gZnJvbSBnaXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliIGZyb20gZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvZWNkc2FcbnZhciBjcnlwdG8gPSByZXF1aXJlKCcuL2hhc2gnKTtcbnZhciBlbmZvcmNlVHlwZSA9IHJlcXVpcmUoJy4vZW5mb3JjZV90eXBlcycpO1xuXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKTtcbnZhciBFQ1NpZ25hdHVyZSA9IHJlcXVpcmUoJy4vZWNzaWduYXR1cmUnKTtcblxuLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY5Nzkjc2VjdGlvbi0zLjJcbmZ1bmN0aW9uIGRldGVybWluaXN0aWNHZW5lcmF0ZUsoY3VydmUsIGhhc2gsIGQsIGNoZWNrU2lnLCBub25jZSkge1xuXG4gIGVuZm9yY2VUeXBlKCdCdWZmZXInLCBoYXNoKTtcbiAgZW5mb3JjZVR5cGUoQmlnSW50ZWdlciwgZCk7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgaGFzaCA9IGNyeXB0by5zaGEyNTYoQnVmZmVyLmNvbmNhdChbaGFzaCwgbmV3IEJ1ZmZlcihub25jZSldKSk7XG4gIH1cblxuICAvLyBzYW5pdHkgY2hlY2tcbiAgYXNzZXJ0LmVxdWFsKGhhc2gubGVuZ3RoLCAzMiwgJ0hhc2ggbXVzdCBiZSAyNTYgYml0Jyk7XG5cbiAgdmFyIHggPSBkLnRvQnVmZmVyKDMyKTtcbiAgdmFyIGsgPSBuZXcgQnVmZmVyKDMyKTtcbiAgdmFyIHYgPSBuZXcgQnVmZmVyKDMyKTtcblxuICAvLyBTdGVwIEJcbiAgdi5maWxsKDEpO1xuXG4gIC8vIFN0ZXAgQ1xuICBrLmZpbGwoMCk7XG5cbiAgLy8gU3RlcCBEXG4gIGsgPSBjcnlwdG8uSG1hY1NIQTI1NihCdWZmZXIuY29uY2F0KFt2LCBuZXcgQnVmZmVyKFswXSksIHgsIGhhc2hdKSwgayk7XG5cbiAgLy8gU3RlcCBFXG4gIHYgPSBjcnlwdG8uSG1hY1NIQTI1Nih2LCBrKTtcblxuICAvLyBTdGVwIEZcbiAgayA9IGNyeXB0by5IbWFjU0hBMjU2KEJ1ZmZlci5jb25jYXQoW3YsIG5ldyBCdWZmZXIoWzFdKSwgeCwgaGFzaF0pLCBrKTtcblxuICAvLyBTdGVwIEdcbiAgdiA9IGNyeXB0by5IbWFjU0hBMjU2KHYsIGspO1xuXG4gIC8vIFN0ZXAgSDEvSDJhLCBpZ25vcmVkIGFzIHRsZW4gPT09IHFsZW4gKDI1NiBiaXQpXG4gIC8vIFN0ZXAgSDJiXG4gIHYgPSBjcnlwdG8uSG1hY1NIQTI1Nih2LCBrKTtcblxuICB2YXIgVCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcih2KTtcblxuICAvLyBTdGVwIEgzLCByZXBlYXQgdW50aWwgVCBpcyB3aXRoaW4gdGhlIGludGVydmFsIFsxLCBuIC0gMV1cbiAgd2hpbGUgKFQuc2lnbnVtKCkgPD0gMCB8fCBULmNvbXBhcmVUbyhjdXJ2ZS5uKSA+PSAwIHx8ICFjaGVja1NpZyhUKSkge1xuICAgIGsgPSBjcnlwdG8uSG1hY1NIQTI1NihCdWZmZXIuY29uY2F0KFt2LCBuZXcgQnVmZmVyKFswXSldKSwgayk7XG4gICAgdiA9IGNyeXB0by5IbWFjU0hBMjU2KHYsIGspO1xuXG4gICAgLy8gU3RlcCBIMS9IMmEsIGFnYWluLCBpZ25vcmVkIGFzIHRsZW4gPT09IHFsZW4gKDI1NiBiaXQpXG4gICAgLy8gU3RlcCBIMmIgYWdhaW5cbiAgICB2ID0gY3J5cHRvLkhtYWNTSEEyNTYodiwgayk7XG5cbiAgICBUID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKHYpO1xuICB9XG5cbiAgcmV0dXJuIFQ7XG59XG5cbmZ1bmN0aW9uIHNpZ24oY3VydmUsIGhhc2gsIGQsIG5vbmNlKSB7XG5cbiAgdmFyIGUgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoaGFzaCk7XG4gIHZhciBuID0gY3VydmUubjtcbiAgdmFyIEcgPSBjdXJ2ZS5HO1xuXG4gIHZhciByLCBzO1xuICB2YXIgayA9IGRldGVybWluaXN0aWNHZW5lcmF0ZUsoY3VydmUsIGhhc2gsIGQsIGZ1bmN0aW9uIChrKSB7XG4gICAgLy8gZmluZCBjYW5vbmljYWxseSB2YWxpZCBzaWduYXR1cmVcbiAgICB2YXIgUSA9IEcubXVsdGlwbHkoayk7XG5cbiAgICBpZiAoY3VydmUuaXNJbmZpbml0eShRKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgciA9IFEuYWZmaW5lWC5tb2Qobik7XG4gICAgaWYgKHIuc2lnbnVtKCkgPT09IDApIHJldHVybiBmYWxzZTtcblxuICAgIHMgPSBrLm1vZEludmVyc2UobikubXVsdGlwbHkoZS5hZGQoZC5tdWx0aXBseShyKSkpLm1vZChuKTtcbiAgICBpZiAocy5zaWdudW0oKSA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIG5vbmNlKTtcblxuICB2YXIgTl9PVkVSX1RXTyA9IG4uc2hpZnRSaWdodCgxKTtcblxuICAvLyBlbmZvcmNlIGxvdyBTIHZhbHVlcywgc2VlIGJpcDYyOiAnbG93IHMgdmFsdWVzIGluIHNpZ25hdHVyZXMnXG4gIGlmIChzLmNvbXBhcmVUbyhOX09WRVJfVFdPKSA+IDApIHtcbiAgICBzID0gbi5zdWJ0cmFjdChzKTtcbiAgfVxuXG4gIHJldHVybiBFQ1NpZ25hdHVyZShyLCBzKTtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5UmF3KGN1cnZlLCBlLCBzaWduYXR1cmUsIFEpIHtcbiAgdmFyIG4gPSBjdXJ2ZS5uO1xuICB2YXIgRyA9IGN1cnZlLkc7XG5cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyAxLjQuMSBFbmZvcmNlIHIgYW5kIHMgYXJlIGJvdGggaW50ZWdlcnMgaW4gdGhlIGludGVydmFsIFsxLCBuIOKIkiAxXVxuICBpZiAoci5zaWdudW0oKSA8PSAwIHx8IHIuY29tcGFyZVRvKG4pID49IDApIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuc2lnbnVtKCkgPD0gMCB8fCBzLmNvbXBhcmVUbyhuKSA+PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gYyA9IHNeLTEgbW9kIG5cbiAgdmFyIGMgPSBzLm1vZEludmVyc2Uobik7XG5cbiAgLy8gMS40LjQgQ29tcHV0ZSB1MSA9IGVzXuKIkjEgbW9kIG5cbiAgLy8gICAgICAgICAgICAgICB1MiA9IHJzXuKIkjEgbW9kIG5cbiAgdmFyIHUxID0gZS5tdWx0aXBseShjKS5tb2Qobik7XG4gIHZhciB1MiA9IHIubXVsdGlwbHkoYykubW9kKG4pO1xuXG4gIC8vIDEuNC41IENvbXB1dGUgUiA9ICh4UiwgeVIpID0gdTFHICsgdTJRXG4gIHZhciBSID0gRy5tdWx0aXBseVR3byh1MSwgUSwgdTIpO1xuXG4gIC8vIDEuNC41IChjb250LikgRW5mb3JjZSBSIGlzIG5vdCBhdCBpbmZpbml0eVxuICBpZiAoY3VydmUuaXNJbmZpbml0eShSKSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIDEuNC42IENvbnZlcnQgdGhlIGZpZWxkIGVsZW1lbnQgUi54IHRvIGFuIGludGVnZXJcbiAgdmFyIHhSID0gUi5hZmZpbmVYO1xuXG4gIC8vIDEuNC43IFNldCB2ID0geFIgbW9kIG5cbiAgdmFyIHYgPSB4Ui5tb2Qobik7XG5cbiAgLy8gMS40LjggSWYgdiA9IHIsIG91dHB1dCBcInZhbGlkXCIsIGFuZCBpZiB2ICE9IHIsIG91dHB1dCBcImludmFsaWRcIlxuICByZXR1cm4gdi5lcXVhbHMocik7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeShjdXJ2ZSwgaGFzaCwgc2lnbmF0dXJlLCBRKSB7XG4gIC8vIDEuNC4yIEggPSBIYXNoKE0pLCBhbHJlYWR5IGRvbmUgYnkgdGhlIHVzZXJcbiAgLy8gMS40LjMgZSA9IEhcbiAgdmFyIGUgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoaGFzaCk7XG4gIHJldHVybiB2ZXJpZnlSYXcoY3VydmUsIGUsIHNpZ25hdHVyZSwgUSk7XG59XG5cbi8qKlxuICAqIFJlY292ZXIgYSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gICpcbiAgKiBTZWUgU0VDIDE6IEVsbGlwdGljIEN1cnZlIENyeXB0b2dyYXBoeSwgc2VjdGlvbiA0LjEuNiwgXCJQdWJsaWNcbiAgKiBLZXkgUmVjb3ZlcnkgT3BlcmF0aW9uXCIuXG4gICpcbiAgKiBodHRwOi8vd3d3LnNlY2cub3JnL2Rvd25sb2FkL2FpZC03ODAvc2VjMS12Mi5wZGZcbiAgKi9cbmZ1bmN0aW9uIHJlY292ZXJQdWJLZXkoY3VydmUsIGUsIHNpZ25hdHVyZSwgaSkge1xuICBhc3NlcnQuc3RyaWN0RXF1YWwoaSAmIDMsIGksICdSZWNvdmVyeSBwYXJhbSBpcyBtb3JlIHRoYW4gdHdvIGJpdHMnKTtcblxuICB2YXIgbiA9IGN1cnZlLm47XG4gIHZhciBHID0gY3VydmUuRztcblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIGFzc2VydChyLnNpZ251bSgpID4gMCAmJiByLmNvbXBhcmVUbyhuKSA8IDAsICdJbnZhbGlkIHIgdmFsdWUnKTtcbiAgYXNzZXJ0KHMuc2lnbnVtKCkgPiAwICYmIHMuY29tcGFyZVRvKG4pIDwgMCwgJ0ludmFsaWQgcyB2YWx1ZScpO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaSAmIDE7XG5cbiAgLy8gVGhlIG1vcmUgc2lnbmlmaWNhbnQgYml0IHNwZWNpZmllcyB3aGV0aGVyIHdlIHNob3VsZCB1c2UgdGhlXG4gIC8vIGZpcnN0IG9yIHNlY29uZCBjYW5kaWRhdGUga2V5LlxuICB2YXIgaXNTZWNvbmRLZXkgPSBpID4+IDE7XG5cbiAgLy8gMS4xIExldCB4ID0gciArIGpuXG4gIHZhciB4ID0gaXNTZWNvbmRLZXkgPyByLmFkZChuKSA6IHI7XG4gIHZhciBSID0gY3VydmUucG9pbnRGcm9tWChpc1lPZGQsIHgpO1xuXG4gIC8vIDEuNCBDaGVjayB0aGF0IG5SIGlzIGF0IGluZmluaXR5XG4gIHZhciBuUiA9IFIubXVsdGlwbHkobik7XG4gIGFzc2VydChjdXJ2ZS5pc0luZmluaXR5KG5SKSwgJ25SIGlzIG5vdCBhIHZhbGlkIGN1cnZlIHBvaW50Jyk7XG5cbiAgLy8gQ29tcHV0ZSAtZSBmcm9tIGVcbiAgdmFyIGVOZWcgPSBlLm5lZ2F0ZSgpLm1vZChuKTtcblxuICAvLyAxLjYuMSBDb21wdXRlIFEgPSByXi0xIChzUiAtICBlRylcbiAgLy8gICAgICAgICAgICAgICBRID0gcl4tMSAoc1IgKyAtZUcpXG4gIHZhciBySW52ID0gci5tb2RJbnZlcnNlKG4pO1xuXG4gIHZhciBRID0gUi5tdWx0aXBseVR3byhzLCBHLCBlTmVnKS5tdWx0aXBseShySW52KTtcbiAgY3VydmUudmFsaWRhdGUoUSk7XG5cbiAgcmV0dXJuIFE7XG59XG5cbi8qKlxuICAqIENhbGN1bGF0ZSBwdWJrZXkgZXh0cmFjdGlvbiBwYXJhbWV0ZXIuXG4gICpcbiAgKiBXaGVuIGV4dHJhY3RpbmcgYSBwdWJrZXkgZnJvbSBhIHNpZ25hdHVyZSwgd2UgaGF2ZSB0b1xuICAqIGRpc3Rpbmd1aXNoIGZvdXIgZGlmZmVyZW50IGNhc2VzLiBSYXRoZXIgdGhhbiBwdXR0aW5nIHRoaXNcbiAgKiBidXJkZW4gb24gdGhlIHZlcmlmaWVyLCBCaXRjb2luIGluY2x1ZGVzIGEgMi1iaXQgdmFsdWUgd2l0aCB0aGVcbiAgKiBzaWduYXR1cmUuXG4gICpcbiAgKiBUaGlzIGZ1bmN0aW9uIHNpbXBseSB0cmllcyBhbGwgZm91ciBjYXNlcyBhbmQgcmV0dXJucyB0aGUgdmFsdWVcbiAgKiB0aGF0IHJlc3VsdGVkIGluIGEgc3VjY2Vzc2Z1bCBwdWJrZXkgcmVjb3ZlcnkuXG4gICovXG5mdW5jdGlvbiBjYWxjUHViS2V5UmVjb3ZlcnlQYXJhbShjdXJ2ZSwgZSwgc2lnbmF0dXJlLCBRKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIFFwcmltZSA9IHJlY292ZXJQdWJLZXkoY3VydmUsIGUsIHNpZ25hdHVyZSwgaSk7XG5cbiAgICAvLyAxLjYuMiBWZXJpZnkgUVxuICAgIGlmIChRcHJpbWUuZXF1YWxzKFEpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2FsY1B1YktleVJlY292ZXJ5UGFyYW06IGNhbGNQdWJLZXlSZWNvdmVyeVBhcmFtLFxuICBkZXRlcm1pbmlzdGljR2VuZXJhdGVLOiBkZXRlcm1pbmlzdGljR2VuZXJhdGVLLFxuICByZWNvdmVyUHViS2V5OiByZWNvdmVyUHViS2V5LFxuICBzaWduOiBzaWduLFxuICB2ZXJpZnk6IHZlcmlmeSxcbiAgdmVyaWZ5UmF3OiB2ZXJpZnlSYXdcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7IC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliXG52YXIgZW5mb3JjZVR5cGUgPSByZXF1aXJlKCcuL2VuZm9yY2VfdHlwZXMnKTtcblxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJyk7XG5cbmZ1bmN0aW9uIEVDU2lnbmF0dXJlKHIsIHMpIHtcbiAgZW5mb3JjZVR5cGUoQmlnSW50ZWdlciwgcik7XG4gIGVuZm9yY2VUeXBlKEJpZ0ludGVnZXIsIHMpO1xuXG4gIGZ1bmN0aW9uIHRvQ29tcGFjdChpLCBjb21wcmVzc2VkKSB7XG4gICAgaWYgKGNvbXByZXNzZWQpIGkgKz0gNDtcbiAgICBpICs9IDI3O1xuXG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIoNjUpO1xuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KGksIDApO1xuXG4gICAgci50b0J1ZmZlcigzMikuY29weShidWZmZXIsIDEpO1xuICAgIHMudG9CdWZmZXIoMzIpLmNvcHkoYnVmZmVyLCAzMyk7XG5cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9ERVIoKSB7XG4gICAgdmFyIHJCYSA9IHIudG9ERVJJbnRlZ2VyKCk7XG4gICAgdmFyIHNCYSA9IHMudG9ERVJJbnRlZ2VyKCk7XG5cbiAgICB2YXIgc2VxdWVuY2UgPSBbXTtcblxuICAgIC8vIElOVEVHRVJcbiAgICBzZXF1ZW5jZS5wdXNoKDB4MDIsIHJCYS5sZW5ndGgpO1xuICAgIHNlcXVlbmNlID0gc2VxdWVuY2UuY29uY2F0KHJCYSk7XG5cbiAgICAvLyBJTlRFR0VSXG4gICAgc2VxdWVuY2UucHVzaCgweDAyLCBzQmEubGVuZ3RoKTtcbiAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlLmNvbmNhdChzQmEpO1xuXG4gICAgLy8gU0VRVUVOQ0VcbiAgICBzZXF1ZW5jZS51bnNoaWZ0KDB4MzAsIHNlcXVlbmNlLmxlbmd0aCk7XG5cbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzZXF1ZW5jZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b1NjcmlwdFNpZ25hdHVyZShoYXNoVHlwZSkge1xuICAgIHZhciBoYXNoVHlwZUJ1ZmZlciA9IG5ldyBCdWZmZXIoMSk7XG4gICAgaGFzaFR5cGVCdWZmZXIud3JpdGVVSW50OChoYXNoVHlwZSwgMCk7XG5cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdG9ERVIoKSwgaGFzaFR5cGVCdWZmZXJdKTtcbiAgfVxuXG4gIHJldHVybiB7IHI6IHIsIHM6IHMsIHRvQ29tcGFjdDogdG9Db21wYWN0LCB0b0RFUjogdG9ERVIsIHRvU2NyaXB0U2lnbmF0dXJlOiB0b1NjcmlwdFNpZ25hdHVyZSB9O1xufVxuXG4vLyBJbXBvcnQgb3BlcmF0aW9uc1xuRUNTaWduYXR1cmUucGFyc2VDb21wYWN0ID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICBhc3NlcnQuZXF1YWwoYnVmZmVyLmxlbmd0aCwgNjUsICdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKTtcbiAgdmFyIGkgPSBidWZmZXIucmVhZFVJbnQ4KDApIC0gMjc7XG5cbiAgLy8gQXQgbW9zdCAzIGJpdHNcbiAgYXNzZXJ0LmVxdWFsKGksIGkgJiA3LCAnSW52YWxpZCBzaWduYXR1cmUgcGFyYW1ldGVyJyk7XG4gIHZhciBjb21wcmVzc2VkID0gISEoaSAmIDQpO1xuXG4gIC8vIFJlY292ZXJ5IHBhcmFtIG9ubHlcbiAgaSA9IGkgJiAzO1xuXG4gIHZhciByID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1ZmZlci5zbGljZSgxLCAzMykpO1xuICB2YXIgcyA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWZmZXIuc2xpY2UoMzMpKTtcblxuICByZXR1cm4ge1xuICAgIGNvbXByZXNzZWQ6IGNvbXByZXNzZWQsXG4gICAgaTogaSxcbiAgICBzaWduYXR1cmU6IEVDU2lnbmF0dXJlKHIsIHMpXG4gIH07XG59O1xuXG5FQ1NpZ25hdHVyZS5mcm9tREVSID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICBhc3NlcnQuZXF1YWwoYnVmZmVyLnJlYWRVSW50OCgwKSwgMHgzMCwgJ05vdCBhIERFUiBzZXF1ZW5jZScpO1xuICBhc3NlcnQuZXF1YWwoYnVmZmVyLnJlYWRVSW50OCgxKSwgYnVmZmVyLmxlbmd0aCAtIDIsICdJbnZhbGlkIHNlcXVlbmNlIGxlbmd0aCcpO1xuICBhc3NlcnQuZXF1YWwoYnVmZmVyLnJlYWRVSW50OCgyKSwgMHgwMiwgJ0V4cGVjdGVkIGEgREVSIGludGVnZXInKTtcblxuICB2YXIgckxlbiA9IGJ1ZmZlci5yZWFkVUludDgoMyk7XG4gIGFzc2VydChyTGVuID4gMCwgJ1IgbGVuZ3RoIGlzIHplcm8nKTtcblxuICB2YXIgb2Zmc2V0ID0gNCArIHJMZW47XG4gIGFzc2VydC5lcXVhbChidWZmZXIucmVhZFVJbnQ4KG9mZnNldCksIDB4MDIsICdFeHBlY3RlZCBhIERFUiBpbnRlZ2VyICgyKScpO1xuXG4gIHZhciBzTGVuID0gYnVmZmVyLnJlYWRVSW50OChvZmZzZXQgKyAxKTtcbiAgYXNzZXJ0KHNMZW4gPiAwLCAnUyBsZW5ndGggaXMgemVybycpO1xuXG4gIHZhciByQiA9IGJ1ZmZlci5zbGljZSg0LCBvZmZzZXQpO1xuICB2YXIgc0IgPSBidWZmZXIuc2xpY2Uob2Zmc2V0ICsgMik7XG4gIG9mZnNldCArPSAyICsgc0xlbjtcblxuICBpZiAockxlbiA+IDEgJiYgckIucmVhZFVJbnQ4KDApID09PSAweDAwKSB7XG4gICAgYXNzZXJ0KHJCLnJlYWRVSW50OCgxKSAmIDB4ODAsICdSIHZhbHVlIGV4Y2Vzc2l2ZWx5IHBhZGRlZCcpO1xuICB9XG5cbiAgaWYgKHNMZW4gPiAxICYmIHNCLnJlYWRVSW50OCgwKSA9PT0gMHgwMCkge1xuICAgIGFzc2VydChzQi5yZWFkVUludDgoMSkgJiAweDgwLCAnUyB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWQnKTtcbiAgfVxuXG4gIGFzc2VydC5lcXVhbChvZmZzZXQsIGJ1ZmZlci5sZW5ndGgsICdJbnZhbGlkIERFUiBlbmNvZGluZycpO1xuICB2YXIgciA9IEJpZ0ludGVnZXIuZnJvbURFUkludGVnZXIockIpO1xuICB2YXIgcyA9IEJpZ0ludGVnZXIuZnJvbURFUkludGVnZXIoc0IpO1xuXG4gIGFzc2VydChyLnNpZ251bSgpID49IDAsICdSIHZhbHVlIGlzIG5lZ2F0aXZlJyk7XG4gIGFzc2VydChzLnNpZ251bSgpID49IDAsICdTIHZhbHVlIGlzIG5lZ2F0aXZlJyk7XG5cbiAgcmV0dXJuIEVDU2lnbmF0dXJlKHIsIHMpO1xufTtcblxuLy8gRklYTUU6IDB4MDAsIDB4MDQsIDB4ODAgYXJlIFNJR0hBU0hfKiBib3VuZGFyeSBjb25zdGFudHMsIGltcG9ydGluZyBUcmFuc2FjdGlvbiBjYXVzZXMgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG5FQ1NpZ25hdHVyZS5wYXJzZVNjcmlwdFNpZ25hdHVyZSA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgdmFyIGhhc2hUeXBlID0gYnVmZmVyLnJlYWRVSW50OChidWZmZXIubGVuZ3RoIC0gMSk7XG4gIHZhciBoYXNoVHlwZU1vZCA9IGhhc2hUeXBlICYgfjB4ODA7XG5cbiAgYXNzZXJ0KGhhc2hUeXBlTW9kID4gMHgwMCAmJiBoYXNoVHlwZU1vZCA8IDB4MDQsICdJbnZhbGlkIGhhc2hUeXBlJyk7XG5cbiAgcmV0dXJuIHtcbiAgICBzaWduYXR1cmU6IEVDU2lnbmF0dXJlLmZyb21ERVIoYnVmZmVyLnNsaWNlKDAsIC0xKSksXG4gICAgaGFzaFR5cGU6IGhhc2hUeXBlXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVDU2lnbmF0dXJlOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgQWVzID0gcmVxdWlyZShcIi4vYWVzXCIpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKFwiLi9rZXlfcHJpdmF0ZVwiKTtcbnZhciBQdWJsaWNLZXkgPSByZXF1aXJlKFwiLi9rZXlfcHVibGljXCIpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoXCIuL3NpZ25hdHVyZVwiKTtcbnZhciBrZXlfdXRpbHMgPSByZXF1aXJlKFwiLi9rZXlfdXRpbHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEFlczogQWVzLCBQcml2YXRlS2V5OiBQcml2YXRlS2V5LCBQdWJsaWNLZXk6IFB1YmxpY0tleSxcbiAgICBTaWduYXR1cmU6IFNpZ25hdHVyZSwga2V5X3V0aWxzOiBrZXlfdXRpbHNcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J5dGVidWZmZXInKSxcbiAgICBMb25nID0gX3JlcXVpcmUuTG9uZztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgdHlwZXMgPSB7XG4gIGJ5dGVzOiBmdW5jdGlvbiBieXRlcygpIHtcbiAgICByZXR1cm4gW2J5dGVidWZdO1xuICB9LFxuICBzdHJpbmc6IGZ1bmN0aW9uIHN0cmluZygpIHtcbiAgICByZXR1cm4gW19zdHJpbmddO1xuICB9LFxuICB2ZWN0b3I6IGZ1bmN0aW9uIHZlY3Rvcih0eXBlKSB7XG4gICAgdmFyIHNvcnRlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICByZXR1cm4gW192ZWN0b3IsIHsgdHlwZTogdHlwZSwgc29ydGVkOiBzb3J0ZWQgfV07XG4gIH0sXG4gIG9wdGlvbmFsOiBmdW5jdGlvbiBvcHRpb25hbCh0eXBlKSB7XG4gICAgcmV0dXJuIFtfb3B0aW9uYWwsIHsgdHlwZTogdHlwZSB9XTtcbiAgfSxcbiAgdGltZTogZnVuY3Rpb24gdGltZSgpIHtcbiAgICByZXR1cm4gW190aW1lMl07XG4gIH0sXG4gIG1hcDogZnVuY3Rpb24gbWFwKGFubm90YXRpb24pIHtcbiAgICByZXR1cm4gW19tYXAsIHsgYW5ub3RhdGlvbjogYW5ub3RhdGlvbiB9XTtcbiAgfSxcbiAgc3RhdGljX3ZhcmlhbnQ6IGZ1bmN0aW9uIHN0YXRpY192YXJpYW50KHR5cGVzKSB7XG4gICAgcmV0dXJuIFtfc3RhdGljX3ZhcmlhbnQsIHsgdHlwZXM6IHR5cGVzIH1dO1xuICB9LFxuXG4gIGZpeGVkX3N0cmluZzE2OiBmdW5jdGlvbiBmaXhlZF9zdHJpbmcxNigpIHtcbiAgICByZXR1cm4gW19zdHJpbmcsIHsgbWF4TGVuOiAxNiB9XTtcbiAgfSxcbiAgZml4ZWRfc3RyaW5nMzI6IGZ1bmN0aW9uIGZpeGVkX3N0cmluZzMyKCkge1xuICAgIHJldHVybiBbX3N0cmluZywgeyBtYXhMZW46IDMyIH1dO1xuICB9LFxuXG4gIGZpeGVkX2J5dGVzMTY6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzMTYoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogMTYgfV07XG4gIH0sXG4gIGZpeGVkX2J5dGVzMjA6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzMjAoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogMjAgfV07XG4gIH0sXG4gIGZpeGVkX2J5dGVzMjg6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzMjgoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogMjggfV07XG4gIH0sXG4gIGZpeGVkX2J5dGVzMzI6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzMzIoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogMzIgfV07XG4gIH0sXG4gIGZpeGVkX2J5dGVzMzM6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzMzMoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogMzMgfV07XG4gIH0sXG4gIGZpeGVkX2J5dGVzNjQ6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzNjQoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogNjQgfV07XG4gIH0sXG4gIGZpeGVkX2J5dGVzNjU6IGZ1bmN0aW9uIGZpeGVkX2J5dGVzNjUoKSB7XG4gICAgcmV0dXJuIFtieXRlYnVmLCB7IGxlbjogNjUgfV07XG4gIH0sXG5cbiAgdWludDg6IGZ1bmN0aW9uIHVpbnQ4KCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IGJpdHM6IDggfV07XG4gIH0sXG4gIHVpbnQxNjogZnVuY3Rpb24gdWludDE2KCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IGJpdHM6IDE2IH1dO1xuICB9LFxuICB1aW50MzI6IGZ1bmN0aW9uIHVpbnQzMigpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBiaXRzOiAzMiB9XTtcbiAgfSxcbiAgdWludDY0OiBmdW5jdGlvbiB1aW50NjQoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgYml0czogNjQgfV07XG4gIH0sXG4gIHVpbnQxMjg6IGZ1bmN0aW9uIHVpbnQxMjgoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBiaXRzOiAxMjggfV07XG4gIH0sXG4gIHVpbnQyMjQ6IGZ1bmN0aW9uIHVpbnQyMjQoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBiaXRzOiAyMjQgfV07XG4gIH0sXG4gIHVpbnQyNTY6IGZ1bmN0aW9uIHVpbnQyNTYoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBiaXRzOiAyNTYgfV07XG4gIH0sXG4gIHVpbnQ1MTI6IGZ1bmN0aW9uIHVpbnQ1MTIoKSB7XG4gICAgcmV0dXJuIFtibmJ1ZiwgeyBiaXRzOiA1MTIgfV07XG4gIH0sXG5cbiAgdmFydWludDMyOiBmdW5jdGlvbiB2YXJ1aW50MzIoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgYml0czogMzIsIHZhcmlhYmxlOiB0cnVlIH1dO1xuICB9LFxuXG4gIGludDg6IGZ1bmN0aW9uIGludDgoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiA4IH1dO1xuICB9LFxuICBpbnQxNjogZnVuY3Rpb24gaW50MTYoKSB7XG4gICAgcmV0dXJuIFtpbnRidWYsIHsgc2lnbmVkOiB0cnVlLCBiaXRzOiAxNiB9XTtcbiAgfSxcbiAgaW50MzI6IGZ1bmN0aW9uIGludDMyKCkge1xuICAgIHJldHVybiBbaW50YnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogMzIgfV07XG4gIH0sXG4gIGludDY0OiBmdW5jdGlvbiBpbnQ2NCgpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDY0IH1dO1xuICB9LFxuICBpbnQxMjg6IGZ1bmN0aW9uIGludDEyOCgpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogMTI4IH1dO1xuICB9LFxuICBpbnQyMjQ6IGZ1bmN0aW9uIGludDIyNCgpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogMjI0IH1dO1xuICB9LFxuICBpbnQyNTY6IGZ1bmN0aW9uIGludDI1NigpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogMjU2IH1dO1xuICB9LFxuICBpbnQ1MTI6IGZ1bmN0aW9uIGludDUxMigpIHtcbiAgICByZXR1cm4gW2JuYnVmLCB7IHNpZ25lZDogdHJ1ZSwgYml0czogNTEyIH1dO1xuICB9LFxuXG4gIHZhcmludDMyOiBmdW5jdGlvbiB2YXJpbnQzMigpIHtcbiAgICByZXR1cm4gW2ludGJ1ZiwgeyBzaWduZWQ6IHRydWUsIGJpdHM6IDMyLCB2YXJpYWJsZTogdHJ1ZSB9XTtcbiAgfSxcblxuICBmbG9hdDMyOiBmdW5jdGlvbiBmbG9hdDMyKCkge1xuICAgIHJldHVybiBbZmxvYXQsIHsgYml0czogMzIgfV07XG4gIH0sXG4gIGZsb2F0NjQ6IGZ1bmN0aW9uIGZsb2F0NjQoKSB7XG4gICAgcmV0dXJuIFtmbG9hdCwgeyBiaXRzOiA2NCB9XTtcbiAgfVxuXG4gIC8qXG4gICAgQGFyZyB7U2VyaWFsaXplckNvbmZpZ30gY29uZmlnXG4gICAgQHJldHVybiB7b2JqZWN0fSB7W3R5cGVOYW1lXTogZnVuY3Rpb24oYXJncyl9XG4gICovXG59O21vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICBjb25maWcgPSBPYmplY3QuYXNzaWduKHsgZGVmYXVsdHM6IGZhbHNlLCBkZWJ1ZzogZmFsc2UsIGN1c3RvbVR5cGVzOiB7fSB9LCBjb25maWcpO1xuXG4gIHZhciBhbGxUeXBlcyA9IE9iamVjdC5hc3NpZ24oe30sIHR5cGVzLCBjb25maWcuY3VzdG9tVHlwZXMpO1xuXG4gIHZhciBjcmVhdGVUeXBlUmVkdWNlciA9IGZ1bmN0aW9uIGNyZWF0ZVR5cGVSZWR1Y2VyKGJhc2VUeXBlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY3VzdG9tVHlwZXMsIG5hbWUpIHtcbiAgICAgIGN1c3RvbVR5cGVzW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHlwZSA9IGNyZWF0ZVR5cGUobmFtZSwgY29uZmlnLCBhcmdzLCBiYXNlVHlwZXMsIGFsbFR5cGVzLCBjdXN0b21UeXBlcyk7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBjdXN0b21UeXBlcztcbiAgICB9O1xuICB9O1xuXG4gIHZhciBiYXNlVHlwZXMgPSBPYmplY3Qua2V5cyh0eXBlcykucmVkdWNlKGNyZWF0ZVR5cGVSZWR1Y2VyKCksIHt9KTtcblxuICB2YXIgY3VzdG9tVHlwZXMgPSBPYmplY3Qua2V5cyhjb25maWcuY3VzdG9tVHlwZXMgfHwge30pLnJlZHVjZShjcmVhdGVUeXBlUmVkdWNlcihiYXNlVHlwZXMpLCB7fSk7XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGJhc2VUeXBlcywgY3VzdG9tVHlwZXMsIHsgY29uZmlnOiBjb25maWcgfSk7XG59O1xuXG4vKipcbiAgICBAYXJncyB7c3RyaW5nfSB0eXBlTmFtZSAtIG1hdGNoZXMgdHlwZXNbXVxuICAgIEBhcmdzIHtzdHJpbmd9IGNvbmZpZyAtIEFkZGl0aW9uYWwgYXJndW1lbnRzIGZvciB0eXBlc1xuKi9cbmZ1bmN0aW9uIGNyZWF0ZVR5cGUodHlwZU5hbWUsIGNvbmZpZywgYXJncywgYmFzZVR5cGVzLCBhbGxUeXBlcywgY3VzdG9tVHlwZXMpIHtcbiAgdmFyIFR5cGUgPSBiYXNlVHlwZXMgPyBhbGxUeXBlc1t0eXBlTmFtZV0gOiB0eXBlc1t0eXBlTmFtZV07XG5cbiAgdmFyIF9UeXBlID0gVHlwZS5hcHBseSh1bmRlZmluZWQsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSksXG4gICAgICBfVHlwZTIgPSBfc2xpY2VkVG9BcnJheShfVHlwZSwgMiksXG4gICAgICBmbiA9IF9UeXBlMlswXSxcbiAgICAgIF9UeXBlMiQgPSBfVHlwZTJbMV0sXG4gICAgICB2ID0gX1R5cGUyJCA9PT0gdW5kZWZpbmVkID8ge30gOiBfVHlwZTIkO1xuXG4gIHZhciB2YWxpZGF0aW9uID0gT2JqZWN0LmFzc2lnbih2LCBjb25maWcpO1xuICB2YWxpZGF0aW9uLnR5cGVOYW1lID0gdHlwZU5hbWU7XG4gIHZhciB0eXBlID0gZm4odmFsaWRhdGlvbiwgYmFzZVR5cGVzLCBjdXN0b21UeXBlcyk7XG4gIHR5cGUudHlwZU5hbWUgPSB0eXBlTmFtZTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbnZhciBfbWFwID0gZnVuY3Rpb24gX21hcCh2YWxpZGF0aW9uKSB7XG4gIHZhciBfdmFsaWRhdGlvbiRhbm5vdGF0aW8gPSBfc2xpY2VkVG9BcnJheSh2YWxpZGF0aW9uLmFubm90YXRpb24sIDIpLFxuICAgICAgdHlwZTEgPSBfdmFsaWRhdGlvbiRhbm5vdGF0aW9bMF0sXG4gICAgICB0eXBlMiA9IF92YWxpZGF0aW9uJGFubm90YXRpb1sxXTtcblxuICBpZiAoIWlzU2VyaWFsaXplcih0eXBlMSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXA8dHlwZTEsID4gdW5rbm93bicpO1xuICB9XG4gIGlmICghaXNTZXJpYWxpemVyKHR5cGUyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21hcDwsIHR5cGUyPiB1bmtub3duJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgc2l6ZSA9IGIucmVhZFZhcmludDMyKCk7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICByZXN1bHRbdHlwZTEuZnJvbUJ5dGVCdWZmZXIoYildID0gdHlwZTIuZnJvbUJ5dGVCdWZmZXIoYik7XG4gICAgICB9XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygnMHgnICsgc2l6ZS50b1N0cmluZygxNiksICcobWFwLmZyb21CeXRlQnVmZmVyIGxlbmd0aCknLCByZXN1bHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgYi53cml0ZVZhcmludDMyKGtleXMubGVuZ3RoKTtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcweCcgKyBrZXlzLmxlbmd0aC50b1N0cmluZygxNiksICcobWFwLmFwcGVuZEJ5dGVCdWZmZXIgbGVuZ3RoKScsIGtleXMpO1xuICAgICAgfVxuICAgICAgLy8gaWYoc29ydGVkID09PSB0cnVlKSB7XG4gICAgICAvLyAgIHZhbHVlID0gc29ydEtleXModHlwZTEsIE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKSlcbiAgICAgIC8vIH1cbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBrZXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBvID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICB2YXIgdmFsdWUyID0gdmFsdWVbb107XG4gICAgICAgICAgdHlwZTEuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvKTtcbiAgICAgICAgICB0eXBlMi5hcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlMik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgLy8gaWYoc29ydGVkID09PSB0cnVlKSB7XG4gICAgICAvLyAgIHZhbHVlID0gc29ydEtleXModHlwZTEsIE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKSlcbiAgICAgIC8vIH1cbiAgICAgIGZvciAodmFyIG8gaW4gdmFsdWUpIHtcbiAgICAgICAgcmVzdWx0W3R5cGUxLmZyb21PYmplY3QobyldID0gdHlwZTIuZnJvbU9iamVjdCh2YWx1ZVtvXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHR5cGUxLnRvT2JqZWN0KG51bGwpLCB0eXBlMi50b09iamVjdChudWxsKSk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAvLyBpZihzb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgIC8vICAgdmFsdWUgPSBzb3J0S2V5KHR5cGUxLCBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkpXG4gICAgICAvLyB9XG4gICAgICBmb3IgKHZhciBvIGluIHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFt0eXBlMS50b09iamVjdChvKV0gPSB0eXBlMi50b09iamVjdCh2YWx1ZVtvXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfc3RhdGljX3ZhcmlhbnQgPSBmdW5jdGlvbiBfc3RhdGljX3ZhcmlhbnQodmFsaWRhdGlvbikge1xuICB2YXIgdHlwZXMgPSB2YWxpZGF0aW9uLnR5cGVzO1xuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciB0eXBlUG9zaXRpb24gPSBiLnJlYWRWYXJpbnQzMigpO1xuICAgICAgdmFyIHR5cGUgPSB0eXBlc1t0eXBlUG9zaXRpb25dO1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignc3RhdGljX3ZhcmlhbnQgaWQgJyArIHR5cGVQb3NpdGlvbiArICcgKDB4JyArIHR5cGVQb3NpdGlvbi50b1N0cmluZygxNikgKyAnKScpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KHR5cGUsICdzdGF0aWNfdmFyaWFudCBpbnZhbGlkIHR5cGUgcG9zaXRpb24gJyArIHR5cGVQb3NpdGlvbik7XG4gICAgICByZXR1cm4gW3R5cGVQb3NpdGlvbiwgdHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKV07XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIG9iamVjdCkge1xuICAgICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkob2JqZWN0KSAmJiBvYmplY3QubGVuZ3RoID09PSAyLCAnUmVxdWlyZWQgdHVwbGUnKTtcbiAgICAgIHZhciB0eXBlUG9zaXRpb24gPSBvYmplY3RbMF07XG4gICAgICB2YXIgdHlwZSA9IHR5cGVzW3R5cGVQb3NpdGlvbl07XG4gICAgICBhc3NlcnQodHlwZSwgJ3R5cGUgJyArIHR5cGVQb3NpdGlvbik7XG4gICAgICBiLndyaXRlVmFyaW50MzIodHlwZVBvc2l0aW9uKTtcbiAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvYmplY3RbMV0pO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdChvYmplY3QpIHtcbiAgICAgIGFzc2VydChBcnJheS5pc0FycmF5KG9iamVjdCkgJiYgb2JqZWN0Lmxlbmd0aCA9PT0gMiwgJ1JlcXVpcmVkIHR1cGxlJyk7XG4gICAgICB2YXIgdHlwZVBvc2l0aW9uID0gb2JqZWN0WzBdO1xuICAgICAgdmFyIHR5cGUgPSB0eXBlc1t0eXBlUG9zaXRpb25dO1xuICAgICAgYXNzZXJ0KHR5cGUsICd0eXBlICcgKyB0eXBlUG9zaXRpb24pO1xuICAgICAgcmV0dXJuIFt0eXBlUG9zaXRpb24sIHR5cGUuZnJvbU9iamVjdChvYmplY3RbMV0pXTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdChvYmplY3QpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbMCwgdHlwZXNbMF0udG9PYmplY3QobnVsbCwgZGVidWcpXTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChBcnJheS5pc0FycmF5KG9iamVjdCkgJiYgb2JqZWN0Lmxlbmd0aCA9PT0gMiwgJ1JlcXVpcmVkIHR1cGxlJyk7XG4gICAgICB2YXIgdHlwZVBvc2l0aW9uID0gb2JqZWN0WzBdO1xuICAgICAgdmFyIHR5cGUgPSB0eXBlc1t0eXBlUG9zaXRpb25dO1xuICAgICAgYXNzZXJ0KHR5cGUsICd0eXBlICcgKyB0eXBlUG9zaXRpb24pO1xuICAgICAgcmV0dXJuIFt0eXBlUG9zaXRpb24sIHR5cGUudG9PYmplY3Qob2JqZWN0WzFdKV07XG4gICAgfVxuICB9O1xufTtcblxudmFyIF92ZWN0b3IgPSBmdW5jdGlvbiBfdmVjdG9yKHZhbGlkYXRpb24pIHtcbiAgdmFyIHR5cGUgPSB2YWxpZGF0aW9uLnR5cGUsXG4gICAgICBzb3J0ZWQgPSB2YWxpZGF0aW9uLnNvcnRlZDtcblxuICBpZiAoIWlzU2VyaWFsaXplcih0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZlY3RvciB0eXBlIHNob3VsZCBiZSBhIHNlcmlhbGl6ZXInKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBzaXplID0gYi5yZWFkVmFyaW50MzIoKTtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmcm9tQnl0ZUJ1ZmZlciB2ZWN0b3IgbGVuZ3RoJywgc2l6ZSwgJygweCcgKyBzaXplLnRvU3RyaW5nKDE2KSArICcpJyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaCh0eXBlLmZyb21CeXRlQnVmZmVyKGIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgYi53cml0ZVZhcmludDMyKHZhbHVlLmxlbmd0aCk7XG4gICAgICBpZiAoc29ydGVkID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gc29ydCh0eXBlLCBPYmplY3QuYXNzaWduKFtdLCB2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbGlkYXRpb24uZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJzB4JyArIHZhbHVlLmxlbmd0aC50b1N0cmluZygxNiksICcodmVjdG9yLmFwcGVuZEJ5dGVCdWZmZXIgbGVuZ3RoKScsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgbyA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgIH1cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgbyA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICAgIHJlc3VsdC5wdXNoKHR5cGUuZnJvbU9iamVjdChvKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSBzb3J0KHR5cGUsIE9iamVjdC5hc3NpZ24oW10sIHJlc3VsdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW3R5cGUudG9PYmplY3QodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICBpZiAoc29ydGVkID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gc29ydCh0eXBlLCBPYmplY3QuYXNzaWduKFtdLCB2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSB2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBvID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgcmVzdWx0LnB1c2godHlwZS50b09iamVjdChvKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgX29wdGlvbmFsID0gZnVuY3Rpb24gX29wdGlvbmFsKHZhbGlkYXRpb24pIHtcbiAgdmFyIHR5cGUgPSB2YWxpZGF0aW9uLnR5cGU7XG5cbiAgaWYgKCFpc1NlcmlhbGl6ZXIodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25hbCBwYXJhbWV0ZXIgc2hvdWxkIGJlIGEgc2VyaWFsaXplcicpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9tQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ5dGVCdWZmZXIoYikge1xuICAgICAgaWYgKCEoYi5yZWFkVWludDgoKSA9PT0gMSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIGIud3JpdGVVaW50OCgxKTtcbiAgICAgICAgdHlwZS5hcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIud3JpdGVVaW50OCgwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGUuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIC8vIHRvT2JqZWN0IGlzIG9ubHkgbnVsbCBzYXZlIGlmIGRlZmF1bHRzIGlzIHRydWVcbiAgICAgIHZhciByZXN1bHRWYWx1ZSA9IHZvaWQgMDtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmICF2YWxpZGF0aW9uLmRlZmF1bHRzKSB7XG4gICAgICAgIHJlc3VsdFZhbHVlID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFZhbHVlID0gdHlwZS50b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0VmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGludGJ1ZlR5cGUgPSBmdW5jdGlvbiBpbnRidWZUeXBlKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRzaWduZWQgPSBfcmVmMi5zaWduZWQsXG4gICAgICBzaWduZWQgPSBfcmVmMiRzaWduZWQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZjIkc2lnbmVkLFxuICAgICAgYml0cyA9IF9yZWYyLmJpdHMsXG4gICAgICB2YXJpYWJsZSA9IF9yZWYyLnZhcmlhYmxlO1xuICByZXR1cm4gdmFyaWFibGUgPyAnVmFyaW50JyArIGJpdHMgKyAoc2lnbmVkID8gJ1ppZ1phZycgOiAnJykgOiAnJyArIChzaWduZWQgPyAnSW50JyA6ICdVaW50JykgKyBiaXRzO1xufTtcblxudmFyIGludGJ1ZiA9IGZ1bmN0aW9uIGludGJ1Zih2YWxpZGF0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGJbJ3JlYWQnICsgaW50YnVmVHlwZSh2YWxpZGF0aW9uKV0oKTtcbiAgICAgIHJldHVybiBMb25nLmlzTG9uZyh2YWx1ZSkgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbilcbiAgICAgIC8vIHZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IExvbmcuZnJvbVN0cmluZyh2YWx1ZSkgOiB2YWx1ZVxuICAgICAgYlsnd3JpdGUnICsgaW50YnVmVHlwZSh2YWxpZGF0aW9uKV0odmFsdWUpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgLy8gaWYodmFsaWRhdGlvbi5iaXRzID4gNTMgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgIC8vICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uLmJpdHMgPiA1MyA/ICcwJyA6IDA7XG4gICAgICB9XG5cbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIC8vIGlmKHZhbGlkYXRpb24uYml0cyA+IDUzICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICAvLyAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG5cbiAgICAgIHJldHVybiBMb25nLmlzTG9uZyh2YWx1ZSkgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqIEJpZyBOdW1iZXJzICg+IDY0IGJpdHMpICovXG52YXIgYm5idWYgPSBmdW5jdGlvbiBibmJ1Zih2YWxpZGF0aW9uKSB7XG4gIHZhciBfdmFsaWRhdGlvbiRzaWduZWQgPSB2YWxpZGF0aW9uLnNpZ25lZCxcbiAgICAgIHNpZ25lZCA9IF92YWxpZGF0aW9uJHNpZ25lZCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfdmFsaWRhdGlvbiRzaWduZWQsXG4gICAgICBiaXRzID0gdmFsaWRhdGlvbi5iaXRzO1xuXG4gIHZhciBzaXplID0gYml0cyAvIDg7XG4gIHJldHVybiB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHZhciBiY29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyBzaXplKTtcbiAgICAgIGIuc2tpcChzaXplKTtcblxuICAgICAgdmFyIGJuID0gbmV3IEJOKGJjb3B5LnRvSGV4KCksICdoZXgnKTtcbiAgICAgIHZhciBidWYgPSBibi50b0FycmF5TGlrZShCdWZmZXIsICdsZScsIHNpemUpOyAvLyBjb252ZXJ0IHRvIGxpdHRsZSBlbmRpYW5cbiAgICAgIGJuID0gbmV3IEJOKGJ1Zi50b1N0cmluZygnaGV4JyksICdoZXgnKTtcbiAgICAgIGlmIChzaWduZWQpIHtcbiAgICAgICAgYm4gPSBibi5mcm9tVHdvcyhiaXRzKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGJuLnRvU3RyaW5nKCk7XG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gYml0cyA+IDUzID8gdmFsdWUgOiBibi50b051bWJlcigpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgdmFyIGJuID0gbmV3IEJOKHZhbHVlKTtcbiAgICAgIGlmIChzaWduZWQpIHtcbiAgICAgICAgYm4gPSBibi50b1R3b3MoYml0cyk7XG4gICAgICB9XG4gICAgICB2YXIgYnVmID0gYm4udG9BcnJheUxpa2UoQnVmZmVyLCAnbGUnLCBzaXplKTtcbiAgICAgIGIuYXBwZW5kKGJ1Zi50b1N0cmluZygnYmluYXJ5JyksICdiaW5hcnknKTtcbiAgICB9LFxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlSW50KHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb24uZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGlvbi5iaXRzID4gNTMgPyAnMCcgOiAwO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBmbG9hdFBvaW50ID0gcmVxdWlyZSgnaWVlZS1mbG9hdCcpO1xuXG52YXIgZmxvYXQgPSBmdW5jdGlvbiBmbG9hdCh2YWxpZGF0aW9uKSB7XG4gIHZhciBiaXRzID0gdmFsaWRhdGlvbi5iaXRzO1xuXG4gIC8vIGFzc2VydChiaXRzID09PSAzMiB8fCBiaXRzID09PSA2NCwgJ3Vuc3VwcG9ydGVkIGZsb2F0IGJpdCBzaXplOiAnICsgYml0cylcblxuICB2YXIgc2l6ZU5hbWUgPSBiaXRzID09PSAzMiA/ICdGbG9hdCcgOiBiaXRzID09PSA2NCA/ICdEb3VibGUnIDogbnVsbDtcbiAgYXNzZXJ0KHNpemVOYW1lLCAndW5zdXBwb3J0ZWQgZmxvYXQgYml0IHNpemU6ICcgKyBiaXRzKTtcbiAgdmFyIHNpemUgPSBiaXRzIC8gODtcblxuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgYmNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgc2l6ZSk7XG4gICAgICBiLnNraXAoc2l6ZSk7XG4gICAgICB2YXIgZmIgPSBCdWZmZXIuZnJvbShiY29weS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG4gICAgICByZXR1cm4gZmxvYXRQb2ludFsncmVhZCcgKyBzaXplTmFtZSArICdMRSddKGZiKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIGZsb2F0UG9pbnRbJ3dyaXRlJyArIHNpemVOYW1lICsgJ0xFJ10ob3V0cHV0LCB2YWx1ZSk7XG4gICAgICBiLmFwcGVuZChvdXRwdXQpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodmFsaWRhdGlvbi5kZWZhdWx0cyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwLjA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGJ5dGVidWYgPSBmdW5jdGlvbiBieXRlYnVmKHZhbGlkYXRpb24pIHtcbiAgdmFyIF9ieXRlYnVmID0ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgbGVuID0gdmFsaWRhdGlvbi5sZW47XG5cbiAgICAgIHZhciBiQ29weSA9IHZvaWQgMDtcbiAgICAgIGlmIChsZW4gPT0gbnVsbCkge1xuICAgICAgICB2YXIgbGVuUHJlZml4ID0gYi5yZWFkVmFyaW50MzIoKTtcbiAgICAgICAgYkNvcHkgPSBiLmNvcHkoYi5vZmZzZXQsIGIub2Zmc2V0ICsgbGVuUHJlZml4KTtcbiAgICAgICAgYi5za2lwKGxlblByZWZpeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiQ29weSA9IGIuY29weShiLm9mZnNldCwgYi5vZmZzZXQgKyBsZW4pO1xuICAgICAgICBiLnNraXAobGVuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShiQ29weS50b0JpbmFyeSgpLCAnYmluYXJ5Jyk7XG4gICAgfSxcbiAgICBhcHBlbmRCeXRlQnVmZmVyOiBmdW5jdGlvbiBhcHBlbmRCeXRlQnVmZmVyKGIsIHZhbHVlKSB7XG4gICAgICAvLyB2YWx1ZSA9IF9ieXRlYnVmLmZyb21PYmplY3QodmFsdWUpXG5cbiAgICAgIHZhciBsZW4gPSB2YWxpZGF0aW9uLmxlbjtcblxuICAgICAgaWYgKGxlbiA9PSBudWxsKSB7XG4gICAgICAgIGIud3JpdGVWYXJpbnQzMih2YWx1ZS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgYi5hcHBlbmQodmFsdWUudG9TdHJpbmcoJ2JpbmFyeScpLCAnYmluYXJ5Jyk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWx1ZSA9IEJ1ZmZlci5mcm9tKHZhbHVlLCAnaGV4Jyk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdmFsdWUgPSBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICB2YWx1ZSA9IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgZGVmYXVsdHMgPSB2YWxpZGF0aW9uLmRlZmF1bHRzLFxuICAgICAgICAgIGxlbiA9IHZhbGlkYXRpb24ubGVuO1xuXG4gICAgICBpZiAoZGVmYXVsdHMgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gQXJyYXkobGVuID8gbGVuICsgMSA6IDEpLmpvaW4oJzAwJyk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoJ2hleCcpO1xuICAgIH0sXG4gICAgY29tcGFyZTogZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgICByZXR1cm4gQnVmZmVyLmNvbXBhcmUoYSwgYik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2J5dGVidWY7XG59O1xuXG52YXIgX3N0cmluZyA9IGZ1bmN0aW9uIF9zdHJpbmcodmFsaWRhdGlvbikge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICByZXR1cm4gYi5yZWFkVlN0cmluZygpO1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSkge1xuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgYi53cml0ZVZTdHJpbmcodmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfdGltZTIgPSBmdW5jdGlvbiBfdGltZTIodmFsaWRhdGlvbikge1xuICB2YXIgX3RpbWUgPSB7XG4gICAgZnJvbUJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGZyb21CeXRlQnVmZmVyKGIpIHtcbiAgICAgIHJldHVybiBiLnJlYWRVaW50MzIoKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIC8vIGlmKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIilcbiAgICAgIC8vICAgICB2YWx1ZSA9IF90aW1lLmZyb21PYmplY3QodmFsdWUpXG5cbiAgICAgIHZhbGlkYXRlKHZhbHVlLCB2YWxpZGF0aW9uKTtcbiAgICAgIGIud3JpdGVVaW50MzIodmFsdWUpO1xuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5nZXRUaW1lKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbHVlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZGF0ZSB0eXBlOiAnICsgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBDaHJvbWUgYXNzdW1lcyBadWx1IHdoZW4gbWlzc2luZywgRmlyZWZveCBkb2VzIG5vdFxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIS9aJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgKz0gJ1onO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihuZXcgRGF0ZSh2YWx1ZSkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICh2YWxpZGF0aW9uLmRlZmF1bHRzICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKDApLnRvSVNPU3RyaW5nKCkuc3BsaXQoJy4nKVswXTtcbiAgICAgIH1cblxuICAgICAgdmFsaWRhdGUodmFsdWUsIHZhbGlkYXRpb24pO1xuXG4gICAgICAvLyBpZih0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vICAgICBpZighL1okLy50ZXN0KHZhbHVlKSlcbiAgICAgIC8vICAgICAgICAgdmFsdWUgKz0gXCJaXCJcbiAgICAgIC8vXG4gICAgICAvLyAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAvLyB9XG5cbiAgICAgIC8vIGlmKHZhbHVlLmdldFRpbWUpXG4gICAgICAvLyAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJy4nKVswXSArICdaJ1xuXG4gICAgICB2YWxpZGF0ZUludCh2YWx1ZSwgc3ByZWFkKHZhbGlkYXRpb24sIHsgYml0czogMzIgfSkpO1xuICAgICAgdmFyIGludCA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShpbnQgKiAxMDAwKS50b0lTT1N0cmluZygpLnNwbGl0KCcuJylbMF07XG4gICAgfVxuICB9O1xuICByZXR1cm4gX3RpbWU7XG59O1xuXG52YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSwgdmFsaWRhdGlvbikge1xuICBpZiAoaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyB2YWxpZGF0aW9uLnR5cGVOYW1lKTtcbiAgfVxuXG4gIGlmICh2YWxpZGF0aW9uLmxlbiAhPSBudWxsKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xlbiB2YWxpZGF0aW9uIHJlcXVyaWVzIGEgXCJsZW5ndGhcIiBwcm9wZXJ0eScpO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSB2YWxpZGF0aW9uLmxlbjtcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggIT09IGxlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkYXRpb24udHlwZU5hbWUgKyAnIGxlbmd0aCAnICsgdmFsdWUubGVuZ3RoICsgJyBkb2VzIG5vdCBlcXVhbCAnICsgbGVuKTtcbiAgICB9XG4gIH1cblxuICBpZiAodmFsaWRhdGlvbi5tYXhMZW4gIT0gbnVsbCkge1xuICAgIHZhciBtYXhMZW4gPSB2YWxpZGF0aW9uLm1heExlbjtcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXhMZW4gdmFsaWRhdGlvbiByZXF1cmllcyBhIFwibGVuZ3RoXCIgcHJvcGVydHknKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUubGVuZ3RoID4gbWF4TGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvbi50eXBlTmFtZSArICcgbGVuZ3RoICcgKyB2YWx1ZS5sZW5ndGggKyAnIGV4Y2VlZHMgbWF4TGVuICcgKyBtYXhMZW4pO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFpFUk8gPSBuZXcgQk4oKTtcbnZhciBPTkUgPSBuZXcgQk4oJzEnKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVJbnQodmFsdWUsIHZhbGlkYXRpb24pIHtcbiAgaWYgKGlzRW1wdHkodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCAnICsgdmFsaWRhdGlvbi50eXBlTmFtZSk7XG4gIH1cbiAgdmFyIF92YWxpZGF0aW9uJHNpZ25lZDIgPSB2YWxpZGF0aW9uLnNpZ25lZCxcbiAgICAgIHNpZ25lZCA9IF92YWxpZGF0aW9uJHNpZ25lZDIgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3ZhbGlkYXRpb24kc2lnbmVkMixcbiAgICAgIF92YWxpZGF0aW9uJGJpdHMgPSB2YWxpZGF0aW9uLmJpdHMsXG4gICAgICBiaXRzID0gX3ZhbGlkYXRpb24kYml0cyA9PT0gdW5kZWZpbmVkID8gNTQgOiBfdmFsaWRhdGlvbiRiaXRzO1xuXG5cbiAgdmFsdWUgPSBTdHJpbmcodmFsdWUpLnRyaW0oKTtcbiAgaWYgKHNpZ25lZCAmJiAhL14tP1swLTldKyQvLnRlc3QodmFsdWUpIHx8ICFzaWduZWQgJiYgIS9eWzAtOV0rJC8udGVzdCh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ051bWJlciBmb3JtYXQgJyArIHZhbGlkYXRpb24udHlwZU5hbWUgKyAnICcgKyB2YWx1ZSk7XG4gIH1cblxuICB2YXIgbWF4ID0gc2lnbmVkID8gbWF4U2lnbmVkKGJpdHMpIDogbWF4VW5zaWduZWQoYml0cyk7XG4gIHZhciBtaW4gPSBzaWduZWQgPyBtaW5TaWduZWQoYml0cykgOiBaRVJPO1xuICB2YXIgaSA9IG5ldyBCTih2YWx1ZSk7XG5cbiAgLy8gY29uc29sZS5sb2coJ2kudG9TdHJpbmcoKSwgbWluLnRvU3RyaW5nKCknLCBpLnRvU3RyaW5nKCksIG1pbi50b1N0cmluZygpKVxuICBpZiAoaS5jbXAobWluKSA8IDAgfHwgaS5jbXAobWF4KSA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ092ZXJmbG93ICcgKyB2YWxpZGF0aW9uLnR5cGVOYW1lICsgJyAnICsgdmFsdWUgKyAnLCAnICsgKCdtYXggJyArIG1heC50b1N0cmluZygpICsgJywgbWluICcgKyBtaW4udG9TdHJpbmcoKSArICcsIHNpZ25lZCAnICsgc2lnbmVkICsgJywgYml0cyAnICsgYml0cykpO1xuICB9XG59XG5cbnZhciBpc1NlcmlhbGl6ZXIgPSBmdW5jdGlvbiBpc1NlcmlhbGl6ZXIodHlwZSkge1xuICByZXR1cm4gKHR5cGVvZiB0eXBlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0eXBlKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0eXBlLmZyb21CeXRlQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUuZnJvbU9iamVjdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS50b09iamVjdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbnZhciB0b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlLCBlbmNvZGluZykge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogdmFsdWUudG9TdHJpbmcgPyB2YWx1ZS50b1N0cmluZyhlbmNvZGluZykgOiB2YWx1ZTtcbn07XG5cbnZhciBzb3J0ID0gZnVuY3Rpb24gc29ydCh0eXBlLCB2YWx1ZXMpIHtcbiAgcmV0dXJuIHR5cGUuY29tcGFyZSA/IHZhbHVlcy5zb3J0KHR5cGUuY29tcGFyZSkgOiAvLyBjdXN0b20gY29tcGFyZVxuICB2YWx1ZXMuc29ydCgpO1xufTtcblxudmFyIHNwcmVhZCA9IGZ1bmN0aW9uIHNwcmVhZCgpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LCBhcmd1bWVudHMpO1xufTtcbnZhciBpc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbn07XG5cbi8vIDEgPDwgTiA9PT0gTWF0aC5wb3coMiwgTilcbnZhciBtYXhVbnNpZ25lZCA9IGZ1bmN0aW9uIG1heFVuc2lnbmVkKGJpdHMpIHtcbiAgcmV0dXJuIG5ldyBCTigxKS5pc2hsbihiaXRzKS5pc3ViKE9ORSk7XG59O1xudmFyIG1heFNpZ25lZCA9IGZ1bmN0aW9uIG1heFNpZ25lZChiaXRzKSB7XG4gIHJldHVybiBuZXcgQk4oMSkuaXNobG4oYml0cyAtIDEpLmlzdWIoT05FKTtcbn07XG52YXIgbWluU2lnbmVkID0gZnVuY3Rpb24gbWluU2lnbmVkKGJpdHMpIHtcbiAgcmV0dXJuIG5ldyBCTigxKS5pc2hsbihiaXRzIC0gMSkuaW5lZygpO1xufTsiLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKipcbiAqIHB1cmUgamF2YXNjcmlwdCBmdW5jdGlvbnMgdG8gcmVhZCBhbmQgd3JpdGUgMzItYml0IGFuZCA2NC1iaXQgSUVFRSA3NTQgZmxvYXRpbmctcG9pbnRcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTcgQW5kcmFzIFJhZGljc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzQmlnZUNwdSA9IGZhbHNlO1xudmFyIHJlYWRGbG9hdDMyQXJyYXksIHdyaXRlRmxvYXQzMkFycmF5LCByZWFkRmxvYXQzMkFycmF5UmV2LCB3cml0ZUZsb2F0MzJBcnJheVJldjtcbnZhciByZWFkRmxvYXQ2NEFycmF5LCB3cml0ZUZsb2F0NjRBcnJheSwgcmVhZEZsb2F0NjRBcnJheVJldiwgd3JpdGVGbG9hdDY0QXJyYXlSZXY7XG5cblxuLy8gdGVzdCBGbG9hdEFycmF5IGV4aXN0ZW5jZSB3aXRoICYmIHRvIG5vdCB0aHJvdyBvZmYgY29kZSBjb3ZlcmFnZVxuKHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICdmdW5jdGlvbicpICYmIChmdW5jdGlvbigpe1xuICAgIHZhciBfZnAzMiA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XG4gICAgdmFyIF9iMzIgPSBuZXcgVWludDhBcnJheShfZnAzMi5idWZmZXIpO1xuXG4gICAgX2ZwMzJbMF0gPSAtMTtcbiAgICBpc0JpZ2VDcHUgPSBfYjMyWzNdID09PSAwO1xuXG4gICAgcmVhZEZsb2F0MzJBcnJheSA9IGZ1bmN0aW9uIHJlYWRGbG9hdDMyQXJyYXkoIGJ1ZiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgaWYgKHBvcyA8IDAgfHwgcG9zICsgNCA+IGJ1Zi5sZW5ndGgpIHJldHVybiAwO1xuICAgICAgICBfYjMyWzBdID0gYnVmW3BvcysrXTsgX2IzMlsxXSA9IGJ1Zltwb3MrK107IF9iMzJbMl0gPSBidWZbcG9zKytdO19iMzJbM10gPSBidWZbcG9zXTtcbiAgICAgICAgLy9fYjMyWzBdID0gYnVmW3BvcyswXTsgX2IzMlsxXSA9IGJ1Zltwb3MrMV07IF9iMzJbMl0gPSBidWZbcG9zKzJdOyBfYjMyWzNdID0gYnVmW3BvcyszXTtcbiAgICAgICAgcmV0dXJuIF9mcDMyWzBdO1xuICAgIH1cblxuICAgIHJlYWRGbG9hdDMyQXJyYXlSZXYgPSBmdW5jdGlvbiByZWFkRmxvYXQzMkFycmF5UmV2KCBidWYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIGlmIChwb3MgPCAwIHx8IHBvcyArIDQgPiBidWYubGVuZ3RoKSByZXR1cm4gMDtcbiAgICAgICAgX2IzMlszXSA9IGJ1Zltwb3MrK107IF9iMzJbMl0gPSBidWZbcG9zKytdOyBfYjMyWzFdID0gYnVmW3BvcysrXTsgX2IzMlswXSA9IGJ1Zltwb3NdO1xuICAgICAgICAvL19iMzJbM10gPSBidWZbcG9zKzBdOyBfYjMyWzJdID0gYnVmW3BvcysxXTsgX2IzMlsxXSA9IGJ1Zltwb3MrMl07IF9iMzJbMF0gPSBidWZbcG9zKzNdO1xuICAgICAgICByZXR1cm4gX2ZwMzJbMF07XG4gICAgfVxuXG4gICAgd3JpdGVGbG9hdDMyQXJyYXkgPSBmdW5jdGlvbiB3cml0ZUZsb2F0MzJBcnJheSggYnVmLCB2LCBwb3MgKSB7XG4gICAgICAgIHBvcyA9IHBvcyB8fCAwO1xuICAgICAgICBfZnAzMlswXSA9IHY7XG4gICAgICAgIGJ1Zltwb3MrK10gPSBfYjMyWzBdOyBidWZbcG9zKytdID0gX2IzMlsxXTsgYnVmW3BvcysrXSA9IF9iMzJbMl07IGJ1Zltwb3NdID0gX2IzMlszXTtcbiAgICAgICAgLy9idWZbcG9zKzBdID0gX2IzMlswXTsgYnVmW3BvcysxXSA9IF9iMzJbMV07IGJ1Zltwb3MrMl0gPSBfYjMyWzJdOyBidWZbcG9zKzNdID0gX2IzMlszXTtcbiAgICB9XG5cbiAgICB3cml0ZUZsb2F0MzJBcnJheVJldiA9IGZ1bmN0aW9uIHdyaXRlRmxvYXQzMkFycmF5UmV2KCBidWYsIHYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIF9mcDMyWzBdID0gdjtcbiAgICAgICAgYnVmW3BvcysrXSA9IF9iMzJbM107IGJ1Zltwb3MrK10gPSBfYjMyWzJdOyBidWZbcG9zKytdID0gX2IzMlsxXTsgYnVmW3Bvc10gPSBfYjMyWzBdO1xuICAgICAgICAvL2J1Zltwb3MrMF0gPSBfYjMyWzNdOyBidWZbcG9zKzFdID0gX2IzMlsyXTsgYnVmW3BvcysyXSA9IF9iMzJbMV07IGJ1Zltwb3MrM10gPSBfYjMyWzBdO1xuICAgIH1cbn0pKCk7XG5cbih0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAnZnVuY3Rpb24nKSAmJiAoZnVuY3Rpb24oKXtcbiAgICB2YXIgX2ZwNjQgPSBuZXcgRmxvYXQ2NEFycmF5KDEpO1xuICAgIHZhciBfYjY0ID0gbmV3IFVpbnQ4QXJyYXkoX2ZwNjQuYnVmZmVyKTtcblxuICAgIHJlYWRGbG9hdDY0QXJyYXkgPSBmdW5jdGlvbiByZWFkRmxvYXQ2NEFycmF5KCBidWYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIGlmIChwb3MgPCAwIHx8IHBvcyArIDggPiBidWYubGVuZ3RoKSByZXR1cm4gMDtcbiAgICAgICAgLy9fYjY0WzBdID0gYnVmW3BvcysrXTsgX2I2NFsxXSA9IGJ1Zltwb3MrK107IF9iNjRbMl0gPSBidWZbcG9zKytdOyBfYjY0WzNdID0gYnVmW3BvcysrXTtcbiAgICAgICAgLy9fYjY0WzRdID0gYnVmW3BvcysrXTsgX2I2NFs1XSA9IGJ1Zltwb3MrK107IF9iNjRbNl0gPSBidWZbcG9zKytdOyBfYjY0WzddID0gYnVmW3Bvc107XG4gICAgICAgIF9iNjRbMF0gPSBidWZbcG9zKzBdOyBfYjY0WzFdID0gYnVmW3BvcysxXTsgX2I2NFsyXSA9IGJ1Zltwb3MrMl07IF9iNjRbM10gPSBidWZbcG9zKzNdO1xuICAgICAgICBfYjY0WzRdID0gYnVmW3Bvcys0XTsgX2I2NFs1XSA9IGJ1Zltwb3MrNV07IF9iNjRbNl0gPSBidWZbcG9zKzZdOyBfYjY0WzddID0gYnVmW3Bvcys3XTtcbiAgICAgICAgcmV0dXJuIF9mcDY0WzBdO1xuICAgIH1cblxuICAgIHJlYWRGbG9hdDY0QXJyYXlSZXYgPSBmdW5jdGlvbiByZWFkRmxvYXQ2NEFycmF5UmV2KCBidWYsIHBvcyApIHtcbiAgICAgICAgcG9zID0gcG9zIHx8IDA7XG4gICAgICAgIGlmIChwb3MgPCAwIHx8IHBvcyArIDggPiBidWYubGVuZ3RoKSByZXR1cm4gMDtcbiAgICAgICAgLy9fYjY0WzddID0gYnVmW3BvcysrXTsgX2I2NFs2XSA9IGJ1Zltwb3MrK107IF9iNjRbNV0gPSBidWZbcG9zKytdOyBfYjY0WzRdID0gYnVmW3BvcysrXTtcbiAgICAgICAgLy9fYjY0WzNdID0gYnVmW3BvcysrXTsgX2I2NFsyXSA9IGJ1Zltwb3MrK107IF9iNjRbMV0gPSBidWZbcG9zKytdOyBfYjY0WzBdID0gYnVmW3Bvc107XG4gICAgICAgIF9iNjRbN10gPSBidWZbcG9zKzBdOyBfYjY0WzZdID0gYnVmW3BvcysxXTsgX2I2NFs1XSA9IGJ1Zltwb3MrMl07IF9iNjRbNF0gPSBidWZbcG9zKzNdO1xuICAgICAgICBfYjY0WzNdID0gYnVmW3Bvcys0XTsgX2I2NFsyXSA9IGJ1Zltwb3MrNV07IF9iNjRbMV0gPSBidWZbcG9zKzZdOyBfYjY0WzBdID0gYnVmW3Bvcys3XTtcbiAgICAgICAgcmV0dXJuIF9mcDY0WzBdO1xuICAgIH1cblxuICAgIHdyaXRlRmxvYXQ2NEFycmF5ID0gZnVuY3Rpb24gd3JpdGVGbG9hdDY0QXJyYXkoIGJ1ZiwgdiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgX2ZwNjRbMF0gPSB2O1xuICAgICAgICBidWZbcG9zICsgMF0gPSBfYjY0WzBdOyBidWZbcG9zICsgMV0gPSBfYjY0WzFdOyBidWZbcG9zICsgMl0gPSBfYjY0WzJdOyBidWZbcG9zICsgM10gPSBfYjY0WzNdO1xuICAgICAgICBidWZbcG9zICsgNF0gPSBfYjY0WzRdOyBidWZbcG9zICsgNV0gPSBfYjY0WzVdOyBidWZbcG9zICsgNl0gPSBfYjY0WzZdOyBidWZbcG9zICsgN10gPSBfYjY0WzddO1xuICAgIH1cblxuICAgIHdyaXRlRmxvYXQ2NEFycmF5UmV2ID0gZnVuY3Rpb24gd3JpdGVGbG9hdDY0QXJyYXlSZXYoIGJ1ZiwgdiwgcG9zICkge1xuICAgICAgICBwb3MgPSBwb3MgfHwgMDtcbiAgICAgICAgX2ZwNjRbMF0gPSB2O1xuICAgICAgICBidWZbcG9zICsgMF0gPSBfYjY0WzddOyBidWZbcG9zICsgMV0gPSBfYjY0WzZdOyBidWZbcG9zICsgMl0gPSBfYjY0WzVdOyBidWZbcG9zICsgM10gPSBfYjY0WzRdO1xuICAgICAgICBidWZbcG9zICsgNF0gPSBfYjY0WzNdOyBidWZbcG9zICsgNV0gPSBfYjY0WzJdOyBidWZbcG9zICsgNl0gPSBfYjY0WzFdOyBidWZbcG9zICsgN10gPSBfYjY0WzBdO1xuICAgIH1cbn0pKCk7XG5cblxuLy8gYXJpdGhtZXRpYyBvcGVyYXRpb25zIHByZXNlcnZlIE5hTiwgYnV0IGxvZ2ljYWwgb3BzICgsID4+LCBldGMpIGNvbnZlcnQgdGhlbSB0byB6ZXJvXG4vLyBBc3NlbWJsZSB0aGUgd29yZCB0byBnZW5lcmF0ZSBOYU4gaWYgYW55IHJlYWRzIGFyZSB1bmRlZmluZWQgKG91dHNpZGUgdGhlIGJvdW5kcyBvZiB0aGUgYXJyYXkpLlxuZnVuY3Rpb24gcmVhZFdvcmQoIGJ1Ziwgb2ZmcywgZGlybiApIHtcbiAgICB2YXIgYSA9IGJ1ZltvZmZzKytdLCBiID0gYnVmW29mZnMrK10sIGMgPSBidWZbb2ZmcysrXSwgZCA9IGJ1ZltvZmZzXTtcbiAgICByZXR1cm4gKGRpcm4gPT09ICdiaWdlJylcbiAgICAgICAgPyAoKCgoKGEgKiAyNTYpICsgYikgKiAyNTYpICsgYykgKiAyNTYpICsgZFxuICAgICAgICA6ICgoKCgoZCAqIDI1NikgKyBjKSAqIDI1NikgKyBiKSAqIDI1NikgKyBhO1xufVxuXG5mdW5jdGlvbiB3cml0ZVdvcmQoIGJ1Ziwgdiwgb2ZmcywgZGlybiApIHtcbiAgICB2YXIgYSA9ICh2ID4+PiAyNCkgJiAweGZmLCBiID0gKHYgPj4gMTYpICYgMHhmZiwgYyA9ICh2ID4+IDgpICYgMHhmZiwgZCA9ICh2KSAmIDB4ZmY7XG4gICAgKGRpcm4gPT09ICdiaWdlJylcbiAgICAgICAgPyAoYnVmW29mZnMrK10gPSBhLCBidWZbb2ZmcysrXSA9IGIsIGJ1ZltvZmZzKytdID0gYywgYnVmW29mZnNdID0gZClcbiAgICAgICAgOiAoYnVmW29mZnMrK10gPSBkLCBidWZbb2ZmcysrXSA9IGMsIGJ1ZltvZmZzKytdID0gYiwgYnVmW29mZnNdID0gYSlcbn1cblxuLy8gd3JpdGUgdGhlIHR3by13b3JkIHZhbHVlIFtoaSxsb10gd2hlcmUgaGkgaG9sZHMgdGhlIDMyIG1zYiBiaXRzIGFuZCBsbyB0aGUgMzIgbHNiIGJpdHNcbmZ1bmN0aW9uIHdyaXRlRG91YmxlV29yZCggYnVmLCBoaSwgbG8sIG9mZnMsIGRpcm4gKSB7XG4gICAgaWYgKGRpcm4gPT09ICdiaWdlJykge1xuICAgICAgICB3cml0ZVdvcmQoYnVmLCBoaSwgb2ZmcywgZGlybik7XG4gICAgICAgIHdyaXRlV29yZChidWYsIGxvLCBvZmZzICsgNCwgZGlybik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3cml0ZVdvcmQoYnVmLCBsbywgb2ZmcywgZGlybik7XG4gICAgICAgIHdyaXRlV29yZChidWYsIGhpLCBvZmZzICsgNCwgZGlybik7XG4gICAgfVxufVxuXG4vLyBnaXZlbiBhbiBleHBvbmVudCBuLCByZXR1cm4gMioqblxuLy8gbiBpcyBhbHdheXMgYW4gaW50ZWdlciwgZmFzdGVyIHRvIHNoaWZ0IHdoZW4gcG9zc2libGVcbi8vIE5vdGUgdGhhdCBub2RlanMgTWF0aC5wb3coKSBpcyBmYXN0ZXIgdGhhbiBhIGxvb2t1cCB0YWJsZSAobWF5IGJlIGNhY2hpbmcpXG52YXIgXzJlWHAgPSBuZXcgQXJyYXkoKTsgZm9yICh2YXIgaT0wOyBpPDEyMDA7IGkrKykgXzJlWHBbaV0gPSBNYXRoLnBvdygyLCBpKTtcbnZhciBfMmVYbiA9IG5ldyBBcnJheSgpOyBmb3IgKHZhciBpPTA7IGk8MTIwMDsgaSsrKSBfMmVYbltpXSA9IE1hdGgucG93KDIsIC1pKTtcbmZ1bmN0aW9uIHBvdzIoIGV4cCApIHtcbiAgICByZXR1cm4gKGV4cCA+PSAwKSA/IF8yZVhwW2V4cF0gOiBfMmVYblstZXhwXTtcbiAgICAvL3JldHVybiAoZXhwID49IDApID8gKGV4cCA8ICAzMSA/ICgxIDw8IGV4cCkgOiAgICAgICAgTWF0aC5wb3coMiwgZXhwKSlcbiAgICAvLyAgICAgICAgICAgICAgICAgIDogKGV4cCA+IC0zMSA/ICgxIC8gKDEgPDwgLWV4cCkpIDogTWF0aC5wb3coMiwgZXhwKSk7XG59XG5cblxuLy8gZ2V0RmxvYXQoKSBmcm9tIHFic29uLCBodHRwczovL2dpdGh1Yi5jb20vYW5kcmFzcS9ub2RlLXFic29uOlxuLypcbiAqIGV4dHJhY3QgdGhlIDY0LWJpdCBsaXR0bGUtZW5kaWFuIGllZWUgNzU0IGZsb2F0aW5nLXBvaW50IHZhbHVlXG4gKiAgIHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RvdWJsZS1wcmVjaXNpb25fZmxvYXRpbmctcG9pbnRfZm9ybWF0XG4gKiAgIDEgYml0IHNpZ24gKyAxMSBiaXRzIGV4cG9uZW50ICsgKDEgaW1wbGljaXQgbWFudGlzc2EgMSBiaXQpICsgNTIgbWFudGlzc2EgYml0c1xuICovXG52YXIgX3JzaGlmdDMyID0gKDEgLyAweDEwMDAwMDAwMCk7ICAgICAgLy8gPj4gMzIgZm9yIGZsb2F0c1xudmFyIF9yc2hpZnQyMCA9ICgxIC8gMHgxMDAwMDApOyAgICAgICAgIC8vID4+IDIwIGZvciBmbG9hdHNcbnZhciBfbHNoaWZ0MzIgPSAoMSAqIDB4MTAwMDAwMDAwKTsgICAgICAvLyA8PCAzMlxudmFyIF9yc2hpZnQ1MiA9ICgxICogX3JzaGlmdDMyICogX3JzaGlmdDIwKTsgICAgLy8gPj4gNTJcbnZhciBfcnNoaWZ0MTAyMyA9IHBvdzIoLTEwMjMpOyAgICAgICAgICAvLyAyXi0xMDIzXG5mdW5jdGlvbiByZWFkRG91YmxlKCBidWYsIG9mZnNldCwgZGlybiApIHtcbiAgICB2YXIgdzAgPSByZWFkV29yZChidWYsIG9mZnNldCwgZGlybik7XG4gICAgdmFyIHcxID0gcmVhZFdvcmQoYnVmLCBvZmZzZXQgKyA0LCBkaXJuKTtcbiAgICB2YXIgaGlnaFdvcmQsIGxvd1dvcmQ7XG4gICAgKGRpcm4gPT09ICdiaWdlJykgPyAoaGlnaFdvcmQgPSB3MCwgbG93V29yZCA9IHcxKSA6IChoaWdoV29yZCA9IHcxLCBsb3dXb3JkID0gdzApO1xuXG4gICAgdmFyIG1hbnRpc3NhID0gKGhpZ2hXb3JkICYgMHgwMDBGRkZGRikgKiBfbHNoaWZ0MzIgKyBsb3dXb3JkO1xuICAgIHZhciBleHBvbmVudCA9IChoaWdoV29yZCAmIDB4N0ZGMDAwMDApID4+PiAyMDtcbiAgICB2YXIgc2lnbiA9IChoaWdoV29yZCA+PiAzMSkgfHwgMTsgICAvLyAtMSwgMSwgb3IgMSBpZiBOYU5cblxuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAoZXhwb25lbnQgPT09IDB4MDAwKSB7XG4gICAgICAgIC8vIHplcm8gaWYgIW1hbnRpc3NhLCBlbHNlIHN1Ym5vcm1hbCAobm9uLW5vcm1hbGl6ZWQgcmVkdWNlZCBwcmVjaXNpb24gc21hbGwgdmFsdWUpXG4gICAgICAgIC8vIHJlY292ZXIgbmVnYXRpdmUgemVybyAtMC4wIGFzIGRpc3RpbmN0IGZyb20gMC4wXG4gICAgICAgIC8vIHN1Ym5vcm1hbHMgZG8gbm90IGhhdmUgYW4gaW1wbGllZCBsZWFkaW5nIDEgYml0IGFuZCBhcmUgcG9zaXRpb25lZCAxIGJpdCB0byB0aGUgbGVmdFxuICAgICAgICB2YWx1ZSA9IG1hbnRpc3NhID8gKG1hbnRpc3NhICogcG93MigtNTIgKyAxIC0xMDIzKSkgOiAwLjA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cG9uZW50IDwgMHg3ZmYpIHtcbiAgICAgICAgLy8gbm9ybWFsaXplZCB2YWx1ZSB3aXRoIGFuIGltcGxpZWQgbGVhZGluZyAxIGJpdCBhbmQgMTAyMyBiaWFzZWQgZXhwb25lbnRcbiAgICAgICAgLy8gdGVzdCBmb3IgTmFOIHdpdGggKG1hbnRpc3NhID49IDApLCBhbmQgcmV0dXJuIDAgaWYgTmFOIGllIHJlYWQgZnJvbSBvdXRzaWRlIGJ1ZmZlciBib3VuZHNcbiAgICAgICAgdmFsdWUgPSAobWFudGlzc2EgPj0gMCkgPyAoMSArIG1hbnRpc3NhICogX3JzaGlmdDUyKSAqIHBvdzIoZXhwb25lbnQgLSAxMDIzKSA6IDAuMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEluZmluaXR5IGlmIHplcm8gbWFudGlzc2EgKCsvLSBwZXIgc2lnbiksIE5hTiBpZiBub256ZXJvIG1hbnRpc3NhXG4gICAgICAgIHZhbHVlID0gbWFudGlzc2EgPyBOYU4gOiBJbmZpbml0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2lnbiAqIHZhbHVlO1xufVxuXG4vL1xuLy8gTm90ZTogbm9kZS12OSBwcmVmZXJzICsyOCUgKHNpZ24gKiB2YWx1ZSksIG5vZGUgdjYgZG9lc250IGNhcmUsIG5vZGUgdjggbGlrZXMgKzE2JSAoLXZhbHVlIDogdmFsdWUpXG4vL1xuLy8gZmxvYXQzMjogMSBzaWduICsgOCBleHBvbmVudCArIDI0IG1hbnRpc3NhICgyMyBzdG9yZWQsIDEgaW1wbGllZClcbi8vIHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TaW5nbGUtcHJlY2lzaW9uX2Zsb2F0aW5nLXBvaW50X2Zvcm1hdFxuLy9cbi8vIEV4cG9uZW50ICAgICBNYW50aXNzYSA9PSAwICAgTWFudGlzc2EgPiAwICAgIFZhbHVlXG4vLyAwMCAgICAgICAgICAgKzAsIC0wICAgICAgICAgIGRlbm9ybWFsaXplZCAgICAyXiggIDEtMTI3KSAqICgwLiArIChtYW50aXNzYSAvIDJeMjMpKVxuLy8gMDAuLiBGRSAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkICAgICAgMl4oZXhwLTEyNykgKiAoMS4gKyAobWFudGlzc2EgLyAyXjIzKSlcbi8vIEZGICAgICAgICAgICArLy1JbmZpbml0eSAgICAgTmFOICAgICAgICAgICAgIC1cbi8vXG52YXIgX3JzaGlmdDIzID0gTWF0aC5wb3coMiwgLTIzKTsgICAgICAvLyA+PiAyMyBmb3IgZmxvYXRzXG52YXIgX3JzaGlmdDEyNyA9IE1hdGgucG93KDIsIC0xMjcpOyAgICAvLyAyXi0xMjdcbmZ1bmN0aW9uIHJlYWRGbG9hdCggYnVmLCBvZmZzZXQsIGRpcm4gKSB7XG4gICAgdmFyIHdvcmQgPSByZWFkV29yZChidWYsIG9mZnNldCwgZGlybik7XG4gICAgdmFyIG1hbnRpc3NhID0gKHdvcmQgJiAweDAwN0ZGRkZGKTtcbiAgICB2YXIgZXhwb25lbnQgPSAod29yZCAmIDB4N0Y4MDAwMDApID4+PiAyMztcbiAgICB2YXIgc2lnbiA9ICh3b3JkID4+IDMxKSB8fCAxOyAgICAgICAvLyAtMSwgMSwgb3IgMSBpZiBOYU5cblxuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAoZXhwb25lbnQgPT09IDB4MDAwKSB7XG4gICAgICAgIHZhbHVlID0gbWFudGlzc2EgPyBtYW50aXNzYSAqIF9yc2hpZnQyMyAqIDIgKiBfcnNoaWZ0MTI3IDogMC4wO1xuICAgIH1cbiAgICBlbHNlIGlmIChleHBvbmVudCA8IDB4ZmYpIHtcbiAgICAgICAgdmFsdWUgPSAoMSArIG1hbnRpc3NhICogX3JzaGlmdDIzKSAqIHBvdzIoZXhwb25lbnQgLSAxMjcpIC8vICogX3JzaGlmdDEyNztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gbWFudGlzc2EgPyBOYU4gOiBJbmZpbml0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2lnbiAqIHZhbHVlO1xuICAgIC8vcmV0dXJuICh3b3JkID4+PiAzMSkgPyAtdmFsdWUgOiB2YWx1ZTtcbn1cblxuLy8gZ2l2ZW4gYSBwb3NpdGl2ZSB2YWx1ZSB2LCBub3JtYWxpemUgaXQgdG8gYmV0d2VlbiAxIGFuZCBsZXNzIHRoYW4gMiB3aXRoIGEgYmluYXJ5IGV4cG9uZW50XG4vLyBUaGUgZXhwb25lbnQgaXMgdGhlIG51bWJlciBvZiBiaXQgcGxhY2VzIGl0IHdhcyBzaGlmdGVkLCBwb3NpdGl2ZSBpZiB2IHdhcyA+PSAyLlxuLy8gVGhlIHNwZWNpYWwgdmFsdWVzIDAsIC0wLCBOYU4sICtJbmZpbml0eSBhbmQgLUluZmluaXR5IGFyZSBub3QgaGFuZGxlZCBoZXJlLlxuLy8gTG9vcGluZyBpcyBmYXN0ZXIgdGhhbiAoTWF0aC5sb2codikgLyBNYXRoLkxOMikgaW4gbm9kZS12NiwgdjgsIGFuZCB2OS5cbi8vIFRoaXMgZnVuY3Rpb24gY2FuIGFjY291bnQgZm9yIGhhbGYgdGhlIHRpbWUgdGFrZW4gdG8gd3JpdGUgYSBkb3VibGUuXG52YXIgX3BhcnRzID0geyBleHA6IDAsIG1hbnQ6IDAgfTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZSggdiApIHtcbiAgICB2YXIgZXhwID0gMDtcblxuICAgIGlmICh2ID49IDIpIHtcbiAgICAgICAgZXhwID0gY291bnREb3VibGluZ3MoMSwgdik7XG4gICAgICAgIHYgKj0gcG93MigtZXhwKTtcbiAgICAgICAgLy8gaWYgZG91YmxlZCB0byBleGFjdGx5IHYvMiwgYWRqdXN0IHVwIHRvIHZcbiAgICAgICAgaWYgKHYgPj0gMikgeyB2IC89IDI7IGV4cCArPSAxIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodiA8IDEpIHtcbiAgICAgICAgZXhwID0gY291bnREb3VibGluZ3ModiwgMik7XG4gICAgICAgIC8vIGF2b2lkIHVzaW5nIHBvdzIgZXhwb25lbnRzID4gMTAyMywgdGhleSBvdmVyZmxvdyB0byBJbmZpbml0eVxuICAgICAgICBpZiAoZXhwIDw9IDEwMjMpIHYgKj0gcG93MihleHApO1xuICAgICAgICBlbHNlIHsgdiAqPSBwb3cyKGV4cCAtIDEwMCk7IHYgKj0gcG93MigxMDApOyB9XG4gICAgICAgIGV4cCA9IC1leHA7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcGFzcyBpbiBudW0gYml0cywgYW5kIG5vcm1hbGl6ZSBzdHJhaWdodCB0byBtYW50aXNzYSAvIGRlbm9ybVxuXG4gICAgX3BhcnRzLmV4cCA9IGV4cDtcbiAgICBfcGFydHMubWFudCA9IHY7XG4gICAgcmV0dXJuIF9wYXJ0cztcbn1cblxuLy8gY291bnQgaG93IG1hbnkgZG91YmxpbmdzIG9mIGEgYXJlIG5lZWRlZCBmb3IgaXQgYmUgY2xvc2UgdG8gYi5cbi8vIFJldHVybnMgYSBzaGlmdCBjb3VudCB0aGF0IGdyb3dzIChhKSB0byBhdCBsZWFzdCAoYi8yKSBidXQgbGVzcyB0aGFuIChiKS5cbi8vIERvdWJsaW5nIDEgdG93YXJkIHYgZW5zdXJlcyB0aGF0ICh2ID4+IG4pID49IDEgPCAyLFxuLy8gYW5kIGRvdWJsaW5nIGZyb20gdiB0b3dhcmQgMiBlbnN1cmVzIHRoYXQgKHYgPDwgbikgPj0gMSA8IDIuXG52YXIgXzJlMTkyID0gTWF0aC5wb3coMiwgMTkyKTtcbmZ1bmN0aW9uIGNvdW50RG91YmxpbmdzKCBhLCBiICkge1xuICAgIHZhciBuID0gMDtcblxuICAgIHdoaWxlIChhICogXzJlMTkyIDwgYikgeyBhICo9IF8yZTE5MjsgbiArPSAxOTIgfVxuICAgIHdoaWxlIChhICogMHgxMDAwMDAwMDAwMDAwMDAwMCA8IGIpIHsgYSAqPSAweDEwMDAwMDAwMDAwMDAwMDAwOyBuICs9IDY0IH1cbiAgICB3aGlsZSAoYSAqIDB4MTAwMDAgPCBiKSB7IGEgKj0gMHgxMDAwMDsgbiArPSAxNiB9XG4gICAgd2hpbGUgKGEgKiAweDQwIDwgYikgeyBhICo9IDB4NDA7IG4gKz0gNiB9XG4gICAgd2hpbGUgKGEgKiAyIDwgYikgeyBhICo9IDI7IG4gKz0gMSB9XG5cbiAgICByZXR1cm4gbjtcbn1cblxuLy8gcm91bmQgdGhlIGZyYWN0aW9uIGluIHYgYW5kIHNjYWxlIHVwIHRvIHNjYWxlID0gMl5uIGJpdHNcbi8vIGh0dHBzOi8vYmxvZy5hbmd1bGFyaW5kZXB0aC5jb20vaG93LXRvLXJvdW5kLWJpbmFyeS1mcmFjdGlvbnMtNjI1YzhmYTNhMWFmXG4vLyBSb3VuZGluZyBjYW4gY2F1c2UgdGhlIHNjYWxlZCB2YWx1ZSB0byBleGNlZWQgMl5uLlxuZnVuY3Rpb24gcm91bmRNYW50aXNzYSggdiwgc2NhbGUgKSB7XG4gICAgdiAqPSBzY2FsZTtcbiAgICAvLyByb3VuZCB0byBuZWFyZXN0LCBidXQgcm91bmQgYSAwLjUgdGllIHRvIGV2ZW4gKDAuNSB0byAwLjAgYW5kIDEuNSB0byAyLjApXG4gICAgLy8gcm91bmQgYWxsIG51bWJlcnMgd2l0aCBhIGZyYWN0aW9uIG90aGVyIHRoYW4gMS8yLCBhbmQgcm91bmQgdXAgb2RkIG51bWJlcnMgd2l0aFxuICAgIHJldHVybiAoKHYgLSBNYXRoLmZsb29yKHYpICE9PSAwLjUpIHx8ICh2ICYgMSkpID8gdiArIDAuNSA6IHY7XG59XG5cbi8vIGZsb2F0MzI6IDEgc2lnbiArIDggZXhwb25lbnQgKyAoMSBpbXBsaWVkIG1hbnRpc3NhIDEgYml0KSArIDIzIHN0b3JlZCBtYW50aXNzYSBiaXRzXG4vLyBOYU4gdHlwZXM6IHF1aWV0IE5hbiA9IHguZmYuOHh4eCwgc2lnbmFsaW5nIE5hTiA9IHguZmYuMHh4MSAobXNiIHplcm8sIGF0IGxlYXN0IG9uZSBvdGhlciBiaXQgc2V0KVxuLy8gSmF2YVNjcmlwdCBidWlsdC1pbiBOYU4gaXMgdGhlIG5vbi1zaWduYWxpbmcgN2ZjMDAwMDAsIGJ1dCBhcml0aG1ldGljIGNhbiB5aWVsZCBhIG5lZ2F0aXZlIE5hTiBmZmMwMDAwMC5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQoIGJ1Ziwgdiwgb2Zmc2V0LCBkaXJuICkge1xuICAgIHZhciBub3JtLCB3b3JkLCBzaWduID0gMDtcbiAgICBpZiAodiA8IDApIHsgc2lnbiA9IDB4ODAwMDAwMDA7IHYgPSAtdjsgfVxuXG4gICAgaWYgKCEgKHYgJiYgdiA8IEluZmluaXR5KSkge1xuICAgICAgICBpZiAodiA9PT0gMCkgeyAgICAgICAgICAgICAgICAgIC8vIC0wLCArMFxuICAgICAgICAgICAgd29yZCA9ICgxL3YgPCAwKSA/IDB4ODAwMDAwMDAgOiAweDAwMDAwMDAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHYgPT09IEluZmluaXR5KSB7ICAgICAgLy8gLUluZmluaXR5LCArSW5maW5pdHlcbiAgICAgICAgICAgIHdvcmQgPSBzaWduIHwgMHg3RjgwMDAwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5hTiAtIHBvc2l0aXZlLCBub24tc2lnbmFsaW5nXG4gICAgICAgICAgICB3b3JkID0gMHg3RkMwMDAwMDtcbiAgICAgICAgfVxuICAgICAgICB3cml0ZVdvcmQoYnVmLCB3b3JkLCBvZmZzZXQsIGRpcm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9ybSA9IG5vcm1hbGl6ZSh2KTsgICAgICAgICAgICAvLyBzZXBhcmF0ZSBleHBvbmVudCBhbmQgbWFudGlzc2FcbiAgICAgICAgbm9ybS5leHAgKz0gMTI3OyAgICAgICAgICAgICAgICAvLyBiaWFzIGV4cG9uZW50XG5cbiAgICAgICAgaWYgKG5vcm0uZXhwIDw9IDApIHsgICAgICAgICAgICAvLyBkZW5vcm1hbGl6ZWQgbnVtYmVyXG4gICAgICAgICAgICBpZiAobm9ybS5leHAgPD0gLTI1KSB7ICAgICAgLy8gdG9vIHNtYWxsLCB1bmRlcmZsb3cgdG8gemVyby4gIC0yNCBtaWdodCByb3VuZCB1cCB0aG91Z2guXG4gICAgICAgICAgICAgICAgbm9ybS5tYW50ID0gMDtcbiAgICAgICAgICAgICAgICBub3JtLmV4cCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgLy8gZGVub3JtYWxpemVcbiAgICAgICAgICAgICAgICBub3JtLm1hbnQgPSByb3VuZE1hbnRpc3NhKG5vcm0ubWFudCwgcG93MigyMiArIG5vcm0uZXhwKSk7XG4gICAgICAgICAgICAgICAgbm9ybS5leHAgPSAwOyAgICAgICAgICAgLy8gcm91bmRpbmcgY2FuIGNhcnJ5IG91dCBhbmQgcmUtbm9ybWFsaXplIHRoZSBudW1iZXJcbiAgICAgICAgICAgICAgICBpZiAobm9ybS5tYW50ID49IDB4ODAwMDAwKSB7IG5vcm0ubWFudCAtPSAweDgwMDAwMDsgbm9ybS5leHAgKz0gMSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3JtLm1hbnQgPSByb3VuZE1hbnRpc3NhKG5vcm0ubWFudCAtIDEsIDB4ODAwMDAwKTtcbiAgICAgICAgICAgIC8vIGlmIHJvdW5kaW5nIG92ZXJmbG93ZWQgaW50byB0aGUgaGlkZGVuIDFzIHBsYWNlLCBoaWRlIGl0IGFuZCBhZGp1c3QgdGhlIGV4cG9uZW50XG4gICAgICAgICAgICBpZiAobm9ybS5tYW50ID49IDB4ODAwMDAwKSB7IG5vcm0ubWFudCAtPSAweDgwMDAwMDsgbm9ybS5leHAgKz0gMSB9XG4gICAgICAgICAgICBpZiAobm9ybS5leHAgPiAyNTQpIHsgICAgICAgLy8gb3ZlcmZsb3cgdG8gSW5maW5pdHlcbiAgICAgICAgICAgICAgICBub3JtLm1hbnQgPSAwO1xuICAgICAgICAgICAgICAgIG5vcm0uZXhwID0gMjU1O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd29yZCA9IHNpZ24gfCAobm9ybS5leHAgPDwgMjMpIHwgbm9ybS5tYW50O1xuICAgICAgICB3cml0ZVdvcmQoYnVmLCB3b3JkLCBvZmZzZXQsIGRpcm4pO1xuICAgIH1cbn1cblxuLy8gZG91YmxlNjQ6IDEgYml0IHNpZ24gKyAxMSBiaXRzIGV4cG9uZW50ICsgKDEgaW1wbGllZCBtYW50aXNzYSAxIGJpdCkgKyA1MiBzdG9yZWQgbWFudGlzc2EgYml0c1xuLy8gV3JpdGluZyBkb3VibGVzIGlzIHNpbXBsZXIgdGhhbiBmbG9hdHMsIGJlY2F1c2UgdGhlIGludGVybmFsIGphdmFzY3JpcHQgNjQtYml0IGZsb2F0c1xuLy8gYXJlIGlkZW50aWNhbCB0byB0aGUgc3RvcmVkIHJlcHJlc2VudGF0aW9uLCBhbmQgdGh1cyB3aWxsIG5vdCBvdmVyZmxvdyBvciB1bmRlcmZsb3cuXG52YXIgZG91YmxlQXJyYXkgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgZG91YmxlQnVmID0gbmV3IEJ1ZmZlcig4KTtcbnZhciBfMmU1MiA9IE1hdGgucG93KDIsIDUyKTtcbmZ1bmN0aW9uIHdyaXRlRG91YmxlKCBidWYsIHYsIG9mZnNldCwgZGlybiApIHtcbiAgICB2YXIgbm9ybSwgaGlnaFdvcmQsIGxvd1dvcmQsIHNpZ24gPSAwO1xuICAgIGlmICh2IDwgMCkgeyBzaWduID0gMHg4MDAwMDAwMDsgdiA9IC12OyB9XG5cbiAgICBpZiAoISAodiAmJiB2IDwgSW5maW5pdHkpKSB7XG4gICAgICAgIGlmICh2ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgLy8gLTAsICswXG4gICAgICAgICAgICBoaWdoV29yZCA9ICgxL3YgPCAwKSA/IDB4ODAwMDAwMDAgOiAwO1xuICAgICAgICAgICAgbG93V29yZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA9PT0gSW5maW5pdHkpIHsgICAgICAvLyAtSW5maW5pdHksICtJbmZpbml0eVxuICAgICAgICAgICAgaGlnaFdvcmQgPSAoc2lnbiArIDB4N0ZGMDAwMDApO1xuICAgICAgICAgICAgbG93V29yZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYU4gLSBwb3NpdGl2ZSwgbm9uLXNpZ25hbGluZ1xuICAgICAgICAgICAgaGlnaFdvcmQgPSAweDdGRjgwMDAwO1xuICAgICAgICAgICAgbG93V29yZCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgd3JpdGVEb3VibGVXb3JkKGJ1ZiwgaGlnaFdvcmQsIGxvd1dvcmQsIG9mZnNldCwgZGlybik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub3JtID0gbm9ybWFsaXplKHYpOyAgICAgICAgICAgIC8vIHNlcGFyYXRlIGV4cG9uZW50IGFuZCBtYW50aXNzYVxuICAgICAgICBub3JtLmV4cCArPSAxMDIzOyAgICAgICAgICAgICAgIC8vIGJpYXMgZXhwb25lbnRcblxuICAgICAgICBpZiAobm9ybS5leHAgPD0gMCkgeyAgICAgICAgICAgIC8vIGRlbm9ybWFsaXplZFxuICAgICAgICAgICAgLy8gSmF2YVNjcmlwdCBudW1iZXJzIGNhbiBub3QgaG9sZCB2YWx1ZXMgc21hbGwgZW5vdWdoIHRvIHVuZGVyZmxvd1xuICAgICAgICAgICAgLy8gYW5kIG5vIG5lZWQgdG8gcm91bmQsIGFsbCBiaXRzIHdpbGwgYmUgd3JpdHRlblxuICAgICAgICAgICAgbm9ybS5tYW50ICo9IHBvdzIoNTEgKyBub3JtLmV4cCk7XG4gICAgICAgICAgICBub3JtLmV4cCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBubyBuZWVkIHRvIHJvdW5kLCBhbGwgYml0cyB3aWxsIGJlIHdyaXR0ZW5cbiAgICAgICAgICAgIG5vcm0ubWFudCA9IChub3JtLm1hbnQgLSAxKSAqIF8yZTUyO1xuICAgICAgICB9XG5cbiAgICAgICAgaGlnaFdvcmQgPSBzaWduIHwgKG5vcm0uZXhwIDw8IDIwKSB8IChub3JtLm1hbnQgLyAweDEwMDAwMDAwMCk7XG4gICAgICAgIGxvd1dvcmQgPSBub3JtLm1hbnQgPj4+IDA7XG4gICAgICAgIHdyaXRlRG91YmxlV29yZChidWYsIGhpZ2hXb3JkLCBsb3dXb3JkLCBvZmZzZXQsIGRpcm4pO1xuICAgIH1cbn1cblxuXG47KGZ1bmN0aW9uIGluc3RhbGwoKSB7XG4gICAgdmFyIGV4cG9ydHMgPSB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyB8fCB0aGlzO1xuXG4gICAgZXhwb3J0cy5yZWFkV29yZCA9IHJlYWRXb3JkO1xuICAgIGV4cG9ydHMud3JpdGVXb3JkID0gd3JpdGVXb3JkO1xuICAgIGV4cG9ydHMud3JpdGVEb3VibGVXb3JkID0gd3JpdGVEb3VibGVXb3JkO1xuXG4gICAgZXhwb3J0cy5yZWFkRmxvYXQgPSByZWFkRmxvYXQ7XG4gICAgZXhwb3J0cy53cml0ZUZsb2F0ID0gd3JpdGVGbG9hdDtcbiAgICBleHBvcnRzLnJlYWREb3VibGUgPSByZWFkRG91YmxlO1xuICAgIGV4cG9ydHMud3JpdGVEb3VibGUgPSB3cml0ZURvdWJsZTtcblxuICAgIC8vIGV4cG9zZSB0aGUgaW1wbGVtZW50YXRpb24gdG8gdGhlIHRlc3RzXG4gICAgZXhwb3J0cy5fdXNlRmxvYXRBcnJheSA9IGZ1bmN0aW9uKCB5ZXNubyApIHtcbiAgICAgICAgZXhwb3J0cy5fdXNpbmdGbG9hdEFycmF5ID0geWVzbm87XG4gICAgICAgIGlmICh5ZXNubykge1xuICAgICAgICAgICAgLy8gc29mdHdhcmUgY29udmVyc2lvbiBpcyBmYXN0ZXIgZm9yIGZsb2F0MzIgdGhhbiBGbG9hdDMyQXJyYXlcbiAgICAgICAgICAgIC8vIE9ubHkgcmVhZCB2aWEgRmxvYXQzMkFycmF5IGlmIHllc25vID09ICdmdWxsJy5cbiAgICAgICAgICAgIGlmICh5ZXNubyA9PSAnZnVsbCcpIGV4cG9ydHMucmVhZEZsb2F0TEUgPSBpc0JpZ2VDcHUgPyByZWFkRmxvYXQzMkFycmF5UmV2IDogcmVhZEZsb2F0MzJBcnJheTtcbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdExFID0gaXNCaWdlQ3B1ID8gd3JpdGVGbG9hdDMyQXJyYXlSZXYgOiB3cml0ZUZsb2F0MzJBcnJheTtcbiAgICAgICAgICAgIGlmICh5ZXNubyA9PSAnZnVsbCcpIGV4cG9ydHMucmVhZEZsb2F0QkUgPSBpc0JpZ2VDcHUgPyByZWFkRmxvYXQzMkFycmF5IDogcmVhZEZsb2F0MzJBcnJheVJldjtcbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdEJFID0gaXNCaWdlQ3B1ID8gd3JpdGVGbG9hdDMyQXJyYXkgOiB3cml0ZUZsb2F0MzJBcnJheVJldjtcblxuICAgICAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlTEUgPSBpc0JpZ2VDcHUgPyByZWFkRmxvYXQ2NEFycmF5UmV2IDogcmVhZEZsb2F0NjRBcnJheTtcbiAgICAgICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGlzQmlnZUNwdSA/IHdyaXRlRmxvYXQ2NEFycmF5UmV2IDogd3JpdGVGbG9hdDY0QXJyYXk7XG4gICAgICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGlzQmlnZUNwdSA/IHJlYWRGbG9hdDY0QXJyYXkgOiByZWFkRmxvYXQ2NEFycmF5UmV2O1xuICAgICAgICAgICAgZXhwb3J0cy53cml0ZURvdWJsZUJFID0gaXNCaWdlQ3B1ID8gd3JpdGVGbG9hdDY0QXJyYXkgOiB3cml0ZUZsb2F0NjRBcnJheVJldjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydHMuX3VzaW5nRmxvYXRBcnJheSA9ICcnO1xuICAgICAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFKCBidWYsIG9mZnNldCApIHsgcmV0dXJuIGV4cG9ydHMucmVhZEZsb2F0KGJ1Ziwgb2Zmc2V0IHx8IDAsICdsZScpOyB9XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSggYnVmLCB2LCBvZmZzZXQgKSB7IGV4cG9ydHMud3JpdGVGbG9hdChidWYsIHYsIG9mZnNldCB8fCAwLCAnbGUnKTsgfTtcbiAgICAgICAgICAgIGV4cG9ydHMucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSggYnVmLCBvZmZzZXQgKSB7IHJldHVybiBleHBvcnRzLnJlYWRGbG9hdChidWYsIG9mZnNldCB8fCAwLCAnYmlnZScpOyB9XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSggYnVmLCB2LCBvZmZzZXQgKSB7IGV4cG9ydHMud3JpdGVGbG9hdChidWYsIHYsIG9mZnNldCB8fCAwLCAnYmlnZScpOyB9XG5cbiAgICAgICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFKCBidWYsIG9mZnNldCApIHsgcmV0dXJuIGV4cG9ydHMucmVhZERvdWJsZShidWYsIG9mZnNldCB8fCAwLCAnbGUnKTsgfVxuICAgICAgICAgICAgZXhwb3J0cy53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSggYnVmLCB2LCBvZmZzZXQgKSB7IGV4cG9ydHMud3JpdGVEb3VibGUoYnVmLCB2LCBvZmZzZXQgfHwgMCwgJ2xlJyk7IH1cbiAgICAgICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFKCBidWYsIG9mZnNldCApIHsgcmV0dXJuIGV4cG9ydHMucmVhZERvdWJsZShidWYsIG9mZnNldCB8fCAwLCAnYmlnZScpOyB9XG4gICAgICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFKCBidWYsIHYsIG9mZnNldCApIHsgZXhwb3J0cy53cml0ZURvdWJsZShidWYsIHYsIG9mZnNldCB8fCAwLCAnYmlnZScpOyB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBleHBvc2UgdGhlIGNwdSBlbmRpYW5pc20gdG8gdGhlIHRlc3RzXG4gICAgZXhwb3J0cy5fZ2V0QmlnZUNwdSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaXNCaWdlQ3B1IH07XG4gICAgZXhwb3J0cy5fc2V0QmlnZUNwdSA9IGZ1bmN0aW9uKHllc25vKSB7IGlzQmlnZUNwdSA9IHllc25vIH07XG5cbiAgICAvLyBieSBkZWZhdWx0IGV4cG9ydCB0aGUgc29mdHdhcmUgY29udmVyc2lvbiBmdW5jdGlvbnMsIHRoZW5cbiAgICAvLyBpZiBhdmFpbGFibGUsIGNvbnZlcnQgYnkgY2FzdGluZyBhIEZsb2F0QXJyYXkgdG8gYSBieXRlIGFycmF5XG4gICAgZXhwb3J0cy5fdXNlRmxvYXRBcnJheShmYWxzZSk7XG4gICAgZXhwb3J0cy5fdXNlRmxvYXRBcnJheShyZWFkRmxvYXQzMkFycmF5ICYmIHJlYWRGbG9hdDY0QXJyYXkgJiYgJ2Zhc3Rlc3QnKTtcblxuICAgIC8vIGFjY2VsZXJhdGUgYWNjZXNzXG4gICAgaW5zdGFsbC5wcm90b3R5cGUgPSBleHBvcnRzO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBCeXRlQnVmZmVyID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpO1xudmFyIFN0cnVjdCA9IHJlcXVpcmUoJy4vc3RydWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZSxcbiAgdG9CdWZmZXI6IHRvQnVmZmVyLFxuICBmcm9tQnVmZmVyOiBmcm9tQnVmZmVyXG5cbiAgLyoqXG4gICAgQHN1bW1hcnkgQ3JlYXRlIGEgc2VyaWFsaXplciBmb3IgZWFjaCBkZWZpbml0aW9uLlxuICAgIEByZXR1cm4ge0NyZWF0ZVN0cnVjdH1cbiAgKi9cbn07ZnVuY3Rpb24gY3JlYXRlKGRlZmluaXRpb25zLCB0eXBlcykge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0eXBlcy5jb25maWc7XG5cbiAgdmFyIGVycm9ycyA9IFtdO1xuICBpZiAoIWNvbmZpZy5zb3J0KSB7XG4gICAgY29uZmlnLnNvcnQgPSB7fTtcbiAgfVxuXG4gIC8vIEJhc2ljIHN0cnVjdHVyZSB2YWxpZGF0aW9uXG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9ucykge1xuICAgIHZhciB2YWx1ZSA9IGRlZmluaXRpb25zW2tleV07XG4gICAgdmFyIGJhc2UgPSB2YWx1ZS5iYXNlLFxuICAgICAgICBmaWVsZHMgPSB2YWx1ZS5maWVsZHM7XG5cbiAgICB2YXIgdHlwZU9mVmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcbiAgICBpZiAodHlwZU9mVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoIWJhc2UgJiYgIWZpZWxkcykge1xuICAgICAgICBlcnJvcnMucHVzaCgnRXhwZWN0aW5nICcgKyBrZXkgKyAnLmZpZWxkcyBvciAnICsga2V5ICsgJy5iYXNlJyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2UgJiYgdHlwZW9mIGJhc2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdFeHBlY3Rpbmcgc3RyaW5nICcgKyBrZXkgKyAnLmJhc2UnKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgaWYgKCh0eXBlb2YgZmllbGRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihmaWVsZHMpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCgnRXhwZWN0aW5nIG9iamVjdCAnICsga2V5ICsgJy5maWVsZHMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKHZhciBmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmllbGRzW2ZpZWxkXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgZXJyb3JzLnB1c2goJ0V4cGVjdGluZyBzdHJpbmcgaW4gJyArIGtleSArICcuZmllbGRzLicgKyBmaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlT2ZWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGVycm9ycy5wdXNoKCdFeHBlY3Rpbmcgb2JqZWN0IG9yIHN0cmluZyB1bmRlciAnICsga2V5ICsgJywgaW5zdGVhZCBnb3QgJyArICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICB9XG5cbiAgLy8gS2V5cyB3aXRoIG9iamVjdHMgYXJlIHN0cnVjdHNcbiAgdmFyIHN0cnVjdHMgPSB7fTtcbiAgZm9yICh2YXIgX2tleSBpbiBkZWZpbml0aW9ucykge1xuICAgIHZhciBfdmFsdWUgPSBkZWZpbml0aW9uc1tfa2V5XTtcbiAgICBpZiAoKHR5cGVvZiBfdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF92YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgc3RydWN0c1tfa2V5XSA9IFN0cnVjdChfa2V5LCBjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlc29sdmUgdXNlci1mcmllbmRseSB0eXBlZGVmIG5hbWVzIHBvaW50aW5nIHRvIGEgbmF0aXZlIHR5cGUgKG9yIGFub3RoZXIgdHlwZWRlZilcbiAgZm9yICh2YXIgX2tleTIgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICB2YXIgX3ZhbHVlMiA9IGRlZmluaXRpb25zW19rZXkyXTtcbiAgICBpZiAodHlwZW9mIF92YWx1ZTIgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVzW192YWx1ZTJdO1xuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgdHlwZXNbX2tleTJdID0gdHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGV4YW1wbGU6IGtleSA9PT0gJ2ZpZWxkcycgJiYgdmFsdWUgPT09IGZpZWxkW11cbiAgICAgICAgdmFyIHN0cnVjdCA9IGdldFR5cGVPclN0cnVjdChfa2V5MiwgX3ZhbHVlMik7IC8vIHR5cGUgPSB2ZWN0b3IoZmllbGQpXG4gICAgICAgIGlmIChzdHJ1Y3QpIHtcbiAgICAgICAgICBzdHJ1Y3RzW19rZXkyXSA9IHN0cnVjdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCgnVW5yZWNvZ25pemVkIHR5cGUgb3Igc3RydWN0ICcgKyBfa2V5MiArICcuJyArIF92YWx1ZTIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU3RydWN0cyBjYW4gaW5oZXJpdCBhbm90aGVyIHN0cnVjdCwgdGhleSB3aWxsIHNoYXJlIHRoZSBzYW1lIGluc3RhbmNlXG4gIGZvciAodmFyIF9rZXkzIGluIGRlZmluaXRpb25zKSB7XG4gICAgdmFyIHRoaXNTdHJ1Y3QgPSBzdHJ1Y3RzW19rZXkzXTtcbiAgICBpZiAoIXRoaXNTdHJ1Y3QpIGNvbnRpbnVlO1xuICAgIHZhciBfdmFsdWUzID0gZGVmaW5pdGlvbnNbX2tleTNdO1xuICAgIGlmICgodHlwZW9mIF92YWx1ZTMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF92YWx1ZTMpKSA9PT0gJ29iamVjdCcgJiYgX3ZhbHVlMy5iYXNlKSB7XG4gICAgICB2YXIgYmFzZSA9IF92YWx1ZTMuYmFzZTtcbiAgICAgIHZhciBiYXNlU3RydWN0ID0gc3RydWN0c1tiYXNlXTtcbiAgICAgIGlmICghYmFzZVN0cnVjdCkge1xuICAgICAgICBlcnJvcnMucHVzaCgnTWlzc2luZyAnICsgYmFzZSArICcgaW4gJyArIF9rZXkzICsgJy5iYXNlJyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpc1N0cnVjdC5hZGQoJycsIHN0cnVjdFB0cihiYXNlU3RydWN0KSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ3JlYXRlIHR5cGVzIGZyb20gYSBzdHJpbmcgKGV4IHZlY3RvcltUeXBlXSlcbiAgZnVuY3Rpb24gZ2V0VHlwZU9yU3RydWN0KGtleSwgVHlwZSwgdHlwZUFyZ3MsIGZpZWxkTmFtZSkge1xuICAgIHZhciB0eXBlYXR0eSA9IHBhcnNlVHlwZShUeXBlKTtcbiAgICBpZiAoIXR5cGVhdHR5KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbmFtZSA9IHR5cGVhdHR5Lm5hbWUsXG4gICAgICAgIGFubm90YXRpb24gPSB0eXBlYXR0eS5hbm5vdGF0aW9uLFxuICAgICAgICBhcnJheVR5cGUgPSB0eXBlYXR0eS5hcnJheVR5cGU7XG5cbiAgICB2YXIgcmV0ID0gdm9pZCAwO1xuICAgIGlmIChhbm5vdGF0aW9uKSB7XG4gICAgICAvLyBhbnlfdHlwZTxmaWVsZF9uYW1lLCB0eXBlX25hbWU+XG4gICAgICB2YXIgX3R5cGUgPSB0eXBlc1tuYW1lXTtcbiAgICAgIGlmIChfdHlwZSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdNaXNzaW5nICcgKyBuYW1lICsgJyBpbiAnICsgVHlwZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGFublR5cGVzID0gW107XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gYW5ub3RhdGlvbltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgYW5uVHlwZU5hbWUgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIHZhciBhbm5UeXBlID0gZ2V0VHlwZU9yU3RydWN0KGtleSwgYW5uVHlwZU5hbWUsIG51bGwsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgaWYgKCFhbm5UeXBlKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCgnTWlzc2luZyAnICsgYW5uVHlwZU5hbWUgKyAnIGluICcgKyBUeXBlKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbm5UeXBlcy5wdXNoKGFublR5cGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gX3R5cGUoYW5uVHlwZXMpO1xuICAgIH0gZWxzZSBpZiAoYXJyYXlUeXBlID09IG51bGwpIHtcbiAgICAgIC8vIEFueVR5cGVcbiAgICAgIHZhciBmaWVsZFN0cnVjdCA9IHN0cnVjdHNbbmFtZV07XG4gICAgICBpZiAoZmllbGRTdHJ1Y3QpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkU3RydWN0O1xuICAgICAgfVxuXG4gICAgICB2YXIgX3R5cGUyID0gdHlwZXNbbmFtZV07XG4gICAgICBpZiAoIV90eXBlMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gdHlwZXMgbmVlZCB0byBiZSBpbnN0YW50aWF0ZWRcbiAgICAgIHJldCA9IF90eXBlMih0eXBlQXJncyk7XG4gICAgfSBlbHNlIGlmIChhcnJheVR5cGUgPT09ICcnKSB7XG4gICAgICAvLyBBbnlUeXBlW11cbiAgICAgIHZhciBuYW1lVHlwZSA9IGdldFR5cGVPclN0cnVjdChrZXksIHR5cGVhdHR5Lm5hbWUsIG51bGwsIGZpZWxkTmFtZSk7XG4gICAgICBpZiAoIW5hbWVUeXBlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgc29ydCA9IGNvbmZpZy5zb3J0W2tleSArICcuJyArIGZpZWxkTmFtZV0gfHwgZmFsc2U7XG4gICAgICAvLyBjb25zb2xlLmxvZygnc29ydD8nLCBgJHtrZXl9LiR7ZmllbGROYW1lfWAsIHNvcnQsIGNvbmZpZy5zb3J0KVxuICAgICAgcmV0ID0gdHlwZXMudmVjdG9yKG5hbWVUeXBlLCBzb3J0KTtcbiAgICB9IGVsc2UgaWYgKGFycmF5VHlwZS5sZW5ndGggPiAwKSB7XG4gICAgICAvLyB2ZWN0b3JbVHlwZV1cbiAgICAgIHZhciBhcnJheVRzID0gZ2V0VHlwZU9yU3RydWN0KGtleSwgdHlwZWF0dHkuYXJyYXlUeXBlLCBudWxsLCBmaWVsZE5hbWUpO1xuICAgICAgaWYgKCFhcnJheVRzKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdNaXNzaW5nICcgKyB0eXBlYXR0eS5hcnJheVR5cGUgKyAnIGluICcgKyBUeXBlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgYmFzZVRzID0gZ2V0VHlwZU9yU3RydWN0KGtleSwgdHlwZWF0dHkubmFtZSwgYXJyYXlUcywgZmllbGROYW1lKTtcbiAgICAgIGlmICghYmFzZVRzKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdNaXNzaW5nICcgKyB0eXBlYXR0eS5uYW1lICsgJyBpbiAnICsgVHlwZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0ID0gYmFzZVRzO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZWF0dHkub3B0aW9uYWwgPyB0eXBlcy5vcHRpb25hbChyZXQpIDogcmV0O1xuICB9XG5cbiAgLy8gQWRkIGFsbCB0aGUgZmllbGRzLiAgVGhhbmtzIHRvIHN0cnVjdFB0ciBubyBuZWVkIHRvIGxvb2sgYXQgYmFzZSB0eXBlcy5cbiAgZm9yICh2YXIgX2tleTQgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICB2YXIgX3RoaXNTdHJ1Y3QgPSBzdHJ1Y3RzW19rZXk0XTtcbiAgICBpZiAoIV90aGlzU3RydWN0KSBjb250aW51ZTtcbiAgICB2YXIgX3ZhbHVlNCA9IGRlZmluaXRpb25zW19rZXk0XTtcbiAgICBpZiAoIV92YWx1ZTQuZmllbGRzKSBjb250aW51ZTtcbiAgICB2YXIgZmllbGRzID0gX3ZhbHVlNC5maWVsZHM7XG5cbiAgICBmb3IgKHZhciBGaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgIHZhciBUeXBlID0gZmllbGRzW0ZpZWxkXTtcbiAgICAgIHZhciB0cyA9IGdldFR5cGVPclN0cnVjdChfa2V5NCwgVHlwZSwgbnVsbCwgRmllbGQpO1xuICAgICAgaWYgKCF0cykge1xuICAgICAgICBlcnJvcnMucHVzaCgnTWlzc2luZyAnICsgVHlwZSArICcgaW4gJyArIF9rZXk0ICsgJy5maWVsZHMuJyArIEZpZWxkKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBfdGhpc1N0cnVjdC5hZGQoRmllbGQsIHRzKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgIC8vICdzdHJ1Y3RzJyBjb3VsZCBjb250YWluIGludmFsaWQgcmVmZXJlbmNlc1xuICAgIHJldHVybiB7IGVycm9yczogZXJyb3JzIH07XG4gIH1cblxuICByZXR1cm4geyBlcnJvcnM6IGVycm9ycywgc3RydWN0czogc3RydWN0cyB9O1xufVxuXG52YXIgcGFyc2VUeXBlID0gZnVuY3Rpb24gcGFyc2VUeXBlKG5hbWUpIHtcbiAgaWYgKCFuYW1lIHx8IHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbmFtZSA9IG5hbWUudHJpbSgpO1xuXG4gIHZhciBhbm5vdGF0aW9uTWF0Y2ggPSBuYW1lLm1hdGNoKC88KC4qKT4vKTtcbiAgaWYgKGFubm90YXRpb25NYXRjaCkge1xuICAgIHZhciBhbm5vdGF0aW9uID0gYW5ub3RhdGlvbk1hdGNoID8gYW5ub3RhdGlvbk1hdGNoWzFdLnJlcGxhY2UoLyAvZywgJycpLnNwbGl0KCcsJykgOiBudWxsO1xuXG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZShhbm5vdGF0aW9uTWF0Y2hbMF0sICcnKS50cmltKCk7XG4gICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgYW5ub3RhdGlvbjogYW5ub3RhdGlvbiB9O1xuICB9XG5cbiAgdmFyIGFycmF5TWF0Y2ggPSBuYW1lLm1hdGNoKC9cXFsoLiopXFxdLyk7XG4gIHZhciBhcnJheVR5cGUgPSBhcnJheU1hdGNoID8gYXJyYXlNYXRjaFsxXS50cmltKCkgOiBudWxsO1xuXG4gIGlmIChhcnJheU1hdGNoKSB7XG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZShhcnJheU1hdGNoWzBdLCAnJykudHJpbSgpO1xuICB9XG5cbiAgdmFyIG9wdGlvbmFsID0gZmFsc2U7XG4gIGlmICgvXFw/JC8udGVzdChuYW1lKSkge1xuICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCAtIDEpO1xuICAgIG9wdGlvbmFsID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4geyBuYW1lOiBuYW1lLCBhcnJheVR5cGU6IGFycmF5VHlwZSwgb3B0aW9uYWw6IG9wdGlvbmFsIH07XG59O1xuXG4vKipcbiAgQmFzZSB0eXBlcyBhbGwgcG9pbnQgdG8gdGhlIHNhbWUgc3RydWN0LlxuXG4gIE5vdGUsIGFwcGVuZEJ5dGVCdWZmZXIgaGFzIG5vIHJldHVybiB0eXBlLlxuKi9cbnZhciBzdHJ1Y3RQdHIgPSBmdW5jdGlvbiBzdHJ1Y3RQdHIodHlwZSkge1xuICByZXR1cm4ge1xuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICByZXR1cm4gdHlwZS5mcm9tQnl0ZUJ1ZmZlcihiKTtcbiAgICB9LFxuICAgIGFwcGVuZEJ5dGVCdWZmZXI6IGZ1bmN0aW9uIGFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpIHtcbiAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbiBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZS5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9LFxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiB0b09iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGUudG9PYmplY3QodmFsdWUpO1xuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIHRvQnVmZmVyKHR5cGUsIHZhbHVlKSB7XG4gIHZhciBzdHJ1Y3QgPSB0eXBlLmZyb21PYmplY3QodmFsdWUpO1xuICByZXR1cm4gQnVmZmVyLmZyb20odG9CeXRlQnVmZmVyKHR5cGUsIHN0cnVjdCkudG9CaW5hcnkoKSwgJ2JpbmFyeScpO1xufVxuXG5mdW5jdGlvbiBmcm9tQnVmZmVyKHR5cGUsIGJ1ZmZlcikge1xuICB2YXIgdG9PYmplY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG5cbiAgdmFyIGIgPSBCeXRlQnVmZmVyLmZyb21CaW5hcnkoYnVmZmVyLnRvU3RyaW5nKCdiaW5hcnknKSwgQnl0ZUJ1ZmZlci5MSVRUTEVfRU5ESUFOKTtcbiAgdmFyIHN0cnVjdCA9IHR5cGUuZnJvbUJ5dGVCdWZmZXIoYik7XG4gIHJldHVybiB0b09iamVjdCA/IHR5cGUudG9PYmplY3Qoc3RydWN0KSA6IHN0cnVjdDtcbn1cblxuZnVuY3Rpb24gdG9CeXRlQnVmZmVyKHR5cGUsIHZhbHVlKSB7XG4gIHZhciBiID0gbmV3IEJ5dGVCdWZmZXIoQnl0ZUJ1ZmZlci5ERUZBVUxUX0NBUEFDSVRZLCBCeXRlQnVmZmVyLkxJVFRMRV9FTkRJQU4pO1xuICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpO1xuICByZXR1cm4gYi5jb3B5KDAsIGIub2Zmc2V0KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCeXRlQnVmZmVyID0gcmVxdWlyZSgnYnl0ZWJ1ZmZlcicpO1xuXG4vKipcbiAgQGNsYXNzIFN0cnVjdFxuXG4gIEBhcmcge29iamVjdH0gY29uZmlnLm92ZXJyaWRlID0ge1xuICAgICdNZXNzYWdlLmRhdGEuYXBwZW5kQnl0ZUJ1ZmZlcic6ICh7ZmllbGRzLCBvYmplY3QsIGJ9KSA9PiB7Li59XG4gIH1cbiAgUmFyZSBjYXNlcyB3aGVyZSBzcGVjaWFsaXplZCBzZXJpbGl6YXRpb24gaXMgbmVlZGVkIChleCBBIE1lc3NhZ2Ugb2JqZWN0IGhhc1xuICAndHlwZScgYW5kICdkYXRhJyBmaWVsZHMgd2hlcmUgb2JqZWN0LnR5cGUgPT09ICd0cmFuc2ZlcicgY2FuIGRlZmluZVxuICBzZXJpYWxpemF0aW9uIHRpbWUgU3RydWN0IG5lZWRlZCBmb3IgJ2RhdGEnIC4uIFRoaXMgc2F2ZXMgY29tcGxleGl0eSBmb3IgdGhlXG4gIGVuZC11c2VyJ3Mgd29ya2luZyB3aXRoIGpzb24uICBTZWUgb3ZlcnJpZGUgdW5pdCB0ZXN0LlxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeyBkZWJ1ZzogZmFsc2UgfTtcblxuICBjb25maWcgPSBPYmplY3QuYXNzaWduKHsgb3ZlcnJpZGU6IHt9IH0sIGNvbmZpZyk7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgdmFyIGZpZWxkT25lID0gdm9pZCAwLFxuICAgICAgZmllbGRPbmVOYW1lID0gdm9pZCAwO1xuXG4gIHJldHVybiB7XG4gICAgY29tcGFyZTogZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgICB2YXIgdjEgPSBhW2ZpZWxkT25lTmFtZV07XG4gICAgICB2YXIgdjIgPSBiW2ZpZWxkT25lTmFtZV07XG5cbiAgICAgIGlmICghZmllbGRPbmUgfHwgIWZpZWxkT25lLmNvbXBhcmUpIHtcbiAgICAgICAgcmV0dXJuIHYxID4gdjIgPyAxIDogdjEgPCB2MiA/IC0xIDogMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpZWxkT25lLmNvbXBhcmUodjEsIHYyKTtcbiAgICB9LFxuXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChmaWVsZE5hbWUsIHR5cGUpIHtcbiAgICAgIGZpZWxkc1tmaWVsZE5hbWVdID0gdHlwZTtcbiAgICAgIGlmIChmaWVsZE9uZSA9PSBudWxsKSB7XG4gICAgICAgIGZpZWxkT25lID0gdHlwZTtcbiAgICAgICAgZmllbGRPbmVOYW1lID0gZmllbGROYW1lO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8vIENvbXBsZXRlIGxpc3Qgb2YgZmllbGRzLCBhZnRlciByZXNvbHZpbmcgXCJiYXNlXCIgaW5oZXJpdGFuY2VcbiAgICBmaWVsZHM6IGZpZWxkcyxcblxuICAgIGZyb21CeXRlQnVmZmVyOiBmdW5jdGlvbiBmcm9tQnl0ZUJ1ZmZlcihiKSB7XG4gICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICB2YXIgZmllbGQgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkc1tmaWVsZF07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvMSA9IGIub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGZpZWxkID09PSAnJykge1xuICAgICAgICAgICAgICAvLyBzdHJ1Y3RQdHJcbiAgICAgICAgICAgICAgb2JqZWN0ID0gdHlwZS5mcm9tQnl0ZUJ1ZmZlcihiLCBjb25maWcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGZyb21CeXRlQnVmZmVyID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLicgKyBmaWVsZCArICcuZnJvbUJ5dGVCdWZmZXInXTtcbiAgICAgICAgICAgICAgaWYgKGZyb21CeXRlQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgZnJvbUJ5dGVCdWZmZXIoeyBmaWVsZHM6IGZpZWxkcywgb2JqZWN0OiBvYmplY3QsIGI6IGIsIGNvbmZpZzogY29uZmlnIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iamVjdFtmaWVsZF0gPSB0eXBlLmZyb21CeXRlQnVmZmVyKGIsIGNvbmZpZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGUuc3RydWN0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcih0eXBlLnN0cnVjdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAvLyBodW1hbiByZWFkYWJsZSB0ZXh0XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHR5cGUudG9PYmplY3QoZmllbGQgPT09ICcnID8gb2JqZWN0IDogb2JqZWN0W2ZpZWxkXSwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcignZnJvbUJ5dGVCdWZmZXIgZGVidWcgZXJyb3I6JywgZXJyb3IpXG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgX2IgPSBiLmNvcHkobzEsIGIub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdmcm9tQnl0ZUJ1ZmZlcicsIG5hbWUgKyAnLicgKyBmaWVsZCwgJ1xcJycgKyB2YWx1ZSArICdcXCcnLCBfYi50b0hleCgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSArICcgaW4gJyArIG5hbWUgKyAnLicgKyBmaWVsZCk7XG4gICAgICAgICAgICBiLnByaW50RGVidWcoKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlcnJvci5tZXNzYWdlICs9ICcgaW4gJyArIG5hbWUgKyAnLicgKyBmaWVsZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG4gICAgYXBwZW5kQnl0ZUJ1ZmZlcjogZnVuY3Rpb24gYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvYmplY3QpIHtcbiAgICAgIHZhciBmaWVsZCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKGZpZWxkIGluIGZpZWxkcykge1xuICAgICAgICAgIHZhciB0eXBlID0gZmllbGRzW2ZpZWxkXTtcbiAgICAgICAgICBpZiAoZmllbGQgPT09ICcnKSB7XG4gICAgICAgICAgICAvLyBzdHJ1Y3RQdHJcbiAgICAgICAgICAgIHR5cGUuYXBwZW5kQnl0ZUJ1ZmZlcihiLCBvYmplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXBwZW5kQnl0ZUJ1ZmZlciA9IGNvbmZpZy5vdmVycmlkZVtuYW1lICsgJy4nICsgZmllbGQgKyAnLmFwcGVuZEJ5dGVCdWZmZXInXTtcbiAgICAgICAgICAgIGlmIChhcHBlbmRCeXRlQnVmZmVyKSB7XG4gICAgICAgICAgICAgIGFwcGVuZEJ5dGVCdWZmZXIoeyBmaWVsZHM6IGZpZWxkcywgb2JqZWN0OiBvYmplY3QsIGI6IGIgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgb2JqZWN0W2ZpZWxkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gJyAnICsgbmFtZSArICcuJyArIGZpZWxkICsgJyA9ICcgKyBKU09OLnN0cmluZ2lmeShvYmplY3RbZmllbGRdKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGNpcmN1bGFyIHJlZlxuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gJyAnICsgbmFtZSArICcuJyArIGZpZWxkICsgJyA9ICcgKyBvYmplY3RbZmllbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24gZnJvbU9iamVjdChzZXJpYWxpemVkT2JqZWN0KSB7XG4gICAgICB2YXIgZnJvbU9iamVjdF9zdHJ1Y3QgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcuZnJvbU9iamVjdCddO1xuICAgICAgaWYgKGZyb21PYmplY3Rfc3RydWN0KSB7XG4gICAgICAgIHZhciByZXQgPSBmcm9tT2JqZWN0X3N0cnVjdChzZXJpYWxpemVkT2JqZWN0KTtcbiAgICAgICAgaWYgKHJldCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICB2YXIgZmllbGQgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICAvLyBpZihjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAvLyAgIGNvbnNvbGUuZXJyb3IobmFtZSwgZmllbGQsICcoZnJvbU9iamVjdCknKVxuICAgICAgICAgIC8vIH1cbiAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkc1tmaWVsZF07XG4gICAgICAgICAgaWYgKGZpZWxkID09PSAnJykge1xuICAgICAgICAgICAgLy8gc3RydWN0UHRyXG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gdHlwZS5mcm9tT2JqZWN0KHNlcmlhbGl6ZWRPYmplY3QpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIG9iamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmcm9tT2JqZWN0ID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLicgKyBmaWVsZCArICcuZnJvbU9iamVjdCddO1xuICAgICAgICAgICAgaWYgKGZyb21PYmplY3QpIHtcbiAgICAgICAgICAgICAgZnJvbU9iamVjdCh7IGZpZWxkczogZmllbGRzLCBvYmplY3Q6IHNlcmlhbGl6ZWRPYmplY3QsIHJlc3VsdDogcmVzdWx0IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc2VyaWFsaXplZE9iamVjdFtmaWVsZF07XG4gICAgICAgICAgICAgIHZhciBfb2JqZWN0ID0gdHlwZS5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgICAgcmVzdWx0W2ZpZWxkXSA9IF9vYmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlcnJvci5tZXNzYWdlICs9ICcgJyArIG5hbWUgKyAnLicgKyBmaWVsZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICB0b09iamVjdDogZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICB2YXIgc2VyaWFsaXplZE9iamVjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgIHZhciB0b09iamVjdF9zdHJ1Y3QgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcudG9PYmplY3QnXTtcbiAgICAgIGlmICh0b09iamVjdF9zdHJ1Y3QpIHtcbiAgICAgICAgdmFyIHJldCA9IHRvT2JqZWN0X3N0cnVjdChzZXJpYWxpemVkT2JqZWN0KTtcbiAgICAgICAgaWYgKHJldCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICB2YXIgZmllbGQgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gaWYgKCFmaWVsZHMpIHsgcmV0dXJuIHJlc3VsdCB9XG5cbiAgICAgICAgZm9yIChmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkc1tmaWVsZF07XG5cbiAgICAgICAgICB2YXIgdG9PYmplY3QgPSBjb25maWcub3ZlcnJpZGVbbmFtZSArICcuJyArIGZpZWxkICsgJy50b09iamVjdCddO1xuICAgICAgICAgIGlmICh0b09iamVjdCkge1xuICAgICAgICAgICAgdG9PYmplY3QoeyBmaWVsZHM6IGZpZWxkcywgb2JqZWN0OiBzZXJpYWxpemVkT2JqZWN0LCByZXN1bHQ6IHJlc3VsdCwgY29uZmlnOiBjb25maWcgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmaWVsZCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgLy8gc3RydWN0UHRyXG4gICAgICAgICAgICAgIHZhciBvYmplY3QgPSB0eXBlLnRvT2JqZWN0KHNlcmlhbGl6ZWRPYmplY3QsIGNvbmZpZyk7XG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCBvYmplY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIF9vYmplY3QyID0gdHlwZS50b09iamVjdChzZXJpYWxpemVkT2JqZWN0ID8gc2VyaWFsaXplZE9iamVjdFtmaWVsZF0gOiBudWxsLCBjb25maWcpO1xuICAgICAgICAgICAgICByZXN1bHRbZmllbGRdID0gX29iamVjdDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgQnl0ZUJ1ZmZlcihCeXRlQnVmZmVyLkRFRkFVTFRfQ0FQQUNJVFksIEJ5dGVCdWZmZXIuTElUVExFX0VORElBTik7XG4gICAgICAgICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzZXJpYWxpemVkT2JqZWN0W2ZpZWxkXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBhcHBlbmRCeXRlQnVmZmVyID0gY29uZmlnLm92ZXJyaWRlW25hbWUgKyAnLicgKyBmaWVsZCArICcuYXBwZW5kQnl0ZUJ1ZmZlciddO1xuICAgICAgICAgICAgICAgICAgaWYgKHRvT2JqZWN0ICYmIGFwcGVuZEJ5dGVCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kQnl0ZUJ1ZmZlcih7IGZpZWxkczogZmllbGRzLCBvYmplY3Q6IHNlcmlhbGl6ZWRPYmplY3QsIGI6IGIgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0eXBlLmFwcGVuZEJ5dGVCdWZmZXIoYiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBiID0gYi5jb3B5KDAsIGIub2Zmc2V0KTtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigndG9PYmplY3QnLCBuYW1lICsgJy4nICsgZmllbGQsICdcXCcnICsgcmVzdWx0W2ZpZWxkXSArICdcXCcnLCBiLnRvSGV4KCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gd29yay1hcm91bmQgdG8gcHJldmVudCBkZWJ1ZyB0aW1lIGNyYXNoXG4gICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBuYW1lICsgJy4nICsgZmllbGQgKyAnICcgKyBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gJyAnICsgbmFtZSArICcuJyArIGZpZWxkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGFpbjogcmVxdWlyZSgnLi9jaGFpbi5qc29uJyksXG4gIGhpc3Rvcnk6IHJlcXVpcmUoJy4vaGlzdG9yeS5qc29uJylcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCdpc29tb3JwaGljLWZldGNoJyk7XG52YXIgY2FtZWxDYXNlID0gcmVxdWlyZSgnY2FtZWwtY2FzZScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2V4cG9ydGVkLWhlbHBlcnMnKTtcbnZhciBwcm9jZXNzQXJncyA9IHJlcXVpcmUoJy4vcHJvY2Vzcy1hcmdzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBpR2VuO1xuXG5mdW5jdGlvbiBhcGlHZW4odmVyc2lvbiwgZGVmaW5pdGlvbnMpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgdmFyIGNvbmZpZ0RlZmF1bHRzID0ge1xuICAgIGh0dHBFbmRwb2ludDogJ2h0dHA6Ly8xMjcuMC4wLjE6ODg4OCcsXG4gICAgdmVyYm9zZTogZmFsc2UsXG4gICAgbG9nZ2VyOiB7XG4gICAgICBsb2c6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgICAgdmFyIF9jb25zb2xlO1xuXG4gICAgICAgIHJldHVybiBjb25maWcudmVyYm9zZSA/IChfY29uc29sZSA9IGNvbnNvbGUpLmxvZy5hcHBseShfY29uc29sZSwgYXJndW1lbnRzKSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgICB2YXIgX2NvbnNvbGUyO1xuXG4gICAgICAgIHJldHVybiBjb25maWcudmVyYm9zZSA/IChfY29uc29sZTIgPSBjb25zb2xlKS5lcnJvci5hcHBseShfY29uc29sZTIsIGFyZ3VtZW50cykgOiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBhcHBseURlZmF1bHRzKHRhcmdldCwgZGVmYXVsdHMpIHtcbiAgICBPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAodGFyZ2V0W2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGRlZmF1bHRzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhcHBseURlZmF1bHRzKGNvbmZpZywgY29uZmlnRGVmYXVsdHMpO1xuICBhcHBseURlZmF1bHRzKGNvbmZpZy5sb2dnZXIsIGNvbmZpZ0RlZmF1bHRzLmxvZ2dlcik7XG5cbiAgdmFyIGFwaSA9IHt9O1xuICB2YXIgaHR0cEVuZHBvaW50ID0gY29uZmlnLmh0dHBFbmRwb2ludDtcblxuXG4gIGZvciAodmFyIGFwaUdyb3VwIGluIGRlZmluaXRpb25zKSB7XG4gICAgZm9yICh2YXIgYXBpTWV0aG9kIGluIGRlZmluaXRpb25zW2FwaUdyb3VwXSkge1xuICAgICAgdmFyIG1ldGhvZE5hbWUgPSBjYW1lbENhc2UoYXBpTWV0aG9kKTtcbiAgICAgIHZhciB1cmwgPSBodHRwRW5kcG9pbnQgKyAnLycgKyB2ZXJzaW9uICsgJy8nICsgYXBpR3JvdXAgKyAnLycgKyBhcGlNZXRob2Q7XG4gICAgICBhcGlbbWV0aG9kTmFtZV0gPSBmZXRjaE1ldGhvZChtZXRob2ROYW1lLCB1cmwsIGRlZmluaXRpb25zW2FwaUdyb3VwXVthcGlNZXRob2RdLCBjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGhlbHBlcikge1xuICAgIC8vIEluc2VydCBgYXBpYCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIHRvIGFsbCBBUEkgaGVscGVyc1xuICAgIGFwaVtoZWxwZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9oZWxwZXJzJGFwaTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChfaGVscGVycyRhcGkgPSBoZWxwZXJzLmFwaSlbaGVscGVyXS5hcHBseShfaGVscGVycyRhcGksIFthcGldLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbiAgfTtcblxuICBmb3IgKHZhciBoZWxwZXIgaW4gaGVscGVycy5hcGkpIHtcbiAgICBfbG9vcChoZWxwZXIpO1xuICB9XG4gIHJldHVybiBhcGk7XG59XG5cbmZ1bmN0aW9uIGZldGNoTWV0aG9kKG1ldGhvZE5hbWUsIHVybCwgZGVmaW5pdGlvbiwgY29uZmlnKSB7XG4gIHZhciBsb2dnZXIgPSBjb25maWcubG9nZ2VyO1xuXG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2codXNhZ2UobWV0aG9kTmFtZSwgZGVmaW5pdGlvbikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcHRpb25zRm9ybWF0dGVyID0gZnVuY3Rpb24gb3B0aW9uc0Zvcm1hdHRlcihvcHRpb24pIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIHsgYnJvYWRjYXN0OiBvcHRpb24gfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHByb2Nlc3NlZEFyZ3MgPSBwcm9jZXNzQXJncyhhcmdzLCBPYmplY3Qua2V5cyhkZWZpbml0aW9uLnBhcmFtcyB8fCBbXSksIG1ldGhvZE5hbWUsIG9wdGlvbnNGb3JtYXR0ZXIpO1xuXG4gICAgdmFyIHBhcmFtcyA9IHByb2Nlc3NlZEFyZ3MucGFyYW1zLFxuICAgICAgICBvcHRpb25zID0gcHJvY2Vzc2VkQXJncy5vcHRpb25zLFxuICAgICAgICByZXR1cm5Qcm9taXNlID0gcHJvY2Vzc2VkQXJncy5yZXR1cm5Qcm9taXNlO1xuICAgIHZhciBjYWxsYmFjayA9IHByb2Nlc3NlZEFyZ3MuY2FsbGJhY2s7XG5cblxuICAgIHZhciBib2R5ID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcbiAgICBpZiAobG9nZ2VyLmxvZykge1xuICAgICAgbG9nZ2VyLmxvZygnYXBpID4nLCAncG9zdCcsICdcXHQnLCB1cmwsIGJvZHkpO1xuICAgIH1cbiAgICB2YXIgZmV0Y2hDb25maWd1cmF0aW9uID0geyBib2R5OiBib2R5LCBtZXRob2Q6ICdQT1NUJyB9O1xuICAgIE9iamVjdC5hc3NpZ24oZmV0Y2hDb25maWd1cmF0aW9uLCBjb25maWcuZmV0Y2hDb25maWd1cmF0aW9uKTtcblxuICAgIGZldGNoKHVybCwgZmV0Y2hDb25maWd1cmF0aW9uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4oZnVuY3Rpb24gKGJvZHlSZXNwKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGJvZHlSZXNwKTtcbiAgICAgICAgICBlcnJvci5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgZXJyb3Iuc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKG9iamVjdFJlc3ApIHtcbiAgICAgIGlmIChsb2dnZXIubG9nKSB7XG4gICAgICAgIGxvZ2dlci5sb2coJ2FwaSA8JywgJ3Jlc3BvbnNlJywgJ1xcdCcsIHVybCwgSlNPTi5zdHJpbmdpZnkob2JqZWN0UmVzcCkpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgb2JqZWN0UmVzcCk7XG4gICAgICB9IGNhdGNoIChjYWxsYmFja0Vycm9yKSB7XG4gICAgICAgIGlmIChsb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoJ2FwaSA8JywgJ3Jlc3VsdCBjYWxsYmFjaycsICc6JywgY2FsbGJhY2tFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gJyc7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBub2Rlb3MgZm9ybWF0IChmYWlsIHNhZmUpXG4gICAgICAgIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGVycm9yLm1lc3NhZ2UpLmVycm9yLmRldGFpbHNbMF07XG4gICAgICB9IGNhdGNoIChlMikge31cblxuICAgICAgaWYgKGxvZ2dlci5lcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ2FwaSA8JywgJ2Vycm9yJywgJ1xcdCcsIG1lc3NhZ2UsIHVybCwgYm9keSk7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH0gY2F0Y2ggKGNhbGxiYWNrRXJyb3IpIHtcbiAgICAgICAgaWYgKGxvZ2dlci5lcnJvcikge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignYXBpIDwnLCAnZXJyb3IgY2FsbGJhY2snLCAnOicsIGNhbGxiYWNrRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNhZ2UobWV0aG9kTmFtZSwgZGVmaW5pdGlvbikge1xuICB2YXIgdXNhZ2UgPSAnJztcbiAgdmFyIG91dCA9IGZ1bmN0aW9uIG91dChzdHIpIHtcbiAgICB1c2FnZSArPSBzdHIgKyAnXFxuJztcbiAgfTtcblxuICBvdXQoJ1VTQUdFJyk7XG4gIG91dChtZXRob2ROYW1lICsgJyAtICcgKyBkZWZpbml0aW9uLmJyaWVmKTtcblxuICBvdXQoJ1xcblBBUkFNRVRFUlMnKTtcbiAgaWYgKGRlZmluaXRpb24ucGFyYW1zKSB7XG4gICAgb3V0KEpTT04uc3RyaW5naWZ5KGRlZmluaXRpb24ucGFyYW1zLCBudWxsLCAyKSk7XG4gIH0gZWxzZSB7XG4gICAgb3V0KCdub25lJyk7XG4gIH1cblxuICBvdXQoJ1xcblJFVFVSTlMnKTtcbiAgaWYgKGRlZmluaXRpb24ucmVzdWx0cykge1xuICAgIG91dCgnJyArIEpTT04uc3RyaW5naWZ5KGRlZmluaXRpb24ucmVzdWx0cywgbnVsbCwgMikpO1xuICB9IGVsc2Uge1xuICAgIG91dCgnbm8gZGF0YScpO1xuICB9XG5cbiAgb3V0KCdcXG5FUlJPUlMnKTtcbiAgaWYgKGRlZmluaXRpb24uZXJyb3JzKSB7XG4gICAgZm9yICh2YXIgZXJyb3IgaW4gZGVmaW5pdGlvbi5lcnJvcnMpIHtcbiAgICAgIHZhciBlcnJvckRlc2MgPSBkZWZpbml0aW9uLmVycm9yc1tlcnJvcl07XG4gICAgICBvdXQoJycgKyBlcnJvciArIChlcnJvckRlc2MgPyAnIC0gJyArIGVycm9yRGVzYyA6ICcnKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCgnbm90aGluZyBzcGVjaWFsJyk7XG4gIH1cblxuICByZXR1cm4gdXNhZ2U7XG59IiwiLy8gdGhlIHdoYXR3Zy1mZXRjaCBwb2x5ZmlsbCBpbnN0YWxscyB0aGUgZmV0Y2goKSBmdW5jdGlvblxuLy8gb24gdGhlIGdsb2JhbCBvYmplY3QgKHdpbmRvdyBvciBzZWxmKVxuLy9cbi8vIFJldHVybiB0aGF0IGFzIHRoZSBleHBvcnQgZm9yIHVzZSBpbiBXZWJwYWNrLCBCcm93c2VyaWZ5IGV0Yy5cbnJlcXVpcmUoJ3doYXR3Zy1mZXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBzZWxmLmZldGNoLmJpbmQoc2VsZik7XG4iLCJ2YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICdCbG9iJyBpbiBzZWxmICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgfVxuXG4gICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgIH0pXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghc2VsZi5mZXRjaCkge1xuICBzZWxmLmZldGNoID0gZmV0Y2hcbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwidmFyIHVwcGVyQ2FzZSA9IHJlcXVpcmUoJ3VwcGVyLWNhc2UnKVxudmFyIG5vQ2FzZSA9IHJlcXVpcmUoJ25vLWNhc2UnKVxuXG4vKipcbiAqIENhbWVsIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlLCBtZXJnZU51bWJlcnMpIHtcbiAgdmFyIHJlc3VsdCA9IG5vQ2FzZSh2YWx1ZSwgbG9jYWxlKVxuXG4gIC8vIFJlcGxhY2UgcGVyaW9kcyBiZXR3ZWVuIG51bWVyaWMgZW50aXRpZXMgd2l0aCBhbiB1bmRlcnNjb3JlLlxuICBpZiAoIW1lcmdlTnVtYmVycykge1xuICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC8gKD89XFxkKS9nLCAnXycpXG4gIH1cblxuICAvLyBSZXBsYWNlIHNwYWNlcyBiZXR3ZWVuIHdvcmRzIHdpdGggYW4gdXBwZXIgY2FzZWQgY2hhcmFjdGVyLlxuICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoLyAoLikvZywgZnVuY3Rpb24gKG0sICQxKSB7XG4gICAgcmV0dXJuIHVwcGVyQ2FzZSgkMSwgbG9jYWxlKVxuICB9KVxufVxuIiwiLyoqXG4gKiBTcGVjaWFsIGxhbmd1YWdlLXNwZWNpZmljIG92ZXJyaWRlcy5cbiAqXG4gKiBTb3VyY2U6IGZ0cDovL2Z0cC51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvU3BlY2lhbENhc2luZy50eHRcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgTEFOR1VBR0VTID0ge1xuICB0cjoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDY5XS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNjknOiAnXFx1MDEzMCdcbiAgICB9XG4gIH0sXG4gIGF6OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNjldL2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDA2OSc6ICdcXHUwMTMwJ1xuICAgIH1cbiAgfSxcbiAgbHQ6IHtcbiAgICByZWdleHA6IC9bXFx1MDA2OVxcdTAwNkFcXHUwMTJGXVxcdTAzMDd8XFx1MDA2OVxcdTAzMDdbXFx1MDMwMFxcdTAzMDFcXHUwMzAzXS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNjlcXHUwMzA3JzogJ1xcdTAwNDknLFxuICAgICAgJ1xcdTAwNkFcXHUwMzA3JzogJ1xcdTAwNEEnLFxuICAgICAgJ1xcdTAxMkZcXHUwMzA3JzogJ1xcdTAxMkUnLFxuICAgICAgJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMCc6ICdcXHUwMENDJyxcbiAgICAgICdcXHUwMDY5XFx1MDMwN1xcdTAzMDEnOiAnXFx1MDBDRCcsXG4gICAgICAnXFx1MDA2OVxcdTAzMDdcXHUwMzAzJzogJ1xcdTAxMjgnXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVXBwZXIgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIGxvY2FsZSkge1xuICB2YXIgbGFuZyA9IExBTkdVQUdFU1tsb2NhbGVdXG5cbiAgc3RyID0gc3RyID09IG51bGwgPyAnJyA6IFN0cmluZyhzdHIpXG5cbiAgaWYgKGxhbmcpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZShsYW5nLnJlZ2V4cCwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGxhbmcubWFwW21dIH0pXG4gIH1cblxuICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKClcbn1cbiIsInZhciBsb3dlckNhc2UgPSByZXF1aXJlKCdsb3dlci1jYXNlJylcblxudmFyIE5PTl9XT1JEX1JFR0VYUCA9IHJlcXVpcmUoJy4vdmVuZG9yL25vbi13b3JkLXJlZ2V4cCcpXG52YXIgQ0FNRUxfQ0FTRV9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9jYW1lbC1jYXNlLXJlZ2V4cCcpXG52YXIgQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9jYW1lbC1jYXNlLXVwcGVyLXJlZ2V4cCcpXG5cbi8qKlxuICogU2VudGVuY2UgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHBhcmFtICB7c3RyaW5nfSBsb2NhbGVcbiAqIEBwYXJhbSAge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUsIHJlcGxhY2VtZW50KSB7XG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgcmVwbGFjZW1lbnQgPSB0eXBlb2YgcmVwbGFjZW1lbnQgIT09ICdzdHJpbmcnID8gJyAnIDogcmVwbGFjZW1lbnRcblxuICBmdW5jdGlvbiByZXBsYWNlIChtYXRjaCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgaWYgKGluZGV4ID09PSAwIHx8IGluZGV4ID09PSAodmFsdWUubGVuZ3RoIC0gbWF0Y2gubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcGxhY2VtZW50XG4gIH1cblxuICBzdHIgPSBTdHJpbmcoc3RyKVxuICAgIC8vIFN1cHBvcnQgY2FtZWwgY2FzZSAoXCJjYW1lbENhc2VcIiAtPiBcImNhbWVsIENhc2VcIikuXG4gICAgLnJlcGxhY2UoQ0FNRUxfQ0FTRV9SRUdFWFAsICckMSAkMicpXG4gICAgLy8gU3VwcG9ydCBvZGQgY2FtZWwgY2FzZSAoXCJDQU1FTENhc2VcIiAtPiBcIkNBTUVMIENhc2VcIikuXG4gICAgLnJlcGxhY2UoQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAsICckMSAkMicpXG4gICAgLy8gUmVtb3ZlIGFsbCBub24td29yZCBjaGFyYWN0ZXJzIGFuZCByZXBsYWNlIHdpdGggYSBzaW5nbGUgc3BhY2UuXG4gICAgLnJlcGxhY2UoTk9OX1dPUkRfUkVHRVhQLCByZXBsYWNlKVxuXG4gIC8vIExvd2VyIGNhc2UgdGhlIGVudGlyZSBzdHJpbmcuXG4gIHJldHVybiBsb3dlckNhc2Uoc3RyLCBsb2NhbGUpXG59XG4iLCIvKipcbiAqIFNwZWNpYWwgbGFuZ3VhZ2Utc3BlY2lmaWMgb3ZlcnJpZGVzLlxuICpcbiAqIFNvdXJjZTogZnRwOi8vZnRwLnVuaWNvZGUub3JnL1B1YmxpYy9VQ0QvbGF0ZXN0L3VjZC9TcGVjaWFsQ2FzaW5nLnR4dFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBMQU5HVUFHRVMgPSB7XG4gIHRyOiB7XG4gICAgcmVnZXhwOiAvXFx1MDEzMHxcXHUwMDQ5fFxcdTAwNDlcXHUwMzA3L2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDEzMCc6ICdcXHUwMDY5JyxcbiAgICAgICdcXHUwMDQ5JzogJ1xcdTAxMzEnLFxuICAgICAgJ1xcdTAwNDlcXHUwMzA3JzogJ1xcdTAwNjknXG4gICAgfVxuICB9LFxuICBhejoge1xuICAgIHJlZ2V4cDogL1tcXHUwMTMwXS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAxMzAnOiAnXFx1MDA2OScsXG4gICAgICAnXFx1MDA0OSc6ICdcXHUwMTMxJyxcbiAgICAgICdcXHUwMDQ5XFx1MDMwNyc6ICdcXHUwMDY5J1xuICAgIH1cbiAgfSxcbiAgbHQ6IHtcbiAgICByZWdleHA6IC9bXFx1MDA0OVxcdTAwNEFcXHUwMTJFXFx1MDBDQ1xcdTAwQ0RcXHUwMTI4XS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNDknOiAnXFx1MDA2OVxcdTAzMDcnLFxuICAgICAgJ1xcdTAwNEEnOiAnXFx1MDA2QVxcdTAzMDcnLFxuICAgICAgJ1xcdTAxMkUnOiAnXFx1MDEyRlxcdTAzMDcnLFxuICAgICAgJ1xcdTAwQ0MnOiAnXFx1MDA2OVxcdTAzMDdcXHUwMzAwJyxcbiAgICAgICdcXHUwMENEJzogJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMScsXG4gICAgICAnXFx1MDEyOCc6ICdcXHUwMDY5XFx1MDMwN1xcdTAzMDMnXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTG93ZXJjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIHZhciBsYW5nID0gTEFOR1VBR0VTW2xvY2FsZV1cblxuICBzdHIgPSBzdHIgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHN0cilcblxuICBpZiAobGFuZykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGxhbmcucmVnZXhwLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbGFuZy5tYXBbbV0gfSlcbiAgfVxuXG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSAvW15BLVphLXpcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4QTAtXFx1MDhCNFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNjBcXHUwQzYxXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkQ1XFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QURcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5Q0ZcXHVBOUUwLVxcdUE5RTRcXHVBOUU2LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGREMwLTlcXHhCMlxceEIzXFx4QjlcXHhCQy1cXHhCRVxcdTA2NjAtXFx1MDY2OVxcdTA2RjAtXFx1MDZGOVxcdTA3QzAtXFx1MDdDOVxcdTA5NjYtXFx1MDk2RlxcdTA5RTYtXFx1MDlFRlxcdTA5RjQtXFx1MDlGOVxcdTBBNjYtXFx1MEE2RlxcdTBBRTYtXFx1MEFFRlxcdTBCNjYtXFx1MEI2RlxcdTBCNzItXFx1MEI3N1xcdTBCRTYtXFx1MEJGMlxcdTBDNjYtXFx1MEM2RlxcdTBDNzgtXFx1MEM3RVxcdTBDRTYtXFx1MENFRlxcdTBENjYtXFx1MEQ3NVxcdTBERTYtXFx1MERFRlxcdTBFNTAtXFx1MEU1OVxcdTBFRDAtXFx1MEVEOVxcdTBGMjAtXFx1MEYzM1xcdTEwNDAtXFx1MTA0OVxcdTEwOTAtXFx1MTA5OVxcdTEzNjktXFx1MTM3Q1xcdTE2RUUtXFx1MTZGMFxcdTE3RTAtXFx1MTdFOVxcdTE3RjAtXFx1MTdGOVxcdTE4MTAtXFx1MTgxOVxcdTE5NDYtXFx1MTk0RlxcdTE5RDAtXFx1MTlEQVxcdTFBODAtXFx1MUE4OVxcdTFBOTAtXFx1MUE5OVxcdTFCNTAtXFx1MUI1OVxcdTFCQjAtXFx1MUJCOVxcdTFDNDAtXFx1MUM0OVxcdTFDNTAtXFx1MUM1OVxcdTIwNzBcXHUyMDc0LVxcdTIwNzlcXHUyMDgwLVxcdTIwODlcXHUyMTUwLVxcdTIxODJcXHUyMTg1LVxcdTIxODlcXHUyNDYwLVxcdTI0OUJcXHUyNEVBLVxcdTI0RkZcXHUyNzc2LVxcdTI3OTNcXHUyQ0ZEXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzgtXFx1MzAzQVxcdTMxOTItXFx1MzE5NVxcdTMyMjAtXFx1MzIyOVxcdTMyNDgtXFx1MzI0RlxcdTMyNTEtXFx1MzI1RlxcdTMyODAtXFx1MzI4OVxcdTMyQjEtXFx1MzJCRlxcdUE2MjAtXFx1QTYyOVxcdUE2RTYtXFx1QTZFRlxcdUE4MzAtXFx1QTgzNVxcdUE4RDAtXFx1QThEOVxcdUE5MDAtXFx1QTkwOVxcdUE5RDAtXFx1QTlEOVxcdUE5RjAtXFx1QTlGOVxcdUFBNTAtXFx1QUE1OVxcdUFCRjAtXFx1QUJGOVxcdUZGMTAtXFx1RkYxOV0rL2dcbiIsIm1vZHVsZS5leHBvcnRzID0gLyhbYS16XFx4QjVcXHhERi1cXHhGNlxceEY4LVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RS1cXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTktXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJELVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzMtXFx1MDIzOVxcdTAyM0NcXHUwMjNGXFx1MDI0MFxcdTAyNDJcXHUwMjQ3XFx1MDI0OVxcdTAyNEJcXHUwMjREXFx1MDI0Ri1cXHUwMjkzXFx1MDI5NS1cXHUwMkFGXFx1MDM3MVxcdTAzNzNcXHUwMzc3XFx1MDM3Qi1cXHUwMzdEXFx1MDM5MFxcdTAzQUMtXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENS1cXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGLVxcdTAzRjNcXHUwM0Y1XFx1MDNGOFxcdTAzRkJcXHUwM0ZDXFx1MDQzMC1cXHUwNDVGXFx1MDQ2MVxcdTA0NjNcXHUwNDY1XFx1MDQ2N1xcdTA0NjlcXHUwNDZCXFx1MDQ2RFxcdTA0NkZcXHUwNDcxXFx1MDQ3M1xcdTA0NzVcXHUwNDc3XFx1MDQ3OVxcdTA0N0JcXHUwNDdEXFx1MDQ3RlxcdTA0ODFcXHUwNDhCXFx1MDQ4RFxcdTA0OEZcXHUwNDkxXFx1MDQ5M1xcdTA0OTVcXHUwNDk3XFx1MDQ5OVxcdTA0OUJcXHUwNDlEXFx1MDQ5RlxcdTA0QTFcXHUwNEEzXFx1MDRBNVxcdTA0QTdcXHUwNEE5XFx1MDRBQlxcdTA0QURcXHUwNEFGXFx1MDRCMVxcdTA0QjNcXHUwNEI1XFx1MDRCN1xcdTA0QjlcXHUwNEJCXFx1MDRCRFxcdTA0QkZcXHUwNEMyXFx1MDRDNFxcdTA0QzZcXHUwNEM4XFx1MDRDQVxcdTA0Q0NcXHUwNENFXFx1MDRDRlxcdTA0RDFcXHUwNEQzXFx1MDRENVxcdTA0RDdcXHUwNEQ5XFx1MDREQlxcdTA0RERcXHUwNERGXFx1MDRFMVxcdTA0RTNcXHUwNEU1XFx1MDRFN1xcdTA0RTlcXHUwNEVCXFx1MDRFRFxcdTA0RUZcXHUwNEYxXFx1MDRGM1xcdTA0RjVcXHUwNEY3XFx1MDRGOVxcdTA0RkJcXHUwNEZEXFx1MDRGRlxcdTA1MDFcXHUwNTAzXFx1MDUwNVxcdTA1MDdcXHUwNTA5XFx1MDUwQlxcdTA1MERcXHUwNTBGXFx1MDUxMVxcdTA1MTNcXHUwNTE1XFx1MDUxN1xcdTA1MTlcXHUwNTFCXFx1MDUxRFxcdTA1MUZcXHUwNTIxXFx1MDUyM1xcdTA1MjVcXHUwNTI3XFx1MDUyOVxcdTA1MkJcXHUwNTJEXFx1MDUyRlxcdTA1NjEtXFx1MDU4N1xcdTEzRjgtXFx1MTNGRFxcdTFEMDAtXFx1MUQyQlxcdTFENkItXFx1MUQ3N1xcdTFENzktXFx1MUQ5QVxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NS1cXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRi1cXHUxRjA3XFx1MUYxMC1cXHUxRjE1XFx1MUYyMC1cXHUxRjI3XFx1MUYzMC1cXHUxRjM3XFx1MUY0MC1cXHUxRjQ1XFx1MUY1MC1cXHUxRjU3XFx1MUY2MC1cXHUxRjY3XFx1MUY3MC1cXHUxRjdEXFx1MUY4MC1cXHUxRjg3XFx1MUY5MC1cXHUxRjk3XFx1MUZBMC1cXHUxRkE3XFx1MUZCMC1cXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2XFx1MUZEN1xcdTFGRTAtXFx1MUZFN1xcdTFGRjItXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjEwQVxcdTIxMEVcXHUyMTBGXFx1MjExM1xcdTIxMkZcXHUyMTM0XFx1MjEzOVxcdTIxM0NcXHUyMTNEXFx1MjE0Ni1cXHUyMTQ5XFx1MjE0RVxcdTIxODRcXHUyQzMwLVxcdTJDNUVcXHUyQzYxXFx1MkM2NVxcdTJDNjZcXHUyQzY4XFx1MkM2QVxcdTJDNkNcXHUyQzcxXFx1MkM3M1xcdTJDNzRcXHUyQzc2LVxcdTJDN0JcXHUyQzgxXFx1MkM4M1xcdTJDODVcXHUyQzg3XFx1MkM4OVxcdTJDOEJcXHUyQzhEXFx1MkM4RlxcdTJDOTFcXHUyQzkzXFx1MkM5NVxcdTJDOTdcXHUyQzk5XFx1MkM5QlxcdTJDOURcXHUyQzlGXFx1MkNBMVxcdTJDQTNcXHUyQ0E1XFx1MkNBN1xcdTJDQTlcXHUyQ0FCXFx1MkNBRFxcdTJDQUZcXHUyQ0IxXFx1MkNCM1xcdTJDQjVcXHUyQ0I3XFx1MkNCOVxcdTJDQkJcXHUyQ0JEXFx1MkNCRlxcdTJDQzFcXHUyQ0MzXFx1MkNDNVxcdTJDQzdcXHUyQ0M5XFx1MkNDQlxcdTJDQ0RcXHUyQ0NGXFx1MkNEMVxcdTJDRDNcXHUyQ0Q1XFx1MkNEN1xcdTJDRDlcXHUyQ0RCXFx1MkNERFxcdTJDREZcXHUyQ0UxXFx1MkNFM1xcdTJDRTRcXHUyQ0VDXFx1MkNFRVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdUE2NDFcXHVBNjQzXFx1QTY0NVxcdUE2NDdcXHVBNjQ5XFx1QTY0QlxcdUE2NERcXHVBNjRGXFx1QTY1MVxcdUE2NTNcXHVBNjU1XFx1QTY1N1xcdUE2NTlcXHVBNjVCXFx1QTY1RFxcdUE2NUZcXHVBNjYxXFx1QTY2M1xcdUE2NjVcXHVBNjY3XFx1QTY2OVxcdUE2NkJcXHVBNjZEXFx1QTY4MVxcdUE2ODNcXHVBNjg1XFx1QTY4N1xcdUE2ODlcXHVBNjhCXFx1QTY4RFxcdUE2OEZcXHVBNjkxXFx1QTY5M1xcdUE2OTVcXHVBNjk3XFx1QTY5OVxcdUE2OUJcXHVBNzIzXFx1QTcyNVxcdUE3MjdcXHVBNzI5XFx1QTcyQlxcdUE3MkRcXHVBNzJGLVxcdUE3MzFcXHVBNzMzXFx1QTczNVxcdUE3MzdcXHVBNzM5XFx1QTczQlxcdUE3M0RcXHVBNzNGXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTc0N1xcdUE3NDlcXHVBNzRCXFx1QTc0RFxcdUE3NEZcXHVBNzUxXFx1QTc1M1xcdUE3NTVcXHVBNzU3XFx1QTc1OVxcdUE3NUJcXHVBNzVEXFx1QTc1RlxcdUE3NjFcXHVBNzYzXFx1QTc2NVxcdUE3NjdcXHVBNzY5XFx1QTc2QlxcdUE3NkRcXHVBNzZGXFx1QTc3MS1cXHVBNzc4XFx1QTc3QVxcdUE3N0NcXHVBNzdGXFx1QTc4MVxcdUE3ODNcXHVBNzg1XFx1QTc4N1xcdUE3OENcXHVBNzhFXFx1QTc5MVxcdUE3OTMtXFx1QTc5NVxcdUE3OTdcXHVBNzk5XFx1QTc5QlxcdUE3OURcXHVBNzlGXFx1QTdBMVxcdUE3QTNcXHVBN0E1XFx1QTdBN1xcdUE3QTlcXHVBN0I1XFx1QTdCN1xcdUE3RkFcXHVBQjMwLVxcdUFCNUFcXHVBQjYwLVxcdUFCNjVcXHVBQjcwLVxcdUFCQkZcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGRjQxLVxcdUZGNUEwLTlcXHhCMlxceEIzXFx4QjlcXHhCQy1cXHhCRVxcdTA2NjAtXFx1MDY2OVxcdTA2RjAtXFx1MDZGOVxcdTA3QzAtXFx1MDdDOVxcdTA5NjYtXFx1MDk2RlxcdTA5RTYtXFx1MDlFRlxcdTA5RjQtXFx1MDlGOVxcdTBBNjYtXFx1MEE2RlxcdTBBRTYtXFx1MEFFRlxcdTBCNjYtXFx1MEI2RlxcdTBCNzItXFx1MEI3N1xcdTBCRTYtXFx1MEJGMlxcdTBDNjYtXFx1MEM2RlxcdTBDNzgtXFx1MEM3RVxcdTBDRTYtXFx1MENFRlxcdTBENjYtXFx1MEQ3NVxcdTBERTYtXFx1MERFRlxcdTBFNTAtXFx1MEU1OVxcdTBFRDAtXFx1MEVEOVxcdTBGMjAtXFx1MEYzM1xcdTEwNDAtXFx1MTA0OVxcdTEwOTAtXFx1MTA5OVxcdTEzNjktXFx1MTM3Q1xcdTE2RUUtXFx1MTZGMFxcdTE3RTAtXFx1MTdFOVxcdTE3RjAtXFx1MTdGOVxcdTE4MTAtXFx1MTgxOVxcdTE5NDYtXFx1MTk0RlxcdTE5RDAtXFx1MTlEQVxcdTFBODAtXFx1MUE4OVxcdTFBOTAtXFx1MUE5OVxcdTFCNTAtXFx1MUI1OVxcdTFCQjAtXFx1MUJCOVxcdTFDNDAtXFx1MUM0OVxcdTFDNTAtXFx1MUM1OVxcdTIwNzBcXHUyMDc0LVxcdTIwNzlcXHUyMDgwLVxcdTIwODlcXHUyMTUwLVxcdTIxODJcXHUyMTg1LVxcdTIxODlcXHUyNDYwLVxcdTI0OUJcXHUyNEVBLVxcdTI0RkZcXHUyNzc2LVxcdTI3OTNcXHUyQ0ZEXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzgtXFx1MzAzQVxcdTMxOTItXFx1MzE5NVxcdTMyMjAtXFx1MzIyOVxcdTMyNDgtXFx1MzI0RlxcdTMyNTEtXFx1MzI1RlxcdTMyODAtXFx1MzI4OVxcdTMyQjEtXFx1MzJCRlxcdUE2MjAtXFx1QTYyOVxcdUE2RTYtXFx1QTZFRlxcdUE4MzAtXFx1QTgzNVxcdUE4RDAtXFx1QThEOVxcdUE5MDAtXFx1QTkwOVxcdUE5RDAtXFx1QTlEOVxcdUE5RjAtXFx1QTlGOVxcdUFBNTAtXFx1QUE1OVxcdUFCRjAtXFx1QUJGOVxcdUZGMTAtXFx1RkYxOV0pKFtBLVpcXHhDMC1cXHhENlxceEQ4LVxceERFXFx1MDEwMFxcdTAxMDJcXHUwMTA0XFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAxMEVcXHUwMTEwXFx1MDExMlxcdTAxMTRcXHUwMTE2XFx1MDExOFxcdTAxMUFcXHUwMTFDXFx1MDExRVxcdTAxMjBcXHUwMTIyXFx1MDEyNFxcdTAxMjZcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTJFXFx1MDEzMFxcdTAxMzJcXHUwMTM0XFx1MDEzNlxcdTAxMzlcXHUwMTNCXFx1MDEzRFxcdTAxM0ZcXHUwMTQxXFx1MDE0M1xcdTAxNDVcXHUwMTQ3XFx1MDE0QVxcdTAxNENcXHUwMTRFXFx1MDE1MFxcdTAxNTJcXHUwMTU0XFx1MDE1NlxcdTAxNThcXHUwMTVBXFx1MDE1Q1xcdTAxNUVcXHUwMTYwXFx1MDE2MlxcdTAxNjRcXHUwMTY2XFx1MDE2OFxcdTAxNkFcXHUwMTZDXFx1MDE2RVxcdTAxNzBcXHUwMTcyXFx1MDE3NFxcdTAxNzZcXHUwMTc4XFx1MDE3OVxcdTAxN0JcXHUwMTdEXFx1MDE4MVxcdTAxODJcXHUwMTg0XFx1MDE4NlxcdTAxODdcXHUwMTg5LVxcdTAxOEJcXHUwMThFLVxcdTAxOTFcXHUwMTkzXFx1MDE5NFxcdTAxOTYtXFx1MDE5OFxcdTAxOUNcXHUwMTlEXFx1MDE5RlxcdTAxQTBcXHUwMUEyXFx1MDFBNFxcdTAxQTZcXHUwMUE3XFx1MDFBOVxcdTAxQUNcXHUwMUFFXFx1MDFBRlxcdTAxQjEtXFx1MDFCM1xcdTAxQjVcXHUwMUI3XFx1MDFCOFxcdTAxQkNcXHUwMUM0XFx1MDFDN1xcdTAxQ0FcXHUwMUNEXFx1MDFDRlxcdTAxRDFcXHUwMUQzXFx1MDFENVxcdTAxRDdcXHUwMUQ5XFx1MDFEQlxcdTAxREVcXHUwMUUwXFx1MDFFMlxcdTAxRTRcXHUwMUU2XFx1MDFFOFxcdTAxRUFcXHUwMUVDXFx1MDFFRVxcdTAxRjFcXHUwMUY0XFx1MDFGNi1cXHUwMUY4XFx1MDFGQVxcdTAxRkNcXHUwMUZFXFx1MDIwMFxcdTAyMDJcXHUwMjA0XFx1MDIwNlxcdTAyMDhcXHUwMjBBXFx1MDIwQ1xcdTAyMEVcXHUwMjEwXFx1MDIxMlxcdTAyMTRcXHUwMjE2XFx1MDIxOFxcdTAyMUFcXHUwMjFDXFx1MDIxRVxcdTAyMjBcXHUwMjIyXFx1MDIyNFxcdTAyMjZcXHUwMjI4XFx1MDIyQVxcdTAyMkNcXHUwMjJFXFx1MDIzMFxcdTAyMzJcXHUwMjNBXFx1MDIzQlxcdTAyM0RcXHUwMjNFXFx1MDI0MVxcdTAyNDMtXFx1MDI0NlxcdTAyNDhcXHUwMjRBXFx1MDI0Q1xcdTAyNEVcXHUwMzcwXFx1MDM3MlxcdTAzNzZcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDM4RlxcdTAzOTEtXFx1MDNBMVxcdTAzQTMtXFx1MDNBQlxcdTAzQ0ZcXHUwM0QyLVxcdTAzRDRcXHUwM0Q4XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTJcXHUwM0U0XFx1MDNFNlxcdTAzRThcXHUwM0VBXFx1MDNFQ1xcdTAzRUVcXHUwM0Y0XFx1MDNGN1xcdTAzRjlcXHUwM0ZBXFx1MDNGRC1cXHUwNDJGXFx1MDQ2MFxcdTA0NjJcXHUwNDY0XFx1MDQ2NlxcdTA0NjhcXHUwNDZBXFx1MDQ2Q1xcdTA0NkVcXHUwNDcwXFx1MDQ3MlxcdTA0NzRcXHUwNDc2XFx1MDQ3OFxcdTA0N0FcXHUwNDdDXFx1MDQ3RVxcdTA0ODBcXHUwNDhBXFx1MDQ4Q1xcdTA0OEVcXHUwNDkwXFx1MDQ5MlxcdTA0OTRcXHUwNDk2XFx1MDQ5OFxcdTA0OUFcXHUwNDlDXFx1MDQ5RVxcdTA0QTBcXHUwNEEyXFx1MDRBNFxcdTA0QTZcXHUwNEE4XFx1MDRBQVxcdTA0QUNcXHUwNEFFXFx1MDRCMFxcdTA0QjJcXHUwNEI0XFx1MDRCNlxcdTA0QjhcXHUwNEJBXFx1MDRCQ1xcdTA0QkVcXHUwNEMwXFx1MDRDMVxcdTA0QzNcXHUwNEM1XFx1MDRDN1xcdTA0QzlcXHUwNENCXFx1MDRDRFxcdTA0RDBcXHUwNEQyXFx1MDRENFxcdTA0RDZcXHUwNEQ4XFx1MDREQVxcdTA0RENcXHUwNERFXFx1MDRFMFxcdTA0RTJcXHUwNEU0XFx1MDRFNlxcdTA0RThcXHUwNEVBXFx1MDRFQ1xcdTA0RUVcXHUwNEYwXFx1MDRGMlxcdTA0RjRcXHUwNEY2XFx1MDRGOFxcdTA0RkFcXHUwNEZDXFx1MDRGRVxcdTA1MDBcXHUwNTAyXFx1MDUwNFxcdTA1MDZcXHUwNTA4XFx1MDUwQVxcdTA1MENcXHUwNTBFXFx1MDUxMFxcdTA1MTJcXHUwNTE0XFx1MDUxNlxcdTA1MThcXHUwNTFBXFx1MDUxQ1xcdTA1MUVcXHUwNTIwXFx1MDUyMlxcdTA1MjRcXHUwNTI2XFx1MDUyOFxcdTA1MkFcXHUwNTJDXFx1MDUyRVxcdTA1MzEtXFx1MDU1NlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTNBMC1cXHUxM0Y1XFx1MUUwMFxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTFFMDhcXHUxRTBBXFx1MUUwQ1xcdTFFMEVcXHUxRTEwXFx1MUUxMlxcdTFFMTRcXHUxRTE2XFx1MUUxOFxcdTFFMUFcXHUxRTFDXFx1MUUxRVxcdTFFMjBcXHUxRTIyXFx1MUUyNFxcdTFFMjZcXHUxRTI4XFx1MUUyQVxcdTFFMkNcXHUxRTJFXFx1MUUzMFxcdTFFMzJcXHUxRTM0XFx1MUUzNlxcdTFFMzhcXHUxRTNBXFx1MUUzQ1xcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTFFNDRcXHUxRTQ2XFx1MUU0OFxcdTFFNEFcXHUxRTRDXFx1MUU0RVxcdTFFNTBcXHUxRTUyXFx1MUU1NFxcdTFFNTZcXHUxRTU4XFx1MUU1QVxcdTFFNUNcXHUxRTVFXFx1MUU2MFxcdTFFNjJcXHUxRTY0XFx1MUU2NlxcdTFFNjhcXHUxRTZBXFx1MUU2Q1xcdTFFNkVcXHUxRTcwXFx1MUU3MlxcdTFFNzRcXHUxRTc2XFx1MUU3OFxcdTFFN0FcXHUxRTdDXFx1MUU3RVxcdTFFODBcXHUxRTgyXFx1MUU4NFxcdTFFODZcXHUxRTg4XFx1MUU4QVxcdTFFOENcXHUxRThFXFx1MUU5MFxcdTFFOTJcXHUxRTk0XFx1MUU5RVxcdTFFQTBcXHUxRUEyXFx1MUVBNFxcdTFFQTZcXHUxRUE4XFx1MUVBQVxcdTFFQUNcXHUxRUFFXFx1MUVCMFxcdTFFQjJcXHUxRUI0XFx1MUVCNlxcdTFFQjhcXHUxRUJBXFx1MUVCQ1xcdTFFQkVcXHUxRUMwXFx1MUVDMlxcdTFFQzRcXHUxRUM2XFx1MUVDOFxcdTFFQ0FcXHUxRUNDXFx1MUVDRVxcdTFFRDBcXHUxRUQyXFx1MUVENFxcdTFFRDZcXHUxRUQ4XFx1MUVEQVxcdTFFRENcXHUxRURFXFx1MUVFMFxcdTFFRTJcXHUxRUU0XFx1MUVFNlxcdTFFRThcXHUxRUVBXFx1MUVFQ1xcdTFFRUVcXHUxRUYwXFx1MUVGMlxcdTFFRjRcXHUxRUY2XFx1MUVGOFxcdTFFRkFcXHUxRUZDXFx1MUVGRVxcdTFGMDgtXFx1MUYwRlxcdTFGMTgtXFx1MUYxRFxcdTFGMjgtXFx1MUYyRlxcdTFGMzgtXFx1MUYzRlxcdTFGNDgtXFx1MUY0RFxcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUZcXHUxRjY4LVxcdTFGNkZcXHUxRkI4LVxcdTFGQkJcXHUxRkM4LVxcdTFGQ0JcXHUxRkQ4LVxcdTFGREJcXHUxRkU4LVxcdTFGRUNcXHUxRkY4LVxcdTFGRkJcXHUyMTAyXFx1MjEwN1xcdTIxMEItXFx1MjEwRFxcdTIxMTAtXFx1MjExMlxcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTMwLVxcdTIxMzNcXHUyMTNFXFx1MjEzRlxcdTIxNDVcXHUyMTgzXFx1MkMwMC1cXHUyQzJFXFx1MkM2MFxcdTJDNjItXFx1MkM2NFxcdTJDNjdcXHUyQzY5XFx1MkM2QlxcdTJDNkQtXFx1MkM3MFxcdTJDNzJcXHUyQzc1XFx1MkM3RS1cXHUyQzgwXFx1MkM4MlxcdTJDODRcXHUyQzg2XFx1MkM4OFxcdTJDOEFcXHUyQzhDXFx1MkM4RVxcdTJDOTBcXHUyQzkyXFx1MkM5NFxcdTJDOTZcXHUyQzk4XFx1MkM5QVxcdTJDOUNcXHUyQzlFXFx1MkNBMFxcdTJDQTJcXHUyQ0E0XFx1MkNBNlxcdTJDQThcXHUyQ0FBXFx1MkNBQ1xcdTJDQUVcXHUyQ0IwXFx1MkNCMlxcdTJDQjRcXHUyQ0I2XFx1MkNCOFxcdTJDQkFcXHUyQ0JDXFx1MkNCRVxcdTJDQzBcXHUyQ0MyXFx1MkNDNFxcdTJDQzZcXHUyQ0M4XFx1MkNDQVxcdTJDQ0NcXHUyQ0NFXFx1MkNEMFxcdTJDRDJcXHUyQ0Q0XFx1MkNENlxcdTJDRDhcXHUyQ0RBXFx1MkNEQ1xcdTJDREVcXHUyQ0UwXFx1MkNFMlxcdTJDRUJcXHUyQ0VEXFx1MkNGMlxcdUE2NDBcXHVBNjQyXFx1QTY0NFxcdUE2NDZcXHVBNjQ4XFx1QTY0QVxcdUE2NENcXHVBNjRFXFx1QTY1MFxcdUE2NTJcXHVBNjU0XFx1QTY1NlxcdUE2NThcXHVBNjVBXFx1QTY1Q1xcdUE2NUVcXHVBNjYwXFx1QTY2MlxcdUE2NjRcXHVBNjY2XFx1QTY2OFxcdUE2NkFcXHVBNjZDXFx1QTY4MFxcdUE2ODJcXHVBNjg0XFx1QTY4NlxcdUE2ODhcXHVBNjhBXFx1QTY4Q1xcdUE2OEVcXHVBNjkwXFx1QTY5MlxcdUE2OTRcXHVBNjk2XFx1QTY5OFxcdUE2OUFcXHVBNzIyXFx1QTcyNFxcdUE3MjZcXHVBNzI4XFx1QTcyQVxcdUE3MkNcXHVBNzJFXFx1QTczMlxcdUE3MzRcXHVBNzM2XFx1QTczOFxcdUE3M0FcXHVBNzNDXFx1QTczRVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3NDZcXHVBNzQ4XFx1QTc0QVxcdUE3NENcXHVBNzRFXFx1QTc1MFxcdUE3NTJcXHVBNzU0XFx1QTc1NlxcdUE3NThcXHVBNzVBXFx1QTc1Q1xcdUE3NUVcXHVBNzYwXFx1QTc2MlxcdUE3NjRcXHVBNzY2XFx1QTc2OFxcdUE3NkFcXHVBNzZDXFx1QTc2RVxcdUE3NzlcXHVBNzdCXFx1QTc3RFxcdUE3N0VcXHVBNzgwXFx1QTc4MlxcdUE3ODRcXHVBNzg2XFx1QTc4QlxcdUE3OERcXHVBNzkwXFx1QTc5MlxcdUE3OTZcXHVBNzk4XFx1QTc5QVxcdUE3OUNcXHVBNzlFXFx1QTdBMFxcdUE3QTJcXHVBN0E0XFx1QTdBNlxcdUE3QThcXHVBN0FBLVxcdUE3QURcXHVBN0IwLVxcdUE3QjRcXHVBN0I2XFx1RkYyMS1cXHVGRjNBXSkvZ1xuIiwibW9kdWxlLmV4cG9ydHMgPSAvKFtBLVpcXHhDMC1cXHhENlxceEQ4LVxceERFXFx1MDEwMFxcdTAxMDJcXHUwMTA0XFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAxMEVcXHUwMTEwXFx1MDExMlxcdTAxMTRcXHUwMTE2XFx1MDExOFxcdTAxMUFcXHUwMTFDXFx1MDExRVxcdTAxMjBcXHUwMTIyXFx1MDEyNFxcdTAxMjZcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTJFXFx1MDEzMFxcdTAxMzJcXHUwMTM0XFx1MDEzNlxcdTAxMzlcXHUwMTNCXFx1MDEzRFxcdTAxM0ZcXHUwMTQxXFx1MDE0M1xcdTAxNDVcXHUwMTQ3XFx1MDE0QVxcdTAxNENcXHUwMTRFXFx1MDE1MFxcdTAxNTJcXHUwMTU0XFx1MDE1NlxcdTAxNThcXHUwMTVBXFx1MDE1Q1xcdTAxNUVcXHUwMTYwXFx1MDE2MlxcdTAxNjRcXHUwMTY2XFx1MDE2OFxcdTAxNkFcXHUwMTZDXFx1MDE2RVxcdTAxNzBcXHUwMTcyXFx1MDE3NFxcdTAxNzZcXHUwMTc4XFx1MDE3OVxcdTAxN0JcXHUwMTdEXFx1MDE4MVxcdTAxODJcXHUwMTg0XFx1MDE4NlxcdTAxODdcXHUwMTg5LVxcdTAxOEJcXHUwMThFLVxcdTAxOTFcXHUwMTkzXFx1MDE5NFxcdTAxOTYtXFx1MDE5OFxcdTAxOUNcXHUwMTlEXFx1MDE5RlxcdTAxQTBcXHUwMUEyXFx1MDFBNFxcdTAxQTZcXHUwMUE3XFx1MDFBOVxcdTAxQUNcXHUwMUFFXFx1MDFBRlxcdTAxQjEtXFx1MDFCM1xcdTAxQjVcXHUwMUI3XFx1MDFCOFxcdTAxQkNcXHUwMUM0XFx1MDFDN1xcdTAxQ0FcXHUwMUNEXFx1MDFDRlxcdTAxRDFcXHUwMUQzXFx1MDFENVxcdTAxRDdcXHUwMUQ5XFx1MDFEQlxcdTAxREVcXHUwMUUwXFx1MDFFMlxcdTAxRTRcXHUwMUU2XFx1MDFFOFxcdTAxRUFcXHUwMUVDXFx1MDFFRVxcdTAxRjFcXHUwMUY0XFx1MDFGNi1cXHUwMUY4XFx1MDFGQVxcdTAxRkNcXHUwMUZFXFx1MDIwMFxcdTAyMDJcXHUwMjA0XFx1MDIwNlxcdTAyMDhcXHUwMjBBXFx1MDIwQ1xcdTAyMEVcXHUwMjEwXFx1MDIxMlxcdTAyMTRcXHUwMjE2XFx1MDIxOFxcdTAyMUFcXHUwMjFDXFx1MDIxRVxcdTAyMjBcXHUwMjIyXFx1MDIyNFxcdTAyMjZcXHUwMjI4XFx1MDIyQVxcdTAyMkNcXHUwMjJFXFx1MDIzMFxcdTAyMzJcXHUwMjNBXFx1MDIzQlxcdTAyM0RcXHUwMjNFXFx1MDI0MVxcdTAyNDMtXFx1MDI0NlxcdTAyNDhcXHUwMjRBXFx1MDI0Q1xcdTAyNEVcXHUwMzcwXFx1MDM3MlxcdTAzNzZcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDM4RlxcdTAzOTEtXFx1MDNBMVxcdTAzQTMtXFx1MDNBQlxcdTAzQ0ZcXHUwM0QyLVxcdTAzRDRcXHUwM0Q4XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTJcXHUwM0U0XFx1MDNFNlxcdTAzRThcXHUwM0VBXFx1MDNFQ1xcdTAzRUVcXHUwM0Y0XFx1MDNGN1xcdTAzRjlcXHUwM0ZBXFx1MDNGRC1cXHUwNDJGXFx1MDQ2MFxcdTA0NjJcXHUwNDY0XFx1MDQ2NlxcdTA0NjhcXHUwNDZBXFx1MDQ2Q1xcdTA0NkVcXHUwNDcwXFx1MDQ3MlxcdTA0NzRcXHUwNDc2XFx1MDQ3OFxcdTA0N0FcXHUwNDdDXFx1MDQ3RVxcdTA0ODBcXHUwNDhBXFx1MDQ4Q1xcdTA0OEVcXHUwNDkwXFx1MDQ5MlxcdTA0OTRcXHUwNDk2XFx1MDQ5OFxcdTA0OUFcXHUwNDlDXFx1MDQ5RVxcdTA0QTBcXHUwNEEyXFx1MDRBNFxcdTA0QTZcXHUwNEE4XFx1MDRBQVxcdTA0QUNcXHUwNEFFXFx1MDRCMFxcdTA0QjJcXHUwNEI0XFx1MDRCNlxcdTA0QjhcXHUwNEJBXFx1MDRCQ1xcdTA0QkVcXHUwNEMwXFx1MDRDMVxcdTA0QzNcXHUwNEM1XFx1MDRDN1xcdTA0QzlcXHUwNENCXFx1MDRDRFxcdTA0RDBcXHUwNEQyXFx1MDRENFxcdTA0RDZcXHUwNEQ4XFx1MDREQVxcdTA0RENcXHUwNERFXFx1MDRFMFxcdTA0RTJcXHUwNEU0XFx1MDRFNlxcdTA0RThcXHUwNEVBXFx1MDRFQ1xcdTA0RUVcXHUwNEYwXFx1MDRGMlxcdTA0RjRcXHUwNEY2XFx1MDRGOFxcdTA0RkFcXHUwNEZDXFx1MDRGRVxcdTA1MDBcXHUwNTAyXFx1MDUwNFxcdTA1MDZcXHUwNTA4XFx1MDUwQVxcdTA1MENcXHUwNTBFXFx1MDUxMFxcdTA1MTJcXHUwNTE0XFx1MDUxNlxcdTA1MThcXHUwNTFBXFx1MDUxQ1xcdTA1MUVcXHUwNTIwXFx1MDUyMlxcdTA1MjRcXHUwNTI2XFx1MDUyOFxcdTA1MkFcXHUwNTJDXFx1MDUyRVxcdTA1MzEtXFx1MDU1NlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTNBMC1cXHUxM0Y1XFx1MUUwMFxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTFFMDhcXHUxRTBBXFx1MUUwQ1xcdTFFMEVcXHUxRTEwXFx1MUUxMlxcdTFFMTRcXHUxRTE2XFx1MUUxOFxcdTFFMUFcXHUxRTFDXFx1MUUxRVxcdTFFMjBcXHUxRTIyXFx1MUUyNFxcdTFFMjZcXHUxRTI4XFx1MUUyQVxcdTFFMkNcXHUxRTJFXFx1MUUzMFxcdTFFMzJcXHUxRTM0XFx1MUUzNlxcdTFFMzhcXHUxRTNBXFx1MUUzQ1xcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTFFNDRcXHUxRTQ2XFx1MUU0OFxcdTFFNEFcXHUxRTRDXFx1MUU0RVxcdTFFNTBcXHUxRTUyXFx1MUU1NFxcdTFFNTZcXHUxRTU4XFx1MUU1QVxcdTFFNUNcXHUxRTVFXFx1MUU2MFxcdTFFNjJcXHUxRTY0XFx1MUU2NlxcdTFFNjhcXHUxRTZBXFx1MUU2Q1xcdTFFNkVcXHUxRTcwXFx1MUU3MlxcdTFFNzRcXHUxRTc2XFx1MUU3OFxcdTFFN0FcXHUxRTdDXFx1MUU3RVxcdTFFODBcXHUxRTgyXFx1MUU4NFxcdTFFODZcXHUxRTg4XFx1MUU4QVxcdTFFOENcXHUxRThFXFx1MUU5MFxcdTFFOTJcXHUxRTk0XFx1MUU5RVxcdTFFQTBcXHUxRUEyXFx1MUVBNFxcdTFFQTZcXHUxRUE4XFx1MUVBQVxcdTFFQUNcXHUxRUFFXFx1MUVCMFxcdTFFQjJcXHUxRUI0XFx1MUVCNlxcdTFFQjhcXHUxRUJBXFx1MUVCQ1xcdTFFQkVcXHUxRUMwXFx1MUVDMlxcdTFFQzRcXHUxRUM2XFx1MUVDOFxcdTFFQ0FcXHUxRUNDXFx1MUVDRVxcdTFFRDBcXHUxRUQyXFx1MUVENFxcdTFFRDZcXHUxRUQ4XFx1MUVEQVxcdTFFRENcXHUxRURFXFx1MUVFMFxcdTFFRTJcXHUxRUU0XFx1MUVFNlxcdTFFRThcXHUxRUVBXFx1MUVFQ1xcdTFFRUVcXHUxRUYwXFx1MUVGMlxcdTFFRjRcXHUxRUY2XFx1MUVGOFxcdTFFRkFcXHUxRUZDXFx1MUVGRVxcdTFGMDgtXFx1MUYwRlxcdTFGMTgtXFx1MUYxRFxcdTFGMjgtXFx1MUYyRlxcdTFGMzgtXFx1MUYzRlxcdTFGNDgtXFx1MUY0RFxcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUZcXHUxRjY4LVxcdTFGNkZcXHUxRkI4LVxcdTFGQkJcXHUxRkM4LVxcdTFGQ0JcXHUxRkQ4LVxcdTFGREJcXHUxRkU4LVxcdTFGRUNcXHUxRkY4LVxcdTFGRkJcXHUyMTAyXFx1MjEwN1xcdTIxMEItXFx1MjEwRFxcdTIxMTAtXFx1MjExMlxcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTMwLVxcdTIxMzNcXHUyMTNFXFx1MjEzRlxcdTIxNDVcXHUyMTgzXFx1MkMwMC1cXHUyQzJFXFx1MkM2MFxcdTJDNjItXFx1MkM2NFxcdTJDNjdcXHUyQzY5XFx1MkM2QlxcdTJDNkQtXFx1MkM3MFxcdTJDNzJcXHUyQzc1XFx1MkM3RS1cXHUyQzgwXFx1MkM4MlxcdTJDODRcXHUyQzg2XFx1MkM4OFxcdTJDOEFcXHUyQzhDXFx1MkM4RVxcdTJDOTBcXHUyQzkyXFx1MkM5NFxcdTJDOTZcXHUyQzk4XFx1MkM5QVxcdTJDOUNcXHUyQzlFXFx1MkNBMFxcdTJDQTJcXHUyQ0E0XFx1MkNBNlxcdTJDQThcXHUyQ0FBXFx1MkNBQ1xcdTJDQUVcXHUyQ0IwXFx1MkNCMlxcdTJDQjRcXHUyQ0I2XFx1MkNCOFxcdTJDQkFcXHUyQ0JDXFx1MkNCRVxcdTJDQzBcXHUyQ0MyXFx1MkNDNFxcdTJDQzZcXHUyQ0M4XFx1MkNDQVxcdTJDQ0NcXHUyQ0NFXFx1MkNEMFxcdTJDRDJcXHUyQ0Q0XFx1MkNENlxcdTJDRDhcXHUyQ0RBXFx1MkNEQ1xcdTJDREVcXHUyQ0UwXFx1MkNFMlxcdTJDRUJcXHUyQ0VEXFx1MkNGMlxcdUE2NDBcXHVBNjQyXFx1QTY0NFxcdUE2NDZcXHVBNjQ4XFx1QTY0QVxcdUE2NENcXHVBNjRFXFx1QTY1MFxcdUE2NTJcXHVBNjU0XFx1QTY1NlxcdUE2NThcXHVBNjVBXFx1QTY1Q1xcdUE2NUVcXHVBNjYwXFx1QTY2MlxcdUE2NjRcXHVBNjY2XFx1QTY2OFxcdUE2NkFcXHVBNjZDXFx1QTY4MFxcdUE2ODJcXHVBNjg0XFx1QTY4NlxcdUE2ODhcXHVBNjhBXFx1QTY4Q1xcdUE2OEVcXHVBNjkwXFx1QTY5MlxcdUE2OTRcXHVBNjk2XFx1QTY5OFxcdUE2OUFcXHVBNzIyXFx1QTcyNFxcdUE3MjZcXHVBNzI4XFx1QTcyQVxcdUE3MkNcXHVBNzJFXFx1QTczMlxcdUE3MzRcXHVBNzM2XFx1QTczOFxcdUE3M0FcXHVBNzNDXFx1QTczRVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3NDZcXHVBNzQ4XFx1QTc0QVxcdUE3NENcXHVBNzRFXFx1QTc1MFxcdUE3NTJcXHVBNzU0XFx1QTc1NlxcdUE3NThcXHVBNzVBXFx1QTc1Q1xcdUE3NUVcXHVBNzYwXFx1QTc2MlxcdUE3NjRcXHVBNzY2XFx1QTc2OFxcdUE3NkFcXHVBNzZDXFx1QTc2RVxcdUE3NzlcXHVBNzdCXFx1QTc3RFxcdUE3N0VcXHVBNzgwXFx1QTc4MlxcdUE3ODRcXHVBNzg2XFx1QTc4QlxcdUE3OERcXHVBNzkwXFx1QTc5MlxcdUE3OTZcXHVBNzk4XFx1QTc5QVxcdUE3OUNcXHVBNzlFXFx1QTdBMFxcdUE3QTJcXHVBN0E0XFx1QTdBNlxcdUE3QThcXHVBN0FBLVxcdUE3QURcXHVBN0IwLVxcdUE3QjRcXHVBN0I2XFx1RkYyMS1cXHVGRjNBXSkoW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRFxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdW2EtelxceEI1XFx4REYtXFx4RjZcXHhGOC1cXHhGRlxcdTAxMDFcXHUwMTAzXFx1MDEwNVxcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMTBGXFx1MDExMVxcdTAxMTNcXHUwMTE1XFx1MDExN1xcdTAxMTlcXHUwMTFCXFx1MDExRFxcdTAxMUZcXHUwMTIxXFx1MDEyM1xcdTAxMjVcXHUwMTI3XFx1MDEyOVxcdTAxMkJcXHUwMTJEXFx1MDEyRlxcdTAxMzFcXHUwMTMzXFx1MDEzNVxcdTAxMzdcXHUwMTM4XFx1MDEzQVxcdTAxM0NcXHUwMTNFXFx1MDE0MFxcdTAxNDJcXHUwMTQ0XFx1MDE0NlxcdTAxNDhcXHUwMTQ5XFx1MDE0QlxcdTAxNERcXHUwMTRGXFx1MDE1MVxcdTAxNTNcXHUwMTU1XFx1MDE1N1xcdTAxNTlcXHUwMTVCXFx1MDE1RFxcdTAxNUZcXHUwMTYxXFx1MDE2M1xcdTAxNjVcXHUwMTY3XFx1MDE2OVxcdTAxNkJcXHUwMTZEXFx1MDE2RlxcdTAxNzFcXHUwMTczXFx1MDE3NVxcdTAxNzdcXHUwMTdBXFx1MDE3Q1xcdTAxN0UtXFx1MDE4MFxcdTAxODNcXHUwMTg1XFx1MDE4OFxcdTAxOENcXHUwMThEXFx1MDE5MlxcdTAxOTVcXHUwMTk5LVxcdTAxOUJcXHUwMTlFXFx1MDFBMVxcdTAxQTNcXHUwMUE1XFx1MDFBOFxcdTAxQUFcXHUwMUFCXFx1MDFBRFxcdTAxQjBcXHUwMUI0XFx1MDFCNlxcdTAxQjlcXHUwMUJBXFx1MDFCRC1cXHUwMUJGXFx1MDFDNlxcdTAxQzlcXHUwMUNDXFx1MDFDRVxcdTAxRDBcXHUwMUQyXFx1MDFENFxcdTAxRDZcXHUwMUQ4XFx1MDFEQVxcdTAxRENcXHUwMUREXFx1MDFERlxcdTAxRTFcXHUwMUUzXFx1MDFFNVxcdTAxRTdcXHUwMUU5XFx1MDFFQlxcdTAxRURcXHUwMUVGXFx1MDFGMFxcdTAxRjNcXHUwMUY1XFx1MDFGOVxcdTAxRkJcXHUwMUZEXFx1MDFGRlxcdTAyMDFcXHUwMjAzXFx1MDIwNVxcdTAyMDdcXHUwMjA5XFx1MDIwQlxcdTAyMERcXHUwMjBGXFx1MDIxMVxcdTAyMTNcXHUwMjE1XFx1MDIxN1xcdTAyMTlcXHUwMjFCXFx1MDIxRFxcdTAyMUZcXHUwMjIxXFx1MDIyM1xcdTAyMjVcXHUwMjI3XFx1MDIyOVxcdTAyMkJcXHUwMjJEXFx1MDIyRlxcdTAyMzFcXHUwMjMzLVxcdTAyMzlcXHUwMjNDXFx1MDIzRlxcdTAyNDBcXHUwMjQyXFx1MDI0N1xcdTAyNDlcXHUwMjRCXFx1MDI0RFxcdTAyNEYtXFx1MDI5M1xcdTAyOTUtXFx1MDJBRlxcdTAzNzFcXHUwMzczXFx1MDM3N1xcdTAzN0ItXFx1MDM3RFxcdTAzOTBcXHUwM0FDLVxcdTAzQ0VcXHUwM0QwXFx1MDNEMVxcdTAzRDUtXFx1MDNEN1xcdTAzRDlcXHUwM0RCXFx1MDNERFxcdTAzREZcXHUwM0UxXFx1MDNFM1xcdTAzRTVcXHUwM0U3XFx1MDNFOVxcdTAzRUJcXHUwM0VEXFx1MDNFRi1cXHUwM0YzXFx1MDNGNVxcdTAzRjhcXHUwM0ZCXFx1MDNGQ1xcdTA0MzAtXFx1MDQ1RlxcdTA0NjFcXHUwNDYzXFx1MDQ2NVxcdTA0NjdcXHUwNDY5XFx1MDQ2QlxcdTA0NkRcXHUwNDZGXFx1MDQ3MVxcdTA0NzNcXHUwNDc1XFx1MDQ3N1xcdTA0NzlcXHUwNDdCXFx1MDQ3RFxcdTA0N0ZcXHUwNDgxXFx1MDQ4QlxcdTA0OERcXHUwNDhGXFx1MDQ5MVxcdTA0OTNcXHUwNDk1XFx1MDQ5N1xcdTA0OTlcXHUwNDlCXFx1MDQ5RFxcdTA0OUZcXHUwNEExXFx1MDRBM1xcdTA0QTVcXHUwNEE3XFx1MDRBOVxcdTA0QUJcXHUwNEFEXFx1MDRBRlxcdTA0QjFcXHUwNEIzXFx1MDRCNVxcdTA0QjdcXHUwNEI5XFx1MDRCQlxcdTA0QkRcXHUwNEJGXFx1MDRDMlxcdTA0QzRcXHUwNEM2XFx1MDRDOFxcdTA0Q0FcXHUwNENDXFx1MDRDRVxcdTA0Q0ZcXHUwNEQxXFx1MDREM1xcdTA0RDVcXHUwNEQ3XFx1MDREOVxcdTA0REJcXHUwNEREXFx1MDRERlxcdTA0RTFcXHUwNEUzXFx1MDRFNVxcdTA0RTdcXHUwNEU5XFx1MDRFQlxcdTA0RURcXHUwNEVGXFx1MDRGMVxcdTA0RjNcXHUwNEY1XFx1MDRGN1xcdTA0RjlcXHUwNEZCXFx1MDRGRFxcdTA0RkZcXHUwNTAxXFx1MDUwM1xcdTA1MDVcXHUwNTA3XFx1MDUwOVxcdTA1MEJcXHUwNTBEXFx1MDUwRlxcdTA1MTFcXHUwNTEzXFx1MDUxNVxcdTA1MTdcXHUwNTE5XFx1MDUxQlxcdTA1MURcXHUwNTFGXFx1MDUyMVxcdTA1MjNcXHUwNTI1XFx1MDUyN1xcdTA1MjlcXHUwNTJCXFx1MDUyRFxcdTA1MkZcXHUwNTYxLVxcdTA1ODdcXHUxM0Y4LVxcdTEzRkRcXHUxRDAwLVxcdTFEMkJcXHUxRDZCLVxcdTFENzdcXHUxRDc5LVxcdTFEOUFcXHUxRTAxXFx1MUUwM1xcdTFFMDVcXHUxRTA3XFx1MUUwOVxcdTFFMEJcXHUxRTBEXFx1MUUwRlxcdTFFMTFcXHUxRTEzXFx1MUUxNVxcdTFFMTdcXHUxRTE5XFx1MUUxQlxcdTFFMURcXHUxRTFGXFx1MUUyMVxcdTFFMjNcXHUxRTI1XFx1MUUyN1xcdTFFMjlcXHUxRTJCXFx1MUUyRFxcdTFFMkZcXHUxRTMxXFx1MUUzM1xcdTFFMzVcXHUxRTM3XFx1MUUzOVxcdTFFM0JcXHUxRTNEXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MUU0NVxcdTFFNDdcXHUxRTQ5XFx1MUU0QlxcdTFFNERcXHUxRTRGXFx1MUU1MVxcdTFFNTNcXHUxRTU1XFx1MUU1N1xcdTFFNTlcXHUxRTVCXFx1MUU1RFxcdTFFNUZcXHUxRTYxXFx1MUU2M1xcdTFFNjVcXHUxRTY3XFx1MUU2OVxcdTFFNkJcXHUxRTZEXFx1MUU2RlxcdTFFNzFcXHUxRTczXFx1MUU3NVxcdTFFNzdcXHUxRTc5XFx1MUU3QlxcdTFFN0RcXHUxRTdGXFx1MUU4MVxcdTFFODNcXHUxRTg1XFx1MUU4N1xcdTFFODlcXHUxRThCXFx1MUU4RFxcdTFFOEZcXHUxRTkxXFx1MUU5M1xcdTFFOTUtXFx1MUU5RFxcdTFFOUZcXHUxRUExXFx1MUVBM1xcdTFFQTVcXHUxRUE3XFx1MUVBOVxcdTFFQUJcXHUxRUFEXFx1MUVBRlxcdTFFQjFcXHUxRUIzXFx1MUVCNVxcdTFFQjdcXHUxRUI5XFx1MUVCQlxcdTFFQkRcXHUxRUJGXFx1MUVDMVxcdTFFQzNcXHUxRUM1XFx1MUVDN1xcdTFFQzlcXHUxRUNCXFx1MUVDRFxcdTFFQ0ZcXHUxRUQxXFx1MUVEM1xcdTFFRDVcXHUxRUQ3XFx1MUVEOVxcdTFFREJcXHUxRUREXFx1MUVERlxcdTFFRTFcXHUxRUUzXFx1MUVFNVxcdTFFRTdcXHUxRUU5XFx1MUVFQlxcdTFFRURcXHUxRUVGXFx1MUVGMVxcdTFFRjNcXHUxRUY1XFx1MUVGN1xcdTFFRjlcXHUxRUZCXFx1MUVGRFxcdTFFRkYtXFx1MUYwN1xcdTFGMTAtXFx1MUYxNVxcdTFGMjAtXFx1MUYyN1xcdTFGMzAtXFx1MUYzN1xcdTFGNDAtXFx1MUY0NVxcdTFGNTAtXFx1MUY1N1xcdTFGNjAtXFx1MUY2N1xcdTFGNzAtXFx1MUY3RFxcdTFGODAtXFx1MUY4N1xcdTFGOTAtXFx1MUY5N1xcdTFGQTAtXFx1MUZBN1xcdTFGQjAtXFx1MUZCNFxcdTFGQjZcXHUxRkI3XFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzZcXHUxRkM3XFx1MUZEMC1cXHUxRkQzXFx1MUZENlxcdTFGRDdcXHUxRkUwLVxcdTFGRTdcXHUxRkYyLVxcdTFGRjRcXHUxRkY2XFx1MUZGN1xcdTIxMEFcXHUyMTBFXFx1MjEwRlxcdTIxMTNcXHUyMTJGXFx1MjEzNFxcdTIxMzlcXHUyMTNDXFx1MjEzRFxcdTIxNDYtXFx1MjE0OVxcdTIxNEVcXHUyMTg0XFx1MkMzMC1cXHUyQzVFXFx1MkM2MVxcdTJDNjVcXHUyQzY2XFx1MkM2OFxcdTJDNkFcXHUyQzZDXFx1MkM3MVxcdTJDNzNcXHUyQzc0XFx1MkM3Ni1cXHUyQzdCXFx1MkM4MVxcdTJDODNcXHUyQzg1XFx1MkM4N1xcdTJDODlcXHUyQzhCXFx1MkM4RFxcdTJDOEZcXHUyQzkxXFx1MkM5M1xcdTJDOTVcXHUyQzk3XFx1MkM5OVxcdTJDOUJcXHUyQzlEXFx1MkM5RlxcdTJDQTFcXHUyQ0EzXFx1MkNBNVxcdTJDQTdcXHUyQ0E5XFx1MkNBQlxcdTJDQURcXHUyQ0FGXFx1MkNCMVxcdTJDQjNcXHUyQ0I1XFx1MkNCN1xcdTJDQjlcXHUyQ0JCXFx1MkNCRFxcdTJDQkZcXHUyQ0MxXFx1MkNDM1xcdTJDQzVcXHUyQ0M3XFx1MkNDOVxcdTJDQ0JcXHUyQ0NEXFx1MkNDRlxcdTJDRDFcXHUyQ0QzXFx1MkNENVxcdTJDRDdcXHUyQ0Q5XFx1MkNEQlxcdTJDRERcXHUyQ0RGXFx1MkNFMVxcdTJDRTNcXHUyQ0U0XFx1MkNFQ1xcdTJDRUVcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHVBNjQxXFx1QTY0M1xcdUE2NDVcXHVBNjQ3XFx1QTY0OVxcdUE2NEJcXHVBNjREXFx1QTY0RlxcdUE2NTFcXHVBNjUzXFx1QTY1NVxcdUE2NTdcXHVBNjU5XFx1QTY1QlxcdUE2NURcXHVBNjVGXFx1QTY2MVxcdUE2NjNcXHVBNjY1XFx1QTY2N1xcdUE2NjlcXHVBNjZCXFx1QTY2RFxcdUE2ODFcXHVBNjgzXFx1QTY4NVxcdUE2ODdcXHVBNjg5XFx1QTY4QlxcdUE2OERcXHVBNjhGXFx1QTY5MVxcdUE2OTNcXHVBNjk1XFx1QTY5N1xcdUE2OTlcXHVBNjlCXFx1QTcyM1xcdUE3MjVcXHVBNzI3XFx1QTcyOVxcdUE3MkJcXHVBNzJEXFx1QTcyRi1cXHVBNzMxXFx1QTczM1xcdUE3MzVcXHVBNzM3XFx1QTczOVxcdUE3M0JcXHVBNzNEXFx1QTczRlxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3NDdcXHVBNzQ5XFx1QTc0QlxcdUE3NERcXHVBNzRGXFx1QTc1MVxcdUE3NTNcXHVBNzU1XFx1QTc1N1xcdUE3NTlcXHVBNzVCXFx1QTc1RFxcdUE3NUZcXHVBNzYxXFx1QTc2M1xcdUE3NjVcXHVBNzY3XFx1QTc2OVxcdUE3NkJcXHVBNzZEXFx1QTc2RlxcdUE3NzEtXFx1QTc3OFxcdUE3N0FcXHVBNzdDXFx1QTc3RlxcdUE3ODFcXHVBNzgzXFx1QTc4NVxcdUE3ODdcXHVBNzhDXFx1QTc4RVxcdUE3OTFcXHVBNzkzLVxcdUE3OTVcXHVBNzk3XFx1QTc5OVxcdUE3OUJcXHVBNzlEXFx1QTc5RlxcdUE3QTFcXHVBN0EzXFx1QTdBNVxcdUE3QTdcXHVBN0E5XFx1QTdCNVxcdUE3QjdcXHVBN0ZBXFx1QUIzMC1cXHVBQjVBXFx1QUI2MC1cXHVBQjY1XFx1QUI3MC1cXHVBQkJGXFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkY0MS1cXHVGRjVBXSkvZ1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvLyBVbmRlciBcImFwaTpcIiBhbGwgZnVuY3Rpb25zIG11c3QgdGFrZSBhcGkgYXMgdGhlaXIgMXN0IHBhcmFtZXRlclxuICBhcGk6IHtcbiAgICBjcmVhdGVUcmFuc2FjdGlvbjogY3JlYXRlVHJhbnNhY3Rpb25cbiAgfVxuXG4gIC8qKlxuICAgIEB0eXBlZGVmIHtvYmplY3R9IGhlYWRlcnNcbiAgICBAcHJvcGVydHkge251bWJlcn0gcmVmX2Jsb2NrX251bSAtIExhc3QgaXJyZXZlcnNpYmxlIGJsb2NrIG51bWJlci4gIFRoZVxuICAgIGJpdC13aXNlIEFORCBvcGVyYXRpb24gaXMgdXNlZCB0byBrZWVwIHRoaXMgdmFsdWUgd2l0aCB0aGUgc2l6ZSBvZiBhIFVpbnQxNlxuICAgIHNpemUgKGEgYmxvY2sgbnVtIGluIHRoZSBsYXN0IDJeMTYgYmxvY2tzKS4gIEV4YW1wbGU6XG4gICAgYGdldF9pbmZvLmxhc3RfaXJyZXZlcnNpYmxlX2Jsb2NrX251bSAmIDB4RkZGRmBcbiAgXG4gICAgQHByb3BlcnR5IHtudW1iZXJ9IHJlZl9ibG9ja19wcmVmaXggLSBnZXRfYmxvY2sucmVmX2Jsb2NrX3ByZWZpeCAuLiBUaGlzIGlzXG4gICAgYSAzMiBiaXQgbnVtYmVyIGlkZW50aWZpZXIgKGlkZW50aWZ5IHRoZSBzYW1lIGJsb2NrIHJlZmVyZW5jZWQgaW4gYHJlZl9ibG9ja19udW1gKS5cbiAgXG4gICAgQHByb3BlcnR5IHtzdHJpbmd9IGV4cGlyYXRpb24gLSBUaGlzIGlzIGJhc2VkIG9uIHRoZSBoZWFkIGJsb2NrIHRpbWUgZnJvbSB0aGVcbiAgICBibG9ja2NoYWluLiAgQmUgY2FyZWZ1bCB0byBzdWZmaXggYSBaIGlmIHJlcXVpcmVkIChhcyB3aXRoIEZpcmVmb3ggYW5kIEphdmFTY3JpcHQpXG4gICAgdG8gZW5zdXJlIHRoaXMgZGF0ZSBzdHJpbmcgaXMgaW50ZXJwcmV0ZWQgYXMgWnVsdSB0aW1lLlxuICBcbiAgICBFeGFtcGxlOiBgbmV3IERhdGUobmV3IERhdGUoaW5mby5oZWFkX2Jsb2NrX3RpbWUgKyAnWicpLmdldFRpbWUoKSArIGV4cGlyZUluU2Vjb25kcyAqIDEwMDApLnRvSVNPU3RyaW5nKCkuc3BsaXQoJy4nKVswXWBcbiAgKi9cblxuICAvKipcbiAgICBDb25zdWx0IHRoZSBibG9ja2NoYWluIGFuZCBnYXRoZXIgaW5mb3JtYXRpb24gZm9yIHVzZSBpbiBhIG5ldyBzaWduZWQgdHJhbnNhY3Rpb24uXG4gICAgRm9yIFRyYW5zYWN0aW9uIGFzIFByb29mIG9mIFN0YWtlIChUYVBPUyksIDMyIGJpdHMgb2YgYSByZWNlbnQgYmxvY2sgSWQgaXMgaW5jbHVkZWQuXG4gICAgQmVjYXVzZSBhbGwgdHJhbnNhY3Rpb25zIHVzZSBUYVBPUywgdGhpcyBzb2x2ZXMgdGhlIG5vdGhpbmcgYXQgc3Rha2UgYXR0YWNrLlxuICBcbiAgICBUaGlzIGlzIHVzdWFsbHkgY2FsbGVkIGZvciBldmVyeSB0cmFuc2FjdGlvbiBvciBtYXliZSBjYWNoZWQgcGVyIGJsb2NrLiAgQWx0aG91Z2hcbiAgICBsb25nZXIgY2FjaGluZyBpcyBwb3NzaWJsZSwgYSBsb25nZXIgY2FjaGUgdGltZSBpbmNyZWFzZXMgdGhlIHJpc2sgb2YgYVxuICAgIHRyYW5zYWN0aW9uIHJlcGxheSBhdHRhY2suXG4gIFxuICAgIEBhcmcge251bWJlcn0gZXhwaXJlSW5TZWNvbmRzIC0gSG93IG1hbnkgc2Vjb25kcyB1bnRpbCBleHBpcmF0aW9uXG4gICAgQGFyZyB7ZnVuY3Rpb24oZXJyb3IsIGhlYWRlcnMpfSBjYWxsYmFjayB7QGxpbmsgaGVhZGVyc31cbiAgICBAc2VlIHtoZWFkZXJzfVxuICAgIEBleGFtcGxlIGVvcy5jcmVhdGVUcmFuc2FjdGlvbig2MCwgKGVycm9yLCBoZWFkZXJzKSA9PiB7fSlcbiAgKi9cbn07ZnVuY3Rpb24gY3JlYXRlVHJhbnNhY3Rpb24oYXBpKSB7XG4gIHZhciBleHBpcmVJblNlY29uZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDYwO1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGxiYWNrIHBhcmFtZXRlciBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGFwaS5nZXRJbmZvKGNoZWNrRXJyb3IoY2FsbGJhY2ssIGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgdmFyIGNoYWluRGF0ZSA9IG5ldyBEYXRlKGluZm8uaGVhZF9ibG9ja190aW1lICsgJ1onKTtcblxuICAgIGFwaS5nZXRCbG9jayhpbmZvLmxhc3RfaXJyZXZlcnNpYmxlX2Jsb2NrX251bSwgY2hlY2tFcnJvcihjYWxsYmFjaywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICB2YXIgZXhwaXJhdGlvbiA9IG5ldyBEYXRlKGNoYWluRGF0ZS5nZXRUaW1lKCkgKyBleHBpcmVJblNlY29uZHMgKiAxMDAwKTtcblxuICAgICAgdmFyIHJlZl9ibG9ja19udW0gPSBpbmZvLmxhc3RfaXJyZXZlcnNpYmxlX2Jsb2NrX251bSAmIDB4RkZGRjtcblxuICAgICAgdmFyIGhlYWRlcnMgPSB7XG4gICAgICAgIGV4cGlyYXRpb246IGV4cGlyYXRpb24udG9JU09TdHJpbmcoKS5zcGxpdCgnLicpWzBdLFxuICAgICAgICByZWZfYmxvY2tfbnVtOiByZWZfYmxvY2tfbnVtLFxuICAgICAgICByZWZfYmxvY2tfcHJlZml4OiBibG9jay5yZWZfYmxvY2tfcHJlZml4LFxuICAgICAgICBtYXhfbmV0X3VzYWdlX3dvcmRzOiAwLFxuICAgICAgICBtYXhfY3B1X3VzYWdlX21zOiAwLFxuICAgICAgICBkZWxheV9zZWM6IDAsXG4gICAgICAgIGNvbnRleHRfZnJlZV9hY3Rpb25zOiBbXSxcbiAgICAgICAgYWN0aW9uczogW10sXG4gICAgICAgIHNpZ25hdHVyZXM6IFtdLFxuICAgICAgICB0cmFuc2FjdGlvbl9leHRlbnNpb25zOiBbXVxuICAgICAgfTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGhlYWRlcnMpO1xuICAgIH0pKTtcbiAgfSkpO1xufVxuXG52YXIgY2hlY2tFcnJvciA9IGZ1bmN0aW9uIGNoZWNrRXJyb3IocGFyZW50RXJyLCBwYXJyZW50UmVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcGFyZW50RXJyKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFycmVudFJlcyhyZXN1bHQpO1xuICAgIH1cbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2lzLWl0ZXJhYmxlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9jb3JlLmlzLWl0ZXJhYmxlJyk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuaXNJdGVyYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTyA9IE9iamVjdChpdCk7XG4gIHJldHVybiBPW0lURVJBVE9SXSAhPT0gdW5kZWZpbmVkXG4gICAgfHwgJ0BAaXRlcmF0b3InIGluIE9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgfHwgSXRlcmF0b3JzLmhhc093blByb3BlcnR5KGNsYXNzb2YoTykpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yJyk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXQgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJGbiA9IGdldChpdCk7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICByZXR1cm4gYW5PYmplY3QoaXRlckZuLmNhbGwoaXQpKTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xudmFyIFN0cnVjdHMgPSByZXF1aXJlKCcuL3N0cnVjdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBYmlDYWNoZTtcblxuZnVuY3Rpb24gQWJpQ2FjaGUobmV0d29yaywgY29uZmlnKSB7XG4gIGNvbmZpZy5hYmlDYWNoZSA9IHtcbiAgICBhYmlBc3luYzogYWJpQXN5bmMsXG4gICAgYWJpOiBhYmlcblxuICAgIC8vIEhlbHAgKG9yIFwidXNhZ2VcIikgbmVlZHMge2RlZmF1bHRzOiB0cnVlfVxuICB9O3ZhciBhYmlDYWNoZUNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHsgZGVmYXVsdHM6IHRydWUgfSwgY29uZmlnKTtcblxuICB2YXIgY2FjaGUgPSB7fTtcblxuICAvKipcbiAgICBBc3luY2hyb25vdXNseSBmZXRjaCBhbmQgY2FjaGUgYW4gQUJJIGZyb20gdGhlIGJsb2NrY2hhaW4uXG4gICAgIEBhcmcge3N0cmluZ30gYWNjb3VudCAtIGJsb2NrY2hhaW4gYWNjb3VudCB3aXRoIGRlcGxveWVkIGNvbnRyYWN0XG4gICAgQGFyZyB7Ym9vbGVhbn0gW2ZvcmNlID0gdHJ1ZV0gZmFsc2Ugd2hlbiBBQkkgaXMgaW1tdXRhYmxlLlxuICAqL1xuICBmdW5jdGlvbiBhYmlBc3luYyhhY2NvdW50KSB7XG4gICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBhY2NvdW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFjY291bnQpLCAnc3RyaW5nJywgJ2FjY291bnQgc3RyaW5nIHJlcXVpcmVkJyk7XG5cbiAgICBpZiAoZm9yY2UgPT0gZmFsc2UgJiYgY2FjaGVbYWNjb3VudF0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZVthY2NvdW50XSk7XG4gICAgfVxuXG4gICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgdmFyIF9hYmkgPSBjYWNoZVthY2NvdW50XTtcbiAgICAgIGFzc2VydChfYWJpLCAnTWlzc2luZyBBQkkgZm9yIGFjY291bnQ6ICcgKyBhY2NvdW50ICsgJywgcHJvdmlkZSBodHRwRW5kcG9pbnQgb3IgYWRkIHRvIGFiaUNhY2hlJyk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF9hYmkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXR3b3JrLmdldEFiaShhY2NvdW50KS50aGVuKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICBhc3NlcnQoY29kZS5hYmksICdNaXNzaW5nIEFCSSBmb3IgYWNjb3VudDogJyArIGFjY291bnQpO1xuICAgICAgcmV0dXJuIGFiaShhY2NvdW50LCBjb2RlLmFiaSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICBTeW5jaHJvbm91c2x5IHNldCBvciBmZXRjaCBhbiBBQkkgZnJvbSBsb2NhbCBjYWNoZS5cbiAgICAgQGFyZyB7c3RyaW5nfSBhY2NvdW50IC0gYmxvY2tjaGFpbiBhY2NvdW50IHdpdGggZGVwbG95ZWQgY29udHJhY3RcbiAgICBAYXJnIHtzdHJpbmd9IFthYmldIC0gYmxvY2tjaGFpbiBBQkkganNvbiBkYXRhLiAgTnVsbCB0byBmZXRjaCBvciBub24tbnVsbCB0byBjYWNoZVxuICAqL1xuICBmdW5jdGlvbiBhYmkoYWNjb3VudCwgYWJpKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBhY2NvdW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFjY291bnQpLCAnc3RyaW5nJywgJ2FjY291bnQgc3RyaW5nIHJlcXVpcmVkJyk7XG4gICAgaWYgKGFiaSkge1xuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBhYmkgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYWJpKSwgJ29iamVjdCcsICdhYmknKTtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYWJpKSkge1xuICAgICAgICBhYmkgPSBKU09OLnBhcnNlKGFiaSk7XG4gICAgICB9XG4gICAgICB2YXIgZmNTY2hlbWEgPSBhYmlUb0ZjU2NoZW1hKGFiaSwgYWNjb3VudCk7XG4gICAgICB2YXIgc3RydWN0cyA9IFN0cnVjdHMoYWJpQ2FjaGVDb25maWcsIGZjU2NoZW1hKTsgLy8gcmV0dXJucyB7c3RydWN0cywgdHlwZXN9XG4gICAgICByZXR1cm4gY2FjaGVbYWNjb3VudF0gPSBPYmplY3QuYXNzaWduKHsgYWJpOiBhYmksIHNjaGVtYTogZmNTY2hlbWEgfSwgc3RydWN0cyk7XG4gICAgfVxuICAgIHZhciBjID0gY2FjaGVbYWNjb3VudF07XG4gICAgaWYgKGMgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBYmkgXFwnJyArIGFjY291bnQgKyAnXFwnIGlzIG5vdCBjYWNoZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICByZXR1cm4gY29uZmlnLmFiaUNhY2hlO1xufVxuXG5mdW5jdGlvbiBhYmlUb0ZjU2NoZW1hKGFiaSwgYWNjb3VudCkge1xuICAvLyBjdXN0b21UeXBlc1xuICAvLyBGb3IgRmNCdWZmZXJcbiAgdmFyIGFiaVNjaGVtYSA9IHt9O1xuXG4gIC8vIGNvbnZlcnQgYWJpIHR5cGVzIHRvIEZjYnVmZmVyIHNjaGVtYVxuICBpZiAoYWJpLnR5cGVzKSB7XG4gICAgLy8gYWxpYXNlc1xuICAgIGFiaS50eXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBcImFjY291bnRfbmFtZVwiID0gXCJuYW1lXCJcbiAgICAgIGFiaVNjaGVtYVtlLm5ld190eXBlX25hbWVdID0gZS50eXBlO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFiaS5zdHJ1Y3RzKSB7XG4gICAgLy8gdHJhbnNhY3Rpb25faGVhZGVyID0gZmllbGRzW2FjdG9yLCBwZXJtaXNzaW9uXSBleHRlbmRzIGJhc2UgXCJ0cmFuc2FjdGlvblwiXG4gICAgYWJpLnN0cnVjdHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGZpZWxkcyA9IHt9O1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGUuZmllbGRzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBmaWVsZCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgZmllbGRzW2ZpZWxkLm5hbWVdID0gZmllbGQudHlwZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFiaVNjaGVtYVtlLm5hbWVdID0geyBiYXNlOiBlLmJhc2UsIGZpZWxkczogZmllbGRzIH07XG4gICAgICBpZiAoZS5iYXNlID09PSAnJykge1xuICAgICAgICBkZWxldGUgYWJpU2NoZW1hW2UubmFtZV0uYmFzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhYmkuYWN0aW9ucykge1xuICAgIC8vIHNldHByb2RzID0gc2V0X3Byb2R1Y2Vyc1xuICAgIGFiaS5hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgLy8gQGV4YW1wbGUgYWN0aW9uID0ge25hbWU6ICdzZXRwcm9kcycsIHR5cGU6ICdzZXRfcHJvZHVjZXJzJ31cbiAgICAgIHZhciB0eXBlID0gYWJpU2NoZW1hW2FjdGlvbi50eXBlXTtcbiAgICAgIGlmICghdHlwZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNaXNzaW5nIGFiaVNjaGVtYSB0eXBlJywgYWN0aW9uLnR5cGUsIGFjY291bnQpOyAvLywgYWJpLCBhYmlTY2hlbWEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlLmFjdGlvbiA9IHtcbiAgICAgICAgICBuYW1lOiBhY3Rpb24ubmFtZSxcbiAgICAgICAgICBhY2NvdW50OiBhY2NvdW50XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gY29uc29sZS5sb2coJ2FiaVNjaGVtYScsIGFiaVNjaGVtYSk7XG4gIH1cblxuICByZXR1cm4gYWJpU2NoZW1hO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5Jyk7XG5cbnZhciBfc2xpY2VkVG9BcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGljZWRUb0FycmF5Mik7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yJyk7XG5cbnZhciBfcmVnZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnZW5lcmF0b3IpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgZWNjID0gcmVxdWlyZSgnZW9zanMtZWNjJyk7XG52YXIgRmNidWZmZXIgPSByZXF1aXJlKCdmY2J1ZmZlcicpO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdlb3Nqcy1hcGknKSxcbiAgICBwcm9jZXNzQXJncyA9IF9yZXF1aXJlLnByb2Nlc3NBcmdzO1xuXG52YXIgU3RydWN0cyA9IHJlcXVpcmUoJy4vc3RydWN0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdyaXRlQXBpR2VuO1xuXG52YXIgc2lnbiA9IGVjYy5zaWduO1xuXG5cbmZ1bmN0aW9uIHdyaXRlQXBpR2VuKE5ldHdvcmssIG5ldHdvcmssIHN0cnVjdHMsIGNvbmZpZywgYWJpcykge1xuICBpZiAodHlwZW9mIGNvbmZpZy5jaGFpbklkICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbmZpZy5jaGFpbklkIGlzIHJlcXVpcmVkJyk7XG4gIH1cbiAgdmFyIHdyaXRlQXBpID0gV3JpdGVBcGkoTmV0d29yaywgbmV0d29yaywgY29uZmlnLCBzdHJ1Y3RzLnRyYW5zYWN0aW9uKTtcbiAgdmFyIHJlc2VydmVGdW5jdGlvbnMgPSBuZXcgU2V0KFsndHJhbnNhY3Rpb24nLCAnY29udHJhY3QnXSk7XG5cbiAgdmFyIG1lcmdlID0ge307XG4gIC8vIHNlbmRzIHRyYW5zYWN0aW9ucywgY2FuIGFjdCBhcyBhbiBhY3Rpb24gY29sbGVjdGluZyB3cmFwcGVyXG4gIG1lcmdlLnRyYW5zYWN0aW9uID0gd3JpdGVBcGkuZ2VuVHJhbnNhY3Rpb24oc3RydWN0cywgbWVyZ2UpO1xuXG4gIC8vIEltbWVkaWF0ZSBzZW5kIG9wZXJhdGlvbnMgYXV0b21hdGljYWxseSBjYWxscyBtZXJnZS50cmFuc2FjdGlvblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhYmlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIGFiaSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBmb3IgKHZhciB0eXBlIGluIGFiaS5zY2hlbWEpIHtcbiAgICAgICAgdmFyIHR5cGVTdHJ1Y3QgPSBhYmkuc2NoZW1hW3R5cGVdO1xuICAgICAgICBpZiAodHlwZW9mIHR5cGVTdHJ1Y3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gc2tpcCB0eXBlcyBsaWtlOyBuYW1lLCBhY2NvdW50X25hbWUsIGV0Yy4uXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHR5cGVTdHJ1Y3QgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodHlwZVN0cnVjdCksICdvYmplY3QnLCAnYWJpLnNjaGVtYVt0eXBlID0gJyArIHR5cGUgKyAnXScpO1xuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlU3RydWN0LmFjdGlvbjtcblxuICAgICAgICBpZiAoYWN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBBQkkgcHJpdmF0ZSBzdHJ1Y3RcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNlcnZlRnVuY3Rpb25zLmhhcyhhY3Rpb24ubmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25mbGljdGluZyBBcGkgZnVuY3Rpb246ICcgKyB0eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZpbml0aW9uID0gc2NoZW1hRmllbGRzKGFiaS5zY2hlbWEsIHR5cGUpO1xuICAgICAgICBtZXJnZVthY3Rpb24ubmFtZV0gPSB3cml0ZUFwaS5nZW5NZXRob2QodHlwZSwgZGVmaW5pdGlvbiwgbWVyZ2UudHJhbnNhY3Rpb24sIGFjdGlvbi5hY2NvdW50LCBhY3Rpb24ubmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICBJbW1lZGF0ZSBzZW5kIGNvbnRyYWN0IGFjdGlvbnMuXG4gICAgICAgQGV4YW1wbGUgZW9zLmNvbnRyYWN0KCdteWNvbnRyYWN0JywgW29wdGlvbnNdLCBbY2FsbGJhY2tdKVxuICAgICAgQGV4YW1wbGUgZW9zLmNvbnRyYWN0KCdteWNvbnRyYWN0JykudGhlbihteWNvbnRyYWN0ID0+IG15Y29udHJhY3QubXlhY3Rpb24oLi4uKSlcbiAgICAqL1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1lcmdlLmNvbnRyYWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBfcHJvY2Vzc0FyZ3MgPSBwcm9jZXNzQXJncyhhcmdzLCBbJ2FjY291bnQnXSwgJ2NvbnRyYWN0Jywgb3B0aW9uc0Zvcm1hdHRlciksXG4gICAgICAgIHBhcmFtcyA9IF9wcm9jZXNzQXJncy5wYXJhbXMsXG4gICAgICAgIG9wdGlvbnMgPSBfcHJvY2Vzc0FyZ3Mub3B0aW9ucyxcbiAgICAgICAgcmV0dXJuUHJvbWlzZSA9IF9wcm9jZXNzQXJncy5yZXR1cm5Qcm9taXNlLFxuICAgICAgICBjYWxsYmFjayA9IF9wcm9jZXNzQXJncy5jYWxsYmFjaztcblxuICAgIHZhciBhY2NvdW50ID0gcGFyYW1zLmFjY291bnQ7XG5cbiAgICAvLyBzZW5kcyB0cmFuc2FjdGlvbnMgdmlhIGl0cyBvd24gdHJhbnNhY3Rpb24gZnVuY3Rpb25cblxuICAgIHdyaXRlQXBpLmdlbkNvbnRyYWN0QWN0aW9ucyhhY2NvdW50KS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCByKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAocikge1xuICAgICAgY2FsbGJhY2socik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmV0dXJuUHJvbWlzZTtcbiAgfTtcblxuICByZXR1cm4gbWVyZ2U7XG59XG5cbmZ1bmN0aW9uIFdyaXRlQXBpKE5ldHdvcmssIG5ldHdvcmssIGNvbmZpZywgVHJhbnNhY3Rpb24pIHtcbiAgLyoqXG4gICAgQGFyZyB7YXJyYXl9IFthcmdzLmNvbnRyYWN0c11cbiAgICBAYXJnIHtjYWxsYmFja3xvYmplY3R9IGFyZ3MudHJhbnNhY3Rpb24gdHIgPT4ge3RyLnRyYW5zZmVyIC4uIH1cbiAgICBAYXJnIHtvYmplY3R9IFthcmdzLm9wdGlvbnNdXG4gICAgQGFyZyB7ZnVuY3Rpb259IFthcmdzLmNhbGxiYWNrXVxuICAqL1xuICB2YXIgZ2VuVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiBnZW5UcmFuc2FjdGlvbihzdHJ1Y3RzLCBtZXJnZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udHJhY3RzLCBvcHRpb25zLCBjYWxsYmFjaywgaXNDb250cmFjdEFycmF5LCBhY2NvdW50cywgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIsIF9kaWRJdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yRXJyb3IyLCBfaXRlcmF0b3IyLCBfc3RlcDIsIGFjdGlvbiwgYWJpUHJvbWlzZXMsIGNhY2hlZENvZGUsIGFyZywgY29udHJhY3RQcm9taXNlcywgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMsIF9kaWRJdGVyYXRvckVycm9yMywgX2l0ZXJhdG9yRXJyb3IzLCBfaXRlcmF0b3IzLCBfc3RlcDMsIGFjY291bnQ7XG5cbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGNvbnRyYWN0cyA9IHZvaWQgMCwgb3B0aW9ucyA9IHZvaWQgMCwgY2FsbGJhY2sgPSB2b2lkIDA7XG5cblxuICAgICAgICAgICAgICBpZiAoYXJnc1thcmdzLmxlbmd0aCAtIDFdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayBtYXkgYmUgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMCwgYXJncy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlzQ29udHJhY3RBcnJheSA9IGlzU3RyaW5nQXJyYXkoYXJnc1swXSk7XG5cbiAgICAgICAgICAgICAgaWYgKCFpc0NvbnRyYWN0QXJyYXkpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnRyYWN0cyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgIGlmICghKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb250cmFjdHMgPSBbYXJnc1swXV07XG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICBpZiAoISgoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYXJnc1swXSkgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoYXJnc1swXS5hY3Rpb25zKSkpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBmdWxsIHRyYW5zYWN0aW9uLCBsb29rdXAgQUJJcyB1c2VkIGJ5IGVhY2ggYWN0aW9uXG4gICAgICAgICAgICAgIGFjY291bnRzID0gbmV3IFNldCgpOyAvLyBtYWtlIGEgdW5pcXVlIGxpc3RcblxuICAgICAgICAgICAgICAvLyBUT0RPOiBBZGQgYXJnc1swXS5jb250ZXh0X2ZyZWVfYWN0aW9ucyB0byBhY2NvdW50cyB0b28/XG5cbiAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTg7XG4gICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMiA9IGFyZ3NbMF0uYWN0aW9uc1tTeW1ib2wuaXRlcmF0b3JdKCk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICBhY2NvdW50cy5hZGQoYWN0aW9uLmFjY291bnQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIyO1xuICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDE4KTtcbiAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gX2NvbnRleHQudDA7XG5cbiAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNjtcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI3O1xuXG4gICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgMjk6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOTtcblxuICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcblxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyOSk7XG5cbiAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMjYpO1xuXG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICBhYmlQcm9taXNlcyA9IFtdO1xuXG4gICAgICAgICAgICAgIC8vIEVvcyBjb250cmFjdCBvcGVyYXRpb25zIGFyZSBjYWNoZWQgKGVmZmljaWVudCBhbmQgb2ZmbGluZSB0cmFuc2FjdGlvbnMpXG5cbiAgICAgICAgICAgICAgY2FjaGVkQ29kZSA9IG5ldyBTZXQoWydlb3NpbycsICdlb3Npby50b2tlbicsICdlb3Npby5udWxsJ10pO1xuXG4gICAgICAgICAgICAgIGFjY291bnRzLmZvckVhY2goZnVuY3Rpb24gKGFjY291bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlZENvZGUuaGFzKGFjY291bnQpKSB7XG4gICAgICAgICAgICAgICAgICBhYmlQcm9taXNlcy5wdXNoKGNvbmZpZy5hYmlDYWNoZS5hYmlBc3luYyhhY2NvdW50KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM5O1xuICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmF3cmFwKFByb21pc2UuYWxsKGFiaVByb21pc2VzKSk7XG5cbiAgICAgICAgICAgIGNhc2UgMzk6XG5cbiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSAmJiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoYXJnc1thcmdzLmxlbmd0aCAtIDFdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGFzc2VydC5lcXVhbChhcmdzLmxlbmd0aCwgMSwgJ3RyYW5zYWN0aW9uIGFyZ3M6IGNvbnRyYWN0czxzdHJpbmd8YXJyYXk+LCB0cmFuc2FjdGlvbjxjYWxsYmFja3xvYmplY3Q+LCBbb3B0aW9uc10sIFtjYWxsYmFja10nKTtcbiAgICAgICAgICAgICAgYXJnID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICBpZiAoIWNvbnRyYWN0cykge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2NztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGFzc2VydCghY2FsbGJhY2ssICdjYWxsYmFjayB3aXRoIGNvbnRyYWN0cyBhcmUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwoJ2Z1bmN0aW9uJywgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhcmcpLCAncHJvdmlkZSBmdW5jdGlvbiBjYWxsYmFjayBmb2xsb3dpbmcgY29udHJhY3RzIGFycmF5IHBhcmFtZXRlcicpO1xuXG4gICAgICAgICAgICAgIGNvbnRyYWN0UHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTA7XG5cbiAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IzID0gY29udHJhY3RzW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGFjY291bnQgPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXR1cCB3cmFwcGVyIGZ1bmN0aW9ucyB0byBjb2xsZWN0IGNvbnRyYWN0IGFwaSBjYWxsc1xuICAgICAgICAgICAgICAgIGNvbnRyYWN0UHJvbWlzZXMucHVzaChnZW5Db250cmFjdEFjdGlvbnMoYWNjb3VudCwgbWVyZ2UudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1ODtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTQ6XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1NDtcbiAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dFsnY2F0Y2gnXSg1MCk7XG4gICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IF9jb250ZXh0LnQxO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTg7XG4gICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1OTtcblxuICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIDYxOlxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNjE7XG5cbiAgICAgICAgICAgICAgaWYgKCFfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goNjEpO1xuXG4gICAgICAgICAgICBjYXNlIDY1OlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDU4KTtcblxuICAgICAgICAgICAgY2FzZSA2NjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgUHJvbWlzZS5hbGwoY29udHJhY3RQcm9taXNlcykudGhlbihmdW5jdGlvbiAoYWN0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBtZXJnZXMgPSB7fTtcbiAgICAgICAgICAgICAgICBhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKG0sIGkpIHtcbiAgICAgICAgICAgICAgICAgIG1lcmdlc1tjb250cmFjdHNbaV1dID0gbTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW0gPSBpc0NvbnRyYWN0QXJyYXkgPyBtZXJnZXMgOiBtZXJnZXNbY29udHJhY3RzWzBdXTtcbiAgICAgICAgICAgICAgICAvLyBjb2xsZWN0IGFuZCBpbnZva2UgYXBpIGNhbGxzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyTWVzc2FnZUNvbGxlY3RvcihhcmcsIG9wdGlvbnMsIHBhcmFtKTtcbiAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBjYXNlIDY3OlxuICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIHRyTWVzc2FnZUNvbGxlY3RvcihhcmcsIG9wdGlvbnMsIG1lcmdlKSk7XG5cbiAgICAgICAgICAgIGNhc2UgNjk6XG4gICAgICAgICAgICAgIGlmICghKCh0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFyZykpID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCB0cmFuc2FjdGlvbihhcmcsIG9wdGlvbnMsIGNhbGxiYWNrKSk7XG5cbiAgICAgICAgICAgIGNhc2UgNzE6XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmlyc3QgdHJhbnNhY3Rpb24gYXJndW1lbnQgdW5yZWNvZ25pemVkJywgYXJnKTtcblxuICAgICAgICAgICAgY2FzZSA3MjpcbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBudWxsLCB0aGlzLCBbWzE4LCAyMiwgMjYsIDM0XSwgWzI3LCwgMjksIDMzXSwgWzUwLCA1NCwgNTgsIDY2XSwgWzU5LCwgNjEsIDY1XV0pO1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2VuQ29udHJhY3RBY3Rpb25zKGFjY291bnQpIHtcbiAgICB2YXIgdHJhbnNhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG5cbiAgICByZXR1cm4gY29uZmlnLmFiaUNhY2hlLmFiaUFzeW5jKGFjY291bnQpLnRoZW4oZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShjYWNoZS5hYmkuYWN0aW9ucykgJiYgY2FjaGUuYWJpLmFjdGlvbnMubGVuZ3RoLCAnTm8gYWN0aW9ucycpO1xuXG4gICAgICB2YXIgY29udHJhY3RNZXJnZSA9IHt9O1xuICAgICAgY29udHJhY3RNZXJnZS50cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uID8gdHJhbnNhY3Rpb24gOiBnZW5UcmFuc2FjdGlvbihjYWNoZS5zdHJ1Y3RzLCBjb250cmFjdE1lcmdlKTtcblxuICAgICAgY2FjaGUuYWJpLmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgICAgIHR5cGUgPSBfcmVmLnR5cGU7XG5cbiAgICAgICAgdmFyIGRlZmluaXRpb24gPSBzY2hlbWFGaWVsZHMoY2FjaGUuc2NoZW1hLCB0eXBlKTtcbiAgICAgICAgY29udHJhY3RNZXJnZVtuYW1lXSA9IGdlbk1ldGhvZCh0eXBlLCBkZWZpbml0aW9uLCBjb250cmFjdE1lcmdlLnRyYW5zYWN0aW9uLCBhY2NvdW50LCBuYW1lKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb250cmFjdE1lcmdlLmZjID0gY2FjaGU7XG5cbiAgICAgIHJldHVybiBjb250cmFjdE1lcmdlO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuTWV0aG9kKHR5cGUsIGRlZmluaXRpb24sIHRyYW5zYWN0aW9uQXJnKSB7XG4gICAgdmFyIGFjY291bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICdlb3Npby50b2tlbic7XG4gICAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHR5cGU7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5sb2codXNhZ2UoeyBuYW1lOiBuYW1lLCB0eXBlOiB0eXBlIH0sIGRlZmluaXRpb24sIE5ldHdvcmssIGFjY291bnQsIGNvbmZpZykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNwZWNpYWwgY2FzZSBsaWtlIG11bHRpLWFjdGlvbiB0cmFuc2FjdGlvbnMgd2hlcmUgdGhpcyBsaWIgbmVlZHNcbiAgICAgIC8vIHRvIGJlIHN1cmUgdGhlIGJyb2FkY2FzdCBpcyBvZmYuXG4gICAgICB2YXIgb3B0aW9uT3ZlcnJpZGVzID0ge307XG4gICAgICB2YXIgbGFzdEFyZyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgIGlmICgodHlwZW9mIGxhc3RBcmcgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkobGFzdEFyZykpID09PSAnb2JqZWN0JyAmJiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkobGFzdEFyZy5fX29wdGlvbk92ZXJyaWRlcykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIHBvcCgpIGZpeGVzIHRoZSBhcmdzLmxlbmd0aFxuICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbk92ZXJyaWRlcywgYXJncy5wb3AoKS5fX29wdGlvbk92ZXJyaWRlcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9jZXNzZWRBcmdzID0gcHJvY2Vzc0FyZ3MoYXJncywgT2JqZWN0LmtleXMoZGVmaW5pdGlvbiksIHR5cGUsIG9wdGlvbnNGb3JtYXR0ZXIpO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHByb2Nlc3NlZEFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciBwYXJhbXMgPSBwcm9jZXNzZWRBcmdzLnBhcmFtcyxcbiAgICAgICAgICByZXR1cm5Qcm9taXNlID0gcHJvY2Vzc2VkQXJncy5yZXR1cm5Qcm9taXNlLFxuICAgICAgICAgIGNhbGxiYWNrID0gcHJvY2Vzc2VkQXJncy5jYWxsYmFjaztcblxuXG4gICAgICB2YXIgb3B0aW9uRGVmYXVsdHMgPSB7IC8vIEZyb20gY29uZmlnIGFuZCBjb25maWdEZWZhdWx0c1xuICAgICAgICBicm9hZGNhc3Q6IGNvbmZpZy5icm9hZGNhc3QsXG4gICAgICAgIHNpZ246IGNvbmZpZy5zaWduXG5cbiAgICAgICAgLy8gaW50ZXJuYWwgb3B0aW9ucyAoZXg6IG11bHRpLWFjdGlvbiB0cmFuc2FjdGlvbilcbiAgICAgIH07b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbkRlZmF1bHRzLCBvcHRpb25zLCBvcHRpb25PdmVycmlkZXMpO1xuICAgICAgaWYgKG9wdGlvbk92ZXJyaWRlcy5ub0NhbGxiYWNrICYmICFyZXR1cm5Qcm9taXNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgZHVyaW5nIGEgdHJhbnNhY3Rpb24gYXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGF1dGhvcml6YXRpb24gPSBbXTtcbiAgICAgIHZhciBwcm92aWRlZEF1dGggPSBvcHRpb25zLmF1dGhvcml6YXRpb24gPyBvcHRpb25zLmF1dGhvcml6YXRpb24gOiBjb25maWcuYXV0aG9yaXphdGlvbjtcbiAgICAgIHZhciBhZGREZWZhdWx0QXV0aHMgPSBwcm92aWRlZEF1dGggPT0gbnVsbDtcblxuICAgICAgLy8gT2Z0ZW4gaWYgdGhlIGZpcnN0IGZpZWxkIGluIGFuIGFjdGlvbiBpcyBhbiBhY2NvdW50IG5hbWUgaXQgaXNcbiAgICAgIC8vIGFsc28gdGhlIHJlcXVpcmVkIGF1dGhvcml6YXRpb24uXG4gICAgICBmdW5jdGlvbiBmaXJzdEFjY291bnQoKSB7XG4gICAgICAgIHZhciBmaWVsZEtleXMgPSBPYmplY3Qua2V5cyhkZWZpbml0aW9uKTtcbiAgICAgICAgdmFyIGYxID0gZmllbGRLZXlzWzBdO1xuXG4gICAgICAgIGlmIChkZWZpbml0aW9uW2YxXSA9PT0gJ2FjY291bnRfbmFtZScpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1zW2YxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvdmlkZWRBdXRoKSB7XG4gICAgICAgIHZhciBhdXRoQXJyYXkgPSB2b2lkIDA7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvdmlkZWRBdXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGF1dGhBcnJheSA9IFtwcm92aWRlZEF1dGhdO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocHJvdmlkZWRBdXRoKSkge1xuICAgICAgICAgIGF1dGhBcnJheSA9IHByb3ZpZGVkQXV0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdXRoQXJyYXkpIHtcbiAgICAgICAgICBhdXRoQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoYXV0aCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICB2YXIgX2F1dGgkc3BsaXQgPSBhdXRoLnNwbGl0KCdAJyksXG4gICAgICAgICAgICAgICAgICBfYXV0aCRzcGxpdDIgPSAoMCwgX3NsaWNlZFRvQXJyYXkzLmRlZmF1bHQpKF9hdXRoJHNwbGl0LCAyKSxcbiAgICAgICAgICAgICAgICAgIGFjdG9yID0gX2F1dGgkc3BsaXQyWzBdLFxuICAgICAgICAgICAgICAgICAgX2F1dGgkc3BsaXQyJCA9IF9hdXRoJHNwbGl0MlsxXSxcbiAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb24gPSBfYXV0aCRzcGxpdDIkID09PSB1bmRlZmluZWQgPyAnYWN0aXZlJyA6IF9hdXRoJHNwbGl0MiQ7XG5cbiAgICAgICAgICAgICAgaWYgKGFjdG9yID09PSAnJykge1xuICAgICAgICAgICAgICAgIGFjdG9yID0gZmlyc3RBY2NvdW50KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbi5wdXNoKHsgYWN0b3I6IGFjdG9yLCBwZXJtaXNzaW9uOiBwZXJtaXNzaW9uIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgYXV0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShhdXRoKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGF1dGhvcml6YXRpb24ucHVzaChhdXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2VydC5lcXVhbChhdXRob3JpemF0aW9uLmxlbmd0aCwgYXV0aEFycmF5Lmxlbmd0aCwgJ2ludmFsaWQgYXV0aG9yaXphdGlvbiBpbjogJyArIEpTT04uc3RyaW5naWZ5KHByb3ZpZGVkQXV0aCkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHIgPSB7XG4gICAgICAgIGFjdGlvbnM6IFt7XG4gICAgICAgICAgYWNjb3VudDogYWNjb3VudCxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIGF1dGhvcml6YXRpb246IGF1dGhvcml6YXRpb24sXG4gICAgICAgICAgZGF0YTogcGFyYW1zXG4gICAgICAgIH1dXG4gICAgICB9O1xuXG4gICAgICBpZiAoYWRkRGVmYXVsdEF1dGhzKSB7XG4gICAgICAgIHZhciBhY3RvciA9IGZpcnN0QWNjb3VudCgpO1xuICAgICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgICAvLyBEZWZhdWx0IGF1dGhvcml6YXRpb24gKHNpbmNlIHVzZXIgZGlkIG5vdCBwcm92aWRlIG9uZSlcbiAgICAgICAgICB0ci5hY3Rpb25zWzBdLmF1dGhvcml6YXRpb24ucHVzaCh7XG4gICAgICAgICAgICBhY3RvcjogYWN0b3IsXG4gICAgICAgICAgICBwZXJtaXNzaW9uOiAnYWN0aXZlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyLmFjdGlvbnNbMF0uYXV0aG9yaXphdGlvbi5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmFjdG9yID4gYi5hY3RvciA/IDEgOiBhLmFjdG9yIDwgYi5hY3RvciA/IC0xIDogMDtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBtdWx0aS1hY3Rpb24gdHJhbnNhY3Rpb24gc3VwcG9ydFxuICAgICAgaWYgKCFvcHRpb25PdmVycmlkZXMubWVzc2FnZU9ubHkpIHtcbiAgICAgICAgdHJhbnNhY3Rpb25BcmcodHIsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHRyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldHVyblByb21pc2U7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgIFRyYW5zYWN0aW9uIE1lc3NhZ2UgQ29sbGVjdG9yXG4gICAgIFdyYXAgbWVyZ2UuZnVuY3Rpb25zIGFkZGluZyBvcHRpb25PdmVycmlkZXMgdGhhdCB3aWxsIHN1c3BlbmRcbiAgICB0cmFuc2FjdGlvbiBicm9hZGNhc3QuXG4gICovXG4gIGZ1bmN0aW9uIHRyTWVzc2FnZUNvbGxlY3Rvcih0ckNhbGxiYWNrKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtZXJnZXMgPSBhcmd1bWVudHNbMl07XG5cbiAgICBhc3NlcnQuZXF1YWwoJ2Z1bmN0aW9uJywgdHlwZW9mIHRyQ2FsbGJhY2sgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodHJDYWxsYmFjayksICd0ckNhbGxiYWNrJyk7XG4gICAgYXNzZXJ0LmVxdWFsKCdvYmplY3QnLCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShvcHRpb25zKSwgJ29wdGlvbnMnKTtcbiAgICBhc3NlcnQuZXF1YWwoJ29iamVjdCcsIHR5cGVvZiBtZXJnZXMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkobWVyZ2VzKSwgJ21lcmdlcycpO1xuICAgIGFzc2VydCghQXJyYXkuaXNBcnJheShtZXJnZXMpLCAnbWVyZ2VzIHNob3VsZCBub3QgYmUgYW4gYXJyYXknKTtcbiAgICBhc3NlcnQuZXF1YWwoJ2Z1bmN0aW9uJywgdHlwZW9mIHRyYW5zYWN0aW9uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHRyYW5zYWN0aW9uKSwgJ3RyYW5zYWN0aW9uJyk7XG5cbiAgICB2YXIgbWVzc2FnZUxpc3QgPSBbXTtcbiAgICB2YXIgbWVzc2FnZUNvbGxlY3RvciA9IHt9O1xuXG4gICAgdmFyIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG9wRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsbCB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYnV0IGZvcmNlLWRpc2FibGUgYSBsb3Qgb2Ygc3R1ZmZcbiAgICAgICAgdmFyIHJldCA9IG9wRnVuY3Rpb24uYXBwbHkodW5kZWZpbmVkLCBhcmdzLmNvbmNhdChbe1xuICAgICAgICAgIF9fb3B0aW9uT3ZlcnJpZGVzOiB7XG4gICAgICAgICAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZU9ubHk6IHRydWUsXG4gICAgICAgICAgICBub0NhbGxiYWNrOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XSkpO1xuICAgICAgICBpZiAocmV0ID09IG51bGwpIHtcbiAgICAgICAgICAvLyBkb3VibGUtY2hlY2sgKGNvZGUgY2FuIGNoYW5nZSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrcyBjYW4gbm90IGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIG11bHRpLWFjdGlvbiB0cmFuc2FjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2VMaXN0LnB1c2gocmV0KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIG1lcmdlcyBjYW4gYmUgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyAoYXMgaW4gdGhlIG1haW4gZW9zIGNvbnRyYWN0KVxuICAgIC8vIG9yIGFuIG9iamVjdCBvZiBjb250cmFjdCBuYW1lcyB3aXRoIGZ1bmN0aW9ucyB1bmRlciB0aG9zZVxuICAgIGZvciAodmFyIGtleSBpbiBtZXJnZXMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG1lcmdlc1trZXldO1xuICAgICAgdmFyIHZhcmlhYmxlTmFtZSA9IGtleS5yZXBsYWNlKC9cXC4vLCAnXycpO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBOYXRpdmUgb3BlcmF0aW9ucyAoZW9zIGNvbnRyYWN0IGZvciBleGFtcGxlKVxuICAgICAgICBtZXNzYWdlQ29sbGVjdG9yW3ZhcmlhYmxlTmFtZV0gPSB3cmFwKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBvdGhlciBjb250cmFjdChzKSAoY3VycmVuY3kgY29udHJhY3QgZm9yIGV4YW1wbGUpXG4gICAgICAgIGlmIChtZXNzYWdlQ29sbGVjdG9yW3ZhcmlhYmxlTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgIG1lc3NhZ2VDb2xsZWN0b3JbdmFyaWFibGVOYW1lXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleTIgaW4gdmFsdWUpIHtcbiAgICAgICAgICBpZiAoa2V5MiA9PT0gJ3RyYW5zYWN0aW9uJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1lc3NhZ2VDb2xsZWN0b3JbdmFyaWFibGVOYW1lXVtrZXkyXSA9IHdyYXAodmFsdWVba2V5Ml0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2VDb2xsZWN0b3IgPSB2b2lkIDA7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGNhbGxlciB3aWxsIGxvYWQgdGhpcyB1cCB3aXRoIGFjdGlvbnNcbiAgICAgIHByb21pc2VDb2xsZWN0b3IgPSB0ckNhbGxiYWNrKG1lc3NhZ2VDb2xsZWN0b3IpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9taXNlQ29sbGVjdG9yID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocHJvbWlzZUNvbGxlY3RvcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwobWVzc2FnZUxpc3QpLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkTWVzc2FnZUxpc3QpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHJlc29sdmVkTWVzc2FnZUxpc3RbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBtID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgX20kYWN0aW9ucyA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkobS5hY3Rpb25zLCAxKSxcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBfbSRhY3Rpb25zWzBdO1xuXG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ck9iamVjdCA9IHt9O1xuICAgICAgICB0ck9iamVjdC5hY3Rpb25zID0gYWN0aW9ucztcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uKHRyT2JqZWN0LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNhY3Rpb24oYXJnLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBkZWZhdWx0RXhwaXJhdGlvbiwgb3B0aW9uRGVmYXVsdCwgcmV0dXJuUHJvbWlzZSwgc3VwZXJDYWxsYmFjaywgcmF3VHgsIF9hcnIsIF9pLCB0eEZpZWxkLCB0eE9iamVjdCwgYnVmLCB0ciwgdHJhbnNhY3Rpb25JZCwgc2lncywgY2hhaW5JZEJ1ZiwgcGFja2VkQ29udGV4dEZyZWVEYXRhLCBzaWduQnVmO1xuXG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hc3luYyhmdW5jdGlvbiB0cmFuc2FjdGlvbiQoX2NvbnRleHQ0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBkZWZhdWx0RXhwaXJhdGlvbiA9IGNvbmZpZy5leHBpcmVJblNlY29uZHMgPyBjb25maWcuZXhwaXJlSW5TZWNvbmRzIDogNjA7XG4gICAgICAgICAgICBvcHRpb25EZWZhdWx0ID0geyBleHBpcmVJblNlY29uZHM6IGRlZmF1bHRFeHBpcmF0aW9uLCBicm9hZGNhc3Q6IHRydWUsIHNpZ246IHRydWUgfTtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30gLypjbG9uZSovLCBvcHRpb25EZWZhdWx0LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgcmV0dXJuUHJvbWlzZSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICByZXR1cm5Qcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghKCh0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFyZykpICE9PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA3O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgdHJhbnNhY3Rpb24gYXJndW1lbnQgc2hvdWxkIGJlIGFuIG9iamVjdCBvciBmdW5jdGlvbicpO1xuXG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnLmFjdGlvbnMpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGluZyBhY3Rpb25zIGFycmF5Jyk7XG5cbiAgICAgICAgICBjYXNlIDk6XG5cbiAgICAgICAgICAgIGlmIChjb25maWcubG9nZ2VyLmxvZyB8fCBjb25maWcubG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIHdyYXAgdGhlIGNhbGxiYWNrIHdpdGggdGhlIGxvZ2dlclxuICAgICAgICAgICAgICBzdXBlckNhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhlcnJvciwgdHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgY29uZmlnLmxvZ2dlci5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgY29uZmlnLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb25maWcubG9nZ2VyLmxvZykge1xuICAgICAgICAgICAgICAgICAgY29uZmlnLmxvZ2dlci5sb2coSlNPTi5zdHJpbmdpZnkodHIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3VwZXJDYWxsYmFjayhlcnJvciwgdHIpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhcmcuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFjdGlvbi5hdXRob3JpemF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGluZyBhY3Rpb24uYXV0aG9yaXphdGlvbiBhcnJheScsIGFjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIShvcHRpb25zLnNpZ24gJiYgdHlwZW9mIGNvbmZpZy5zaWduUHJvdmlkZXIgIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgY29uZmlnLnNpZ25Qcm92aWRlciBmdW5jdGlvbiAoZGlzYWJsZSB1c2luZyB7c2lnbjogZmFsc2V9KScpO1xuXG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIHJhd1R4ID0ge1xuICAgICAgICAgICAgICBtYXhfbmV0X3VzYWdlX3dvcmRzOiAwLFxuICAgICAgICAgICAgICBtYXhfY3B1X3VzYWdlX21zOiAwLFxuICAgICAgICAgICAgICBkZWxheV9zZWM6IDAsXG4gICAgICAgICAgICAgIGNvbnRleHRfZnJlZV9hY3Rpb25zOiBbXSxcbiAgICAgICAgICAgICAgYWN0aW9uczogW10sXG4gICAgICAgICAgICAgIHNpZ25hdHVyZXM6IFtdLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbl9leHRlbnNpb25zOiBbXVxuXG4gICAgICAgICAgICAgIC8vIGdsb2JhbCB0cmFuc2FjdGlvbiBoZWFkZXJzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy50cmFuc2FjdGlvbkhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyNTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShjb25maWcudHJhbnNhY3Rpb25IZWFkZXJzKSA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHJhd1R4LCBjb25maWcudHJhbnNhY3Rpb25IZWFkZXJzKTtcbiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICBpZiAoISh0eXBlb2YgY29uZmlnLnRyYW5zYWN0aW9uSGVhZGVycyA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjI7XG4gICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmF3cmFwKGNvbmZpZy50cmFuc2FjdGlvbkhlYWRlcnMob3B0aW9ucy5leHBpcmVJblNlY29uZHMsIGNoZWNrRXJyb3IoY2FsbGJhY2ssIGNvbmZpZy5sb2dnZXIsIGZ1bmN0aW9uIF9jYWxsZWUyKGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5hc3luYyhmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBoZWFkZXJzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGhlYWRlcnMpLCAnb2JqZWN0JywgJ2V4cGVjdGluZyB0cmFuc2FjdGlvbiBoZWFkZXIgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyYXdUeCwgaGVhZGVycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgbnVsbCwgdGhpcyk7XG4gICAgICAgICAgICB9KSkpO1xuXG4gICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsICdjb25maWcudHJhbnNhY3Rpb25IZWFkZXJzIHNob3VsZCBiZSBhbiBvYmplY3Qgb3IgZnVuY3Rpb24nKTtcblxuICAgICAgICAgIGNhc2UgMjU6XG5cbiAgICAgICAgICAgIC8vIHBlciB0cmFuc2FjdGlvbiBoZWFkZXJzXG4gICAgICAgICAgICBfYXJyID0gWydleHBpcmF0aW9uJywgJ3JlZl9ibG9ja19udW0nLCAncmVmX2Jsb2NrX3ByZWZpeCcsICdkZWxheV9zZWMnLCAnbWF4X25ldF91c2FnZV93b3JkcycsICdtYXhfY3B1X3VzYWdlX21zJ107XG4gICAgICAgICAgICBmb3IgKF9pID0gMDsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICB0eEZpZWxkID0gX2FycltfaV07XG5cbiAgICAgICAgICAgICAgaWYgKGFyZ1t0eEZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZW9zLnRyYW5zYWN0aW9uKCdlb3NpbycsIGVvc2lvID0+IHsgZW9zaW8ubXlhY3Rpb24oLi4pIH0sIHtkZWxheV9zZWM6IDM2OX0pXG4gICAgICAgICAgICAgICAgLy8gZW9zLnRyYW5zYWN0aW9uKHtkZWxheV9zZWM6IDM2OSwgYWN0aW9uczogWy4uLl19KVxuICAgICAgICAgICAgICAgIHJhd1R4W3R4RmllbGRdID0gYXJnW3R4RmllbGRdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnNbdHhGaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGVvcy50cmFuc2FjdGlvbih0ciA9PiB7dHIudHJhbnNmZXIoLi4uKX0sIHtkZWxheV9zZWM6IDM2OX0pXG4gICAgICAgICAgICAgICAgcmF3VHhbdHhGaWVsZF0gPSBvcHRpb25zW3R4RmllbGRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGVvc2pzIGNhbGN1YWx0ZWQgaGVhZGVyc1xuXG4gICAgICAgICAgICBpZiAoISggLy8gbWluaW11bSByZXF1aXJlZCBoZWFkZXJzXG4gICAgICAgICAgICByYXdUeC5leHBpcmF0aW9uID09PSB1bmRlZmluZWQgfHwgcmF3VHgucmVmX2Jsb2NrX251bSA9PT0gdW5kZWZpbmVkIHx8IHJhd1R4LnJlZl9ibG9ja19wcmVmaXggPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFzc2VydChuZXR3b3JrLCAnTmV0d29yayBpcyByZXF1aXJlZCwgcHJvdmlkZSBodHRwRW5kcG9pbnQgb3Igb3duIHRyYW5zYWN0aW9uIGhlYWRlcnMnKTtcbiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzE7XG4gICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LmF3cmFwKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgIG5ldHdvcmsuY3JlYXRlVHJhbnNhY3Rpb24ob3B0aW9ucy5leHBpcmVJblNlY29uZHMsIGNoZWNrRXJyb3IoY2FsbGJhY2ssIGNvbmZpZy5sb2dnZXIsIGZ1bmN0aW9uIF9jYWxsZWUzKGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2FycjIsIF9pMiwgdHhGaWVsZDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2FycjIgPSBbJ2V4cGlyYXRpb24nLCAncmVmX2Jsb2NrX251bScsICdyZWZfYmxvY2tfcHJlZml4J107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2kyID0gMDsgX2kyIDwgX2FycjIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0eEZpZWxkID0gX2FycjJbX2kyXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0eEZpZWxkLCBoZWFkZXJzW3R4RmllbGRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1R4W3R4RmllbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdUeFt0eEZpZWxkXSA9IGhlYWRlcnNbdHhGaWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBudWxsLCB0aGlzKTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSAzMTpcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Jhd1R4JywgcmF3VHgpXG5cbiAgICAgICAgICAgIGFzc2VydC5lcXVhbCgoMCwgX3R5cGVvZjMuZGVmYXVsdCkocmF3VHguZXhwaXJhdGlvbiksICdzdHJpbmcnLCAnZXhwZWN0aW5nIGV4cGlyYXRpb246IGlzbyBkYXRlIHRpbWUgc3RyaW5nJyk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJhd1R4LnJlZl9ibG9ja19udW0pLCAnbnVtYmVyJywgJ2V4cGVjdGluZyByZWZfYmxvY2tfbnVtIG51bWJlcicpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShyYXdUeC5yZWZfYmxvY2tfcHJlZml4KSwgJ251bWJlcicsICdleHBlY3RpbmcgcmVmX2Jsb2NrX3ByZWZpeCBudW1iZXInKTtcblxuICAgICAgICAgICAgcmF3VHguY29udGV4dF9mcmVlX2FjdGlvbnMgPSBhcmcuY29udGV4dF9mcmVlX2FjdGlvbnM7XG4gICAgICAgICAgICByYXdUeC5hY3Rpb25zID0gYXJnLmFjdGlvbnM7XG4gICAgICAgICAgICByYXdUeC50cmFuc2FjdGlvbl9leHRlbnNpb25zID0gYXJnLnRyYW5zYWN0aW9uX2V4dGVuc2lvbnM7XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgc2hvcnRoYW5kXG4gICAgICAgICAgICB0eE9iamVjdCA9IFRyYW5zYWN0aW9uLmZyb21PYmplY3QocmF3VHgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3R4T2JqZWN0JywgdHhPYmplY3QpXG5cbiAgICAgICAgICAgIGJ1ZiA9IEZjYnVmZmVyLnRvQnVmZmVyKFRyYW5zYWN0aW9uLCB0eE9iamVjdCk7XG4gICAgICAgICAgICB0ciA9IFRyYW5zYWN0aW9uLnRvT2JqZWN0KHR4T2JqZWN0KTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSWQgPSBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYnVmKS5kaWdlc3QoKS50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgICAgICBzaWdzID0gW107XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNpZ24pIHtcbiAgICAgICAgICAgICAgY2hhaW5JZEJ1ZiA9IEJ1ZmZlci5mcm9tKGNvbmZpZy5jaGFpbklkLCAnaGV4Jyk7XG4gICAgICAgICAgICAgIHBhY2tlZENvbnRleHRGcmVlRGF0YSA9IEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KDMyKSk7IC8vIFRPRE9cblxuICAgICAgICAgICAgICBzaWduQnVmID0gQnVmZmVyLmNvbmNhdChbY2hhaW5JZEJ1ZiwgYnVmLCBwYWNrZWRDb250ZXh0RnJlZURhdGFdKTtcblxuXG4gICAgICAgICAgICAgIHNpZ3MgPSBjb25maWcuc2lnblByb3ZpZGVyKHsgdHJhbnNhY3Rpb246IHRyLCBidWY6IHNpZ25CdWYsIHNpZ246IHNpZ24sXG4gICAgICAgICAgICAgICAgb3B0aW9uc0tleVByb3ZpZGVyOiBvcHRpb25zLmtleVByb3ZpZGVyIH0pO1xuXG4gICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzaWdzKSkge1xuICAgICAgICAgICAgICAgIHNpZ3MgPSBbc2lnc107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2lncyBjYW4gYmUgc3RyaW5ncyBvciBQcm9taXNlc1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoc2lncykudGhlbihmdW5jdGlvbiAoc2lncykge1xuICAgICAgICAgICAgICBzaWdzID0gW10uY29uY2F0LmFwcGx5KFtdLCBzaWdzKTsgLy8gZmxhdHRlbiBhcnJheXMgaW4gYXJyYXlcblxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2lnID0gc2lnc1tpXTtcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgKGhleCB0byBiYXNlNTggZm9ybWF0IGZvciBleGFtcGxlKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJyAmJiBzaWcubGVuZ3RoID09PSAxMzApIHtcbiAgICAgICAgICAgICAgICAgIHNpZ3NbaV0gPSBlY2MuU2lnbmF0dXJlLmZyb20oc2lnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBwYWNrZWRUciA9IHtcbiAgICAgICAgICAgICAgICBjb21wcmVzc2lvbjogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cixcbiAgICAgICAgICAgICAgICBzaWduYXR1cmVzOiBzaWdzXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgdmFyIG1vY2sgPSBjb25maWcubW9ja1RyYW5zYWN0aW9ucyA/IGNvbmZpZy5tb2NrVHJhbnNhY3Rpb25zKCkgOiBudWxsO1xuICAgICAgICAgICAgICBpZiAobW9jayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KC9wYXNzfGZhaWwvLnRlc3QobW9jayksICdtb2NrVHJhbnNhY3Rpb25zIHNob3VsZCByZXR1cm4gYSBzdHJpbmc6IHBhc3Mgb3IgZmFpbCcpO1xuICAgICAgICAgICAgICAgIGlmIChtb2NrID09PSAncGFzcycpIHtcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25faWQ6IHRyYW5zYWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIG1vY2tUcmFuc2FjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYnJvYWRjYXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHBhY2tlZFRyXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vY2sgPT09ICdmYWlsJykge1xuICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJ1twdXNoX3RyYW5zYWN0aW9uIG1vY2sgZXJyb3JdIFxcJ2Zha2UgZXJyb3JcXCcsIGRpZ2VzdCBcXCcnICsgYnVmLnRvU3RyaW5nKCdoZXgnKSArICdcXCcnO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvZ2dlci5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcubG9nZ2VyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuYnJvYWRjYXN0IHx8ICFuZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge1xuICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25faWQ6IHRyYW5zYWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgICBicm9hZGNhc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHBhY2tlZFRyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV0d29yay5wdXNoVHJhbnNhY3Rpb24ocGFja2VkVHIsIGZ1bmN0aW9uIChlcnJvciwgcHJvY2Vzc2VkVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgYnJvYWRjYXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBwYWNrZWRUcixcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbl9pZDogdHJhbnNhY3Rpb25JZFxuICAgICAgICAgICAgICAgICAgICB9LCBwcm9jZXNzZWRUcmFuc2FjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2dnZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25maWcubG9nZ2VyLmVycm9yKCdbcHVzaF90cmFuc2FjdGlvbiBlcnJvcl0gXFwnJyArIGVycm9yLm1lc3NhZ2UgKyAnXFwnLCB0cmFuc2FjdGlvbiBcXCcnICsgYnVmLnRvU3RyaW5nKCdoZXgnKSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgIGlmIChjb25maWcubG9nZ2VyLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgncmV0dXJuJywgcmV0dXJuUHJvbWlzZSk7XG5cbiAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIG51bGwsIHRoaXMpO1xuICB9XG5cbiAgLy8gcmV0dXJuIFdyaXRlQXBpXG4gIHJldHVybiB7XG4gICAgZ2VuVHJhbnNhY3Rpb246IGdlblRyYW5zYWN0aW9uLFxuICAgIGdlbkNvbnRyYWN0QWN0aW9uczogZ2VuQ29udHJhY3RBY3Rpb25zLFxuICAgIGdlbk1ldGhvZDogZ2VuTWV0aG9kXG4gIH07XG59XG5cbnZhciBpc1N0cmluZ0FycmF5ID0gZnVuY3Rpb24gaXNTdHJpbmdBcnJheShvKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG8pICYmIG8ubGVuZ3RoID4gMCAmJiBvLmZpbmRJbmRleChmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbyAhPT0gJ3N0cmluZyc7XG4gIH0pID09PSAtMTtcbn07XG5cbi8vIE5vcm1hbGl6ZSB0aGUgZXh0cmEgb3B0aW9uYWwgb3B0aW9ucyBhcmd1bWVudFxudmFyIG9wdGlvbnNGb3JtYXR0ZXIgPSBmdW5jdGlvbiBvcHRpb25zRm9ybWF0dGVyKG9wdGlvbikge1xuICBpZiAoKHR5cGVvZiBvcHRpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkob3B0aW9uKSkgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdGlvbjsgLy8ge2RlYnVnLCBicm9hZGNhc3QsIGV0Y30gKGV0YyBteSBvdmVyd3JpdGUgdHIgYmVsb3cpXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdib29sZWFuJykge1xuICAgIC8vIGJyb2FkY2FzdCBhcmd1bWVudCBhcyBhIHRydWUgZmFsc2UgdmFsdWUsIGJhY2stZW5kIGNsaSB3aWxsIHVzZSB0aGlzIHNob3J0aGFuZFxuICAgIHJldHVybiB7IGJyb2FkY2FzdDogb3B0aW9uIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVzYWdlKGFjdGlvbiwgZGVmaW5pdGlvbiwgTmV0d29yaywgYWNjb3VudCwgY29uZmlnKSB7XG4gIHZhciB1c2FnZSA9ICcnO1xuICB2YXIgb3V0ID0gZnVuY3Rpb24gb3V0KCkge1xuICAgIHZhciBzdHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuXG4gICAgdXNhZ2UgKz0gc3RyICsgJ1xcbic7XG4gIH07XG4gIG91dCgnQ09OVFJBQ1QnKTtcbiAgb3V0KGFjY291bnQpO1xuICBvdXQoKTtcblxuICBvdXQoJ0FDVElPTicpO1xuICBvdXQoYWN0aW9uLm5hbWUpO1xuICBvdXQoKTtcblxuICB2YXIgY2FjaGUgPSBjb25maWcuYWJpQ2FjaGUuYWJpKGFjY291bnQpO1xuXG4gIG91dCgnUEFSQU1FVEVSUycpO1xuICBvdXQoSlNPTi5zdHJpbmdpZnkoc2NoZW1hRmllbGRzKGNhY2hlLnNjaGVtYSwgYWN0aW9uLnR5cGUpLCBudWxsLCA0KSk7XG4gIG91dCgpO1xuXG4gIHZhciBzdHJ1Y3QgPSBjYWNoZS5zdHJ1Y3RzW2FjdGlvbi50eXBlXTtcblxuICBvdXQoJ0VYQU1QTEUnKTtcbiAgb3V0KGFjY291bnQgKyAnLicgKyBhY3Rpb24ubmFtZSArICcoJyArIEpTT04uc3RyaW5naWZ5KHN0cnVjdC50b09iamVjdCgpLCBudWxsLCA0KSArICcpJyk7XG5cbiAgcmV0dXJuIHVzYWdlO1xufVxuXG52YXIgY2hlY2tFcnJvciA9IGZ1bmN0aW9uIGNoZWNrRXJyb3IocGFyZW50RXJyLCBsb2dnZXIsIHBhcnJlbnRSZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAobG9nZ2VyLmVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignZXJyb3InLCBlcnJvcik7XG4gICAgICB9XG4gICAgICBwYXJlbnRFcnIoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUocGFycmVudFJlcyhyZXN1bHQpKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcGFyZW50RXJyKGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKiBDb2xsYXBzZSBpbmhlcml0YW5jZSAodmlhIFwiYmFzZVwiKSBwdXR0aW5nIGFsbCB0aGUgZmllbGRzIGluIG9uZSBvYmplY3QuICovXG5mdW5jdGlvbiBzY2hlbWFGaWVsZHMoc2NoZW1hLCB0eXBlKSB7XG4gIHZhciBfc2NoZW1hJHR5cGUgPSBzY2hlbWFbdHlwZV0sXG4gICAgICBiYXNlID0gX3NjaGVtYSR0eXBlLmJhc2UsXG4gICAgICBmaWVsZHMgPSBfc2NoZW1hJHR5cGUuZmllbGRzO1xuXG4gIHZhciBkZWYgPSB7fTtcbiAgaWYgKGJhc2UgJiYgYmFzZSAhPT0gJycpIHtcbiAgICBPYmplY3QuYXNzaWduKGRlZiwgc2NoZW1hRmllbGRzKHNjaGVtYSwgYmFzZSkpO1xuICB9XG4gIE9iamVjdC5hc3NpZ24oZGVmLCBmaWVsZHMpO1xuICByZXR1cm4gZGVmO1xufSIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgaW50ZXJmYWNlIElFb3NOb2RlQ29uZmlnIHtcbiAgICBjaGFpbklkOiBzdHJpbmdcbiAgICBodHRwRW5kcG9pbnQ/OiBzdHJpbmdcbiAgICBrZXlQcm92aWRlcj86IHN0cmluZ1tdXG4gICAgbW9ja1RyYW5zYWN0aW9ucz86ICgpID0+IGFueVxuICAgIGV4cGlyZUluU2Vjb25kcz86IG51bWJlclxuICAgIGJyb2FkY2FzdD86IGJvb2xlYW5cbiAgICBkZWJ1Zz86IGJvb2xlYW5cbiAgICBzaWduPzogYm9vbGVhblxuICAgIGtleVByZWZpeD86IHN0cmluZ1xuICAgIHRyYW5zYWN0aW9uSGVhZGVycz86IChleHBpcmVJblNlY29uZHM6IG51bWJlciwgY2FsbGJhY2s6IChlcnJvcjphbnksIGhlYWRlcnM6YW55KSA9PiBhbnkpID0+IGFueVxuICAgIGxvZ2dlcj86IHtcbiAgICAgICAgbG9nPzogKC4uLmFyZ3M6YW55W10pID0+IGFueVxuICAgICAgICBlcnJvcj86ICguLi5hcmdzOmFueVtdKSA9PiBhbnlcbiAgICB9LFxuICAgIGF1dGhvcml6YXRpb24/OiBzdHJpbmdcbiAgICBibG9ja2NoYWluPzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVvc05vZGVDb25maWdUYWJsZSB7XG4gICAgW25hbWU6IHN0cmluZ106IElFb3NOb2RlQ29uZmlnXG59XG5cbmV4cG9ydCBjb25zdCBlb3NOb2RlQ29uZmlncyA6IElFb3NOb2RlQ29uZmlnVGFibGUgPSB7XG4gICAgc2NhdHRlcjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL25vZGVzLmdldC1zY2F0dGVyLmNvbTo0NDMnXG4gICAgfSxcbiAgICBhY3JvZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpMi5hY3JvZW9zLm9uZSdcbiAgICB9LFxuICAgIGFsb2hhZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLm1haW4uYWxvaGFlb3MuY29tJ1xuICAgIH0sXG4gICAgYXR0aWNsYWI6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9lb3NicC5hdHRpY2xhYi5uZXQnXG4gICAgfSxcbiAgICBnZW5lcmVvczoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL21haW5uZXQuZ2VuZXJlb3MuaW8nXG4gICAgfSxcbiAgICBibG9ja21hdHJpeDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Vvc2FwaS5ibG9ja21hdHJpeC5uZXR3b3JrJ1xuICAgIH0sXG4gICAgY2hhaW5yaWZ0OiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zcHVibGljLmNoYWlucmlmdC5jb20nXG4gICAgfSxcbiAgICBlb3Npbzoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3Npby5jcidcbiAgICB9LFxuICAgIGNyeXB0b2xpb25zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYnAuY3J5cHRvbGlvbnMuaW8nXG4gICAgfSxcbiAgICBjeXBoZXJnbGFzczoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5jeXBoZXJnbGFzcy5jb20nXG4gICAgfSxcbiAgICBlb3M0Mjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL25vZGVzLmVvczQyLmlvJ1xuICAgIH0sXG4gICAgZW9zYW1zdGVyZGFtOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5lb3NhbXN0ZXJkYW0ubmV0J1xuICAgIH0sXG4gICAgZW9zYXNpYToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaTEuZW9zYXNpYS5vbmUnXG4gICAgfSxcbiAgICBlb3NhdXRob3JpdHk6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9wdWJsaWNhcGktbWFpbm5ldC5lb3NhdXRob3JpdHkuY29tJ1xuICAgIH0sXG4gICAgZW9zYmVhbjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NiZWFuLmNvbSdcbiAgICB9LFxuICAgIGVvc2JlaWppbmc6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zYmVpamluZy5vbmUnXG4gICAgfSxcbiAgICBlb3NiaXhpbjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL21hcnMuZm4uZW9zYml4aW4uY29tJ1xuICAgIH0sXG4gICAgZW9zY2FmZWJsb2NrOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zLmVvc2NhZmVibG9jay5jb20nXG4gICAgfSxcbiAgICBlb3NjYW5hZGE6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9tYWlubmV0LmVvc2NhbmFkYS5jb20nXG4gICAgfSxcbiAgICBlb3NjYW5ub246IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9tYWlubmV0LmVvc2Nhbm5vbi5pbydcbiAgICB9LFxuICAgIGVvc2NsZWFuZXI6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zY2xlYW5lci5jb20nXG4gICAgfSxcbiAgICBlb3NkYWM6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9ldS5lb3NkYWMuaW8nXG4gICAgfSxcbiAgICBlb3NkdWJsaW46IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zZHVibGluLmlvJ1xuICAgIH0sXG4gICAgZW9zZW91bDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3Nlb3VsLmlvJ1xuICAgIH0sXG4gICAgZW9zZmVuZ3dvOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc2Zlbmd3by5jb20nXG4gICAgfSxcbiAgICBlb3NmbGFyZToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL25vZGUuZW9zZmxhcmUuaW8nXG4gICAgfSxcbiAgICBnZW5lc2lzX21pbmluZzoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Vvcy5nZW5lc2lzLW1pbmluZy5jb20nXG4gICAgfSxcbiAgICBlb3NkZXRyb2l0OiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc2RldHJvaXQuaW8nXG4gICAgfSxcbiAgICBtZWV0OiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5tZWV0Lm9uZSdcbiAgICB9LFxuICAgIGVvc2dyYXZpdHk6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGktbWFpbm5ldC5lb3NncmF2aXR5LmNvbSdcbiAgICB9LFxuICAgIGVvc2xhb21hbzoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NsYW9tYW8uY29tJ1xuICAgIH0sXG4gICAgZW9zbWV0YWw6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkzLmVvc21ldGFsLmlvJ1xuICAgIH0sXG4gICAgbWluZXJnYXRlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvcy5taW5lcmdhdGUuY29tJ1xuICAgIH0sXG4gICAgbWluZXJnYXRlX2JwOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYnAuZW9zLm1pbmVyZ2F0ZS5jb20nXG4gICAgfSxcbiAgICBlb3NuOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc24uaW8nXG4gICAgfSxcbiAgICBlb3NuZXd5b3JrOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc25ld3lvcmsuaW8nXG4gICAgfSxcbiAgICBlb3Nub2Rlb25lOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLm1haW4tbmV0LmVvc25vZGVvbmUuaW8nXG4gICAgfSxcbiAgICBlb3NwYWNleDoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS1tYWlubmV0LmVvc3BhY2V4LmNvbSdcbiAgICB9LFxuICAgIG5vZGVwYWNpZmljOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zYXBpLm5vZGVwYWNpZmljLmNvbSdcbiAgICB9LFxuICAgIGVvc3Jpbzoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5lb3NyaW8uaW8nXG4gICAgfSxcbiAgICBlb3Nzd2VkZW46IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zc3dlZGVuLnNlJ1xuICAgIH0sXG4gICAgZW9zdGl0YW46IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zdGl0YW4uY29tJ1xuICAgIH0sXG4gICAgZW9zdHJpYmU6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZW9zdHJpYmUuaW8nXG4gICAgfSxcbiAgICBlb3N2b2xnYToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2JwLmVvc3ZvbGdhLm9uZSdcbiAgICB9LFxuICAgIGVvc3dlYjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaW5vZGUuZW9zd2ViLm5ldCdcbiAgICB9LFxuICAgIGVvc3lzOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vcnBjLmVvc3lzLmlvJ1xuICAgIH0sXG4gICAgZnJhbmNlb3M6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuZnJhbmNlb3MuZnInXG4gICAgfSxcbiAgICBlb3NibG9ja2J1c3Rlcjoge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2Z1bGwuZW9zYmxvY2tidXN0ZXIuY29tJ1xuICAgIH0sXG4gICAgamVkYToge1xuICAgICAgICBibG9ja2NoYWluOiAnZW9zJyxcbiAgICAgICAgY2hhaW5JZDogJ2FjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYnLFxuICAgICAgICBodHRwRW5kcG9pbnQ6ICdodHRwczovL2FwaS5qZWRhLm9uZSdcbiAgICB9LFxuICAgIG9yYWNsZWNoYWluOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLm9yYWNsZWNoYWluLmlvJ1xuICAgIH0sXG4gICAgc2hlb3M6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuc2hlb3Mub3JnJ1xuICAgIH0sXG4gICAgZW9zZ2VuZXZhOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vYXBpLmVvc2dlbmV2YS5pbydcbiAgICB9LFxuICAgIGdyZXltYXNzOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vZW9zLmdyZXltYXNzLmNvbSdcbiAgICB9LFxuICAgIHpiZW9zOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbm9kZTEuemJlb3MuY29tJ1xuICAgIH0sXG4gICAgemVyb3hlb3M6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdhY2EzNzZmMjA2YjhmYzI1YTZlZDQ0ZGJkYzY2NTQ3YzM2YzZjMzNlM2ExMTlmZmJlYWVmOTQzNjQyZjBlOTA2JyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cHM6Ly9ub2RlMS56ZXJveGVvcy5jb20nXG4gICAgfSxcbiAgICBlb3Nub2RlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vcHJveHkuZW9zbm9kZS50b29scydcbiAgICB9LFxuICAgIGRmdXNlOiB7XG4gICAgICAgIGJsb2NrY2hhaW46ICdlb3MnLFxuICAgICAgICBjaGFpbklkOiAnYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNicsXG4gICAgICAgIGh0dHBFbmRwb2ludDogJ2h0dHBzOi8vbWFpbm5ldC5lb3MuZGZ1c2UuaW8nXG4gICAgfSxcbiAgICBkZXY6IHtcbiAgICAgICAgYmxvY2tjaGFpbjogJ2VvcycsXG4gICAgICAgIGNoYWluSWQ6ICdjZjA1N2JiZmI3MjY0MDQ3MWZkOTEwYmNiNjc2MzljMjJkZjlmOTI0NzA5MzZjZGRjMWFkZTBlMmYyZTdkYzRmJyxcbiAgICAgICAgaHR0cEVuZHBvaW50OiAnaHR0cDovL2Rldi50b25lb3MucHJvOjc3NzcnXG4gICAgfVxufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG5cdCcjMDAwMENDJyxcblx0JyMwMDAwRkYnLFxuXHQnIzAwMzNDQycsXG5cdCcjMDAzM0ZGJyxcblx0JyMwMDY2Q0MnLFxuXHQnIzAwNjZGRicsXG5cdCcjMDA5OUNDJyxcblx0JyMwMDk5RkYnLFxuXHQnIzAwQ0MwMCcsXG5cdCcjMDBDQzMzJyxcblx0JyMwMENDNjYnLFxuXHQnIzAwQ0M5OScsXG5cdCcjMDBDQ0NDJyxcblx0JyMwMENDRkYnLFxuXHQnIzMzMDBDQycsXG5cdCcjMzMwMEZGJyxcblx0JyMzMzMzQ0MnLFxuXHQnIzMzMzNGRicsXG5cdCcjMzM2NkNDJyxcblx0JyMzMzY2RkYnLFxuXHQnIzMzOTlDQycsXG5cdCcjMzM5OUZGJyxcblx0JyMzM0NDMDAnLFxuXHQnIzMzQ0MzMycsXG5cdCcjMzNDQzY2Jyxcblx0JyMzM0NDOTknLFxuXHQnIzMzQ0NDQycsXG5cdCcjMzNDQ0ZGJyxcblx0JyM2NjAwQ0MnLFxuXHQnIzY2MDBGRicsXG5cdCcjNjYzM0NDJyxcblx0JyM2NjMzRkYnLFxuXHQnIzY2Q0MwMCcsXG5cdCcjNjZDQzMzJyxcblx0JyM5OTAwQ0MnLFxuXHQnIzk5MDBGRicsXG5cdCcjOTkzM0NDJyxcblx0JyM5OTMzRkYnLFxuXHQnIzk5Q0MwMCcsXG5cdCcjOTlDQzMzJyxcblx0JyNDQzAwMDAnLFxuXHQnI0NDMDAzMycsXG5cdCcjQ0MwMDY2Jyxcblx0JyNDQzAwOTknLFxuXHQnI0NDMDBDQycsXG5cdCcjQ0MwMEZGJyxcblx0JyNDQzMzMDAnLFxuXHQnI0NDMzMzMycsXG5cdCcjQ0MzMzY2Jyxcblx0JyNDQzMzOTknLFxuXHQnI0NDMzNDQycsXG5cdCcjQ0MzM0ZGJyxcblx0JyNDQzY2MDAnLFxuXHQnI0NDNjYzMycsXG5cdCcjQ0M5OTAwJyxcblx0JyNDQzk5MzMnLFxuXHQnI0NDQ0MwMCcsXG5cdCcjQ0NDQzMzJyxcblx0JyNGRjAwMDAnLFxuXHQnI0ZGMDAzMycsXG5cdCcjRkYwMDY2Jyxcblx0JyNGRjAwOTknLFxuXHQnI0ZGMDBDQycsXG5cdCcjRkYwMEZGJyxcblx0JyNGRjMzMDAnLFxuXHQnI0ZGMzMzMycsXG5cdCcjRkYzMzY2Jyxcblx0JyNGRjMzOTknLFxuXHQnI0ZGMzNDQycsXG5cdCcjRkYzM0ZGJyxcblx0JyNGRjY2MDAnLFxuXHQnI0ZGNjYzMycsXG5cdCcjRkY5OTAwJyxcblx0JyNGRjk5MzMnLFxuXHQnI0ZGQ0MwMCcsXG5cdCcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHQvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG5cdC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG5cdC8vIGV4cGxpY2l0bHlcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gSXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcblx0Ly8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblx0cmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG5cdFx0Ly8gSXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuXHRcdCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG5cdFx0Ly8gSXMgZmlyZWZveCA+PSB2MzE/XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcblx0Ly8gVGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcblx0Ly8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcblx0cmV0dXJuIHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJlxuXHRcdGNvbnNvbGUubG9nICYmXG5cdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxuXG5cdC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0ciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG5cblx0cmV0dXJuIHI7XG59XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHR0cnkge1xuXHRcdC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcblx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcblxuY29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuXHR9XG59O1xuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRyZXR1cm4gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG5cdFx0XHRpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC0/XFxkP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiJ3VzaW5nIHN0cmljdCdcblxuLyoqXG4gKiBTdG9yYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERCIHtcbiAgICAvKipcbiAgICAgKiB0aGUgc3RvcmFnZSBsaWIgaW50ZXJhY3Qgd2l0aCBsb2NhbFN0b3JhZ2Ugbm93XG4gICAgICogQHBhcmFtIGRlZmF1bHRDb25maWdzIC0gZGVmaW5lIHdoYXQgd2lsbCB5b3UgZ2V0IHdoZW4geW91IHJlcXVpcmUgYW4ga2V5IG5vdCBleGlzdFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChwdWJsaWMgZGVmYXVsdENvbmZpZ3MgOiBhbnkpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdmFsIGJ5IGtleVxuICAgICAqIEBwYXJhbSBrZXkgLSB3aWxsIGJlIGFzc2VtYmxlZCB0byBlb3NwbGF5ZXI6OiR7a2V5fVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgZ2V0IChrZXkgOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHBLZXkgPSBgZW9zcGxheWVyOjoke2tleX1gXG4gICAgICAgIGxldCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocEtleSlcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLmRlZmF1bHRDb25maWdzKSB7XG4gICAgICAgICAgICBsZXQgdmFsID0gdGhpcy5kZWZhdWx0Q29uZmlnc1trZXldXG4gICAgICAgICAgICB0aGlzLnNldChrZXksIHZhbClcbiAgICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0IHZhbHVlXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSB2YWxcbiAgICAgKi9cbiAgICBzZXQgKGtleSA6IHN0cmluZywgdmFsOiBhbnkpIHtcbiAgICAgICAgbGV0IHBLZXkgPSBgZW9zcGxheWVyOjoke2tleX1gXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBLZXksIHZhbClcbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBFdmVudCBIYW5kbGVyXG4gKiBAZGVzY1xuICogLSBvbmx5IGVuYWJsZWQgZXZlbnQgY2FuIGJlIGVtaXR0ZWRcbiAqIC0gSWYgdGhlIGNhbGxiYWNrIG9mIGFuIGV2ZW50IGlzIG5vdCBzZXQsIGFsZXJ0IHdpbGwgYmUgY2FsbGVkIGJ5IGRlZmF1bHQgb24gdGhlIGJyb3dzZXIsIGFuZCBFcnJvciB3aWxsIGJlIHRyaWdnZXJlZCBpbiBub2RlanNcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRIYW5kbGVyIHtcblxuICAgIHByb3RlY3RlZCBfZGVmYXVsdENiITogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIF9ldmVudE1hcDogYW55ID0ge307XG4gICAgcHJvdGVjdGVkIF9zdXBwb3J0ZWRFdmVudHM6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihzdXBwb3J0ZWRFdmVudHM/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdENiID0gZnVuY3Rpb24gKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgICAgICBhcmdzLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyB2XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHYpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ldmVudE1hcCA9IHt9XG5cbiAgICAgICAgaWYgKHN1cHBvcnRlZEV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVFdmVudHMoc3VwcG9ydGVkRXZlbnRzKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRNYXAgPSBBcnJheS5pc0FycmF5KHN1cHBvcnRlZEV2ZW50cykgPyB7fSA6IHN1cHBvcnRlZEV2ZW50c1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZW5hYmxlIGV2ZW50IG5hbWVzXG4gICAgICogQHBhcmFtIHtBcnJheSB8IE9iamVjdH0gc3VwcG9ydGVkRXZlbnRzIC0ga2V5cyB3aWxsIGJlIHVzZWQgd2hlbiBpdCdzIGFuIG9iamVjdFxuICAgICAqL1xuICAgIHB1YmxpYyBlbmFibGVFdmVudHMoc3VwcG9ydGVkRXZlbnRzOiBhbnkpIHtcbiAgICAgICAgbGV0IG5ld0V2ZW50S2V5cyA9IEFycmF5LmlzQXJyYXkoc3VwcG9ydGVkRXZlbnRzKSA/IHN1cHBvcnRlZEV2ZW50cyA6IE9iamVjdC5rZXlzKHN1cHBvcnRlZEV2ZW50cylcbiAgICAgICAgdGhpcy5fc3VwcG9ydGVkRXZlbnRzID0gKHRoaXMuX3N1cHBvcnRlZEV2ZW50cyB8fCBbXSkuY29uY2F0KG5ld0V2ZW50S2V5cylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgY2FsbGJhY2sgb2YgYW4gZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbkNhbGxiYWNrIC0gaWYgdGhlcmUgaXMgYWxyZWFkeSBhIGNhbGxiYWNrLCB0aGVuIHRoZSBuZXcgb25lIHdpbGwgY292ZXIgdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgKiBAcGFyYW0ge2FueX0gaW5zdGFuY2UgLSB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm4ge0V2ZW50SGFuZGxlcn0gLSBmb3IgcGlwZWxpbmVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RXZlbnQoZXZlbnQ6IHN0cmluZywgZm5DYWxsYmFjazogRnVuY3Rpb24sIGluc3RhbmNlOiBhbnkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdXBwb3J0ZWRFdmVudHMuZmluZCgobmFtZTogc3RyaW5nKSA9PiBuYW1lID09PSBldmVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXZlbnQgaGFuZGxlciA6IGV2ZW50ICR7ZXZlbnR9IGFyZSBub3Qgc3VwcG9ydGVkLmApXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXZlbnRNYXBbZXZlbnRdID0ge2NiOiBmbkNhbGxiYWNrLCBjdHg6IGluc3RhbmNlfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyaWdnZXIgYW4gZXZlbnQgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gYXJndW1lbnRzXG4gICAgICovXG4gICAgcHVibGljIGVtaXRFdmVudChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICBpZiAoIXRoaXMuX3N1cHBvcnRlZEV2ZW50cy5maW5kKChuYW1lOiBzdHJpbmcpID0+IG5hbWUgPT09IGV2ZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBldmVudCBoYW5kbGVyIDogZXZlbnQgJHtldmVudH0gYXJlIG5vdCBmb3VuZC5gKVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGUgPSB0aGlzLl9ldmVudE1hcFtldmVudF1cbiAgICAgICAgcmV0dXJuIGUgPyBlLmNiLmNhbGwoZS5jdHgsIC4uLmFyZ3MpIDogdGhpcy5fZGVmYXVsdENiLmNhbGwoZXZlbnQsIC4uLmFyZ3MpXG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7Zm9yTXMsIFRpbWVvdXRQcm9taXNlfSBmcm9tICcuLi91dGlscy93YWl0J1xuaW1wb3J0IHtCaWdOdW1iZXJ9IGZyb20gJ2JpZ251bWJlci5qcydcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmltcG9ydCB7Y3JlYXRlTG9nZ2VyfSBmcm9tICcuLi91dGlscy9sb2cnXG5cbmltcG9ydCB7IEVvcywgRWNjIH0gZnJvbSAnLi4vdHlwZXMvbGlicydcblxuaW1wb3J0IHtJQWNjb3VudEluZm8sIElBdXRob3JpemF0aW9uLCBJRW9zQ2xpZW50LCBJSWRlbnRpdHl9IGZyb20gXCIuLi90eXBlcy9lb3NcIjtcblxuY29uc3QgbG9nID0gY3JlYXRlTG9nZ2VyKCdjaGFpbicpXG4vKipcbiAqIGNoYWluIGhlbHBlciwgc3VwcG9ydGVkIGNoYWluIG9wZXJhdGlvbnNcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhaW5IZWxwZXIge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IF9lb3M6IElFb3NDbGllbnQpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgaW5mbyBvZiB0aGUgY2hhaW4gY29ubmVjdGVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRJbmZvKCkge1xuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2Vvcy5nZXRJbmZvKHt9KSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgc3BlY2lmaWMgYmxvY2sgb2YgdGhlIGNoYWluXG4gICAgICogQHBhcmFtIGJsb2NrTnVtT3JJZFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmxvY2soYmxvY2tOdW1PcklkOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICdibG9ja19udW1fb3JfaWQnOiBibG9ja051bU9ySWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2Vvcy5nZXRCbG9jayhwYXJhbXMpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBjb250cmFjdFxuICAgICAqIEBwYXJhbSBjb2RlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRDb250cmFjdChjb2RlOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2Vvcy5jb250cmFjdChjb2RlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgYWJpIG9mIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIGNvZGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPCo+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldEFiaShjb2RlOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2Vvcy5nZXRBYmkoY29kZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIGRlZmluaXRpb24gb2YgYSB0YWJsZSBpbiBzcGVjaWZpYyBjb250cmFjdCBhYmlcbiAgICAgKiBAcGFyYW0gY29kZVxuICAgICAqIEBwYXJhbSB0YWJsZU5hbWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPFQgfCB1bmRlZmluZWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldFRhYmxlQWJpKGNvZGU6IHN0cmluZywgdGFibGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGFiaSA9IGF3YWl0IHRoaXMuZ2V0QWJpKGNvZGUpXG4gICAgICAgIHJldHVybiBhYmkuYWJpLnRhYmxlcy5maW5kKChkZXNjOiBhbnkpID0+IGRlc2MubmFtZSA9PT0gdGFibGVOYW1lKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFiaUpzb25Ub0JpblxuICAgICAqIEBwYXJhbSBjb2RlXG4gICAgICogQHBhcmFtIGFjdGlvblxuICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fVxuICAgICAqL1xuICAgIGFzeW5jIGFiaUpzb25Ub0Jpbihjb2RlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nLCBhcmdzOiBhbnlbXSkge1xuICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgJ2NvZGUnOiBjb2RlLFxuICAgICAgICAgICAgJ2FjdGlvbic6IGFjdGlvbixcbiAgICAgICAgICAgICdhcmdzJzogYXJnc1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5fZW9zLmFiaUpzb25Ub0JpbihwYXJhbXMpKS5iaW5hcmdzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGFjY291bnQgaW5mbyBvZiBhbnkgdXNlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYWNjb3VudF9uYW1lIC0gc3RyaW5nIG5hbWUgb3IgaWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHtBY2NvdW50SW5mb30+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldEFjY291bnRJbmZvKGFjY291bnRfbmFtZTogc3RyaW5nKSA6IFByb21pc2U8SUFjY291bnRJbmZvPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWNjb3VudCh7YWNjb3VudF9uYW1lfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgZmlyc3QgcHVibGljIGtleSBvZiBhbiBhY2NvdW50XG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBhdXRob3JpdHkgLSBkZWZhdWx0IGlzICdhY3RpdmUnXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBhc3luYyBnZXRQdWJLZXkoYWNjb3VudF9uYW1lOiBzdHJpbmcsIGF1dGhvcml0eTogc3RyaW5nID0gJ2FjdGl2ZScpIHtcbiAgICAgICAgY29uc3QgcHVia2V5cyA9IChhd2FpdCB0aGlzLmdldFB1YktleXMoYWNjb3VudF9uYW1lLCBhdXRob3JpdHkpKVxuICAgICAgICBpZiAoIXB1YmtleXMgfHwgcHVia2V5cy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgbG9nLndhcm5pbmcoYGNhbm5vdCBmaW5kIHB1YmxpYyBrZXkgZm9yICR7YWNjb3VudF9uYW1lfUAke2F1dGhvcml0eX1gKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0UHViS2V5cyhhY2NvdW50X25hbWUsIGF1dGhvcml0eSkpWzBdLmtleVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBwdWJsaWMga2V5cyBvZiBhbiBhY2NvdW50XG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBhdXRob3JpdHkgLSBkZWZhdWx0IGlzICdhY3RpdmUnXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBhc3luYyBnZXRQdWJLZXlzKGFjY291bnRfbmFtZTogc3RyaW5nLCBhdXRob3JpdHk6IHN0cmluZyA9ICdhY3RpdmUnKSB7XG4gICAgICAgIGxldCBhY2NvdW50SW5mbyA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKVxuICAgICAgICBsZXQgcGVybWlzc2lvbiA9IGFjY291bnRJbmZvLnBlcm1pc3Npb25zLmZpbmQoKHY6IGFueSkgPT4gdi5wZXJtX25hbWUgPT0gYXV0aG9yaXR5KVxuICAgICAgICBpZiAoIXBlcm1pc3Npb24pIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGZpbmQgdGhlIHBlcm1pc3Npb24gb2YgJHthY2NvdW50X25hbWV9YClcbiAgICAgICAgcmV0dXJuIHBlcm1pc3Npb24ucmVxdWlyZWRfYXV0aC5rZXlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVjb3ZlciBwdWJsaWMga2V5IGZyb20gc2lnbmF0dXJlXG4gICAgICogQHBhcmFtIHNpZ25hdHVyZSAtIHNpZ25lZCBkYXRhXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVjb3ZlclNpZ24oc2lnbmF0dXJlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBFY2MucmVjb3ZlcihzaWduYXR1cmUsIG1lc3NhZ2UpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdmFsaWRhdGUgaWYgc2lnbmVkIGRhdGEgaXMgc2lnbmVkIGJ5IGEgYWNjb3VudFxuICAgICAqIEBwYXJhbSBzaWduYXR1cmUgLSBzaWduZWQgZGF0YVxuICAgICAqIEBwYXJhbSBtZXNzYWdlXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBhdXRob3JpdHkgLSBkZWZhdWx0IGlzICdhY3RpdmUnXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxmdW5jdGlvbj59IGFjY291bnRzUGVybWlzc2lvblBsdWdpbnMgLSBwbHVnaW4gc2hvdWxkIGJlIG9iamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFsaWRhdGVTaWduKFNJRywgTVNHLCBBQ0MsICdhY3RpdmUnLCB7IFsncHJldG9uYXJ0czExQGVvc2lvLmNvZGUnXSA6IGFzeW5jIChhY2NvdW50LCByZWNvdmVyS2V5KSA9PiB2YWxpZGF0ZSBycGMgLi4uIH1cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfSAtIHJlY292ZXIgcHVibGljIGtleSwgYW5kIGl0J3MgZmFpbGVkIHdoZW4gJ3VuZGVmaW5lZCcgcmV0dXJuLlxuICAgICAqL1xuICAgIGFzeW5jIHZhbGlkYXRlU2lnbihcbiAgICAgICAgc2lnbmF0dXJlOiBzdHJpbmcsXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgYWNjb3VudF9uYW1lOiBzdHJpbmcsXG4gICAgICAgIGF1dGhvcml0eTogc3RyaW5nID0gJ2FjdGl2ZScsXG4gICAgICAgIGFjY291bnRzUGVybWlzc2lvblBsdWdpbnM6IGFueSk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGNvbnN0IHJlY292ZXJLZXkgPSB0aGlzLnJlY292ZXJTaWduKHNpZ25hdHVyZSwgbWVzc2FnZSlcbiAgICAgICAgY29uc3Qge3Blcm1pc3Npb25zfSA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKVxuICAgICAgICBpZiAoIXBlcm1pc3Npb25zKSB7XG4gICAgICAgICAgICBsb2cud2FybmluZyhgcGVybWlzc2lvbnMgb2YgYWNjb3VudF9uYW1lICR7YWNjb3VudF9uYW1lfSBhcmUgbm90IGZvdW5kLmApXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwZXJtID0gcGVybWlzc2lvbnMuZmluZCgocDogYW55KSA9PiBwLnBlcm1fbmFtZSA9PT0gYXV0aG9yaXR5KVxuICAgICAgICBpZiAoIXBlcm1pc3Npb25zKSB7XG4gICAgICAgICAgICBsb2cud2FybmluZyhgcGVybWlzc2lvbiAke2F1dGhvcml0eX0gYWNjb3VudF9uYW1lICR7YWNjb3VudF9uYW1lfSBhcmUgbm90IGZvdW5kLmApXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHthY2NvdW50cywga2V5c30gPSBwZXJtLnJlcXVpcmVkX2F1dGhcbiAgICAgICAgbGV0IGtleU9iaiA9IGtleXMuZmluZCgodjogYW55KSA9PiB2LmtleSA9PT0gcmVjb3ZlcktleSlcbiAgICAgICAgaWYgKGtleU9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGtleU9iai5rZXlcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFjY291bnRzUGVybWlzc2lvblBsdWdpbnMpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjY291bnRzU3RycyA9IGFjY291bnRzLm1hcCgoYWNjOiBhbnkpID0+IGAke2FjYy5wZXJtaXNzaW9uLmFjdG9yfUAke2FjYy5wZXJtaXNzaW9uLnBlcm1pc3Npb259YClcbiAgICAgICAgbG9nLnZlcmJvc2UoJ3RyeSBtYXRjaCcsIGFjY291bnRzLCBhY2NvdW50c1N0cnMsIGFjY291bnRzUGVybWlzc2lvblBsdWdpbnMpXG4gICAgICAgIGZvciAobGV0IGkgaW4gYWNjb3VudHNTdHJzKSB7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSBhY2NvdW50c1Blcm1pc3Npb25QbHVnaW5zW2FjY291bnRzU3Ryc1tpXV1cbiAgICAgICAgICAgIGlmICghcGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhd2FpdCBQcm9taXNlLnJlc29sdmUocGx1Z2luKGFjY291bnRfbmFtZSwgcmVjb3ZlcktleSwgdGhpcykpKSByZXR1cm4gcmVjb3ZlcktleVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGEgYWNjb3VudCdzIGFjdGlvbiBjb3VudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYWNjb3VudF9uYW1lIC0gc3RyaW5nIG5hbWUgb3IgaWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPG51bWJlcj59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWN0aW9uQ291bnQoYWNjb3VudF9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QWN0aW9uTWF4U2VxKGFjY291bnRfbmFtZSkgKyAxXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGEgYWNjb3VudCdzIG1heCBzZXFcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGFjY291bnRfbmFtZSAtIHN0cmluZyBuYW1lIG9yIGlkXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSAtIHJldHVybiAtMSBpZiB0aGVyZSBpcyBubyBhY3Rpb25cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY3Rpb25NYXhTZXEoYWNjb3VudF9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHJlY2VudEFjdGlvbnMgPSBhd2FpdCB0aGlzLmdldFJlY2VudEFjdGlvbnMoYWNjb3VudF9uYW1lKVxuICAgICAgICBpZiAoIXJlY2VudEFjdGlvbnMgfHwgIXJlY2VudEFjdGlvbnMuYWN0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBnZXRBY3Rpb25Db3VudCBmYWlsZWQ6IGNhbm5vdCBmaW5kIHJlY2VudCBhY3Rpb25zIG9mICR7YWNjb3VudF9uYW1lfSlgKVxuICAgICAgICB9XG4gICAgICAgIGxldCBhY3RzID0gcmVjZW50QWN0aW9ucy5hY3Rpb25zXG4gICAgICAgIHJldHVybiBhY3RzLmxlbmd0aCA9PT0gMCA/IC0xIDogYWN0c1thY3RzLmxlbmd0aCAtIDFdLmFjY291bnRfYWN0aW9uX3NlcVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCByZWNlbnQgYWN0aW9uc1xuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRSZWNlbnRBY3Rpb25zKGFjY291bnRfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lb3MuZ2V0QWN0aW9ucyh7YWNjb3VudF9uYW1lfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWN0aW9ucyBvZiBhbiBhY2NvdW50XG4gICAgICogQGRlc2MgdG8gYXZvaWQgc2VhcmNoaW5nIGluIGh1Z2UgYW1vdW50IGFjdGlvbnMsIHRoZSBhcHBsaWNhdGlvbiBsYXllciBzaG91bGQgY2hlY2sgdGhlIGdldEFjdGlvbkNvdW50IGJlZm9yZSBjYWxsaW5nIHRoaSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGFjY291bnRfbmFtZSAtIHN0cmluZyBuYW1lIG9yIGlkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0UG9zIC0gc3RhcnQgZnJvbSAwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIHdoZW4gb2Zmc2V0IGlzIDAsIG9uZSBvYmplY3QgcmV0dXJuZWQsIG9mZnNldCA9PShzaG91bGQgYmUpIGNvdW50IC0gMVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fSAtIFtzdGFydFBvcywgLi4uLCBzdGFydFBvcyArIG9mZnNldF1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY3Rpb25zKGFjY291bnRfbmFtZTogc3RyaW5nLCBzdGFydFBvcyA9IDAsIG9mZnNldCA9IDApIHtcbiAgICAgICAgbGV0IHBvcyA9IHN0YXJ0UG9zXG4gICAgICAgIGxldCBlbmRQb3MgPSBzdGFydFBvcyArIG9mZnNldFxuICAgICAgICBsZXQgYWN0aW9ucyA9IFtdXG4gICAgICAgIGxvZy52ZXJib3NlKCdnZXRBY3Rpb25zIHN0YXJ0Jywgc3RhcnRQb3MsIGVuZFBvcywgJ2N1cnJlbnQ6JywgYWN0aW9ucy5sZW5ndGgpXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBsZXQgcmV0OiBhbnlcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgVGltZW91dFByb21pc2UoMTAwMDAsIHRoaXMuX2Vvcy5nZXRBY3Rpb25zKHthY2NvdW50X25hbWUsIHBvcywgb2Zmc2V0OiBlbmRQb3MgLSBwb3N9KSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm5pbmcoZXgpXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmV0IHx8ICFyZXQuYWN0aW9ucykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0QWN0aW9ucyBmYWlsZWQ6IGNhbm5vdCBmaW5kIGFjdGlvbnMgb2YgJHthY2NvdW50X25hbWV9IChwb3M6JHtwb3N9LCBvZmZzZXQ6JHtvZmZzZXR9KWApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYWN0cyA9IHJldC5hY3Rpb25zXG5cbiAgICAgICAgICAgIGxvZy52ZXJib3NlKCdnZXRBY3Rpb25zIGZpbmQnLCBhY3RzW2FjdHMubGVuZ3RoIC0gMV0pXG5cbiAgICAgICAgICAgIGxldCBtYXhBY3Rpb25JbmQgPSBhY3RzLmxlbmd0aCA9PT0gMCA/IHBvcyAtIDEgOiBhY3RzW2FjdHMubGVuZ3RoIC0gMV0uYWNjb3VudF9hY3Rpb25fc2VxXG4gICAgICAgICAgICBpZiAobWF4QWN0aW9uSW5kIDwgcG9zKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKC4uLmFjdHMpXG4gICAgICAgICAgICBpZiAobWF4QWN0aW9uSW5kID49IGVuZFBvcykge1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvcyA9IG1heEFjdGlvbkluZCArIDFcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY3Rpb25zXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgYWN0aW9ucyBpbiBidWxrXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBjYlJlY2VpdmUgLSB1c2luZyB0aGlzIGNhbGxiYWNrIHRvIHJlY2VpdmUgbGlzdCBvZiBhY3Rpb25zXG4gICAgICogQHBhcmFtIHN0YXJ0UG9zXG4gICAgICogQHBhcmFtIGNvdW50XG4gICAgICogQHBhcmFtIGNvbmN1cnJlbnRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGdldEFsbEFjdGlvbnNCYXRjaChhY2NvdW50X25hbWU6IHN0cmluZywgY2JSZWNlaXZlOiBGdW5jdGlvbiwgc3RhcnRQb3M6IG51bWJlciA9IDAsIGNvdW50OiBudW1iZXIgPSAxMDAsIGNvbmN1cnJlbnQ6IG51bWJlciA9IDEwKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGNvdW50IC0gMVxuICAgICAgICBjb25zdCByZXEgPSBhc3luYyAocG9zOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLnZlcmJvc2UoYHNlYXJjaCBTdGFydCA6IGF0OiR7RGF0ZS5ub3coKX0gcG9zOiR7cG9zfSBvZmZzZXQ6JHtvZmZzZXR9YClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QWN0aW9ucyhhY2NvdW50X25hbWUsIHBvcywgb2Zmc2V0KVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcignZXJyb3IgOiAnLCBleClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmV0OiBhbnlbXSA9IFtdXG4gICAgICAgIGxldCByYW5nZXMgPSBbXVxuICAgICAgICBsb2cuaW5mbyhgPT09PiBzdGFydCBzZWFyY2ggYWN0aW9ucyBvZiAke2FjY291bnRfbmFtZX0gZnJvbSAke3N0YXJ0UG9zfSwgY29uY3VycmVudCA6ICR7Y29uY3VycmVudH0sIGNvdW50IDogJHtjb3VudH0sIG9uY2UgOiAke2NvbmN1cnJlbnQgKiBjb3VudH1gKVxuICAgICAgICBsZXQgdFN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgOyBpKyspIHtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHN0YXJ0UG9zICsgaSAqIGNvdW50KVxuICAgICAgICAgICAgaWYgKGkgJSBjb25jdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRSb3VuZCA9IERhdGUubm93KClcbiAgICAgICAgICAgICAgICBsb2cudmVyYm9zZShgPT09PiBkZWFsIGJhdGNoICR7aX0gOiAke3Jhbmdlc30gYXQgJHt0U3RhcnR9YClcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICByYW5nZXMubWFwKHJlcSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRzLmZpbmQoYWN0cyA9PiBhY3RzLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvZy52ZXJib3NlKGA9PT0+IGRlYWwgYmF0Y2ggJHtpfSBkb25lICgke0RhdGUubm93KCkgLSB0Um91bmR9KWApXG4gICAgICAgICAgICAgICAgcmVzdWx0cy5mb3JFYWNoKGFjdHMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0cy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNiUmVjZWl2ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYlJlY2VpdmUoYWN0cylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXQucHVzaCguLi5hY3RzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbG9nLnZlcmJvc2UoYD09PT4gc2VuZCBiYXRjaCAke2l9IGRvbmUgKCR7RGF0ZS5ub3coKSAtIHRSb3VuZH0pYClcbiAgICAgICAgICAgICAgICByYW5nZXMgPSBbXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxvZy5pbmZvKGBnZXRBbGxBY3Rpb25zIDogYWxsIHNjYW5lZCAoJHtEYXRlLm5vdygpIC0gdFN0YXJ0fSlgKVxuICAgICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGJhbGFuY2Ugb2Ygc3BlY2lmaWMgYWNjb3VudFxuICAgICAqIEBwYXJhbSBhY2NvdW50X25hbWUgLSB1c2VyJ3MgYWNjb3VudCBuYW1lXG4gICAgICogQHBhcmFtIGNvZGUgLSBBY2NvdW50IG9mIHRoZSBjdXJyZW5jeSBjb250cmFjdC4gVGhlIGRlZmF1bHQgY29kZSBpcyBcImVvc2lvLnRva2VuXCIsIHdoaWNoIGlzIHRoZSBjdXJyZW5jeSBjb2RlIG9mIGVvc1xuICAgICAqIEBwYXJhbSBzeW1ib2xOYW1lIC0gdGhlIHRva2VuJ3Mgc3ltYm9sIG5hbWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZ3x1bmRlZmluZWQ+fSBhc3NldCBmb3JtYXQgJzEuMDAwMCBFT1MnXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmFsYW5jZShhY2NvdW50X25hbWU6IHN0cmluZywgY29kZTogc3RyaW5nID0gJ2Vvc2lvLnRva2VuJywgc3ltYm9sTmFtZT86IHN0cmluZykge1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSBhd2FpdCB0aGlzLmdldEJhbGFuY2VzKGFjY291bnRfbmFtZSwgY29kZSlcbiAgICAgICAgaWYgKCFzeW1ib2xOYW1lKSB7XG4gICAgICAgICAgICBsb2cud2FybmluZygnU3ltYm9sIG9mIHRoZSB0b2tlbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkLCB0aGUgZmlyc3QgaXRlbSB3aWxsIHJldHVybi4gYWxsOicsIGJhbGFuY2VzKVxuICAgICAgICAgICAgcmV0dXJuIGJhbGFuY2VzWzBdIHx8IG51bGxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiYWxhbmNlcy5maW5kKCh2OiBzdHJpbmcpID0+IHYuZW5kc1dpdGgoc3ltYm9sTmFtZSkpIHx8IG51bGxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lIC0gdXNlcidzIGFjY291bnQgbmFtZVxuICAgICAqIEBwYXJhbSBjb2RlIC0gQWNjb3VudCBvZiB0aGUgY3VycmVuY3kgY29udHJhY3QuIFRoZSBkZWZhdWx0IGNvZGUgaXMgXCJlb3Npby50b2tlblwiLCB3aGljaCBpcyB0aGUgY3VycmVuY3kgY29kZSBvZiBlb3NcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn0gLSBsaXN0IG9mIGFzc2V0LCBhc3NldCBmb3JtYXQgaXMgbGlrZSAnMS4wMDAwIEVPUydcbiAgICAgKi9cbiAgICBhc3luYyBnZXRCYWxhbmNlcyhhY2NvdW50X25hbWU6IHN0cmluZywgY29kZTogc3RyaW5nID0gJ2Vvc2lvLnRva2VuJykge1xuICAgICAgICByZXR1cm4gKChhd2FpdCB0aGlzLl9lb3MuZ2V0Q3VycmVuY3lCYWxhbmNlKGNvZGUsIGFjY291bnRfbmFtZSkpIHx8IFtdKS5tYXAoKHY6IHN0cmluZykgPT4gdi50cmltKCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdHJhbnNmZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjb3VudCAtIHtuYW1lLCBhdXRob3JpdHl9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCAtIGVvcyBhY2NvdW50LCBjYW4gYmUgdXNlciBvciBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWFudGl0eSAtIGVvcyBhc3NldCBmb3JtYXQsIGUucC4gXCIxLjAwMDAgRU9TXCJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVtbyAtIG1lbW9cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYkVycm9yIC0gbWVtb1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gdHJhbnNhY3Rpb25EYXRhXG4gICAgICovXG4gICAgYXN5bmMgdHJhbnNmZXIoYWNjb3VudDogSUlkZW50aXR5LCB0YXJnZXQ6IHN0cmluZywgcXVhbnRpdHk6IHN0cmluZywgbWVtbzogc3RyaW5nID0gJycsIGNiRXJyb3I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zT3B0aW9ucyA9IHthdXRob3JpemF0aW9uOiBbYCR7YWNjb3VudC5uYW1lfUAke2FjY291bnQuYXV0aG9yaXR5fWBdfVxuICAgICAgICBsZXQgdHJ4ID0gYXdhaXQgdGhpcy5fZW9zLnRyYW5zZmVyKGFjY291bnQubmFtZSwgdGFyZ2V0LCBxdWFudGl0eSwgbWVtbywgdHJhbnNPcHRpb25zKS5jYXRjaChcbiAgICAgICAgICAgIChjYkVycm9yKSB8fCBsb2cuZXJyb3JcbiAgICAgICAgKVxuICAgICAgICBpZiAodHJ4KSB7XG4gICAgICAgICAgICBsb2cuaW5mbyhgVHJhbnNmZXIgZGVhbGVkLCB0eElEOiAke3RyeC50cmFuc2FjdGlvbl9pZH1gKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnhcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBhIHRyYW5zYWN0aW9uIGluZm8sIHJldHJ5IG9uY2UgcGVyIHNlYyB1bnRpbCBzdWNjZXNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR4SURcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4Um91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNwYW5NU1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBhc3luYyB3YWl0VHgodHhJRDogc3RyaW5nLCBtYXhSb3VuZDogbnVtYmVyID0gMTIsIHRpbWVTcGFuTVM6IG51bWJlciA9IDEwMDkpIHsgLy8gVW5tYW5hZ2VkIHBvbGxpbmcgdXNlcyBwcmltZSBhcyB0aGUgZGVmYXVsdCBpbnRlcnZhbFxuICAgICAgICBjb25zdCBjaGVja1R4OiBhbnkgPSBhc3luYyAoX3R4SUQ6IHN0cmluZywgcm91bmQ6IG51bWJlciA9IDApID0+IHsgLy8gY2FuIG9ubHkgdXNlIGxhbWJkYSwgY3V6IHRoaXMgaXMgdXNlZFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHRoaXMuX2Vvcy5nZXRUcmFuc2FjdGlvbihfdHhJRClcbiAgICAgICAgICAgICAgICBpZiAodHgpIHJldHVybiB0eFxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nLnZlcmJvc2UoYHdhaXQgdHggJHtfdHhJRH0sIHJldHJ5IHJvdW5kOiAke3JvdW5kfS4gJHtlcnIubWVzc2FnZX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJvdW5kID49IG1heFJvdW5kKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGB3YWl0IHR4IGZhaWxlZCwgcm91bmQgb3V0LmApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGZvck1zKHRpbWVTcGFuTVMpXG4gICAgICAgICAgICByZXR1cm4gY2hlY2tUeChfdHhJRCwgcm91bmQgKyAxKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGNoZWNrVHgodHhJRClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZW5kIGFjdGlvbiB0byBhIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSBhY2NvdW50IG9mIGNvbnRyYWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZ1bmMgLSBmdW5jdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGpzb25EYXRhIC0gZGF0YVxuICAgICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGF1dGhvcml6YXRpb24gLSBzaG91bGQgYmUgYW4gb2JqZWN0IHdobyBoYXMga2V5cyB7YWN0b3IsIHBlcm1pc3Npb259XG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn0gLSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIGFzeW5jIGNhbGwoY29kZTogc3RyaW5nLCBmdW5jOiBzdHJpbmcsIGpzb25EYXRhOiBhbnksIC4uLmF1dGhvcml6YXRpb246IElBdXRob3JpemF0aW9uW10pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2Vvcy50cmFuc2FjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50OiBjb2RlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmdW5jLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiBhdXRob3JpemF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBqc29uRGF0YVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgYWxsIGl0ZW1zIGluIGEgdGFibGVcbiAgICAgKiBAZGVzYyB0aGlzIG1ldGhvZCBjYW4gYmUgdmVyeSBmYXN0IChpbmZpbml0ZWx5IGNsb3NlIHRvIG9uY2UgcnBjIHRpbWUpIHdoZW4gcHJvdmlkZSBoaW50IHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lIC0gbmFtZSBvZiB0aGUgdGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXJOdW0gLSBsb3dlciBwb3NpdGlvbiwgY2FuIGJlIG51bWJlciBvciBzdHJpbmdOdW1iZXIsIGNhbm5vdCBiZSBhY2NvdW50X25hbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXJOdW0gLSBsb3dlciBwb3NpdGlvbiwgY2FuIGJlIG51bWJlciBvciBzdHJpbmdOdW1iZXIsIGNhbm5vdCBiZSBhY2NvdW50X25hbWVcbiAgICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGhpbnQgLSBoaW50IHRhYmxlIHRvIHNwZWVkIHVwIHNlYXJjaFxuICAgICAqIEBleGFtcGxlIGdldFRhYmxlKFwiY29udHJhY3RcIiwgXCJ0YWJsZVwiLCBcInNjb3BlXCIsIDAsIC0xLCBcIjQ2MTE2ODYwMTg0MjczODc5MDNcIiwgXCI2OTE3NTI5MDI3NjQxMDgxODU2XCIsIFwiOTIyMzM3MjAzNjg1NDc3NTgwOFwiLCBcIjEzODM1MDU4MDU1MjgyMTYzNzEyXCIpXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheT59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGFibGVBbGwoY29kZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgIHRhYmxlTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgIHNjb3BlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgbG93ZXJOdW06IHN0cmluZyB8IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICB1cHBlck51bTogc3RyaW5nIHwgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLmhpbnQ6IEFycmF5PHN0cmluZyB8IG51bWJlcj4pIHtcbiAgICAgICAgY29uc3QgbG93ZXI6IEJpZ051bWJlciA9IGxvd2VyTnVtID8gbmV3IEJpZ051bWJlcihsb3dlck51bSkgOiBuZXcgQmlnTnVtYmVyKDApXG4gICAgICAgIGNvbnN0IHVwcGVyOiBCaWdOdW1iZXIgPSB1cHBlck51bSAmJiB1cHBlck51bSAhPT0gLTEgPyBuZXcgQmlnTnVtYmVyKHVwcGVyTnVtKSA6IG5ldyBCaWdOdW1iZXIoJzE4NDQ2NzQ0MDczNzA5NTUxNjE1JylcblxuICAgICAgICBsZXQgcmV0OiBhbnlbXSA9IFtdO1xuICAgICAgICBsZXQgcG9vbDogYW55W10gPSBbXTtcbiAgICAgICAgY29uc3QgUmVxdWlyZSA9IChfbDogQmlnTnVtYmVyLCBfdTogQmlnTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBsb2cudmVyYm9zZSgnc2VhcmNoICcsIERhdGUubm93KCksIF9sLnRvRml4ZWQoMCksIF91LnRvRml4ZWQoMCkpXG4gICAgICAgICAgICBpZiAoX2wuZ3RlKF91KSkgcmV0dXJuXG4gICAgICAgICAgICBsZXQgX3Byb21pc2UgPSB0aGlzLl9lb3MuZ2V0VGFibGVSb3dzKHtcbiAgICAgICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGltaXQ6IC0xLFxuICAgICAgICAgICAgICAgIGxvd2VyX2JvdW5kOiBfbC50b0ZpeGVkKDApLFxuICAgICAgICAgICAgICAgIHVwcGVyX2JvdW5kOiBfdS50b0ZpeGVkKDApXG4gICAgICAgICAgICB9KS50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBfbXlJbmQgPSBwb29sLmZpbmRJbmRleCh2ID0+IHYgPT09IF9wcm9taXNlKVxuICAgICAgICAgICAgICAgIHBvb2wuc3BsaWNlKF9teUluZCwgMSlcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5tb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucm93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goLi4ucmVzdWx0LnJvd3MpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgX21pZCA9IF91Lm1pbnVzKF9sKS5kaXZpZGVkQnkoMikuZGVjaW1hbFBsYWNlcygwKS5wbHVzKF9sKVxuICAgICAgICAgICAgICAgICAgICBSZXF1aXJlKF9sLCBfbWlkLm1pbnVzKDEpKVxuICAgICAgICAgICAgICAgICAgICBSZXF1aXJlKF9taWQsIF91KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IF9teUluZCA9IHBvb2wuZmluZCh2ID0+IHYgPT09IF9wcm9taXNlKVxuICAgICAgICAgICAgICAgIHBvb2wuc3BsaWNlKF9teUluZCwgMSlcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBwb29sLnB1c2goX3Byb21pc2UpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoaW50IHx8IGhpbnQubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIFJlcXVpcmUobG93ZXIsIHVwcGVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgWy4uLmhpbnQubWFwKGkgPT4gbmV3IEJpZ051bWJlcihpKSksIHVwcGVyXS5yZWR1Y2UoKF9sLCBfbSkgPT4ge1xuICAgICAgICAgICAgICAgIFJlcXVpcmUoX2wsIF9tKVxuICAgICAgICAgICAgICAgIHJldHVybiBfbVxuICAgICAgICAgICAgfSwgbG93ZXIpXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAocG9vbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhd2FpdCBmb3JNcyg1MClcbiAgICAgICAgfVxuICAgICAgICBsb2cudmVyYm9zZSgnZG9uZSBzZWFyY2ggJywgRGF0ZS5ub3coKSwgbG93ZXIudG9GaXhlZCgwKSwgdXBwZXIudG9GaXhlZCgwKSlcblxuICAgICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgYSB0YWJsZVxuICAgICAqIEBkZXNjIHRoZSB0YWcgJ21vcmUnIGFyZSBub3QgaGFuZGxlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIHRoZSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWUgLSBuYW1lIG9mIHRoZSB0YWJsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSBsb3dlcl9ib3VuZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSB1cHBlcl9ib3VuZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleF9wb3NpdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk+fVxuICAgICAqL1xuICAgIGFzeW5jIGNoZWNrVGFibGUoXG4gICAgICAgIGNvZGU6IHN0cmluZyxcbiAgICAgICAgdGFibGVOYW1lOiBzdHJpbmcsXG4gICAgICAgIHNjb3BlOiBzdHJpbmcsXG4gICAgICAgIGxpbWl0OiBudW1iZXIgPSAxMCxcbiAgICAgICAgbG93ZXJfYm91bmQ6IG51bWJlciB8IHN0cmluZyA9IDAsXG4gICAgICAgIHVwcGVyX2JvdW5kOiBudW1iZXIgfCBzdHJpbmcgPSAtMSxcbiAgICAgICAgaW5kZXhfcG9zaXRpb246IG51bWJlciA9IDEpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgICAgIGxvZy52ZXJib3NlKCdzZWFyY2ggJywgRGF0ZS5ub3coKSwgbG93ZXJfYm91bmQsIHVwcGVyX2JvdW5kLCBsaW1pdClcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2Vvcy5nZXRUYWJsZVJvd3Moe1xuICAgICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgICBzY29wZTogc2NvcGUsXG4gICAgICAgICAgICB0YWJsZTogdGFibGVOYW1lLFxuICAgICAgICAgICAgbGltaXQsXG4gICAgICAgICAgICBsb3dlcl9ib3VuZCxcbiAgICAgICAgICAgIHVwcGVyX2JvdW5kLFxuICAgICAgICAgICAgaW5kZXhfcG9zaXRpb25cbiAgICAgICAgfSlcbiAgICAgICAgbGV0IHJldCA9IHJlc3VsdCAmJiByZXN1bHQucm93cyA/IHJlc3VsdC5yb3dzIDogW11cbiAgICAgICAgaWYgKHJlc3VsdC5tb3JlICYmIChsaW1pdCA8PSAwIHx8IChyZXN1bHQucm93cyAmJiByZXN1bHQucm93cy5sZW5ndGggPCBsaW1pdCkpKSB7IC8vIGRlYWwgd2l0aCAnbW9yZSdcbiAgICAgICAgICAgIGxvZy53YXJuaW5nKGAnbW9yZScgZGV0ZWN0ZWQsIGFuZCB0aGlzIG1ldGhvZCBkaWRuJ3QgZGVhbCB3aXRoIHRoZSB0YWcgJ21vcmUnLiBpZiB5b3Ugd2FudCB0byBnZXQgYWxsIHJlc3VsdHMsIHVzaW5nIGNoZWNrVGFibGVNb3JlIGFuZCBwcm92aWRlIHRoZSBwcmltYXJ5IGtleS4gYClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgYSB0YWJsZVxuICAgICAqIEBkZXNjIHRoZSB0YWcgJ21vcmUnIGFyZSBoYW5kbGVkLiBpdCBtZWFucyB0aGF0IHRoZSByZXN1bHQgd291bGQgbm90IGJlIHRydW5jYXRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIHRoZSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWUgLSBuYW1lIG9mIHRoZSB0YWJsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmltYXJ5S2V5IC0gdGhlIGtleSBmb3IgaW5kZXhpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXRcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gbG93ZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IHN0cmluZ30gdXBwZXJfYm91bmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhfcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn1cbiAgICAgKi9cbiAgICBhc3luYyBjaGVja1RhYmxlTW9yZShcbiAgICAgICAgY29kZTogc3RyaW5nLFxuICAgICAgICB0YWJsZU5hbWU6IHN0cmluZyxcbiAgICAgICAgc2NvcGU6IHN0cmluZyxcbiAgICAgICAgcHJpbWFyeUtleTogc3RyaW5nLFxuICAgICAgICBsaW1pdDogbnVtYmVyID0gOTk5OTk5OSxcbiAgICAgICAgbG93ZXJfYm91bmQ6IG51bWJlciB8IHN0cmluZyA9IDAsXG4gICAgICAgIHVwcGVyX2JvdW5kOiBudW1iZXIgfCBzdHJpbmcgPSAtMSxcbiAgICAgICAgaW5kZXhfcG9zaXRpb246IG51bWJlciA9IDEpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgICAgIGxvZy52ZXJib3NlKCdzZWFyY2ggJywgY29kZSwgdGFibGVOYW1lLCBEYXRlLm5vdygpKVxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5fZW9zLmdldFRhYmxlUm93cyh7XG4gICAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgIHRhYmxlOiB0YWJsZU5hbWUsXG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgIGxvd2VyX2JvdW5kLFxuICAgICAgICAgICAgdXBwZXJfYm91bmQsXG4gICAgICAgICAgICBpbmRleF9wb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJldCA9IHJlc3VsdCAmJiByZXN1bHQucm93cyA/IHJlc3VsdC5yb3dzIDogW11cbiAgICAgICAgbG9nLnZlcmJvc2UoYHBhcnQgc2l6ZSAke3JldC5sZW5ndGh9LmApXG4gICAgICAgIGlmIChyZXN1bHQubW9yZSAmJiAobGltaXQgPD0gMCB8fCAocmVzdWx0LnJvd3MgJiYgcmVzdWx0LnJvd3MubGVuZ3RoIDwgbGltaXQpKSkgeyAvLyBkZWFsIHdpdGggJ21vcmUnXG4gICAgICAgICAgICBsZXQgZnJvbSA9IHJldFswXVtwcmltYXJ5S2V5XVxuICAgICAgICAgICAgbGV0IHRvID0gcmV0W3JldC5sZW5ndGggLSAxXVtwcmltYXJ5S2V5XVxuICAgICAgICAgICAgaWYgKCFmcm9tIHx8ICF0bykge1xuICAgICAgICAgICAgICAgIGxldCBhYmkgPSBhd2FpdCB0aGlzLmdldEFiaShjb2RlKVxuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgc2VhcmNoaW5nIG1vcmUgZXJyb3Igd2l0aCBwcmltYXJ5IGtleSA6ICR7cHJpbWFyeUtleX0uIHBsZWFzZSBjaGVja1xcbmxhc3QgZGF0YTogJHtyZXRbcmV0Lmxlbmd0aCAtIDFdfSBcXG5hYmkgJHtKU09OLnN0cmluZ2lmeShhYmkpfWApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjaGVjayBtb3JlIGVycm9yIHdpdGggcHJpbWFyeSBrZXkgOiAke3ByaW1hcnlLZXl9YClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZy5pbmZvKGAnbW9yZScgZGV0ZWN0ZWQ6IHN0YXJ0IHNlYXJjaGluZyByZXN1bHRzIGZyb20gJHt0b30uYClcbiAgICAgICAgICAgIGxldCBwYXJ0UmVzdWx0ID0gYXdhaXQgdGhpcy5jaGVja1RhYmxlTW9yZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBwcmltYXJ5S2V5LCBsaW1pdCAtIHJldC5sZW5ndGggKyAxLCB0bywgdXBwZXJfYm91bmQsIGluZGV4X3Bvc2l0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIHJldC5jb25jYXQocGFydFJlc3VsdC5zcGxpY2UoMSkpXG4gICAgICAgICAgICAvLyB0b2RvOiB0aGUgbWVhbmluZyBvZiAnbGltaXQnLCBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayByYW5nZSBpbiB0YWJsZVxuICAgICAqIEBkZXNjIHRoZSB0YWcgJ21vcmUnIGFyZSBoYW5kbGVkLiBpdCBtZWFucyB0aGF0IHRoZSByZXN1bHQgd291bGQgbm90IGJlIHRydW5jYXRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIHRoZSBjb250cmFjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWUgLSBuYW1lIG9mIHRoZSB0YWJsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgc3RyaW5nfSBmcm9tIC0gc3RhcnQgcG9zaXRpb24gb3IgdXNlcm5hbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4X3Bvc2l0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheT59XG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tUYWJsZVJhbmdlKFxuICAgICAgICBjb2RlOiBzdHJpbmcsXG4gICAgICAgIHRhYmxlTmFtZTogc3RyaW5nLFxuICAgICAgICBzY29wZTogc3RyaW5nLFxuICAgICAgICBmcm9tOiBudW1iZXIgfCBzdHJpbmcsXG4gICAgICAgIGxlbmd0aDogbnVtYmVyID0gMSxcbiAgICAgICAgaW5kZXhfcG9zaXRpb246IG51bWJlciA9IDEpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJhbmdlIGVycm9yOiBsZW5ndGgoJHtsZW5ndGh9KSBtdXN0IGxhcmdlciB0aGFuIDAgYClcbiAgICAgICAgfVxuICAgICAgICBsZXQgcm93czogYW55W10gPSBhd2FpdCB0aGlzLmNoZWNrVGFibGUoXG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICBmcm9tLFxuICAgICAgICAgICAgKHR5cGVvZiBmcm9tID09PSAnbnVtYmVyJykgP1xuICAgICAgICAgICAgICAgIGZyb20gKyBsZW5ndGggOlxuICAgICAgICAgICAgICAgIG5ldyBCaWdOdW1iZXIoRW9zLm1vZHVsZXMuZm9ybWF0LmVuY29kZU5hbWUoZnJvbSwgZmFsc2UpKS5wbHVzKGxlbmd0aCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGluZGV4X3Bvc2l0aW9uKVxuICAgICAgICByZXR1cm4gcm93c1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGEgaXRlbSBpbiBhIHRhYmxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFibGVOYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59XG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tUYWJsZUl0ZW0oXG4gICAgICAgIGNvZGU6IHN0cmluZyxcbiAgICAgICAgdGFibGVOYW1lOiBzdHJpbmcsXG4gICAgICAgIHNjb3BlOiBzdHJpbmcsXG4gICAgICAgIGtleTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgIGxldCByb3dzID0gYXdhaXQgdGhpcy5jaGVja1RhYmxlUmFuZ2UoY29kZSwgdGFibGVOYW1lLCBzY29wZSwga2V5LCAxKVxuICAgICAgICByZXR1cm4gcm93c1swXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSBhdXRoXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZVxuICAgICAqIEBwYXJhbSBwZXJtaXNzaW9uXG4gICAgICogQHBhcmFtIHBhcmVudFxuICAgICAqIEBwYXJhbSB0aHJlc2hvbGRcbiAgICAgKiBAcGFyYW0ga2V5c1xuICAgICAqIEBwYXJhbSBhY2NvdW50c1xuICAgICAqIEBwYXJhbSB3YWl0c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPCo+fVxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZUF1dGgoXG4gICAgICAgIGFjY291bnRfbmFtZTogc3RyaW5nLFxuICAgICAgICBwZXJtaXNzaW9uOiBzdHJpbmcsXG4gICAgICAgIHBhcmVudDogc3RyaW5nLFxuICAgICAgICB0aHJlc2hvbGQ6IG51bWJlcixcbiAgICAgICAga2V5czogYW55LFxuICAgICAgICBhY2NvdW50czogYW55LFxuICAgICAgICB3YWl0czogbnVtYmVyID0gMSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZW9zLnVwZGF0ZWF1dGgoe1xuICAgICAgICAgICAgYWNjb3VudF9uYW1lLFxuICAgICAgICAgICAgcGVybWlzc2lvbixcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgICdhdXRoJzoge1xuICAgICAgICAgICAgICAgIHRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgICAgIGFjY291bnRzLFxuICAgICAgICAgICAgICAgIHdhaXRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGdldFRhYmxlQnlTY29wZShcbiAgICAgICAgaG9zdDogc3RyaW5nLFxuICAgICAgICBjb2RlOiBzdHJpbmcsXG4gICAgICAgIHRhYmxlOiBzdHJpbmcsXG4gICAgICAgIGxvd2VyX2JvdW5kOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgICAgIHVwcGVyX2JvdW5kOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgICAgIGxpbWl0OiBudW1iZXIgPSAxMDAwKSB7XG4gICAgICAgIGNvbnN0IGFwaSA9ICcvdjEvY2hhaW4vZ2V0X3RhYmxlX2J5X3Njb3BlJ1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAnY29kZSc6IGNvZGUsXG4gICAgICAgICAgICAndGFibGUnOiB0YWJsZSxcbiAgICAgICAgICAgICdsb3dlcl9ib3VuZCc6IGxvd2VyX2JvdW5kLFxuICAgICAgICAgICAgJ3VwcGVyX2JvdW5kJzogdXBwZXJfYm91bmQsXG4gICAgICAgICAgICAnbGltaXQnOiBsaW1pdCAvLyDooajnpLrmr4/mrKHojrflj5Y25p2h6K6w5b2VXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXEgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTDogaG9zdCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBwb3N0OiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgcmV0IDogYW55W10gPSBbXVxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgbGV0IHJzcCA9IGF3YWl0IHJlcS5wb3N0KGFwaSwgcGFyYW1zKVxuICAgICAgICAgICAgbGV0IHRhYmxlID0gcnNwLmRhdGFcbiAgICAgICAgICAgIHJldC5wdXNoKHRhYmxlKVxuICAgICAgICAgICAgaWYgKHRhYmxlLm1vcmUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgc3RhdGljIGhlbHAoKSB7XG4gICAgICAgIHJldHVybiBgXG4jIyMgQ2hhaW4gQVBJXG5cblxcYFxcYFxcYGpzXG57T2JqZWN0fSBhc3luYyBnZXRJbmZvKCkgLy8gZ2V0IGluZm8gb2YgdGhlIGNoYWluIGNvbm5lY3RlZFxue09iamVjdH0gYXN5bmMgZ2V0QmxvY2soYmxvY2tOdW1PcklkKSAvLyBnZXQgc3BlY2lmaWMgYmxvY2sgb2YgdGhlIGNoYWluXG4gICAgXG5cbntDb250cmFjdH0gYXN5bmMgZ2V0Q29udHJhY3QoY29kZSkgLy8gZ2V0IGNvbnRyYWN0XG57T2JqZWN0fSBhc3luYyBnZXRBYmkoY29kZSkgLy8gZ2V0IGFiaSBvZiBjb250cmFjdFxue09iamVjdH0gYXN5bmMgZ2V0VGFibGVBYmkoY29kZSwgdGFibGVOYW1lKSAvLyBnZXQgdGFibGUgYWJpIG9mIGNvbnRyYWN0XG57T2JqZWN0fSBhc3luYyBhYmlKc29uVG9CaW4oY29kZSwgYWN0aW9uLCBhcmdzKSBcblxue09iamVjdH0gYXN5bmMgZ2V0QWNjb3VudEluZm8oYWNjb3VudF9uYW1lKSAvLyBnZXQgYWNjb3VudCBpbmZvIG9mIGFueSB1c2VyXG57c3RyaW5nfSBhc3luYyBnZXRQdWJLZXkoYWNjb3VudF9uYW1lLCBhdXRob3JpdHkgPSBcImFjdGl2ZVwiKSAvLyBnZXQgdGhlIGZpcnN0IHB1YmxpYyBrZXkgb2YgYW4gYWNjb3VudFxue0FycmF5fSBhc3luYyBnZXRQdWJLZXlzKGFjY291bnRfbmFtZSwgYXV0aG9yaXR5ID0gXCJhY3RpdmVcIikgLy8gZ2V0IHB1YmxpYyBrZXlzIG9mIGFuIGFjY291bnRcbntzdHJpbmd9IGFzeW5jIHJlY292ZXJTaWduKHNpZ25hdHVyZSwgbWVzc2FnZSkgLy8gcmVjb3ZlciBzaWduIGFuZCB0byB0aGUgcHVibGljIGtleVxue3N0cmluZ30gYXN5bmMgdmFsaWRhdGVTaWduIChzaWduYXR1cmUsIG1lc3NhZ2UsIGFjY291bnQsIGF1dGhvcml0eSA9ICdhY3RpdmUnLCBhY2NvdW50c1Blcm1pc2lvblBsdWdpbnMpIFxuLy8gdmFsaWRhdGUgaWYgc2lnbmVkIGRhdGEgaXMgc2lnbmVkIGJ5IGEgYWNjb3VudC4gaXQgcmV0dXJucyB0aGUgbWF0Y2hlZCBwdWJsaWMga2V5IFxuXG57TnVtYmVyfSBhc3luYyBnZXRBY3Rpb25Db3VudChhY2NvdW50X25hbWUpIC8vIGdldCBhIGFjY291bnQncyBhY3Rpb24gY291bnRcbntOdW1iZXJ9IGFzeW5jIGdldEFjdGlvbk1heFNlcShhY2NvdW50X25hbWUpIC8vIGdldCBhIGFjY291bnQncyBtYXggYWN0aW9uIHNlcVxue0FycmF5fSBhc3luYyBnZXRSZWNlbnRBY3Rpb25zKGFjY291bnRfbmFtZSkgLy8gZ2V0IHJlY2VudCBhY3Rpb25zXG57QXJyYXl9IGFzeW5jIGdldEFjdGlvbnMoYWNjb3VudF9uYW1lLCBzdGFydFBvcyA9IDAsIG9mZnNldCA9IDApIC8vIGdldCBhbGwgYWN0aW9ucyBvZiBhbiBhY2NvdW50XG57QXJyYXl9IGFzeW5jIGdldEFsbEFjdGlvbnNCYXRjaCAoYWNjb3VudF9uYW1lLCBjYlJlY2VpdmUsIHN0YXJ0UG9zID0gMCwgY291bnQgPSAxMDAsIGNvbmN1cnJlbnQgPSAxMCkgLy8gZ2V0IGFsbCBhY3Rpb25zIGluIGJ1bGtcblxue1N0cmluZ30gYXN5bmMgZ2V0QmFsYW5jZShhY2NvdW50X25hbWUsIGNvZGUgPSBcImVvc2lvLnRva2VuXCIsIHN5bWJvbE5hbWUgPSB1bmRlZmluZWQpIC8vIGdldCBiYWxhbmNlIG9mIHNwZWNpZmljIGFjY291bnRcbntBcnJheS48U3RyaW5nPn0gYXN5bmMgZ2V0QmFsYW5jZXMoYWNjb3VudF9uYW1lLCBjb2RlID0gXCJlb3Npby50b2tlblwiKSAvLyBnZXQgYWxsIGJhbGFuY2Ugb2Ygc3BlY2lmaWMgYWNjb3VudFxue1R4fSBhc3luYyB0cmFuc2ZlcihhY2NvdW50LCB0YXJnZXQsIHF1YW50aXR5LCBtZW1vID0gXCJcIiwgY2JFcnJvcikgLy8gdGhlIGZvcm1hdCBvZiBhY2NvdW50IHNob3VsZCBiZSB7bmFtZSwgYXV0aG9yaXR5fVxuXG57VHh9IGFzeW5jIHdhaXRUeCh0eElELCBtYXhSb3VuZCA9IDEyLCB0aW1lU3Bhbk1TID0gMTAwOSkgLy8gY2hlY2sgYSB0cmFuc2FjdGlvbiBpbmZvLCByZXRyeSBvbmNlIHBlciBzZWMgdW50aWwgc3VjY2Vzc1xuXG57VHh9IGFzeW5jIGNhbGwoY29kZSwgZnVuYywganNvbkRhdGEsIC4uLmF1dGhvcml6YXRpb24pIC8vIHNlbmQgYWN0aW9uIHRvIGEgY29udHJhY3Rcblxue0FycmF5fSBhc3luYyBnZXRUYWJsZUFsbChjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBsb3dlck51bSwgdXBwZXJOdW0sIC4uLmhpbnQpIC8vIGdldCBhbGwgaXRlbXMgaW4gYSB0YWJsZVxue0FycmF5fSBhc3luYyBjaGVja1RhYmxlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIGxpbWl0ID0gMTAsIGxvd2VyX2JvdW5kID0gMCwgdXBwZXJfYm91bmQgPSAtMSwgaW5kZXhfcG9zaXRpb24gPSAxKSAvLyBjaGVjayBhIHRhYmxlXG57QXJyYXl9IGFzeW5jIGNoZWNrVGFibGVNb3JlKGNvZGUsIHRhYmxlTmFtZSwgc2NvcGUsIHByaW1hcnlLZXksIGxpbWl0ID0gOTk5OTk5OSwgbG93ZXJfYm91bmQgPSAwLCB1cHBlcl9ib3VuZCA9IC0xLCBpbmRleF9wb3NpdGlvbiA9IDEpXG57QXJyYXl9IGFzeW5jIGNoZWNrVGFibGVSYW5nZShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBmcm9tLCBsZW5ndGggPSAxLCBpbmRleF9wb3NpdGlvbiA9IDEpIC8vIGNoZWNrIHJhbmdlIGluIHRhYmxlXG57T2JqZWN0fSBhc3luYyBjaGVja1RhYmxlSXRlbShjb2RlLCB0YWJsZU5hbWUsIHNjb3BlLCBrZXkgPSAwKSAvLyBjaGVjayBhIGl0ZW0gaW4gYSB0YWJsZVxuXG57T2JqZWN0fSBhc3luYyB1cGRhdGVBdXRoKGFjY291bnQsIHBlcm1pc3Npb24sIHBhcmVudCwgdGhyZXNob2xkLCBrZXlzLCBhY2NvdW50cywgd2FpdHMpIC8vIHVwZGF0ZSBhdXRoXG5cXGBcXGBcXGAgICBcbmBcbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgdmFyIG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZXNIZWxwZXIgZnJvbSAnLi9raFJlcydcbmltcG9ydCBUcmFuc2NhbFBheWxvYWQgZnJvbSAnLi4vbW9kZWwvdHJhbnNjYWxQYXlsb2FkJ1xuaW1wb3J0IENoYWluSGVscGVyIGZyb20gXCIuL2NoYWluXCI7XG5pbXBvcnQge0lJZGVudGl0eX0gZnJvbSBcIi4uL3R5cGVzL2Vvc1wiO1xuaW1wb3J0IEFzc2V0IGZyb20gXCIuLi9tb2RlbC9hc3NldFwiO1xuXG4vKipcbiAqIGtoIGhlbHBlciwgc3VwcG9ydGVkIGtoIGNvbnRyYWN0IG9wZXJhdGlvbnNcbiAqIEBhdXRob3Iga2luZ2hhbmRAZm94bWFpbC5jb21cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2hIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIGluaXRpYXRlIHdpdGggdGhlIGNoYWluIGhlbHBlclxuICAgICAqIEBwYXJhbSB7Q2hhaW5IZWxwZXJ9IF9jaGFpblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBfY2hhaW46IENoYWluSGVscGVyKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2FsbCBraCBjb250cmFjdCB3aXRoIHRyYW5zZmVyIChtYXRjaCBlb3NraXQpXG4gICAgICogQHBhcmFtIHtJSWRlbnRpdHl9IGFjY291bnQgLSB7bmFtZSwgYXV0aG9yaXR5fVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVhbnRpdHkgLSBlb3MgYXNzZXQgZm9ybWF0LCBlLnAuIFwiMS4wMDAwIEVPU1wiXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZ1bmMgLSBmdW5jdGlvbiBuYW1lXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGFyZ3VtZW50cyBvZiB0aGUgdHJhbnNjYWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYkVycm9yIC0gbWVtb1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Kj59IHRyYW5zYWN0aW9uRGF0YVxuICAgICAqL1xuICAgIGFzeW5jIHRyYW5zY2FsKGFjY291bnQ6IElJZGVudGl0eSwgdGFyZ2V0OiBzdHJpbmcsIHF1YW50aXR5OiBzdHJpbmcsIGZ1bmM6IHN0cmluZywgYXJnczogYW55W10sIGNiRXJyb3I6IEZ1bmN0aW9uKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2NoYWluLnRyYW5zZmVyKFxuICAgICAgICAgICAgYWNjb3VudCxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHF1YW50aXR5LFxuICAgICAgICAgICAgYEBbJHtmdW5jfToke2FyZ3Muam9pbignLCcpfV1gLFxuICAgICAgICAgICAgY2JFcnJvcilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0cmFuc2NhbCB3aXRoIFwiMC4wMDAxIEVPU1wiIHRva2VuXG4gICAgICogQHBhcmFtIHtJSWRlbnRpdHl9IGFjY291bnQgLSB7bmFtZSwgYXV0aG9yaXR5fVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgLSBlb3MgYWNjb3VudCwgY2FuIGJlIHVzZXIgb3IgY29udHJhY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3ltYm9sU3RyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZ1bmNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gYXJndW1lbnRzIG9mIHRoZSB0cmFuc2NhbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiRXJyb3IgLSBtZW1vXG4gICAgICogQHJldHVybiB7UHJvbWlzZTwqPn1cbiAgICAgKi9cbiAgICBhc3luYyB0cmFuc2VuZChhY2NvdW50OiBJSWRlbnRpdHksIHRhcmdldDogc3RyaW5nLCBzeW1ib2xTdHI6IHN0cmluZywgZnVuYzogc3RyaW5nLCBhcmdzOiBhbnlbXSwgY2JFcnJvcjogRnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNjYWwoXG4gICAgICAgICAgICBhY2NvdW50LFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYDAuMDAwMSAke3N5bWJvbFN0cn1gLFxuICAgICAgICAgICAgZnVuYyxcbiAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICBjYkVycm9yKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCByZXMgaGVscGVyIG9mIChjb2RlLCBzeW0pXG4gICAgICogQGV4YW1wbGUga2gucmVzKCd0aGVjb250cmFjdCcsICdXT0QnKVxuICAgICAqIEBwYXJhbSBjb2RlIC0gdGhlIGNvbnRyYWN0J3MgYWNjb3VudFxuICAgICAqIEBwYXJhbSBzeW1TdHIgLSBzeW1ib2wgb2YgcmVzb3VyY2VcbiAgICAgKi9cbiAgICByZXMoY29kZTogc3RyaW5nLCBzeW1TdHI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbmV3IFJlc0hlbHBlcih0aGlzLl9jaGFpbiwgY29kZSwgc3ltU3RyKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIHJlcyBvZiBhbiB1c2VyXG4gICAgICogQGRlcHJlY2F0ZWQgLSB1c2luZyByZXMoY29kZSwgc3ltU3RyKS5jaGVja0JhbGFuY2UodXNlckFjY291bnQpIGluc3RlYWRcbiAgICAgKiBAcGFyYW0gY29kZSAtIGNvbnRyYWN0IG5hbWVcbiAgICAgKiBAcGFyYW0gYWNjb3VudF9uYW1lIC0gYWNjb3VudCBvZiB0aGUgdXNlclxuICAgICAqIEBwYXJhbSBzeW1ib2xTdHIgLSBzeW1ib2wgc3RyaW5nIGxpa2UgXCJFT1NcIlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXNzZXQ+fSAtIHJldHVybnMgbnVsbCBpZiBpdCdzIG5vdCBleGlzdC5cbiAgICAgKi9cbiAgICBhc3luYyBjaGVja1Jlc09mKGNvZGU6IHN0cmluZywgYWNjb3VudF9uYW1lOiBzdHJpbmcsIHN5bWJvbFN0cjogc3RyaW5nKTogUHJvbWlzZTxBc3NldD4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXMoY29kZSwgc3ltYm9sU3RyKS5jaGVja0Fzc2V0KGFjY291bnRfbmFtZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayByZXMgb2YgYW4gdXNlclxuICAgICAqIEBkZXByZWNhdGVkIC0gdXNpbmcgcmVzKGNvZGUsIHN5bVN0cikuY2hlY2tJbmZvKCkgaW5zdGVhZFxuICAgICAqIEBwYXJhbSBjb2RlIC0gY29udHJhY3QgbmFtZVxuICAgICAqIEBwYXJhbSBzeW1ib2xTdHIgLSBzeW1ib2wgc3RyaW5nIGxpa2UgXCJFT1NcIlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXNzZXQ+fSAtIHJldHVybnMgbnVsbCBpZiBpdCdzIG5vdCBleGlzdC5cbiAgICAgKi9cbiAgICBhc3luYyBjaGVja1Jlc0luZm8oY29kZTogc3RyaW5nLCBzeW1ib2xTdHI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXMoY29kZSwgc3ltYm9sU3RyKS5jaGVja0luZm8oKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHBhcnNlIHRyYW5zY2FsIHBheWxvYWQgdG8gZGF0YSBzdHJ1Y3R1cmVcbiAgICAgKiBAcGFyYW0gbWVtb1xuICAgICAqIEByZXR1cm4ge1RyYW5zY2FsUGF5bG9hZH1cbiAgICAgKi9cbiAgICBwYXJzZVRyYW5zY2FsUGF5bG9hZChtZW1vOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFRyYW5zY2FsUGF5bG9hZC5wYXJzZShtZW1vKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFzc2VtYmxlIHRyYW5zY2FsIGRhdGEgc3RydWN0dXJlIHRvIHBheWxvYWRcbiAgICAgKiBAcGFyYW0gZnVuY1xuICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIGFzc2VtYmxlVHJhbnNjYWxQYXlsb2FkKGZ1bmMgOiBzdHJpbmcsIC4uLmFyZ3MgOiBzdHJpbmdbXSkge1xuICAgICAgICByZXR1cm4gKG5ldyBUcmFuc2NhbFBheWxvYWQoZnVuYywgLi4uYXJncykpLm1lbW8oKVxuICAgIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgQXNzZXQgZnJvbSAnLi4vbW9kZWwvYXNzZXQnXG5pbXBvcnQgQ2hhaW5IZWxwZXIgZnJvbSBcIi4vY2hhaW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzSGVscGVyIHtcbiAgY29uc3RydWN0b3IgKFxuICAgICAgcHVibGljIHJlYWRvbmx5IF9jaGFpbjogQ2hhaW5IZWxwZXIsXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgX2NvZGU6c3RyaW5nLFxuICAgICAgcHVibGljIHJlYWRvbmx5IF9zeW1TdHI6c3RyaW5nLFxuICAgICAgcHVibGljIHJlYWRvbmx5IF9hZG1pbjphbnkgPSB7IG5hbWU6IG51bGwsIGF1dGhvcml0eTogbnVsbCB9KSB7XG4gIH1cblxuICBnZXQgYWRtaW4gKCkge1xuICAgIGlmICghdGhpcy5fYWRtaW4gfHwgIXRoaXMuX2FkbWluLm5hbWUgfHwgIXRoaXMuX2FkbWluLmF1dGhvcml0eSkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gdGhpcy5fYWRtaW5cbiAgfVxuXG4gIGFzeW5jIHJlc0NvbnRyYWN0ICgpICB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX2NoYWluLmdldENvbnRyYWN0KHRoaXMuX2NvZGUpIDtcbiAgfVxuXG4gIC8qKlxuICAgICAqIGNoZWNrIHJlcyBvZiBhbiB1c2VyXG4gICAgICogQHBhcmFtIGFjY291bnRfbmFtZSAtIGFjY291bnQgb2YgdGhlIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFzc2V0Pn0gLSByZXR1cm5zIG51bGwgaWYgaXQncyBub3QgZXhpc3QuXG4gICAgICovXG4gIGFzeW5jIGNoZWNrQXNzZXQgKGFjY291bnRfbmFtZTogc3RyaW5nKSA6IFByb21pc2U8QXNzZXQ+IHtcbiAgICByZXR1cm4gQXNzZXQucGFyc2UoYXdhaXQgdGhpcy5fY2hhaW4uY2hlY2tUYWJsZUl0ZW0odGhpcy5fY29kZSwgJ3Jlcy5hY2NvdW50cycsIGFjY291bnRfbmFtZSwgdGhpcy5fc3ltU3RyKSlcbiAgfVxuXG4gIC8qKlxuICAgICAqIGNoZWNrIHJlcydzIGluZm9cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFzc2V0Pn0gLSByZXR1cm5zIG51bGwgaWYgaXQncyBub3QgZXhpc3QuXG4gICAgICovXG4gIGFzeW5jIGNoZWNrSW5mbyAoKSB7XG4gICAgcmV0dXJuIEFzc2V0LnBhcnNlKGF3YWl0IHRoaXMuX2NoYWluLmNoZWNrVGFibGVJdGVtKHRoaXMuX2NvZGUsICdyZXMuaW5mbycsIHRoaXMuX2NvZGUsIHRoaXMuX3N5bVN0cikpXG4gIH1cblxuICBhc3luYyBpc3N1ZSAoYWNjb3VudF9uYW1lOiBzdHJpbmcsIHF1YW50aXR5OiBzdHJpbmcsIG1lbW86IHN0cmluZykge1xuICAgIGxldCBjb250cmFjdCA9IGF3YWl0IHRoaXMucmVzQ29udHJhY3QoKVxuICAgIHJldHVybiBhd2FpdCBjb250cmFjdC5yZXNpc3N1ZSh7IHVzZXIgOiBhY2NvdW50X25hbWUsIHF1YW50aXR5LCBtZW1vIH0pXG4gIH1cblxuICBhc3luYyBidXJuIChhY2NvdW50X25hbWU6IHN0cmluZywgcXVhbnRpdHk6IHN0cmluZywgbWVtbzogc3RyaW5nKSB7XG4gICAgbGV0IGNvbnRyYWN0ID0gYXdhaXQgdGhpcy5yZXNDb250cmFjdCgpXG4gICAgcmV0dXJuIGF3YWl0IGNvbnRyYWN0LnJlc2J1cm4oeyB1c2VyIDogYWNjb3VudF9uYW1lLCBxdWFudGl0eSwgbWVtbyB9KVxuICB9XG5cbiAgYXN5bmMgdGFrZSAoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCBxdWFudGl0eTogc3RyaW5nLCBtZW1vOiBzdHJpbmcpIHtcbiAgICBsZXQgY29udHJhY3QgPSBhd2FpdCB0aGlzLnJlc0NvbnRyYWN0KClcbiAgICByZXR1cm4gYXdhaXQgY29udHJhY3QucmVzdGFrZSh7IGZyb20sIHRvLCBxdWFudGl0eSwgbWVtbyB9KVxuICB9XG5cbiAgYXN5bmMgY2hhbmdlIChhY2NvdW50X25hbWU6IHN0cmluZywgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCBtZW1vOiBzdHJpbmcpIHtcbiAgICBsZXQgY29udHJhY3QgPSBhd2FpdCB0aGlzLnJlc0NvbnRyYWN0KClcbiAgICByZXR1cm4gYXdhaXQgY29udHJhY3QuY2hhbmdlKHsgdXNlciA6IGFjY291bnRfbmFtZSwgZnJvbSwgdG8sIG1lbW8gfSlcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zY2FsUGF5bG9hZCB7XG4gIGFyZ3MgOiBzdHJpbmdbXSA9IFtdXG4gIGNvbnN0cnVjdG9yIChwdWJsaWMgZnVuYyA6IHN0cmluZywgLi4uIGFyZ3NfIDogc3RyaW5nW10pIHtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzX1xuICB9XG5cbiAgLyoqXG4gICAgICogR2V0IG1lbW9cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gIG1lbW8gKCkge1xuICAgIHJldHVybiBgQFske3RoaXMuZnVuY306JHt0aGlzLmFyZ3Muam9pbignLCcpfV1gXG4gIH1cblxuICAvKipcbiAgICAgKiBQYXJzZSBtZW1vXG4gICAgICovXG4gIHBhcnNlTWVtbyAobWVtbzogc3RyaW5nKSB7XG4gICAgbGV0IGNhbGxUeXBlID0gbWVtb1swXVxuICAgIGlmIChtZW1vLmxlbmd0aCA8IDQpIHRocm93IG5ldyBFcnJvcigncGFyc2UgdHJhbnNjYWwgZXJyb3I6IHRoZSBtZW1vIGlzIHRvbyBzaG9ydC4nKVxuICAgIGlmIChtZW1vWzFdICE9PSAnWycgfHwgbWVtb1syXSA9PT0gJ10nKSB0aHJvdyBuZXcgRXJyb3IoJ3BhcnNlIHRyYW5zY2FsIGVycm9yOiBmb3JtYXRpb24gZXJyb3IuJylcbiAgICBpZiAoY2FsbFR5cGUgIT09ICdAJyAmJiBjYWxsVHlwZSAhPT0gJyMnKSB0aHJvdyBuZXcgRXJyb3IoJ3BhcnNlIHRyYW5zY2FsIGVycm9yOiB0eXBlIG1hcmsgbXVzdCBiZSBAIG9yICMuJylcblxuICAgIGxldCBwb3NDb2wgPSBtZW1vLmluZGV4T2YoJzonKVxuICAgIGxldCBwb3NFbmQgPSBtZW1vLmluZGV4T2YoJ10nKVxuICAgIGlmIChwb3NFbmQgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZSB0cmFuc2NhbCBlcnJvcjogY2Fubm90IGZpbmQgZW5kIG1hcmsgJ10nLlwiKVxuXG4gICAgaWYgKHBvc0NvbCA8IDApIHsgLy8gaWYgdGhlIGNvbCBtYXJrIGV4aXN0XG4gICAgICB0aGlzLmZ1bmMgPSBtZW1vLnN1YnN0cigyLCBwb3NFbmQgLSAyKVxuICAgICAgdGhpcy5hcmdzID0gW11cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgdGhpcy5mdW5jID0gbWVtby5zdWJzdHIoMiwgcG9zQ29sIC0gMilcblxuICAgIGxldCBwb3MgPSBwb3NDb2wgKyAxXG4gICAgbGV0IHBvc1ByZXYgPSBwb3NcbiAgICBsZXQgYXJncyA9IFtdXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHBvcyA9IG1lbW8uaW5kZXhPZignLCcsIHBvcylcbiAgICAgIGlmIChwb3MgPj0gcG9zRW5kIHx8IHBvcyA8IDApIHtcbiAgICAgICAgYXJncy5wdXNoKG1lbW8uc3Vic3RyKHBvc1ByZXYsIHBvc0VuZCAtIHBvc1ByZXYpKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgYXJncy5wdXNoKG1lbW8uc3Vic3RyKHBvc1ByZXYsIHBvcyAtIHBvc1ByZXYpKVxuICAgICAgcG9zUHJldiA9ICsrcG9zXG4gICAgfVxuICAgIHRoaXMuYXJncyA9IGFyZ3NcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhdGljIHBhcnNlIChtZW1vOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKG5ldyBUcmFuc2NhbFBheWxvYWQoJycpKS5wYXJzZU1lbW8obWVtbylcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7IEVvcyB9IGZyb20gJy4uL3R5cGVzL2xpYnMnXG5pbXBvcnQge0lFb3NDbGllbnQsIElJZGVudGl0eX0gZnJvbSBcIi4uL3R5cGVzL2Vvc1wiO1xuXG5jb25zdCBzeW1Fb3NDbGllbnQgPSBTeW1ib2woJ3N5bTo6RW9zQ2xpZW50JylcbmNvbnN0IHN5bUdldElkZW50aXR5ID0gU3ltYm9sKCdzeW06OkdldElkZW50aXR5JylcblxuLyoqXG4gKiBFT1NQcm92aWRlciAtIGRlZmluZWQgdGhlIE1VU1QgaW50ZXJmYWNlcyBvZiBhIHBsYXllclxuICogQGF1dGhvciBraW5naGFuZEBmb3htYWlsLmNvbVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFT1NQcm92aWRlciB7XG5cbiAgcHJpdmF0ZSBmaWVsZCA6IGFueSA9IHt9XG5cbiAgLyoqXG4gICAgICogZ2V0IG9yIGNyZWF0ZSBzY2F0dGVyXG4gICAgICogQHJldHVybiB7ZW9zQVBJfVxuICAgICAqL1xuICBnZXQgZW9zQ2xpZW50ICgpIDogSUVvc0NsaWVudCB7XG4gICAgaWYgKHRoaXMuZmllbGRbc3ltRW9zQ2xpZW50XSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmllbGRbc3ltRW9zQ2xpZW50XVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG1ldGhvZCBub3QgeWV0IGltcGxlbWVudGVkOiB0aGlzIGludGVyZmFjZSBzaG91bGQgYmUgaW1wbGVtZW50IGJ5IHRoZSBzcGVjaWZpYyBjbGFzcy5gKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgICAqIGdldElkZW50aXR5IG9mIGN1ciBzY2F0dGVyIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHtJSWRlbnRpdHl9Pn1cbiAgICAgKi9cbiAgYXN5bmMgZ2V0SWRlbnRpdHkgKCkgOiBQcm9taXNlPElJZGVudGl0eT4ge1xuICAgIGlmICh0aGlzLmZpZWxkW3N5bUdldElkZW50aXR5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmllbGRbc3ltR2V0SWRlbnRpdHldXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbWV0aG9kIG5vdCB5ZXQgaW1wbGVtZW50ZWQ6IHRoaXMgaW50ZXJmYWNlIHNob3VsZCBiZSBpbXBsZW1lbnQgYnkgdGhlIHNwZWNpZmljIGNsYXNzLmApXG4gICAgfVxuICAgIC8vIGl0IHNob3VsZCBiZSBsaWtlIHRoYXQgOiAneyBuYW1lOiBcIm5hbWVvZnVzZXJcIiwgYXV0aG9yaXR5OiBcImFjdGl2ZVwiIH0nXG4gIH1cblxuICAvKipcbiAgICAgKiBnZXQgYXV0aCBzdHJ1Y3R1cmUgZnJvbSBpZGVudGl0eVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gLSB7IGF1dGhvcml6YXRpb24gOiBbICduYW1lQGF1dGhvcml0eScgXSB9XG4gICAgICovXG4gIGFzeW5jIGdldEF1dGggKCkge1xuICAgIGxldCBpZGVudGl0eSA9IGF3YWl0IHRoaXMuZ2V0SWRlbnRpdHkoKVxuICAgIHJldHVybiB7XG4gICAgICBhdXRob3JpemF0aW9uOiBbYCR7aWRlbnRpdHkubmFtZX1AJHtpZGVudGl0eS5hdXRob3JpdHl9YF1cbiAgICB9XG4gIH1cblxuICBpbml0RnJvbUNvbmYgKGNvbmY6IGFueSwgYWNjb3VudDogSUlkZW50aXR5KSB7XG4gICAgaWYgKGNvbmYpIHtcbiAgICAgIGxldCBlb3MgPSBFb3MoY29uZilcbiAgICAgICAgdGhpcy5maWVsZFtzeW1Fb3NDbGllbnRdID0gKCkgPT4gZW9zXG4gICAgfVxuICAgIGlmIChhY2NvdW50KSB7XG4gICAgICAgIHRoaXMuZmllbGRbc3ltR2V0SWRlbnRpdHldID0gYWNjb3VudFxuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9yZWFkaW5nUGxheWVyJ1xuZXhwb3J0ICogZnJvbSAnLi9zaWduUGxheWVyJyIsImltcG9ydCB7RW9zfSBmcm9tICcuLi90eXBlcy9saWJzJ1xuXG5pbXBvcnQge2Zvck1zfSBmcm9tICcuLi91dGlscy93YWl0J1xuaW1wb3J0IHtJRW9zQ2xpZW50LCBJSWRlbnRpdHl9IGZyb20gXCIuLi90eXBlcy9lb3NcIjtcbmltcG9ydCB7Y3JlYXRlTG9nZ2VyfSBmcm9tIFwiLi4vdXRpbHMvbG9nXCI7XG5pbXBvcnQge0lNdWx0aVNvdXJjZVBsYXllckNvbmZpZywgTXVsdGlTb3VyY2VQbGF5ZXJ9IGZyb20gXCIuLi9tdWx0aVNvdXJjZVBsYXllclwiO1xuXG5jb25zdCBsb2cgPSBjcmVhdGVMb2dnZXIoXCJyZWFkaW5nUGxheWVyXCIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZWFkaW5nUGxheWVyQ29uZmlnIGV4dGVuZHMgSU11bHRpU291cmNlUGxheWVyQ29uZmlne1xuICAgIGFjY291bnQ/OiBJSWRlbnRpdHlcbn1cblxuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBhY2NvdW50OiB7XG4gICAgICAgIG5hbWU6ICdlb3NpbycsXG4gICAgICAgIGF1dGhvcml0eTogJ2FjdGl2ZSdcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWFkaW5nUGxheWVyIGV4dGVuZHMgTXVsdGlTb3VyY2VQbGF5ZXIge1xuXG4gICAgcHJvdGVjdGVkIF9pZGVudGl0eTogSUlkZW50aXR5O1xuICAgIHByb3RlY3RlZCBfaGVhZF9ibG9ja19udW06IG51bWJlciA9IDA7XG4gICAgcHJvdGVjdGVkIF9oZWFkX3JldHJ5X2NvdW50OiBudW1iZXIgPSAwO1xuXG4gICAgcHJvdGVjdGVkIF9lb3NOb2RlczogSUVvc0NsaWVudFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mOiBJUmVhZGluZ1BsYXllckNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25mKVxuICAgICAgICB0aGlzLl9pZGVudGl0eSA9IGRlZmF1bHRDb25maWcuYWNjb3VudFxuICAgICAgICB0aGlzLl9oZWFkX2Jsb2NrX251bSA9IDBcbiAgICAgICAgdGhpcy5faGVhZF9yZXRyeV9jb3VudCA9IDBcbiAgICAgICAgbG9nLmluZm8oJ1tFb3NSZWFkaW5nXSA9PT4gQ3JlYXRlIHJlYWRpbmcgbm9kZXMgXFxuQ09ORklHUzonLCBKU09OLnN0cmluZ2lmeSh0aGlzLl9ub2RlQ29uZmlncykpXG4gICAgICAgIHRoaXMuX2Vvc05vZGVzID0gdGhpcy5fbm9kZUNvbmZpZ3MubWFwKGNmZyA9PiB7XG4gICAgICAgICAgICBsZXQgZW9zID0gRW9zKGNmZyk7XG4gICAgICAgICAgICBlb3MuX19jb25mID0gY2ZnO1xuICAgICAgICAgICAgcmV0dXJuIGVvc1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldCBlb3NDbGllbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZW9zTm9kZXMgfHwgdGhpcy5fZW9zTm9kZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW9zVXRpbCA6IE5vIEF2YWxpYWJsZSBOb2Rlcy4nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lb3NOb2Rlc1swXVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRJZGVudGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGNoZWNrTm9kZXMoY2hlY2tTcGFuTXMgPSAxNTAwMCwgcmV0cnlfbWF4ID0gNCwgYmxvY2tIZWlnaHRUb2xlcmFuY2UgPSAxMDAwKSB7IC8vIOm7mOiupDIw56eS5p+l6K+i5LiA5qyh6IqC54K5XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBhd2FpdCBmb3JNcyhjaGVja1NwYW5NcylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRW9zUmVhZGluZ10gPT0+IFN0YXJ0IENoZWNraW5nIE5vZGVzICcsIHRoaXMuZW9zQ2xpZW50Ll9fY29uZi5odHRwRW5kcG9pbnQsICdBVCcsIERhdGUubm93KCkpXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFpbkluZm8gPSBhd2FpdCB0aGlzLl9lb3NOb2Rlc1swXS5nZXRJbmZvKHt9KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkX3JldHJ5X2NvdW50ID0gMFxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhaW5JbmZvLmhlYWRfYmxvY2tfbnVtID4gdGhpcy5faGVhZF9ibG9ja19udW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRfYmxvY2tfbnVtID0gY2hhaW5JbmZvLmhlYWRfYmxvY2tfbnVtXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiBuZXcgaGVhZCBibG9jayBudW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRfYmxvY2tfbnVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8IE5vZGU6ICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lb3NDbGllbnQuX19jb25mLmh0dHBFbmRwb2ludClcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5kb21JbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLl9lb3NOb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5kb21JbmQgPT09IDApIGJyZWFrLy8gbHVja3khISDkuLogMCDnmoTmpoLnjofotorpq5gsIOivtOaYjumFjee9ruS4reeahOiKgueCuei2iuWwkSwg5q2k5pe26ZmN5L2O5Zug5Li65b+r6auY5YiH5o2i6IqC54K555qE5qaC546H5piv5rKh5q+b55eF55qEXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiB0cnkgcGljayBhbm90aGVyIG5vZGUgYnkgYmxvY2sgaGVpZ2h0IHwgTm9kZTogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lb3NOb2Rlc1tyYW5kb21JbmRdLl9fY29uZi5odHRwRW5kcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbm90aGVyQ2hhaW5JbmZvID0gYXdhaXQgdGhpcy5fZW9zTm9kZXNbcmFuZG9tSW5kXS5nZXRJbmZvKHt9KVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFub3RoZXJDaGFpbkluZm8uaGVhZF9ibG9ja19udW0gLSB0aGlzLl9oZWFkX2Jsb2NrX251bSA+IGJsb2NrSGVpZ2h0VG9sZXJhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSB0aGlzLl9lb3NOb2Rlc1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzWzBdID0gdGhpcy5fZW9zTm9kZXNbcmFuZG9tSW5kXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzW3JhbmRvbUluZF0gPSB0ZW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbRW9zUmVhZGluZ10gPT0+IHwgSW5mbyA6IG5ldyBub2RlIHNlbGVjdGVkIChieSBoZWFkIGJsb2NrKSB8IE9MRDogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5fX2NvbmYuaHR0cEVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnfCBORVc6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lb3NDbGllbnQuX19jb25mLmh0dHBFbmRwb2ludCkvLyDlpoLmnpzoioLngrnlj5HnlJ/liIfmjaIsIOWwseS4jeW6lOivpSBicmVhayDkuoYsIOW6lOivpei1sCAyMDAwbXMg55qE6YeN6K+VXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0Vvc1JlYWRpbmddID09PiB8IEluZm8gOiBubyBuZWVkcyB0byBzd2l0Y2ggbm9kZSBmb3IgYmxvY2sgaGVpZ2h0IHwgJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5vdGhlckNoYWluSW5mby5oZWFkX2Jsb2NrX251bSwgJy0nLCB0aGlzLl9oZWFkX2Jsb2NrX251bSwgJzwnLCBibG9ja0hlaWdodFRvbGVyYW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsgLy8g5aaC5p6c6YCJ5Yiw55qE6IqC54K56K6/6Zeu6YO95aSx6LSl5LqGLCDmhI/lkbPnnYDlvZPliY3oioLngrnlnKjmiYDmnInoioLngrnkuK3lj6/nlKjmgKfmm7Tpq5jnmoTmpoLnjofmm7TlpKcsIOS4jeWIh+aNouaYr+ayoeavm+eXheeahFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgLy8g5q2k5pe25L+d55WZ5Y6f6IqC54K55bm26YCA5Ye6XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGVhZF9yZXRyeV9jb3VudCA8IHJldHJ5X21heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tFb3NSZWFkaW5nXSA9PT4gfCBFcnJvciA6IEN1cnJlbnQgbm9kZSBlcnJvciB8IFJFVFJZIDonLCB0aGlzLl9oZWFkX3JldHJ5X2NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8IE5PREU6ICcsIHRoaXMuX2Vvc05vZGVzWzBdLl9fY29uZi5odHRwRW5kcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRfcmV0cnlfY291bnQgKz0gMSAvLyBhbmQgcmV0cnkgd2lsbCBzdGFydCBhZnRlciAyMDAwbXNcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbRW9zUmVhZGluZ10gPT0+IHwgRXJyb3IgOiBDdXJyZW50IG5vZGUgZXJyb3IgfCBSRVRSWSA6IEZhaWxlZCB8IE5vZGU6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lb3NOb2Rlc1swXS5fX2NvbmYuaHR0cEVuZHBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuX2Vvc05vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoYWluSW5mb05ldyA9IGF3YWl0IHRoaXMuX2Vvc05vZGVzW2ldLmdldEluZm8oe30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFpbkluZm9OZXcuaGVhZF9ibG9ja19udW0gPj0gdGhpcy5faGVhZF9ibG9ja19udW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gdGhpcy5fZW9zTm9kZXNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzWzBdID0gdGhpcy5fZW9zTm9kZXNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vvc05vZGVzW2ldID0gdGVtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tFb3NSZWFkaW5nXSA9PT4gSW5mbyA6IG5ldyBub2RlIHNlbGVjdGVkIHwgT0xEOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuX19jb25mLmh0dHBFbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnfCBORVc6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVvc0NsaWVudC5fX2NvbmYuaHR0cEVuZHBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgLy8gYW5kIHdpbGwgYmUgcmUtdGVzdCBhZnRlciAyMDAwbXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbRW9zUmVhZGluZ10gPT0+IEluZm8gOiB0ZXN0IG5vZGUgcGFzc2VkIHwgTm9kZTogJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lb3NOb2Rlc1tpXS5fX2NvbmYuaHR0cEVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUZXN0OiAnLCBjaGFpbkluZm9OZXcuaGVhZF9ibG9ja19udW0sICc8JywgdGhpcy5faGVhZF9ibG9ja19udW0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbRW9zUmVhZGluZ10gPT0+IFdhcm5pbmcgOiB0ZXN0IG5vZGUgZXJyb3IgfCBOb2RlOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW9zTm9kZXNbaV0uX19jb25mLmh0dHBFbmRwb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgZm9yTXMoMjAwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vc2lnblBsYXllciciLCJpbXBvcnQge0Vvc30gZnJvbSAnLi4vLi4vdHlwZXMvbGlicydcbmltcG9ydCB7SUF1dGhvcml6YXRpb24sIElFb3NDbGllbnQsIElJZGVudGl0eX0gZnJvbSBcIi4uLy4uL3R5cGVzL2Vvc1wiO1xuaW1wb3J0IHtUaW1lb3V0UHJvbWlzZX0gZnJvbSBcIi4uLy4uL3V0aWxzL3dhaXRcIjtcbmltcG9ydCB7SU11bHRpU291cmNlUGxheWVyQ29uZmlnLCBNdWx0aVNvdXJjZVBsYXllcn0gZnJvbSBcIi4uLy4uL211bHRpU291cmNlUGxheWVyXCI7XG5pbXBvcnQge0lTaWduUGxheWVyT3B0aW9ucywgTm9kZVN0YXRNZ3J9IGZyb20gXCIuL25vZGVTdGF0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNpZ25QbGF5ZXJDb25maWcgZXh0ZW5kcyBJTXVsdGlTb3VyY2VQbGF5ZXJDb25maWcge1xuICAgIGFjY291bnQ6IElJZGVudGl0eSxcbiAgICBvcHRpb25zPzogSVNpZ25QbGF5ZXJPcHRpb25zXG59XG5cbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgYWNjb3VudDoge1xuICAgICAgICBuYW1lOiAnZW9zaW8nLFxuICAgICAgICBhdXRob3JpdHk6ICdhY3RpdmUnXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIG1heEZhaWx1cmVSYXRlOiAwLjQ5OSxcbiAgICAgICAgZmFpbHVyZVJhdGVUaHJlc2hvbGQ6IDAuMSxcbiAgICAgICAgbWF4Q29udGludW91c0ZhaWx1cmU6IDMsXG4gICAgICAgIGNsZWFuaW5nVGltZUludGVydmFsOiAxMjAwMDAsIC8vIDIgKiA2MCAqIDEwMDA7XG4gICAgICAgIHJldml2YWxUaW1lSW50ZXJ2YWw6IDYwMDAwMCwgLy8xMCAqIDYwICogMTAwMDtcbiAgICAgICAgcmVzcG9uc2VJbnRlcnZhbFRocmVzaG9sZDogMTAwMCxcbiAgICAgICAgcmVzcG9uc2VJbnRlcnZhbERlY2xpbmU6IDEwMCxcbiAgICAgICAgbWF4Q2FsbFByb21pc2VFeGNlZWRUaW1lOiAxODAwMDAgLy8g57uP5rWL6K+VIDHliIbpkp/ml7bpl7Tku43nhLblpKrnn60sIOWPr+iDveWvvOiHtOWkp+mHj+mHjeWPkSwg5o+Q6auY5YiwNeWIhumSn1xuICAgIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBTaWduUGxheWVyIGV4dGVuZHMgTXVsdGlTb3VyY2VQbGF5ZXIge1xuXG4gICAgcHJvdGVjdGVkIF9pZGVudGl0eTogSUlkZW50aXR5O1xuICAgIHByb3RlY3RlZCBfb3B0aW9uczogSVNpZ25QbGF5ZXJPcHRpb25zO1xuXG4gICAgcHJvdGVjdGVkIF9ub2RlU3RhdGVzOiBOb2RlU3RhdE1ncjtcblxuICAgIHByb3RlY3RlZCBfY3VycmVudE5vZGVJbmRleDogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBfY29uY3VycmVudENvdW50OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mOiBJU2lnblBsYXllckNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25mKVxuICAgICAgICBjb25zdCB7YWNjb3VudCwgb3B0aW9uc30gPSBjb25mXG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0ge1xuICAgICAgICAgICAgLi4uZGVmYXVsdENvbmZpZy5hY2NvdW50LFxuICAgICAgICAgICAgLi4uYWNjb3VudFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0Q29uZmlnLm9wdGlvbnMsXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbm9kZVN0YXRlcyA9IG5ldyBOb2RlU3RhdE1ncih0aGlzLl9ub2RlQ29uZmlncywgdGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBlb3NDbGllbnQoKTogSUVvc0NsaWVudCB7XG4gICAgICAgIHRoaXMuX25vZGVTdGF0ZXMuc2V0VGhlQmVzdE5vZGVUb0N1cnJlbnQoKVxuICAgICAgICBsZXQgY29uZiA9IHRoaXMuX25vZGVTdGF0ZXMuZ2V0Q3VyTm9kZUNvbmYoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50Tm9kZVwiLCB0aGlzLl9ub2RlU3RhdGVzLl9jdXJyZW50Tm9kZUluZGV4LCBjb25mLCB0aGlzLl9ub2RlU3RhdGVzLmdldEN1ck5vZGVTdGF0KCkpO1xuICAgICAgICByZXR1cm4gbmV3IEVvcyhjb25mKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0SWRlbnRpdHkoKTogUHJvbWlzZTxJSWRlbnRpdHk+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9pZGVudGl0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWRlbnRpdHkgaGFzIG5vdCBiZWVuIHNldFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faWRlbnRpdHlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0SWRlbnRpdHkoYWNjb3VudDogSUlkZW50aXR5KSB7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0gYWNjb3VudFxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjYWxsQ2hhaW4oY29kZTogc3RyaW5nLCBmdW5jOiBzdHJpbmcsIGpzb25EYXRhOiBhbnksIGF1dGhvcml6YXRpb24/OiBJQXV0aG9yaXphdGlvbikge1xuICAgICAgICB0aGlzLl9jb25jdXJyZW50Q291bnQgKz0gMTtcblxuICAgICAgICBsZXQgY2hhaW4gPSB0aGlzLmNoYWluOyAvLyB1c2luZyBlb3NDbGllbnQgaGVyZVxuXG4gICAgICAgIGxldCBzdGFydFRpbWVTdGFtcCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIGxldCBfZW5kcG9pbnRVcmwgPSB0aGlzLl9ub2RlU3RhdGVzLmdldEN1ck5vZGVDb25mKCkuaHR0cEVuZHBvaW50O1xuXG4gICAgICAgIHRoaXMubG9nKCdTVEFSVCcsIF9lbmRwb2ludFVybCwgY29kZSwgZnVuYywganNvbkRhdGEsXG4gICAgICAgICAgICB0aGlzLl9ub2RlU3RhdGVzLmdldEN1ck5vZGVTdGF0KCksXG4gICAgICAgICAgICBgQ29uY3VycmVudCBjb3VudCA9PiAke3RoaXMuX2NvbmN1cnJlbnRDb3VudH0gYFxuICAgICAgICApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJldCA9IGF3YWl0IFRpbWVvdXRQcm9taXNlKFxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMubWF4Q2FsbFByb21pc2VFeGNlZWRUaW1lLFxuICAgICAgICAgICAgICAgIGNoYWluLmNhbGwoY29kZSwgZnVuYywganNvbkRhdGEsIGF1dGhvcml6YXRpb24gfHwge1xuICAgICAgICAgICAgICAgICAgICBhY3RvcjogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbjogXCJhY3RpdmVcIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLmNhdGNoKGV4ID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IG5vZGUgPSB0aGlzLl9ub2RlU3RhdGVzLm1hcmtTZW5kU3VjY2VzcyhzdGFydFRpbWVTdGFtcCk7XG4gICAgICAgICAgICB0aGlzLmxvZygnU1VDQ0VTUycsIF9lbmRwb2ludFVybCwgY29kZSwgZnVuYywganNvbkRhdGEsIG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5fY29uY3VycmVudENvdW50IC09IDE7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX25vZGVTdGF0ZXMubWFya1NlbmRGYWlsZWQoc3RhcnRUaW1lU3RhbXApO1xuICAgICAgICAgICAgdGhpcy5sb2coJ0ZBSUxFRCcsIF9lbmRwb2ludFVybCwgY29kZSwgZnVuYywganNvbkRhdGEsIG5vZGUsIGBFUlJPUiA9PiAkeyhlICYmIGUubWVzc2FnZSkgPyBlLm1lc3NhZ2UgOiBlfWApO1xuICAgICAgICAgICAgdGhpcy5fY29uY3VycmVudENvdW50IC09IDE7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGxvZyhtYXJrLCBlbmRQb2ludFVybCwgY29kZSwgZnVuYywganNvbkRhdGEsIG5vZGUsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYFtlb3NfY2FsbF91dGlsXSBDYWxsIGNoYWluIFtbICR7ZW5kUG9pbnRVcmx9IF1dICR7Y29kZX0uJHtmdW5jfSBbW1ske21hcmt9XV1dIDpcbkRhdGEgPT4gJHtKU09OLnN0cmluZ2lmeShqc29uRGF0YSl9XG5Ob2RlIHN0YXR1cyA9PiAke0pTT04uc3RyaW5naWZ5KG5vZGUpfVxuYCxcbiAgICAgICAgICAgIC4uLmFyZ3MpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHtJRW9zTm9kZUNvbmZpZ30gZnJvbSBcIi4uLy4uL2NvbmZpZ3NcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJU2lnblBsYXllck9wdGlvbnMge1xuICAgIG1heEZhaWx1cmVSYXRlPzogbnVtYmVyO1xuICAgIG1heENvbnRpbnVvdXNGYWlsdXJlPzogbnVtYmVyO1xuICAgIGZhaWx1cmVSYXRlVGhyZXNob2xkPzogbnVtYmVyO1xuICAgIHJlc3BvbnNlSW50ZXJ2YWxUaHJlc2hvbGQ/OiBudW1iZXI7XG4gICAgcmVzcG9uc2VJbnRlcnZhbERlY2xpbmU/OiBudW1iZXI7XG4gICAgbWF4Q2FsbFByb21pc2VFeGNlZWRUaW1lPzogbnVtYmVyO1xuICAgIGNsZWFuaW5nVGltZUludGVydmFsPzogbnVtYmVyO1xuICAgIHJldml2YWxUaW1lSW50ZXJ2YWw/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBOb2RlU3RhdCB7XG4gICAgZXJyb3JfY291bnRzOiBudW1iZXIgPSAwOyAvLyDlpLHotKXmrKHmlbBcbiAgICB0b3RhbF9jb3VudHM6IG51bWJlciA9IDE7IC8vIOaAu+iwg+eUqOasoeaVsFxuICAgIGNvbnRpbnVvdXNfZmFpbHVyZTogbnVtYmVyID0gMDsgLy8g6L+e57ut5aSx6LSl5qyh5pWwXG4gICAgZW5hYmxlZDogYm9vbGVhbiA9IHRydWU7IC8vIOW8gOWFs+eKtuaAgVxuICAgIHJlc3BvbnNlX2ludGVydmFsOiBudW1iZXIgPSAwOyAvLyDlk43lupTpl7TpmpRcbiAgICByZXZpdmFsX3RpbWU6IG51bWJlciA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7IC8vIOS4i+asoeeGlOaWreaBouWkjeaXtumXtFxuICAgIGNsZWFuaW5nX3RpbWU6IG51bWJlciA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7IC8vIOS4i+asoea4heeQhueKtuaAgeaXtumXtFxuXG4gICAgcmVjb3JkX3RvdGFsX2NvdW50cz86IG51bWJlciA9IDA7XG4gICAgcmVjb3JkX3RvdGFsX3N1Y2Nlc3M/OiBudW1iZXIgPSAwO1xuICAgIHJlY29yZF90b3RhbF9mdXNlPzogbnVtYmVyID0gMDtcbiAgICByZWNvcmRfdG90YWxfZmFpbGVkPzogbnVtYmVyID0gMDtcbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVTdGF0TWdyIHtcblxuICAgIHByb3RlY3RlZCBfbm9kZVN0YXR1czogTm9kZVN0YXRbXSA9IFtdO1xuICAgIHB1YmxpYyBfY3VycmVudE5vZGVJbmRleDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBfbm9kZUNvbmZpZ3M6IElFb3NOb2RlQ29uZmlnW10sXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBfb3B0aW9uczogSVNpZ25QbGF5ZXJPcHRpb25zXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaW5pdE5vZGVTdGF0dXMoKVxuICAgIH1cblxuICAgIHB1YmxpYyBpbml0Tm9kZVN0YXR1cygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ub2RlQ29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fbm9kZVN0YXR1cy5wdXNoKG5ldyBOb2RlU3RhdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcImluaXRpYXRlZFwiLCB0aGlzLl9ub2RlU3RhdHVzKVxuICAgICAgICB0aGlzLnNldFRoZUJlc3ROb2RlVG9DdXJyZW50KCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFRoZUJlc3ROb2RlVG9DdXJyZW50KCkge1xuICAgICAgICBsZXQgbWluX25vZGVfaWR4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5fbm9kZVN0YXR1cy5sZW5ndGgpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgIT09IHRoaXMuX25vZGVTdGF0dXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gdGhpcy50cnlDbGVhbihpKTtcbiAgICAgICAgICAgIGxldCBlcnJvcl9yYXRlID0gbm9kZS5lcnJvcl9jb3VudHMgLyBub2RlLnRvdGFsX2NvdW50cztcbiAgICAgICAgICAgIGxldCByZXZpdmFsID0gdGltZXN0YW1wID49IG5vZGUucmV2aXZhbF90aW1lO1xuXG4gICAgICAgICAgICBpZiAobm9kZS5lbmFibGVkICYmXG4gICAgICAgICAgICAgICAgKGVycm9yX3JhdGUgPj0gdGhpcy5fb3B0aW9ucy5tYXhGYWlsdXJlUmF0ZSB8fFxuICAgICAgICAgICAgICAgICAgICBub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSA+PSB0aGlzLl9vcHRpb25zLm1heENvbnRpbnVvdXNGYWlsdXJlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9kZS5yZXZpdmFsX3RpbWUgPSB0aW1lc3RhbXAgKyB0aGlzLl9vcHRpb25zLnJldml2YWxUaW1lSW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgbm9kZS5lcnJvcl9jb3VudHMgPSAwO1xuICAgICAgICAgICAgICAgIG5vZGUudG90YWxfY291bnRzID0gMTtcbiAgICAgICAgICAgICAgICBub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSA9IDA7XG4gICAgICAgICAgICAgICAgbm9kZS5yZWNvcmRfdG90YWxfZnVzZSArPSAxO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbZW9zX2NhbGxfdXRpbF0gZnVzZSAke3RoaXMuX25vZGVDb25maWdzW2ldLmh0dHBFbmRwb2ludH1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFub2RlLmVuYWJsZWQgJiYgIXJldml2YWwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG1pbl9ub2RlID0gdGhpcy5fbm9kZVN0YXR1c1ttaW5fbm9kZV9pZHhdO1xuICAgICAgICAgICAgbGV0IG1pbl9lcnJvcl9yYXRlID0gbWluX25vZGUuZXJyb3JfY291bnRzIC8gbWluX25vZGUudG90YWxfY291bnRzO1xuICAgICAgICAgICAgaWYgKG1pbl9ub2RlLmNvbnRpbnVvdXNfZmFpbHVyZSA+IG5vZGUuY29udGludW91c19mYWlsdXJlIC8vIOmAieWHuuiKgueCueeahOi/nue7reWksei0peasoeaVsOabtOWwj1xuICAgICAgICAgICAgICAgIHx8IG1pbl9lcnJvcl9yYXRlID4gZXJyb3JfcmF0ZSArIHRoaXMuX29wdGlvbnMuZmFpbHVyZVJhdGVUaHJlc2hvbGQgLy8g6YCJ5Ye66IqC54K555qE5aSx6LSl546H5pu05L2OXG4gICAgICAgICAgICAgICAgfHwgbWluX25vZGUucmVzcG9uc2VfaW50ZXJ2YWwgPiBub2RlLnJlc3BvbnNlX2ludGVydmFsICsgdGhpcy5fb3B0aW9ucy5yZXNwb25zZUludGVydmFsVGhyZXNob2xkLy8g6YCJ5Ye66IqC54K555qE55u45bqU5pe26Ze05p2D5YC85pu05b+rXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBtaW5fbm9kZV9pZHggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudE5vZGVJbmRleCA9IG1pbl9ub2RlX2lkeDtcbiAgICB9O1xuXG4gICAgcHVibGljIGdldE5vZGVDb25mKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVDb25maWdzW2luZGV4XTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Tm9kZVN0YXQoaW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9kZVN0YXR1c1tpbmRleF07XG4gICAgfVxuXG4gICAgcHVibGljIHRyeUNsZWFuKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmdldE5vZGVTdGF0KGluZGV4KVxuICAgICAgICBsZXQgdGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgaWYgKG5vZGUuY2xlYW5pbmdfdGltZSA+IHRpbWVzdGFtcCkgcmV0dXJuIG5vZGU7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXhlY3V0ZSBjbGVhbiBcIiwgbm9kZSlcbiAgICAgICAgbm9kZS5lcnJvcl9jb3VudHMgPSBNYXRoLm1heCgwLCBub2RlLmVycm9yX2NvdW50cyAtIDEpO1xuICAgICAgICBub2RlLnRvdGFsX2NvdW50cyA9IE1hdGgubWF4KDEsIG5vZGUudG90YWxfY291bnRzIC0gMSk7XG4gICAgICAgIG5vZGUuY29udGludW91c19mYWlsdXJlID0gTWF0aC5tYXgoMCwgbm9kZS5jb250aW51b3VzX2ZhaWx1cmUgLSAxKTtcbiAgICAgICAgbm9kZS5yZXNwb25zZV9pbnRlcnZhbCA9IE1hdGgubWF4KDAsIG5vZGUucmVzcG9uc2VfaW50ZXJ2YWwgLSB0aGlzLl9vcHRpb25zLnJlc3BvbnNlSW50ZXJ2YWxEZWNsaW5lKTtcbiAgICAgICAgbm9kZS5jbGVhbmluZ190aW1lID0gdGltZXN0YW1wICsgdGhpcy5fb3B0aW9ucy5jbGVhbmluZ1RpbWVJbnRlcnZhbDtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEN1ck5vZGVDb25mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2RlQ29uZih0aGlzLl9jdXJyZW50Tm9kZUluZGV4KVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDdXJOb2RlU3RhdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZVN0YXQodGhpcy5fY3VycmVudE5vZGVJbmRleClcbiAgICB9XG5cbiAgICBwdWJsaWMgbWFya1NlbmRTdWNjZXNzKHN0YXJ0VGltZXN0YW1wOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0Q3VyTm9kZVN0YXQoKTtcbiAgICAgICAgY29uc3Qgbm93ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgY29uc3QgdGltZURlbHRhID0gbm93IC0gc3RhcnRUaW1lc3RhbXA7XG4gICAgICAgIG5vZGUucmVzcG9uc2VfaW50ZXJ2YWwgPSAobm9kZS5yZXNwb25zZV9pbnRlcnZhbCArIHRpbWVEZWx0YSkgLyAyOyAvLyDnm7jlupTml7bpl7TlhazlvI86IGFbaV0gPSAodFtpXSArIGFbaS0xXSkgLyAyXG4gICAgICAgIG5vZGUuY29udGludW91c19mYWlsdXJlID0gMDtcbiAgICAgICAgbm9kZS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgbm9kZS5jbGVhbmluZ190aW1lID0gbm93ICsgdGhpcy5fb3B0aW9ucy5jbGVhbmluZ1RpbWVJbnRlcnZhbDtcbiAgICAgICAgbm9kZS50b3RhbF9jb3VudHMgKz0gMTtcbiAgICAgICAgbm9kZS5yZWNvcmRfdG90YWxfc3VjY2VzcyArPSAxO1xuICAgICAgICBub2RlLnJlY29yZF90b3RhbF9jb3VudHMgKz0gMTtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZW5kIHN1Y2NlZWRcIilcbiAgICAgICAgcmV0dXJuIG5vZGVcbiAgICB9XG5cbiAgICBwdWJsaWMgbWFya1NlbmRGYWlsZWQoc3RhcnRUaW1lc3RhbXA6IG51bWJlcikge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuZ2V0Q3VyTm9kZVN0YXQoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZW5kIGZhaWxlZCA9PT4gXCIsIG5vZGUuY29udGludW91c19mYWlsdXJlLCBub2RlLmVycm9yX2NvdW50cywgbm9kZS50b3RhbF9jb3VudHMpXG4gICAgICAgIG5vZGUuZXJyb3JfY291bnRzICs9IDE7XG4gICAgICAgIG5vZGUuY29udGludW91c19mYWlsdXJlICs9IDE7XG4gICAgICAgIG5vZGUucmV2aXZhbF90aW1lID0gc3RhcnRUaW1lc3RhbXAgKyB0aGlzLl9vcHRpb25zLnJldml2YWxUaW1lSW50ZXJ2YWw7XG4gICAgICAgIG5vZGUudG90YWxfY291bnRzICs9IDE7XG4gICAgICAgIG5vZGUucmVjb3JkX3RvdGFsX2ZhaWxlZCArPSAxO1xuICAgICAgICBub2RlLnJlY29yZF90b3RhbF9jb3VudHMgKz0gMTtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZW5kIGZhaWxlZCA8PT0gXCIsIG5vZGUuY29udGludW91c19mYWlsdXJlLCBub2RlLmVycm9yX2NvdW50cywgbm9kZS50b3RhbF9jb3VudHMpXG4gICAgICAgIHJldHVybiBub2RlXG4gICAgfVxuXG59Il0sInNvdXJjZVJvb3QiOiIifQ==